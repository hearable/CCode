
uart_printf_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000205c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000070  10001000  0000205c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001070  000020cc  00021070  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021070  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000775e  00000000  00000000  000210a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b68  00000000  00000000  00028805  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000810  00000000  00000000  0002a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e88  00000000  00000000  0002ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f79  00000000  00000000  0002ba05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f5c  00000000  00000000  0002f97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      000000fa  00000000  00000000  000328da  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017ec  00000000  00000000  000329d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003f78  00000000  00000000  000341c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 f9 04 00 00 61 05 00 00 6d 05 00 00     ........a...m...
      10:	6d 05 00 00 6d 05 00 00 6d 05 00 00 00 00 00 00     m...m...m.......
	...
      2c:	67 05 00 00 67 05 00 00 00 00 00 00 67 05 00 00     g...g.......g...
      3c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      4c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      5c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      6c:	67 05 00 00 67 05 00 00 a5 01 00 00 67 05 00 00     g...g.......g...
      7c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      8c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      9c:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      ac:	67 05 00 00 67 05 00 00 67 05 00 00 67 05 00 00     g...g...g...g...
      bc:	67 05 00 00                                         g...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     166:	2002      	movs	r0, #2
     168:	f001 f9e2 	bl	1530 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     170:	2000      	movs	r0, #0
     172:	f001 fa9d 	bl	16b0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer3);
     176:	490a      	ldr	r1, [pc, #40]	; (1a0 <timerA0_init+0x40>)
     178:	2000      	movs	r0, #0
     17a:	f001 fa0f 	bl	159c <am_hal_ctimer_config>
    // With LFRC running at 512 Hz, set up a print rate of 32 Hz.
    //  ui32Period = 8:  ~64 Hz print rate
    //  ui32Period = 16: ~32 Hz print rate
    //  ui32Period = 32: ~16 Hz print rate
    //
    ui32Period = 16;
     17e:	2310      	movs	r3, #16
     180:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     182:	687b      	ldr	r3, [r7, #4]
     184:	085b      	lsrs	r3, r3, #1
     186:	687a      	ldr	r2, [r7, #4]
     188:	f64f 71ff 	movw	r1, #65535	; 0xffff
     18c:	2000      	movs	r0, #0
     18e:	f001 faa3 	bl	16d8 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     192:	2001      	movs	r0, #1
     194:	f001 faf4 	bl	1780 <am_hal_ctimer_int_clear>
}
     198:	bf00      	nop
     19a:	3708      	adds	r7, #8
     19c:	46bd      	mov	sp, r7
     19e:	bd80      	pop	{r7, pc}
     1a0:	10001000 	.word	0x10001000

000001a4 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     1a8:	2001      	movs	r0, #1
     1aa:	f001 fae9 	bl	1780 <am_hal_ctimer_int_clear>
}
     1ae:	bf00      	nop
     1b0:	bd80      	pop	{r7, pc}
	...

000001b4 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(int32_t i32Module)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b084      	sub	sp, #16
     1b8:	af00      	add	r7, sp, #0
     1ba:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     1bc:	f3ef 8310 	mrs	r3, PRIMASK
     1c0:	60fb      	str	r3, [r7, #12]
     1c2:	b672      	cpsid	i
     1c4:	4b2c      	ldr	r3, [pc, #176]	; (278 <uart_init+0xc4>)
     1c6:	2273      	movs	r2, #115	; 0x73
     1c8:	601a      	str	r2, [r3, #0]
     1ca:	4a2c      	ldr	r2, [pc, #176]	; (27c <uart_init+0xc8>)
     1cc:	4b2b      	ldr	r3, [pc, #172]	; (27c <uart_init+0xc8>)
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     1d4:	6013      	str	r3, [r2, #0]
     1d6:	4a2a      	ldr	r2, [pc, #168]	; (280 <uart_init+0xcc>)
     1d8:	4b29      	ldr	r3, [pc, #164]	; (280 <uart_init+0xcc>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     1e0:	6013      	str	r3, [r2, #0]
     1e2:	4a28      	ldr	r2, [pc, #160]	; (284 <uart_init+0xd0>)
     1e4:	4b27      	ldr	r3, [pc, #156]	; (284 <uart_init+0xd0>)
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     1ec:	6013      	str	r3, [r2, #0]
     1ee:	4b22      	ldr	r3, [pc, #136]	; (278 <uart_init+0xc4>)
     1f0:	2200      	movs	r2, #0
     1f2:	601a      	str	r2, [r3, #0]
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     1fa:	f3ef 8310 	mrs	r3, PRIMASK
     1fe:	60bb      	str	r3, [r7, #8]
     200:	b672      	cpsid	i
     202:	4b1d      	ldr	r3, [pc, #116]	; (278 <uart_init+0xc4>)
     204:	2273      	movs	r2, #115	; 0x73
     206:	601a      	str	r2, [r3, #0]
     208:	4a1c      	ldr	r2, [pc, #112]	; (27c <uart_init+0xc8>)
     20a:	4b1c      	ldr	r3, [pc, #112]	; (27c <uart_init+0xc8>)
     20c:	681b      	ldr	r3, [r3, #0]
     20e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     212:	6013      	str	r3, [r2, #0]
     214:	4a1a      	ldr	r2, [pc, #104]	; (280 <uart_init+0xcc>)
     216:	4b1a      	ldr	r3, [pc, #104]	; (280 <uart_init+0xcc>)
     218:	681b      	ldr	r3, [r3, #0]
     21a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     21e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     222:	6013      	str	r3, [r2, #0]
     224:	4a17      	ldr	r2, [pc, #92]	; (284 <uart_init+0xd0>)
     226:	4b17      	ldr	r3, [pc, #92]	; (284 <uart_init+0xd0>)
     228:	681b      	ldr	r3, [r3, #0]
     22a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     22e:	6013      	str	r3, [r2, #0]
     230:	4b11      	ldr	r3, [pc, #68]	; (278 <uart_init+0xc4>)
     232:	2200      	movs	r2, #0
     234:	601a      	str	r2, [r3, #0]
     236:	68bb      	ldr	r3, [r7, #8]
     238:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(i32Module);
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	4618      	mov	r0, r3
     240:	f001 fde0 	bl	1e04 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     244:	687b      	ldr	r3, [r7, #4]
     246:	4618      	mov	r0, r3
     248:	f001 fdf0 	bl	1e2c <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	4618      	mov	r0, r3
     250:	f001 fdc4 	bl	1ddc <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(i32Module, &g_sUartConfig);
     254:	687b      	ldr	r3, [r7, #4]
     256:	490c      	ldr	r1, [pc, #48]	; (288 <uart_init+0xd4>)
     258:	4618      	mov	r0, r3
     25a:	f001 fd6f 	bl	1d3c <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(i32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2112      	movs	r1, #18
     262:	4618      	mov	r0, r3
     264:	f001 fe00 	bl	1e68 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     268:	687b      	ldr	r3, [r7, #4]
     26a:	4618      	mov	r0, r3
     26c:	f001 fda2 	bl	1db4 <am_hal_uart_enable>
}
     270:	bf00      	nop
     272:	3710      	adds	r7, #16
     274:	46bd      	mov	sp, r7
     276:	bd80      	pop	{r7, pc}
     278:	40010060 	.word	0x40010060
     27c:	40010048 	.word	0x40010048
     280:	40010014 	.word	0x40010014
     284:	400100f4 	.word	0x400100f4
     288:	1000100c 	.word	0x1000100c

0000028c <uart_enable>:
// Enable the UART
//
//*****************************************************************************
void
uart_enable(int32_t i32Module)
{
     28c:	b580      	push	{r7, lr}
     28e:	b084      	sub	sp, #16
     290:	af00      	add	r7, sp, #0
     292:	6078      	str	r0, [r7, #4]
    //
    // Enable the UART clock.
    //
    am_hal_uart_clock_enable(i32Module);
     294:	687b      	ldr	r3, [r7, #4]
     296:	4618      	mov	r0, r3
     298:	f001 fdc8 	bl	1e2c <am_hal_uart_clock_enable>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	4618      	mov	r0, r3
     2a0:	f001 fd88 	bl	1db4 <am_hal_uart_enable>

    //
    // Enable the UART pins.
    //
    am_bsp_pin_enable(COM_UART_TX);
     2a4:	f3ef 8310 	mrs	r3, PRIMASK
     2a8:	60fb      	str	r3, [r7, #12]
     2aa:	b672      	cpsid	i
     2ac:	4b1f      	ldr	r3, [pc, #124]	; (32c <uart_enable+0xa0>)
     2ae:	2273      	movs	r2, #115	; 0x73
     2b0:	601a      	str	r2, [r3, #0]
     2b2:	4a1f      	ldr	r2, [pc, #124]	; (330 <uart_enable+0xa4>)
     2b4:	4b1e      	ldr	r3, [pc, #120]	; (330 <uart_enable+0xa4>)
     2b6:	681b      	ldr	r3, [r3, #0]
     2b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     2bc:	6013      	str	r3, [r2, #0]
     2be:	4a1d      	ldr	r2, [pc, #116]	; (334 <uart_enable+0xa8>)
     2c0:	4b1c      	ldr	r3, [pc, #112]	; (334 <uart_enable+0xa8>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     2c8:	6013      	str	r3, [r2, #0]
     2ca:	4a1b      	ldr	r2, [pc, #108]	; (338 <uart_enable+0xac>)
     2cc:	4b1a      	ldr	r3, [pc, #104]	; (338 <uart_enable+0xac>)
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     2d4:	6013      	str	r3, [r2, #0]
     2d6:	4b15      	ldr	r3, [pc, #84]	; (32c <uart_enable+0xa0>)
     2d8:	2200      	movs	r2, #0
     2da:	601a      	str	r2, [r3, #0]
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     2e2:	f3ef 8310 	mrs	r3, PRIMASK
     2e6:	60bb      	str	r3, [r7, #8]
     2e8:	b672      	cpsid	i
     2ea:	4b10      	ldr	r3, [pc, #64]	; (32c <uart_enable+0xa0>)
     2ec:	2273      	movs	r2, #115	; 0x73
     2ee:	601a      	str	r2, [r3, #0]
     2f0:	4a0f      	ldr	r2, [pc, #60]	; (330 <uart_enable+0xa4>)
     2f2:	4b0f      	ldr	r3, [pc, #60]	; (330 <uart_enable+0xa4>)
     2f4:	681b      	ldr	r3, [r3, #0]
     2f6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     2fa:	6013      	str	r3, [r2, #0]
     2fc:	4a0d      	ldr	r2, [pc, #52]	; (334 <uart_enable+0xa8>)
     2fe:	4b0d      	ldr	r3, [pc, #52]	; (334 <uart_enable+0xa8>)
     300:	681b      	ldr	r3, [r3, #0]
     302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     30a:	6013      	str	r3, [r2, #0]
     30c:	4a0a      	ldr	r2, [pc, #40]	; (338 <uart_enable+0xac>)
     30e:	4b0a      	ldr	r3, [pc, #40]	; (338 <uart_enable+0xac>)
     310:	681b      	ldr	r3, [r3, #0]
     312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     316:	6013      	str	r3, [r2, #0]
     318:	4b04      	ldr	r3, [pc, #16]	; (32c <uart_enable+0xa0>)
     31a:	2200      	movs	r2, #0
     31c:	601a      	str	r2, [r3, #0]
     31e:	68bb      	ldr	r3, [r7, #8]
     320:	f383 8810 	msr	PRIMASK, r3
}
     324:	bf00      	nop
     326:	3710      	adds	r7, #16
     328:	46bd      	mov	sp, r7
     32a:	bd80      	pop	{r7, pc}
     32c:	40010060 	.word	0x40010060
     330:	40010048 	.word	0x40010048
     334:	40010014 	.word	0x40010014
     338:	400100f4 	.word	0x400100f4

0000033c <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(int32_t i32Module)
{
     33c:	b580      	push	{r7, lr}
     33e:	b084      	sub	sp, #16
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(i32Module, 0xFFFFFFFF);
     344:	687b      	ldr	r3, [r7, #4]
     346:	f04f 31ff 	mov.w	r1, #4294967295
     34a:	4618      	mov	r0, r3
     34c:	f001 fd2c 	bl	1da8 <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable(i32Module);
     350:	687b      	ldr	r3, [r7, #4]
     352:	4618      	mov	r0, r3
     354:	f001 fd42 	bl	1ddc <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     358:	f3ef 8310 	mrs	r3, PRIMASK
     35c:	60fb      	str	r3, [r7, #12]
     35e:	b672      	cpsid	i
     360:	4b22      	ldr	r3, [pc, #136]	; (3ec <uart_disable+0xb0>)
     362:	2273      	movs	r2, #115	; 0x73
     364:	601a      	str	r2, [r3, #0]
     366:	4a22      	ldr	r2, [pc, #136]	; (3f0 <uart_disable+0xb4>)
     368:	4b21      	ldr	r3, [pc, #132]	; (3f0 <uart_disable+0xb4>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     370:	6013      	str	r3, [r2, #0]
     372:	4a20      	ldr	r2, [pc, #128]	; (3f4 <uart_disable+0xb8>)
     374:	4b1f      	ldr	r3, [pc, #124]	; (3f4 <uart_disable+0xb8>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     37c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     380:	6013      	str	r3, [r2, #0]
     382:	4a1d      	ldr	r2, [pc, #116]	; (3f8 <uart_disable+0xbc>)
     384:	4b1c      	ldr	r3, [pc, #112]	; (3f8 <uart_disable+0xbc>)
     386:	681b      	ldr	r3, [r3, #0]
     388:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     38c:	6013      	str	r3, [r2, #0]
     38e:	4b17      	ldr	r3, [pc, #92]	; (3ec <uart_disable+0xb0>)
     390:	2200      	movs	r2, #0
     392:	601a      	str	r2, [r3, #0]
     394:	68fb      	ldr	r3, [r7, #12]
     396:	f383 8810 	msr	PRIMASK, r3
      am_bsp_pin_disable(COM_UART_RX);
     39a:	f3ef 8310 	mrs	r3, PRIMASK
     39e:	60bb      	str	r3, [r7, #8]
     3a0:	b672      	cpsid	i
     3a2:	4b12      	ldr	r3, [pc, #72]	; (3ec <uart_disable+0xb0>)
     3a4:	2273      	movs	r2, #115	; 0x73
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	4a11      	ldr	r2, [pc, #68]	; (3f0 <uart_disable+0xb4>)
     3aa:	4b11      	ldr	r3, [pc, #68]	; (3f0 <uart_disable+0xb4>)
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     3b2:	6013      	str	r3, [r2, #0]
     3b4:	4a0f      	ldr	r2, [pc, #60]	; (3f4 <uart_disable+0xb8>)
     3b6:	4b0f      	ldr	r3, [pc, #60]	; (3f4 <uart_disable+0xb8>)
     3b8:	681b      	ldr	r3, [r3, #0]
     3ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3be:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     3c2:	6013      	str	r3, [r2, #0]
     3c4:	4a0c      	ldr	r2, [pc, #48]	; (3f8 <uart_disable+0xbc>)
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <uart_disable+0xbc>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3ce:	6013      	str	r3, [r2, #0]
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <uart_disable+0xb0>)
     3d2:	2200      	movs	r2, #0
     3d4:	601a      	str	r2, [r3, #0]
     3d6:	68bb      	ldr	r3, [r7, #8]
     3d8:	f383 8810 	msr	PRIMASK, r3

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable(i32Module);
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	4618      	mov	r0, r3
     3e0:	f001 fd36 	bl	1e50 <am_hal_uart_clock_disable>
}
     3e4:	bf00      	nop
     3e6:	3710      	adds	r7, #16
     3e8:	46bd      	mov	sp, r7
     3ea:	bd80      	pop	{r7, pc}
     3ec:	40010060 	.word	0x40010060
     3f0:	40010048 	.word	0x40010048
     3f4:	40010014 	.word	0x40010014
     3f8:	400100f4 	.word	0x400100f4

000003fc <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(int32_t i32Module)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get(i32Module) & AM_HAL_UART_FR_BUSY );
     404:	bf00      	nop
     406:	687b      	ldr	r3, [r7, #4]
     408:	4618      	mov	r0, r3
     40a:	f001 fd37 	bl	1e7c <am_hal_uart_flags_get>
     40e:	4603      	mov	r3, r0
     410:	f003 0308 	and.w	r3, r3, #8
     414:	2b00      	cmp	r3, #0
     416:	d1f6      	bne.n	406 <uart_transmit_delay+0xa>
}
     418:	bf00      	nop
     41a:	3708      	adds	r7, #8
     41c:	46bd      	mov	sp, r7
     41e:	bd80      	pop	{r7, pc}

00000420 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     420:	b580      	push	{r7, lr}
     422:	b082      	sub	sp, #8
     424:	af00      	add	r7, sp, #0
    uint32_t i;
    int32_t i32Module = AM_BSP_UART_PRINT_INST;
     426:	2300      	movs	r3, #0
     428:	603b      	str	r3, [r7, #0]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     42a:	2000      	movs	r0, #0
     42c:	f001 f858 	bl	14e0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     430:	482a      	ldr	r0, [pc, #168]	; (4dc <main+0xbc>)
     432:	f000 ffbf 	bl	13b4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     436:	f000 ffa7 	bl	1388 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     43a:	4829      	ldr	r0, [pc, #164]	; (4e0 <main+0xc0>)
     43c:	f000 f916 	bl	66c <am_util_stdio_printf_init>

    //
    // Initialize and Enable the UART.
    //
    uart_init(i32Module);
     440:	6838      	ldr	r0, [r7, #0]
     442:	f7ff feb7 	bl	1b4 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_printf("UART Printf Example\n");
     446:	4827      	ldr	r0, [pc, #156]	; (4e4 <main+0xc4>)
     448:	f000 ff80 	bl	134c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     44c:	6838      	ldr	r0, [r7, #0]
     44e:	f7ff ffd5 	bl	3fc <uart_transmit_delay>
    am_util_stdio_printf("\n\tBeginning ASCII walk through:\n");
     452:	4825      	ldr	r0, [pc, #148]	; (4e8 <main+0xc8>)
     454:	f000 ff7a 	bl	134c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     458:	6838      	ldr	r0, [r7, #0]
     45a:	f7ff ffcf 	bl	3fc <uart_transmit_delay>
    am_util_stdio_printf("\t");
     45e:	4823      	ldr	r0, [pc, #140]	; (4ec <main+0xcc>)
     460:	f000 ff74 	bl	134c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     464:	6838      	ldr	r0, [r7, #0]
     466:	f7ff ffc9 	bl	3fc <uart_transmit_delay>

    //
    // Disable UART for now
    //
    uart_disable(i32Module);
     46a:	6838      	ldr	r0, [r7, #0]
     46c:	f7ff ff66 	bl	33c <uart_disable>

    //
    // TimerA0 init.
    //
    timerA0_init();
     470:	f7ff fe76 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     474:	2001      	movs	r0, #1
     476:	f001 f973 	bl	1760 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     47a:	201d      	movs	r0, #29
     47c:	f001 f98e 	bl	179c <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     480:	f001 f9b4 	bl	17ec <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     484:	f64f 71ff 	movw	r1, #65535	; 0xffff
     488:	2000      	movs	r0, #0
     48a:	f001 f8f7 	bl	167c <am_hal_ctimer_start>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     48e:	2321      	movs	r3, #33	; 0x21
     490:	607b      	str	r3, [r7, #4]
     492:	e012      	b.n	4ba <main+0x9a>
        {
            //
            // Enable UART
            //
            uart_enable(i32Module);
     494:	6838      	ldr	r0, [r7, #0]
     496:	f7ff fef9 	bl	28c <uart_enable>

            //
            // Walk through the ASCII table.
            //
            am_util_stdio_printf("%c", i);
     49a:	6879      	ldr	r1, [r7, #4]
     49c:	4814      	ldr	r0, [pc, #80]	; (4f0 <main+0xd0>)
     49e:	f000 ff55 	bl	134c <am_util_stdio_printf>
            uart_transmit_delay(i32Module);
     4a2:	6838      	ldr	r0, [r7, #0]
     4a4:	f7ff ffaa 	bl	3fc <uart_transmit_delay>

            //
            // Disable UART.
            //
            uart_disable(i32Module);
     4a8:	6838      	ldr	r0, [r7, #0]
     4aa:	f7ff ff47 	bl	33c <uart_disable>

            //
            // Go to Deep Sleep to delay.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     4ae:	2001      	movs	r0, #1
     4b0:	f001 fbaa 	bl	1c08 <am_hal_sysctrl_sleep>
        for (i = '!'; i <= '~'; i++)
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	3301      	adds	r3, #1
     4b8:	607b      	str	r3, [r7, #4]
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	2b7e      	cmp	r3, #126	; 0x7e
     4be:	d9e9      	bls.n	494 <main+0x74>
        }

        //
        // Enable the UART, print a new line, and disable.
        //
        uart_enable(i32Module);
     4c0:	6838      	ldr	r0, [r7, #0]
     4c2:	f7ff fee3 	bl	28c <uart_enable>
        am_util_stdio_printf("\n\t");
     4c6:	480b      	ldr	r0, [pc, #44]	; (4f4 <main+0xd4>)
     4c8:	f000 ff40 	bl	134c <am_util_stdio_printf>
        uart_transmit_delay(i32Module);
     4cc:	6838      	ldr	r0, [r7, #0]
     4ce:	f7ff ff95 	bl	3fc <uart_transmit_delay>
        uart_disable(i32Module);
     4d2:	6838      	ldr	r0, [r7, #0]
     4d4:	f7ff ff32 	bl	33c <uart_disable>
        for (i = '!'; i <= '~'; i++)
     4d8:	e7d9      	b.n	48e <main+0x6e>
     4da:	bf00      	nop
     4dc:	00001f04 	.word	0x00001f04
     4e0:	000013ad 	.word	0x000013ad
     4e4:	00001ebc 	.word	0x00001ebc
     4e8:	00001ed4 	.word	0x00001ed4
     4ec:	00001ef8 	.word	0x00001ef8
     4f0:	00001efc 	.word	0x00001efc
     4f4:	00001f00 	.word	0x00001f00

000004f8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     4f8:	4811      	ldr	r0, [pc, #68]	; (540 <zero_loop+0x12>)
     4fa:	4912      	ldr	r1, [pc, #72]	; (544 <zero_loop+0x16>)
     4fc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     4fe:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     502:	4811      	ldr	r0, [pc, #68]	; (548 <zero_loop+0x1a>)
     504:	6801      	ldr	r1, [r0, #0]
     506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     50a:	6001      	str	r1, [r0, #0]
     50c:	f3bf 8f4f 	dsb	sy
     510:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     514:	480d      	ldr	r0, [pc, #52]	; (54c <zero_loop+0x1e>)
     516:	490e      	ldr	r1, [pc, #56]	; (550 <zero_loop+0x22>)
     518:	4a0e      	ldr	r2, [pc, #56]	; (554 <zero_loop+0x26>)

0000051a <copy_loop>:
     51a:	f850 3b04 	ldr.w	r3, [r0], #4
     51e:	f841 3b04 	str.w	r3, [r1], #4
     522:	4291      	cmp	r1, r2
     524:	dbf9      	blt.n	51a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     526:	480c      	ldr	r0, [pc, #48]	; (558 <zero_loop+0x2a>)
     528:	490c      	ldr	r1, [pc, #48]	; (55c <zero_loop+0x2e>)
     52a:	f04f 0200 	mov.w	r2, #0

0000052e <zero_loop>:
     52e:	4288      	cmp	r0, r1
     530:	bfb8      	it	lt
     532:	f840 2b04 	strlt.w	r2, [r0], #4
     536:	dbfa      	blt.n	52e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     538:	f7ff ff72 	bl	420 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     53c:	be00      	bkpt	0x0000
}
     53e:	bf00      	nop
     540:	e000ed08 	.word	0xe000ed08
     544:	00000000 	.word	0x00000000
     548:	e000ed88 	.word	0xe000ed88
     54c:	0000205c 	.word	0x0000205c
     550:	10001000 	.word	0x10001000
     554:	10001070 	.word	0x10001070
     558:	10001070 	.word	0x10001070
     55c:	10001180 	.word	0x10001180

00000560 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     560:	b480      	push	{r7}
     562:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     564:	e7fe      	b.n	564 <am_nmi_isr+0x4>

00000566 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     566:	b480      	push	{r7}
     568:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     56a:	e7fe      	b.n	56a <am_adc_isr+0x4>

0000056c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     56c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     56e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     570:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     572:	f000 f809 	bl	588 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     576:	bd01      	pop	{r0, pc}
}
     578:	bf00      	nop
     57a:	4618      	mov	r0, r3

0000057c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     57c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     57e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     580:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     582:	4770      	bx	lr
}
     584:	bf00      	nop
     586:	4618      	mov	r0, r3

00000588 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     588:	b580      	push	{r7, lr}
     58a:	b096      	sub	sp, #88	; 0x58
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     590:	f107 030c 	add.w	r3, r7, #12
     594:	2200      	movs	r2, #0
     596:	601a      	str	r2, [r3, #0]
     598:	605a      	str	r2, [r3, #4]
     59a:	609a      	str	r2, [r3, #8]
     59c:	60da      	str	r2, [r3, #12]
     59e:	611a      	str	r2, [r3, #16]
     5a0:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     5a2:	2300      	movs	r3, #0
     5a4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     5aa:	4b2e      	ldr	r3, [pc, #184]	; (664 <am_util_faultisr_collect_data+0xdc>)
     5ac:	681b      	ldr	r3, [r3, #0]
     5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5b2:	b2db      	uxtb	r3, r3
     5b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5ba:	0a1b      	lsrs	r3, r3, #8
     5bc:	b2db      	uxtb	r3, r3
     5be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5c4:	0c1b      	lsrs	r3, r3, #16
     5c6:	b29b      	uxth	r3, r3
     5c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     5cc:	4b26      	ldr	r3, [pc, #152]	; (668 <am_util_faultisr_collect_data+0xe0>)
     5ce:	681b      	ldr	r3, [r3, #0]
     5d0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     5d2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     5d6:	b2db      	uxtb	r3, r3
     5d8:	f003 0302 	and.w	r3, r3, #2
     5dc:	2b00      	cmp	r3, #0
     5de:	d005      	beq.n	5ec <am_util_faultisr_collect_data+0x64>
     5e0:	6879      	ldr	r1, [r7, #4]
     5e2:	2006      	movs	r0, #6
     5e4:	f7ff ffca 	bl	57c <getStackedReg>
     5e8:	4603      	mov	r3, r0
     5ea:	e001      	b.n	5f0 <am_util_faultisr_collect_data+0x68>
     5ec:	f04f 33ff 	mov.w	r3, #4294967295
     5f0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5f2:	6879      	ldr	r1, [r7, #4]
     5f4:	2000      	movs	r0, #0
     5f6:	f7ff ffc1 	bl	57c <getStackedReg>
     5fa:	4603      	mov	r3, r0
     5fc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5fe:	6879      	ldr	r1, [r7, #4]
     600:	2001      	movs	r0, #1
     602:	f7ff ffbb 	bl	57c <getStackedReg>
     606:	4603      	mov	r3, r0
     608:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     60a:	6879      	ldr	r1, [r7, #4]
     60c:	2002      	movs	r0, #2
     60e:	f7ff ffb5 	bl	57c <getStackedReg>
     612:	4603      	mov	r3, r0
     614:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     616:	6879      	ldr	r1, [r7, #4]
     618:	2003      	movs	r0, #3
     61a:	f7ff ffaf 	bl	57c <getStackedReg>
     61e:	4603      	mov	r3, r0
     620:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     622:	6879      	ldr	r1, [r7, #4]
     624:	2004      	movs	r0, #4
     626:	f7ff ffa9 	bl	57c <getStackedReg>
     62a:	4603      	mov	r3, r0
     62c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     62e:	6879      	ldr	r1, [r7, #4]
     630:	2005      	movs	r0, #5
     632:	f7ff ffa3 	bl	57c <getStackedReg>
     636:	4603      	mov	r3, r0
     638:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     63a:	6879      	ldr	r1, [r7, #4]
     63c:	2006      	movs	r0, #6
     63e:	f7ff ff9d 	bl	57c <getStackedReg>
     642:	4603      	mov	r3, r0
     644:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     646:	6879      	ldr	r1, [r7, #4]
     648:	2007      	movs	r0, #7
     64a:	f7ff ff97 	bl	57c <getStackedReg>
     64e:	4603      	mov	r3, r0
     650:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     652:	f107 030c 	add.w	r3, r7, #12
     656:	4618      	mov	r0, r3
     658:	f001 f8d4 	bl	1804 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     65c:	2300      	movs	r3, #0
     65e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     660:	e7fe      	b.n	660 <am_util_faultisr_collect_data+0xd8>
     662:	bf00      	nop
     664:	e000ed28 	.word	0xe000ed28
     668:	e000ed38 	.word	0xe000ed38

0000066c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     66c:	b480      	push	{r7}
     66e:	b083      	sub	sp, #12
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     674:	4a04      	ldr	r2, [pc, #16]	; (688 <am_util_stdio_printf_init+0x1c>)
     676:	687b      	ldr	r3, [r7, #4]
     678:	6013      	str	r3, [r2, #0]
}
     67a:	bf00      	nop
     67c:	370c      	adds	r7, #12
     67e:	46bd      	mov	sp, r7
     680:	f85d 7b04 	ldr.w	r7, [sp], #4
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	1000117c 	.word	0x1000117c

0000068c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     68c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     690:	b096      	sub	sp, #88	; 0x58
     692:	af00      	add	r7, sp, #0
     694:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     698:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     69c:	0025      	movs	r5, r4
     69e:	2600      	movs	r6, #0
     6a0:	ea55 0306 	orrs.w	r3, r5, r6
     6a4:	f000 80a0 	beq.w	7e8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     6a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6ac:	0862      	lsrs	r2, r4, #1
     6ae:	ea4f 0133 	mov.w	r1, r3, rrx
     6b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     6ba:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     6be:	ea4f 0994 	mov.w	r9, r4, lsr #2
     6c2:	eb11 0308 	adds.w	r3, r1, r8
     6c6:	eb42 0409 	adc.w	r4, r2, r9
     6ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     6ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6d2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     6d6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     6da:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     6de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6e2:	eb13 030a 	adds.w	r3, r3, sl
     6e6:	eb44 040b 	adc.w	r4, r4, fp
     6ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     6ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6f2:	0a1a      	lsrs	r2, r3, #8
     6f4:	62ba      	str	r2, [r7, #40]	; 0x28
     6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     6f8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     6fc:	62ba      	str	r2, [r7, #40]	; 0x28
     6fe:	0a23      	lsrs	r3, r4, #8
     700:	62fb      	str	r3, [r7, #44]	; 0x2c
     702:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     70a:	18c9      	adds	r1, r1, r3
     70c:	eb42 0204 	adc.w	r2, r2, r4
     710:	460b      	mov	r3, r1
     712:	4614      	mov	r4, r2
     714:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     718:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     71c:	0c1a      	lsrs	r2, r3, #16
     71e:	623a      	str	r2, [r7, #32]
     720:	6a3a      	ldr	r2, [r7, #32]
     722:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     726:	623a      	str	r2, [r7, #32]
     728:	0c23      	lsrs	r3, r4, #16
     72a:	627b      	str	r3, [r7, #36]	; 0x24
     72c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     730:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     734:	18c9      	adds	r1, r1, r3
     736:	eb42 0204 	adc.w	r2, r2, r4
     73a:	460b      	mov	r3, r1
     73c:	4614      	mov	r4, r2
     73e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     742:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     746:	0023      	movs	r3, r4
     748:	603b      	str	r3, [r7, #0]
     74a:	2300      	movs	r3, #0
     74c:	607b      	str	r3, [r7, #4]
     74e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     752:	e897 0006 	ldmia.w	r7, {r1, r2}
     756:	18c9      	adds	r1, r1, r3
     758:	eb42 0204 	adc.w	r2, r2, r4
     75c:	460b      	mov	r3, r1
     75e:	4614      	mov	r4, r2
     760:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     764:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     768:	08da      	lsrs	r2, r3, #3
     76a:	613a      	str	r2, [r7, #16]
     76c:	693a      	ldr	r2, [r7, #16]
     76e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     772:	613a      	str	r2, [r7, #16]
     774:	08e3      	lsrs	r3, r4, #3
     776:	617b      	str	r3, [r7, #20]
     778:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     77c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     780:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     784:	460b      	mov	r3, r1
     786:	4614      	mov	r4, r2
     788:	00a0      	lsls	r0, r4, #2
     78a:	60f8      	str	r0, [r7, #12]
     78c:	68f8      	ldr	r0, [r7, #12]
     78e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     792:	60f8      	str	r0, [r7, #12]
     794:	009b      	lsls	r3, r3, #2
     796:	60bb      	str	r3, [r7, #8]
     798:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     79c:	185b      	adds	r3, r3, r1
     79e:	eb44 0402 	adc.w	r4, r4, r2
     7a2:	18db      	adds	r3, r3, r3
     7a4:	eb44 0404 	adc.w	r4, r4, r4
     7a8:	4619      	mov	r1, r3
     7aa:	4622      	mov	r2, r4
     7ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7b0:	1a5b      	subs	r3, r3, r1
     7b2:	eb64 0402 	sbc.w	r4, r4, r2
     7b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     7ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     7be:	3306      	adds	r3, #6
     7c0:	f144 0400 	adc.w	r4, r4, #0
     7c4:	091a      	lsrs	r2, r3, #4
     7c6:	61ba      	str	r2, [r7, #24]
     7c8:	69ba      	ldr	r2, [r7, #24]
     7ca:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     7ce:	61ba      	str	r2, [r7, #24]
     7d0:	0923      	lsrs	r3, r4, #4
     7d2:	61fb      	str	r3, [r7, #28]
     7d4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     7dc:	18c9      	adds	r1, r1, r3
     7de:	eb42 0204 	adc.w	r2, r2, r4
     7e2:	460b      	mov	r3, r1
     7e4:	4614      	mov	r4, r2
     7e6:	e029      	b.n	83c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     7ea:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7ee:	085a      	lsrs	r2, r3, #1
     7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7f2:	089b      	lsrs	r3, r3, #2
     7f4:	4413      	add	r3, r2
     7f6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7fa:	091b      	lsrs	r3, r3, #4
     7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     7fe:	4413      	add	r3, r2
     800:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     804:	0a1b      	lsrs	r3, r3, #8
     806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     808:	4413      	add	r3, r2
     80a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     80e:	0c1b      	lsrs	r3, r3, #16
     810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     812:	4413      	add	r3, r2
     814:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     818:	08db      	lsrs	r3, r3, #3
     81a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     81c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     81e:	4613      	mov	r3, r2
     820:	009b      	lsls	r3, r3, #2
     822:	4413      	add	r3, r2
     824:	005b      	lsls	r3, r3, #1
     826:	461a      	mov	r2, r3
     828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     82a:	1a9b      	subs	r3, r3, r2
     82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     830:	3306      	adds	r3, #6
     832:	091a      	lsrs	r2, r3, #4
     834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     836:	4413      	add	r3, r2
     838:	f04f 0400 	mov.w	r4, #0
    }
}
     83c:	4618      	mov	r0, r3
     83e:	4621      	mov	r1, r4
     840:	3758      	adds	r7, #88	; 0x58
     842:	46bd      	mov	sp, r7
     844:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     848:	4770      	bx	lr

0000084a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     84a:	b590      	push	{r4, r7, lr}
     84c:	b085      	sub	sp, #20
     84e:	af00      	add	r7, sp, #0
     850:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     854:	683a      	ldr	r2, [r7, #0]
     856:	687b      	ldr	r3, [r7, #4]
     858:	4313      	orrs	r3, r2
     85a:	2b00      	cmp	r3, #0
     85c:	bf0c      	ite	eq
     85e:	2301      	moveq	r3, #1
     860:	2300      	movne	r3, #0
     862:	b2db      	uxtb	r3, r3
     864:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     866:	e008      	b.n	87a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     868:	e9d7 0100 	ldrd	r0, r1, [r7]
     86c:	f7ff ff0e 	bl	68c <divu64_10>
     870:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     874:	68fb      	ldr	r3, [r7, #12]
     876:	3301      	adds	r3, #1
     878:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     87a:	e897 0018 	ldmia.w	r7, {r3, r4}
     87e:	4323      	orrs	r3, r4
     880:	d1f2      	bne.n	868 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     882:	68fb      	ldr	r3, [r7, #12]
}
     884:	4618      	mov	r0, r3
     886:	3714      	adds	r7, #20
     888:	46bd      	mov	sp, r7
     88a:	bd90      	pop	{r4, r7, pc}

0000088c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     88c:	b590      	push	{r4, r7, lr}
     88e:	b083      	sub	sp, #12
     890:	af00      	add	r7, sp, #0
     892:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     896:	e897 0018 	ldmia.w	r7, {r3, r4}
     89a:	2b00      	cmp	r3, #0
     89c:	f174 0300 	sbcs.w	r3, r4, #0
     8a0:	da06      	bge.n	8b0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     8a2:	e897 0018 	ldmia.w	r7, {r3, r4}
     8a6:	425b      	negs	r3, r3
     8a8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     8ac:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     8b0:	e897 0018 	ldmia.w	r7, {r3, r4}
     8b4:	4618      	mov	r0, r3
     8b6:	4621      	mov	r1, r4
     8b8:	f7ff ffc7 	bl	84a <ndigits_in_u64>
     8bc:	4603      	mov	r3, r0
}
     8be:	4618      	mov	r0, r3
     8c0:	370c      	adds	r7, #12
     8c2:	46bd      	mov	sp, r7
     8c4:	bd90      	pop	{r4, r7, pc}

000008c6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     8c6:	b490      	push	{r4, r7}
     8c8:	b084      	sub	sp, #16
     8ca:	af00      	add	r7, sp, #0
     8cc:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     8d0:	6839      	ldr	r1, [r7, #0]
     8d2:	687a      	ldr	r2, [r7, #4]
     8d4:	430a      	orrs	r2, r1
     8d6:	2a00      	cmp	r2, #0
     8d8:	bf0c      	ite	eq
     8da:	2201      	moveq	r2, #1
     8dc:	2200      	movne	r2, #0
     8de:	b2d2      	uxtb	r2, r2
     8e0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     8e2:	e00a      	b.n	8fa <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     8e4:	e897 0006 	ldmia.w	r7, {r1, r2}
     8e8:	090b      	lsrs	r3, r1, #4
     8ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     8ee:	0914      	lsrs	r4, r2, #4
     8f0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     8f4:	68fa      	ldr	r2, [r7, #12]
     8f6:	3201      	adds	r2, #1
     8f8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     8fa:	e897 0006 	ldmia.w	r7, {r1, r2}
     8fe:	430a      	orrs	r2, r1
     900:	d1f0      	bne.n	8e4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     902:	68fb      	ldr	r3, [r7, #12]
}
     904:	4618      	mov	r0, r3
     906:	3710      	adds	r7, #16
     908:	46bd      	mov	sp, r7
     90a:	bc90      	pop	{r4, r7}
     90c:	4770      	bx	lr

0000090e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     90e:	b480      	push	{r7}
     910:	b087      	sub	sp, #28
     912:	af00      	add	r7, sp, #0
     914:	6078      	str	r0, [r7, #4]
     916:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     918:	2300      	movs	r3, #0
     91a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     91c:	2300      	movs	r3, #0
     91e:	613b      	str	r3, [r7, #16]
     920:	2300      	movs	r3, #0
     922:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     924:	687b      	ldr	r3, [r7, #4]
     926:	781b      	ldrb	r3, [r3, #0]
     928:	2b2d      	cmp	r3, #45	; 0x2d
     92a:	d11b      	bne.n	964 <decstr_to_int+0x56>
    {
        bNeg = true;
     92c:	2301      	movs	r3, #1
     92e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     930:	687b      	ldr	r3, [r7, #4]
     932:	3301      	adds	r3, #1
     934:	607b      	str	r3, [r7, #4]
        uCnt++;
     936:	68fb      	ldr	r3, [r7, #12]
     938:	3301      	adds	r3, #1
     93a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     93c:	e012      	b.n	964 <decstr_to_int+0x56>
    {
        ++uCnt;
     93e:	68fb      	ldr	r3, [r7, #12]
     940:	3301      	adds	r3, #1
     942:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     944:	693a      	ldr	r2, [r7, #16]
     946:	4613      	mov	r3, r2
     948:	009b      	lsls	r3, r3, #2
     94a:	4413      	add	r3, r2
     94c:	005b      	lsls	r3, r3, #1
     94e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     950:	687b      	ldr	r3, [r7, #4]
     952:	781b      	ldrb	r3, [r3, #0]
     954:	461a      	mov	r2, r3
     956:	693b      	ldr	r3, [r7, #16]
     958:	4413      	add	r3, r2
     95a:	3b30      	subs	r3, #48	; 0x30
     95c:	613b      	str	r3, [r7, #16]
        pcStr++;
     95e:	687b      	ldr	r3, [r7, #4]
     960:	3301      	adds	r3, #1
     962:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     964:	687b      	ldr	r3, [r7, #4]
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2b2f      	cmp	r3, #47	; 0x2f
     96a:	d903      	bls.n	974 <decstr_to_int+0x66>
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	781b      	ldrb	r3, [r3, #0]
     970:	2b39      	cmp	r3, #57	; 0x39
     972:	d9e4      	bls.n	93e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     974:	683b      	ldr	r3, [r7, #0]
     976:	2b00      	cmp	r3, #0
     978:	d002      	beq.n	980 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     97a:	683b      	ldr	r3, [r7, #0]
     97c:	68fa      	ldr	r2, [r7, #12]
     97e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     980:	7dfb      	ldrb	r3, [r7, #23]
     982:	2b00      	cmp	r3, #0
     984:	d002      	beq.n	98c <decstr_to_int+0x7e>
     986:	693b      	ldr	r3, [r7, #16]
     988:	425b      	negs	r3, r3
     98a:	e000      	b.n	98e <decstr_to_int+0x80>
     98c:	693b      	ldr	r3, [r7, #16]
}
     98e:	4618      	mov	r0, r3
     990:	371c      	adds	r7, #28
     992:	46bd      	mov	sp, r7
     994:	f85d 7b04 	ldr.w	r7, [sp], #4
     998:	4770      	bx	lr

0000099a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     99a:	b590      	push	{r4, r7, lr}
     99c:	b091      	sub	sp, #68	; 0x44
     99e:	af00      	add	r7, sp, #0
     9a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9a4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     9a6:	2300      	movs	r3, #0
     9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
     9aa:	2300      	movs	r3, #0
     9ac:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     9ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     9b2:	f7ff fe6b 	bl	68c <divu64_10>
     9b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     9ba:	68b9      	ldr	r1, [r7, #8]
     9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     9be:	4613      	mov	r3, r2
     9c0:	009b      	lsls	r3, r3, #2
     9c2:	4413      	add	r3, r2
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	1acb      	subs	r3, r1, r3
     9c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9cc:	1c5a      	adds	r2, r3, #1
     9ce:	63fa      	str	r2, [r7, #60]	; 0x3c
     9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     9d2:	b2d2      	uxtb	r2, r2
     9d4:	3230      	adds	r2, #48	; 0x30
     9d6:	b2d2      	uxtb	r2, r2
     9d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
     9dc:	440b      	add	r3, r1
     9de:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     9e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     9ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     9ee:	4323      	orrs	r3, r4
     9f0:	d1dd      	bne.n	9ae <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9f4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d011      	beq.n	a20 <uint64_to_str+0x86>
    {
        while ( ix-- )
     9fc:	e008      	b.n	a10 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	1c5a      	adds	r2, r3, #1
     a02:	607a      	str	r2, [r7, #4]
     a04:	f107 0110 	add.w	r1, r7, #16
     a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a0a:	440a      	add	r2, r1
     a0c:	7812      	ldrb	r2, [r2, #0]
     a0e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a12:	1e5a      	subs	r2, r3, #1
     a14:	63fa      	str	r2, [r7, #60]	; 0x3c
     a16:	2b00      	cmp	r3, #0
     a18:	d1f1      	bne.n	9fe <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	2200      	movs	r2, #0
     a1e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     a22:	4618      	mov	r0, r3
     a24:	3744      	adds	r7, #68	; 0x44
     a26:	46bd      	mov	sp, r7
     a28:	bd90      	pop	{r4, r7, pc}

00000a2a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     a2a:	b4b0      	push	{r4, r5, r7}
     a2c:	b08d      	sub	sp, #52	; 0x34
     a2e:	af00      	add	r7, sp, #0
     a30:	e9c7 0102 	strd	r0, r1, [r7, #8]
     a34:	607a      	str	r2, [r7, #4]
     a36:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     a38:	2300      	movs	r3, #0
     a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a40:	4313      	orrs	r3, r2
     a42:	d131      	bne.n	aa8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a46:	1c5a      	adds	r2, r3, #1
     a48:	62fa      	str	r2, [r7, #44]	; 0x2c
     a4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a4e:	4413      	add	r3, r2
     a50:	2230      	movs	r2, #48	; 0x30
     a52:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     a56:	e027      	b.n	aa8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     a58:	7a3b      	ldrb	r3, [r7, #8]
     a5a:	f003 030f 	and.w	r3, r3, #15
     a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     a62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     a66:	2b09      	cmp	r3, #9
     a68:	d90a      	bls.n	a80 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     a6a:	78fb      	ldrb	r3, [r7, #3]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d001      	beq.n	a74 <uint64_to_hexstr+0x4a>
     a70:	2227      	movs	r2, #39	; 0x27
     a72:	e000      	b.n	a76 <uint64_to_hexstr+0x4c>
     a74:	2207      	movs	r2, #7
     a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     a7a:	4413      	add	r3, r2
     a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a82:	1c5a      	adds	r2, r3, #1
     a84:	62fa      	str	r2, [r7, #44]	; 0x2c
     a86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     a8a:	3230      	adds	r2, #48	; 0x30
     a8c:	b2d2      	uxtb	r2, r2
     a8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a92:	440b      	add	r3, r1
     a94:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a9c:	0914      	lsrs	r4, r2, #4
     a9e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     aa2:	091d      	lsrs	r5, r3, #4
     aa4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     aac:	4313      	orrs	r3, r2
     aae:	d1d3      	bne.n	a58 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ab2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d011      	beq.n	ade <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     aba:	e008      	b.n	ace <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	1c5a      	adds	r2, r3, #1
     ac0:	607a      	str	r2, [r7, #4]
     ac2:	f107 0110 	add.w	r1, r7, #16
     ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ac8:	440a      	add	r2, r1
     aca:	7812      	ldrb	r2, [r2, #0]
     acc:	701a      	strb	r2, [r3, #0]
        while (ix--)
     ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ad0:	1e5a      	subs	r2, r3, #1
     ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
     ad4:	2b00      	cmp	r3, #0
     ad6:	d1f1      	bne.n	abc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	2200      	movs	r2, #0
     adc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     ae0:	4618      	mov	r0, r3
     ae2:	3734      	adds	r7, #52	; 0x34
     ae4:	46bd      	mov	sp, r7
     ae6:	bcb0      	pop	{r4, r5, r7}
     ae8:	4770      	bx	lr

00000aea <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     aea:	b480      	push	{r7}
     aec:	b085      	sub	sp, #20
     aee:	af00      	add	r7, sp, #0
     af0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     af2:	2300      	movs	r3, #0
     af4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	2b00      	cmp	r3, #0
     afa:	d104      	bne.n	b06 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     afc:	68fb      	ldr	r3, [r7, #12]
     afe:	e009      	b.n	b14 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	3301      	adds	r3, #1
     b04:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	1c5a      	adds	r2, r3, #1
     b0a:	607a      	str	r2, [r7, #4]
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	2b00      	cmp	r3, #0
     b10:	d1f6      	bne.n	b00 <simple_strlen+0x16>
    }
    return ui32RetVal;
     b12:	68fb      	ldr	r3, [r7, #12]
}
     b14:	4618      	mov	r0, r3
     b16:	3714      	adds	r7, #20
     b18:	46bd      	mov	sp, r7
     b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b1e:	4770      	bx	lr

00000b20 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     b20:	b480      	push	{r7}
     b22:	b087      	sub	sp, #28
     b24:	af00      	add	r7, sp, #0
     b26:	60f8      	str	r0, [r7, #12]
     b28:	460b      	mov	r3, r1
     b2a:	607a      	str	r2, [r7, #4]
     b2c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     b2e:	2300      	movs	r3, #0
     b30:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2b00      	cmp	r3, #0
     b36:	dc0c      	bgt.n	b52 <padbuffer+0x32>
    {
        return i32Cnt;
     b38:	697b      	ldr	r3, [r7, #20]
     b3a:	e010      	b.n	b5e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     b3c:	68fb      	ldr	r3, [r7, #12]
     b3e:	2b00      	cmp	r3, #0
     b40:	d004      	beq.n	b4c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	1c5a      	adds	r2, r3, #1
     b46:	60fa      	str	r2, [r7, #12]
     b48:	7afa      	ldrb	r2, [r7, #11]
     b4a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     b4c:	697b      	ldr	r3, [r7, #20]
     b4e:	3301      	adds	r3, #1
     b50:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	1e5a      	subs	r2, r3, #1
     b56:	607a      	str	r2, [r7, #4]
     b58:	2b00      	cmp	r3, #0
     b5a:	d1ef      	bne.n	b3c <padbuffer+0x1c>
    }

    return i32Cnt;
     b5c:	697b      	ldr	r3, [r7, #20]
}
     b5e:	4618      	mov	r0, r3
     b60:	371c      	adds	r7, #28
     b62:	46bd      	mov	sp, r7
     b64:	f85d 7b04 	ldr.w	r7, [sp], #4
     b68:	4770      	bx	lr
	...

00000b6c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b08f      	sub	sp, #60	; 0x3c
     b70:	af00      	add	r7, sp, #0
     b72:	60f8      	str	r0, [r7, #12]
     b74:	60b9      	str	r1, [r7, #8]
     b76:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     b78:	68bb      	ldr	r3, [r7, #8]
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b80:	2b03      	cmp	r3, #3
     b82:	dc02      	bgt.n	b8a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     b84:	f06f 0302 	mvn.w	r3, #2
     b88:	e0d4      	b.n	d34 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     b8a:	edd7 7a03 	vldr	s15, [r7, #12]
     b8e:	eef5 7a40 	vcmp.f32	s15, #0.0
     b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b96:	d104      	bne.n	ba2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b98:	68bb      	ldr	r3, [r7, #8]
     b9a:	4a68      	ldr	r2, [pc, #416]	; (d3c <ftoa+0x1d0>)
     b9c:	601a      	str	r2, [r3, #0]
        return 3;
     b9e:	2303      	movs	r3, #3
     ba0:	e0c8      	b.n	d34 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     ba2:	68bb      	ldr	r3, [r7, #8]
     ba4:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     baa:	697b      	ldr	r3, [r7, #20]
     bac:	15db      	asrs	r3, r3, #23
     bae:	b2db      	uxtb	r3, r3
     bb0:	3b7f      	subs	r3, #127	; 0x7f
     bb2:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     bb4:	697b      	ldr	r3, [r7, #20]
     bb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
     bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     bbe:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     bc0:	2300      	movs	r3, #0
     bc2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     bc4:	2300      	movs	r3, #0
     bc6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     bc8:	6a3b      	ldr	r3, [r7, #32]
     bca:	2b1e      	cmp	r3, #30
     bcc:	dd02      	ble.n	bd4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     bce:	f06f 0301 	mvn.w	r3, #1
     bd2:	e0af      	b.n	d34 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     bd4:	6a3b      	ldr	r3, [r7, #32]
     bd6:	f113 0f17 	cmn.w	r3, #23
     bda:	da02      	bge.n	be2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     bdc:	f04f 33ff 	mov.w	r3, #4294967295
     be0:	e0a8      	b.n	d34 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     be2:	6a3b      	ldr	r3, [r7, #32]
     be4:	2b16      	cmp	r3, #22
     be6:	dd06      	ble.n	bf6 <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     be8:	6a3b      	ldr	r3, [r7, #32]
     bea:	3b17      	subs	r3, #23
     bec:	69fa      	ldr	r2, [r7, #28]
     bee:	fa02 f303 	lsl.w	r3, r2, r3
     bf2:	637b      	str	r3, [r7, #52]	; 0x34
     bf4:	e01a      	b.n	c2c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     bf6:	6a3b      	ldr	r3, [r7, #32]
     bf8:	2b00      	cmp	r3, #0
     bfa:	db0f      	blt.n	c1c <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     bfc:	6a3b      	ldr	r3, [r7, #32]
     bfe:	f1c3 0317 	rsb	r3, r3, #23
     c02:	69fa      	ldr	r2, [r7, #28]
     c04:	fa42 f303 	asr.w	r3, r2, r3
     c08:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     c0a:	6a3b      	ldr	r3, [r7, #32]
     c0c:	3301      	adds	r3, #1
     c0e:	69fa      	ldr	r2, [r7, #28]
     c10:	fa02 f303 	lsl.w	r3, r2, r3
     c14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c18:	633b      	str	r3, [r7, #48]	; 0x30
     c1a:	e007      	b.n	c2c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     c1c:	69fb      	ldr	r3, [r7, #28]
     c1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     c22:	6a3b      	ldr	r3, [r7, #32]
     c24:	43db      	mvns	r3, r3
     c26:	fa42 f303 	asr.w	r3, r2, r3
     c2a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     c2c:	697b      	ldr	r3, [r7, #20]
     c2e:	2b00      	cmp	r3, #0
     c30:	da04      	bge.n	c3c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     c32:	68bb      	ldr	r3, [r7, #8]
     c34:	1c5a      	adds	r2, r3, #1
     c36:	60ba      	str	r2, [r7, #8]
     c38:	222d      	movs	r2, #45	; 0x2d
     c3a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c3e:	2b00      	cmp	r3, #0
     c40:	d105      	bne.n	c4e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     c42:	68bb      	ldr	r3, [r7, #8]
     c44:	1c5a      	adds	r2, r3, #1
     c46:	60ba      	str	r2, [r7, #8]
     c48:	2230      	movs	r2, #48	; 0x30
     c4a:	701a      	strb	r2, [r3, #0]
     c4c:	e021      	b.n	c92 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c50:	2b00      	cmp	r3, #0
     c52:	dd08      	ble.n	c66 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c56:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c5a:	68ba      	ldr	r2, [r7, #8]
     c5c:	4618      	mov	r0, r3
     c5e:	4621      	mov	r1, r4
     c60:	f7ff fe9b 	bl	99a <uint64_to_str>
     c64:	e011      	b.n	c8a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	1c5a      	adds	r2, r3, #1
     c6a:	60ba      	str	r2, [r7, #8]
     c6c:	222d      	movs	r2, #45	; 0x2d
     c6e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c72:	425b      	negs	r3, r3
     c74:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c78:	68ba      	ldr	r2, [r7, #8]
     c7a:	4618      	mov	r0, r3
     c7c:	4621      	mov	r1, r4
     c7e:	f7ff fe8c 	bl	99a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     c82:	e002      	b.n	c8a <ftoa+0x11e>
        {
            pcBuf++;
     c84:	68bb      	ldr	r3, [r7, #8]
     c86:	3301      	adds	r3, #1
     c88:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     c8a:	68bb      	ldr	r3, [r7, #8]
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d1f8      	bne.n	c84 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	1c5a      	adds	r2, r3, #1
     c96:	60ba      	str	r2, [r7, #8]
     c98:	222e      	movs	r2, #46	; 0x2e
     c9a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c9e:	2b00      	cmp	r3, #0
     ca0:	d105      	bne.n	cae <ftoa+0x142>
    {
        *pcBuf++ = '0';
     ca2:	68bb      	ldr	r3, [r7, #8]
     ca4:	1c5a      	adds	r2, r3, #1
     ca6:	60ba      	str	r2, [r7, #8]
     ca8:	2230      	movs	r2, #48	; 0x30
     caa:	701a      	strb	r2, [r3, #0]
     cac:	e03c      	b.n	d28 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     cae:	68ba      	ldr	r2, [r7, #8]
     cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cb2:	1ad3      	subs	r3, r2, r3
     cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
     cb6:	1ad3      	subs	r3, r2, r3
     cb8:	3b01      	subs	r3, #1
     cba:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     cbc:	69ba      	ldr	r2, [r7, #24]
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	4293      	cmp	r3, r2
     cc2:	bfa8      	it	ge
     cc4:	4613      	movge	r3, r2
     cc6:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     cc8:	2300      	movs	r3, #0
     cca:	62fb      	str	r3, [r7, #44]	; 0x2c
     ccc:	e015      	b.n	cfa <ftoa+0x18e>
        {
            i32FracPart *= 10;
     cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     cd0:	4613      	mov	r3, r2
     cd2:	009b      	lsls	r3, r3, #2
     cd4:	4413      	add	r3, r2
     cd6:	005b      	lsls	r3, r3, #1
     cd8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     cda:	68bb      	ldr	r3, [r7, #8]
     cdc:	1c5a      	adds	r2, r3, #1
     cde:	60ba      	str	r2, [r7, #8]
     ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ce2:	1612      	asrs	r2, r2, #24
     ce4:	b2d2      	uxtb	r2, r2
     ce6:	3230      	adds	r2, #48	; 0x30
     ce8:	b2d2      	uxtb	r2, r2
     cea:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     cf2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cf6:	3301      	adds	r3, #1
     cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
     cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cfc:	69bb      	ldr	r3, [r7, #24]
     cfe:	429a      	cmp	r2, r3
     d00:	dbe5      	blt.n	cce <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	3b01      	subs	r3, #1
     d06:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d08:	e002      	b.n	d10 <ftoa+0x1a4>
        {
            --pcBuf;
     d0a:	68bb      	ldr	r3, [r7, #8]
     d0c:	3b01      	subs	r3, #1
     d0e:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d10:	68bb      	ldr	r3, [r7, #8]
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	2b30      	cmp	r3, #48	; 0x30
     d16:	d104      	bne.n	d22 <ftoa+0x1b6>
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	3b01      	subs	r3, #1
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	2b2e      	cmp	r3, #46	; 0x2e
     d20:	d1f3      	bne.n	d0a <ftoa+0x19e>
        }
        ++pcBuf;
     d22:	68bb      	ldr	r3, [r7, #8]
     d24:	3301      	adds	r3, #1
     d26:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	2200      	movs	r2, #0
     d2c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     d2e:	68ba      	ldr	r2, [r7, #8]
     d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d32:	1ad3      	subs	r3, r2, r3
} // ftoa()
     d34:	4618      	mov	r0, r3
     d36:	373c      	adds	r7, #60	; 0x3c
     d38:	46bd      	mov	sp, r7
     d3a:	bd90      	pop	{r4, r7, pc}
     d3c:	00302e30 	.word	0x00302e30

00000d40 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     d40:	b590      	push	{r4, r7, lr}
     d42:	b095      	sub	sp, #84	; 0x54
     d44:	af00      	add	r7, sp, #0
     d46:	60f8      	str	r0, [r7, #12]
     d48:	60b9      	str	r1, [r7, #8]
     d4a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     d4c:	2300      	movs	r3, #0
     d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     d50:	2300      	movs	r3, #0
     d52:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     d54:	e2e3      	b.n	131e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     d56:	2306      	movs	r3, #6
     d58:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	2b25      	cmp	r3, #37	; 0x25
     d60:	d01f      	beq.n	da2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	2b00      	cmp	r3, #0
     d66:	d015      	beq.n	d94 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     d68:	68bb      	ldr	r3, [r7, #8]
     d6a:	781b      	ldrb	r3, [r3, #0]
     d6c:	2b0a      	cmp	r3, #10
     d6e:	d10b      	bne.n	d88 <am_util_stdio_vsprintf+0x48>
     d70:	4bb1      	ldr	r3, [pc, #708]	; (1038 <am_util_stdio_vsprintf+0x2f8>)
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	2b00      	cmp	r3, #0
     d76:	d007      	beq.n	d88 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	1c5a      	adds	r2, r3, #1
     d7c:	60fa      	str	r2, [r7, #12]
     d7e:	220d      	movs	r2, #13
     d80:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d84:	3301      	adds	r3, #1
     d86:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d88:	68fb      	ldr	r3, [r7, #12]
     d8a:	1c5a      	adds	r2, r3, #1
     d8c:	60fa      	str	r2, [r7, #12]
     d8e:	68ba      	ldr	r2, [r7, #8]
     d90:	7812      	ldrb	r2, [r2, #0]
     d92:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d94:	68bb      	ldr	r3, [r7, #8]
     d96:	3301      	adds	r3, #1
     d98:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d9c:	3301      	adds	r3, #1
     d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     da0:	e2bd      	b.n	131e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     da2:	68bb      	ldr	r3, [r7, #8]
     da4:	3301      	adds	r3, #1
     da6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     da8:	2300      	movs	r3, #0
     daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     dae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     db2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     db6:	2320      	movs	r3, #32
     db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     dbc:	68bb      	ldr	r3, [r7, #8]
     dbe:	781b      	ldrb	r3, [r3, #0]
     dc0:	2b30      	cmp	r3, #48	; 0x30
     dc2:	d105      	bne.n	dd0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     dc4:	2330      	movs	r3, #48	; 0x30
     dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     dca:	68bb      	ldr	r3, [r7, #8]
     dcc:	3301      	adds	r3, #1
     dce:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     dd0:	f107 0310 	add.w	r3, r7, #16
     dd4:	4619      	mov	r1, r3
     dd6:	68b8      	ldr	r0, [r7, #8]
     dd8:	f7ff fd99 	bl	90e <decstr_to_int>
     ddc:	4603      	mov	r3, r0
     dde:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     de0:	693b      	ldr	r3, [r7, #16]
     de2:	68ba      	ldr	r2, [r7, #8]
     de4:	4413      	add	r3, r2
     de6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     de8:	68bb      	ldr	r3, [r7, #8]
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	2b73      	cmp	r3, #115	; 0x73
     dee:	d005      	beq.n	dfc <am_util_stdio_vsprintf+0xbc>
     df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df2:	2b00      	cmp	r3, #0
     df4:	da02      	bge.n	dfc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df8:	425b      	negs	r3, r3
     dfa:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     dfc:	68bb      	ldr	r3, [r7, #8]
     dfe:	781b      	ldrb	r3, [r3, #0]
     e00:	2b2e      	cmp	r3, #46	; 0x2e
     e02:	d10e      	bne.n	e22 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     e04:	68bb      	ldr	r3, [r7, #8]
     e06:	3301      	adds	r3, #1
     e08:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     e0a:	f107 0310 	add.w	r3, r7, #16
     e0e:	4619      	mov	r1, r3
     e10:	68b8      	ldr	r0, [r7, #8]
     e12:	f7ff fd7c 	bl	90e <decstr_to_int>
     e16:	4603      	mov	r3, r0
     e18:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     e1a:	693b      	ldr	r3, [r7, #16]
     e1c:	68ba      	ldr	r2, [r7, #8]
     e1e:	4413      	add	r3, r2
     e20:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	2b6c      	cmp	r3, #108	; 0x6c
     e28:	d10c      	bne.n	e44 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     e2a:	68bb      	ldr	r3, [r7, #8]
     e2c:	3301      	adds	r3, #1
     e2e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e30:	68bb      	ldr	r3, [r7, #8]
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	2b6c      	cmp	r3, #108	; 0x6c
     e36:	d105      	bne.n	e44 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     e38:	68bb      	ldr	r3, [r7, #8]
     e3a:	3301      	adds	r3, #1
     e3c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     e3e:	2301      	movs	r3, #1
     e40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     e44:	68bb      	ldr	r3, [r7, #8]
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	3b46      	subs	r3, #70	; 0x46
     e4a:	2b32      	cmp	r3, #50	; 0x32
     e4c:	f200 8254 	bhi.w	12f8 <am_util_stdio_vsprintf+0x5b8>
     e50:	a201      	add	r2, pc, #4	; (adr r2, e58 <am_util_stdio_vsprintf+0x118>)
     e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e56:	bf00      	nop
     e58:	00001283 	.word	0x00001283
     e5c:	000012f9 	.word	0x000012f9
     e60:	000012f9 	.word	0x000012f9
     e64:	000012f9 	.word	0x000012f9
     e68:	000012f9 	.word	0x000012f9
     e6c:	000012f9 	.word	0x000012f9
     e70:	000012f9 	.word	0x000012f9
     e74:	000012f9 	.word	0x000012f9
     e78:	000012f9 	.word	0x000012f9
     e7c:	000012f9 	.word	0x000012f9
     e80:	000012f9 	.word	0x000012f9
     e84:	000012f9 	.word	0x000012f9
     e88:	000012f9 	.word	0x000012f9
     e8c:	000012f9 	.word	0x000012f9
     e90:	000012f9 	.word	0x000012f9
     e94:	000012f9 	.word	0x000012f9
     e98:	000012f9 	.word	0x000012f9
     e9c:	000012f9 	.word	0x000012f9
     ea0:	0000101f 	.word	0x0000101f
     ea4:	000012f9 	.word	0x000012f9
     ea8:	000012f9 	.word	0x000012f9
     eac:	000012f9 	.word	0x000012f9
     eb0:	000012f9 	.word	0x000012f9
     eb4:	000012f9 	.word	0x000012f9
     eb8:	000012f9 	.word	0x000012f9
     ebc:	000012f9 	.word	0x000012f9
     ec0:	000012f9 	.word	0x000012f9
     ec4:	000012f9 	.word	0x000012f9
     ec8:	000012f9 	.word	0x000012f9
     ecc:	00000f25 	.word	0x00000f25
     ed0:	0000114b 	.word	0x0000114b
     ed4:	000012f9 	.word	0x000012f9
     ed8:	00001283 	.word	0x00001283
     edc:	000012f9 	.word	0x000012f9
     ee0:	000012f9 	.word	0x000012f9
     ee4:	0000114b 	.word	0x0000114b
     ee8:	000012f9 	.word	0x000012f9
     eec:	000012f9 	.word	0x000012f9
     ef0:	000012f9 	.word	0x000012f9
     ef4:	000012f9 	.word	0x000012f9
     ef8:	000012f9 	.word	0x000012f9
     efc:	000012f9 	.word	0x000012f9
     f00:	000012f9 	.word	0x000012f9
     f04:	000012f9 	.word	0x000012f9
     f08:	000012f9 	.word	0x000012f9
     f0c:	00000f4b 	.word	0x00000f4b
     f10:	000012f9 	.word	0x000012f9
     f14:	000010b9 	.word	0x000010b9
     f18:	000012f9 	.word	0x000012f9
     f1c:	000012f9 	.word	0x000012f9
     f20:	00001019 	.word	0x00001019
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	1d1a      	adds	r2, r3, #4
     f28:	607a      	str	r2, [r7, #4]
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	2b00      	cmp	r3, #0
     f34:	d005      	beq.n	f42 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     f36:	68fb      	ldr	r3, [r7, #12]
     f38:	1c5a      	adds	r2, r3, #1
     f3a:	60fa      	str	r2, [r7, #12]
     f3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     f40:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f44:	3301      	adds	r3, #1
     f46:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f48:	e1e6      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	1d1a      	adds	r2, r3, #4
     f4e:	607a      	str	r2, [r7, #4]
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     f54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     f56:	f7ff fdc8 	bl	aea <simple_strlen>
     f5a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5e:	2b00      	cmp	r3, #0
     f60:	dd2e      	ble.n	fc0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f66:	429a      	cmp	r2, r3
     f68:	d22a      	bcs.n	fc0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f6e:	1ad3      	subs	r3, r2, r3
     f70:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f78:	4619      	mov	r1, r3
     f7a:	68f8      	ldr	r0, [r7, #12]
     f7c:	f7ff fdd0 	bl	b20 <padbuffer>
     f80:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f82:	68fb      	ldr	r3, [r7, #12]
     f84:	2b00      	cmp	r3, #0
     f86:	d001      	beq.n	f8c <am_util_stdio_vsprintf+0x24c>
     f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f8a:	e000      	b.n	f8e <am_util_stdio_vsprintf+0x24e>
     f8c:	2300      	movs	r3, #0
     f8e:	68fa      	ldr	r2, [r7, #12]
     f90:	4413      	add	r3, r2
     f92:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f98:	4413      	add	r3, r2
     f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f9c:	2300      	movs	r3, #0
     f9e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     fa0:	e00e      	b.n	fc0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     fa2:	68fb      	ldr	r3, [r7, #12]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d005      	beq.n	fb4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     fa8:	68fb      	ldr	r3, [r7, #12]
     faa:	1c5a      	adds	r2, r3, #1
     fac:	60fa      	str	r2, [r7, #12]
     fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fb0:	7812      	ldrb	r2, [r2, #0]
     fb2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fb6:	3301      	adds	r3, #1
     fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fbc:	3301      	adds	r3, #1
     fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d1ec      	bne.n	fa2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fca:	2b00      	cmp	r3, #0
     fcc:	f000 81a1 	beq.w	1312 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd2:	425b      	negs	r3, r3
     fd4:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fda:	429a      	cmp	r2, r3
     fdc:	f080 8199 	bcs.w	1312 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fe4:	1ad3      	subs	r3, r2, r3
     fe6:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fee:	4619      	mov	r1, r3
     ff0:	68f8      	ldr	r0, [r7, #12]
     ff2:	f7ff fd95 	bl	b20 <padbuffer>
     ff6:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ff8:	68fb      	ldr	r3, [r7, #12]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d001      	beq.n	1002 <am_util_stdio_vsprintf+0x2c2>
     ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1000:	e000      	b.n	1004 <am_util_stdio_vsprintf+0x2c4>
    1002:	2300      	movs	r3, #0
    1004:	68fa      	ldr	r2, [r7, #12]
    1006:	4413      	add	r3, r2
    1008:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    100e:	4413      	add	r3, r2
    1010:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1012:	2300      	movs	r3, #0
    1014:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1016:	e17c      	b.n	1312 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1018:	2301      	movs	r3, #1
    101a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    101e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1022:	2b00      	cmp	r3, #0
    1024:	d00a      	beq.n	103c <am_util_stdio_vsprintf+0x2fc>
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	3307      	adds	r3, #7
    102a:	f023 0307 	bic.w	r3, r3, #7
    102e:	f103 0208 	add.w	r2, r3, #8
    1032:	607a      	str	r2, [r7, #4]
    1034:	cb18      	ldmia	r3, {r3, r4}
    1036:	e007      	b.n	1048 <am_util_stdio_vsprintf+0x308>
    1038:	10001170 	.word	0x10001170
                                      va_arg(pArgs, uint32_t);
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	1d1a      	adds	r2, r3, #4
    1040:	607a      	str	r2, [r7, #4]
    1042:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1044:	f04f 0400 	mov.w	r4, #0
    1048:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    104e:	2b00      	cmp	r3, #0
    1050:	d01e      	beq.n	1090 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1052:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1056:	f7ff fc36 	bl	8c6 <ndigits_in_hex>
    105a:	4602      	mov	r2, r0
    105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    105e:	1a9b      	subs	r3, r3, r2
    1060:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1066:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1068:	4619      	mov	r1, r3
    106a:	68f8      	ldr	r0, [r7, #12]
    106c:	f7ff fd58 	bl	b20 <padbuffer>
    1070:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	2b00      	cmp	r3, #0
    1076:	d001      	beq.n	107c <am_util_stdio_vsprintf+0x33c>
    1078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    107a:	e000      	b.n	107e <am_util_stdio_vsprintf+0x33e>
    107c:	2300      	movs	r3, #0
    107e:	68fa      	ldr	r2, [r7, #12]
    1080:	4413      	add	r3, r2
    1082:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1088:	4413      	add	r3, r2
    108a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    108c:	2300      	movs	r3, #0
    108e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1090:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1094:	68fa      	ldr	r2, [r7, #12]
    1096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    109a:	f7ff fcc6 	bl	a2a <uint64_to_hexstr>
    109e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d003      	beq.n	10ae <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    10a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10a8:	68fa      	ldr	r2, [r7, #12]
    10aa:	4413      	add	r3, r2
    10ac:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10b2:	4413      	add	r3, r2
    10b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10b6:	e12f      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    10b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10bc:	2b00      	cmp	r3, #0
    10be:	d008      	beq.n	10d2 <am_util_stdio_vsprintf+0x392>
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	3307      	adds	r3, #7
    10c4:	f023 0307 	bic.w	r3, r3, #7
    10c8:	f103 0208 	add.w	r2, r3, #8
    10cc:	607a      	str	r2, [r7, #4]
    10ce:	cb18      	ldmia	r3, {r3, r4}
    10d0:	e005      	b.n	10de <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	1d1a      	adds	r2, r3, #4
    10d6:	607a      	str	r2, [r7, #4]
    10d8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    10da:	f04f 0400 	mov.w	r4, #0
    10de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    10e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10e4:	2b00      	cmp	r3, #0
    10e6:	d01e      	beq.n	1126 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    10e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10ec:	f7ff fbad 	bl	84a <ndigits_in_u64>
    10f0:	4602      	mov	r2, r0
    10f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f4:	1a9b      	subs	r3, r3, r2
    10f6:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10fe:	4619      	mov	r1, r3
    1100:	68f8      	ldr	r0, [r7, #12]
    1102:	f7ff fd0d 	bl	b20 <padbuffer>
    1106:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	2b00      	cmp	r3, #0
    110c:	d001      	beq.n	1112 <am_util_stdio_vsprintf+0x3d2>
    110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1110:	e000      	b.n	1114 <am_util_stdio_vsprintf+0x3d4>
    1112:	2300      	movs	r3, #0
    1114:	68fa      	ldr	r2, [r7, #12]
    1116:	4413      	add	r3, r2
    1118:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    111c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    111e:	4413      	add	r3, r2
    1120:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1122:	2300      	movs	r3, #0
    1124:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1126:	68fa      	ldr	r2, [r7, #12]
    1128:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    112c:	f7ff fc35 	bl	99a <uint64_to_str>
    1130:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1132:	68fb      	ldr	r3, [r7, #12]
    1134:	2b00      	cmp	r3, #0
    1136:	d003      	beq.n	1140 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    113a:	68fa      	ldr	r2, [r7, #12]
    113c:	4413      	add	r3, r2
    113e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1144:	4413      	add	r3, r2
    1146:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1148:	e0e6      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    114a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    114e:	2b00      	cmp	r3, #0
    1150:	d008      	beq.n	1164 <am_util_stdio_vsprintf+0x424>
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	3307      	adds	r3, #7
    1156:	f023 0307 	bic.w	r3, r3, #7
    115a:	f103 0208 	add.w	r2, r3, #8
    115e:	607a      	str	r2, [r7, #4]
    1160:	cb18      	ldmia	r3, {r3, r4}
    1162:	e005      	b.n	1170 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	1d1a      	adds	r2, r3, #4
    1168:	607a      	str	r2, [r7, #4]
    116a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    116c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1170:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1174:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1178:	2b00      	cmp	r3, #0
    117a:	f174 0300 	sbcs.w	r3, r4, #0
    117e:	da0a      	bge.n	1196 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1180:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1184:	425b      	negs	r3, r3
    1186:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    118a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    118e:	2301      	movs	r3, #1
    1190:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1194:	e006      	b.n	11a4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1196:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    119a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    119e:	2300      	movs	r3, #0
    11a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    11a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a6:	2b00      	cmp	r3, #0
    11a8:	d04a      	beq.n	1240 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    11aa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    11ae:	4618      	mov	r0, r3
    11b0:	4621      	mov	r1, r4
    11b2:	f7ff fb6b 	bl	88c <ndigits_in_i64>
    11b6:	4602      	mov	r2, r0
    11b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ba:	1a9b      	subs	r3, r3, r2
    11bc:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    11be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11c2:	2b00      	cmp	r3, #0
    11c4:	d011      	beq.n	11ea <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    11c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c8:	3b01      	subs	r3, #1
    11ca:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    11cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11d0:	2b30      	cmp	r3, #48	; 0x30
    11d2:	d10a      	bne.n	11ea <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    11d4:	68fb      	ldr	r3, [r7, #12]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d004      	beq.n	11e4 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    11da:	68fb      	ldr	r3, [r7, #12]
    11dc:	1c5a      	adds	r2, r3, #1
    11de:	60fa      	str	r2, [r7, #12]
    11e0:	222d      	movs	r2, #45	; 0x2d
    11e2:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    11e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11e6:	3301      	adds	r3, #1
    11e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11f0:	4619      	mov	r1, r3
    11f2:	68f8      	ldr	r0, [r7, #12]
    11f4:	f7ff fc94 	bl	b20 <padbuffer>
    11f8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    11fa:	68fb      	ldr	r3, [r7, #12]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d001      	beq.n	1204 <am_util_stdio_vsprintf+0x4c4>
    1200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1202:	e000      	b.n	1206 <am_util_stdio_vsprintf+0x4c6>
    1204:	2300      	movs	r3, #0
    1206:	68fa      	ldr	r2, [r7, #12]
    1208:	4413      	add	r3, r2
    120a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    120e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1210:	4413      	add	r3, r2
    1212:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1214:	2300      	movs	r3, #0
    1216:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    121c:	2b00      	cmp	r3, #0
    121e:	d01e      	beq.n	125e <am_util_stdio_vsprintf+0x51e>
    1220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1224:	2b20      	cmp	r3, #32
    1226:	d11a      	bne.n	125e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	2b00      	cmp	r3, #0
    122c:	d004      	beq.n	1238 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    122e:	68fb      	ldr	r3, [r7, #12]
    1230:	1c5a      	adds	r2, r3, #1
    1232:	60fa      	str	r2, [r7, #12]
    1234:	222d      	movs	r2, #45	; 0x2d
    1236:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    123a:	3301      	adds	r3, #1
    123c:	63fb      	str	r3, [r7, #60]	; 0x3c
    123e:	e00e      	b.n	125e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1240:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1244:	2b00      	cmp	r3, #0
    1246:	d00a      	beq.n	125e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	2b00      	cmp	r3, #0
    124c:	d004      	beq.n	1258 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    124e:	68fb      	ldr	r3, [r7, #12]
    1250:	1c5a      	adds	r2, r3, #1
    1252:	60fa      	str	r2, [r7, #12]
    1254:	222d      	movs	r2, #45	; 0x2d
    1256:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    125a:	3301      	adds	r3, #1
    125c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    125e:	68fa      	ldr	r2, [r7, #12]
    1260:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1264:	f7ff fb99 	bl	99a <uint64_to_str>
    1268:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    126a:	68fb      	ldr	r3, [r7, #12]
    126c:	2b00      	cmp	r3, #0
    126e:	d003      	beq.n	1278 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1272:	68fa      	ldr	r2, [r7, #12]
    1274:	4413      	add	r3, r2
    1276:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    127a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    127c:	4413      	add	r3, r2
    127e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1280:	e04a      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	2b00      	cmp	r3, #0
    1286:	d046      	beq.n	1316 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	3307      	adds	r3, #7
    128c:	f023 0307 	bic.w	r3, r3, #7
    1290:	f103 0208 	add.w	r2, r3, #8
    1294:	607a      	str	r2, [r7, #4]
    1296:	cb18      	ldmia	r3, {r3, r4}
    1298:	4618      	mov	r0, r3
    129a:	4621      	mov	r1, r4
    129c:	f7fe ff10 	bl	c0 <__aeabi_d2f>
    12a0:	4603      	mov	r3, r0
    12a2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	2214      	movs	r2, #20
    12a8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    12aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12ac:	68f9      	ldr	r1, [r7, #12]
    12ae:	6978      	ldr	r0, [r7, #20]
    12b0:	f7ff fc5c 	bl	b6c <ftoa>
    12b4:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    12b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12b8:	2b00      	cmp	r3, #0
    12ba:	da14      	bge.n	12e6 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    12bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12be:	f1b3 3fff 	cmp.w	r3, #4294967295
    12c2:	d102      	bne.n	12ca <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    12c4:	4b1e      	ldr	r3, [pc, #120]	; (1340 <am_util_stdio_vsprintf+0x600>)
    12c6:	62bb      	str	r3, [r7, #40]	; 0x28
    12c8:	e008      	b.n	12dc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    12ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12cc:	f113 0f02 	cmn.w	r3, #2
    12d0:	d102      	bne.n	12d8 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    12d2:	4b1c      	ldr	r3, [pc, #112]	; (1344 <am_util_stdio_vsprintf+0x604>)
    12d4:	62bb      	str	r3, [r7, #40]	; 0x28
    12d6:	e001      	b.n	12dc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    12d8:	4b1b      	ldr	r3, [pc, #108]	; (1348 <am_util_stdio_vsprintf+0x608>)
    12da:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    12e0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    12e2:	2303      	movs	r3, #3
    12e4:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    12e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12ea:	4413      	add	r3, r2
    12ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    12ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12f0:	68fa      	ldr	r2, [r7, #12]
    12f2:	4413      	add	r3, r2
    12f4:	60fb      	str	r3, [r7, #12]
                }
                break;
    12f6:	e00e      	b.n	1316 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d005      	beq.n	130a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	1c5a      	adds	r2, r3, #1
    1302:	60fa      	str	r2, [r7, #12]
    1304:	68ba      	ldr	r2, [r7, #8]
    1306:	7812      	ldrb	r2, [r2, #0]
    1308:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    130a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    130c:	3301      	adds	r3, #1
    130e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1310:	e002      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>
                break;
    1312:	bf00      	nop
    1314:	e000      	b.n	1318 <am_util_stdio_vsprintf+0x5d8>
                break;
    1316:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1318:	68bb      	ldr	r3, [r7, #8]
    131a:	3301      	adds	r3, #1
    131c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    131e:	68bb      	ldr	r3, [r7, #8]
    1320:	781b      	ldrb	r3, [r3, #0]
    1322:	2b00      	cmp	r3, #0
    1324:	f47f ad17 	bne.w	d56 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	2b00      	cmp	r3, #0
    132c:	d002      	beq.n	1334 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	2200      	movs	r2, #0
    1332:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1336:	4618      	mov	r0, r3
    1338:	3754      	adds	r7, #84	; 0x54
    133a:	46bd      	mov	sp, r7
    133c:	bd90      	pop	{r4, r7, pc}
    133e:	bf00      	nop
    1340:	00302e30 	.word	0x00302e30
    1344:	00232e23 	.word	0x00232e23
    1348:	003f2e3f 	.word	0x003f2e3f

0000134c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    134c:	b40f      	push	{r0, r1, r2, r3}
    134e:	b580      	push	{r7, lr}
    1350:	b082      	sub	sp, #8
    1352:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1354:	f107 0314 	add.w	r3, r7, #20
    1358:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    135a:	683a      	ldr	r2, [r7, #0]
    135c:	6939      	ldr	r1, [r7, #16]
    135e:	4808      	ldr	r0, [pc, #32]	; (1380 <am_util_stdio_printf+0x34>)
    1360:	f7ff fcee 	bl	d40 <am_util_stdio_vsprintf>
    1364:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1366:	4b07      	ldr	r3, [pc, #28]	; (1384 <am_util_stdio_printf+0x38>)
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	4805      	ldr	r0, [pc, #20]	; (1380 <am_util_stdio_printf+0x34>)
    136c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    136e:	687b      	ldr	r3, [r7, #4]
}
    1370:	4618      	mov	r0, r3
    1372:	3708      	adds	r7, #8
    1374:	46bd      	mov	sp, r7
    1376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    137a:	b004      	add	sp, #16
    137c:	4770      	bx	lr
    137e:	bf00      	nop
    1380:	10001070 	.word	0x10001070
    1384:	1000117c 	.word	0x1000117c

00001388 <am_bsp_low_power_init>:
    1388:	b508      	push	{r3, lr}
    138a:	f000 fba9 	bl	1ae0 <am_hal_pwrctrl_bucks_init>
    138e:	f000 fc15 	bl	1bbc <am_hal_pwrctrl_low_power_init>
    1392:	f000 fd8d 	bl	1eb0 <am_hal_vcomp_disable>
    1396:	2001      	movs	r0, #1
    1398:	f000 fc20 	bl	1bdc <am_hal_rtc_osc_select>
    139c:	2001      	movs	r0, #1
    139e:	f000 f8d1 	bl	1544 <am_hal_clkgen_osc_stop>
    13a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    13a6:	f000 bc27 	b.w	1bf8 <am_hal_rtc_osc_disable>
    13aa:	bf00      	nop

000013ac <am_bsp_uart_string_print>:
    13ac:	4601      	mov	r1, r0
    13ae:	2000      	movs	r0, #0
    13b0:	f000 bd6a 	b.w	1e88 <am_hal_uart_string_transmit_polled>

000013b4 <am_hal_cachectrl_enable>:
    13b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13b6:	4604      	mov	r4, r0
    13b8:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    13bc:	78a7      	ldrb	r7, [r4, #2]
    13be:	7863      	ldrb	r3, [r4, #1]
    13c0:	78e2      	ldrb	r2, [r4, #3]
    13c2:	7925      	ldrb	r5, [r4, #4]
    13c4:	79a1      	ldrb	r1, [r4, #6]
    13c6:	00be      	lsls	r6, r7, #2
    13c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    13cc:	f006 0304 	and.w	r3, r6, #4
    13d0:	f00e 0602 	and.w	r6, lr, #2
    13d4:	431e      	orrs	r6, r3
    13d6:	f042 0201 	orr.w	r2, r2, #1
    13da:	79e3      	ldrb	r3, [r4, #7]
    13dc:	01ed      	lsls	r5, r5, #7
    13de:	4316      	orrs	r6, r2
    13e0:	b2ed      	uxtb	r5, r5
    13e2:	7a22      	ldrb	r2, [r4, #8]
    13e4:	0289      	lsls	r1, r1, #10
    13e6:	432e      	orrs	r6, r5
    13e8:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    13ec:	7a65      	ldrb	r5, [r4, #9]
    13ee:	02db      	lsls	r3, r3, #11
    13f0:	430e      	orrs	r6, r1
    13f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    13f6:	0312      	lsls	r2, r2, #12
    13f8:	7aa1      	ldrb	r1, [r4, #10]
    13fa:	431e      	orrs	r6, r3
    13fc:	042d      	lsls	r5, r5, #16
    13fe:	b293      	uxth	r3, r2
    1400:	7ae2      	ldrb	r2, [r4, #11]
    1402:	431e      	orrs	r6, r3
    1404:	0509      	lsls	r1, r1, #20
    1406:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    140a:	0612      	lsls	r2, r2, #24
    140c:	4333      	orrs	r3, r6
    140e:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1412:	00bf      	lsls	r7, r7, #2
    1414:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1418:	4333      	orrs	r3, r6
    141a:	430b      	orrs	r3, r1
    141c:	f007 0508 	and.w	r5, r7, #8
    1420:	431d      	orrs	r5, r3
    1422:	f000 fa55 	bl	18d0 <am_hal_pwrctrl_memory_enable>
    1426:	482c      	ldr	r0, [pc, #176]	; (14d8 <am_hal_cachectrl_enable+0x124>)
    1428:	4b2c      	ldr	r3, [pc, #176]	; (14dc <am_hal_cachectrl_enable+0x128>)
    142a:	6005      	str	r5, [r0, #0]
    142c:	2232      	movs	r2, #50	; 0x32
    142e:	681e      	ldr	r6, [r3, #0]
    1430:	0777      	lsls	r7, r6, #29
    1432:	d41e      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1434:	681f      	ldr	r7, [r3, #0]
    1436:	077e      	lsls	r6, r7, #29
    1438:	f102 32ff 	add.w	r2, r2, #4294967295
    143c:	d419      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    143e:	6819      	ldr	r1, [r3, #0]
    1440:	074f      	lsls	r7, r1, #29
    1442:	d416      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1444:	6818      	ldr	r0, [r3, #0]
    1446:	0746      	lsls	r6, r0, #29
    1448:	d413      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    144a:	681e      	ldr	r6, [r3, #0]
    144c:	0770      	lsls	r0, r6, #29
    144e:	d410      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1450:	681f      	ldr	r7, [r3, #0]
    1452:	0779      	lsls	r1, r7, #29
    1454:	d40d      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1456:	6819      	ldr	r1, [r3, #0]
    1458:	074f      	lsls	r7, r1, #29
    145a:	d40a      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    145c:	6818      	ldr	r0, [r3, #0]
    145e:	0746      	lsls	r6, r0, #29
    1460:	d407      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1462:	681e      	ldr	r6, [r3, #0]
    1464:	0770      	lsls	r0, r6, #29
    1466:	d404      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    1468:	681f      	ldr	r7, [r3, #0]
    146a:	0779      	lsls	r1, r7, #29
    146c:	d401      	bmi.n	1472 <am_hal_cachectrl_enable+0xbe>
    146e:	3a09      	subs	r2, #9
    1470:	d1dd      	bne.n	142e <am_hal_cachectrl_enable+0x7a>
    1472:	4b1a      	ldr	r3, [pc, #104]	; (14dc <am_hal_cachectrl_enable+0x128>)
    1474:	681a      	ldr	r2, [r3, #0]
    1476:	f042 0101 	orr.w	r1, r2, #1
    147a:	6019      	str	r1, [r3, #0]
    147c:	2232      	movs	r2, #50	; 0x32
    147e:	6818      	ldr	r0, [r3, #0]
    1480:	0740      	lsls	r0, r0, #29
    1482:	d41e      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    1484:	681e      	ldr	r6, [r3, #0]
    1486:	0771      	lsls	r1, r6, #29
    1488:	f102 32ff 	add.w	r2, r2, #4294967295
    148c:	d419      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    148e:	681f      	ldr	r7, [r3, #0]
    1490:	077f      	lsls	r7, r7, #29
    1492:	d416      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    1494:	6819      	ldr	r1, [r3, #0]
    1496:	074e      	lsls	r6, r1, #29
    1498:	d413      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    149a:	6818      	ldr	r0, [r3, #0]
    149c:	0740      	lsls	r0, r0, #29
    149e:	d410      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14a0:	681e      	ldr	r6, [r3, #0]
    14a2:	0771      	lsls	r1, r6, #29
    14a4:	d40d      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14a6:	681f      	ldr	r7, [r3, #0]
    14a8:	077f      	lsls	r7, r7, #29
    14aa:	d40a      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14ac:	6819      	ldr	r1, [r3, #0]
    14ae:	074e      	lsls	r6, r1, #29
    14b0:	d407      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14b2:	6818      	ldr	r0, [r3, #0]
    14b4:	0740      	lsls	r0, r0, #29
    14b6:	d404      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14b8:	681e      	ldr	r6, [r3, #0]
    14ba:	0771      	lsls	r1, r6, #29
    14bc:	d401      	bmi.n	14c2 <am_hal_cachectrl_enable+0x10e>
    14be:	3a09      	subs	r2, #9
    14c0:	d1dd      	bne.n	147e <am_hal_cachectrl_enable+0xca>
    14c2:	7964      	ldrb	r4, [r4, #5]
    14c4:	4f04      	ldr	r7, [pc, #16]	; (14d8 <am_hal_cachectrl_enable+0x124>)
    14c6:	0223      	lsls	r3, r4, #8
    14c8:	f403 7100 	and.w	r1, r3, #512	; 0x200
    14cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
    14d0:	4311      	orrs	r1, r2
    14d2:	4329      	orrs	r1, r5
    14d4:	6039      	str	r1, [r7, #0]
    14d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14d8:	40018000 	.word	0x40018000
    14dc:	40018008 	.word	0x40018008

000014e0 <am_hal_clkgen_sysclk_select>:
    14e0:	b510      	push	{r4, lr}
    14e2:	4604      	mov	r4, r0
    14e4:	b120      	cbz	r0, 14f0 <am_hal_clkgen_sysclk_select+0x10>
    14e6:	4a06      	ldr	r2, [pc, #24]	; (1500 <am_hal_clkgen_sysclk_select+0x20>)
    14e8:	4806      	ldr	r0, [pc, #24]	; (1504 <am_hal_clkgen_sysclk_select+0x24>)
    14ea:	2150      	movs	r1, #80	; 0x50
    14ec:	f000 f94e 	bl	178c <am_hal_debug_error>
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <am_hal_clkgen_sysclk_select+0x28>)
    14f2:	4906      	ldr	r1, [pc, #24]	; (150c <am_hal_clkgen_sysclk_select+0x2c>)
    14f4:	2047      	movs	r0, #71	; 0x47
    14f6:	2200      	movs	r2, #0
    14f8:	6018      	str	r0, [r3, #0]
    14fa:	600c      	str	r4, [r1, #0]
    14fc:	601a      	str	r2, [r3, #0]
    14fe:	bd10      	pop	{r4, pc}
    1500:	00001f10 	.word	0x00001f10
    1504:	00001f48 	.word	0x00001f48
    1508:	40004014 	.word	0x40004014
    150c:	40004018 	.word	0x40004018

00001510 <am_hal_clkgen_sysclk_get>:
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <am_hal_clkgen_sysclk_get+0x14>)
    1512:	4905      	ldr	r1, [pc, #20]	; (1528 <am_hal_clkgen_sysclk_get+0x18>)
    1514:	681a      	ldr	r2, [r3, #0]
    1516:	4805      	ldr	r0, [pc, #20]	; (152c <am_hal_clkgen_sysclk_get+0x1c>)
    1518:	f012 0f01 	tst.w	r2, #1
    151c:	bf08      	it	eq
    151e:	4608      	moveq	r0, r1
    1520:	4770      	bx	lr
    1522:	bf00      	nop
    1524:	40004018 	.word	0x40004018
    1528:	02dc6c00 	.word	0x02dc6c00
    152c:	016e3600 	.word	0x016e3600

00001530 <am_hal_clkgen_osc_start>:
    1530:	0783      	lsls	r3, r0, #30
    1532:	d004      	beq.n	153e <am_hal_clkgen_osc_start+0xe>
    1534:	4a02      	ldr	r2, [pc, #8]	; (1540 <am_hal_clkgen_osc_start+0x10>)
    1536:	6813      	ldr	r3, [r2, #0]
    1538:	ea23 0000 	bic.w	r0, r3, r0
    153c:	6010      	str	r0, [r2, #0]
    153e:	4770      	bx	lr
    1540:	4000400c 	.word	0x4000400c

00001544 <am_hal_clkgen_osc_stop>:
    1544:	0783      	lsls	r3, r0, #30
    1546:	d003      	beq.n	1550 <am_hal_clkgen_osc_stop+0xc>
    1548:	4a02      	ldr	r2, [pc, #8]	; (1554 <am_hal_clkgen_osc_stop+0x10>)
    154a:	6813      	ldr	r3, [r2, #0]
    154c:	4318      	orrs	r0, r3
    154e:	6010      	str	r0, [r2, #0]
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	4000400c 	.word	0x4000400c

00001558 <am_hal_clkgen_uarten_set>:
    1558:	2801      	cmp	r0, #1
    155a:	d900      	bls.n	155e <am_hal_clkgen_uarten_set+0x6>
    155c:	4770      	bx	lr
    155e:	2903      	cmp	r1, #3
    1560:	d8fc      	bhi.n	155c <am_hal_clkgen_uarten_set+0x4>
    1562:	f3ef 8310 	mrs	r3, PRIMASK
    1566:	b430      	push	{r4, r5}
    1568:	b082      	sub	sp, #8
    156a:	9301      	str	r3, [sp, #4]
    156c:	b672      	cpsid	i
    156e:	4b0a      	ldr	r3, [pc, #40]	; (1598 <am_hal_clkgen_uarten_set+0x40>)
    1570:	00c5      	lsls	r5, r0, #3
    1572:	681c      	ldr	r4, [r3, #0]
    1574:	2203      	movs	r2, #3
    1576:	40aa      	lsls	r2, r5
    1578:	ea24 0502 	bic.w	r5, r4, r2
    157c:	601d      	str	r5, [r3, #0]
    157e:	fb00 f000 	mul.w	r0, r0, r0
    1582:	681a      	ldr	r2, [r3, #0]
    1584:	00c0      	lsls	r0, r0, #3
    1586:	4081      	lsls	r1, r0
    1588:	4311      	orrs	r1, r2
    158a:	6019      	str	r1, [r3, #0]
    158c:	9b01      	ldr	r3, [sp, #4]
    158e:	f383 8810 	msr	PRIMASK, r3
    1592:	b002      	add	sp, #8
    1594:	bc30      	pop	{r4, r5}
    1596:	4770      	bx	lr
    1598:	40004034 	.word	0x40004034

0000159c <am_hal_ctimer_config>:
    159c:	b410      	push	{r4}
    159e:	680c      	ldr	r4, [r1, #0]
    15a0:	688b      	ldr	r3, [r1, #8]
    15a2:	684a      	ldr	r2, [r1, #4]
    15a4:	f3ef 8110 	mrs	r1, PRIMASK
    15a8:	b083      	sub	sp, #12
    15aa:	2c00      	cmp	r4, #0
    15ac:	bf18      	it	ne
    15ae:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    15b2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    15b6:	4323      	orrs	r3, r4
    15b8:	9101      	str	r1, [sp, #4]
    15ba:	b672      	cpsid	i
    15bc:	4c29      	ldr	r4, [pc, #164]	; (1664 <am_hal_ctimer_config+0xc8>)
    15be:	4a2a      	ldr	r2, [pc, #168]	; (1668 <am_hal_ctimer_config+0xcc>)
    15c0:	0100      	lsls	r0, r0, #4
    15c2:	5103      	str	r3, [r0, r4]
    15c4:	6811      	ldr	r1, [r2, #0]
    15c6:	f001 0c0f 	and.w	ip, r1, #15
    15ca:	f10c 33ff 	add.w	r3, ip, #4294967295
    15ce:	2b01      	cmp	r3, #1
    15d0:	d941      	bls.n	1656 <am_hal_ctimer_config+0xba>
    15d2:	6824      	ldr	r4, [r4, #0]
    15d4:	f3c4 0244 	ubfx	r2, r4, #1, #5
    15d8:	1e50      	subs	r0, r2, #1
    15da:	f3c4 4144 	ubfx	r1, r4, #17, #5
    15de:	2804      	cmp	r0, #4
    15e0:	f101 33ff 	add.w	r3, r1, #4294967295
    15e4:	d937      	bls.n	1656 <am_hal_ctimer_config+0xba>
    15e6:	2b04      	cmp	r3, #4
    15e8:	d935      	bls.n	1656 <am_hal_ctimer_config+0xba>
    15ea:	4c20      	ldr	r4, [pc, #128]	; (166c <am_hal_ctimer_config+0xd0>)
    15ec:	6820      	ldr	r0, [r4, #0]
    15ee:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    15f2:	f10c 32ff 	add.w	r2, ip, #4294967295
    15f6:	f3c0 4144 	ubfx	r1, r0, #17, #5
    15fa:	2a04      	cmp	r2, #4
    15fc:	f101 33ff 	add.w	r3, r1, #4294967295
    1600:	d929      	bls.n	1656 <am_hal_ctimer_config+0xba>
    1602:	2b04      	cmp	r3, #4
    1604:	d927      	bls.n	1656 <am_hal_ctimer_config+0xba>
    1606:	4c1a      	ldr	r4, [pc, #104]	; (1670 <am_hal_ctimer_config+0xd4>)
    1608:	6820      	ldr	r0, [r4, #0]
    160a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    160e:	f10c 32ff 	add.w	r2, ip, #4294967295
    1612:	f3c0 4144 	ubfx	r1, r0, #17, #5
    1616:	2a04      	cmp	r2, #4
    1618:	f101 33ff 	add.w	r3, r1, #4294967295
    161c:	d91b      	bls.n	1656 <am_hal_ctimer_config+0xba>
    161e:	2b04      	cmp	r3, #4
    1620:	d919      	bls.n	1656 <am_hal_ctimer_config+0xba>
    1622:	4c14      	ldr	r4, [pc, #80]	; (1674 <am_hal_ctimer_config+0xd8>)
    1624:	6820      	ldr	r0, [r4, #0]
    1626:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    162a:	f10c 32ff 	add.w	r2, ip, #4294967295
    162e:	f3c0 4144 	ubfx	r1, r0, #17, #5
    1632:	2a04      	cmp	r2, #4
    1634:	f101 33ff 	add.w	r3, r1, #4294967295
    1638:	d90d      	bls.n	1656 <am_hal_ctimer_config+0xba>
    163a:	2b04      	cmp	r3, #4
    163c:	d90b      	bls.n	1656 <am_hal_ctimer_config+0xba>
    163e:	4c0e      	ldr	r4, [pc, #56]	; (1678 <am_hal_ctimer_config+0xdc>)
    1640:	6820      	ldr	r0, [r4, #0]
    1642:	f040 0204 	orr.w	r2, r0, #4
    1646:	6022      	str	r2, [r4, #0]
    1648:	9801      	ldr	r0, [sp, #4]
    164a:	f380 8810 	msr	PRIMASK, r0
    164e:	b003      	add	sp, #12
    1650:	f85d 4b04 	ldr.w	r4, [sp], #4
    1654:	4770      	bx	lr
    1656:	4908      	ldr	r1, [pc, #32]	; (1678 <am_hal_ctimer_config+0xdc>)
    1658:	680b      	ldr	r3, [r1, #0]
    165a:	f023 0404 	bic.w	r4, r3, #4
    165e:	600c      	str	r4, [r1, #0]
    1660:	e7f2      	b.n	1648 <am_hal_ctimer_config+0xac>
    1662:	bf00      	nop
    1664:	4000800c 	.word	0x4000800c
    1668:	40008100 	.word	0x40008100
    166c:	4000801c 	.word	0x4000801c
    1670:	4000802c 	.word	0x4000802c
    1674:	4000803c 	.word	0x4000803c
    1678:	40021020 	.word	0x40021020

0000167c <am_hal_ctimer_start>:
    167c:	b410      	push	{r4}
    167e:	f3ef 8310 	mrs	r3, PRIMASK
    1682:	b083      	sub	sp, #12
    1684:	0100      	lsls	r0, r0, #4
    1686:	4a09      	ldr	r2, [pc, #36]	; (16ac <am_hal_ctimer_start+0x30>)
    1688:	9301      	str	r3, [sp, #4]
    168a:	b672      	cpsid	i
    168c:	5883      	ldr	r3, [r0, r2]
    168e:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1692:	ea23 0304 	bic.w	r3, r3, r4
    1696:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    169a:	4319      	orrs	r1, r3
    169c:	5081      	str	r1, [r0, r2]
    169e:	9801      	ldr	r0, [sp, #4]
    16a0:	f380 8810 	msr	PRIMASK, r0
    16a4:	b003      	add	sp, #12
    16a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    16aa:	4770      	bx	lr
    16ac:	4000800c 	.word	0x4000800c

000016b0 <am_hal_ctimer_clear>:
    16b0:	b082      	sub	sp, #8
    16b2:	f3ef 8310 	mrs	r3, PRIMASK
    16b6:	0100      	lsls	r0, r0, #4
    16b8:	4a06      	ldr	r2, [pc, #24]	; (16d4 <am_hal_ctimer_clear+0x24>)
    16ba:	9301      	str	r3, [sp, #4]
    16bc:	b672      	cpsid	i
    16be:	5883      	ldr	r3, [r0, r2]
    16c0:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    16c4:	4319      	orrs	r1, r3
    16c6:	5081      	str	r1, [r0, r2]
    16c8:	9801      	ldr	r0, [sp, #4]
    16ca:	f380 8810 	msr	PRIMASK, r0
    16ce:	b002      	add	sp, #8
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	4000800c 	.word	0x4000800c

000016d8 <am_hal_ctimer_period_set>:
    16d8:	b4f0      	push	{r4, r5, r6, r7}
    16da:	f3ef 8410 	mrs	r4, PRIMASK
    16de:	b082      	sub	sp, #8
    16e0:	0100      	lsls	r0, r0, #4
    16e2:	4d1c      	ldr	r5, [pc, #112]	; (1754 <am_hal_ctimer_period_set+0x7c>)
    16e4:	9401      	str	r4, [sp, #4]
    16e6:	4e1c      	ldr	r6, [pc, #112]	; (1758 <am_hal_ctimer_period_set+0x80>)
    16e8:	4f1c      	ldr	r7, [pc, #112]	; (175c <am_hal_ctimer_period_set+0x84>)
    16ea:	b672      	cpsid	i
    16ec:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    16f0:	5944      	ldr	r4, [r0, r5]
    16f2:	d01a      	beq.n	172a <am_hal_ctimer_period_set+0x52>
    16f4:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    16f8:	2d80      	cmp	r5, #128	; 0x80
    16fa:	d01b      	beq.n	1734 <am_hal_ctimer_period_set+0x5c>
    16fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1700:	2500      	movs	r5, #0
    1702:	4299      	cmp	r1, r3
    1704:	462c      	mov	r4, r5
    1706:	d01c      	beq.n	1742 <am_hal_ctimer_period_set+0x6a>
    1708:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    170c:	d01e      	beq.n	174c <am_hal_ctimer_period_set+0x74>
    170e:	0c21      	lsrs	r1, r4, #16
    1710:	040c      	lsls	r4, r1, #16
    1712:	b291      	uxth	r1, r2
    1714:	430d      	orrs	r5, r1
    1716:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
    171a:	5185      	str	r5, [r0, r6]
    171c:	51c2      	str	r2, [r0, r7]
    171e:	9801      	ldr	r0, [sp, #4]
    1720:	f380 8810 	msr	PRIMASK, r0
    1724:	b002      	add	sp, #8
    1726:	bcf0      	pop	{r4, r5, r6, r7}
    1728:	4770      	bx	lr
    172a:	0c25      	lsrs	r5, r4, #16
    172c:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1730:	2c80      	cmp	r4, #128	; 0x80
    1732:	d10a      	bne.n	174a <am_hal_ctimer_period_set+0x72>
    1734:	0415      	lsls	r5, r2, #16
    1736:	4614      	mov	r4, r2
    1738:	1ad2      	subs	r2, r2, r3
    173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    173e:	4299      	cmp	r1, r3
    1740:	d1e2      	bne.n	1708 <am_hal_ctimer_period_set+0x30>
    1742:	b297      	uxth	r7, r2
    1744:	433d      	orrs	r5, r7
    1746:	5185      	str	r5, [r0, r6]
    1748:	e7e9      	b.n	171e <am_hal_ctimer_period_set+0x46>
    174a:	2500      	movs	r5, #0
    174c:	b296      	uxth	r6, r2
    174e:	4335      	orrs	r5, r6
    1750:	51c5      	str	r5, [r0, r7]
    1752:	e7e4      	b.n	171e <am_hal_ctimer_period_set+0x46>
    1754:	4000800c 	.word	0x4000800c
    1758:	40008004 	.word	0x40008004
    175c:	40008008 	.word	0x40008008

00001760 <am_hal_ctimer_int_enable>:
    1760:	b082      	sub	sp, #8
    1762:	f3ef 8310 	mrs	r3, PRIMASK
    1766:	9301      	str	r3, [sp, #4]
    1768:	b672      	cpsid	i
    176a:	4904      	ldr	r1, [pc, #16]	; (177c <am_hal_ctimer_int_enable+0x1c>)
    176c:	680a      	ldr	r2, [r1, #0]
    176e:	4310      	orrs	r0, r2
    1770:	6008      	str	r0, [r1, #0]
    1772:	9801      	ldr	r0, [sp, #4]
    1774:	f380 8810 	msr	PRIMASK, r0
    1778:	b002      	add	sp, #8
    177a:	4770      	bx	lr
    177c:	40008200 	.word	0x40008200

00001780 <am_hal_ctimer_int_clear>:
    1780:	4b01      	ldr	r3, [pc, #4]	; (1788 <am_hal_ctimer_int_clear+0x8>)
    1782:	6018      	str	r0, [r3, #0]
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	40008208 	.word	0x40008208

0000178c <am_hal_debug_error>:
    178c:	e7fe      	b.n	178c <am_hal_debug_error>
    178e:	bf00      	nop

00001790 <am_hal_flash_delay>:
    1790:	4b01      	ldr	r3, [pc, #4]	; (1798 <am_hal_flash_delay+0x8>)
    1792:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1794:	4708      	bx	r1
    1796:	bf00      	nop
    1798:	10001020 	.word	0x10001020

0000179c <am_hal_interrupt_enable>:
    179c:	280f      	cmp	r0, #15
    179e:	d80b      	bhi.n	17b8 <am_hal_interrupt_enable+0x1c>
    17a0:	2805      	cmp	r0, #5
    17a2:	d013      	beq.n	17cc <am_hal_interrupt_enable+0x30>
    17a4:	2806      	cmp	r0, #6
    17a6:	d017      	beq.n	17d8 <am_hal_interrupt_enable+0x3c>
    17a8:	2804      	cmp	r0, #4
    17aa:	d104      	bne.n	17b6 <am_hal_interrupt_enable+0x1a>
    17ac:	4a0d      	ldr	r2, [pc, #52]	; (17e4 <am_hal_interrupt_enable+0x48>)
    17ae:	6813      	ldr	r3, [r2, #0]
    17b0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    17b4:	6010      	str	r0, [r2, #0]
    17b6:	4770      	bx	lr
    17b8:	f1a0 0310 	sub.w	r3, r0, #16
    17bc:	f003 0c1f 	and.w	ip, r3, #31
    17c0:	2001      	movs	r0, #1
    17c2:	4909      	ldr	r1, [pc, #36]	; (17e8 <am_hal_interrupt_enable+0x4c>)
    17c4:	fa00 f20c 	lsl.w	r2, r0, ip
    17c8:	600a      	str	r2, [r1, #0]
    17ca:	4770      	bx	lr
    17cc:	4805      	ldr	r0, [pc, #20]	; (17e4 <am_hal_interrupt_enable+0x48>)
    17ce:	6801      	ldr	r1, [r0, #0]
    17d0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    17d4:	6002      	str	r2, [r0, #0]
    17d6:	4770      	bx	lr
    17d8:	4902      	ldr	r1, [pc, #8]	; (17e4 <am_hal_interrupt_enable+0x48>)
    17da:	680a      	ldr	r2, [r1, #0]
    17dc:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    17e0:	600b      	str	r3, [r1, #0]
    17e2:	4770      	bx	lr
    17e4:	e000ed24 	.word	0xe000ed24
    17e8:	e000e100 	.word	0xe000e100

000017ec <am_hal_interrupt_master_enable>:
    17ec:	f3ef 8010 	mrs	r0, PRIMASK
    17f0:	b662      	cpsie	i
    17f2:	4770      	bx	lr

000017f4 <am_hal_interrupt_master_disable>:
    17f4:	f3ef 8010 	mrs	r0, PRIMASK
    17f8:	b672      	cpsid	i
    17fa:	4770      	bx	lr

000017fc <am_hal_interrupt_master_set>:
    17fc:	f380 8810 	msr	PRIMASK, r0
    1800:	4770      	bx	lr
    1802:	bf00      	nop

00001804 <am_hal_mcuctrl_fault_status>:
    1804:	4a0d      	ldr	r2, [pc, #52]	; (183c <am_hal_mcuctrl_fault_status+0x38>)
    1806:	4b0e      	ldr	r3, [pc, #56]	; (1840 <am_hal_mcuctrl_fault_status+0x3c>)
    1808:	490e      	ldr	r1, [pc, #56]	; (1844 <am_hal_mcuctrl_fault_status+0x40>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	b470      	push	{r4, r5, r6}
    180e:	6814      	ldr	r4, [r2, #0]
    1810:	60c4      	str	r4, [r0, #12]
    1812:	6809      	ldr	r1, [r1, #0]
    1814:	6845      	ldr	r5, [r0, #4]
    1816:	6944      	ldr	r4, [r0, #20]
    1818:	4329      	orrs	r1, r5
    181a:	3204      	adds	r2, #4
    181c:	6041      	str	r1, [r0, #4]
    181e:	6812      	ldr	r2, [r2, #0]
    1820:	f003 0601 	and.w	r6, r3, #1
    1824:	4322      	orrs	r2, r4
    1826:	7006      	strb	r6, [r0, #0]
    1828:	f3c3 0640 	ubfx	r6, r3, #1, #1
    182c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1830:	7206      	strb	r6, [r0, #8]
    1832:	7403      	strb	r3, [r0, #16]
    1834:	6142      	str	r2, [r0, #20]
    1836:	bc70      	pop	{r4, r5, r6}
    1838:	4770      	bx	lr
    183a:	bf00      	nop
    183c:	400201c4 	.word	0x400201c4
    1840:	400201cc 	.word	0x400201cc
    1844:	400201c0 	.word	0x400201c0

00001848 <am_hal_pwrctrl_periph_enable>:
    1848:	b510      	push	{r4, lr}
    184a:	4604      	mov	r4, r0
    184c:	b082      	sub	sp, #8
    184e:	b1c0      	cbz	r0, 1882 <am_hal_pwrctrl_periph_enable+0x3a>
    1850:	1e43      	subs	r3, r0, #1
    1852:	4203      	tst	r3, r0
    1854:	d115      	bne.n	1882 <am_hal_pwrctrl_periph_enable+0x3a>
    1856:	f3ef 8010 	mrs	r0, PRIMASK
    185a:	9001      	str	r0, [sp, #4]
    185c:	b672      	cpsid	i
    185e:	4a18      	ldr	r2, [pc, #96]	; (18c0 <am_hal_pwrctrl_periph_enable+0x78>)
    1860:	6811      	ldr	r1, [r2, #0]
    1862:	4321      	orrs	r1, r4
    1864:	6011      	str	r1, [r2, #0]
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	f383 8810 	msr	PRIMASK, r3
    186c:	200e      	movs	r0, #14
    186e:	f7ff ff8f 	bl	1790 <am_hal_flash_delay>
    1872:	f014 0f0e 	tst.w	r4, #14
    1876:	d10a      	bne.n	188e <am_hal_pwrctrl_periph_enable+0x46>
    1878:	f014 0f70 	tst.w	r4, #112	; 0x70
    187c:	d00e      	beq.n	189c <am_hal_pwrctrl_periph_enable+0x54>
    187e:	2408      	movs	r4, #8
    1880:	e006      	b.n	1890 <am_hal_pwrctrl_periph_enable+0x48>
    1882:	4a10      	ldr	r2, [pc, #64]	; (18c4 <am_hal_pwrctrl_periph_enable+0x7c>)
    1884:	4810      	ldr	r0, [pc, #64]	; (18c8 <am_hal_pwrctrl_periph_enable+0x80>)
    1886:	215d      	movs	r1, #93	; 0x5d
    1888:	f7ff ff80 	bl	178c <am_hal_debug_error>
    188c:	e7e3      	b.n	1856 <am_hal_pwrctrl_periph_enable+0xe>
    188e:	2404      	movs	r4, #4
    1890:	4a0e      	ldr	r2, [pc, #56]	; (18cc <am_hal_pwrctrl_periph_enable+0x84>)
    1892:	6811      	ldr	r1, [r2, #0]
    1894:	420c      	tst	r4, r1
    1896:	d0fc      	beq.n	1892 <am_hal_pwrctrl_periph_enable+0x4a>
    1898:	b002      	add	sp, #8
    189a:	bd10      	pop	{r4, pc}
    189c:	f240 1081 	movw	r0, #385	; 0x181
    18a0:	4020      	ands	r0, r4
    18a2:	b940      	cbnz	r0, 18b6 <am_hal_pwrctrl_periph_enable+0x6e>
    18a4:	05a3      	lsls	r3, r4, #22
    18a6:	d408      	bmi.n	18ba <am_hal_pwrctrl_periph_enable+0x72>
    18a8:	f414 6f80 	tst.w	r4, #1024	; 0x400
    18ac:	bf14      	ite	ne
    18ae:	2410      	movne	r4, #16
    18b0:	f04f 34ff 	moveq.w	r4, #4294967295
    18b4:	e7ec      	b.n	1890 <am_hal_pwrctrl_periph_enable+0x48>
    18b6:	2402      	movs	r4, #2
    18b8:	e7ea      	b.n	1890 <am_hal_pwrctrl_periph_enable+0x48>
    18ba:	2480      	movs	r4, #128	; 0x80
    18bc:	e7e8      	b.n	1890 <am_hal_pwrctrl_periph_enable+0x48>
    18be:	bf00      	nop
    18c0:	40021008 	.word	0x40021008
    18c4:	00001f60 	.word	0x00001f60
    18c8:	00001f94 	.word	0x00001f94
    18cc:	40021014 	.word	0x40021014

000018d0 <am_hal_pwrctrl_memory_enable>:
    18d0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    18d4:	b430      	push	{r4, r5}
    18d6:	d03a      	beq.n	194e <am_hal_pwrctrl_memory_enable+0x7e>
    18d8:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    18dc:	f000 809d 	beq.w	1a1a <am_hal_pwrctrl_memory_enable+0x14a>
    18e0:	2801      	cmp	r0, #1
    18e2:	f000 809d 	beq.w	1a20 <am_hal_pwrctrl_memory_enable+0x150>
    18e6:	2803      	cmp	r0, #3
    18e8:	f000 80a6 	beq.w	1a38 <am_hal_pwrctrl_memory_enable+0x168>
    18ec:	2807      	cmp	r0, #7
    18ee:	f000 809c 	beq.w	1a2a <am_hal_pwrctrl_memory_enable+0x15a>
    18f2:	280f      	cmp	r0, #15
    18f4:	f000 80a5 	beq.w	1a42 <am_hal_pwrctrl_memory_enable+0x172>
    18f8:	281f      	cmp	r0, #31
    18fa:	f000 80b1 	beq.w	1a60 <am_hal_pwrctrl_memory_enable+0x190>
    18fe:	283f      	cmp	r0, #63	; 0x3f
    1900:	f000 80b5 	beq.w	1a6e <am_hal_pwrctrl_memory_enable+0x19e>
    1904:	287f      	cmp	r0, #127	; 0x7f
    1906:	f000 80b9 	beq.w	1a7c <am_hal_pwrctrl_memory_enable+0x1ac>
    190a:	28ff      	cmp	r0, #255	; 0xff
    190c:	f000 80a0 	beq.w	1a50 <am_hal_pwrctrl_memory_enable+0x180>
    1910:	f240 13ff 	movw	r3, #511	; 0x1ff
    1914:	4298      	cmp	r0, r3
    1916:	f000 80b8 	beq.w	1a8a <am_hal_pwrctrl_memory_enable+0x1ba>
    191a:	f240 31ff 	movw	r1, #1023	; 0x3ff
    191e:	4288      	cmp	r0, r1
    1920:	f000 80b9 	beq.w	1a96 <am_hal_pwrctrl_memory_enable+0x1c6>
    1924:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1928:	4290      	cmp	r0, r2
    192a:	d00e      	beq.n	194a <am_hal_pwrctrl_memory_enable+0x7a>
    192c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1930:	f000 80b7 	beq.w	1aa2 <am_hal_pwrctrl_memory_enable+0x1d2>
    1934:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1938:	42a0      	cmp	r0, r4
    193a:	f000 80b5 	beq.w	1aa8 <am_hal_pwrctrl_memory_enable+0x1d8>
    193e:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1942:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1946:	4560      	cmp	r0, ip
    1948:	d132      	bne.n	19b0 <am_hal_pwrctrl_memory_enable+0xe0>
    194a:	495c      	ldr	r1, [pc, #368]	; (1abc <am_hal_pwrctrl_memory_enable+0x1ec>)
    194c:	e066      	b.n	1a1c <am_hal_pwrctrl_memory_enable+0x14c>
    194e:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    1952:	2340      	movs	r3, #64	; 0x40
    1954:	2120      	movs	r1, #32
    1956:	4c5a      	ldr	r4, [pc, #360]	; (1ac0 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1958:	6822      	ldr	r2, [r4, #0]
    195a:	402a      	ands	r2, r5
    195c:	6022      	str	r2, [r4, #0]
    195e:	4d58      	ldr	r5, [pc, #352]	; (1ac0 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1960:	682c      	ldr	r4, [r5, #0]
    1962:	4320      	orrs	r0, r4
    1964:	6028      	str	r0, [r5, #0]
    1966:	2b00      	cmp	r3, #0
    1968:	d029      	beq.n	19be <am_hal_pwrctrl_memory_enable+0xee>
    196a:	4a56      	ldr	r2, [pc, #344]	; (1ac4 <am_hal_pwrctrl_memory_enable+0x1f4>)
    196c:	6810      	ldr	r0, [r2, #0]
    196e:	4203      	tst	r3, r0
    1970:	bf18      	it	ne
    1972:	20c6      	movne	r0, #198	; 0xc6
    1974:	d01f      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    1976:	6815      	ldr	r5, [r2, #0]
    1978:	422b      	tst	r3, r5
    197a:	d01c      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    197c:	6814      	ldr	r4, [r2, #0]
    197e:	4223      	tst	r3, r4
    1980:	d019      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    1982:	6815      	ldr	r5, [r2, #0]
    1984:	422b      	tst	r3, r5
    1986:	d016      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    1988:	6814      	ldr	r4, [r2, #0]
    198a:	4223      	tst	r3, r4
    198c:	d013      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    198e:	6815      	ldr	r5, [r2, #0]
    1990:	422b      	tst	r3, r5
    1992:	d010      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    1994:	6814      	ldr	r4, [r2, #0]
    1996:	4223      	tst	r3, r4
    1998:	d00d      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    199a:	6815      	ldr	r5, [r2, #0]
    199c:	422b      	tst	r3, r5
    199e:	d00a      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    19a0:	6814      	ldr	r4, [r2, #0]
    19a2:	4223      	tst	r3, r4
    19a4:	d007      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    19a6:	6815      	ldr	r5, [r2, #0]
    19a8:	422b      	tst	r3, r5
    19aa:	d004      	beq.n	19b6 <am_hal_pwrctrl_memory_enable+0xe6>
    19ac:	3809      	subs	r0, #9
    19ae:	d1e2      	bne.n	1976 <am_hal_pwrctrl_memory_enable+0xa6>
    19b0:	2000      	movs	r0, #0
    19b2:	bc30      	pop	{r4, r5}
    19b4:	4770      	bx	lr
    19b6:	b911      	cbnz	r1, 19be <am_hal_pwrctrl_memory_enable+0xee>
    19b8:	2001      	movs	r0, #1
    19ba:	bc30      	pop	{r4, r5}
    19bc:	4770      	bx	lr
    19be:	4b41      	ldr	r3, [pc, #260]	; (1ac4 <am_hal_pwrctrl_memory_enable+0x1f4>)
    19c0:	681a      	ldr	r2, [r3, #0]
    19c2:	ea31 0402 	bics.w	r4, r1, r2
    19c6:	bf18      	it	ne
    19c8:	24c6      	movne	r4, #198	; 0xc6
    19ca:	d0f5      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19cc:	6818      	ldr	r0, [r3, #0]
    19ce:	ea31 0000 	bics.w	r0, r1, r0
    19d2:	d0f1      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19d4:	681d      	ldr	r5, [r3, #0]
    19d6:	ea31 0005 	bics.w	r0, r1, r5
    19da:	d0ed      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19dc:	681a      	ldr	r2, [r3, #0]
    19de:	ea31 0002 	bics.w	r0, r1, r2
    19e2:	d0e9      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19e4:	6818      	ldr	r0, [r3, #0]
    19e6:	ea31 0000 	bics.w	r0, r1, r0
    19ea:	d0e5      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19ec:	681d      	ldr	r5, [r3, #0]
    19ee:	ea31 0005 	bics.w	r0, r1, r5
    19f2:	d0e1      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19f4:	681a      	ldr	r2, [r3, #0]
    19f6:	ea31 0002 	bics.w	r0, r1, r2
    19fa:	d0dd      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    19fc:	6818      	ldr	r0, [r3, #0]
    19fe:	ea31 0000 	bics.w	r0, r1, r0
    1a02:	d0d9      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    1a04:	681d      	ldr	r5, [r3, #0]
    1a06:	ea31 0005 	bics.w	r0, r1, r5
    1a0a:	d0d5      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    1a0c:	681a      	ldr	r2, [r3, #0]
    1a0e:	ea31 0002 	bics.w	r0, r1, r2
    1a12:	d0d1      	beq.n	19b8 <am_hal_pwrctrl_memory_enable+0xe8>
    1a14:	3c09      	subs	r4, #9
    1a16:	d1d9      	bne.n	19cc <am_hal_pwrctrl_memory_enable+0xfc>
    1a18:	e7ca      	b.n	19b0 <am_hal_pwrctrl_memory_enable+0xe0>
    1a1a:	2160      	movs	r1, #96	; 0x60
    1a1c:	2300      	movs	r3, #0
    1a1e:	e79e      	b.n	195e <am_hal_pwrctrl_memory_enable+0x8e>
    1a20:	4d29      	ldr	r5, [pc, #164]	; (1ac8 <am_hal_pwrctrl_memory_enable+0x1f8>)
    1a22:	4b2a      	ldr	r3, [pc, #168]	; (1acc <am_hal_pwrctrl_memory_enable+0x1fc>)
    1a24:	f44f 7180 	mov.w	r1, #256	; 0x100
    1a28:	e795      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a2a:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
    1a2e:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
    1a32:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1a36:	e78e      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a38:	4d25      	ldr	r5, [pc, #148]	; (1ad0 <am_hal_pwrctrl_memory_enable+0x200>)
    1a3a:	4b26      	ldr	r3, [pc, #152]	; (1ad4 <am_hal_pwrctrl_memory_enable+0x204>)
    1a3c:	f44f 7140 	mov.w	r1, #768	; 0x300
    1a40:	e789      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a42:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    1a46:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    1a4a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1a4e:	e782      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a50:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    1a54:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    1a58:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1a5c:	20ff      	movs	r0, #255	; 0xff
    1a5e:	e77a      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a60:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    1a64:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    1a68:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1a6c:	e773      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a6e:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    1a72:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    1a76:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1a7a:	e76c      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a7c:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    1a80:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    1a84:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1a88:	e765      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a8a:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    1a8e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    1a92:	4911      	ldr	r1, [pc, #68]	; (1ad8 <am_hal_pwrctrl_memory_enable+0x208>)
    1a94:	e75f      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1a96:	4911      	ldr	r1, [pc, #68]	; (1adc <am_hal_pwrctrl_memory_enable+0x20c>)
    1a98:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    1a9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1aa0:	e759      	b.n	1956 <am_hal_pwrctrl_memory_enable+0x86>
    1aa2:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1aa6:	e7b9      	b.n	1a1c <am_hal_pwrctrl_memory_enable+0x14c>
    1aa8:	4805      	ldr	r0, [pc, #20]	; (1ac0 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1aaa:	6803      	ldr	r3, [r0, #0]
    1aac:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1ab0:	6001      	str	r1, [r0, #0]
    1ab2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    1ab6:	2100      	movs	r1, #0
    1ab8:	e757      	b.n	196a <am_hal_pwrctrl_memory_enable+0x9a>
    1aba:	bf00      	nop
    1abc:	0007ff00 	.word	0x0007ff00
    1ac0:	40021010 	.word	0x40021010
    1ac4:	40021014 	.word	0x40021014
    1ac8:	fffff801 	.word	0xfffff801
    1acc:	0007fe00 	.word	0x0007fe00
    1ad0:	fffff803 	.word	0xfffff803
    1ad4:	0007fc00 	.word	0x0007fc00
    1ad8:	0001ff00 	.word	0x0001ff00
    1adc:	0003ff00 	.word	0x0003ff00

00001ae0 <am_hal_pwrctrl_bucks_init>:
    1ae0:	4b0f      	ldr	r3, [pc, #60]	; (1b20 <am_hal_pwrctrl_bucks_init+0x40>)
    1ae2:	681a      	ldr	r2, [r3, #0]
    1ae4:	0792      	lsls	r2, r2, #30
    1ae6:	d502      	bpl.n	1aee <am_hal_pwrctrl_bucks_init+0xe>
    1ae8:	6818      	ldr	r0, [r3, #0]
    1aea:	07c3      	lsls	r3, r0, #31
    1aec:	d40e      	bmi.n	1b0c <am_hal_pwrctrl_bucks_init+0x2c>
    1aee:	4b0d      	ldr	r3, [pc, #52]	; (1b24 <am_hal_pwrctrl_bucks_init+0x44>)
    1af0:	4a0b      	ldr	r2, [pc, #44]	; (1b20 <am_hal_pwrctrl_bucks_init+0x40>)
    1af2:	6819      	ldr	r1, [r3, #0]
    1af4:	f041 0002 	orr.w	r0, r1, #2
    1af8:	6018      	str	r0, [r3, #0]
    1afa:	6819      	ldr	r1, [r3, #0]
    1afc:	f041 0001 	orr.w	r0, r1, #1
    1b00:	6018      	str	r0, [r3, #0]
    1b02:	6813      	ldr	r3, [r2, #0]
    1b04:	f003 0103 	and.w	r1, r3, #3
    1b08:	2903      	cmp	r1, #3
    1b0a:	d1fa      	bne.n	1b02 <am_hal_pwrctrl_bucks_init+0x22>
    1b0c:	4a04      	ldr	r2, [pc, #16]	; (1b20 <am_hal_pwrctrl_bucks_init+0x40>)
    1b0e:	6810      	ldr	r0, [r2, #0]
    1b10:	f000 0303 	and.w	r3, r0, #3
    1b14:	2b03      	cmp	r3, #3
    1b16:	d1fa      	bne.n	1b0e <am_hal_pwrctrl_bucks_init+0x2e>
    1b18:	2042      	movs	r0, #66	; 0x42
    1b1a:	f7ff be39 	b.w	1790 <am_hal_flash_delay>
    1b1e:	bf00      	nop
    1b20:	40021004 	.word	0x40021004
    1b24:	40021000 	.word	0x40021000

00001b28 <am_hal_pwrctrl_bucks_enable>:
    1b28:	4b0b      	ldr	r3, [pc, #44]	; (1b58 <am_hal_pwrctrl_bucks_enable+0x30>)
    1b2a:	681a      	ldr	r2, [r3, #0]
    1b2c:	0792      	lsls	r2, r2, #30
    1b2e:	d502      	bpl.n	1b36 <am_hal_pwrctrl_bucks_enable+0xe>
    1b30:	6818      	ldr	r0, [r3, #0]
    1b32:	07c3      	lsls	r3, r0, #31
    1b34:	d40e      	bmi.n	1b54 <am_hal_pwrctrl_bucks_enable+0x2c>
    1b36:	4b09      	ldr	r3, [pc, #36]	; (1b5c <am_hal_pwrctrl_bucks_enable+0x34>)
    1b38:	4a07      	ldr	r2, [pc, #28]	; (1b58 <am_hal_pwrctrl_bucks_enable+0x30>)
    1b3a:	6819      	ldr	r1, [r3, #0]
    1b3c:	f041 0002 	orr.w	r0, r1, #2
    1b40:	6018      	str	r0, [r3, #0]
    1b42:	6819      	ldr	r1, [r3, #0]
    1b44:	f041 0001 	orr.w	r0, r1, #1
    1b48:	6018      	str	r0, [r3, #0]
    1b4a:	6813      	ldr	r3, [r2, #0]
    1b4c:	f003 0103 	and.w	r1, r3, #3
    1b50:	2903      	cmp	r1, #3
    1b52:	d1fa      	bne.n	1b4a <am_hal_pwrctrl_bucks_enable+0x22>
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop
    1b58:	40021004 	.word	0x40021004
    1b5c:	40021000 	.word	0x40021000

00001b60 <am_hal_pwrctrl_bucks_disable>:
    1b60:	4b12      	ldr	r3, [pc, #72]	; (1bac <am_hal_pwrctrl_bucks_disable+0x4c>)
    1b62:	681a      	ldr	r2, [r3, #0]
    1b64:	0792      	lsls	r2, r2, #30
    1b66:	d402      	bmi.n	1b6e <am_hal_pwrctrl_bucks_disable+0xe>
    1b68:	6818      	ldr	r0, [r3, #0]
    1b6a:	07c3      	lsls	r3, r0, #31
    1b6c:	d51c      	bpl.n	1ba8 <am_hal_pwrctrl_bucks_disable+0x48>
    1b6e:	4910      	ldr	r1, [pc, #64]	; (1bb0 <am_hal_pwrctrl_bucks_disable+0x50>)
    1b70:	680b      	ldr	r3, [r1, #0]
    1b72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1b76:	2a20      	cmp	r2, #32
    1b78:	d00b      	beq.n	1b92 <am_hal_pwrctrl_bucks_disable+0x32>
    1b7a:	4b0e      	ldr	r3, [pc, #56]	; (1bb4 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b7c:	681a      	ldr	r2, [r3, #0]
    1b7e:	f022 0002 	bic.w	r0, r2, #2
    1b82:	6018      	str	r0, [r3, #0]
    1b84:	6819      	ldr	r1, [r3, #0]
    1b86:	f021 0201 	bic.w	r2, r1, #1
    1b8a:	601a      	str	r2, [r3, #0]
    1b8c:	200a      	movs	r0, #10
    1b8e:	f7ff bdff 	b.w	1790 <am_hal_flash_delay>
    1b92:	4809      	ldr	r0, [pc, #36]	; (1bb8 <am_hal_pwrctrl_bucks_disable+0x58>)
    1b94:	6801      	ldr	r1, [r0, #0]
    1b96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1b9a:	d1ee      	bne.n	1b7a <am_hal_pwrctrl_bucks_disable+0x1a>
    1b9c:	4805      	ldr	r0, [pc, #20]	; (1bb4 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b9e:	6803      	ldr	r3, [r0, #0]
    1ba0:	f003 0105 	and.w	r1, r3, #5
    1ba4:	6001      	str	r1, [r0, #0]
    1ba6:	e7f1      	b.n	1b8c <am_hal_pwrctrl_bucks_disable+0x2c>
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop
    1bac:	40021004 	.word	0x40021004
    1bb0:	4002000c 	.word	0x4002000c
    1bb4:	40021000 	.word	0x40021000
    1bb8:	40021008 	.word	0x40021008

00001bbc <am_hal_pwrctrl_low_power_init>:
    1bbc:	4905      	ldr	r1, [pc, #20]	; (1bd4 <am_hal_pwrctrl_low_power_init+0x18>)
    1bbe:	4a06      	ldr	r2, [pc, #24]	; (1bd8 <am_hal_pwrctrl_low_power_init+0x1c>)
    1bc0:	680b      	ldr	r3, [r1, #0]
    1bc2:	f043 0006 	orr.w	r0, r3, #6
    1bc6:	6008      	str	r0, [r1, #0]
    1bc8:	6811      	ldr	r1, [r2, #0]
    1bca:	f021 0304 	bic.w	r3, r1, #4
    1bce:	6013      	str	r3, [r2, #0]
    1bd0:	4770      	bx	lr
    1bd2:	bf00      	nop
    1bd4:	40021018 	.word	0x40021018
    1bd8:	40021000 	.word	0x40021000

00001bdc <am_hal_rtc_osc_select>:
    1bdc:	4a05      	ldr	r2, [pc, #20]	; (1bf4 <am_hal_rtc_osc_select+0x18>)
    1bde:	6813      	ldr	r3, [r2, #0]
    1be0:	b918      	cbnz	r0, 1bea <am_hal_rtc_osc_select+0xe>
    1be2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1be6:	6010      	str	r0, [r2, #0]
    1be8:	4770      	bx	lr
    1bea:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1bee:	6011      	str	r1, [r2, #0]
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	4000400c 	.word	0x4000400c

00001bf8 <am_hal_rtc_osc_disable>:
    1bf8:	4a02      	ldr	r2, [pc, #8]	; (1c04 <am_hal_rtc_osc_disable+0xc>)
    1bfa:	6813      	ldr	r3, [r2, #0]
    1bfc:	f043 0010 	orr.w	r0, r3, #16
    1c00:	6010      	str	r0, [r2, #0]
    1c02:	4770      	bx	lr
    1c04:	40004050 	.word	0x40004050

00001c08 <am_hal_sysctrl_sleep>:
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	b083      	sub	sp, #12
    1c0c:	4605      	mov	r5, r0
    1c0e:	f7ff fdf1 	bl	17f4 <am_hal_interrupt_master_disable>
    1c12:	4a41      	ldr	r2, [pc, #260]	; (1d18 <am_hal_sysctrl_sleep+0x110>)
    1c14:	4604      	mov	r4, r0
    1c16:	b11d      	cbz	r5, 1c20 <am_hal_sysctrl_sleep+0x18>
    1c18:	4b40      	ldr	r3, [pc, #256]	; (1d1c <am_hal_sysctrl_sleep+0x114>)
    1c1a:	6818      	ldr	r0, [r3, #0]
    1c1c:	07c3      	lsls	r3, r0, #31
    1c1e:	d509      	bpl.n	1c34 <am_hal_sysctrl_sleep+0x2c>
    1c20:	6811      	ldr	r1, [r2, #0]
    1c22:	f021 0604 	bic.w	r6, r1, #4
    1c26:	6016      	str	r6, [r2, #0]
    1c28:	bf30      	wfi
    1c2a:	4620      	mov	r0, r4
    1c2c:	f7ff fde6 	bl	17fc <am_hal_interrupt_master_set>
    1c30:	b003      	add	sp, #12
    1c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c34:	6813      	ldr	r3, [r2, #0]
    1c36:	493a      	ldr	r1, [pc, #232]	; (1d20 <am_hal_sysctrl_sleep+0x118>)
    1c38:	4f3a      	ldr	r7, [pc, #232]	; (1d24 <am_hal_sysctrl_sleep+0x11c>)
    1c3a:	4d3b      	ldr	r5, [pc, #236]	; (1d28 <am_hal_sysctrl_sleep+0x120>)
    1c3c:	483b      	ldr	r0, [pc, #236]	; (1d2c <am_hal_sysctrl_sleep+0x124>)
    1c3e:	f043 0604 	orr.w	r6, r3, #4
    1c42:	6016      	str	r6, [r2, #0]
    1c44:	6809      	ldr	r1, [r1, #0]
    1c46:	683b      	ldr	r3, [r7, #0]
    1c48:	682a      	ldr	r2, [r5, #0]
    1c4a:	6800      	ldr	r0, [r0, #0]
    1c4c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1c50:	2920      	cmp	r1, #32
    1c52:	f103 36ff 	add.w	r6, r3, #4294967295
    1c56:	bf14      	ite	ne
    1c58:	2500      	movne	r5, #0
    1c5a:	2502      	moveq	r5, #2
    1c5c:	2e03      	cmp	r6, #3
    1c5e:	bf8c      	ite	hi
    1c60:	2100      	movhi	r1, #0
    1c62:	2104      	movls	r1, #4
    1c64:	f012 0303 	ands.w	r3, r2, #3
    1c68:	bf18      	it	ne
    1c6a:	2301      	movne	r3, #1
    1c6c:	f240 56ff 	movw	r6, #1535	; 0x5ff
    1c70:	432b      	orrs	r3, r5
    1c72:	4006      	ands	r6, r0
    1c74:	ea43 0501 	orr.w	r5, r3, r1
    1c78:	b91e      	cbnz	r6, 1c82 <am_hal_sysctrl_sleep+0x7a>
    1c7a:	f045 0508 	orr.w	r5, r5, #8
    1c7e:	2d0f      	cmp	r5, #15
    1c80:	d00a      	beq.n	1c98 <am_hal_sysctrl_sleep+0x90>
    1c82:	bf30      	wfi
    1c84:	2d0f      	cmp	r5, #15
    1c86:	d01a      	beq.n	1cbe <am_hal_sysctrl_sleep+0xb6>
    1c88:	4f29      	ldr	r7, [pc, #164]	; (1d30 <am_hal_sysctrl_sleep+0x128>)
    1c8a:	2101      	movs	r1, #1
    1c8c:	4620      	mov	r0, r4
    1c8e:	7039      	strb	r1, [r7, #0]
    1c90:	f7ff fdb4 	bl	17fc <am_hal_interrupt_master_set>
    1c94:	b003      	add	sp, #12
    1c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c98:	683a      	ldr	r2, [r7, #0]
    1c9a:	1e50      	subs	r0, r2, #1
    1c9c:	9000      	str	r0, [sp, #0]
    1c9e:	9800      	ldr	r0, [sp, #0]
    1ca0:	f04f 31ff 	mov.w	r1, #4294967295
    1ca4:	f7ff fd04 	bl	16b0 <am_hal_ctimer_clear>
    1ca8:	9800      	ldr	r0, [sp, #0]
    1caa:	4633      	mov	r3, r6
    1cac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1cb0:	f04f 31ff 	mov.w	r1, #4294967295
    1cb4:	f7ff fd10 	bl	16d8 <am_hal_ctimer_period_set>
    1cb8:	f7ff ff52 	bl	1b60 <am_hal_pwrctrl_bucks_disable>
    1cbc:	e7e1      	b.n	1c82 <am_hal_sysctrl_sleep+0x7a>
    1cbe:	f3ef 8310 	mrs	r3, PRIMASK
    1cc2:	9301      	str	r3, [sp, #4]
    1cc4:	b672      	cpsid	i
    1cc6:	4e1b      	ldr	r6, [pc, #108]	; (1d34 <am_hal_sysctrl_sleep+0x12c>)
    1cc8:	6832      	ldr	r2, [r6, #0]
    1cca:	6832      	ldr	r2, [r6, #0]
    1ccc:	6835      	ldr	r5, [r6, #0]
    1cce:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1cd2:	f04c 021c 	orr.w	r2, ip, #28
    1cd6:	6032      	str	r2, [r6, #0]
    1cd8:	6830      	ldr	r0, [r6, #0]
    1cda:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1cde:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1ce2:	6033      	str	r3, [r6, #0]
    1ce4:	9e01      	ldr	r6, [sp, #4]
    1ce6:	f386 8810 	msr	PRIMASK, r6
    1cea:	201c      	movs	r0, #28
    1cec:	f7ff fd50 	bl	1790 <am_hal_flash_delay>
    1cf0:	f7ff ff1a 	bl	1b28 <am_hal_pwrctrl_bucks_enable>
    1cf4:	683f      	ldr	r7, [r7, #0]
    1cf6:	4910      	ldr	r1, [pc, #64]	; (1d38 <am_hal_sysctrl_sleep+0x130>)
    1cf8:	4d0d      	ldr	r5, [pc, #52]	; (1d30 <am_hal_sysctrl_sleep+0x128>)
    1cfa:	2200      	movs	r2, #0
    1cfc:	1e7b      	subs	r3, r7, #1
    1cfe:	204c      	movs	r0, #76	; 0x4c
    1d00:	9300      	str	r3, [sp, #0]
    1d02:	702a      	strb	r2, [r5, #0]
    1d04:	600a      	str	r2, [r1, #0]
    1d06:	f7ff fd43 	bl	1790 <am_hal_flash_delay>
    1d0a:	9800      	ldr	r0, [sp, #0]
    1d0c:	f04f 31ff 	mov.w	r1, #4294967295
    1d10:	f7ff fcb4 	bl	167c <am_hal_ctimer_start>
    1d14:	e789      	b.n	1c2a <am_hal_sysctrl_sleep+0x22>
    1d16:	bf00      	nop
    1d18:	e000ed10 	.word	0xe000ed10
    1d1c:	40020250 	.word	0x40020250
    1d20:	4002000c 	.word	0x4002000c
    1d24:	10001178 	.word	0x10001178
    1d28:	40021000 	.word	0x40021000
    1d2c:	40021008 	.word	0x40021008
    1d30:	10001171 	.word	0x10001171
    1d34:	40020068 	.word	0x40020068
    1d38:	10001174 	.word	0x10001174

00001d3c <am_hal_uart_config>:
    1d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d3e:	680d      	ldr	r5, [r1, #0]
    1d40:	460f      	mov	r7, r1
    1d42:	4606      	mov	r6, r0
    1d44:	f7ff fbe4 	bl	1510 <am_hal_clkgen_sysclk_get>
    1d48:	0169      	lsls	r1, r5, #5
    1d4a:	0182      	lsls	r2, r0, #6
    1d4c:	fbb0 f4f1 	udiv	r4, r0, r1
    1d50:	fbb2 f0f1 	udiv	r0, r2, r1
    1d54:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    1d58:	b924      	cbnz	r4, 1d64 <am_hal_uart_config+0x28>
    1d5a:	4a11      	ldr	r2, [pc, #68]	; (1da0 <am_hal_uart_config+0x64>)
    1d5c:	4811      	ldr	r0, [pc, #68]	; (1da4 <am_hal_uart_config+0x68>)
    1d5e:	2161      	movs	r1, #97	; 0x61
    1d60:	f7ff fd14 	bl	178c <am_hal_debug_error>
    1d64:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    1d68:	331c      	adds	r3, #28
    1d6a:	031b      	lsls	r3, r3, #12
    1d6c:	7a3e      	ldrb	r6, [r7, #8]
    1d6e:	625c      	str	r4, [r3, #36]	; 0x24
    1d70:	625c      	str	r4, [r3, #36]	; 0x24
    1d72:	629d      	str	r5, [r3, #40]	; 0x28
    1d74:	6879      	ldr	r1, [r7, #4]
    1d76:	68fa      	ldr	r2, [r7, #12]
    1d78:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1d7a:	430a      	orrs	r2, r1
    1d7c:	2e00      	cmp	r6, #0
    1d7e:	ea42 0004 	orr.w	r0, r2, r4
    1d82:	bf14      	ite	ne
    1d84:	2208      	movne	r2, #8
    1d86:	2200      	moveq	r2, #0
    1d88:	4302      	orrs	r2, r0
    1d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    1d8c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    1d8e:	693f      	ldr	r7, [r7, #16]
    1d90:	432f      	orrs	r7, r5
    1d92:	631f      	str	r7, [r3, #48]	; 0x30
    1d94:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1d96:	f046 0110 	orr.w	r1, r6, #16
    1d9a:	6319      	str	r1, [r3, #48]	; 0x30
    1d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d9e:	bf00      	nop
    1da0:	00001fac 	.word	0x00001fac
    1da4:	00001fe0 	.word	0x00001fe0

00001da8 <am_hal_uart_int_clear>:
    1da8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dac:	301c      	adds	r0, #28
    1dae:	0302      	lsls	r2, r0, #12
    1db0:	6451      	str	r1, [r2, #68]	; 0x44
    1db2:	4770      	bx	lr

00001db4 <am_hal_uart_enable>:
    1db4:	b082      	sub	sp, #8
    1db6:	f3ef 8310 	mrs	r3, PRIMASK
    1dba:	9301      	str	r3, [sp, #4]
    1dbc:	b672      	cpsid	i
    1dbe:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dc2:	301c      	adds	r0, #28
    1dc4:	0301      	lsls	r1, r0, #12
    1dc6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1dc8:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    1dcc:	f04c 0301 	orr.w	r3, ip, #1
    1dd0:	630b      	str	r3, [r1, #48]	; 0x30
    1dd2:	9801      	ldr	r0, [sp, #4]
    1dd4:	f380 8810 	msr	PRIMASK, r0
    1dd8:	b002      	add	sp, #8
    1dda:	4770      	bx	lr

00001ddc <am_hal_uart_disable>:
    1ddc:	b082      	sub	sp, #8
    1dde:	f3ef 8310 	mrs	r3, PRIMASK
    1de2:	9301      	str	r3, [sp, #4]
    1de4:	b672      	cpsid	i
    1de6:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dea:	301c      	adds	r0, #28
    1dec:	0301      	lsls	r1, r0, #12
    1dee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1df0:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    1df4:	f02c 0301 	bic.w	r3, ip, #1
    1df8:	630b      	str	r3, [r1, #48]	; 0x30
    1dfa:	9801      	ldr	r0, [sp, #4]
    1dfc:	f380 8810 	msr	PRIMASK, r0
    1e00:	b002      	add	sp, #8
    1e02:	4770      	bx	lr

00001e04 <am_hal_uart_pwrctrl_enable>:
    1e04:	2801      	cmp	r0, #1
    1e06:	b510      	push	{r4, lr}
    1e08:	4604      	mov	r4, r0
    1e0a:	d905      	bls.n	1e18 <am_hal_uart_pwrctrl_enable+0x14>
    1e0c:	4a05      	ldr	r2, [pc, #20]	; (1e24 <am_hal_uart_pwrctrl_enable+0x20>)
    1e0e:	4806      	ldr	r0, [pc, #24]	; (1e28 <am_hal_uart_pwrctrl_enable+0x24>)
    1e10:	f240 11a3 	movw	r1, #419	; 0x1a3
    1e14:	f7ff fcba 	bl	178c <am_hal_debug_error>
    1e18:	2080      	movs	r0, #128	; 0x80
    1e1a:	40a0      	lsls	r0, r4
    1e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e20:	f7ff bd12 	b.w	1848 <am_hal_pwrctrl_periph_enable>
    1e24:	00001ff4 	.word	0x00001ff4
    1e28:	00001fe0 	.word	0x00001fe0

00001e2c <am_hal_uart_clock_enable>:
    1e2c:	b510      	push	{r4, lr}
    1e2e:	2101      	movs	r1, #1
    1e30:	4604      	mov	r4, r0
    1e32:	f7ff fb91 	bl	1558 <am_hal_clkgen_uarten_set>
    1e36:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1e3a:	301c      	adds	r0, #28
    1e3c:	0301      	lsls	r1, r0, #12
    1e3e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1e40:	f043 0208 	orr.w	r2, r3, #8
    1e44:	630a      	str	r2, [r1, #48]	; 0x30
    1e46:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1e48:	f044 0010 	orr.w	r0, r4, #16
    1e4c:	6308      	str	r0, [r1, #48]	; 0x30
    1e4e:	bd10      	pop	{r4, pc}

00001e50 <am_hal_uart_clock_disable>:
    1e50:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    1e54:	331c      	adds	r3, #28
    1e56:	031b      	lsls	r3, r3, #12
    1e58:	2100      	movs	r1, #0
    1e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1e5c:	f022 0208 	bic.w	r2, r2, #8
    1e60:	631a      	str	r2, [r3, #48]	; 0x30
    1e62:	f7ff bb79 	b.w	1558 <am_hal_clkgen_uarten_set>
    1e66:	bf00      	nop

00001e68 <am_hal_uart_fifo_config>:
    1e68:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e6c:	301c      	adds	r0, #28
    1e6e:	0302      	lsls	r2, r0, #12
    1e70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e72:	f043 0010 	orr.w	r0, r3, #16
    1e76:	62d0      	str	r0, [r2, #44]	; 0x2c
    1e78:	6351      	str	r1, [r2, #52]	; 0x34
    1e7a:	4770      	bx	lr

00001e7c <am_hal_uart_flags_get>:
    1e7c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e80:	301c      	adds	r0, #28
    1e82:	0301      	lsls	r1, r0, #12
    1e84:	6988      	ldr	r0, [r1, #24]
    1e86:	4770      	bx	lr

00001e88 <am_hal_uart_string_transmit_polled>:
    1e88:	b410      	push	{r4}
    1e8a:	780c      	ldrb	r4, [r1, #0]
    1e8c:	b16c      	cbz	r4, 1eaa <am_hal_uart_string_transmit_polled+0x22>
    1e8e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e92:	301c      	adds	r0, #28
    1e94:	0300      	lsls	r0, r0, #12
    1e96:	f100 0218 	add.w	r2, r0, #24
    1e9a:	6813      	ldr	r3, [r2, #0]
    1e9c:	069b      	lsls	r3, r3, #26
    1e9e:	d4fc      	bmi.n	1e9a <am_hal_uart_string_transmit_polled+0x12>
    1ea0:	6004      	str	r4, [r0, #0]
    1ea2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1ea6:	2c00      	cmp	r4, #0
    1ea8:	d1f7      	bne.n	1e9a <am_hal_uart_string_transmit_polled+0x12>
    1eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1eae:	4770      	bx	lr

00001eb0 <am_hal_vcomp_disable>:
    1eb0:	4b01      	ldr	r3, [pc, #4]	; (1eb8 <am_hal_vcomp_disable+0x8>)
    1eb2:	2237      	movs	r2, #55	; 0x37
    1eb4:	601a      	str	r2, [r3, #0]
    1eb6:	4770      	bx	lr
    1eb8:	4000c008 	.word	0x4000c008
    1ebc:	54524155 	.word	0x54524155
    1ec0:	69725020 	.word	0x69725020
    1ec4:	2066746e 	.word	0x2066746e
    1ec8:	6d617845 	.word	0x6d617845
    1ecc:	0a656c70 	.word	0x0a656c70
    1ed0:	00000000 	.word	0x00000000
    1ed4:	6542090a 	.word	0x6542090a
    1ed8:	6e6e6967 	.word	0x6e6e6967
    1edc:	20676e69 	.word	0x20676e69
    1ee0:	49435341 	.word	0x49435341
    1ee4:	61772049 	.word	0x61772049
    1ee8:	74206b6c 	.word	0x74206b6c
    1eec:	756f7268 	.word	0x756f7268
    1ef0:	0a3a6867 	.word	0x0a3a6867
    1ef4:	00000000 	.word	0x00000000
    1ef8:	00000009 	.word	0x00000009
    1efc:	00006325 	.word	0x00006325
    1f00:	0000090a 	.word	0x0000090a

00001f04 <am_hal_cachectrl_defaults>:
    1f04:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1f14:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1f24:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1f34:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1f44:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1f54:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    1f64:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    1f74:	206e6168 20656e6f 69726570 72656870     han one peripher
    1f84:	61206c61 20612074 656d6974 0000002e     al at a time....
    1f94:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    1fa4:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    1fb4:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    1fc4:	61657267 20726574 6e616874 20726f20     greater than or 
    1fd4:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    1fe4:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    1ff4:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    2004:	20612065 54524155 646f6d20 20656c75     e a UART module 
    2014:	74616874 656f6420 74276e73 69786520     that doesn't exi
    2024:	00007473 69797254 7420676e 6e65206f     st..Trying to en
    2034:	656c6261 55206120 20545241 75646f6d     able a UART modu
    2044:	7420656c 20746168 73656f64 2074276e     le that doesn't 
    2054:	73697865 00000074                       exist...
