
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\itm_printf\atollic_gcc\bin\itm_printf_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000005c  10001000  00001d4c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  1000105c  00001da8  0002105c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002105c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006380  00000000  00000000  00021093  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001aa1  00000000  00000000  00027413  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007e0  00000000  00000000  00028eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e40  00000000  00000000  00029694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003eb5  00000000  00000000  0002a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002aef  00000000  00000000  0002e389  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000015f4  00000000  00000000  00030ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003837  00000000  00000000  000324ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 b9 02 00 00 21 03 00 00 31 03 00 00     ........!...1...
      10:	31 03 00 00 31 03 00 00 31 03 00 00 00 00 00 00     1...1...1.......
	...
      2c:	29 03 00 00 29 03 00 00 00 00 00 00 29 03 00 00     )...).......)...
      3c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      4c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      5c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      6c:	29 03 00 00 29 03 00 00 a5 01 00 00 29 03 00 00     )...).......)...
      7c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      8c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      9c:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      ac:	29 03 00 00 29 03 00 00 29 03 00 00 29 03 00 00     )...)...)...)...
      bc:	29 03 00 00                                         )...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     166:	2002      	movs	r0, #2
     168:	f001 f944 	bl	13f4 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     170:	2000      	movs	r0, #0
     172:	f001 f9dd 	bl	1530 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer3);
     176:	490a      	ldr	r1, [pc, #40]	; (1a0 <timerA0_init+0x40>)
     178:	2000      	movs	r0, #0
     17a:	f001 f94f 	bl	141c <am_hal_ctimer_config>
    // With LFRC running at 512 Hz, set up a print rate of 32 Hz.
    //  ui32Period = 8:  ~64 Hz print rate
    //  ui32Period = 16: ~32 Hz print rate
    //  ui32Period = 32: ~16 Hz print rate
    //
    ui32Period = 16;
     17e:	2310      	movs	r3, #16
     180:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     182:	687b      	ldr	r3, [r7, #4]
     184:	085b      	lsrs	r3, r3, #1
     186:	687a      	ldr	r2, [r7, #4]
     188:	f64f 71ff 	movw	r1, #65535	; 0xffff
     18c:	2000      	movs	r0, #0
     18e:	f001 f9e3 	bl	1558 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     192:	2001      	movs	r0, #1
     194:	f001 fa34 	bl	1600 <am_hal_ctimer_int_clear>
}
     198:	bf00      	nop
     19a:	3708      	adds	r7, #8
     19c:	46bd      	mov	sp, r7
     19e:	bd80      	pop	{r7, pc}
     1a0:	10001000 	.word	0x10001000

000001a4 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     1a8:	2001      	movs	r0, #1
     1aa:	f001 fa29 	bl	1600 <am_hal_ctimer_int_clear>
}
     1ae:	bf00      	nop
     1b0:	bd80      	pop	{r7, pc}
     1b2:	bf00      	nop

000001b4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
    uint32_t i;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     1ba:	2000      	movs	r0, #0
     1bc:	f001 f8f2 	bl	13a4 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     1c0:	4832      	ldr	r0, [pc, #200]	; (28c <main+0xd8>)
     1c2:	f001 f859 	bl	1278 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     1c6:	f000 ffcd 	bl	1164 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     1ca:	4831      	ldr	r0, [pc, #196]	; (290 <main+0xdc>)
     1cc:	f000 f930 	bl	430 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     1d0:	f3ef 8310 	mrs	r3, PRIMASK
     1d4:	603b      	str	r3, [r7, #0]
     1d6:	b672      	cpsid	i
     1d8:	4b2e      	ldr	r3, [pc, #184]	; (294 <main+0xe0>)
     1da:	2273      	movs	r2, #115	; 0x73
     1dc:	601a      	str	r2, [r3, #0]
     1de:	4a2e      	ldr	r2, [pc, #184]	; (298 <main+0xe4>)
     1e0:	4b2d      	ldr	r3, [pc, #180]	; (298 <main+0xe4>)
     1e2:	681b      	ldr	r3, [r3, #0]
     1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1e8:	6013      	str	r3, [r2, #0]
     1ea:	4a2c      	ldr	r2, [pc, #176]	; (29c <main+0xe8>)
     1ec:	4b2b      	ldr	r3, [pc, #172]	; (29c <main+0xe8>)
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1f8:	6013      	str	r3, [r2, #0]
     1fa:	4a29      	ldr	r2, [pc, #164]	; (2a0 <main+0xec>)
     1fc:	4b28      	ldr	r3, [pc, #160]	; (2a0 <main+0xec>)
     1fe:	681b      	ldr	r3, [r3, #0]
     200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     204:	6013      	str	r3, [r2, #0]
     206:	4b23      	ldr	r3, [pc, #140]	; (294 <main+0xe0>)
     208:	2200      	movs	r2, #0
     20a:	601a      	str	r2, [r3, #0]
     20c:	683b      	ldr	r3, [r7, #0]
     20e:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     212:	f001 fa37 	bl	1684 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     216:	f000 ffb7 	bl	1188 <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     21a:	f000 ff99 	bl	1150 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ITM Printf Example\n");
     21e:	4821      	ldr	r0, [pc, #132]	; (2a4 <main+0xf0>)
     220:	f000 ff78 	bl	1114 <am_util_stdio_printf>

    //
    // Introduce the string of characters.
    //
    am_util_stdio_printf("\n\tBeginning ASCII walk through:\n");
     224:	4820      	ldr	r0, [pc, #128]	; (2a8 <main+0xf4>)
     226:	f000 ff75 	bl	1114 <am_util_stdio_printf>
    am_util_stdio_printf("\t");
     22a:	4820      	ldr	r0, [pc, #128]	; (2ac <main+0xf8>)
     22c:	f000 ff72 	bl	1114 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     230:	f000 ffea 	bl	1208 <am_bsp_debug_printf_disable>

    //
    // TimerA0 init.
    //
    timerA0_init();
     234:	f7ff ff94 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     238:	2001      	movs	r0, #1
     23a:	f001 f9d1 	bl	15e0 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     23e:	201d      	movs	r0, #29
     240:	f001 f9ec 	bl	161c <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     244:	f001 fa12 	bl	166c <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     248:	f64f 71ff 	movw	r1, #65535	; 0xffff
     24c:	2000      	movs	r0, #0
     24e:	f001 f955 	bl	14fc <am_hal_ctimer_start>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     252:	2321      	movs	r3, #33	; 0x21
     254:	607b      	str	r3, [r7, #4]
     256:	e00d      	b.n	274 <main+0xc0>
        {
            //
            // Enable debug printf messages using ITM on SWO pin
            //
            am_bsp_debug_printf_enable();
     258:	f000 ff96 	bl	1188 <am_bsp_debug_printf_enable>

            //
            // Walk through the ASCII table.
            //
            am_util_stdio_printf("%c", i);
     25c:	6879      	ldr	r1, [r7, #4]
     25e:	4814      	ldr	r0, [pc, #80]	; (2b0 <main+0xfc>)
     260:	f000 ff58 	bl	1114 <am_util_stdio_printf>

            //
            // Disable debug printf messages using ITM on SWO pin
            //
            am_bsp_debug_printf_disable();
     264:	f000 ffd0 	bl	1208 <am_bsp_debug_printf_disable>

            //
            // Go to Deep Sleep to delay.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     268:	2001      	movs	r0, #1
     26a:	f001 fc19 	bl	1aa0 <am_hal_sysctrl_sleep>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     26e:	687b      	ldr	r3, [r7, #4]
     270:	3301      	adds	r3, #1
     272:	607b      	str	r3, [r7, #4]
     274:	687b      	ldr	r3, [r7, #4]
     276:	2b7e      	cmp	r3, #126	; 0x7e
     278:	d9ee      	bls.n	258 <main+0xa4>
        }

        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
     27a:	f000 ff85 	bl	1188 <am_bsp_debug_printf_enable>

        //
        // New line.
        //
        am_util_stdio_printf("\n\t");
     27e:	480d      	ldr	r0, [pc, #52]	; (2b4 <main+0x100>)
     280:	f000 ff48 	bl	1114 <am_util_stdio_printf>

        //
        // Disable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_disable();
     284:	f000 ffc0 	bl	1208 <am_bsp_debug_printf_disable>
    }
     288:	e7e3      	b.n	252 <main+0x9e>
     28a:	bf00      	nop
     28c:	00001cf0 	.word	0x00001cf0
     290:	00001275 	.word	0x00001275
     294:	40010060 	.word	0x40010060
     298:	40010054 	.word	0x40010054
     29c:	40010028 	.word	0x40010028
     2a0:	40010108 	.word	0x40010108
     2a4:	00001c98 	.word	0x00001c98
     2a8:	00001cac 	.word	0x00001cac
     2ac:	00001cd0 	.word	0x00001cd0
     2b0:	00001cd4 	.word	0x00001cd4
     2b4:	00001cd8 	.word	0x00001cd8

000002b8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     2b8:	4811      	ldr	r0, [pc, #68]	; (300 <zero_loop+0x12>)
     2ba:	4912      	ldr	r1, [pc, #72]	; (304 <zero_loop+0x16>)
     2bc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     2be:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     2c2:	4811      	ldr	r0, [pc, #68]	; (308 <zero_loop+0x1a>)
     2c4:	6801      	ldr	r1, [r0, #0]
     2c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     2ca:	6001      	str	r1, [r0, #0]
     2cc:	f3bf 8f4f 	dsb	sy
     2d0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     2d4:	480d      	ldr	r0, [pc, #52]	; (30c <zero_loop+0x1e>)
     2d6:	490e      	ldr	r1, [pc, #56]	; (310 <zero_loop+0x22>)
     2d8:	4a0e      	ldr	r2, [pc, #56]	; (314 <zero_loop+0x26>)

000002da <copy_loop>:
     2da:	f850 3b04 	ldr.w	r3, [r0], #4
     2de:	f841 3b04 	str.w	r3, [r1], #4
     2e2:	4291      	cmp	r1, r2
     2e4:	dbf9      	blt.n	2da <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     2e6:	480c      	ldr	r0, [pc, #48]	; (318 <zero_loop+0x2a>)
     2e8:	490c      	ldr	r1, [pc, #48]	; (31c <zero_loop+0x2e>)
     2ea:	f04f 0200 	mov.w	r2, #0

000002ee <zero_loop>:
     2ee:	4288      	cmp	r0, r1
     2f0:	bfb8      	it	lt
     2f2:	f840 2b04 	strlt.w	r2, [r0], #4
     2f6:	dbfa      	blt.n	2ee <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     2f8:	f7ff ff5c 	bl	1b4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     2fc:	be00      	bkpt	0x0000
}
     2fe:	bf00      	nop
     300:	e000ed08 	.word	0xe000ed08
     304:	00000000 	.word	0x00000000
     308:	e000ed88 	.word	0xe000ed88
     30c:	00001d4c 	.word	0x00001d4c
     310:	10001000 	.word	0x10001000
     314:	1000105c 	.word	0x1000105c
     318:	1000105c 	.word	0x1000105c
     31c:	10001174 	.word	0x10001174

00000320 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     320:	b480      	push	{r7}
     322:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     324:	e7fe      	b.n	324 <am_nmi_isr+0x4>
     326:	bf00      	nop

00000328 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     328:	b480      	push	{r7}
     32a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     32c:	e7fe      	b.n	32c <am_adc_isr+0x4>
     32e:	bf00      	nop

00000330 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     330:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     332:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     334:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     336:	f000 f809 	bl	34c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     33a:	bd01      	pop	{r0, pc}
}
     33c:	bf00      	nop
     33e:	4618      	mov	r0, r3

00000340 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     340:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     342:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     344:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     346:	4770      	bx	lr
}
     348:	bf00      	nop
     34a:	4618      	mov	r0, r3

0000034c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     34c:	b580      	push	{r7, lr}
     34e:	b096      	sub	sp, #88	; 0x58
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     354:	f107 030c 	add.w	r3, r7, #12
     358:	2200      	movs	r2, #0
     35a:	601a      	str	r2, [r3, #0]
     35c:	605a      	str	r2, [r3, #4]
     35e:	609a      	str	r2, [r3, #8]
     360:	60da      	str	r2, [r3, #12]
     362:	611a      	str	r2, [r3, #16]
     364:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     366:	2300      	movs	r3, #0
     368:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     36c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     36e:	4b2e      	ldr	r3, [pc, #184]	; (428 <am_util_faultisr_collect_data+0xdc>)
     370:	681b      	ldr	r3, [r3, #0]
     372:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     376:	b2db      	uxtb	r3, r3
     378:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     37e:	0a1b      	lsrs	r3, r3, #8
     380:	b2db      	uxtb	r3, r3
     382:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     388:	0c1b      	lsrs	r3, r3, #16
     38a:	b29b      	uxth	r3, r3
     38c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     390:	4b26      	ldr	r3, [pc, #152]	; (42c <am_util_faultisr_collect_data+0xe0>)
     392:	681b      	ldr	r3, [r3, #0]
     394:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     396:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     39a:	b2db      	uxtb	r3, r3
     39c:	f003 0302 	and.w	r3, r3, #2
     3a0:	2b00      	cmp	r3, #0
     3a2:	d005      	beq.n	3b0 <am_util_faultisr_collect_data+0x64>
     3a4:	6879      	ldr	r1, [r7, #4]
     3a6:	2006      	movs	r0, #6
     3a8:	f7ff ffca 	bl	340 <getStackedReg>
     3ac:	4603      	mov	r3, r0
     3ae:	e001      	b.n	3b4 <am_util_faultisr_collect_data+0x68>
     3b0:	f04f 33ff 	mov.w	r3, #4294967295
     3b4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     3b6:	6879      	ldr	r1, [r7, #4]
     3b8:	2000      	movs	r0, #0
     3ba:	f7ff ffc1 	bl	340 <getStackedReg>
     3be:	4603      	mov	r3, r0
     3c0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     3c2:	6879      	ldr	r1, [r7, #4]
     3c4:	2001      	movs	r0, #1
     3c6:	f7ff ffbb 	bl	340 <getStackedReg>
     3ca:	4603      	mov	r3, r0
     3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     3ce:	6879      	ldr	r1, [r7, #4]
     3d0:	2002      	movs	r0, #2
     3d2:	f7ff ffb5 	bl	340 <getStackedReg>
     3d6:	4603      	mov	r3, r0
     3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     3da:	6879      	ldr	r1, [r7, #4]
     3dc:	2003      	movs	r0, #3
     3de:	f7ff ffaf 	bl	340 <getStackedReg>
     3e2:	4603      	mov	r3, r0
     3e4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     3e6:	6879      	ldr	r1, [r7, #4]
     3e8:	2004      	movs	r0, #4
     3ea:	f7ff ffa9 	bl	340 <getStackedReg>
     3ee:	4603      	mov	r3, r0
     3f0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3f2:	6879      	ldr	r1, [r7, #4]
     3f4:	2005      	movs	r0, #5
     3f6:	f7ff ffa3 	bl	340 <getStackedReg>
     3fa:	4603      	mov	r3, r0
     3fc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3fe:	6879      	ldr	r1, [r7, #4]
     400:	2006      	movs	r0, #6
     402:	f7ff ff9d 	bl	340 <getStackedReg>
     406:	4603      	mov	r3, r0
     408:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     40a:	6879      	ldr	r1, [r7, #4]
     40c:	2007      	movs	r0, #7
     40e:	f7ff ff97 	bl	340 <getStackedReg>
     412:	4603      	mov	r3, r0
     414:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     416:	f107 030c 	add.w	r3, r7, #12
     41a:	4618      	mov	r0, r3
     41c:	f001 f982 	bl	1724 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     420:	2300      	movs	r3, #0
     422:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     424:	e7fe      	b.n	424 <am_util_faultisr_collect_data+0xd8>
     426:	bf00      	nop
     428:	e000ed28 	.word	0xe000ed28
     42c:	e000ed38 	.word	0xe000ed38

00000430 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     430:	b480      	push	{r7}
     432:	b083      	sub	sp, #12
     434:	af00      	add	r7, sp, #0
     436:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     438:	4a04      	ldr	r2, [pc, #16]	; (44c <am_util_stdio_printf_init+0x1c>)
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	6013      	str	r3, [r2, #0]
}
     43e:	bf00      	nop
     440:	370c      	adds	r7, #12
     442:	46bd      	mov	sp, r7
     444:	f85d 7b04 	ldr.w	r7, [sp], #4
     448:	4770      	bx	lr
     44a:	bf00      	nop
     44c:	10001170 	.word	0x10001170

00000450 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     450:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     454:	b096      	sub	sp, #88	; 0x58
     456:	af00      	add	r7, sp, #0
     458:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     45c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     460:	0025      	movs	r5, r4
     462:	2600      	movs	r6, #0
     464:	ea55 0306 	orrs.w	r3, r5, r6
     468:	f000 809e 	beq.w	5a8 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     46c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     470:	0862      	lsrs	r2, r4, #1
     472:	ea4f 0133 	mov.w	r1, r3, rrx
     476:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     47a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     47e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     482:	ea4f 0994 	mov.w	r9, r4, lsr #2
     486:	eb11 0308 	adds.w	r3, r1, r8
     48a:	eb42 0409 	adc.w	r4, r2, r9
     48e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     492:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     496:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     49a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     49e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     4a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4a6:	eb13 030a 	adds.w	r3, r3, sl
     4aa:	eb44 040b 	adc.w	r4, r4, fp
     4ae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     4b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4b6:	0a1a      	lsrs	r2, r3, #8
     4b8:	62ba      	str	r2, [r7, #40]	; 0x28
     4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
     4bc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     4c0:	62ba      	str	r2, [r7, #40]	; 0x28
     4c2:	0a23      	lsrs	r3, r4, #8
     4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
     4c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     4ce:	18c9      	adds	r1, r1, r3
     4d0:	eb42 0204 	adc.w	r2, r2, r4
     4d4:	460b      	mov	r3, r1
     4d6:	4614      	mov	r4, r2
     4d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     4dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4e0:	0c1a      	lsrs	r2, r3, #16
     4e2:	623a      	str	r2, [r7, #32]
     4e4:	6a3a      	ldr	r2, [r7, #32]
     4e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     4ea:	623a      	str	r2, [r7, #32]
     4ec:	0c23      	lsrs	r3, r4, #16
     4ee:	627b      	str	r3, [r7, #36]	; 0x24
     4f0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     4f8:	18c9      	adds	r1, r1, r3
     4fa:	eb42 0204 	adc.w	r2, r2, r4
     4fe:	460b      	mov	r3, r1
     500:	4614      	mov	r4, r2
     502:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     506:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     50a:	0023      	movs	r3, r4
     50c:	603b      	str	r3, [r7, #0]
     50e:	2300      	movs	r3, #0
     510:	607b      	str	r3, [r7, #4]
     512:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     516:	e897 0006 	ldmia.w	r7, {r1, r2}
     51a:	18c9      	adds	r1, r1, r3
     51c:	eb42 0204 	adc.w	r2, r2, r4
     520:	460b      	mov	r3, r1
     522:	4614      	mov	r4, r2
     524:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     528:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     52c:	08da      	lsrs	r2, r3, #3
     52e:	613a      	str	r2, [r7, #16]
     530:	693a      	ldr	r2, [r7, #16]
     532:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     536:	613a      	str	r2, [r7, #16]
     538:	08e3      	lsrs	r3, r4, #3
     53a:	617b      	str	r3, [r7, #20]
     53c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     540:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     544:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     548:	18db      	adds	r3, r3, r3
     54a:	eb44 0404 	adc.w	r4, r4, r4
     54e:	00a2      	lsls	r2, r4, #2
     550:	60fa      	str	r2, [r7, #12]
     552:	68fa      	ldr	r2, [r7, #12]
     554:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     558:	60fa      	str	r2, [r7, #12]
     55a:	009a      	lsls	r2, r3, #2
     55c:	60ba      	str	r2, [r7, #8]
     55e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     562:	18c9      	adds	r1, r1, r3
     564:	eb42 0204 	adc.w	r2, r2, r4
     568:	460b      	mov	r3, r1
     56a:	4614      	mov	r4, r2
     56c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     570:	1acb      	subs	r3, r1, r3
     572:	eb62 0404 	sbc.w	r4, r2, r4
     576:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     57a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     57e:	3306      	adds	r3, #6
     580:	f144 0400 	adc.w	r4, r4, #0
     584:	091a      	lsrs	r2, r3, #4
     586:	61ba      	str	r2, [r7, #24]
     588:	69ba      	ldr	r2, [r7, #24]
     58a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     58e:	61ba      	str	r2, [r7, #24]
     590:	0923      	lsrs	r3, r4, #4
     592:	61fb      	str	r3, [r7, #28]
     594:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     598:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     59c:	18c9      	adds	r1, r1, r3
     59e:	eb42 0204 	adc.w	r2, r2, r4
     5a2:	460b      	mov	r3, r1
     5a4:	4614      	mov	r4, r2
     5a6:	e029      	b.n	5fc <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5aa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ae:	085a      	lsrs	r2, r3, #1
     5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b2:	089b      	lsrs	r3, r3, #2
     5b4:	4413      	add	r3, r2
     5b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ba:	091b      	lsrs	r3, r3, #4
     5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5be:	4413      	add	r3, r2
     5c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5c4:	0a1b      	lsrs	r3, r3, #8
     5c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5c8:	4413      	add	r3, r2
     5ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ce:	0c1b      	lsrs	r3, r3, #16
     5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5d2:	4413      	add	r3, r2
     5d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5d8:	08db      	lsrs	r3, r3, #3
     5da:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     5dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5de:	4613      	mov	r3, r2
     5e0:	009b      	lsls	r3, r3, #2
     5e2:	4413      	add	r3, r2
     5e4:	005b      	lsls	r3, r3, #1
     5e6:	461a      	mov	r2, r3
     5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ea:	1a9b      	subs	r3, r3, r2
     5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5f0:	3306      	adds	r3, #6
     5f2:	091a      	lsrs	r2, r3, #4
     5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5f6:	4413      	add	r3, r2
     5f8:	f04f 0400 	mov.w	r4, #0
    }
}
     5fc:	4618      	mov	r0, r3
     5fe:	4621      	mov	r1, r4
     600:	3758      	adds	r7, #88	; 0x58
     602:	46bd      	mov	sp, r7
     604:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     608:	4770      	bx	lr
     60a:	bf00      	nop

0000060c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     60c:	b590      	push	{r4, r7, lr}
     60e:	b085      	sub	sp, #20
     610:	af00      	add	r7, sp, #0
     612:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     616:	683a      	ldr	r2, [r7, #0]
     618:	687b      	ldr	r3, [r7, #4]
     61a:	4313      	orrs	r3, r2
     61c:	2b00      	cmp	r3, #0
     61e:	bf0c      	ite	eq
     620:	2301      	moveq	r3, #1
     622:	2300      	movne	r3, #0
     624:	b2db      	uxtb	r3, r3
     626:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     628:	e008      	b.n	63c <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     62a:	e9d7 0100 	ldrd	r0, r1, [r7]
     62e:	f7ff ff0f 	bl	450 <divu64_10>
     632:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     636:	68fb      	ldr	r3, [r7, #12]
     638:	3301      	adds	r3, #1
     63a:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     63c:	e897 0018 	ldmia.w	r7, {r3, r4}
     640:	4323      	orrs	r3, r4
     642:	d1f2      	bne.n	62a <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     644:	68fb      	ldr	r3, [r7, #12]
}
     646:	4618      	mov	r0, r3
     648:	3714      	adds	r7, #20
     64a:	46bd      	mov	sp, r7
     64c:	bd90      	pop	{r4, r7, pc}
     64e:	bf00      	nop

00000650 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     650:	b590      	push	{r4, r7, lr}
     652:	b083      	sub	sp, #12
     654:	af00      	add	r7, sp, #0
     656:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     65a:	e897 0018 	ldmia.w	r7, {r3, r4}
     65e:	2b00      	cmp	r3, #0
     660:	f174 0300 	sbcs.w	r3, r4, #0
     664:	da06      	bge.n	674 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     666:	e897 0018 	ldmia.w	r7, {r3, r4}
     66a:	425b      	negs	r3, r3
     66c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     670:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     674:	e897 0018 	ldmia.w	r7, {r3, r4}
     678:	4618      	mov	r0, r3
     67a:	4621      	mov	r1, r4
     67c:	f7ff ffc6 	bl	60c <ndigits_in_u64>
     680:	4603      	mov	r3, r0
}
     682:	4618      	mov	r0, r3
     684:	370c      	adds	r7, #12
     686:	46bd      	mov	sp, r7
     688:	bd90      	pop	{r4, r7, pc}
     68a:	bf00      	nop

0000068c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     68c:	b490      	push	{r4, r7}
     68e:	b084      	sub	sp, #16
     690:	af00      	add	r7, sp, #0
     692:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     696:	6839      	ldr	r1, [r7, #0]
     698:	687a      	ldr	r2, [r7, #4]
     69a:	430a      	orrs	r2, r1
     69c:	2a00      	cmp	r2, #0
     69e:	bf0c      	ite	eq
     6a0:	2201      	moveq	r2, #1
     6a2:	2200      	movne	r2, #0
     6a4:	b2d2      	uxtb	r2, r2
     6a6:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     6a8:	e00a      	b.n	6c0 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     6aa:	e897 0006 	ldmia.w	r7, {r1, r2}
     6ae:	090b      	lsrs	r3, r1, #4
     6b0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     6b4:	0914      	lsrs	r4, r2, #4
     6b6:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     6ba:	68fa      	ldr	r2, [r7, #12]
     6bc:	3201      	adds	r2, #1
     6be:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     6c0:	e897 0006 	ldmia.w	r7, {r1, r2}
     6c4:	430a      	orrs	r2, r1
     6c6:	d1f0      	bne.n	6aa <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     6c8:	68fb      	ldr	r3, [r7, #12]
}
     6ca:	4618      	mov	r0, r3
     6cc:	3710      	adds	r7, #16
     6ce:	46bd      	mov	sp, r7
     6d0:	bc90      	pop	{r4, r7}
     6d2:	4770      	bx	lr

000006d4 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     6d4:	b480      	push	{r7}
     6d6:	b087      	sub	sp, #28
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     6de:	2300      	movs	r3, #0
     6e0:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     6e2:	2300      	movs	r3, #0
     6e4:	613b      	str	r3, [r7, #16]
     6e6:	2300      	movs	r3, #0
     6e8:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	2b2d      	cmp	r3, #45	; 0x2d
     6f0:	d11b      	bne.n	72a <decstr_to_int+0x56>
    {
        bNeg = true;
     6f2:	2301      	movs	r3, #1
     6f4:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	3301      	adds	r3, #1
     6fa:	607b      	str	r3, [r7, #4]
        uCnt++;
     6fc:	68fb      	ldr	r3, [r7, #12]
     6fe:	3301      	adds	r3, #1
     700:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     702:	e012      	b.n	72a <decstr_to_int+0x56>
    {
        ++uCnt;
     704:	68fb      	ldr	r3, [r7, #12]
     706:	3301      	adds	r3, #1
     708:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     70a:	693a      	ldr	r2, [r7, #16]
     70c:	4613      	mov	r3, r2
     70e:	009b      	lsls	r3, r3, #2
     710:	4413      	add	r3, r2
     712:	005b      	lsls	r3, r3, #1
     714:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     716:	687b      	ldr	r3, [r7, #4]
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	461a      	mov	r2, r3
     71c:	693b      	ldr	r3, [r7, #16]
     71e:	4413      	add	r3, r2
     720:	3b30      	subs	r3, #48	; 0x30
     722:	613b      	str	r3, [r7, #16]
        pcStr++;
     724:	687b      	ldr	r3, [r7, #4]
     726:	3301      	adds	r3, #1
     728:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	2b2f      	cmp	r3, #47	; 0x2f
     730:	d903      	bls.n	73a <decstr_to_int+0x66>
     732:	687b      	ldr	r3, [r7, #4]
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2b39      	cmp	r3, #57	; 0x39
     738:	d9e4      	bls.n	704 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	2b00      	cmp	r3, #0
     73e:	d002      	beq.n	746 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     740:	683b      	ldr	r3, [r7, #0]
     742:	68fa      	ldr	r2, [r7, #12]
     744:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     746:	7dfb      	ldrb	r3, [r7, #23]
     748:	2b00      	cmp	r3, #0
     74a:	d002      	beq.n	752 <decstr_to_int+0x7e>
     74c:	693b      	ldr	r3, [r7, #16]
     74e:	425b      	negs	r3, r3
     750:	e000      	b.n	754 <decstr_to_int+0x80>
     752:	693b      	ldr	r3, [r7, #16]
}
     754:	4618      	mov	r0, r3
     756:	371c      	adds	r7, #28
     758:	46bd      	mov	sp, r7
     75a:	f85d 7b04 	ldr.w	r7, [sp], #4
     75e:	4770      	bx	lr

00000760 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     760:	b590      	push	{r4, r7, lr}
     762:	b091      	sub	sp, #68	; 0x44
     764:	af00      	add	r7, sp, #0
     766:	e9c7 0102 	strd	r0, r1, [r7, #8]
     76a:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     76c:	2300      	movs	r3, #0
     76e:	63fb      	str	r3, [r7, #60]	; 0x3c
     770:	2300      	movs	r3, #0
     772:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     778:	f7ff fe6a 	bl	450 <divu64_10>
     77c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     780:	68b9      	ldr	r1, [r7, #8]
     782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     784:	4613      	mov	r3, r2
     786:	009b      	lsls	r3, r3, #2
     788:	4413      	add	r3, r2
     78a:	005b      	lsls	r3, r3, #1
     78c:	1acb      	subs	r3, r1, r3
     78e:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     792:	1c5a      	adds	r2, r3, #1
     794:	63fa      	str	r2, [r7, #60]	; 0x3c
     796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     798:	b2d2      	uxtb	r2, r2
     79a:	3230      	adds	r2, #48	; 0x30
     79c:	b2d2      	uxtb	r2, r2
     79e:	f107 0140 	add.w	r1, r7, #64	; 0x40
     7a2:	440b      	add	r3, r1
     7a4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     7a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     7b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     7b4:	4323      	orrs	r3, r4
     7b6:	d1dd      	bne.n	774 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7ba:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	2b00      	cmp	r3, #0
     7c0:	d011      	beq.n	7e6 <uint64_to_str+0x86>
    {
        while ( ix-- )
     7c2:	e008      	b.n	7d6 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	1c5a      	adds	r2, r3, #1
     7c8:	607a      	str	r2, [r7, #4]
     7ca:	f107 0110 	add.w	r1, r7, #16
     7ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     7d0:	440a      	add	r2, r1
     7d2:	7812      	ldrb	r2, [r2, #0]
     7d4:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7d8:	1e5a      	subs	r2, r3, #1
     7da:	63fa      	str	r2, [r7, #60]	; 0x3c
     7dc:	2b00      	cmp	r3, #0
     7de:	d1f1      	bne.n	7c4 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2200      	movs	r2, #0
     7e4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     7e8:	4618      	mov	r0, r3
     7ea:	3744      	adds	r7, #68	; 0x44
     7ec:	46bd      	mov	sp, r7
     7ee:	bd90      	pop	{r4, r7, pc}

000007f0 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     7f0:	b4b0      	push	{r4, r5, r7}
     7f2:	b08d      	sub	sp, #52	; 0x34
     7f4:	af00      	add	r7, sp, #0
     7f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
     7fa:	607a      	str	r2, [r7, #4]
     7fc:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     7fe:	2300      	movs	r3, #0
     800:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     806:	4313      	orrs	r3, r2
     808:	d131      	bne.n	86e <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     80c:	1c5a      	adds	r2, r3, #1
     80e:	62fa      	str	r2, [r7, #44]	; 0x2c
     810:	f107 0230 	add.w	r2, r7, #48	; 0x30
     814:	4413      	add	r3, r2
     816:	2230      	movs	r2, #48	; 0x30
     818:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     81c:	e027      	b.n	86e <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     81e:	7a3b      	ldrb	r3, [r7, #8]
     820:	f003 030f 	and.w	r3, r3, #15
     824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     82c:	2b09      	cmp	r3, #9
     82e:	d90a      	bls.n	846 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     830:	78fb      	ldrb	r3, [r7, #3]
     832:	2b00      	cmp	r3, #0
     834:	d001      	beq.n	83a <uint64_to_hexstr+0x4a>
     836:	2227      	movs	r2, #39	; 0x27
     838:	e000      	b.n	83c <uint64_to_hexstr+0x4c>
     83a:	2207      	movs	r2, #7
     83c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     840:	4413      	add	r3, r2
     842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     848:	1c5a      	adds	r2, r3, #1
     84a:	62fa      	str	r2, [r7, #44]	; 0x2c
     84c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     850:	3230      	adds	r2, #48	; 0x30
     852:	b2d2      	uxtb	r2, r2
     854:	f107 0130 	add.w	r1, r7, #48	; 0x30
     858:	440b      	add	r3, r1
     85a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     85e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     862:	0914      	lsrs	r4, r2, #4
     864:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     868:	091d      	lsrs	r5, r3, #4
     86a:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     86e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     872:	4313      	orrs	r3, r2
     874:	d1d3      	bne.n	81e <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     878:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2b00      	cmp	r3, #0
     87e:	d011      	beq.n	8a4 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     880:	e008      	b.n	894 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     882:	687b      	ldr	r3, [r7, #4]
     884:	1c5a      	adds	r2, r3, #1
     886:	607a      	str	r2, [r7, #4]
     888:	f107 0110 	add.w	r1, r7, #16
     88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     88e:	440a      	add	r2, r1
     890:	7812      	ldrb	r2, [r2, #0]
     892:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     896:	1e5a      	subs	r2, r3, #1
     898:	62fa      	str	r2, [r7, #44]	; 0x2c
     89a:	2b00      	cmp	r3, #0
     89c:	d1f1      	bne.n	882 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	2200      	movs	r2, #0
     8a2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     8a6:	4618      	mov	r0, r3
     8a8:	3734      	adds	r7, #52	; 0x34
     8aa:	46bd      	mov	sp, r7
     8ac:	bcb0      	pop	{r4, r5, r7}
     8ae:	4770      	bx	lr

000008b0 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     8b0:	b480      	push	{r7}
     8b2:	b085      	sub	sp, #20
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     8b8:	2300      	movs	r3, #0
     8ba:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	2b00      	cmp	r3, #0
     8c0:	d104      	bne.n	8cc <simple_strlen+0x1c>
    {
        return ui32RetVal;
     8c2:	68fb      	ldr	r3, [r7, #12]
     8c4:	e009      	b.n	8da <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     8c6:	68fb      	ldr	r3, [r7, #12]
     8c8:	3301      	adds	r3, #1
     8ca:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	1c5a      	adds	r2, r3, #1
     8d0:	607a      	str	r2, [r7, #4]
     8d2:	781b      	ldrb	r3, [r3, #0]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d1f6      	bne.n	8c6 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     8d8:	68fb      	ldr	r3, [r7, #12]
}
     8da:	4618      	mov	r0, r3
     8dc:	3714      	adds	r7, #20
     8de:	46bd      	mov	sp, r7
     8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e4:	4770      	bx	lr
     8e6:	bf00      	nop

000008e8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     8e8:	b480      	push	{r7}
     8ea:	b087      	sub	sp, #28
     8ec:	af00      	add	r7, sp, #0
     8ee:	60f8      	str	r0, [r7, #12]
     8f0:	460b      	mov	r3, r1
     8f2:	607a      	str	r2, [r7, #4]
     8f4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     8f6:	2300      	movs	r3, #0
     8f8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	2b00      	cmp	r3, #0
     8fe:	dc0c      	bgt.n	91a <padbuffer+0x32>
    {
        return i32Cnt;
     900:	697b      	ldr	r3, [r7, #20]
     902:	e010      	b.n	926 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     904:	68fb      	ldr	r3, [r7, #12]
     906:	2b00      	cmp	r3, #0
     908:	d004      	beq.n	914 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	1c5a      	adds	r2, r3, #1
     90e:	60fa      	str	r2, [r7, #12]
     910:	7afa      	ldrb	r2, [r7, #11]
     912:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     914:	697b      	ldr	r3, [r7, #20]
     916:	3301      	adds	r3, #1
     918:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	1e5a      	subs	r2, r3, #1
     91e:	607a      	str	r2, [r7, #4]
     920:	2b00      	cmp	r3, #0
     922:	d1ef      	bne.n	904 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     924:	697b      	ldr	r3, [r7, #20]
}
     926:	4618      	mov	r0, r3
     928:	371c      	adds	r7, #28
     92a:	46bd      	mov	sp, r7
     92c:	f85d 7b04 	ldr.w	r7, [sp], #4
     930:	4770      	bx	lr
     932:	bf00      	nop

00000934 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     934:	b590      	push	{r4, r7, lr}
     936:	b08f      	sub	sp, #60	; 0x3c
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     940:	68bb      	ldr	r3, [r7, #8]
     942:	681b      	ldr	r3, [r3, #0]
     944:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     946:	6abb      	ldr	r3, [r7, #40]	; 0x28
     948:	2b03      	cmp	r3, #3
     94a:	dc02      	bgt.n	952 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     94c:	f06f 0302 	mvn.w	r3, #2
     950:	e0d4      	b.n	afc <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     952:	edd7 7a03 	vldr	s15, [r7, #12]
     956:	eef5 7a40 	vcmp.f32	s15, #0.0
     95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     95e:	d104      	bne.n	96a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     960:	68bb      	ldr	r3, [r7, #8]
     962:	4a68      	ldr	r2, [pc, #416]	; (b04 <ftoa+0x1d0>)
     964:	601a      	str	r2, [r3, #0]
        return 3;
     966:	2303      	movs	r3, #3
     968:	e0c8      	b.n	afc <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     96a:	68bb      	ldr	r3, [r7, #8]
     96c:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     96e:	68fb      	ldr	r3, [r7, #12]
     970:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     972:	697b      	ldr	r3, [r7, #20]
     974:	15db      	asrs	r3, r3, #23
     976:	b2db      	uxtb	r3, r3
     978:	3b7f      	subs	r3, #127	; 0x7f
     97a:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     97c:	697b      	ldr	r3, [r7, #20]
     97e:	f3c3 0316 	ubfx	r3, r3, #0, #23
     982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     986:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     988:	2300      	movs	r3, #0
     98a:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     98c:	2300      	movs	r3, #0
     98e:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     990:	6a3b      	ldr	r3, [r7, #32]
     992:	2b1e      	cmp	r3, #30
     994:	dd02      	ble.n	99c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     996:	f06f 0301 	mvn.w	r3, #1
     99a:	e0af      	b.n	afc <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     99c:	6a3b      	ldr	r3, [r7, #32]
     99e:	f113 0f17 	cmn.w	r3, #23
     9a2:	da02      	bge.n	9aa <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     9a4:	f04f 33ff 	mov.w	r3, #4294967295
     9a8:	e0a8      	b.n	afc <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     9aa:	6a3b      	ldr	r3, [r7, #32]
     9ac:	2b16      	cmp	r3, #22
     9ae:	dd06      	ble.n	9be <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     9b0:	6a3b      	ldr	r3, [r7, #32]
     9b2:	3b17      	subs	r3, #23
     9b4:	69fa      	ldr	r2, [r7, #28]
     9b6:	fa02 f303 	lsl.w	r3, r2, r3
     9ba:	637b      	str	r3, [r7, #52]	; 0x34
     9bc:	e01a      	b.n	9f4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     9be:	6a3b      	ldr	r3, [r7, #32]
     9c0:	2b00      	cmp	r3, #0
     9c2:	db0f      	blt.n	9e4 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     9c4:	6a3b      	ldr	r3, [r7, #32]
     9c6:	f1c3 0317 	rsb	r3, r3, #23
     9ca:	69fa      	ldr	r2, [r7, #28]
     9cc:	fa42 f303 	asr.w	r3, r2, r3
     9d0:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     9d2:	6a3b      	ldr	r3, [r7, #32]
     9d4:	3301      	adds	r3, #1
     9d6:	69fa      	ldr	r2, [r7, #28]
     9d8:	fa02 f303 	lsl.w	r3, r2, r3
     9dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9e0:	633b      	str	r3, [r7, #48]	; 0x30
     9e2:	e007      	b.n	9f4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     9e4:	69fb      	ldr	r3, [r7, #28]
     9e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     9ea:	6a3b      	ldr	r3, [r7, #32]
     9ec:	43db      	mvns	r3, r3
     9ee:	fa42 f303 	asr.w	r3, r2, r3
     9f2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     9f4:	697b      	ldr	r3, [r7, #20]
     9f6:	2b00      	cmp	r3, #0
     9f8:	da04      	bge.n	a04 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     9fa:	68bb      	ldr	r3, [r7, #8]
     9fc:	1c5a      	adds	r2, r3, #1
     9fe:	60ba      	str	r2, [r7, #8]
     a00:	222d      	movs	r2, #45	; 0x2d
     a02:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a06:	2b00      	cmp	r3, #0
     a08:	d105      	bne.n	a16 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	60ba      	str	r2, [r7, #8]
     a10:	2230      	movs	r2, #48	; 0x30
     a12:	701a      	strb	r2, [r3, #0]
     a14:	e021      	b.n	a5a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a18:	2b00      	cmp	r3, #0
     a1a:	dd08      	ble.n	a2e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a1e:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a22:	68ba      	ldr	r2, [r7, #8]
     a24:	4618      	mov	r0, r3
     a26:	4621      	mov	r1, r4
     a28:	f7ff fe9a 	bl	760 <uint64_to_str>
     a2c:	e011      	b.n	a52 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     a2e:	68bb      	ldr	r3, [r7, #8]
     a30:	1c5a      	adds	r2, r3, #1
     a32:	60ba      	str	r2, [r7, #8]
     a34:	222d      	movs	r2, #45	; 0x2d
     a36:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a3a:	425b      	negs	r3, r3
     a3c:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a40:	68ba      	ldr	r2, [r7, #8]
     a42:	4618      	mov	r0, r3
     a44:	4621      	mov	r1, r4
     a46:	f7ff fe8b 	bl	760 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     a4a:	e002      	b.n	a52 <ftoa+0x11e>
        {
            pcBuf++;
     a4c:	68bb      	ldr	r3, [r7, #8]
     a4e:	3301      	adds	r3, #1
     a50:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     a52:	68bb      	ldr	r3, [r7, #8]
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d1f8      	bne.n	a4c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     a5a:	68bb      	ldr	r3, [r7, #8]
     a5c:	1c5a      	adds	r2, r3, #1
     a5e:	60ba      	str	r2, [r7, #8]
     a60:	222e      	movs	r2, #46	; 0x2e
     a62:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a66:	2b00      	cmp	r3, #0
     a68:	d105      	bne.n	a76 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     a6a:	68bb      	ldr	r3, [r7, #8]
     a6c:	1c5a      	adds	r2, r3, #1
     a6e:	60ba      	str	r2, [r7, #8]
     a70:	2230      	movs	r2, #48	; 0x30
     a72:	701a      	strb	r2, [r3, #0]
     a74:	e03c      	b.n	af0 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     a76:	68ba      	ldr	r2, [r7, #8]
     a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a7a:	1ad3      	subs	r3, r2, r3
     a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a7e:	1ad3      	subs	r3, r2, r3
     a80:	3b01      	subs	r3, #1
     a82:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     a84:	69ba      	ldr	r2, [r7, #24]
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	4293      	cmp	r3, r2
     a8a:	bfa8      	it	ge
     a8c:	4613      	movge	r3, r2
     a8e:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     a90:	2300      	movs	r3, #0
     a92:	62fb      	str	r3, [r7, #44]	; 0x2c
     a94:	e015      	b.n	ac2 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a98:	4613      	mov	r3, r2
     a9a:	009b      	lsls	r3, r3, #2
     a9c:	4413      	add	r3, r2
     a9e:	005b      	lsls	r3, r3, #1
     aa0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     aa2:	68bb      	ldr	r3, [r7, #8]
     aa4:	1c5a      	adds	r2, r3, #1
     aa6:	60ba      	str	r2, [r7, #8]
     aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     aaa:	1612      	asrs	r2, r2, #24
     aac:	b2d2      	uxtb	r2, r2
     aae:	3230      	adds	r2, #48	; 0x30
     ab0:	b2d2      	uxtb	r2, r2
     ab2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     aba:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     abe:	3301      	adds	r3, #1
     ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
     ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ac4:	69bb      	ldr	r3, [r7, #24]
     ac6:	429a      	cmp	r2, r3
     ac8:	dbe5      	blt.n	a96 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     aca:	68bb      	ldr	r3, [r7, #8]
     acc:	3b01      	subs	r3, #1
     ace:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     ad0:	e002      	b.n	ad8 <ftoa+0x1a4>
        {
            --pcBuf;
     ad2:	68bb      	ldr	r3, [r7, #8]
     ad4:	3b01      	subs	r3, #1
     ad6:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     ad8:	68bb      	ldr	r3, [r7, #8]
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	2b30      	cmp	r3, #48	; 0x30
     ade:	d104      	bne.n	aea <ftoa+0x1b6>
     ae0:	68bb      	ldr	r3, [r7, #8]
     ae2:	3b01      	subs	r3, #1
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b2e      	cmp	r3, #46	; 0x2e
     ae8:	d1f3      	bne.n	ad2 <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     aea:	68bb      	ldr	r3, [r7, #8]
     aec:	3301      	adds	r3, #1
     aee:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     af0:	68bb      	ldr	r3, [r7, #8]
     af2:	2200      	movs	r2, #0
     af4:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     af6:	68ba      	ldr	r2, [r7, #8]
     af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     afa:	1ad3      	subs	r3, r2, r3
} // ftoa()
     afc:	4618      	mov	r0, r3
     afe:	373c      	adds	r7, #60	; 0x3c
     b00:	46bd      	mov	sp, r7
     b02:	bd90      	pop	{r4, r7, pc}
     b04:	00302e30 	.word	0x00302e30

00000b08 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     b08:	b590      	push	{r4, r7, lr}
     b0a:	b095      	sub	sp, #84	; 0x54
     b0c:	af00      	add	r7, sp, #0
     b0e:	60f8      	str	r0, [r7, #12]
     b10:	60b9      	str	r1, [r7, #8]
     b12:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     b14:	2300      	movs	r3, #0
     b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     b18:	2300      	movs	r3, #0
     b1a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     b1c:	e2e3      	b.n	10e6 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     b1e:	2306      	movs	r3, #6
     b20:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     b22:	68bb      	ldr	r3, [r7, #8]
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	2b25      	cmp	r3, #37	; 0x25
     b28:	d01f      	beq.n	b6a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d015      	beq.n	b5c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     b30:	68bb      	ldr	r3, [r7, #8]
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b0a      	cmp	r3, #10
     b36:	d10b      	bne.n	b50 <am_util_stdio_vsprintf+0x48>
     b38:	4bb1      	ldr	r3, [pc, #708]	; (e00 <am_util_stdio_vsprintf+0x2f8>)
     b3a:	781b      	ldrb	r3, [r3, #0]
     b3c:	2b00      	cmp	r3, #0
     b3e:	d007      	beq.n	b50 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	1c5a      	adds	r2, r3, #1
     b44:	60fa      	str	r2, [r7, #12]
     b46:	220d      	movs	r2, #13
     b48:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b4c:	3301      	adds	r3, #1
     b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     b50:	68fb      	ldr	r3, [r7, #12]
     b52:	1c5a      	adds	r2, r3, #1
     b54:	60fa      	str	r2, [r7, #12]
     b56:	68ba      	ldr	r2, [r7, #8]
     b58:	7812      	ldrb	r2, [r2, #0]
     b5a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     b5c:	68bb      	ldr	r3, [r7, #8]
     b5e:	3301      	adds	r3, #1
     b60:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b64:	3301      	adds	r3, #1
     b66:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     b68:	e2bd      	b.n	10e6 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     b6a:	68bb      	ldr	r3, [r7, #8]
     b6c:	3301      	adds	r3, #1
     b6e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     b70:	2300      	movs	r3, #0
     b72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     b76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     b7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     b7e:	2320      	movs	r3, #32
     b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     b84:	68bb      	ldr	r3, [r7, #8]
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	2b30      	cmp	r3, #48	; 0x30
     b8a:	d105      	bne.n	b98 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     b8c:	2330      	movs	r3, #48	; 0x30
     b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     b92:	68bb      	ldr	r3, [r7, #8]
     b94:	3301      	adds	r3, #1
     b96:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     b98:	f107 0310 	add.w	r3, r7, #16
     b9c:	4619      	mov	r1, r3
     b9e:	68b8      	ldr	r0, [r7, #8]
     ba0:	f7ff fd98 	bl	6d4 <decstr_to_int>
     ba4:	4603      	mov	r3, r0
     ba6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     ba8:	693b      	ldr	r3, [r7, #16]
     baa:	68ba      	ldr	r2, [r7, #8]
     bac:	4413      	add	r3, r2
     bae:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     bb0:	68bb      	ldr	r3, [r7, #8]
     bb2:	781b      	ldrb	r3, [r3, #0]
     bb4:	2b73      	cmp	r3, #115	; 0x73
     bb6:	d005      	beq.n	bc4 <am_util_stdio_vsprintf+0xbc>
     bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bba:	2b00      	cmp	r3, #0
     bbc:	da02      	bge.n	bc4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bc0:	425b      	negs	r3, r3
     bc2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     bc4:	68bb      	ldr	r3, [r7, #8]
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b2e      	cmp	r3, #46	; 0x2e
     bca:	d10e      	bne.n	bea <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	3301      	adds	r3, #1
     bd0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     bd2:	f107 0310 	add.w	r3, r7, #16
     bd6:	4619      	mov	r1, r3
     bd8:	68b8      	ldr	r0, [r7, #8]
     bda:	f7ff fd7b 	bl	6d4 <decstr_to_int>
     bde:	4603      	mov	r3, r0
     be0:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     be2:	693b      	ldr	r3, [r7, #16]
     be4:	68ba      	ldr	r2, [r7, #8]
     be6:	4413      	add	r3, r2
     be8:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b6c      	cmp	r3, #108	; 0x6c
     bf0:	d10c      	bne.n	c0c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     bf2:	68bb      	ldr	r3, [r7, #8]
     bf4:	3301      	adds	r3, #1
     bf6:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     bf8:	68bb      	ldr	r3, [r7, #8]
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2b6c      	cmp	r3, #108	; 0x6c
     bfe:	d105      	bne.n	c0c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     c00:	68bb      	ldr	r3, [r7, #8]
     c02:	3301      	adds	r3, #1
     c04:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     c06:	2301      	movs	r3, #1
     c08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     c0c:	68bb      	ldr	r3, [r7, #8]
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	3b46      	subs	r3, #70	; 0x46
     c12:	2b32      	cmp	r3, #50	; 0x32
     c14:	f200 8254 	bhi.w	10c0 <am_util_stdio_vsprintf+0x5b8>
     c18:	a201      	add	r2, pc, #4	; (adr r2, c20 <am_util_stdio_vsprintf+0x118>)
     c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c1e:	bf00      	nop
     c20:	0000104b 	.word	0x0000104b
     c24:	000010c1 	.word	0x000010c1
     c28:	000010c1 	.word	0x000010c1
     c2c:	000010c1 	.word	0x000010c1
     c30:	000010c1 	.word	0x000010c1
     c34:	000010c1 	.word	0x000010c1
     c38:	000010c1 	.word	0x000010c1
     c3c:	000010c1 	.word	0x000010c1
     c40:	000010c1 	.word	0x000010c1
     c44:	000010c1 	.word	0x000010c1
     c48:	000010c1 	.word	0x000010c1
     c4c:	000010c1 	.word	0x000010c1
     c50:	000010c1 	.word	0x000010c1
     c54:	000010c1 	.word	0x000010c1
     c58:	000010c1 	.word	0x000010c1
     c5c:	000010c1 	.word	0x000010c1
     c60:	000010c1 	.word	0x000010c1
     c64:	000010c1 	.word	0x000010c1
     c68:	00000de7 	.word	0x00000de7
     c6c:	000010c1 	.word	0x000010c1
     c70:	000010c1 	.word	0x000010c1
     c74:	000010c1 	.word	0x000010c1
     c78:	000010c1 	.word	0x000010c1
     c7c:	000010c1 	.word	0x000010c1
     c80:	000010c1 	.word	0x000010c1
     c84:	000010c1 	.word	0x000010c1
     c88:	000010c1 	.word	0x000010c1
     c8c:	000010c1 	.word	0x000010c1
     c90:	000010c1 	.word	0x000010c1
     c94:	00000ced 	.word	0x00000ced
     c98:	00000f13 	.word	0x00000f13
     c9c:	000010c1 	.word	0x000010c1
     ca0:	0000104b 	.word	0x0000104b
     ca4:	000010c1 	.word	0x000010c1
     ca8:	000010c1 	.word	0x000010c1
     cac:	00000f13 	.word	0x00000f13
     cb0:	000010c1 	.word	0x000010c1
     cb4:	000010c1 	.word	0x000010c1
     cb8:	000010c1 	.word	0x000010c1
     cbc:	000010c1 	.word	0x000010c1
     cc0:	000010c1 	.word	0x000010c1
     cc4:	000010c1 	.word	0x000010c1
     cc8:	000010c1 	.word	0x000010c1
     ccc:	000010c1 	.word	0x000010c1
     cd0:	000010c1 	.word	0x000010c1
     cd4:	00000d13 	.word	0x00000d13
     cd8:	000010c1 	.word	0x000010c1
     cdc:	00000e81 	.word	0x00000e81
     ce0:	000010c1 	.word	0x000010c1
     ce4:	000010c1 	.word	0x000010c1
     ce8:	00000de1 	.word	0x00000de1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	1d1a      	adds	r2, r3, #4
     cf0:	607a      	str	r2, [r7, #4]
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d005      	beq.n	d0a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	1c5a      	adds	r2, r3, #1
     d02:	60fa      	str	r2, [r7, #12]
     d04:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     d08:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d0c:	3301      	adds	r3, #1
     d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     d10:	e1e6      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	1d1a      	adds	r2, r3, #4
     d16:	607a      	str	r2, [r7, #4]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     d1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     d1e:	f7ff fdc7 	bl	8b0 <simple_strlen>
     d22:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d26:	2b00      	cmp	r3, #0
     d28:	dd2e      	ble.n	d88 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d2e:	429a      	cmp	r2, r3
     d30:	d22a      	bcs.n	d88 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d36:	1ad3      	subs	r3, r2, r3
     d38:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d40:	4619      	mov	r1, r3
     d42:	68f8      	ldr	r0, [r7, #12]
     d44:	f7ff fdd0 	bl	8e8 <padbuffer>
     d48:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     d4a:	68fb      	ldr	r3, [r7, #12]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d001      	beq.n	d54 <am_util_stdio_vsprintf+0x24c>
     d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d52:	e000      	b.n	d56 <am_util_stdio_vsprintf+0x24e>
     d54:	2300      	movs	r3, #0
     d56:	68fa      	ldr	r2, [r7, #12]
     d58:	4413      	add	r3, r2
     d5a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d60:	4413      	add	r3, r2
     d62:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     d64:	2300      	movs	r3, #0
     d66:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     d68:	e00e      	b.n	d88 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d005      	beq.n	d7c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     d70:	68fb      	ldr	r3, [r7, #12]
     d72:	1c5a      	adds	r2, r3, #1
     d74:	60fa      	str	r2, [r7, #12]
     d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     d78:	7812      	ldrb	r2, [r2, #0]
     d7a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d7e:	3301      	adds	r3, #1
     d80:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d84:	3301      	adds	r3, #1
     d86:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d1ec      	bne.n	d6a <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d92:	2b00      	cmp	r3, #0
     d94:	f000 81a1 	beq.w	10da <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d9a:	425b      	negs	r3, r3
     d9c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     da2:	429a      	cmp	r2, r3
     da4:	f080 8199 	bcs.w	10da <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dac:	1ad3      	subs	r3, r2, r3
     dae:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     db6:	4619      	mov	r1, r3
     db8:	68f8      	ldr	r0, [r7, #12]
     dba:	f7ff fd95 	bl	8e8 <padbuffer>
     dbe:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d001      	beq.n	dca <am_util_stdio_vsprintf+0x2c2>
     dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dc8:	e000      	b.n	dcc <am_util_stdio_vsprintf+0x2c4>
     dca:	2300      	movs	r3, #0
     dcc:	68fa      	ldr	r2, [r7, #12]
     dce:	4413      	add	r3, r2
     dd0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dd6:	4413      	add	r3, r2
     dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     dda:	2300      	movs	r3, #0
     ddc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     dde:	e17c      	b.n	10da <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     de0:	2301      	movs	r3, #1
     de2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     dea:	2b00      	cmp	r3, #0
     dec:	d00a      	beq.n	e04 <am_util_stdio_vsprintf+0x2fc>
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	3307      	adds	r3, #7
     df2:	f023 0307 	bic.w	r3, r3, #7
     df6:	f103 0208 	add.w	r2, r3, #8
     dfa:	607a      	str	r2, [r7, #4]
     dfc:	cb18      	ldmia	r3, {r3, r4}
     dfe:	e007      	b.n	e10 <am_util_stdio_vsprintf+0x308>
     e00:	1000115c 	.word	0x1000115c
                                      va_arg(pArgs, uint32_t);
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	1d1a      	adds	r2, r3, #4
     e08:	607a      	str	r2, [r7, #4]
     e0a:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e0c:	f04f 0400 	mov.w	r4, #0
     e10:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e16:	2b00      	cmp	r3, #0
     e18:	d01e      	beq.n	e58 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     e1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e1e:	f7ff fc35 	bl	68c <ndigits_in_hex>
     e22:	4602      	mov	r2, r0
     e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e26:	1a9b      	subs	r3, r3, r2
     e28:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e30:	4619      	mov	r1, r3
     e32:	68f8      	ldr	r0, [r7, #12]
     e34:	f7ff fd58 	bl	8e8 <padbuffer>
     e38:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d001      	beq.n	e44 <am_util_stdio_vsprintf+0x33c>
     e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e42:	e000      	b.n	e46 <am_util_stdio_vsprintf+0x33e>
     e44:	2300      	movs	r3, #0
     e46:	68fa      	ldr	r2, [r7, #12]
     e48:	4413      	add	r3, r2
     e4a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e50:	4413      	add	r3, r2
     e52:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     e54:	2300      	movs	r3, #0
     e56:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     e58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     e5c:	68fa      	ldr	r2, [r7, #12]
     e5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e62:	f7ff fcc5 	bl	7f0 <uint64_to_hexstr>
     e66:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     e68:	68fb      	ldr	r3, [r7, #12]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d003      	beq.n	e76 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e70:	68fa      	ldr	r2, [r7, #12]
     e72:	4413      	add	r3, r2
     e74:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e7a:	4413      	add	r3, r2
     e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e7e:	e12f      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e84:	2b00      	cmp	r3, #0
     e86:	d008      	beq.n	e9a <am_util_stdio_vsprintf+0x392>
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	3307      	adds	r3, #7
     e8c:	f023 0307 	bic.w	r3, r3, #7
     e90:	f103 0208 	add.w	r2, r3, #8
     e94:	607a      	str	r2, [r7, #4]
     e96:	cb18      	ldmia	r3, {r3, r4}
     e98:	e005      	b.n	ea6 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	1d1a      	adds	r2, r3, #4
     e9e:	607a      	str	r2, [r7, #4]
     ea0:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ea2:	f04f 0400 	mov.w	r4, #0
     ea6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eac:	2b00      	cmp	r3, #0
     eae:	d01e      	beq.n	eee <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     eb0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     eb4:	f7ff fbaa 	bl	60c <ndigits_in_u64>
     eb8:	4602      	mov	r2, r0
     eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ebc:	1a9b      	subs	r3, r3, r2
     ebe:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ec6:	4619      	mov	r1, r3
     ec8:	68f8      	ldr	r0, [r7, #12]
     eca:	f7ff fd0d 	bl	8e8 <padbuffer>
     ece:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ed0:	68fb      	ldr	r3, [r7, #12]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d001      	beq.n	eda <am_util_stdio_vsprintf+0x3d2>
     ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ed8:	e000      	b.n	edc <am_util_stdio_vsprintf+0x3d4>
     eda:	2300      	movs	r3, #0
     edc:	68fa      	ldr	r2, [r7, #12]
     ede:	4413      	add	r3, r2
     ee0:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ee6:	4413      	add	r3, r2
     ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     eea:	2300      	movs	r3, #0
     eec:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     eee:	68fa      	ldr	r2, [r7, #12]
     ef0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ef4:	f7ff fc34 	bl	760 <uint64_to_str>
     ef8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     efa:	68fb      	ldr	r3, [r7, #12]
     efc:	2b00      	cmp	r3, #0
     efe:	d003      	beq.n	f08 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f02:	68fa      	ldr	r2, [r7, #12]
     f04:	4413      	add	r3, r2
     f06:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f0c:	4413      	add	r3, r2
     f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f10:	e0e6      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f16:	2b00      	cmp	r3, #0
     f18:	d008      	beq.n	f2c <am_util_stdio_vsprintf+0x424>
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	3307      	adds	r3, #7
     f1e:	f023 0307 	bic.w	r3, r3, #7
     f22:	f103 0208 	add.w	r2, r3, #8
     f26:	607a      	str	r2, [r7, #4]
     f28:	cb18      	ldmia	r3, {r3, r4}
     f2a:	e005      	b.n	f38 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	1d1a      	adds	r2, r3, #4
     f30:	607a      	str	r2, [r7, #4]
     f32:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f34:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f38:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
     f3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f40:	2b00      	cmp	r3, #0
     f42:	f174 0300 	sbcs.w	r3, r4, #0
     f46:	da0a      	bge.n	f5e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
     f48:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f4c:	425b      	negs	r3, r3
     f4e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     f52:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
     f56:	2301      	movs	r3, #1
     f58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     f5c:	e006      	b.n	f6c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
     f5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f62:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
     f66:	2300      	movs	r3, #0
     f68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
     f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f6e:	2b00      	cmp	r3, #0
     f70:	d04a      	beq.n	1008 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
     f72:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
     f76:	4618      	mov	r0, r3
     f78:	4621      	mov	r1, r4
     f7a:	f7ff fb69 	bl	650 <ndigits_in_i64>
     f7e:	4602      	mov	r2, r0
     f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f82:	1a9b      	subs	r3, r3, r2
     f84:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
     f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     f8a:	2b00      	cmp	r3, #0
     f8c:	d011      	beq.n	fb2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
     f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f90:	3b01      	subs	r3, #1
     f92:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
     f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f98:	2b30      	cmp	r3, #48	; 0x30
     f9a:	d10a      	bne.n	fb2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d004      	beq.n	fac <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
     fa2:	68fb      	ldr	r3, [r7, #12]
     fa4:	1c5a      	adds	r2, r3, #1
     fa6:	60fa      	str	r2, [r7, #12]
     fa8:	222d      	movs	r2, #45	; 0x2d
     faa:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
     fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fae:	3301      	adds	r3, #1
     fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fb8:	4619      	mov	r1, r3
     fba:	68f8      	ldr	r0, [r7, #12]
     fbc:	f7ff fc94 	bl	8e8 <padbuffer>
     fc0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d001      	beq.n	fcc <am_util_stdio_vsprintf+0x4c4>
     fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fca:	e000      	b.n	fce <am_util_stdio_vsprintf+0x4c6>
     fcc:	2300      	movs	r3, #0
     fce:	68fa      	ldr	r2, [r7, #12]
     fd0:	4413      	add	r3, r2
     fd2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fd8:	4413      	add	r3, r2
     fda:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fdc:	2300      	movs	r3, #0
     fde:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
     fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     fe4:	2b00      	cmp	r3, #0
     fe6:	d01e      	beq.n	1026 <am_util_stdio_vsprintf+0x51e>
     fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fec:	2b20      	cmp	r3, #32
     fee:	d11a      	bne.n	1026 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d004      	beq.n	1000 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	1c5a      	adds	r2, r3, #1
     ffa:	60fa      	str	r2, [r7, #12]
     ffc:	222d      	movs	r2, #45	; 0x2d
     ffe:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1002:	3301      	adds	r3, #1
    1004:	63fb      	str	r3, [r7, #60]	; 0x3c
    1006:	e00e      	b.n	1026 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    100c:	2b00      	cmp	r3, #0
    100e:	d00a      	beq.n	1026 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	2b00      	cmp	r3, #0
    1014:	d004      	beq.n	1020 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	60fa      	str	r2, [r7, #12]
    101c:	222d      	movs	r2, #45	; 0x2d
    101e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1022:	3301      	adds	r3, #1
    1024:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1026:	68fa      	ldr	r2, [r7, #12]
    1028:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    102c:	f7ff fb98 	bl	760 <uint64_to_str>
    1030:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	2b00      	cmp	r3, #0
    1036:	d003      	beq.n	1040 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    103a:	68fa      	ldr	r2, [r7, #12]
    103c:	4413      	add	r3, r2
    103e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1044:	4413      	add	r3, r2
    1046:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1048:	e04a      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    104a:	68fb      	ldr	r3, [r7, #12]
    104c:	2b00      	cmp	r3, #0
    104e:	d046      	beq.n	10de <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	3307      	adds	r3, #7
    1054:	f023 0307 	bic.w	r3, r3, #7
    1058:	f103 0208 	add.w	r2, r3, #8
    105c:	607a      	str	r2, [r7, #4]
    105e:	cb18      	ldmia	r3, {r3, r4}
    1060:	4618      	mov	r0, r3
    1062:	4621      	mov	r1, r4
    1064:	f7ff f82c 	bl	c0 <__aeabi_d2f>
    1068:	4603      	mov	r3, r0
    106a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    106c:	68fb      	ldr	r3, [r7, #12]
    106e:	2214      	movs	r2, #20
    1070:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1074:	68f9      	ldr	r1, [r7, #12]
    1076:	6978      	ldr	r0, [r7, #20]
    1078:	f7ff fc5c 	bl	934 <ftoa>
    107c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1080:	2b00      	cmp	r3, #0
    1082:	da14      	bge.n	10ae <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1086:	f1b3 3fff 	cmp.w	r3, #4294967295
    108a:	d102      	bne.n	1092 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    108c:	4b1e      	ldr	r3, [pc, #120]	; (1108 <am_util_stdio_vsprintf+0x600>)
    108e:	62bb      	str	r3, [r7, #40]	; 0x28
    1090:	e008      	b.n	10a4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1094:	f113 0f02 	cmn.w	r3, #2
    1098:	d102      	bne.n	10a0 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    109a:	4b1c      	ldr	r3, [pc, #112]	; (110c <am_util_stdio_vsprintf+0x604>)
    109c:	62bb      	str	r3, [r7, #40]	; 0x28
    109e:	e001      	b.n	10a4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    10a0:	4b1b      	ldr	r3, [pc, #108]	; (1110 <am_util_stdio_vsprintf+0x608>)
    10a2:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    10a4:	68fb      	ldr	r3, [r7, #12]
    10a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    10a8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    10aa:	2303      	movs	r3, #3
    10ac:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    10ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10b2:	4413      	add	r3, r2
    10b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    10b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10b8:	68fa      	ldr	r2, [r7, #12]
    10ba:	4413      	add	r3, r2
    10bc:	60fb      	str	r3, [r7, #12]
                }
                break;
    10be:	e00e      	b.n	10de <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    10c0:	68fb      	ldr	r3, [r7, #12]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d005      	beq.n	10d2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	1c5a      	adds	r2, r3, #1
    10ca:	60fa      	str	r2, [r7, #12]
    10cc:	68ba      	ldr	r2, [r7, #8]
    10ce:	7812      	ldrb	r2, [r2, #0]
    10d0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10d4:	3301      	adds	r3, #1
    10d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10d8:	e002      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    10da:	bf00      	nop
    10dc:	e000      	b.n	10e0 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    10de:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    10e0:	68bb      	ldr	r3, [r7, #8]
    10e2:	3301      	adds	r3, #1
    10e4:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    10e6:	68bb      	ldr	r3, [r7, #8]
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b00      	cmp	r3, #0
    10ec:	f47f ad17 	bne.w	b1e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    10f0:	68fb      	ldr	r3, [r7, #12]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d002      	beq.n	10fc <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	2200      	movs	r2, #0
    10fa:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    10fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    10fe:	4618      	mov	r0, r3
    1100:	3754      	adds	r7, #84	; 0x54
    1102:	46bd      	mov	sp, r7
    1104:	bd90      	pop	{r4, r7, pc}
    1106:	bf00      	nop
    1108:	00302e30 	.word	0x00302e30
    110c:	00232e23 	.word	0x00232e23
    1110:	003f2e3f 	.word	0x003f2e3f

00001114 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1114:	b40f      	push	{r0, r1, r2, r3}
    1116:	b580      	push	{r7, lr}
    1118:	b082      	sub	sp, #8
    111a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    111c:	f107 0314 	add.w	r3, r7, #20
    1120:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1122:	683a      	ldr	r2, [r7, #0]
    1124:	6939      	ldr	r1, [r7, #16]
    1126:	4808      	ldr	r0, [pc, #32]	; (1148 <am_util_stdio_printf+0x34>)
    1128:	f7ff fcee 	bl	b08 <am_util_stdio_vsprintf>
    112c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    112e:	4b07      	ldr	r3, [pc, #28]	; (114c <am_util_stdio_printf+0x38>)
    1130:	681b      	ldr	r3, [r3, #0]
    1132:	4805      	ldr	r0, [pc, #20]	; (1148 <am_util_stdio_printf+0x34>)
    1134:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1136:	687b      	ldr	r3, [r7, #4]
}
    1138:	4618      	mov	r0, r3
    113a:	3708      	adds	r7, #8
    113c:	46bd      	mov	sp, r7
    113e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1142:	b004      	add	sp, #16
    1144:	4770      	bx	lr
    1146:	bf00      	nop
    1148:	1000105c 	.word	0x1000105c
    114c:	10001170 	.word	0x10001170

00001150 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1154:	4802      	ldr	r0, [pc, #8]	; (1160 <am_util_stdio_terminal_clear+0x10>)
    1156:	f7ff ffdd 	bl	1114 <am_util_stdio_printf>
}
    115a:	bf00      	nop
    115c:	bd80      	pop	{r7, pc}
    115e:	bf00      	nop
    1160:	00001cdc 	.word	0x00001cdc

00001164 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1164:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1166:	f000 fc07 	bl	1978 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    116a:	f000 fc73 	bl	1a54 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    116e:	f000 fd8d 	bl	1c8c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1172:	2001      	movs	r0, #1
    1174:	f000 fc7e 	bl	1a74 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1178:	2001      	movs	r0, #1
    117a:	f000 f945 	bl	1408 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    117e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1182:	f000 bc85 	b.w	1a90 <am_hal_rtc_osc_disable>
    1186:	bf00      	nop

00001188 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1188:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    118a:	4b17      	ldr	r3, [pc, #92]	; (11e8 <am_bsp_debug_printf_enable+0x60>)
    118c:	6818      	ldr	r0, [r3, #0]
    118e:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1192:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1194:	d001      	beq.n	119a <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1196:	b007      	add	sp, #28
    1198:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    119a:	4a14      	ldr	r2, [pc, #80]	; (11ec <am_bsp_debug_printf_enable+0x64>)
    119c:	4914      	ldr	r1, [pc, #80]	; (11f0 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    119e:	4d15      	ldr	r5, [pc, #84]	; (11f4 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    11a0:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    11a2:	a806      	add	r0, sp, #24
    11a4:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    11a8:	f000 fd14 	bl	1bd4 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    11ac:	f3ef 8310 	mrs	r3, PRIMASK
    11b0:	9300      	str	r3, [sp, #0]
    11b2:	b672      	cpsid	i
    11b4:	4a10      	ldr	r2, [pc, #64]	; (11f8 <am_bsp_debug_printf_enable+0x70>)
    11b6:	4d11      	ldr	r5, [pc, #68]	; (11fc <am_bsp_debug_printf_enable+0x74>)
    11b8:	4811      	ldr	r0, [pc, #68]	; (1200 <am_bsp_debug_printf_enable+0x78>)
    11ba:	4912      	ldr	r1, [pc, #72]	; (1204 <am_bsp_debug_printf_enable+0x7c>)
    11bc:	2373      	movs	r3, #115	; 0x73
    11be:	6013      	str	r3, [r2, #0]
    11c0:	682b      	ldr	r3, [r5, #0]
    11c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    11c6:	602b      	str	r3, [r5, #0]
    11c8:	6805      	ldr	r5, [r0, #0]
    11ca:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    11ce:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    11d2:	6003      	str	r3, [r0, #0]
    11d4:	6808      	ldr	r0, [r1, #0]
    11d6:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    11da:	600d      	str	r5, [r1, #0]
    11dc:	6014      	str	r4, [r2, #0]
    11de:	9c00      	ldr	r4, [sp, #0]
    11e0:	f384 8810 	msr	PRIMASK, r4
}
    11e4:	b007      	add	sp, #28
    11e6:	bd30      	pop	{r4, r5, pc}
    11e8:	10001160 	.word	0x10001160
    11ec:	e0000e80 	.word	0xe0000e80
    11f0:	00150511 	.word	0x00150511
    11f4:	000f4240 	.word	0x000f4240
    11f8:	40010060 	.word	0x40010060
    11fc:	40010054 	.word	0x40010054
    1200:	40010028 	.word	0x40010028
    1204:	40010108 	.word	0x40010108

00001208 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1208:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    120a:	4b15      	ldr	r3, [pc, #84]	; (1260 <am_bsp_debug_printf_disable+0x58>)
    120c:	6818      	ldr	r0, [r3, #0]
    120e:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1212:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1214:	d121      	bne.n	125a <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1216:	f000 fa61 	bl	16dc <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    121a:	f3ef 8110 	mrs	r1, PRIMASK
    121e:	9101      	str	r1, [sp, #4]
    1220:	b672      	cpsid	i
    1222:	4a10      	ldr	r2, [pc, #64]	; (1264 <am_bsp_debug_printf_disable+0x5c>)
    1224:	4d10      	ldr	r5, [pc, #64]	; (1268 <am_bsp_debug_printf_disable+0x60>)
    1226:	4811      	ldr	r0, [pc, #68]	; (126c <am_bsp_debug_printf_disable+0x64>)
    1228:	4911      	ldr	r1, [pc, #68]	; (1270 <am_bsp_debug_printf_disable+0x68>)
    122a:	2373      	movs	r3, #115	; 0x73
    122c:	6013      	str	r3, [r2, #0]
    122e:	682b      	ldr	r3, [r5, #0]
    1230:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1234:	f04c 0320 	orr.w	r3, ip, #32
    1238:	602b      	str	r3, [r5, #0]
    123a:	6805      	ldr	r5, [r0, #0]
    123c:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1240:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1244:	6003      	str	r3, [r0, #0]
    1246:	6808      	ldr	r0, [r1, #0]
    1248:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    124c:	600d      	str	r5, [r1, #0]
    124e:	6014      	str	r4, [r2, #0]
    1250:	9c01      	ldr	r4, [sp, #4]
    1252:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1256:	f000 fd13 	bl	1c80 <am_hal_tpiu_disable>
}
    125a:	b003      	add	sp, #12
    125c:	bd30      	pop	{r4, r5, pc}
    125e:	bf00      	nop
    1260:	10001160 	.word	0x10001160
    1264:	40010060 	.word	0x40010060
    1268:	40010054 	.word	0x40010054
    126c:	40010028 	.word	0x40010028
    1270:	40010108 	.word	0x40010108

00001274 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1274:	f000 ba3c 	b.w	16f0 <am_hal_itm_print>

00001278 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    127a:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    127c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1280:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1282:	7863      	ldrb	r3, [r4, #1]
    1284:	78e2      	ldrb	r2, [r4, #3]
    1286:	7925      	ldrb	r5, [r4, #4]
    1288:	79a1      	ldrb	r1, [r4, #6]
    128a:	00be      	lsls	r6, r7, #2
    128c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1290:	f006 0304 	and.w	r3, r6, #4
    1294:	f00e 0602 	and.w	r6, lr, #2
    1298:	431e      	orrs	r6, r3
    129a:	f042 0201 	orr.w	r2, r2, #1
    129e:	79e3      	ldrb	r3, [r4, #7]
    12a0:	01ed      	lsls	r5, r5, #7
    12a2:	4316      	orrs	r6, r2
    12a4:	b2ed      	uxtb	r5, r5
    12a6:	7a22      	ldrb	r2, [r4, #8]
    12a8:	0289      	lsls	r1, r1, #10
    12aa:	432e      	orrs	r6, r5
    12ac:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    12b0:	7a65      	ldrb	r5, [r4, #9]
    12b2:	02db      	lsls	r3, r3, #11
    12b4:	430e      	orrs	r6, r1
    12b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    12ba:	0312      	lsls	r2, r2, #12
    12bc:	7aa1      	ldrb	r1, [r4, #10]
    12be:	431e      	orrs	r6, r3
    12c0:	042d      	lsls	r5, r5, #16
    12c2:	b293      	uxth	r3, r2
    12c4:	7ae2      	ldrb	r2, [r4, #11]
    12c6:	431e      	orrs	r6, r3
    12c8:	0509      	lsls	r1, r1, #20
    12ca:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    12ce:	0612      	lsls	r2, r2, #24
    12d0:	4333      	orrs	r3, r6
    12d2:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    12d6:	00bf      	lsls	r7, r7, #2
    12d8:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    12dc:	4333      	orrs	r3, r6
    12de:	430b      	orrs	r3, r1
    12e0:	f007 0508 	and.w	r5, r7, #8
    12e4:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    12e6:	f000 fa3f 	bl	1768 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    12ea:	482c      	ldr	r0, [pc, #176]	; (139c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    12ec:	4b2c      	ldr	r3, [pc, #176]	; (13a0 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    12ee:	6005      	str	r5, [r0, #0]
    12f0:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    12f2:	681e      	ldr	r6, [r3, #0]
    12f4:	0777      	lsls	r7, r6, #29
    12f6:	d41e      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    12f8:	681f      	ldr	r7, [r3, #0]
    12fa:	077e      	lsls	r6, r7, #29
    12fc:	f102 32ff 	add.w	r2, r2, #4294967295
    1300:	d419      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    1302:	6819      	ldr	r1, [r3, #0]
    1304:	074f      	lsls	r7, r1, #29
    1306:	d416      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    1308:	6818      	ldr	r0, [r3, #0]
    130a:	0746      	lsls	r6, r0, #29
    130c:	d413      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    130e:	681e      	ldr	r6, [r3, #0]
    1310:	0770      	lsls	r0, r6, #29
    1312:	d410      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    1314:	681f      	ldr	r7, [r3, #0]
    1316:	0779      	lsls	r1, r7, #29
    1318:	d40d      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    131a:	6819      	ldr	r1, [r3, #0]
    131c:	074f      	lsls	r7, r1, #29
    131e:	d40a      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    1320:	6818      	ldr	r0, [r3, #0]
    1322:	0746      	lsls	r6, r0, #29
    1324:	d407      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    1326:	681e      	ldr	r6, [r3, #0]
    1328:	0770      	lsls	r0, r6, #29
    132a:	d404      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    132c:	681f      	ldr	r7, [r3, #0]
    132e:	0779      	lsls	r1, r7, #29
    1330:	d401      	bmi.n	1336 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1332:	3a09      	subs	r2, #9
    1334:	d1dd      	bne.n	12f2 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1336:	4b1a      	ldr	r3, [pc, #104]	; (13a0 <am_hal_cachectrl_enable+0x128>)
    1338:	681a      	ldr	r2, [r3, #0]
    133a:	f042 0101 	orr.w	r1, r2, #1
    133e:	6019      	str	r1, [r3, #0]
    1340:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1342:	6818      	ldr	r0, [r3, #0]
    1344:	0740      	lsls	r0, r0, #29
    1346:	d41e      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1348:	681e      	ldr	r6, [r3, #0]
    134a:	0771      	lsls	r1, r6, #29
    134c:	f102 32ff 	add.w	r2, r2, #4294967295
    1350:	d419      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1352:	681f      	ldr	r7, [r3, #0]
    1354:	077f      	lsls	r7, r7, #29
    1356:	d416      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1358:	6819      	ldr	r1, [r3, #0]
    135a:	074e      	lsls	r6, r1, #29
    135c:	d413      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    135e:	6818      	ldr	r0, [r3, #0]
    1360:	0740      	lsls	r0, r0, #29
    1362:	d410      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1364:	681e      	ldr	r6, [r3, #0]
    1366:	0771      	lsls	r1, r6, #29
    1368:	d40d      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    136a:	681f      	ldr	r7, [r3, #0]
    136c:	077f      	lsls	r7, r7, #29
    136e:	d40a      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1370:	6819      	ldr	r1, [r3, #0]
    1372:	074e      	lsls	r6, r1, #29
    1374:	d407      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    1376:	6818      	ldr	r0, [r3, #0]
    1378:	0740      	lsls	r0, r0, #29
    137a:	d404      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    137c:	681e      	ldr	r6, [r3, #0]
    137e:	0771      	lsls	r1, r6, #29
    1380:	d401      	bmi.n	1386 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1382:	3a09      	subs	r2, #9
    1384:	d1dd      	bne.n	1342 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1386:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1388:	4f04      	ldr	r7, [pc, #16]	; (139c <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    138a:	0223      	lsls	r3, r4, #8
    138c:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1390:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1394:	4311      	orrs	r1, r2
    1396:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1398:	6039      	str	r1, [r7, #0]
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    139c:	40018000 	.word	0x40018000
    13a0:	40018008 	.word	0x40018008

000013a4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    13a4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    13a6:	4604      	mov	r4, r0
    13a8:	b120      	cbz	r0, 13b4 <am_hal_clkgen_sysclk_select+0x10>
    13aa:	4a06      	ldr	r2, [pc, #24]	; (13c4 <am_hal_clkgen_sysclk_select+0x20>)
    13ac:	4806      	ldr	r0, [pc, #24]	; (13c8 <am_hal_clkgen_sysclk_select+0x24>)
    13ae:	2150      	movs	r1, #80	; 0x50
    13b0:	f000 f92c 	bl	160c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13b4:	4b05      	ldr	r3, [pc, #20]	; (13cc <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13b6:	4906      	ldr	r1, [pc, #24]	; (13d0 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13b8:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    13ba:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13bc:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13be:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    13c0:	601a      	str	r2, [r3, #0]
    13c2:	bd10      	pop	{r4, pc}
    13c4:	00001cfc 	.word	0x00001cfc
    13c8:	00001d34 	.word	0x00001d34
    13cc:	40004014 	.word	0x40004014
    13d0:	40004018 	.word	0x40004018

000013d4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    13d4:	4b04      	ldr	r3, [pc, #16]	; (13e8 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    13d6:	4905      	ldr	r1, [pc, #20]	; (13ec <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    13d8:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    13da:	4805      	ldr	r0, [pc, #20]	; (13f0 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    13dc:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    13e0:	bf08      	it	eq
    13e2:	4608      	moveq	r0, r1
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	40004018 	.word	0x40004018
    13ec:	02dc6c00 	.word	0x02dc6c00
    13f0:	016e3600 	.word	0x016e3600

000013f4 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    13f4:	0783      	lsls	r3, r0, #30
    13f6:	d004      	beq.n	1402 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    13f8:	4a02      	ldr	r2, [pc, #8]	; (1404 <am_hal_clkgen_osc_start+0x10>)
    13fa:	6813      	ldr	r3, [r2, #0]
    13fc:	ea23 0000 	bic.w	r0, r3, r0
    1400:	6010      	str	r0, [r2, #0]
    1402:	4770      	bx	lr
    1404:	4000400c 	.word	0x4000400c

00001408 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1408:	0783      	lsls	r3, r0, #30
    140a:	d003      	beq.n	1414 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    140c:	4a02      	ldr	r2, [pc, #8]	; (1418 <am_hal_clkgen_osc_stop+0x10>)
    140e:	6813      	ldr	r3, [r2, #0]
    1410:	4318      	orrs	r0, r3
    1412:	6010      	str	r0, [r2, #0]
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	4000400c 	.word	0x4000400c

0000141c <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    141c:	b410      	push	{r4}
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    141e:	680c      	ldr	r4, [r1, #0]
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1420:	688b      	ldr	r3, [r1, #8]
    1422:	684a      	ldr	r2, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1424:	f3ef 8110 	mrs	r1, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1428:	b083      	sub	sp, #12
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    142a:	2c00      	cmp	r4, #0
    142c:	bf18      	it	ne
    142e:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1432:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1436:	4323      	orrs	r3, r4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1438:	9101      	str	r1, [sp, #4]
    143a:	b672      	cpsid	i

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    143c:	4c29      	ldr	r4, [pc, #164]	; (14e4 <am_hal_ctimer_config+0xc8>)
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    143e:	4a2a      	ldr	r2, [pc, #168]	; (14e8 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1440:	0100      	lsls	r0, r0, #4
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1442:	5103      	str	r3, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1444:	6811      	ldr	r1, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1446:	f001 0c0f 	and.w	ip, r1, #15
    144a:	f10c 33ff 	add.w	r3, ip, #4294967295
    144e:	2b01      	cmp	r3, #1
    1450:	d941      	bls.n	14d6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1452:	6824      	ldr	r4, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1454:	f3c4 0244 	ubfx	r2, r4, #1, #5
    1458:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    145a:	f3c4 4144 	ubfx	r1, r4, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    145e:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1460:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1464:	d937      	bls.n	14d6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1466:	2b04      	cmp	r3, #4
    1468:	d935      	bls.n	14d6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    146a:	4c20      	ldr	r4, [pc, #128]	; (14ec <am_hal_ctimer_config+0xd0>)
    146c:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    146e:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1472:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1476:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    147a:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    147c:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1480:	d929      	bls.n	14d6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1482:	2b04      	cmp	r3, #4
    1484:	d927      	bls.n	14d6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1486:	4c1a      	ldr	r4, [pc, #104]	; (14f0 <am_hal_ctimer_config+0xd4>)
    1488:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    148a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    148e:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1492:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1496:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1498:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    149c:	d91b      	bls.n	14d6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    149e:	2b04      	cmp	r3, #4
    14a0:	d919      	bls.n	14d6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    14a2:	4c14      	ldr	r4, [pc, #80]	; (14f4 <am_hal_ctimer_config+0xd8>)
    14a4:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14a6:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    14aa:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14ae:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14b2:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14b4:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14b8:	d90d      	bls.n	14d6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    14ba:	2b04      	cmp	r3, #4
    14bc:	d90b      	bls.n	14d6 <am_hal_ctimer_config+0xba>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    14be:	4c0e      	ldr	r4, [pc, #56]	; (14f8 <am_hal_ctimer_config+0xdc>)
    14c0:	6820      	ldr	r0, [r4, #0]
    14c2:	f040 0204 	orr.w	r2, r0, #4
    14c6:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    14c8:	9801      	ldr	r0, [sp, #4]
    14ca:	f380 8810 	msr	PRIMASK, r0

} // am_hal_ctimer_config()
    14ce:	b003      	add	sp, #12
    14d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    14d4:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    14d6:	4908      	ldr	r1, [pc, #32]	; (14f8 <am_hal_ctimer_config+0xdc>)
    14d8:	680b      	ldr	r3, [r1, #0]
    14da:	f023 0404 	bic.w	r4, r3, #4
    14de:	600c      	str	r4, [r1, #0]
    14e0:	e7f2      	b.n	14c8 <am_hal_ctimer_config+0xac>
    14e2:	bf00      	nop
    14e4:	4000800c 	.word	0x4000800c
    14e8:	40008100 	.word	0x40008100
    14ec:	4000801c 	.word	0x4000801c
    14f0:	4000802c 	.word	0x4000802c
    14f4:	4000803c 	.word	0x4000803c
    14f8:	40021020 	.word	0x40021020

000014fc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    14fc:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    14fe:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1502:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1504:	0100      	lsls	r0, r0, #4
    1506:	4a09      	ldr	r2, [pc, #36]	; (152c <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1508:	9301      	str	r3, [sp, #4]
    150a:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    150c:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    150e:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1512:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1516:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    151a:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    151c:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    151e:	9801      	ldr	r0, [sp, #4]
    1520:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1524:	b003      	add	sp, #12
    1526:	f85d 4b04 	ldr.w	r4, [sp], #4
    152a:	4770      	bx	lr
    152c:	4000800c 	.word	0x4000800c

00001530 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1530:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1532:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1536:	0100      	lsls	r0, r0, #4
    1538:	4a06      	ldr	r2, [pc, #24]	; (1554 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    153a:	9301      	str	r3, [sp, #4]
    153c:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    153e:	5883      	ldr	r3, [r0, r2]
    1540:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1544:	4319      	orrs	r1, r3
    1546:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1548:	9801      	ldr	r0, [sp, #4]
    154a:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    154e:	b002      	add	sp, #8
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	4000800c 	.word	0x4000800c

00001558 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1558:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    155a:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    155e:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1560:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1562:	4d1c      	ldr	r5, [pc, #112]	; (15d4 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1564:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1566:	4e1c      	ldr	r6, [pc, #112]	; (15d8 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1568:	4f1c      	ldr	r7, [pc, #112]	; (15dc <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    156a:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    156c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1570:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1572:	d01a      	beq.n	15aa <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1574:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1578:	2d80      	cmp	r5, #128	; 0x80
    157a:	d01b      	beq.n	15b4 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1580:	2500      	movs	r5, #0
    1582:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1584:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1586:	d01c      	beq.n	15c2 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1588:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    158c:	d01e      	beq.n	15cc <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    158e:	0c21      	lsrs	r1, r4, #16
    1590:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1592:	b291      	uxth	r1, r2
    1594:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1596:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    159a:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    159c:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    159e:	9801      	ldr	r0, [sp, #4]
    15a0:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    15a4:	b002      	add	sp, #8
    15a6:	bcf0      	pop	{r4, r5, r6, r7}
    15a8:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    15aa:	0c25      	lsrs	r5, r4, #16
    15ac:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    15b0:	2c80      	cmp	r4, #128	; 0x80
    15b2:	d10a      	bne.n	15ca <am_hal_ctimer_period_set+0x72>
    15b4:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    15b6:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    15b8:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    15ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    15be:	4299      	cmp	r1, r3
    15c0:	d1e2      	bne.n	1588 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    15c2:	b297      	uxth	r7, r2
    15c4:	433d      	orrs	r5, r7
    15c6:	5185      	str	r5, [r0, r6]
    15c8:	e7e9      	b.n	159e <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    15ca:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    15cc:	b296      	uxth	r6, r2
    15ce:	4335      	orrs	r5, r6
    15d0:	51c5      	str	r5, [r0, r7]
    15d2:	e7e4      	b.n	159e <am_hal_ctimer_period_set+0x46>
    15d4:	4000800c 	.word	0x4000800c
    15d8:	40008004 	.word	0x40008004
    15dc:	40008008 	.word	0x40008008

000015e0 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    15e0:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    15e2:	f3ef 8310 	mrs	r3, PRIMASK
    15e6:	9301      	str	r3, [sp, #4]
    15e8:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    15ea:	4904      	ldr	r1, [pc, #16]	; (15fc <am_hal_ctimer_int_enable+0x1c>)
    15ec:	680a      	ldr	r2, [r1, #0]
    15ee:	4310      	orrs	r0, r2
    15f0:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    15f2:	9801      	ldr	r0, [sp, #4]
    15f4:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    15f8:	b002      	add	sp, #8
    15fa:	4770      	bx	lr
    15fc:	40008200 	.word	0x40008200

00001600 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1600:	4b01      	ldr	r3, [pc, #4]	; (1608 <am_hal_ctimer_int_clear+0x8>)
    1602:	6018      	str	r0, [r3, #0]
    1604:	4770      	bx	lr
    1606:	bf00      	nop
    1608:	40008208 	.word	0x40008208

0000160c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    160c:	e7fe      	b.n	160c <am_hal_debug_error>
    160e:	bf00      	nop

00001610 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1610:	4b01      	ldr	r3, [pc, #4]	; (1618 <am_hal_flash_delay+0x8>)
    1612:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1614:	4708      	bx	r1
    1616:	bf00      	nop
    1618:	1000100c 	.word	0x1000100c

0000161c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    161c:	280f      	cmp	r0, #15
    161e:	d80b      	bhi.n	1638 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1620:	2805      	cmp	r0, #5
    1622:	d013      	beq.n	164c <am_hal_interrupt_enable+0x30>
    1624:	2806      	cmp	r0, #6
    1626:	d017      	beq.n	1658 <am_hal_interrupt_enable+0x3c>
    1628:	2804      	cmp	r0, #4
    162a:	d104      	bne.n	1636 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    162c:	4a0d      	ldr	r2, [pc, #52]	; (1664 <am_hal_interrupt_enable+0x48>)
    162e:	6813      	ldr	r3, [r2, #0]
    1630:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1634:	6010      	str	r0, [r2, #0]
    1636:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1638:	f1a0 0310 	sub.w	r3, r0, #16
    163c:	f003 0c1f 	and.w	ip, r3, #31
    1640:	2001      	movs	r0, #1
    1642:	4909      	ldr	r1, [pc, #36]	; (1668 <am_hal_interrupt_enable+0x4c>)
    1644:	fa00 f20c 	lsl.w	r2, r0, ip
    1648:	600a      	str	r2, [r1, #0]
    164a:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    164c:	4805      	ldr	r0, [pc, #20]	; (1664 <am_hal_interrupt_enable+0x48>)
    164e:	6801      	ldr	r1, [r0, #0]
    1650:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1654:	6002      	str	r2, [r0, #0]
            break;
    1656:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1658:	4902      	ldr	r1, [pc, #8]	; (1664 <am_hal_interrupt_enable+0x48>)
    165a:	680a      	ldr	r2, [r1, #0]
    165c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1660:	600b      	str	r3, [r1, #0]
            break;
    1662:	4770      	bx	lr
    1664:	e000ed24 	.word	0xe000ed24
    1668:	e000e100 	.word	0xe000e100

0000166c <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    166c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1670:	b662      	cpsie	i
    __asm("    bx lr");
    1672:	4770      	bx	lr

00001674 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1674:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1678:	b672      	cpsid	i
    __asm("    bx lr");
    167a:	4770      	bx	lr

0000167c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    167c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1680:	4770      	bx	lr
    1682:	bf00      	nop

00001684 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1684:	4b0d      	ldr	r3, [pc, #52]	; (16bc <am_hal_itm_enable+0x38>)
    1686:	6818      	ldr	r0, [r3, #0]
    1688:	07c2      	lsls	r2, r0, #31
    168a:	d416      	bmi.n	16ba <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    168c:	4a0c      	ldr	r2, [pc, #48]	; (16c0 <am_hal_itm_enable+0x3c>)
    168e:	6811      	ldr	r1, [r2, #0]
    1690:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1694:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1696:	6810      	ldr	r0, [r2, #0]
    1698:	01c3      	lsls	r3, r0, #7
    169a:	d5fc      	bpl.n	1696 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    169c:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    169e:	4809      	ldr	r0, [pc, #36]	; (16c4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16a0:	4c09      	ldr	r4, [pc, #36]	; (16c8 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    16a2:	4d0a      	ldr	r5, [pc, #40]	; (16cc <am_hal_itm_enable+0x48>)
    16a4:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16a6:	250f      	movs	r5, #15
    16a8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    16aa:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    16ac:	4908      	ldr	r1, [pc, #32]	; (16d0 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16ae:	4b09      	ldr	r3, [pc, #36]	; (16d4 <am_hal_itm_enable+0x50>)
    16b0:	4a09      	ldr	r2, [pc, #36]	; (16d8 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    16b2:	f04f 30ff 	mov.w	r0, #4294967295
    16b6:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16b8:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    16ba:	4770      	bx	lr
    16bc:	10001160 	.word	0x10001160
    16c0:	e000edfc 	.word	0xe000edfc
    16c4:	e0000fb0 	.word	0xe0000fb0
    16c8:	e0000e40 	.word	0xe0000e40
    16cc:	c5acce55 	.word	0xc5acce55
    16d0:	e0000e00 	.word	0xe0000e00
    16d4:	e0000e80 	.word	0xe0000e80
    16d8:	00150511 	.word	0x00150511

000016dc <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    16dc:	4a03      	ldr	r2, [pc, #12]	; (16ec <am_hal_itm_not_busy+0x10>)
    16de:	6813      	ldr	r3, [r2, #0]
    16e0:	021b      	lsls	r3, r3, #8
    16e2:	d4fc      	bmi.n	16de <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    16e4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    16e8:	f7ff bf92 	b.w	1610 <am_hal_flash_delay>
    16ec:	e0000e80 	.word	0xe0000e80

000016f0 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    16f0:	7803      	ldrb	r3, [r0, #0]
    16f2:	b1ab      	cbz	r3, 1720 <am_hal_itm_print+0x30>
    16f4:	4602      	mov	r2, r0
    16f6:	2300      	movs	r3, #0
    16f8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    16fc:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    16fe:	2900      	cmp	r1, #0
    1700:	d1fa      	bne.n	16f8 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1702:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1706:	b430      	push	{r4, r5}
    1708:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    170a:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    170c:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1710:	f8dc 3000 	ldr.w	r3, [ip]
    1714:	2b00      	cmp	r3, #0
    1716:	d0fb      	beq.n	1710 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1718:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    171a:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    171c:	d1f6      	bne.n	170c <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    171e:	bc30      	pop	{r4, r5}
    1720:	4770      	bx	lr
    1722:	bf00      	nop

00001724 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1724:	4a0d      	ldr	r2, [pc, #52]	; (175c <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1726:	4b0e      	ldr	r3, [pc, #56]	; (1760 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1728:	490e      	ldr	r1, [pc, #56]	; (1764 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    172a:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    172c:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    172e:	6814      	ldr	r4, [r2, #0]
    1730:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1732:	6809      	ldr	r1, [r1, #0]
    1734:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1736:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1738:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    173a:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    173c:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    173e:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1740:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1744:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1746:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1748:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    174c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1750:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1752:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1754:	6142      	str	r2, [r0, #20]
}
    1756:	bc70      	pop	{r4, r5, r6}
    1758:	4770      	bx	lr
    175a:	bf00      	nop
    175c:	400201c4 	.word	0x400201c4
    1760:	400201cc 	.word	0x400201cc
    1764:	400201c0 	.word	0x400201c0

00001768 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1768:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    176c:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    176e:	d03a      	beq.n	17e6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1770:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1774:	f000 809d 	beq.w	18b2 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1778:	2801      	cmp	r0, #1
    177a:	f000 809d 	beq.w	18b8 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    177e:	2803      	cmp	r0, #3
    1780:	f000 80a6 	beq.w	18d0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1784:	2807      	cmp	r0, #7
    1786:	f000 809c 	beq.w	18c2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    178a:	280f      	cmp	r0, #15
    178c:	f000 80a5 	beq.w	18da <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1790:	281f      	cmp	r0, #31
    1792:	f000 80b1 	beq.w	18f8 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1796:	283f      	cmp	r0, #63	; 0x3f
    1798:	f000 80b5 	beq.w	1906 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    179c:	287f      	cmp	r0, #127	; 0x7f
    179e:	f000 80b9 	beq.w	1914 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    17a2:	28ff      	cmp	r0, #255	; 0xff
    17a4:	f000 80a0 	beq.w	18e8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    17a8:	f240 13ff 	movw	r3, #511	; 0x1ff
    17ac:	4298      	cmp	r0, r3
    17ae:	f000 80b8 	beq.w	1922 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    17b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    17b6:	4288      	cmp	r0, r1
    17b8:	f000 80b9 	beq.w	192e <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    17bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    17c0:	4290      	cmp	r0, r2
    17c2:	d00e      	beq.n	17e2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    17c4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    17c8:	f000 80b7 	beq.w	193a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    17cc:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    17d0:	42a0      	cmp	r0, r4
    17d2:	f000 80b5 	beq.w	1940 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    17d6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    17da:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    17de:	4560      	cmp	r0, ip
    17e0:	d132      	bne.n	1848 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    17e2:	495c      	ldr	r1, [pc, #368]	; (1954 <am_hal_pwrctrl_memory_enable+0x1ec>)
    17e4:	e066      	b.n	18b4 <am_hal_pwrctrl_memory_enable+0x14c>
    17e6:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    17ea:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    17ec:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    17ee:	4c5a      	ldr	r4, [pc, #360]	; (1958 <am_hal_pwrctrl_memory_enable+0x1f0>)
    17f0:	6822      	ldr	r2, [r4, #0]
    17f2:	402a      	ands	r2, r5
    17f4:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    17f6:	4d58      	ldr	r5, [pc, #352]	; (1958 <am_hal_pwrctrl_memory_enable+0x1f0>)
    17f8:	682c      	ldr	r4, [r5, #0]
    17fa:	4320      	orrs	r0, r4
    17fc:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    17fe:	2b00      	cmp	r3, #0
    1800:	d029      	beq.n	1856 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1802:	4a56      	ldr	r2, [pc, #344]	; (195c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1804:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1806:	4203      	tst	r3, r0
    1808:	bf18      	it	ne
    180a:	20c6      	movne	r0, #198	; 0xc6
    180c:	d01f      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    180e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1810:	422b      	tst	r3, r5
    1812:	d01c      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1814:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1816:	4223      	tst	r3, r4
    1818:	d019      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    181a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    181c:	422b      	tst	r3, r5
    181e:	d016      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1820:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1822:	4223      	tst	r3, r4
    1824:	d013      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1826:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1828:	422b      	tst	r3, r5
    182a:	d010      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    182c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    182e:	4223      	tst	r3, r4
    1830:	d00d      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1832:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1834:	422b      	tst	r3, r5
    1836:	d00a      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1838:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    183a:	4223      	tst	r3, r4
    183c:	d007      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    183e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1840:	422b      	tst	r3, r5
    1842:	d004      	beq.n	184e <am_hal_pwrctrl_memory_enable+0xe6>
    1844:	3809      	subs	r0, #9
    1846:	d1e2      	bne.n	180e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1848:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    184a:	bc30      	pop	{r4, r5}
    184c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    184e:	b911      	cbnz	r1, 1856 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1850:	2001      	movs	r0, #1
}
    1852:	bc30      	pop	{r4, r5}
    1854:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1856:	4b41      	ldr	r3, [pc, #260]	; (195c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1858:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    185a:	ea31 0402 	bics.w	r4, r1, r2
    185e:	bf18      	it	ne
    1860:	24c6      	movne	r4, #198	; 0xc6
    1862:	d0f5      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1864:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1866:	ea31 0000 	bics.w	r0, r1, r0
    186a:	d0f1      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    186c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    186e:	ea31 0005 	bics.w	r0, r1, r5
    1872:	d0ed      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1874:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1876:	ea31 0002 	bics.w	r0, r1, r2
    187a:	d0e9      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    187c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    187e:	ea31 0000 	bics.w	r0, r1, r0
    1882:	d0e5      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1884:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1886:	ea31 0005 	bics.w	r0, r1, r5
    188a:	d0e1      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    188c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    188e:	ea31 0002 	bics.w	r0, r1, r2
    1892:	d0dd      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1894:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1896:	ea31 0000 	bics.w	r0, r1, r0
    189a:	d0d9      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    189c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    189e:	ea31 0005 	bics.w	r0, r1, r5
    18a2:	d0d5      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18a4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18a6:	ea31 0002 	bics.w	r0, r1, r2
    18aa:	d0d1      	beq.n	1850 <am_hal_pwrctrl_memory_enable+0xe8>
    18ac:	3c09      	subs	r4, #9
    18ae:	d1d9      	bne.n	1864 <am_hal_pwrctrl_memory_enable+0xfc>
    18b0:	e7ca      	b.n	1848 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    18b2:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    18b4:	2300      	movs	r3, #0
    18b6:	e79e      	b.n	17f6 <am_hal_pwrctrl_memory_enable+0x8e>
    18b8:	4d29      	ldr	r5, [pc, #164]	; (1960 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18ba:	4b2a      	ldr	r3, [pc, #168]	; (1964 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    18bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    18c0:	e795      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    18c2:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18c6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    18ca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    18ce:	e78e      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    18d0:	4d25      	ldr	r5, [pc, #148]	; (1968 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18d2:	4b26      	ldr	r3, [pc, #152]	; (196c <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    18d4:	f44f 7140 	mov.w	r1, #768	; 0x300
    18d8:	e789      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    18da:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18de:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    18e2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    18e6:	e782      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    18e8:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18ec:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    18f0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    18f4:	20ff      	movs	r0, #255	; 0xff
    18f6:	e77a      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    18f8:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18fc:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1900:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1904:	e773      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    1906:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    190a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    190e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1912:	e76c      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    1914:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1918:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    191c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1920:	e765      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    1922:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1926:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    192a:	4911      	ldr	r1, [pc, #68]	; (1970 <am_hal_pwrctrl_memory_enable+0x208>)
    192c:	e75f      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    192e:	4911      	ldr	r1, [pc, #68]	; (1974 <am_hal_pwrctrl_memory_enable+0x20c>)
    1930:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1938:	e759      	b.n	17ee <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    193a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    193e:	e7b9      	b.n	18b4 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1940:	4805      	ldr	r0, [pc, #20]	; (1958 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1942:	6803      	ldr	r3, [r0, #0]
    1944:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1948:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    194a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    194e:	2100      	movs	r1, #0
    1950:	e757      	b.n	1802 <am_hal_pwrctrl_memory_enable+0x9a>
    1952:	bf00      	nop
    1954:	0007ff00 	.word	0x0007ff00
    1958:	40021010 	.word	0x40021010
    195c:	40021014 	.word	0x40021014
    1960:	fffff801 	.word	0xfffff801
    1964:	0007fe00 	.word	0x0007fe00
    1968:	fffff803 	.word	0xfffff803
    196c:	0007fc00 	.word	0x0007fc00
    1970:	0001ff00 	.word	0x0001ff00
    1974:	0003ff00 	.word	0x0003ff00

00001978 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1978:	4b0f      	ldr	r3, [pc, #60]	; (19b8 <am_hal_pwrctrl_bucks_init+0x40>)
    197a:	681a      	ldr	r2, [r3, #0]
    197c:	0792      	lsls	r2, r2, #30
    197e:	d502      	bpl.n	1986 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1980:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1982:	07c3      	lsls	r3, r0, #31
    1984:	d40e      	bmi.n	19a4 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1986:	4b0d      	ldr	r3, [pc, #52]	; (19bc <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1988:	4a0b      	ldr	r2, [pc, #44]	; (19b8 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    198a:	6819      	ldr	r1, [r3, #0]
    198c:	f041 0002 	orr.w	r0, r1, #2
    1990:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1992:	6819      	ldr	r1, [r3, #0]
    1994:	f041 0001 	orr.w	r0, r1, #1
    1998:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    199a:	6813      	ldr	r3, [r2, #0]
    199c:	f003 0103 	and.w	r1, r3, #3
    19a0:	2903      	cmp	r1, #3
    19a2:	d1fa      	bne.n	199a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    19a4:	4a04      	ldr	r2, [pc, #16]	; (19b8 <am_hal_pwrctrl_bucks_init+0x40>)
    19a6:	6810      	ldr	r0, [r2, #0]
    19a8:	f000 0303 	and.w	r3, r0, #3
    19ac:	2b03      	cmp	r3, #3
    19ae:	d1fa      	bne.n	19a6 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    19b0:	2042      	movs	r0, #66	; 0x42
    19b2:	f7ff be2d 	b.w	1610 <am_hal_flash_delay>
    19b6:	bf00      	nop
    19b8:	40021004 	.word	0x40021004
    19bc:	40021000 	.word	0x40021000

000019c0 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19c0:	4b0b      	ldr	r3, [pc, #44]	; (19f0 <am_hal_pwrctrl_bucks_enable+0x30>)
    19c2:	681a      	ldr	r2, [r3, #0]
    19c4:	0792      	lsls	r2, r2, #30
    19c6:	d502      	bpl.n	19ce <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    19c8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19ca:	07c3      	lsls	r3, r0, #31
    19cc:	d40e      	bmi.n	19ec <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19ce:	4b09      	ldr	r3, [pc, #36]	; (19f4 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19d0:	4a07      	ldr	r2, [pc, #28]	; (19f0 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19d2:	6819      	ldr	r1, [r3, #0]
    19d4:	f041 0002 	orr.w	r0, r1, #2
    19d8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    19da:	6819      	ldr	r1, [r3, #0]
    19dc:	f041 0001 	orr.w	r0, r1, #1
    19e0:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19e2:	6813      	ldr	r3, [r2, #0]
    19e4:	f003 0103 	and.w	r1, r3, #3
    19e8:	2903      	cmp	r1, #3
    19ea:	d1fa      	bne.n	19e2 <am_hal_pwrctrl_bucks_enable+0x22>
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	40021004 	.word	0x40021004
    19f4:	40021000 	.word	0x40021000

000019f8 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    19f8:	4b12      	ldr	r3, [pc, #72]	; (1a44 <am_hal_pwrctrl_bucks_disable+0x4c>)
    19fa:	681a      	ldr	r2, [r3, #0]
    19fc:	0792      	lsls	r2, r2, #30
    19fe:	d402      	bmi.n	1a06 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1a00:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a02:	07c3      	lsls	r3, r0, #31
    1a04:	d51c      	bpl.n	1a40 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a06:	4910      	ldr	r1, [pc, #64]	; (1a48 <am_hal_pwrctrl_bucks_disable+0x50>)
    1a08:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1a0e:	2a20      	cmp	r2, #32
    1a10:	d00b      	beq.n	1a2a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1a12:	4b0e      	ldr	r3, [pc, #56]	; (1a4c <am_hal_pwrctrl_bucks_disable+0x54>)
    1a14:	681a      	ldr	r2, [r3, #0]
    1a16:	f022 0002 	bic.w	r0, r2, #2
    1a1a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1a1c:	6819      	ldr	r1, [r3, #0]
    1a1e:	f021 0201 	bic.w	r2, r1, #1
    1a22:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1a24:	200a      	movs	r0, #10
    1a26:	f7ff bdf3 	b.w	1610 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1a2a:	4809      	ldr	r0, [pc, #36]	; (1a50 <am_hal_pwrctrl_bucks_disable+0x58>)
    1a2c:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1a32:	d1ee      	bne.n	1a12 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a34:	4805      	ldr	r0, [pc, #20]	; (1a4c <am_hal_pwrctrl_bucks_disable+0x54>)
    1a36:	6803      	ldr	r3, [r0, #0]
    1a38:	f003 0105 	and.w	r1, r3, #5
    1a3c:	6001      	str	r1, [r0, #0]
    1a3e:	e7f1      	b.n	1a24 <am_hal_pwrctrl_bucks_disable+0x2c>
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	40021004 	.word	0x40021004
    1a48:	4002000c 	.word	0x4002000c
    1a4c:	40021000 	.word	0x40021000
    1a50:	40021008 	.word	0x40021008

00001a54 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a54:	4905      	ldr	r1, [pc, #20]	; (1a6c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a56:	4a06      	ldr	r2, [pc, #24]	; (1a70 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a58:	680b      	ldr	r3, [r1, #0]
    1a5a:	f043 0006 	orr.w	r0, r3, #6
    1a5e:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a60:	6811      	ldr	r1, [r2, #0]
    1a62:	f021 0304 	bic.w	r3, r1, #4
    1a66:	6013      	str	r3, [r2, #0]
    1a68:	4770      	bx	lr
    1a6a:	bf00      	nop
    1a6c:	40021018 	.word	0x40021018
    1a70:	40021000 	.word	0x40021000

00001a74 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1a74:	4a05      	ldr	r2, [pc, #20]	; (1a8c <am_hal_rtc_osc_select+0x18>)
    1a76:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1a78:	b918      	cbnz	r0, 1a82 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1a7a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1a7e:	6010      	str	r0, [r2, #0]
    1a80:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1a82:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1a86:	6011      	str	r1, [r2, #0]
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop
    1a8c:	4000400c 	.word	0x4000400c

00001a90 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1a90:	4a02      	ldr	r2, [pc, #8]	; (1a9c <am_hal_rtc_osc_disable+0xc>)
    1a92:	6813      	ldr	r3, [r2, #0]
    1a94:	f043 0010 	orr.w	r0, r3, #16
    1a98:	6010      	str	r0, [r2, #0]
    1a9a:	4770      	bx	lr
    1a9c:	40004050 	.word	0x40004050

00001aa0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa2:	b083      	sub	sp, #12
    1aa4:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1aa6:	f7ff fde5 	bl	1674 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1aaa:	4a41      	ldr	r2, [pc, #260]	; (1bb0 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1aac:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1aae:	b11d      	cbz	r5, 1ab8 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1ab0:	4b40      	ldr	r3, [pc, #256]	; (1bb4 <am_hal_sysctrl_sleep+0x114>)
    1ab2:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ab4:	07c3      	lsls	r3, r0, #31
    1ab6:	d509      	bpl.n	1acc <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1ab8:	6811      	ldr	r1, [r2, #0]
    1aba:	f021 0604 	bic.w	r6, r1, #4
    1abe:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1ac0:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1ac2:	4620      	mov	r0, r4
    1ac4:	f7ff fdda 	bl	167c <am_hal_interrupt_master_set>
}
    1ac8:	b003      	add	sp, #12
    1aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1acc:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ace:	493a      	ldr	r1, [pc, #232]	; (1bb8 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1ad0:	4f3a      	ldr	r7, [pc, #232]	; (1bbc <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1ad2:	4d3b      	ldr	r5, [pc, #236]	; (1bc0 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1ad4:	483b      	ldr	r0, [pc, #236]	; (1bc4 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ad6:	f043 0604 	orr.w	r6, r3, #4
    1ada:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1adc:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1ade:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1ae0:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1ae2:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ae4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1ae8:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1aea:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1aee:	bf14      	ite	ne
    1af0:	2500      	movne	r5, #0
    1af2:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1af4:	2e03      	cmp	r6, #3
    1af6:	bf8c      	ite	hi
    1af8:	2100      	movhi	r1, #0
    1afa:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1afc:	f012 0303 	ands.w	r3, r2, #3
    1b00:	bf18      	it	ne
    1b02:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b04:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1b08:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b0a:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1b0c:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b10:	b91e      	cbnz	r6, 1b1a <am_hal_sysctrl_sleep+0x7a>
    1b12:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1b16:	2d0f      	cmp	r5, #15
    1b18:	d00a      	beq.n	1b30 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1b1a:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1b1c:	2d0f      	cmp	r5, #15
    1b1e:	d01a      	beq.n	1b56 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1b20:	4f29      	ldr	r7, [pc, #164]	; (1bc8 <am_hal_sysctrl_sleep+0x128>)
    1b22:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b24:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1b26:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b28:	f7ff fda8 	bl	167c <am_hal_interrupt_master_set>
}
    1b2c:	b003      	add	sp, #12
    1b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b30:	683a      	ldr	r2, [r7, #0]
    1b32:	1e50      	subs	r0, r2, #1
    1b34:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1b36:	9800      	ldr	r0, [sp, #0]
    1b38:	f04f 31ff 	mov.w	r1, #4294967295
    1b3c:	f7ff fcf8 	bl	1530 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1b40:	9800      	ldr	r0, [sp, #0]
    1b42:	4633      	mov	r3, r6
    1b44:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1b48:	f04f 31ff 	mov.w	r1, #4294967295
    1b4c:	f7ff fd04 	bl	1558 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1b50:	f7ff ff52 	bl	19f8 <am_hal_pwrctrl_bucks_disable>
    1b54:	e7e1      	b.n	1b1a <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b56:	f3ef 8310 	mrs	r3, PRIMASK
    1b5a:	9301      	str	r3, [sp, #4]
    1b5c:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1b5e:	4e1b      	ldr	r6, [pc, #108]	; (1bcc <am_hal_sysctrl_sleep+0x12c>)
    1b60:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1b62:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1b64:	6835      	ldr	r5, [r6, #0]
    1b66:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1b6a:	f04c 021c 	orr.w	r2, ip, #28
    1b6e:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1b70:	6830      	ldr	r0, [r6, #0]
    1b72:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1b76:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1b7a:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b7c:	9e01      	ldr	r6, [sp, #4]
    1b7e:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1b82:	201c      	movs	r0, #28
    1b84:	f7ff fd44 	bl	1610 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1b88:	f7ff ff1a 	bl	19c0 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b8c:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1b8e:	4910      	ldr	r1, [pc, #64]	; (1bd0 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1b90:	4d0d      	ldr	r5, [pc, #52]	; (1bc8 <am_hal_sysctrl_sleep+0x128>)
    1b92:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b94:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1b96:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b98:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1b9a:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1b9c:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1b9e:	f7ff fd37 	bl	1610 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1ba2:	9800      	ldr	r0, [sp, #0]
    1ba4:	f04f 31ff 	mov.w	r1, #4294967295
    1ba8:	f7ff fca8 	bl	14fc <am_hal_ctimer_start>
    1bac:	e789      	b.n	1ac2 <am_hal_sysctrl_sleep+0x22>
    1bae:	bf00      	nop
    1bb0:	e000ed10 	.word	0xe000ed10
    1bb4:	40020250 	.word	0x40020250
    1bb8:	4002000c 	.word	0x4002000c
    1bbc:	1000116c 	.word	0x1000116c
    1bc0:	40021000 	.word	0x40021000
    1bc4:	40021008 	.word	0x40021008
    1bc8:	10001164 	.word	0x10001164
    1bcc:	40020068 	.word	0x40020068
    1bd0:	10001168 	.word	0x10001168

00001bd4 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1bd4:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1bd6:	4a22      	ldr	r2, [pc, #136]	; (1c60 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1bd8:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1bda:	2100      	movs	r1, #0
    1bdc:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1bde:	b333      	cbz	r3, 1c2e <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1be0:	4d20      	ldr	r5, [pc, #128]	; (1c64 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1be2:	4921      	ldr	r1, [pc, #132]	; (1c68 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1be4:	4a21      	ldr	r2, [pc, #132]	; (1c6c <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1be6:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1be8:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1bec:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1bee:	458c      	cmp	ip, r1
    1bf0:	bf94      	ite	ls
    1bf2:	461d      	movls	r5, r3
    1bf4:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1bf6:	f7ff fbed 	bl	13d4 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1bfa:	1c43      	adds	r3, r0, #1
    1bfc:	d02e      	beq.n	1c5c <am_hal_tpiu_enable+0x88>
    1bfe:	08c3      	lsrs	r3, r0, #3
    1c00:	fbb3 fef5 	udiv	lr, r3, r5
    1c04:	f10e 31ff 	add.w	r1, lr, #4294967295
    1c08:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c0a:	4a19      	ldr	r2, [pc, #100]	; (1c70 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c0c:	4c19      	ldr	r4, [pc, #100]	; (1c74 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c0e:	4b1a      	ldr	r3, [pc, #104]	; (1c78 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c10:	491a      	ldr	r1, [pc, #104]	; (1c7c <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c12:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c14:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c16:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c18:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c1c:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c1e:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c20:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c22:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c2a:	f7ff bcf1 	b.w	1610 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1c2e:	4c10      	ldr	r4, [pc, #64]	; (1c70 <am_hal_tpiu_enable+0x9c>)
    1c30:	6905      	ldr	r5, [r0, #16]
    1c32:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1c34:	6882      	ldr	r2, [r0, #8]
    1c36:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c3a:	68c3      	ldr	r3, [r0, #12]
    1c3c:	4c09      	ldr	r4, [pc, #36]	; (1c64 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c3e:	490e      	ldr	r1, [pc, #56]	; (1c78 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c40:	1e5d      	subs	r5, r3, #1
    1c42:	2201      	movs	r2, #1
    1c44:	40aa      	lsls	r2, r5
    1c46:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c48:	680b      	ldr	r3, [r1, #0]
    1c4a:	6840      	ldr	r0, [r0, #4]
    1c4c:	4318      	orrs	r0, r3
    1c4e:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c54:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1c58:	f7ff bcda 	b.w	1610 <am_hal_flash_delay>
    1c5c:	2005      	movs	r0, #5
    1c5e:	e7d4      	b.n	1c0a <am_hal_tpiu_enable+0x36>
    1c60:	e0040304 	.word	0xe0040304
    1c64:	e0040004 	.word	0xe0040004
    1c68:	001da380 	.word	0x001da380
    1c6c:	000f4240 	.word	0x000f4240
    1c70:	e0040010 	.word	0xe0040010
    1c74:	e00400f0 	.word	0xe00400f0
    1c78:	40020250 	.word	0x40020250
    1c7c:	e0040f00 	.word	0xe0040f00

00001c80 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1c80:	4b01      	ldr	r3, [pc, #4]	; (1c88 <am_hal_tpiu_disable+0x8>)
    1c82:	2200      	movs	r2, #0
    1c84:	601a      	str	r2, [r3, #0]
    1c86:	4770      	bx	lr
    1c88:	40020250 	.word	0x40020250

00001c8c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1c8c:	4b01      	ldr	r3, [pc, #4]	; (1c94 <am_hal_vcomp_disable+0x8>)
    1c8e:	2237      	movs	r2, #55	; 0x37
    1c90:	601a      	str	r2, [r3, #0]
    1c92:	4770      	bx	lr
    1c94:	4000c008 	.word	0x4000c008
    1c98:	204d5449 	.word	0x204d5449
    1c9c:	6e697250 	.word	0x6e697250
    1ca0:	45206674 	.word	0x45206674
    1ca4:	706d6178 	.word	0x706d6178
    1ca8:	000a656c 	.word	0x000a656c
    1cac:	6542090a 	.word	0x6542090a
    1cb0:	6e6e6967 	.word	0x6e6e6967
    1cb4:	20676e69 	.word	0x20676e69
    1cb8:	49435341 	.word	0x49435341
    1cbc:	61772049 	.word	0x61772049
    1cc0:	74206b6c 	.word	0x74206b6c
    1cc4:	756f7268 	.word	0x756f7268
    1cc8:	0a3a6867 	.word	0x0a3a6867
    1ccc:	00000000 	.word	0x00000000
    1cd0:	00000009 	.word	0x00000009
    1cd4:	00006325 	.word	0x00006325
    1cd8:	0000090a 	.word	0x0000090a
    1cdc:	0a0a0a0a 	.word	0x0a0a0a0a
    1ce0:	0a0a0a0a 	.word	0x0a0a0a0a
    1ce4:	0a0a0a0a 	.word	0x0a0a0a0a
    1ce8:	0a0a0a0a 	.word	0x0a0a0a0a
    1cec:	00000a0a 	.word	0x00000a0a

00001cf0 <am_hal_cachectrl_defaults>:
    1cf0:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1d00:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1d10:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1d20:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1d30:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1d40:	6b6c635f 2e6e6567 00000063              _clkgen.c...
