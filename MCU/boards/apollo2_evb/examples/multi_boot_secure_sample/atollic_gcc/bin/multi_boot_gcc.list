
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\multi_boot_secure_sample\atollic_gcc\bin\multi_boot_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000252c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         000000b0  10001000  0000252c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002294  100010b0  000025dc  000210b0  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY
  5 .debug_info   00007dce  00000000  00000000  000210e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e16  00000000  00000000  00028eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000990  00000000  00000000  0002accb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001018  00000000  00000000  0002b65b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046ab  00000000  00000000  0002c673  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036c2  00000000  00000000  00030d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  000343e0  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001bac  00000000  00000000  00034460  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000432a  00000000  00000000  0003600c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 85 16 00 00 ed 16 00 00 f5 16 00 00     ................
      10:	f5 16 00 00 f5 16 00 00 f5 16 00 00 00 00 00 00     ................
	...
      2c:	fd 16 00 00 fd 16 00 00 00 00 00 00 fd 16 00 00     ................
      3c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      4c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      5c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      6c:	fd 16 00 00 95 11 00 00 fd 16 00 00 c5 11 00 00     ................
      7c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      8c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      9c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      ac:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      bc:	fd 16 00 00                                         ....

000000c0 <am_bootloader_fast_crc32>:
//! @return 32-bit CRC value.
//
//*****************************************************************************
uint32_t
am_bootloader_fast_crc32(const void *pvData, uint32_t ui32NumBytes)
{
      c0:	b480      	push	{r7}
      c2:	b087      	sub	sp, #28
      c4:	af00      	add	r7, sp, #0
      c6:	6078      	str	r0, [r7, #4]
      c8:	6039      	str	r1, [r7, #0]
    uint32_t ui32CRC, ui32CRCIndex, i;
    uint8_t *pui8Data;

    ui32CRC = 0;
      ca:	2300      	movs	r3, #0
      cc:	617b      	str	r3, [r7, #20]
    pui8Data = (uint8_t *) pvData;
      ce:	687b      	ldr	r3, [r7, #4]
      d0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < ui32NumBytes; i++ )
      d2:	2300      	movs	r3, #0
      d4:	613b      	str	r3, [r7, #16]
      d6:	e013      	b.n	100 <am_bootloader_fast_crc32+0x40>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
      d8:	68fa      	ldr	r2, [r7, #12]
      da:	693b      	ldr	r3, [r7, #16]
      dc:	4413      	add	r3, r2
      de:	781b      	ldrb	r3, [r3, #0]
      e0:	461a      	mov	r2, r3
      e2:	697b      	ldr	r3, [r7, #20]
      e4:	0e1b      	lsrs	r3, r3, #24
      e6:	4053      	eors	r3, r2
      e8:	60bb      	str	r3, [r7, #8]
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
      ea:	697b      	ldr	r3, [r7, #20]
      ec:	021a      	lsls	r2, r3, #8
      ee:	490a      	ldr	r1, [pc, #40]	; (118 <am_bootloader_fast_crc32+0x58>)
      f0:	68bb      	ldr	r3, [r7, #8]
      f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      f6:	4053      	eors	r3, r2
      f8:	617b      	str	r3, [r7, #20]
    uint8_t *pui8Data;

    ui32CRC = 0;
    pui8Data = (uint8_t *) pvData;

    for (i = 0; i < ui32NumBytes; i++ )
      fa:	693b      	ldr	r3, [r7, #16]
      fc:	3301      	adds	r3, #1
      fe:	613b      	str	r3, [r7, #16]
     100:	693a      	ldr	r2, [r7, #16]
     102:	683b      	ldr	r3, [r7, #0]
     104:	429a      	cmp	r2, r3
     106:	d3e7      	bcc.n	d8 <am_bootloader_fast_crc32+0x18>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
    }

    return ui32CRC;
     108:	697b      	ldr	r3, [r7, #20]
}
     10a:	4618      	mov	r0, r3
     10c:	371c      	adds	r7, #28
     10e:	46bd      	mov	sp, r7
     110:	f85d 7b04 	ldr.w	r7, [sp], #4
     114:	4770      	bx	lr
     116:	bf00      	nop
     118:	00001fa0 	.word	0x00001fa0

0000011c <am_bootloader_partial_crc32>:
//
//*****************************************************************************
void
am_bootloader_partial_crc32(const void *pvData, uint32_t ui32NumBytes,
                            uint32_t *pui32CRC)
{
     11c:	b480      	push	{r7}
     11e:	b089      	sub	sp, #36	; 0x24
     120:	af00      	add	r7, sp, #0
     122:	60f8      	str	r0, [r7, #12]
     124:	60b9      	str	r1, [r7, #8]
     126:	607a      	str	r2, [r7, #4]
    uint32_t ui32CRCIndex, i;
    uint8_t *pui8Data;

    uint32_t ui32TempCRC = *pui32CRC;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	61bb      	str	r3, [r7, #24]

    pui8Data = (uint8_t *) pvData;
     12e:	68fb      	ldr	r3, [r7, #12]
     130:	617b      	str	r3, [r7, #20]

    for ( i = 0; i < ui32NumBytes; i++ )
     132:	2300      	movs	r3, #0
     134:	61fb      	str	r3, [r7, #28]
     136:	e013      	b.n	160 <am_bootloader_partial_crc32+0x44>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
     138:	697a      	ldr	r2, [r7, #20]
     13a:	69fb      	ldr	r3, [r7, #28]
     13c:	4413      	add	r3, r2
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	461a      	mov	r2, r3
     142:	69bb      	ldr	r3, [r7, #24]
     144:	0e1b      	lsrs	r3, r3, #24
     146:	4053      	eors	r3, r2
     148:	613b      	str	r3, [r7, #16]
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
     14a:	69bb      	ldr	r3, [r7, #24]
     14c:	021a      	lsls	r2, r3, #8
     14e:	490b      	ldr	r1, [pc, #44]	; (17c <am_bootloader_partial_crc32+0x60>)
     150:	693b      	ldr	r3, [r7, #16]
     152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     156:	4053      	eors	r3, r2
     158:	61bb      	str	r3, [r7, #24]

    uint32_t ui32TempCRC = *pui32CRC;

    pui8Data = (uint8_t *) pvData;

    for ( i = 0; i < ui32NumBytes; i++ )
     15a:	69fb      	ldr	r3, [r7, #28]
     15c:	3301      	adds	r3, #1
     15e:	61fb      	str	r3, [r7, #28]
     160:	69fa      	ldr	r2, [r7, #28]
     162:	68bb      	ldr	r3, [r7, #8]
     164:	429a      	cmp	r2, r3
     166:	d3e7      	bcc.n	138 <am_bootloader_partial_crc32+0x1c>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
    }

    *pui32CRC = ui32TempCRC;
     168:	687b      	ldr	r3, [r7, #4]
     16a:	69ba      	ldr	r2, [r7, #24]
     16c:	601a      	str	r2, [r3, #0]
}
     16e:	bf00      	nop
     170:	3724      	adds	r7, #36	; 0x24
     172:	46bd      	mov	sp, r7
     174:	f85d 7b04 	ldr.w	r7, [sp], #4
     178:	4770      	bx	lr
     17a:	bf00      	nop
     17c:	00001fa0 	.word	0x00001fa0

00000180 <am_bootloader_flash_check>:
//! @return true if the image is safe to run.
//
//*****************************************************************************
bool
am_bootloader_flash_check(am_bootloader_image_t *psImage)
{
     180:	b580      	push	{r7, lr}
     182:	b092      	sub	sp, #72	; 0x48
     184:	af00      	add	r7, sp, #0
     186:	6078      	str	r0, [r7, #4]
    am_hal_mcuctrl_device_t sDevice;
    uint32_t ui32ResetVector, ui32StackPointer, ui32LinkAddress;

    ui32LinkAddress = (uint32_t) psImage->pui32LinkAddress;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	63fb      	str	r3, [r7, #60]	; 0x3c
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));

    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     18e:	f107 030c 	add.w	r3, r7, #12
     192:	4618      	mov	r0, r3
     194:	f001 fbce 	bl	1934 <am_hal_mcuctrl_device_info_get>

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
     198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    am_hal_mcuctrl_device_info_get(&sDevice);

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
     19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     19c:	429a      	cmp	r2, r3
     19e:	d801      	bhi.n	1a4 <am_bootloader_flash_check+0x24>
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
    {
        DPRINTF(("Link address outside of flash. 0x%08x\r\n", ui32LinkAddress));
        return false;
     1a0:	2300      	movs	r3, #0
     1a2:	e03f      	b.n	224 <am_bootloader_flash_check+0xa4>

    //
    // Check to see if the image was encrypted. If it was, these tests won't
    // work. We'll need to just skip them.
    //
    if ( psImage->bEncrypted == false )
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	69db      	ldr	r3, [r3, #28]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d108      	bne.n	1be <am_bootloader_flash_check+0x3e>
    {
        ui32StackPointer = psImage->pui32LinkAddress[0];
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = psImage->pui32LinkAddress[1];
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	681b      	ldr	r3, [r3, #0]
     1b8:	685b      	ldr	r3, [r3, #4]
     1ba:	647b      	str	r3, [r7, #68]	; 0x44
     1bc:	e005      	b.n	1ca <am_bootloader_flash_check+0x4a>
    }
    else
    {
        ui32StackPointer = (uint32_t) psImage->pui32StackPointer;
     1be:	687b      	ldr	r3, [r7, #4]
     1c0:	695b      	ldr	r3, [r3, #20]
     1c2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = (uint32_t) psImage->pui32ResetVector;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	699b      	ldr	r3, [r3, #24]
     1c8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //
    // Make sure the stack is in SRAM.
    //
    if (((SRAM_BASEADDR != 0) && (ui32StackPointer < SRAM_BASEADDR))
     1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     1d0:	d305      	bcc.n	1de <am_bootloader_flash_check+0x5e>
        || (ui32StackPointer >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)))
     1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     1d4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
     1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1da:	429a      	cmp	r2, r3
     1dc:	d801      	bhi.n	1e2 <am_bootloader_flash_check+0x62>
    {
        DPRINTF(("Stack not in SRAM 0x%08x\r\n", ui32StackPointer));
        return false;
     1de:	2300      	movs	r3, #0
     1e0:	e020      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1e6:	429a      	cmp	r2, r3
     1e8:	d306      	bcc.n	1f8 <am_bootloader_flash_check+0x78>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	685a      	ldr	r2, [r3, #4]
     1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1f0:	441a      	add	r2, r3
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     1f4:	429a      	cmp	r2, r3
     1f6:	d801      	bhi.n	1fc <am_bootloader_flash_check+0x7c>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
    {
        DPRINTF(("Reset Vector not in image 0x%08x\r\n", ui32ResetVector));
        return false;
     1f8:	2300      	movs	r3, #0
     1fa:	e013      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If the image isn't encrypted, run a CRC32.
    //
    if ( psImage->bEncrypted == false )
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	69db      	ldr	r3, [r3, #28]
     200:	2b00      	cmp	r3, #0
     202:	d10e      	bne.n	222 <am_bootloader_flash_check+0xa2>
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     204:	687b      	ldr	r3, [r7, #4]
     206:	681a      	ldr	r2, [r3, #0]
     208:	687b      	ldr	r3, [r7, #4]
     20a:	685b      	ldr	r3, [r3, #4]
     20c:	4619      	mov	r1, r3
     20e:	4610      	mov	r0, r2
     210:	f7ff ff56 	bl	c0 <am_bootloader_fast_crc32>
     214:	4602      	mov	r2, r0
             psImage->ui32CRC )
     216:	687b      	ldr	r3, [r7, #4]
     218:	689b      	ldr	r3, [r3, #8]
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     21a:	429a      	cmp	r2, r3
     21c:	d001      	beq.n	222 <am_bootloader_flash_check+0xa2>
             psImage->ui32CRC )
        {
            DPRINTF(("Bad CRC 0x%08x\r\n", psImage->ui32CRC));
            return false;
     21e:	2300      	movs	r3, #0
     220:	e000      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If those tests pass, we're probably safe to run.
    //
    return true;
     222:	2301      	movs	r3, #1
}
     224:	4618      	mov	r0, r3
     226:	3748      	adds	r7, #72	; 0x48
     228:	46bd      	mov	sp, r7
     22a:	bd80      	pop	{r7, pc}

0000022c <am_hal_bootloader_override_check>:
//! @return true if override is asserted
//
//*****************************************************************************
bool
am_hal_bootloader_override_check(am_bootloader_image_t *psImage)
{
     22c:	b490      	push	{r4, r7}
     22e:	b086      	sub	sp, #24
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));
    //
    // Check the override GPIO
    //
    if ( psImage->ui32OverrideGPIO != 0xFFFFFFFF )
     234:	687b      	ldr	r3, [r7, #4]
     236:	68db      	ldr	r3, [r3, #12]
     238:	f1b3 3fff 	cmp.w	r3, #4294967295
     23c:	f000 815d 	beq.w	4fa <am_hal_bootloader_override_check+0x2ce>
        }
#endif
        //
        // Temporarily configure the override pin as an input.
        //
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_INPUT);
     240:	687b      	ldr	r3, [r7, #4]
     242:	68db      	ldr	r3, [r3, #12]
     244:	2b31      	cmp	r3, #49	; 0x31
     246:	d865      	bhi.n	314 <am_hal_bootloader_override_check+0xe8>
     248:	f3ef 8310 	mrs	r3, PRIMASK
     24c:	613b      	str	r3, [r7, #16]
     24e:	b672      	cpsid	i
     250:	4bad      	ldr	r3, [pc, #692]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     252:	2273      	movs	r2, #115	; 0x73
     254:	601a      	str	r2, [r3, #0]
     256:	687b      	ldr	r3, [r7, #4]
     258:	68db      	ldr	r3, [r3, #12]
     25a:	085b      	lsrs	r3, r3, #1
     25c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     260:	4baa      	ldr	r3, [pc, #680]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     262:	4413      	add	r3, r2
     264:	4618      	mov	r0, r3
     266:	687b      	ldr	r3, [r7, #4]
     268:	68db      	ldr	r3, [r3, #12]
     26a:	085b      	lsrs	r3, r3, #1
     26c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     270:	4ba6      	ldr	r3, [pc, #664]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     272:	4413      	add	r3, r2
     274:	681a      	ldr	r2, [r3, #0]
     276:	687b      	ldr	r3, [r7, #4]
     278:	68db      	ldr	r3, [r3, #12]
     27a:	009b      	lsls	r3, r3, #2
     27c:	f003 031c 	and.w	r3, r3, #28
     280:	2107      	movs	r1, #7
     282:	fa01 f303 	lsl.w	r3, r1, r3
     286:	43db      	mvns	r3, r3
     288:	4013      	ands	r3, r2
     28a:	6003      	str	r3, [r0, #0]
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	68db      	ldr	r3, [r3, #12]
     290:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     298:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     29c:	461c      	mov	r4, r3
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	68db      	ldr	r3, [r3, #12]
     2a2:	00db      	lsls	r3, r3, #3
     2a4:	f003 0318 	and.w	r3, r3, #24
     2a8:	221a      	movs	r2, #26
     2aa:	409a      	lsls	r2, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	68db      	ldr	r3, [r3, #12]
     2b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2bc:	6819      	ldr	r1, [r3, #0]
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	68db      	ldr	r3, [r3, #12]
     2c2:	00db      	lsls	r3, r3, #3
     2c4:	f003 0318 	and.w	r3, r3, #24
     2c8:	20ff      	movs	r0, #255	; 0xff
     2ca:	fa00 f303 	lsl.w	r3, r0, r3
     2ce:	43db      	mvns	r3, r3
     2d0:	400b      	ands	r3, r1
     2d2:	4313      	orrs	r3, r2
     2d4:	6023      	str	r3, [r4, #0]
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	68db      	ldr	r3, [r3, #12]
     2da:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2de:	4b8c      	ldr	r3, [pc, #560]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     2e0:	4413      	add	r3, r2
     2e2:	4618      	mov	r0, r3
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	68db      	ldr	r3, [r3, #12]
     2e8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2ec:	4b88      	ldr	r3, [pc, #544]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     2ee:	4413      	add	r3, r2
     2f0:	681a      	ldr	r2, [r3, #0]
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	68db      	ldr	r3, [r3, #12]
     2f6:	00db      	lsls	r3, r3, #3
     2f8:	f003 0318 	and.w	r3, r3, #24
     2fc:	21ff      	movs	r1, #255	; 0xff
     2fe:	fa01 f303 	lsl.w	r3, r1, r3
     302:	43db      	mvns	r3, r3
     304:	4013      	ands	r3, r2
     306:	6003      	str	r3, [r0, #0]
     308:	4b7f      	ldr	r3, [pc, #508]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	693b      	ldr	r3, [r7, #16]
     310:	f383 8810 	msr	PRIMASK, r3

        //
        // If the override pin matches the specified polarity, force a failure.
        //
        uint32_t ui32OverridePin = am_hal_gpio_input_bit_read(psImage->ui32OverrideGPIO);
     314:	687b      	ldr	r3, [r7, #4]
     316:	68db      	ldr	r3, [r3, #12]
     318:	08db      	lsrs	r3, r3, #3
     31a:	f003 0204 	and.w	r2, r3, #4
     31e:	4b7d      	ldr	r3, [pc, #500]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     320:	4413      	add	r3, r2
     322:	681a      	ldr	r2, [r3, #0]
     324:	687b      	ldr	r3, [r7, #4]
     326:	68db      	ldr	r3, [r3, #12]
     328:	f003 031f 	and.w	r3, r3, #31
     32c:	fa22 f303 	lsr.w	r3, r2, r3
     330:	f003 0301 	and.w	r3, r3, #1
     334:	2b00      	cmp	r3, #0
     336:	bf14      	ite	ne
     338:	2301      	movne	r3, #1
     33a:	2300      	moveq	r3, #0
     33c:	b2db      	uxtb	r3, r3
     33e:	617b      	str	r3, [r7, #20]
        if ( ui32OverridePin == (psImage->ui32OverridePolarity & 0x1) )
     340:	687b      	ldr	r3, [r7, #4]
     342:	691b      	ldr	r3, [r3, #16]
     344:	f003 0201 	and.w	r2, r3, #1
     348:	697b      	ldr	r3, [r7, #20]
     34a:	429a      	cmp	r2, r3
     34c:	d16b      	bne.n	426 <am_hal_bootloader_override_check+0x1fa>
        {
            DPRINTF(("Override Pin %d matches Polarity, force failure. %d, %d\r\n", psImage->ui32OverrideGPIO,  ui32OverridePin, psImage->ui32OverridePolarity));
            //
            // Make sure to disable the pin before continuing.
            //
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     34e:	687b      	ldr	r3, [r7, #4]
     350:	68db      	ldr	r3, [r3, #12]
     352:	2b31      	cmp	r3, #49	; 0x31
     354:	d865      	bhi.n	422 <am_hal_bootloader_override_check+0x1f6>
     356:	f3ef 8310 	mrs	r3, PRIMASK
     35a:	60fb      	str	r3, [r7, #12]
     35c:	b672      	cpsid	i
     35e:	4b6a      	ldr	r3, [pc, #424]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     360:	2273      	movs	r2, #115	; 0x73
     362:	601a      	str	r2, [r3, #0]
     364:	687b      	ldr	r3, [r7, #4]
     366:	68db      	ldr	r3, [r3, #12]
     368:	085b      	lsrs	r3, r3, #1
     36a:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     36e:	4b67      	ldr	r3, [pc, #412]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     370:	4413      	add	r3, r2
     372:	4618      	mov	r0, r3
     374:	687b      	ldr	r3, [r7, #4]
     376:	68db      	ldr	r3, [r3, #12]
     378:	085b      	lsrs	r3, r3, #1
     37a:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     37e:	4b63      	ldr	r3, [pc, #396]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     380:	4413      	add	r3, r2
     382:	681a      	ldr	r2, [r3, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	68db      	ldr	r3, [r3, #12]
     388:	009b      	lsls	r3, r3, #2
     38a:	f003 031c 	and.w	r3, r3, #28
     38e:	2107      	movs	r1, #7
     390:	fa01 f303 	lsl.w	r3, r1, r3
     394:	43db      	mvns	r3, r3
     396:	4013      	ands	r3, r2
     398:	6003      	str	r3, [r0, #0]
     39a:	687b      	ldr	r3, [r7, #4]
     39c:	68db      	ldr	r3, [r3, #12]
     39e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3aa:	461c      	mov	r4, r3
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	68db      	ldr	r3, [r3, #12]
     3b0:	00db      	lsls	r3, r3, #3
     3b2:	f003 0318 	and.w	r3, r3, #24
     3b6:	2218      	movs	r2, #24
     3b8:	409a      	lsls	r2, r3
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	68db      	ldr	r3, [r3, #12]
     3be:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3ca:	6819      	ldr	r1, [r3, #0]
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	68db      	ldr	r3, [r3, #12]
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0318 	and.w	r3, r3, #24
     3d6:	20ff      	movs	r0, #255	; 0xff
     3d8:	fa00 f303 	lsl.w	r3, r0, r3
     3dc:	43db      	mvns	r3, r3
     3de:	400b      	ands	r3, r1
     3e0:	4313      	orrs	r3, r2
     3e2:	6023      	str	r3, [r4, #0]
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	68db      	ldr	r3, [r3, #12]
     3e8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3ec:	4b48      	ldr	r3, [pc, #288]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     3ee:	4413      	add	r3, r2
     3f0:	4618      	mov	r0, r3
     3f2:	687b      	ldr	r3, [r7, #4]
     3f4:	68db      	ldr	r3, [r3, #12]
     3f6:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3fa:	4b45      	ldr	r3, [pc, #276]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     3fc:	4413      	add	r3, r2
     3fe:	681a      	ldr	r2, [r3, #0]
     400:	687b      	ldr	r3, [r7, #4]
     402:	68db      	ldr	r3, [r3, #12]
     404:	00db      	lsls	r3, r3, #3
     406:	f003 0318 	and.w	r3, r3, #24
     40a:	21ff      	movs	r1, #255	; 0xff
     40c:	fa01 f303 	lsl.w	r3, r1, r3
     410:	43db      	mvns	r3, r3
     412:	4013      	ands	r3, r2
     414:	6003      	str	r3, [r0, #0]
     416:	4b3c      	ldr	r3, [pc, #240]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     418:	2200      	movs	r2, #0
     41a:	601a      	str	r2, [r3, #0]
     41c:	68fb      	ldr	r3, [r7, #12]
     41e:	f383 8810 	msr	PRIMASK, r3
            return true;
     422:	2301      	movs	r3, #1
     424:	e06a      	b.n	4fc <am_hal_bootloader_override_check+0x2d0>
        //
        // If the test passed, we still need to make sure the GPIO is disabled,
        // as it might interfere with the program we are (presumably) about to
        // boot.
        //
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     426:	687b      	ldr	r3, [r7, #4]
     428:	68db      	ldr	r3, [r3, #12]
     42a:	2b31      	cmp	r3, #49	; 0x31
     42c:	d865      	bhi.n	4fa <am_hal_bootloader_override_check+0x2ce>
     42e:	f3ef 8310 	mrs	r3, PRIMASK
     432:	60bb      	str	r3, [r7, #8]
     434:	b672      	cpsid	i
     436:	4b34      	ldr	r3, [pc, #208]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     438:	2273      	movs	r2, #115	; 0x73
     43a:	601a      	str	r2, [r3, #0]
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	68db      	ldr	r3, [r3, #12]
     440:	085b      	lsrs	r3, r3, #1
     442:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     446:	4b31      	ldr	r3, [pc, #196]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     448:	4413      	add	r3, r2
     44a:	4618      	mov	r0, r3
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	68db      	ldr	r3, [r3, #12]
     450:	085b      	lsrs	r3, r3, #1
     452:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     456:	4b2d      	ldr	r3, [pc, #180]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     458:	4413      	add	r3, r2
     45a:	681a      	ldr	r2, [r3, #0]
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	68db      	ldr	r3, [r3, #12]
     460:	009b      	lsls	r3, r3, #2
     462:	f003 031c 	and.w	r3, r3, #28
     466:	2107      	movs	r1, #7
     468:	fa01 f303 	lsl.w	r3, r1, r3
     46c:	43db      	mvns	r3, r3
     46e:	4013      	ands	r3, r2
     470:	6003      	str	r3, [r0, #0]
     472:	687b      	ldr	r3, [r7, #4]
     474:	68db      	ldr	r3, [r3, #12]
     476:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     47a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     47e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     482:	461c      	mov	r4, r3
     484:	687b      	ldr	r3, [r7, #4]
     486:	68db      	ldr	r3, [r3, #12]
     488:	00db      	lsls	r3, r3, #3
     48a:	f003 0318 	and.w	r3, r3, #24
     48e:	2218      	movs	r2, #24
     490:	409a      	lsls	r2, r3
     492:	687b      	ldr	r3, [r7, #4]
     494:	68db      	ldr	r3, [r3, #12]
     496:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     49a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     49e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     4a2:	6819      	ldr	r1, [r3, #0]
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	68db      	ldr	r3, [r3, #12]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	f003 0318 	and.w	r3, r3, #24
     4ae:	20ff      	movs	r0, #255	; 0xff
     4b0:	fa00 f303 	lsl.w	r3, r0, r3
     4b4:	43db      	mvns	r3, r3
     4b6:	400b      	ands	r3, r1
     4b8:	4313      	orrs	r3, r2
     4ba:	6023      	str	r3, [r4, #0]
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	68db      	ldr	r3, [r3, #12]
     4c0:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     4c6:	4413      	add	r3, r2
     4c8:	4618      	mov	r0, r3
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	68db      	ldr	r3, [r3, #12]
     4ce:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4d2:	4b0f      	ldr	r3, [pc, #60]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     4d4:	4413      	add	r3, r2
     4d6:	681a      	ldr	r2, [r3, #0]
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	68db      	ldr	r3, [r3, #12]
     4dc:	00db      	lsls	r3, r3, #3
     4de:	f003 0318 	and.w	r3, r3, #24
     4e2:	21ff      	movs	r1, #255	; 0xff
     4e4:	fa01 f303 	lsl.w	r3, r1, r3
     4e8:	43db      	mvns	r3, r3
     4ea:	4013      	ands	r3, r2
     4ec:	6003      	str	r3, [r0, #0]
     4ee:	4b06      	ldr	r3, [pc, #24]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     4f0:	2200      	movs	r2, #0
     4f2:	601a      	str	r2, [r3, #0]
     4f4:	68bb      	ldr	r3, [r7, #8]
     4f6:	f383 8810 	msr	PRIMASK, r3
    }

    return false;
     4fa:	2300      	movs	r3, #0
}
     4fc:	4618      	mov	r0, r3
     4fe:	3718      	adds	r7, #24
     500:	46bd      	mov	sp, r7
     502:	bc90      	pop	{r4, r7}
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	40010060 	.word	0x40010060
     50c:	40010040 	.word	0x40010040
     510:	400100e0 	.word	0x400100e0
     514:	40010080 	.word	0x40010080

00000518 <am_bootloader_validate_structure>:
//! @return true if the check passes.
//
//*****************************************************************************
bool
am_bootloader_validate_structure(uint32_t *pInfo, uint32_t size)
{
     518:	b580      	push	{r7, lr}
     51a:	b084      	sub	sp, #16
     51c:	af00      	add	r7, sp, #0
     51e:	6078      	str	r0, [r7, #4]
     520:	6039      	str	r1, [r7, #0]
    uint32_t ui32Crc = 0;
     522:	2300      	movs	r3, #0
     524:	60bb      	str	r3, [r7, #8]
    // CRC value is the last 4 bytes of the structure
    uint32_t *pCrc = pInfo + size/4 - 1;
     526:	683b      	ldr	r3, [r7, #0]
     528:	089b      	lsrs	r3, r3, #2
     52a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     52e:	3b01      	subs	r3, #1
     530:	009b      	lsls	r3, r3, #2
     532:	687a      	ldr	r2, [r7, #4]
     534:	4413      	add	r3, r2
     536:	60fb      	str	r3, [r7, #12]
    // Compute and validate CRC of the structure
    am_bootloader_partial_crc32(pInfo, size - 4, &ui32Crc);
     538:	683b      	ldr	r3, [r7, #0]
     53a:	3b04      	subs	r3, #4
     53c:	f107 0208 	add.w	r2, r7, #8
     540:	4619      	mov	r1, r3
     542:	6878      	ldr	r0, [r7, #4]
     544:	f7ff fdea 	bl	11c <am_bootloader_partial_crc32>
    if (*pCrc != ui32Crc)
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	681a      	ldr	r2, [r3, #0]
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	429a      	cmp	r2, r3
     550:	d001      	beq.n	556 <am_bootloader_validate_structure+0x3e>
    {
        return false;
     552:	2300      	movs	r3, #0
     554:	e000      	b.n	558 <am_bootloader_validate_structure+0x40>
    }
    else
    {
        return true;
     556:	2301      	movs	r3, #1
    }
}
     558:	4618      	mov	r0, r3
     55a:	3710      	adds	r7, #16
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}

00000560 <am_bootloader_flag_page_update>:
//
//*****************************************************************************
int
am_bootloader_flag_page_update(am_bootloader_image_t *psImage,
                               uint32_t *pui32FlagPage)
{
     560:	b580      	push	{r7, lr}
     562:	b086      	sub	sp, #24
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
    uint32_t ui32Block, ui32Page;
    uint32_t ui32Critical;
    psImage->ui32Checksum = 0;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	2200      	movs	r2, #0
     56e:	621a      	str	r2, [r3, #32]
    DPRINTF(("Image to use: 0x%08x\r\n", (uintptr_t)psImage));
    DPRINTF(("Flag page address: 0x%08x\r\n", (uintptr_t)pui32FlagPage));
    //
    // Calculate the correct flag page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)pui32FlagPage);
     570:	683b      	ldr	r3, [r7, #0]
     572:	0b5b      	lsrs	r3, r3, #13
     574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     578:	617b      	str	r3, [r7, #20]
    DPRINTF(("Flag page %d\r\n", ui32Page));
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)pui32FlagPage);
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	0cdb      	lsrs	r3, r3, #19
     57e:	f003 0301 	and.w	r3, r3, #1
     582:	613b      	str	r3, [r7, #16]
    DPRINTF(("Flag page in block %d\r\n", ui32Block));

    // Compute CRC of the structure
    am_bootloader_partial_crc32(psImage, sizeof(*psImage) - 4, &psImage->ui32Checksum);
     584:	687b      	ldr	r3, [r7, #4]
     586:	3320      	adds	r3, #32
     588:	461a      	mov	r2, r3
     58a:	2120      	movs	r1, #32
     58c:	6878      	ldr	r0, [r7, #4]
     58e:	f7ff fdc5 	bl	11c <am_bootloader_partial_crc32>
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     592:	f001 f9c7 	bl	1924 <am_hal_interrupt_master_disable>
     596:	60f8      	str	r0, [r7, #12]
    //
    // Erase the page.
    //
    int rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
     598:	697a      	ldr	r2, [r7, #20]
     59a:	6939      	ldr	r1, [r7, #16]
     59c:	4809      	ldr	r0, [pc, #36]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     59e:	f001 f919 	bl	17d4 <am_hal_flash_page_erase>
     5a2:	60b8      	str	r0, [r7, #8]
    DPRINTF(("Flash Erased %d\r\n", rc));

    //
    // Write the psImage structure directly to the flag page.
    //
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     5a4:	2309      	movs	r3, #9
     5a6:	683a      	ldr	r2, [r7, #0]
     5a8:	6879      	ldr	r1, [r7, #4]
     5aa:	4806      	ldr	r0, [pc, #24]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     5ac:	f001 f918 	bl	17e0 <am_hal_flash_program_main>
     5b0:	60b8      	str	r0, [r7, #8]
                              pui32FlagPage,
                              sizeof(am_bootloader_image_t) / 4);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     5b2:	68f8      	ldr	r0, [r7, #12]
     5b4:	f001 f9ba 	bl	192c <am_hal_interrupt_master_set>
    DPRINTF(("Done. %d\r\n", rc));
    return rc;
     5b8:	68bb      	ldr	r3, [r7, #8]
}
     5ba:	4618      	mov	r0, r3
     5bc:	3718      	adds	r7, #24
     5be:	46bd      	mov	sp, r7
     5c0:	bd80      	pop	{r7, pc}
     5c2:	bf00      	nop
     5c4:	12344321 	.word	0x12344321

000005c8 <am_bootloader_check_index>:
//! @return return false if the bit corresponding to index is set.
//
//*****************************************************************************
bool
am_bootloader_check_index(uint32_t index, uint32_t *pMask)
{
     5c8:	b480      	push	{r7}
     5ca:	b085      	sub	sp, #20
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
     5d0:	6039      	str	r1, [r7, #0]
    uint32_t valid = *pMask;
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	60fb      	str	r3, [r7, #12]
    if (index > 31)
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	2b1f      	cmp	r3, #31
     5dc:	d901      	bls.n	5e2 <am_bootloader_check_index+0x1a>
    {
        return true;
     5de:	2301      	movs	r3, #1
     5e0:	e00d      	b.n	5fe <am_bootloader_check_index+0x36>
    }
    if (valid & (1 << (31 - index)))
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	f1c3 031f 	rsb	r3, r3, #31
     5e8:	2201      	movs	r2, #1
     5ea:	fa02 f303 	lsl.w	r3, r2, r3
     5ee:	461a      	mov	r2, r3
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	4013      	ands	r3, r2
     5f4:	2b00      	cmp	r3, #0
     5f6:	d001      	beq.n	5fc <am_bootloader_check_index+0x34>
    {
        return false;
     5f8:	2300      	movs	r3, #0
     5fa:	e000      	b.n	5fe <am_bootloader_check_index+0x36>
    }
    return true;
     5fc:	2301      	movs	r3, #1

}
     5fe:	4618      	mov	r0, r3
     600:	3714      	adds	r7, #20
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop

0000060c <am_bootloader_erase_flash_page>:
//! @return none
//
//*****************************************************************************
void
am_bootloader_erase_flash_page(uint32_t ui32Addr)
{
     60c:	b580      	push	{r7, lr}
     60e:	b086      	sub	sp, #24
     610:	af00      	add	r7, sp, #0
     612:	6078      	str	r0, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32CurrentPage, ui32CurrentBlock;
    //
    // Figure out what page and block we're working on.
    //
    ui32CurrentPage =  AM_HAL_FLASH_ADDR2PAGE(ui32Addr);
     614:	687b      	ldr	r3, [r7, #4]
     616:	0b5b      	lsrs	r3, r3, #13
     618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     61c:	617b      	str	r3, [r7, #20]
    ui32CurrentBlock = AM_HAL_FLASH_ADDR2INST(ui32Addr);
     61e:	687b      	ldr	r3, [r7, #4]
     620:	0cdb      	lsrs	r3, r3, #19
     622:	f003 0301 	and.w	r3, r3, #1
     626:	613b      	str	r3, [r7, #16]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     628:	f001 f97c 	bl	1924 <am_hal_interrupt_master_disable>
     62c:	60f8      	str	r0, [r7, #12]
    am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     62e:	697a      	ldr	r2, [r7, #20]
     630:	6939      	ldr	r1, [r7, #16]
     632:	4805      	ldr	r0, [pc, #20]	; (648 <am_bootloader_erase_flash_page+0x3c>)
     634:	f001 f8ce 	bl	17d4 <am_hal_flash_page_erase>
                                ui32CurrentBlock, ui32CurrentPage);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     638:	68f8      	ldr	r0, [r7, #12]
     63a:	f001 f977 	bl	192c <am_hal_interrupt_master_set>
}
     63e:	bf00      	nop
     640:	3718      	adds	r7, #24
     642:	46bd      	mov	sp, r7
     644:	bd80      	pop	{r7, pc}
     646:	bf00      	nop
     648:	12344321 	.word	0x12344321

0000064c <am_bootloader_program_flash_page>:
//
//*****************************************************************************
void
am_bootloader_program_flash_page(uint32_t ui32WriteAddr,
    uint32_t *pui32ReadAddr, uint32_t numBytes)
{
     64c:	b580      	push	{r7, lr}
     64e:	b086      	sub	sp, #24
     650:	af00      	add	r7, sp, #0
     652:	60f8      	str	r0, [r7, #12]
     654:	60b9      	str	r1, [r7, #8]
     656:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32WordsInBuffer;

    am_bootloader_erase_flash_page(ui32WriteAddr);
     658:	68f8      	ldr	r0, [r7, #12]
     65a:	f7ff ffd7 	bl	60c <am_bootloader_erase_flash_page>
    
    ui32WordsInBuffer = (numBytes + 3)/ 4;
     65e:	687b      	ldr	r3, [r7, #4]
     660:	3303      	adds	r3, #3
     662:	089b      	lsrs	r3, r3, #2
     664:	617b      	str	r3, [r7, #20]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     666:	f001 f95d 	bl	1924 <am_hal_interrupt_master_disable>
     66a:	6138      	str	r0, [r7, #16]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     66c:	68fa      	ldr	r2, [r7, #12]
     66e:	697b      	ldr	r3, [r7, #20]
     670:	68b9      	ldr	r1, [r7, #8]
     672:	4805      	ldr	r0, [pc, #20]	; (688 <am_bootloader_program_flash_page+0x3c>)
     674:	f001 f8b4 	bl	17e0 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32WordsInBuffer);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     678:	6938      	ldr	r0, [r7, #16]
     67a:	f001 f957 	bl	192c <am_hal_interrupt_master_set>
}
     67e:	bf00      	nop
     680:	3718      	adds	r7, #24
     682:	46bd      	mov	sp, r7
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	12344321 	.word	0x12344321

0000068c <am_bootloader_image_run>:
//! @return The function does not return.
//
//*****************************************************************************
void
am_bootloader_image_run(am_bootloader_image_t *psImage)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
    // The underlying boot sequence is a little different depeding on whether
    // the image was delivered as an encrypted image or as a cleartext image.
    // We will call the correct assembly routine based on what the image
    // structure tells us.
    //
    if(psImage->bEncrypted)
     694:	687b      	ldr	r3, [r7, #4]
     696:	69db      	ldr	r3, [r3, #28]
     698:	2b00      	cmp	r3, #0
     69a:	d003      	beq.n	6a4 <am_bootloader_image_run+0x18>
    {
        am_bootloader_encrypted_image_run(psImage);
     69c:	6878      	ldr	r0, [r7, #4]
     69e:	f000 f809 	bl	6b4 <am_bootloader_encrypted_image_run>
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
    }
}
     6a2:	e002      	b.n	6aa <am_bootloader_image_run+0x1e>
    {
        am_bootloader_encrypted_image_run(psImage);
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
     6a4:	6878      	ldr	r0, [r7, #4]
     6a6:	f000 f811 	bl	6cc <am_bootloader_clear_image_run>
    }
}
     6aa:	bf00      	nop
     6ac:	3708      	adds	r7, #8
     6ae:	46bd      	mov	sp, r7
     6b0:	bd80      	pop	{r7, pc}
     6b2:	bf00      	nop

000006b4 <am_bootloader_encrypted_image_run>:
am_bootloader_encrypted_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #20]");
     6b4:	6941      	ldr	r1, [r0, #20]
    __asm("    ldr     r2, [r0, #24]");
     6b6:	6982      	ldr	r2, [r0, #24]

    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6b8:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6ba:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6c2:	6018      	str	r0, [r3, #0]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6c4:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6c6:	4710      	bx	r2
}
     6c8:	bf00      	nop
     6ca:	bf00      	nop

000006cc <am_bootloader_clear_image_run>:
am_bootloader_clear_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6cc:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6ce:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6d6:	6018      	str	r0, [r3, #0]

    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #0]");
     6d8:	6801      	ldr	r1, [r0, #0]
    __asm("    ldr     r2, [r0, #4]");
     6da:	6842      	ldr	r2, [r0, #4]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6dc:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6de:	4710      	bx	r2
}
     6e0:	bf00      	nop
     6e2:	bf00      	nop

000006e4 <check_flash_address_range>:

// Checks that the address does not overlap with bootloader or flag page
// It also checks that the address is inside the internal flash
static bool
check_flash_address_range(uint32_t address, uint32_t size)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	b090      	sub	sp, #64	; 0x40
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
     6ec:	6039      	str	r1, [r7, #0]
    static uint32_t g_intFlashSize = 0;
    am_hal_mcuctrl_device_t sDevice;

    uint32_t ui32Start = address;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t ui32End = address + size - 1 ;
     6f2:	687a      	ldr	r2, [r7, #4]
     6f4:	683b      	ldr	r3, [r7, #0]
     6f6:	4413      	add	r3, r2
     6f8:	3b01      	subs	r3, #1
     6fa:	63bb      	str	r3, [r7, #56]	; 0x38

    if (g_intFlashSize == 0) // First call
     6fc:	4b19      	ldr	r3, [pc, #100]	; (764 <check_flash_address_range+0x80>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	2b00      	cmp	r3, #0
     702:	d107      	bne.n	714 <check_flash_address_range+0x30>
    {
        // Get chip specific info
        am_hal_mcuctrl_device_info_get(&sDevice);
     704:	f107 0308 	add.w	r3, r7, #8
     708:	4618      	mov	r0, r3
     70a:	f001 f913 	bl	1934 <am_hal_mcuctrl_device_info_get>
        g_intFlashSize = sDevice.ui32FlashSize;
     70e:	6a3b      	ldr	r3, [r7, #32]
     710:	4a14      	ldr	r2, [pc, #80]	; (764 <check_flash_address_range+0x80>)
     712:	6013      	str	r3, [r2, #0]
    // Make sure the address is within flash.
    //
    //
    // Check to make sure address is not within bootloader program
    //
    if ( ui32Start < MAX_BOOTLOADER_SIZE )
     714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
     71a:	d201      	bcs.n	720 <check_flash_address_range+0x3c>
    {
        return false;
     71c:	2300      	movs	r3, #0
     71e:	e01d      	b.n	75c <check_flash_address_range+0x78>
    }
    // Check to make sure the address is not beyond the flash
    if (ui32End >= g_intFlashSize)
     720:	4b10      	ldr	r3, [pc, #64]	; (764 <check_flash_address_range+0x80>)
     722:	681b      	ldr	r3, [r3, #0]
     724:	6bba      	ldr	r2, [r7, #56]	; 0x38
     726:	429a      	cmp	r2, r3
     728:	d301      	bcc.n	72e <check_flash_address_range+0x4a>
    {
        return false;
     72a:	2300      	movs	r3, #0
     72c:	e016      	b.n	75c <check_flash_address_range+0x78>
    if ( USE_FLAG_PAGE )
    {
        //
        // Check to make sure address is not in the flag page
        //
        if ( (FLAG_PAGE_LOCATION == ui32Start) ||
     72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     734:	d00f      	beq.n	756 <check_flash_address_range+0x72>
     736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     73c:	d903      	bls.n	746 <check_flash_address_range+0x62>
             ((FLAG_PAGE_LOCATION < ui32Start) &&
     73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     740:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     744:	d307      	bcc.n	756 <check_flash_address_range+0x72>
                ((FLAG_PAGE_LOCATION + AM_HAL_FLASH_PAGE_SIZE) > ui32Start)) ||
     746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     74c:	d205      	bcs.n	75a <check_flash_address_range+0x76>
            ((FLAG_PAGE_LOCATION > ui32Start) &&
     74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     754:	d301      	bcc.n	75a <check_flash_address_range+0x76>
                (FLAG_PAGE_LOCATION <= ui32End))
           )
        {
            return false;
     756:	2300      	movs	r3, #0
     758:	e000      	b.n	75c <check_flash_address_range+0x78>
        }
    }
    return true;
     75a:	2301      	movs	r3, #1
}
     75c:	4618      	mov	r0, r3
     75e:	3740      	adds	r7, #64	; 0x40
     760:	46bd      	mov	sp, r7
     762:	bd80      	pop	{r7, pc}
     764:	100010d0 	.word	0x100010d0

00000768 <wipe_sram>:
// Wipe Clean SRAM up to the specified address
// CAUTION!!!
// This will wipe the complete SRAM including stack of the caller
// This should be called as the last thing before calling reset
void wipe_sram(void)
{
     768:	b480      	push	{r7}
     76a:	af00      	add	r7, sp, #0
    //
    // Wipe SRAM (without using variables).
    //
    // Use the first SRAM location as temp
    // Last SRAM word = lastAddr = SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;;
     770:	4b0e      	ldr	r3, [pc, #56]	; (7ac <wipe_sram+0x44>)
     772:	695b      	ldr	r3, [r3, #20]
     774:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
     778:	3b04      	subs	r3, #4
    //
    // Wipe SRAM (without using variables).
    //
    // Use the first SRAM location as temp
    // Last SRAM word = lastAddr = SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     77a:	6013      	str	r3, [r2, #0]
        SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;;

    // Can not use any local variables from now on
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     77c:	e00b      	b.n	796 <wipe_sram+0x2e>
    {
        *(*((volatile uint32_t **)(SRAM_BASEADDR))) = 0x0;
     77e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     782:	681b      	ldr	r3, [r3, #0]
     784:	2200      	movs	r2, #0
     786:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(SRAM_BASEADDR)) -= 4;
     788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     78c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     790:	681b      	ldr	r3, [r3, #0]
     792:	3b04      	subs	r3, #4
     794:	6013      	str	r3, [r2, #0]
    // Last SRAM word = lastAddr = SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
        SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;;

    // Can not use any local variables from now on
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     796:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     79a:	681b      	ldr	r3, [r3, #0]
     79c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     7a0:	d1ed      	bne.n	77e <wipe_sram+0x16>
    {
        *(*((volatile uint32_t **)(SRAM_BASEADDR))) = 0x0;
        *((volatile uint32_t *)(SRAM_BASEADDR)) -= 4;
    }
}
     7a2:	bf00      	nop
     7a4:	46bd      	mov	sp, r7
     7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     7aa:	4770      	bx	lr
     7ac:	100010b0 	.word	0x100010b0

000007b0 <program_image>:
#endif

// Programs the flash based on g_am_multiboot.pui32WriteAddress, g_am_multiboot.pui8RxBuffer & g_am_multiboot.ui32BytesInBuffer
void
program_image(uint32_t bEncrypted)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b086      	sub	sp, #24
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
    uint32_t ui32WriteAddr = (uint32_t)g_am_multiboot.pui32WriteAddress;
     7b8:	4b18      	ldr	r3, [pc, #96]	; (81c <program_image+0x6c>)
     7ba:	691b      	ldr	r3, [r3, #16]
     7bc:	617b      	str	r3, [r7, #20]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
     7be:	4b17      	ldr	r3, [pc, #92]	; (81c <program_image+0x6c>)
     7c0:	685b      	ldr	r3, [r3, #4]
     7c2:	613b      	str	r3, [r7, #16]
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;
     7c4:	4b15      	ldr	r3, [pc, #84]	; (81c <program_image+0x6c>)
     7c6:	689b      	ldr	r3, [r3, #8]
     7c8:	60fb      	str	r3, [r7, #12]

    if ( g_am_multiboot.bStoreInSRAM )
     7ca:	4b14      	ldr	r3, [pc, #80]	; (81c <program_image+0x6c>)
     7cc:	7b1b      	ldrb	r3, [r3, #12]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d020      	beq.n	814 <program_image+0x64>
    {
        while ( ui32NumBytes )
     7d2:	e01a      	b.n	80a <program_image+0x5a>
        {
            am_bootloader_program_flash_page(ui32WriteAddr, pui32ReadAddr,
     7d4:	68fb      	ldr	r3, [r7, #12]
     7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     7da:	bf28      	it	cs
     7dc:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
     7e0:	461a      	mov	r2, r3
     7e2:	6939      	ldr	r1, [r7, #16]
     7e4:	6978      	ldr	r0, [r7, #20]
     7e6:	f7ff ff31 	bl	64c <am_bootloader_program_flash_page>
                (ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE) ? AM_HAL_FLASH_PAGE_SIZE: ui32NumBytes);
            if ( ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE )
     7ea:	68fb      	ldr	r3, [r7, #12]
     7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     7f0:	d90f      	bls.n	812 <program_image+0x62>
            {
                ui32NumBytes -= AM_HAL_FLASH_PAGE_SIZE;
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     7f8:	60fb      	str	r3, [r7, #12]
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
     7fa:	697b      	ldr	r3, [r7, #20]
     7fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     800:	617b      	str	r3, [r7, #20]
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
     802:	693b      	ldr	r3, [r7, #16]
     804:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     808:	613b      	str	r3, [r7, #16]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;

    if ( g_am_multiboot.bStoreInSRAM )
    {
        while ( ui32NumBytes )
     80a:	68fb      	ldr	r3, [r7, #12]
     80c:	2b00      	cmp	r3, #0
     80e:	d1e1      	bne.n	7d4 <program_image+0x24>
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     810:	e000      	b.n	814 <program_image+0x64>
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
            }
            else
            {
                break;
     812:	bf00      	nop
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     814:	bf00      	nop
     816:	3718      	adds	r7, #24
     818:	46bd      	mov	sp, r7
     81a:	bd80      	pop	{r7, pc}
     81c:	100010b0 	.word	0x100010b0

00000820 <am_multiboot_init>:
//! @return true if the parameters are acceptable.
//
//*****************************************************************************
bool
am_multiboot_init(uint32_t *pBuf, uint32_t bufSize)
{
     820:	b480      	push	{r7}
     822:	b085      	sub	sp, #20
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
     828:	6039      	str	r1, [r7, #0]
    bool ret = false;
     82a:	2300      	movs	r3, #0
     82c:	73fb      	strb	r3, [r7, #15]
    if (pBuf && (bufSize >= AM_HAL_FLASH_PAGE_SIZE))
     82e:	687b      	ldr	r3, [r7, #4]
     830:	2b00      	cmp	r3, #0
     832:	d008      	beq.n	846 <am_multiboot_init+0x26>
     834:	683b      	ldr	r3, [r7, #0]
     836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     83a:	d304      	bcc.n	846 <am_multiboot_init+0x26>
    {
        g_am_multiboot.pui32UserBuf = pBuf;
     83c:	4a05      	ldr	r2, [pc, #20]	; (854 <am_multiboot_init+0x34>)
     83e:	687b      	ldr	r3, [r7, #4]
     840:	6013      	str	r3, [r2, #0]
        ret = true;
     842:	2301      	movs	r3, #1
     844:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
     846:	7bfb      	ldrb	r3, [r7, #15]
}
     848:	4618      	mov	r0, r3
     84a:	3714      	adds	r7, #20
     84c:	46bd      	mov	sp, r7
     84e:	f85d 7b04 	ldr.w	r7, [sp], #4
     852:	4770      	bx	lr
     854:	100010b0 	.word	0x100010b0

00000858 <image_start_packet_read>:
//! @return true if the image parameters are acceptable.
//
//*****************************************************************************
bool
image_start_packet_read(am_bootloader_image_t *psImage, uint32_t *pui32Packet)
{
     858:	b580      	push	{r7, lr}
     85a:	b090      	sub	sp, #64	; 0x40
     85c:	af02      	add	r7, sp, #8
     85e:	6078      	str	r0, [r7, #4]
     860:	6039      	str	r1, [r7, #0]
    am_hal_mcuctrl_device_t sDevice;

    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     862:	f107 0308 	add.w	r3, r7, #8
     866:	4618      	mov	r0, r3
     868:	f001 f864 	bl	1934 <am_hal_mcuctrl_device_info_get>

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = (uint32_t *)(pui32Packet[1]);
     86c:	683b      	ldr	r3, [r7, #0]
     86e:	3304      	adds	r3, #4
     870:	681b      	ldr	r3, [r3, #0]
     872:	461a      	mov	r2, r3
     874:	687b      	ldr	r3, [r7, #4]
     876:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pui32Packet[2];
     878:	683b      	ldr	r3, [r7, #0]
     87a:	689a      	ldr	r2, [r3, #8]
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pui32Packet[3];
     880:	683b      	ldr	r3, [r7, #0]
     882:	68da      	ldr	r2, [r3, #12]
     884:	687b      	ldr	r3, [r7, #4]
     886:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
     888:	687b      	ldr	r3, [r7, #4]
     88a:	2212      	movs	r2, #18
     88c:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
     88e:	687b      	ldr	r3, [r7, #4]
     890:	2200      	movs	r2, #0
     892:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
     894:	687b      	ldr	r3, [r7, #4]
     896:	2200      	movs	r2, #0
     898:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	2200      	movs	r2, #0
     89e:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	2200      	movs	r2, #0
     8a4:	619a      	str	r2, [r3, #24]

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)psImage->pui32LinkAddress,
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	461a      	mov	r2, r3
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	685b      	ldr	r3, [r3, #4]
     8b0:	4619      	mov	r1, r3
     8b2:	4610      	mov	r0, r2
     8b4:	f7ff ff16 	bl	6e4 <check_flash_address_range>
     8b8:	4603      	mov	r3, r0
     8ba:	f083 0301 	eor.w	r3, r3, #1
     8be:	b2db      	uxtb	r3, r3
     8c0:	2b00      	cmp	r3, #0
     8c2:	d001      	beq.n	8c8 <image_start_packet_read+0x70>
            psImage->ui32NumBytes))
    {
        return false;
     8c4:	2300      	movs	r3, #0
     8c6:	e042      	b.n	94e <image_start_packet_read+0xf6>
    }
    // Determine if we can gather image in SRAM completely before flashing all at once
    // This implementation uses the excess SRAM available in the system
    // CAUTION!!!: For this to work it is essential that the unused SRAM banks are
    // not powered down
    if ((sDevice.ui32SRAMSize - MAX_SRAM_USED) >= psImage->ui32NumBytes)
     8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8ca:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	685b      	ldr	r3, [r3, #4]
     8d2:	429a      	cmp	r2, r3
     8d4:	d309      	bcc.n	8ea <image_start_packet_read+0x92>
    {
        g_am_multiboot.bStoreInSRAM = 1;
     8d6:	4b20      	ldr	r3, [pc, #128]	; (958 <image_start_packet_read+0x100>)
     8d8:	2201      	movs	r2, #1
     8da:	731a      	strb	r2, [r3, #12]
        g_am_multiboot.pui8RxBuffer = (uint8_t *)(SRAM_BASEADDR + MAX_SRAM_USED);
     8dc:	4b1e      	ldr	r3, [pc, #120]	; (958 <image_start_packet_read+0x100>)
     8de:	4a1f      	ldr	r2, [pc, #124]	; (95c <image_start_packet_read+0x104>)
     8e0:	605a      	str	r2, [r3, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = sDevice.ui32SRAMSize;
     8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8e4:	4a1c      	ldr	r2, [pc, #112]	; (958 <image_start_packet_read+0x100>)
     8e6:	6153      	str	r3, [r2, #20]
     8e8:	e010      	b.n	90c <image_start_packet_read+0xb4>
#endif
    }
    else
    {
        g_am_multiboot.bStoreInSRAM = 0;
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <image_start_packet_read+0x100>)
     8ec:	2200      	movs	r2, #0
     8ee:	731a      	strb	r2, [r3, #12]
        if (g_am_multiboot.pui32UserBuf == NULL)
     8f0:	4b19      	ldr	r3, [pc, #100]	; (958 <image_start_packet_read+0x100>)
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d101      	bne.n	8fc <image_start_packet_read+0xa4>
        {
            return false;
     8f8:	2300      	movs	r3, #0
     8fa:	e028      	b.n	94e <image_start_packet_read+0xf6>
        }
        g_am_multiboot.pui8RxBuffer = (uint8_t *)g_am_multiboot.pui32UserBuf;
     8fc:	4b16      	ldr	r3, [pc, #88]	; (958 <image_start_packet_read+0x100>)
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	4a15      	ldr	r2, [pc, #84]	; (958 <image_start_packet_read+0x100>)
     902:	6053      	str	r3, [r2, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = MAX_SRAM_USED;
     904:	4b14      	ldr	r3, [pc, #80]	; (958 <image_start_packet_read+0x100>)
     906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     90a:	615a      	str	r2, [r3, #20]
#endif
    }

#ifdef MULTIBOOT_SECURE
    // Validate the security trailer & Initialize the security params
    if ( init_multiboot_secure(pui32Packet[4], &pui32Packet[5], g_am_multiboot.bStoreInSRAM,
     90c:	683b      	ldr	r3, [r7, #0]
     90e:	3310      	adds	r3, #16
     910:	6818      	ldr	r0, [r3, #0]
     912:	683b      	ldr	r3, [r7, #0]
     914:	f103 0114 	add.w	r1, r3, #20
     918:	4b0f      	ldr	r3, [pc, #60]	; (958 <image_start_packet_read+0x100>)
     91a:	7b1a      	ldrb	r2, [r3, #12]
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	331c      	adds	r3, #28
     920:	9300      	str	r3, [sp, #0]
     922:	687b      	ldr	r3, [r7, #4]
     924:	f000 fddc 	bl	14e0 <init_multiboot_secure>
     928:	4603      	mov	r3, r0
     92a:	2b00      	cmp	r3, #0
     92c:	d001      	beq.n	932 <image_start_packet_read+0xda>
                               psImage, &psImage->bEncrypted) != 0 )
    {
        return false;
     92e:	2300      	movs	r3, #0
     930:	e00d      	b.n	94e <image_start_packet_read+0xf6>
#endif
    //
    // Otherwise, the image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
     932:	687b      	ldr	r3, [r7, #4]
     934:	681b      	ldr	r3, [r3, #0]
     936:	4a08      	ldr	r2, [pc, #32]	; (958 <image_start_packet_read+0x100>)
     938:	6113      	str	r3, [r2, #16]
    g_ui32BytesReceived = 0;
     93a:	4b09      	ldr	r3, [pc, #36]	; (960 <image_start_packet_read+0x108>)
     93c:	2200      	movs	r2, #0
     93e:	601a      	str	r2, [r3, #0]
    g_am_multiboot.ui32BytesInBuffer = 0;
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <image_start_packet_read+0x100>)
     942:	2200      	movs	r2, #0
     944:	609a      	str	r2, [r3, #8]
    g_ui32CRC = 0;
     946:	4b07      	ldr	r3, [pc, #28]	; (964 <image_start_packet_read+0x10c>)
     948:	2200      	movs	r2, #0
     94a:	601a      	str	r2, [r3, #0]
    return true;
     94c:	2301      	movs	r3, #1
}
     94e:	4618      	mov	r0, r3
     950:	3738      	adds	r7, #56	; 0x38
     952:	46bd      	mov	sp, r7
     954:	bd80      	pop	{r7, pc}
     956:	bf00      	nop
     958:	100010b0 	.word	0x100010b0
     95c:	10004000 	.word	0x10004000
     960:	100010c8 	.word	0x100010c8
     964:	100010cc 	.word	0x100010cc

00000968 <image_data_packet_read>:
//! @return None.
//
//*****************************************************************************
void
image_data_packet_read(uint8_t *pui8Src, uint32_t ui32Size)
{
     968:	b580      	push	{r7, lr}
     96a:	b084      	sub	sp, #16
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
     970:	6039      	str	r1, [r7, #0]
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
     972:	2300      	movs	r3, #0
     974:	60fb      	str	r3, [r7, #12]
     976:	e06b      	b.n	a50 <image_data_packet_read+0xe8>
    {
        g_am_multiboot.pui8RxBuffer[g_am_multiboot.ui32BytesInBuffer] = *pui8Src++;
     978:	4b39      	ldr	r3, [pc, #228]	; (a60 <image_data_packet_read+0xf8>)
     97a:	685a      	ldr	r2, [r3, #4]
     97c:	4b38      	ldr	r3, [pc, #224]	; (a60 <image_data_packet_read+0xf8>)
     97e:	689b      	ldr	r3, [r3, #8]
     980:	441a      	add	r2, r3
     982:	687b      	ldr	r3, [r7, #4]
     984:	1c59      	adds	r1, r3, #1
     986:	6079      	str	r1, [r7, #4]
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	7013      	strb	r3, [r2, #0]

        //
        // Keep track of how much data we've copied into the SRAM buffer.
        //
        g_am_multiboot.ui32BytesInBuffer++;
     98c:	4b34      	ldr	r3, [pc, #208]	; (a60 <image_data_packet_read+0xf8>)
     98e:	689b      	ldr	r3, [r3, #8]
     990:	3301      	adds	r3, #1
     992:	4a33      	ldr	r2, [pc, #204]	; (a60 <image_data_packet_read+0xf8>)
     994:	6093      	str	r3, [r2, #8]
        g_ui32BytesReceived++;
     996:	4b33      	ldr	r3, [pc, #204]	; (a64 <image_data_packet_read+0xfc>)
     998:	681b      	ldr	r3, [r3, #0]
     99a:	3301      	adds	r3, #1
     99c:	4a31      	ldr	r2, [pc, #196]	; (a64 <image_data_packet_read+0xfc>)
     99e:	6013      	str	r3, [r2, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     9a0:	4b2f      	ldr	r3, [pc, #188]	; (a60 <image_data_packet_read+0xf8>)
     9a2:	7b1b      	ldrb	r3, [r3, #12]
     9a4:	f083 0301 	eor.w	r3, r3, #1
     9a8:	b2db      	uxtb	r3, r3
     9aa:	2b00      	cmp	r3, #0
     9ac:	d004      	beq.n	9b8 <image_data_packet_read+0x50>
     9ae:	4b2c      	ldr	r3, [pc, #176]	; (a60 <image_data_packet_read+0xf8>)
     9b0:	689b      	ldr	r3, [r3, #8]
     9b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     9b6:	d005      	beq.n	9c4 <image_data_packet_read+0x5c>
                 g_ui32BytesReceived == g_sImage.ui32NumBytes )
     9b8:	4b2b      	ldr	r3, [pc, #172]	; (a68 <image_data_packet_read+0x100>)
     9ba:	685a      	ldr	r2, [r3, #4]
     9bc:	4b29      	ldr	r3, [pc, #164]	; (a64 <image_data_packet_read+0xfc>)
     9be:	681b      	ldr	r3, [r3, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     9c0:	429a      	cmp	r2, r3
     9c2:	d142      	bne.n	a4a <image_data_packet_read+0xe2>
        {
            //
            // Run a quick CRC on the received bytes, holding on to the result in a
            // global variable, so we can pick up where we left off on the next pass.
            //
            am_bootloader_partial_crc32(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer, &g_ui32CRC);
     9c4:	4b26      	ldr	r3, [pc, #152]	; (a60 <image_data_packet_read+0xf8>)
     9c6:	6858      	ldr	r0, [r3, #4]
     9c8:	4b25      	ldr	r3, [pc, #148]	; (a60 <image_data_packet_read+0xf8>)
     9ca:	689b      	ldr	r3, [r3, #8]
     9cc:	4a27      	ldr	r2, [pc, #156]	; (a6c <image_data_packet_read+0x104>)
     9ce:	4619      	mov	r1, r3
     9d0:	f7ff fba4 	bl	11c <am_bootloader_partial_crc32>

#ifdef MULTIBOOT_SECURE
            // Decrypt in place
            multiboot_secure_decrypt(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     9d4:	4b22      	ldr	r3, [pc, #136]	; (a60 <image_data_packet_read+0xf8>)
     9d6:	685a      	ldr	r2, [r3, #4]
     9d8:	4b21      	ldr	r3, [pc, #132]	; (a60 <image_data_packet_read+0xf8>)
     9da:	689b      	ldr	r3, [r3, #8]
     9dc:	4619      	mov	r1, r3
     9de:	4610      	mov	r0, r2
     9e0:	f000 fdf4 	bl	15cc <multiboot_secure_decrypt>
            //
            // If this is the first block of our new image, we need to record
            // the reset vector and stack pointer information for inclusion in
            // the flag page.
            //
            if ( g_am_multiboot.bStoreInSRAM || (g_ui32BytesReceived <= AM_HAL_FLASH_PAGE_SIZE) )
     9e4:	4b1e      	ldr	r3, [pc, #120]	; (a60 <image_data_packet_read+0xf8>)
     9e6:	7b1b      	ldrb	r3, [r3, #12]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d104      	bne.n	9f6 <image_data_packet_read+0x8e>
     9ec:	4b1d      	ldr	r3, [pc, #116]	; (a64 <image_data_packet_read+0xfc>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     9f4:	d80c      	bhi.n	a10 <image_data_packet_read+0xa8>
            {
                g_sImage.pui32StackPointer = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[0]);
     9f6:	4b1a      	ldr	r3, [pc, #104]	; (a60 <image_data_packet_read+0xf8>)
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	461a      	mov	r2, r3
     9fe:	4b1a      	ldr	r3, [pc, #104]	; (a68 <image_data_packet_read+0x100>)
     a00:	615a      	str	r2, [r3, #20]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
     a02:	4b17      	ldr	r3, [pc, #92]	; (a60 <image_data_packet_read+0xf8>)
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	3304      	adds	r3, #4
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	461a      	mov	r2, r3
     a0c:	4b16      	ldr	r3, [pc, #88]	; (a68 <image_data_packet_read+0x100>)
     a0e:	619a      	str	r2, [r3, #24]
            }

            if ( !g_am_multiboot.bStoreInSRAM )
     a10:	4b13      	ldr	r3, [pc, #76]	; (a60 <image_data_packet_read+0xf8>)
     a12:	7b1b      	ldrb	r3, [r3, #12]
     a14:	f083 0301 	eor.w	r3, r3, #1
     a18:	b2db      	uxtb	r3, r3
     a1a:	2b00      	cmp	r3, #0
     a1c:	d015      	beq.n	a4a <image_data_packet_read+0xe2>
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     a1e:	4b10      	ldr	r3, [pc, #64]	; (a60 <image_data_packet_read+0xf8>)
     a20:	691b      	ldr	r3, [r3, #16]
     a22:	4618      	mov	r0, r3
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     a24:	4b0e      	ldr	r3, [pc, #56]	; (a60 <image_data_packet_read+0xf8>)
     a26:	6859      	ldr	r1, [r3, #4]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
            }

            if ( !g_am_multiboot.bStoreInSRAM )
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     a28:	4b0d      	ldr	r3, [pc, #52]	; (a60 <image_data_packet_read+0xf8>)
     a2a:	689b      	ldr	r3, [r3, #8]
     a2c:	461a      	mov	r2, r3
     a2e:	f7ff fe0d 	bl	64c <am_bootloader_program_flash_page>
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
                //
                // Adjust the global variables.
                //
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
     a32:	4b0b      	ldr	r3, [pc, #44]	; (a60 <image_data_packet_read+0xf8>)
     a34:	691a      	ldr	r2, [r3, #16]
     a36:	4b0a      	ldr	r3, [pc, #40]	; (a60 <image_data_packet_read+0xf8>)
     a38:	689b      	ldr	r3, [r3, #8]
     a3a:	089b      	lsrs	r3, r3, #2
     a3c:	009b      	lsls	r3, r3, #2
     a3e:	4413      	add	r3, r2
     a40:	4a07      	ldr	r2, [pc, #28]	; (a60 <image_data_packet_read+0xf8>)
     a42:	6113      	str	r3, [r2, #16]
                g_am_multiboot.ui32BytesInBuffer = 0;
     a44:	4b06      	ldr	r3, [pc, #24]	; (a60 <image_data_packet_read+0xf8>)
     a46:	2200      	movs	r2, #0
     a48:	609a      	str	r2, [r3, #8]
{
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	3301      	adds	r3, #1
     a4e:	60fb      	str	r3, [r7, #12]
     a50:	68fa      	ldr	r2, [r7, #12]
     a52:	683b      	ldr	r3, [r7, #0]
     a54:	429a      	cmp	r2, r3
     a56:	d38f      	bcc.n	978 <image_data_packet_read+0x10>
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
                g_am_multiboot.ui32BytesInBuffer = 0;
            }
        }
    }
}
     a58:	bf00      	nop
     a5a:	3710      	adds	r7, #16
     a5c:	46bd      	mov	sp, r7
     a5e:	bd80      	pop	{r7, pc}
     a60:	100010b0 	.word	0x100010b0
     a64:	100010c8 	.word	0x100010c8
     a68:	10001000 	.word	0x10001000
     a6c:	100010cc 	.word	0x100010cc

00000a70 <am_multiboot_check_boot_from_flash>:
//! @return true if it's okay to boot from flash (returns the image structure).
//
//*****************************************************************************
bool
am_multiboot_check_boot_from_flash(bool *pbOverride, am_bootloader_image_t **ppsImage)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
     a78:	6039      	str	r1, [r7, #0]
    bool bValid = false;
     a7a:	2300      	movs	r3, #0
     a7c:	73fb      	strb	r3, [r7, #15]
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
        ( am_bootloader_validate_structure((uint32_t *)g_psBootImage, sizeof(*g_psBootImage)) ))
     a7e:	4b22      	ldr	r3, [pc, #136]	; (b08 <am_multiboot_check_boot_from_flash+0x98>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	2124      	movs	r1, #36	; 0x24
     a84:	4618      	mov	r0, r3
     a86:	f7ff fd47 	bl	518 <am_bootloader_validate_structure>
     a8a:	4603      	mov	r3, r0
    //
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
     a8c:	2b00      	cmp	r3, #0
     a8e:	d01d      	beq.n	acc <am_multiboot_check_boot_from_flash+0x5c>
        //
        // Check the flag page (including the stored CRC) and the override pin
        // to make sure we have a valid image and the host isn't requesting an
        // upgrade.
        //
        if (am_hal_bootloader_override_check(g_psBootImage))
     a90:	4b1d      	ldr	r3, [pc, #116]	; (b08 <am_multiboot_check_boot_from_flash+0x98>)
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	4618      	mov	r0, r3
     a96:	f7ff fbc9 	bl	22c <am_hal_bootloader_override_check>
     a9a:	4603      	mov	r3, r0
     a9c:	2b00      	cmp	r3, #0
     a9e:	d003      	beq.n	aa8 <am_multiboot_check_boot_from_flash+0x38>
        {
            *pbOverride = true;
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	2201      	movs	r2, #1
     aa4:	701a      	strb	r2, [r3, #0]
     aa6:	e029      	b.n	afc <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	2200      	movs	r2, #0
     aac:	701a      	strb	r2, [r3, #0]
            if ( am_bootloader_flash_check(g_psBootImage) )
     aae:	4b16      	ldr	r3, [pc, #88]	; (b08 <am_multiboot_check_boot_from_flash+0x98>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	4618      	mov	r0, r3
     ab4:	f7ff fb64 	bl	180 <am_bootloader_flash_check>
     ab8:	4603      	mov	r3, r0
     aba:	2b00      	cmp	r3, #0
     abc:	d01e      	beq.n	afc <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = g_psBootImage;
     abe:	4b12      	ldr	r3, [pc, #72]	; (b08 <am_multiboot_check_boot_from_flash+0x98>)
     ac0:	681a      	ldr	r2, [r3, #0]
     ac2:	683b      	ldr	r3, [r7, #0]
     ac4:	601a      	str	r2, [r3, #0]
                bValid = true;
     ac6:	2301      	movs	r3, #1
     ac8:	73fb      	strb	r3, [r7, #15]
     aca:	e017      	b.n	afc <am_multiboot_check_boot_from_flash+0x8c>
        //
        // Check the override pin to make sure the host isn't requesting an
        // upgrade, and do a quick check to make sure an image actually exists
        // at the default application location.
        //
        if (am_hal_bootloader_override_check(&g_sImage))
     acc:	480f      	ldr	r0, [pc, #60]	; (b0c <am_multiboot_check_boot_from_flash+0x9c>)
     ace:	f7ff fbad 	bl	22c <am_hal_bootloader_override_check>
     ad2:	4603      	mov	r3, r0
     ad4:	2b00      	cmp	r3, #0
     ad6:	d003      	beq.n	ae0 <am_multiboot_check_boot_from_flash+0x70>
        {
            *pbOverride = true;
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	2201      	movs	r2, #1
     adc:	701a      	strb	r2, [r3, #0]
     ade:	e00d      	b.n	afc <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	2200      	movs	r2, #0
     ae4:	701a      	strb	r2, [r3, #0]
            if ( *(g_sImage.pui32LinkAddress) != 0xFFFFFFFF)
     ae6:	4b09      	ldr	r3, [pc, #36]	; (b0c <am_multiboot_check_boot_from_flash+0x9c>)
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	f1b3 3fff 	cmp.w	r3, #4294967295
     af0:	d004      	beq.n	afc <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = &g_sImage;
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	4a05      	ldr	r2, [pc, #20]	; (b0c <am_multiboot_check_boot_from_flash+0x9c>)
     af6:	601a      	str	r2, [r3, #0]
                bValid = true;
     af8:	2301      	movs	r3, #1
     afa:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return bValid;
     afc:	7bfb      	ldrb	r3, [r7, #15]
}
     afe:	4618      	mov	r0, r3
     b00:	3710      	adds	r7, #16
     b02:	46bd      	mov	sp, r7
     b04:	bd80      	pop	{r7, pc}
     b06:	bf00      	nop
     b08:	10001024 	.word	0x10001024
     b0c:	10001000 	.word	0x10001000

00000b10 <ser_out>:
volatile bool g_bUartImageValid = false;

//
void
ser_out(uint32_t ui32Module, unsigned char data)
{
     b10:	b480      	push	{r7}
     b12:	b083      	sub	sp, #12
     b14:	af00      	add	r7, sp, #0
     b16:	6078      	str	r0, [r7, #4]
     b18:	460b      	mov	r3, r1
     b1a:	70fb      	strb	r3, [r7, #3]
    AM_REGn(UART, ui32Module, DR) = data;
     b1c:	687b      	ldr	r3, [r7, #4]
     b1e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     b22:	331c      	adds	r3, #28
     b24:	031b      	lsls	r3, r3, #12
     b26:	461a      	mov	r2, r3
     b28:	78fb      	ldrb	r3, [r7, #3]
     b2a:	6013      	str	r3, [r2, #0]
    while ( AM_BFRn(UART, ui32Module, FR, TXFF) );
     b2c:	bf00      	nop
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     b34:	331c      	adds	r3, #28
     b36:	031b      	lsls	r3, r3, #12
     b38:	3318      	adds	r3, #24
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	f003 0320 	and.w	r3, r3, #32
     b40:	095b      	lsrs	r3, r3, #5
     b42:	2b00      	cmp	r3, #0
     b44:	d1f3      	bne.n	b2e <ser_out+0x1e>
}
     b46:	bf00      	nop
     b48:	370c      	adds	r7, #12
     b4a:	46bd      	mov	sp, r7
     b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b50:	4770      	bx	lr
     b52:	bf00      	nop

00000b54 <am_multiboot_setup_serial>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_serial(int32_t i32Module, uint32_t ui32BaudRate)
{
     b54:	b580      	push	{r7, lr}
     b56:	b084      	sub	sp, #16
     b58:	af00      	add	r7, sp, #0
     b5a:	6078      	str	r0, [r7, #4]
     b5c:	6039      	str	r1, [r7, #0]
    uint32_t uartInt = AM_HAL_INTERRUPT_UART;
     b5e:	231e      	movs	r3, #30
     b60:	60fb      	str	r3, [r7, #12]
    command = 0;
     b62:	4b23      	ldr	r3, [pc, #140]	; (bf0 <am_multiboot_setup_serial+0x9c>)
     b64:	2200      	movs	r2, #0
     b66:	601a      	str	r2, [r3, #0]
    uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     b68:	2300      	movs	r3, #0
     b6a:	4a22      	ldr	r2, [pc, #136]	; (bf4 <am_multiboot_setup_serial+0xa0>)
     b6c:	6013      	str	r3, [r2, #0]
     b6e:	4a22      	ldr	r2, [pc, #136]	; (bf8 <am_multiboot_setup_serial+0xa4>)
     b70:	6013      	str	r3, [r2, #0]
     b72:	4a22      	ldr	r2, [pc, #136]	; (bfc <am_multiboot_setup_serial+0xa8>)
     b74:	6013      	str	r3, [r2, #0]
    RX_FIFO_FULL = 0;  // check serial FIFO operation
     b76:	4b22      	ldr	r3, [pc, #136]	; (c00 <am_multiboot_setup_serial+0xac>)
     b78:	2200      	movs	r2, #0
     b7a:	701a      	strb	r2, [r3, #0]
    RX_FIFO_EMPTY = 1;
     b7c:	4b21      	ldr	r3, [pc, #132]	; (c04 <am_multiboot_setup_serial+0xb0>)
     b7e:	2201      	movs	r2, #1
     b80:	701a      	strb	r2, [r3, #0]
    packet_cnt = 0xff;
     b82:	4b21      	ldr	r3, [pc, #132]	; (c08 <am_multiboot_setup_serial+0xb4>)
     b84:	22ff      	movs	r2, #255	; 0xff
     b86:	601a      	str	r2, [r3, #0]

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(i32Module);
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	4618      	mov	r0, r3
     b8c:	f001 f954 	bl	1e38 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	4618      	mov	r0, r3
     b94:	f001 f964 	bl	1e60 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	4618      	mov	r0, r3
     b9c:	f001 f938 	bl	1e10 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    g_sUartConfig.ui32BaudRate = ui32BaudRate;
     ba0:	4a1a      	ldr	r2, [pc, #104]	; (c0c <am_multiboot_setup_serial+0xb8>)
     ba2:	683b      	ldr	r3, [r7, #0]
     ba4:	6013      	str	r3, [r2, #0]
    am_hal_uart_config(i32Module, &g_sUartConfig);
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	4918      	ldr	r1, [pc, #96]	; (c0c <am_multiboot_setup_serial+0xb8>)
     baa:	4618      	mov	r0, r3
     bac:	f001 f8ce 	bl	1d4c <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
   am_hal_uart_fifo_config(i32Module,
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	211b      	movs	r1, #27
     bb4:	4618      	mov	r0, r3
     bb6:	f001 f965 	bl	1e84 <am_hal_uart_fifo_config>

//    am_util_delay_ms(100);
    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	4618      	mov	r0, r3
     bbe:	f001 f913 	bl	1de8 <am_hal_uart_enable>

    am_hal_uart_int_clear(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	2150      	movs	r1, #80	; 0x50
     bc6:	4618      	mov	r0, r3
     bc8:	f001 f900 	bl	1dcc <am_hal_uart_int_clear>
    am_hal_uart_int_enable(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	2150      	movs	r1, #80	; 0x50
     bd0:	4618      	mov	r0, r3
     bd2:	f001 f901 	bl	1dd8 <am_hal_uart_int_enable>

#ifndef AM_PART_APOLLO
    if (i32Module == 1)
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2b01      	cmp	r3, #1
     bda:	d101      	bne.n	be0 <am_multiboot_setup_serial+0x8c>
    {
        uartInt = AM_HAL_INTERRUPT_UART1;
     bdc:	231f      	movs	r3, #31
     bde:	60fb      	str	r3, [r7, #12]
    }
#endif
    am_hal_interrupt_enable(uartInt);
     be0:	68f8      	ldr	r0, [r7, #12]
     be2:	f000 fe4b 	bl	187c <am_hal_interrupt_enable>
}
     be6:	bf00      	nop
     be8:	3710      	adds	r7, #16
     bea:	46bd      	mov	sp, r7
     bec:	bd80      	pop	{r7, pc}
     bee:	bf00      	nop
     bf0:	10001124 	.word	0x10001124
     bf4:	10001104 	.word	0x10001104
     bf8:	1000111c 	.word	0x1000111c
     bfc:	1000110c 	.word	0x1000110c
     c00:	10001130 	.word	0x10001130
     c04:	10001119 	.word	0x10001119
     c08:	10001108 	.word	0x10001108
     c0c:	10001028 	.word	0x10001028

00000c10 <am_multiboot_uart_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_uart_isr_handler(uint32_t ui32Module)
{
     c10:	b580      	push	{r7, lr}
     c12:	b088      	sub	sp, #32
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
    uint32_t *rx_pui32Packet;
    unsigned char send_byte_cnt, flush = 0;
     c18:	2300      	movs	r3, #0
     c1a:	77bb      	strb	r3, [r7, #30]
    uint32_t cnt = 0;
     c1c:	2300      	movs	r3, #0
     c1e:	61bb      	str	r3, [r7, #24]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_uart_int_status_get(ui32Module, false);
     c20:	2100      	movs	r1, #0
     c22:	6878      	ldr	r0, [r7, #4]
     c24:	f001 f8c8 	bl	1db8 <am_hal_uart_int_status_get>
     c28:	6178      	str	r0, [r7, #20]
    am_hal_uart_int_clear(ui32Module, ui32Status);
     c2a:	6979      	ldr	r1, [r7, #20]
     c2c:	6878      	ldr	r0, [r7, #4]
     c2e:	f001 f8cd 	bl	1dcc <am_hal_uart_int_clear>
    //
    // Service the uart FIFO.
    //


    RX_FIFO_EMPTY = 0;
     c32:	4ba6      	ldr	r3, [pc, #664]	; (ecc <am_multiboot_uart_isr_handler+0x2bc>)
     c34:	2200      	movs	r2, #0
     c36:	701a      	strb	r2, [r3, #0]
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     c38:	e16a      	b.n	f10 <am_multiboot_uart_isr_handler+0x300>
    {
        if ( uart_RX_head == MAX_BUFFER )
     c3a:	4ba5      	ldr	r3, [pc, #660]	; (ed0 <am_multiboot_uart_isr_handler+0x2c0>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
     c42:	d10c      	bne.n	c5e <am_multiboot_uart_isr_handler+0x4e>
        {
            // We should never reach here!
            RX_FIFO_FULL = 1;
     c44:	4ba3      	ldr	r3, [pc, #652]	; (ed4 <am_multiboot_uart_isr_handler+0x2c4>)
     c46:	2201      	movs	r2, #1
     c48:	701a      	strb	r2, [r3, #0]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     c4a:	4ba3      	ldr	r3, [pc, #652]	; (ed8 <am_multiboot_uart_isr_handler+0x2c8>)
     c4c:	60bb      	str	r3, [r7, #8]
            //
            // Bad packet; Send back an error.
            //
            tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     c4e:	68bb      	ldr	r3, [r7, #8]
     c50:	2205      	movs	r2, #5
     c52:	601a      	str	r2, [r3, #0]
            flush = 1;
     c54:	2301      	movs	r3, #1
     c56:	77bb      	strb	r3, [r7, #30]
            send_byte_cnt = 4;
     c58:	2304      	movs	r3, #4
     c5a:	77fb      	strb	r3, [r7, #31]
            break;
     c5c:	e165      	b.n	f2a <am_multiboot_uart_isr_handler+0x31a>
        }
        rxData = AM_REGn(UART, ui32Module, DR);
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     c64:	331c      	adds	r3, #28
     c66:	031b      	lsls	r3, r3, #12
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	74fb      	strb	r3, [r7, #19]
        uart_RX_buffer[uart_RX_head++] = rxData;
     c6c:	4b98      	ldr	r3, [pc, #608]	; (ed0 <am_multiboot_uart_isr_handler+0x2c0>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	1c5a      	adds	r2, r3, #1
     c72:	4997      	ldr	r1, [pc, #604]	; (ed0 <am_multiboot_uart_isr_handler+0x2c0>)
     c74:	600a      	str	r2, [r1, #0]
     c76:	4999      	ldr	r1, [pc, #612]	; (edc <am_multiboot_uart_isr_handler+0x2cc>)
     c78:	7cfa      	ldrb	r2, [r7, #19]
     c7a:	54ca      	strb	r2, [r1, r3]

        uart_RX_cnt++;
     c7c:	4b98      	ldr	r3, [pc, #608]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	3301      	adds	r3, #1
     c82:	4a97      	ldr	r2, [pc, #604]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     c84:	6013      	str	r3, [r2, #0]
        cnt++;
     c86:	69bb      	ldr	r3, [r7, #24]
     c88:	3301      	adds	r3, #1
     c8a:	61bb      	str	r3, [r7, #24]

        if ( uart_RX_cnt == 4 ) // cmd received, wait for parameters
     c8c:	4b94      	ldr	r3, [pc, #592]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	2b04      	cmp	r3, #4
     c92:	d13e      	bne.n	d12 <am_multiboot_uart_isr_handler+0x102>
        {
            command = uart_RX_buffer[0];
     c94:	4b91      	ldr	r3, [pc, #580]	; (edc <am_multiboot_uart_isr_handler+0x2cc>)
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	b2db      	uxtb	r3, r3
     c9a:	461a      	mov	r2, r3
     c9c:	4b91      	ldr	r3, [pc, #580]	; (ee4 <am_multiboot_uart_isr_handler+0x2d4>)
     c9e:	601a      	str	r2, [r3, #0]
            switch (command)
     ca0:	4b90      	ldr	r3, [pc, #576]	; (ee4 <am_multiboot_uart_isr_handler+0x2d4>)
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	2b09      	cmp	r3, #9
     ca6:	d82f      	bhi.n	d08 <am_multiboot_uart_isr_handler+0xf8>
     ca8:	a201      	add	r2, pc, #4	; (adr r2, cb0 <am_multiboot_uart_isr_handler+0xa0>)
     caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cae:	bf00      	nop
     cb0:	00000cf1 	.word	0x00000cf1
     cb4:	00000cf9 	.word	0x00000cf9
     cb8:	00000d11 	.word	0x00000d11
     cbc:	00000d11 	.word	0x00000d11
     cc0:	00000ce1 	.word	0x00000ce1
     cc4:	00000cd9 	.word	0x00000cd9
     cc8:	00000ce9 	.word	0x00000ce9
     ccc:	00000d09 	.word	0x00000d09
     cd0:	00000d09 	.word	0x00000d09
     cd4:	00000d01 	.word	0x00000d01
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
#endif
                    break;
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
     cd8:	4b83      	ldr	r3, [pc, #524]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     cda:	220c      	movs	r2, #12
     cdc:	601a      	str	r2, [r3, #0]
                    break;
     cde:	e018      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
                case AM_BOOTLOADER_RESET:
                    packet_cnt = 4;
     ce0:	4b81      	ldr	r3, [pc, #516]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     ce2:	2204      	movs	r2, #4
     ce4:	601a      	str	r2, [r3, #0]
                    break;
     ce6:	e014      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_BL_VERSION_CMD:
                    packet_cnt = 4;
     ce8:	4b7f      	ldr	r3, [pc, #508]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     cea:	2204      	movs	r2, #4
     cec:	601a      	str	r2, [r3, #0]
                    break;
     cee:	e010      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_ACK_CMD:
                    packet_cnt = 4;
     cf0:	4b7d      	ldr	r3, [pc, #500]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     cf2:	2204      	movs	r2, #4
     cf4:	601a      	str	r2, [r3, #0]
                    break;
     cf6:	e00c      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NAK_CMD:
                    packet_cnt = 4;
     cf8:	4b7b      	ldr	r3, [pc, #492]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     cfa:	2204      	movs	r2, #4
     cfc:	601a      	str	r2, [r3, #0]
                    break;
     cfe:	e008      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_RESTART:
                    packet_cnt = 4;
     d00:	4b79      	ldr	r3, [pc, #484]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     d02:	2204      	movs	r2, #4
     d04:	601a      	str	r2, [r3, #0]
                    break;
     d06:	e004      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
                default:
                    // Unknown command
                    packet_cnt = 4;
     d08:	4b77      	ldr	r3, [pc, #476]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     d0a:	2204      	movs	r2, #4
     d0c:	601a      	str	r2, [r3, #0]
                    break;
     d0e:	e000      	b.n	d12 <am_multiboot_uart_isr_handler+0x102>
            {
                case AM_BOOTLOADER_NEW_IMAGE:
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
#endif
                    break;
     d10:	bf00      	nop
                    packet_cnt = 4;
                    break;
            }
        }

        if ( (command == AM_BOOTLOADER_NEW_PACKET) && (uart_RX_cnt == 8) )
     d12:	4b74      	ldr	r3, [pc, #464]	; (ee4 <am_multiboot_uart_isr_handler+0x2d4>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	2b03      	cmp	r3, #3
     d18:	d10c      	bne.n	d34 <am_multiboot_uart_isr_handler+0x124>
     d1a:	4b71      	ldr	r3, [pc, #452]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	2b08      	cmp	r3, #8
     d20:	d108      	bne.n	d34 <am_multiboot_uart_isr_handler+0x124>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[4]);
     d22:	4b72      	ldr	r3, [pc, #456]	; (eec <am_multiboot_uart_isr_handler+0x2dc>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	4a72      	ldr	r2, [pc, #456]	; (ef0 <am_multiboot_uart_isr_handler+0x2e0>)
     d28:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 8;
     d2a:	4b71      	ldr	r3, [pc, #452]	; (ef0 <am_multiboot_uart_isr_handler+0x2e0>)
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	3308      	adds	r3, #8
     d30:	4a6d      	ldr	r2, [pc, #436]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     d32:	6013      	str	r3, [r2, #0]
        }

#ifdef MULTIBOOT_SECURE
        if ( (command == AM_BOOTLOADER_NEW_IMAGE) && (uart_RX_cnt == 20) )
     d34:	4b6b      	ldr	r3, [pc, #428]	; (ee4 <am_multiboot_uart_isr_handler+0x2d4>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	2b02      	cmp	r3, #2
     d3a:	d10c      	bne.n	d56 <am_multiboot_uart_isr_handler+0x146>
     d3c:	4b68      	ldr	r3, [pc, #416]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	2b14      	cmp	r3, #20
     d42:	d108      	bne.n	d56 <am_multiboot_uart_isr_handler+0x146>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[16]);
     d44:	4b6b      	ldr	r3, [pc, #428]	; (ef4 <am_multiboot_uart_isr_handler+0x2e4>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	4a69      	ldr	r2, [pc, #420]	; (ef0 <am_multiboot_uart_isr_handler+0x2e0>)
     d4a:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 20;
     d4c:	4b68      	ldr	r3, [pc, #416]	; (ef0 <am_multiboot_uart_isr_handler+0x2e0>)
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	3314      	adds	r3, #20
     d52:	4a65      	ldr	r2, [pc, #404]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     d54:	6013      	str	r3, [r2, #0]
        }
#endif

        if ( (uart_RX_cnt >= 4) && (uart_RX_cnt == packet_cnt) )
     d56:	4b62      	ldr	r3, [pc, #392]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	2b03      	cmp	r3, #3
     d5c:	f240 80d8 	bls.w	f10 <am_multiboot_uart_isr_handler+0x300>
     d60:	4b5f      	ldr	r3, [pc, #380]	; (ee0 <am_multiboot_uart_isr_handler+0x2d0>)
     d62:	681a      	ldr	r2, [r3, #0]
     d64:	4b60      	ldr	r3, [pc, #384]	; (ee8 <am_multiboot_uart_isr_handler+0x2d8>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	429a      	cmp	r2, r3
     d6a:	f040 80d1 	bne.w	f10 <am_multiboot_uart_isr_handler+0x300>
        {
            rx_pui32Packet = (uint32_t *) uart_RX_buffer;
     d6e:	4b5b      	ldr	r3, [pc, #364]	; (edc <am_multiboot_uart_isr_handler+0x2cc>)
     d70:	60fb      	str	r3, [r7, #12]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     d72:	4b59      	ldr	r3, [pc, #356]	; (ed8 <am_multiboot_uart_isr_handler+0x2c8>)
     d74:	60bb      	str	r3, [r7, #8]

            switch (rx_pui32Packet[0])
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	681b      	ldr	r3, [r3, #0]
     d7a:	2b09      	cmp	r3, #9
     d7c:	f200 809b 	bhi.w	eb6 <am_multiboot_uart_isr_handler+0x2a6>
     d80:	a201      	add	r2, pc, #4	; (adr r2, d88 <am_multiboot_uart_isr_handler+0x178>)
     d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d86:	bf00      	nop
     d88:	00000ec7 	.word	0x00000ec7
     d8c:	00000ec7 	.word	0x00000ec7
     d90:	00000db1 	.word	0x00000db1
     d94:	00000e03 	.word	0x00000e03
     d98:	00000e8b 	.word	0x00000e8b
     d9c:	00000de3 	.word	0x00000de3
     da0:	00000e9f 	.word	0x00000e9f
     da4:	00000eb7 	.word	0x00000eb7
     da8:	00000eb7 	.word	0x00000eb7
     dac:	00000e99 	.word	0x00000e99
                case AM_BOOTLOADER_NEW_IMAGE:
                    //
                    // Parse the image packet, and store the result to the global
                    // image structure.
                    //
                    g_bUartImageValid = image_start_packet_read(&g_sImage,
     db0:	494a      	ldr	r1, [pc, #296]	; (edc <am_multiboot_uart_isr_handler+0x2cc>)
     db2:	4851      	ldr	r0, [pc, #324]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     db4:	f7ff fd50 	bl	858 <image_start_packet_read>
     db8:	4603      	mov	r3, r0
     dba:	461a      	mov	r2, r3
     dbc:	4b4f      	ldr	r3, [pc, #316]	; (efc <am_multiboot_uart_isr_handler+0x2ec>)
     dbe:	701a      	strb	r2, [r3, #0]

                    //
                    // Make sure the image packet had reasonable contents. If it
                    // didn't, we need to let the host know.
                    //
                    if ( g_bUartImageValid )
     dc0:	4b4e      	ldr	r3, [pc, #312]	; (efc <am_multiboot_uart_isr_handler+0x2ec>)
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	b2db      	uxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d003      	beq.n	dd2 <am_multiboot_uart_isr_handler+0x1c2>
                    {
                        //
                        // Good image; Send back a "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     dca:	68bb      	ldr	r3, [r7, #8]
     dcc:	2202      	movs	r2, #2
     dce:	601a      	str	r2, [r3, #0]
     dd0:	e002      	b.n	dd8 <am_multiboot_uart_isr_handler+0x1c8>
                    else
                    {
                        //
                        // Bad image; Send back an error.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     dd2:	68bb      	ldr	r3, [r7, #8]
     dd4:	2205      	movs	r2, #5
     dd6:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     dd8:	2301      	movs	r3, #1
     dda:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     ddc:	2304      	movs	r3, #4
     dde:	77fb      	strb	r3, [r7, #31]
                    break;
     de0:	e072      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    //
                    // Set the override GPIO settings based on the packet
                    // information.
                    //
                    g_sImage.ui32OverrideGPIO = rx_pui32Packet[1];
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	685b      	ldr	r3, [r3, #4]
     de6:	4a44      	ldr	r2, [pc, #272]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     de8:	60d3      	str	r3, [r2, #12]
                    g_sImage.ui32OverridePolarity = rx_pui32Packet[2];
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	689b      	ldr	r3, [r3, #8]
     dee:	4a42      	ldr	r2, [pc, #264]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     df0:	6113      	str	r3, [r2, #16]

                    //
                    // Send back a "READY" packet.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     df2:	68bb      	ldr	r3, [r7, #8]
     df4:	2202      	movs	r2, #2
     df6:	601a      	str	r2, [r3, #0]
                    flush = 1;
     df8:	2301      	movs	r3, #1
     dfa:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     dfc:	2304      	movs	r3, #4
     dfe:	77fb      	strb	r3, [r7, #31]
                    break;
     e00:	e062      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>

                case AM_BOOTLOADER_NEW_PACKET:
                    //
                    // Only take new packets if our image structure is valid.
                    //
                    if ( !g_bUartImageValid )
     e02:	4b3e      	ldr	r3, [pc, #248]	; (efc <am_multiboot_uart_isr_handler+0x2ec>)
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	b2db      	uxtb	r3, r3
     e08:	f083 0301 	eor.w	r3, r3, #1
     e0c:	b2db      	uxtb	r3, r3
     e0e:	2b00      	cmp	r3, #0
     e10:	d003      	beq.n	e1a <am_multiboot_uart_isr_handler+0x20a>
                    {
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     e12:	68bb      	ldr	r3, [r7, #8]
     e14:	2205      	movs	r2, #5
     e16:	601a      	str	r2, [r3, #0]
                        break;
     e18:	e056      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     e1a:	4a39      	ldr	r2, [pc, #228]	; (f00 <am_multiboot_uart_isr_handler+0x2f0>)
                        *((uint32_t *)(uart_RX_buffer + 4)));
     e1c:	4b33      	ldr	r3, [pc, #204]	; (eec <am_multiboot_uart_isr_handler+0x2dc>)
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	4619      	mov	r1, r3
     e22:	4610      	mov	r0, r2
     e24:	f7ff fda0 	bl	968 <image_data_packet_read>
                        *((uint32_t *)(uart_RX_buffer + 4)));

                    //
                    // If this packet completed the image...
                    //
                    if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
     e28:	4b33      	ldr	r3, [pc, #204]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     e2a:	685a      	ldr	r2, [r3, #4]
     e2c:	4b35      	ldr	r3, [pc, #212]	; (f04 <am_multiboot_uart_isr_handler+0x2f4>)
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	429a      	cmp	r2, r3
     e32:	d122      	bne.n	e7a <am_multiboot_uart_isr_handler+0x26a>
                    {
#ifdef MULTIBOOT_SECURE
                        if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
     e34:	4b30      	ldr	r3, [pc, #192]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     e36:	689a      	ldr	r2, [r3, #8]
     e38:	4b33      	ldr	r3, [pc, #204]	; (f08 <am_multiboot_uart_isr_handler+0x2f8>)
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	429a      	cmp	r2, r3
     e3e:	d105      	bne.n	e4c <am_multiboot_uart_isr_handler+0x23c>
     e40:	4832      	ldr	r0, [pc, #200]	; (f0c <am_multiboot_uart_isr_handler+0x2fc>)
     e42:	f000 fbe9 	bl	1618 <multiboot_secure_verify>
     e46:	4603      	mov	r3, r0
     e48:	2b00      	cmp	r3, #0
     e4a:	d003      	beq.n	e54 <am_multiboot_uart_isr_handler+0x244>
#else
                        if ( g_ui32CRC != g_sImage.ui32CRC )
#endif
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
     e4c:	68bb      	ldr	r3, [r7, #8]
     e4e:	2204      	movs	r2, #4
     e50:	601a      	str	r2, [r3, #0]
     e52:	e015      	b.n	e80 <am_multiboot_uart_isr_handler+0x270>
                        }
                        else
                        {
                            // Protect (and optionally write if stored in SRAM)
                            // image in flash now as it has been validated now
                            program_image(g_sImage.bEncrypted);
     e54:	4b28      	ldr	r3, [pc, #160]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     e56:	69db      	ldr	r3, [r3, #28]
     e58:	4618      	mov	r0, r3
     e5a:	f7ff fca9 	bl	7b0 <program_image>
                            // Validate the flash contents of a boot image to make
                            // sure it's safe to run
                            if ( am_bootloader_flash_check(&g_sImage) )
     e5e:	4826      	ldr	r0, [pc, #152]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     e60:	f7ff f98e 	bl	180 <am_bootloader_flash_check>
     e64:	4603      	mov	r3, r0
     e66:	2b00      	cmp	r3, #0
     e68:	d003      	beq.n	e72 <am_multiboot_uart_isr_handler+0x262>
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	2203      	movs	r2, #3
     e6e:	601a      	str	r2, [r3, #0]
     e70:	e006      	b.n	e80 <am_multiboot_uart_isr_handler+0x270>
                            }
                            else
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	2205      	movs	r2, #5
     e76:	601a      	str	r2, [r3, #0]
     e78:	e002      	b.n	e80 <am_multiboot_uart_isr_handler+0x270>
                    {
                        //
                        // If this wasn't the end of the image, just send back a
                        // "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     e7a:	68bb      	ldr	r3, [r7, #8]
     e7c:	2202      	movs	r2, #2
     e7e:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     e80:	2301      	movs	r3, #1
     e82:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     e84:	2304      	movs	r3, #4
     e86:	77fb      	strb	r3, [r7, #31]

                    break;
     e88:	e01e      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>
                    if ( USE_FLAG_PAGE )
                    {
                        //
                        // Write the flag page.
                        //
                        am_bootloader_flag_page_update(&g_sImage,
     e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     e8e:	481a      	ldr	r0, [pc, #104]	; (ef8 <am_multiboot_uart_isr_handler+0x2e8>)
     e90:	f7ff fb66 	bl	560 <am_bootloader_flag_page_update>
                            (uint32_t *)FLAG_PAGE_LOCATION);
                    }
#ifdef MULTIBOOT_SECURE
                    wipe_sram();
     e94:	f7ff fc68 	bl	768 <wipe_sram>

                case AM_BOOTLOADER_RESTART:
                    //
                    // Perform a software reset.
                    //
                    am_hal_reset_poi();
     e98:	f000 fe86 	bl	1ba8 <am_hal_reset_poi>

                    //
                    // Wait for the reset to take effect.
                    //
                    while (1);
     e9c:	e7fe      	b.n	e9c <am_multiboot_uart_isr_handler+0x28c>

                case AM_BOOTLOADER_BL_VERSION_CMD:
                    //
                    // Respond with the version number.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
     e9e:	68bb      	ldr	r3, [r7, #8]
     ea0:	2206      	movs	r2, #6
     ea2:	601a      	str	r2, [r3, #0]
                    tx_pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
     ea4:	68bb      	ldr	r3, [r7, #8]
     ea6:	3304      	adds	r3, #4
     ea8:	2201      	movs	r2, #1
     eaa:	601a      	str	r2, [r3, #0]

                    flush = 1;
     eac:	2301      	movs	r3, #1
     eae:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 8;
     eb0:	2308      	movs	r3, #8
     eb2:	77fb      	strb	r3, [r7, #31]
                    break;
     eb4:	e008      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>
                case AM_BOOTLOADER_NAK_CMD:
                    break;

                default:
                    // Error
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     eb6:	68bb      	ldr	r3, [r7, #8]
     eb8:	2205      	movs	r2, #5
     eba:	601a      	str	r2, [r3, #0]
                    flush = 1;
     ebc:	2301      	movs	r3, #1
     ebe:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     ec0:	2304      	movs	r3, #4
     ec2:	77fb      	strb	r3, [r7, #31]
                    break;
     ec4:	e000      	b.n	ec8 <am_multiboot_uart_isr_handler+0x2b8>
                    send_byte_cnt = 8;
                    break;

                case AM_BOOTLOADER_ACK_CMD:
                case AM_BOOTLOADER_NAK_CMD:
                    break;
     ec6:	bf00      	nop
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
                    flush = 1;
                    send_byte_cnt = 4;
                    break;
            }
            break;
     ec8:	e02f      	b.n	f2a <am_multiboot_uart_isr_handler+0x31a>
     eca:	bf00      	nop
     ecc:	10001119 	.word	0x10001119
     ed0:	1000110c 	.word	0x1000110c
     ed4:	10001130 	.word	0x10001130
     ed8:	10001110 	.word	0x10001110
     edc:	10001134 	.word	0x10001134
     ee0:	10001104 	.word	0x10001104
     ee4:	10001124 	.word	0x10001124
     ee8:	10001108 	.word	0x10001108
     eec:	10001138 	.word	0x10001138
     ef0:	1000133c 	.word	0x1000133c
     ef4:	10001144 	.word	0x10001144
     ef8:	10001000 	.word	0x10001000
     efc:	100010d4 	.word	0x100010d4
     f00:	1000113c 	.word	0x1000113c
     f04:	100010c8 	.word	0x100010c8
     f08:	100010cc 	.word	0x100010cc
     f0c:	10001008 	.word	0x10001008
    //


    RX_FIFO_EMPTY = 0;
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     f16:	331c      	adds	r3, #28
     f18:	031b      	lsls	r3, r3, #12
     f1a:	3318      	adds	r3, #24
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	f003 0310 	and.w	r3, r3, #16
     f22:	091b      	lsrs	r3, r3, #4
     f24:	2b00      	cmp	r3, #0
     f26:	f43f ae88 	beq.w	c3a <am_multiboot_uart_isr_handler+0x2a>
            }
            break;
        }
    }

    if ( flush )
     f2a:	7fbb      	ldrb	r3, [r7, #30]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d030      	beq.n	f92 <am_multiboot_uart_isr_handler+0x382>
    {
        uart_TX_tail = 0;
     f30:	4b1a      	ldr	r3, [pc, #104]	; (f9c <am_multiboot_uart_isr_handler+0x38c>)
     f32:	2200      	movs	r2, #0
     f34:	701a      	strb	r2, [r3, #0]

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     f36:	2300      	movs	r3, #0
     f38:	61bb      	str	r3, [r7, #24]
     f3a:	e00f      	b.n	f5c <am_multiboot_uart_isr_handler+0x34c>
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
     f3c:	4b17      	ldr	r3, [pc, #92]	; (f9c <am_multiboot_uart_isr_handler+0x38c>)
     f3e:	781b      	ldrb	r3, [r3, #0]
     f40:	1c5a      	adds	r2, r3, #1
     f42:	b2d1      	uxtb	r1, r2
     f44:	4a15      	ldr	r2, [pc, #84]	; (f9c <am_multiboot_uart_isr_handler+0x38c>)
     f46:	7011      	strb	r1, [r2, #0]
     f48:	461a      	mov	r2, r3
     f4a:	4b15      	ldr	r3, [pc, #84]	; (fa0 <am_multiboot_uart_isr_handler+0x390>)
     f4c:	5c9b      	ldrb	r3, [r3, r2]
     f4e:	4619      	mov	r1, r3
     f50:	6878      	ldr	r0, [r7, #4]
     f52:	f7ff fddd 	bl	b10 <ser_out>

    if ( flush )
    {
        uart_TX_tail = 0;

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     f56:	69bb      	ldr	r3, [r7, #24]
     f58:	3301      	adds	r3, #1
     f5a:	61bb      	str	r3, [r7, #24]
     f5c:	7ffa      	ldrb	r2, [r7, #31]
     f5e:	69bb      	ldr	r3, [r7, #24]
     f60:	429a      	cmp	r2, r3
     f62:	d8eb      	bhi.n	f3c <am_multiboot_uart_isr_handler+0x32c>
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
        }
        command = 0;
     f64:	4b0f      	ldr	r3, [pc, #60]	; (fa4 <am_multiboot_uart_isr_handler+0x394>)
     f66:	2200      	movs	r2, #0
     f68:	601a      	str	r2, [r3, #0]
        uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	4a0e      	ldr	r2, [pc, #56]	; (fa8 <am_multiboot_uart_isr_handler+0x398>)
     f6e:	6013      	str	r3, [r2, #0]
     f70:	4a0e      	ldr	r2, [pc, #56]	; (fac <am_multiboot_uart_isr_handler+0x39c>)
     f72:	6013      	str	r3, [r2, #0]
     f74:	4a0e      	ldr	r2, [pc, #56]	; (fb0 <am_multiboot_uart_isr_handler+0x3a0>)
     f76:	6013      	str	r3, [r2, #0]
        RX_FIFO_FULL = 0;  // check serial FIFO operation
     f78:	4b0e      	ldr	r3, [pc, #56]	; (fb4 <am_multiboot_uart_isr_handler+0x3a4>)
     f7a:	2200      	movs	r2, #0
     f7c:	701a      	strb	r2, [r3, #0]
        RX_FIFO_EMPTY = 1;
     f7e:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <am_multiboot_uart_isr_handler+0x3a8>)
     f80:	2201      	movs	r2, #1
     f82:	701a      	strb	r2, [r3, #0]
        flush = 0;
     f84:	2300      	movs	r3, #0
     f86:	77bb      	strb	r3, [r7, #30]
        send_byte_cnt = 0;
     f88:	2300      	movs	r3, #0
     f8a:	77fb      	strb	r3, [r7, #31]
        packet_cnt = 0xff;
     f8c:	4b0b      	ldr	r3, [pc, #44]	; (fbc <am_multiboot_uart_isr_handler+0x3ac>)
     f8e:	22ff      	movs	r2, #255	; 0xff
     f90:	601a      	str	r2, [r3, #0]
    }

}
     f92:	bf00      	nop
     f94:	3720      	adds	r7, #32
     f96:	46bd      	mov	sp, r7
     f98:	bd80      	pop	{r7, pc}
     f9a:	bf00      	nop
     f9c:	10001340 	.word	0x10001340
     fa0:	10001110 	.word	0x10001110
     fa4:	10001124 	.word	0x10001124
     fa8:	10001104 	.word	0x10001104
     fac:	1000111c 	.word	0x1000111c
     fb0:	1000110c 	.word	0x1000110c
     fb4:	10001130 	.word	0x10001130
     fb8:	10001119 	.word	0x10001119
     fbc:	10001108 	.word	0x10001108

00000fc0 <am_multiboot_uart_detect_baudrate>:
//!
//! @return the computed baud rate.
//
//*****************************************************************************
uint32_t am_multiboot_uart_detect_baudrate(uint32_t ui32RxPin)
{
     fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     fc4:	b087      	sub	sp, #28
     fc6:	af00      	add	r7, sp, #0
     fc8:	6078      	str	r0, [r7, #4]
    // We need to hit this register as early as possible, so we are skipping
    // all of the normal logic that checks to make sure we are responding to
    // the right GPIO. In the interest of time, we will just assume that this
    // interrupt is coming from the UART RX pin.
    //
    ui32Start = am_hal_systick_count();
     fca:	f000 feb9 	bl	1d40 <am_hal_systick_count>
     fce:	6178      	str	r0, [r7, #20]
    // Wait for exactly 9 edges on the UART RX pin. This corresponds to the
    // number of edges in the byte 0x55 after the start bit. Using a simple
    // polling approach here gives us the best possible chance to catch every
    // single edge.
    //
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     fd0:	bf00      	nop
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	08db      	lsrs	r3, r3, #3
     fd6:	f003 0204 	and.w	r2, r3, #4
     fda:	4b6c      	ldr	r3, [pc, #432]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
     fdc:	4413      	add	r3, r2
     fde:	681a      	ldr	r2, [r3, #0]
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	f003 031f 	and.w	r3, r3, #31
     fe6:	fa22 f303 	lsr.w	r3, r2, r3
     fea:	f003 0301 	and.w	r3, r3, #1
     fee:	2b00      	cmp	r3, #0
     ff0:	d0ef      	beq.n	fd2 <am_multiboot_uart_detect_baudrate+0x12>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     ff2:	bf00      	nop
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	08db      	lsrs	r3, r3, #3
     ff8:	f003 0204 	and.w	r2, r3, #4
     ffc:	4b63      	ldr	r3, [pc, #396]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
     ffe:	4413      	add	r3, r2
    1000:	681a      	ldr	r2, [r3, #0]
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	f003 031f 	and.w	r3, r3, #31
    1008:	fa22 f303 	lsr.w	r3, r2, r3
    100c:	f003 0301 	and.w	r3, r3, #1
    1010:	2b00      	cmp	r3, #0
    1012:	d1ef      	bne.n	ff4 <am_multiboot_uart_detect_baudrate+0x34>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1014:	bf00      	nop
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	08db      	lsrs	r3, r3, #3
    101a:	f003 0204 	and.w	r2, r3, #4
    101e:	4b5b      	ldr	r3, [pc, #364]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    1020:	4413      	add	r3, r2
    1022:	681a      	ldr	r2, [r3, #0]
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	f003 031f 	and.w	r3, r3, #31
    102a:	fa22 f303 	lsr.w	r3, r2, r3
    102e:	f003 0301 	and.w	r3, r3, #1
    1032:	2b00      	cmp	r3, #0
    1034:	d0ef      	beq.n	1016 <am_multiboot_uart_detect_baudrate+0x56>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1036:	bf00      	nop
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	08db      	lsrs	r3, r3, #3
    103c:	f003 0204 	and.w	r2, r3, #4
    1040:	4b52      	ldr	r3, [pc, #328]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    1042:	4413      	add	r3, r2
    1044:	681a      	ldr	r2, [r3, #0]
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	f003 031f 	and.w	r3, r3, #31
    104c:	fa22 f303 	lsr.w	r3, r2, r3
    1050:	f003 0301 	and.w	r3, r3, #1
    1054:	2b00      	cmp	r3, #0
    1056:	d1ef      	bne.n	1038 <am_multiboot_uart_detect_baudrate+0x78>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1058:	bf00      	nop
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	08db      	lsrs	r3, r3, #3
    105e:	f003 0204 	and.w	r2, r3, #4
    1062:	4b4a      	ldr	r3, [pc, #296]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    1064:	4413      	add	r3, r2
    1066:	681a      	ldr	r2, [r3, #0]
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	f003 031f 	and.w	r3, r3, #31
    106e:	fa22 f303 	lsr.w	r3, r2, r3
    1072:	f003 0301 	and.w	r3, r3, #1
    1076:	2b00      	cmp	r3, #0
    1078:	d0ef      	beq.n	105a <am_multiboot_uart_detect_baudrate+0x9a>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    107a:	bf00      	nop
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	08db      	lsrs	r3, r3, #3
    1080:	f003 0204 	and.w	r2, r3, #4
    1084:	4b41      	ldr	r3, [pc, #260]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    1086:	4413      	add	r3, r2
    1088:	681a      	ldr	r2, [r3, #0]
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	f003 031f 	and.w	r3, r3, #31
    1090:	fa22 f303 	lsr.w	r3, r2, r3
    1094:	f003 0301 	and.w	r3, r3, #1
    1098:	2b00      	cmp	r3, #0
    109a:	d1ef      	bne.n	107c <am_multiboot_uart_detect_baudrate+0xbc>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    109c:	bf00      	nop
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	08db      	lsrs	r3, r3, #3
    10a2:	f003 0204 	and.w	r2, r3, #4
    10a6:	4b39      	ldr	r3, [pc, #228]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    10a8:	4413      	add	r3, r2
    10aa:	681a      	ldr	r2, [r3, #0]
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	f003 031f 	and.w	r3, r3, #31
    10b2:	fa22 f303 	lsr.w	r3, r2, r3
    10b6:	f003 0301 	and.w	r3, r3, #1
    10ba:	2b00      	cmp	r3, #0
    10bc:	d0ef      	beq.n	109e <am_multiboot_uart_detect_baudrate+0xde>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    10be:	bf00      	nop
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	08db      	lsrs	r3, r3, #3
    10c4:	f003 0204 	and.w	r2, r3, #4
    10c8:	4b30      	ldr	r3, [pc, #192]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    10ca:	4413      	add	r3, r2
    10cc:	681a      	ldr	r2, [r3, #0]
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	f003 031f 	and.w	r3, r3, #31
    10d4:	fa22 f303 	lsr.w	r3, r2, r3
    10d8:	f003 0301 	and.w	r3, r3, #1
    10dc:	2b00      	cmp	r3, #0
    10de:	d1ef      	bne.n	10c0 <am_multiboot_uart_detect_baudrate+0x100>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    10e0:	bf00      	nop
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	08db      	lsrs	r3, r3, #3
    10e6:	f003 0204 	and.w	r2, r3, #4
    10ea:	4b28      	ldr	r3, [pc, #160]	; (118c <am_multiboot_uart_detect_baudrate+0x1cc>)
    10ec:	4413      	add	r3, r2
    10ee:	681a      	ldr	r2, [r3, #0]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	f003 031f 	and.w	r3, r3, #31
    10f6:	fa22 f303 	lsr.w	r3, r2, r3
    10fa:	f003 0301 	and.w	r3, r3, #1
    10fe:	2b00      	cmp	r3, #0
    1100:	d0ef      	beq.n	10e2 <am_multiboot_uart_detect_baudrate+0x122>

    //
    // Record the "end" time.
    //
    ui32End = am_hal_systick_count();
    1102:	f000 fe1d 	bl	1d40 <am_hal_systick_count>
    1106:	6138      	str	r0, [r7, #16]
    am_hal_systick_stop();
    1108:	f000 fe0c 	bl	1d24 <am_hal_systick_stop>
    // At this point, the timing-critical portion of the interrupt handler is
    // complete, and we are free to clean up our interrupt status. We only
    // intend to perform the automatic baud-rate detection once, so we will go
    // ahead and disable the interrupt on the UART RX pin now.
    //
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(ui32RxPin));
    110c:	f04f 0201 	mov.w	r2, #1
    1110:	f04f 0300 	mov.w	r3, #0
    1114:	6879      	ldr	r1, [r7, #4]
    1116:	f1a1 0620 	sub.w	r6, r1, #32
    111a:	f1c1 0020 	rsb	r0, r1, #32
    111e:	fa03 f901 	lsl.w	r9, r3, r1
    1122:	fa02 f606 	lsl.w	r6, r2, r6
    1126:	ea49 0906 	orr.w	r9, r9, r6
    112a:	fa22 f000 	lsr.w	r0, r2, r0
    112e:	ea49 0900 	orr.w	r9, r9, r0
    1132:	fa02 f801 	lsl.w	r8, r2, r1
    1136:	4640      	mov	r0, r8
    1138:	4649      	mov	r1, r9
    113a:	f000 fb71 	bl	1820 <am_hal_gpio_int_disable>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(ui32RxPin));
    113e:	f04f 0201 	mov.w	r2, #1
    1142:	f04f 0300 	mov.w	r3, #0
    1146:	6879      	ldr	r1, [r7, #4]
    1148:	f1a1 0620 	sub.w	r6, r1, #32
    114c:	f1c1 0020 	rsb	r0, r1, #32
    1150:	fa03 f501 	lsl.w	r5, r3, r1
    1154:	fa02 f606 	lsl.w	r6, r2, r6
    1158:	4335      	orrs	r5, r6
    115a:	fa22 f000 	lsr.w	r0, r2, r0
    115e:	4305      	orrs	r5, r0
    1160:	fa02 f401 	lsl.w	r4, r2, r1
    1164:	4620      	mov	r0, r4
    1166:	4629      	mov	r1, r5
    1168:	f000 fb76 	bl	1858 <am_hal_gpio_int_clear>
    // Check to see how long those nine edges took to arrive. This should
    // correspond to exactly nine bit-times of UART traffic from the host. From
    // there, we can use the speed of the processor (which is known) to
    // calculate the host's baud rate.
    //
    ui32Counts = ui32Start - ui32End;
    116c:	697a      	ldr	r2, [r7, #20]
    116e:	693b      	ldr	r3, [r7, #16]
    1170:	1ad3      	subs	r3, r2, r3
    1172:	60fb      	str	r3, [r7, #12]
    ui32BaudRate = AM_HAL_CLKGEN_FREQ_MAX_HZ * 9 / ui32Counts;
    1174:	4a06      	ldr	r2, [pc, #24]	; (1190 <am_multiboot_uart_detect_baudrate+0x1d0>)
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	fbb2 f3f3 	udiv	r3, r2, r3
    117c:	60bb      	str	r3, [r7, #8]
    return ui32BaudRate;
    117e:	68bb      	ldr	r3, [r7, #8]
}
    1180:	4618      	mov	r0, r3
    1182:	371c      	adds	r7, #28
    1184:	46bd      	mov	sp, r7
    1186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    118a:	bf00      	nop
    118c:	40010080 	.word	0x40010080
    1190:	19bfcc00 	.word	0x19bfcc00

00001194 <am_gpio_isr>:
// Setting up a GPIO ISR for the UART autobaud feature.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    1194:	b580      	push	{r7, lr}
    1196:	b082      	sub	sp, #8
    1198:	af00      	add	r7, sp, #0
    uint32_t ui32BaudRate;

    ui32BaudRate = am_multiboot_uart_detect_baudrate(AM_BSP_GPIO_BOOTLOADER_UART_RX);
    119a:	2017      	movs	r0, #23
    119c:	f7ff ff10 	bl	fc0 <am_multiboot_uart_detect_baudrate>
    11a0:	6078      	str	r0, [r7, #4]

    //
    // Now that we have a baud rate, we can configure our UART.
    //
    am_multiboot_setup_serial(AM_BSP_UART_BOOTLOADER_INST, ui32BaudRate);
    11a2:	6879      	ldr	r1, [r7, #4]
    11a4:	2000      	movs	r0, #0
    11a6:	f7ff fcd5 	bl	b54 <am_multiboot_setup_serial>
    //
    // Send a '0x55' to give the boot host some indication that we have the
    // correct baud rate and to let it know that our UART is ready for further
    // traffic.
    //
    am_hal_uart_char_transmit_polled(AM_BSP_UART_BOOTLOADER_INST, 0x55);
    11aa:	2155      	movs	r1, #85	; 0x55
    11ac:	2000      	movs	r0, #0
    11ae:	f000 fe73 	bl	1e98 <am_hal_uart_char_transmit_polled>
    g_bUartConfigured = true;
    11b2:	4b03      	ldr	r3, [pc, #12]	; (11c0 <am_gpio_isr+0x2c>)
    11b4:	2201      	movs	r2, #1
    11b6:	701a      	strb	r2, [r3, #0]
}
    11b8:	bf00      	nop
    11ba:	3708      	adds	r7, #8
    11bc:	46bd      	mov	sp, r7
    11be:	bd80      	pop	{r7, pc}
    11c0:	100010d5 	.word	0x100010d5

000011c4 <am_uart_isr>:
#if (AM_BSP_UART_BOOTLOADER_INST == 0)
am_uart_isr(void)
#elif (AM_BSP_UART_BOOTLOADER_INST == 1)
am_uart1_isr(void)
#endif
{
    11c4:	b580      	push	{r7, lr}
    11c6:	af00      	add	r7, sp, #0
    am_multiboot_uart_isr_handler(AM_BSP_UART_BOOTLOADER_INST);
    11c8:	2000      	movs	r0, #0
    11ca:	f7ff fd21 	bl	c10 <am_multiboot_uart_isr_handler>
}
    11ce:	bf00      	nop
    11d0:	bd80      	pop	{r7, pc}
    11d2:	bf00      	nop

000011d4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b088      	sub	sp, #32
    11d8:	af00      	add	r7, sp, #0
    am_bootloader_image_t *pBootImage;
    bool bOverride = false;
    11da:	2300      	movs	r3, #0
    11dc:	74fb      	strb	r3, [r7, #19]
    bool bBootFromFlash = false;
    11de:	2300      	movs	r3, #0
    11e0:	77fb      	strb	r3, [r7, #31]
    //
    am_hal_gpio_out_bit_set(MULTIBOOT_IOS_INTERRUPT_PIN);
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_OUTPUT);
#endif

    bBootFromFlash = am_multiboot_check_boot_from_flash(&bOverride, &pBootImage);
    11e2:	f107 0214 	add.w	r2, r7, #20
    11e6:	f107 0313 	add.w	r3, r7, #19
    11ea:	4611      	mov	r1, r2
    11ec:	4618      	mov	r0, r3
    11ee:	f7ff fc3f 	bl	a70 <am_multiboot_check_boot_from_flash>
    11f2:	4603      	mov	r3, r0
    11f4:	77fb      	strb	r3, [r7, #31]
    if (!bOverride)
    11f6:	7cfb      	ldrb	r3, [r7, #19]
    11f8:	f083 0301 	eor.w	r3, r3, #1
    11fc:	b2db      	uxtb	r3, r3
    11fe:	2b00      	cmp	r3, #0
    1200:	d006      	beq.n	1210 <main+0x3c>
    {
        if (bBootFromFlash)
    1202:	7ffb      	ldrb	r3, [r7, #31]
    1204:	2b00      	cmp	r3, #0
    1206:	d003      	beq.n	1210 <main+0x3c>
            //
            // If everything looks good, disable the interrupt pin and run.
            //
            am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
#endif
            am_bootloader_image_run(pBootImage);
    1208:	697b      	ldr	r3, [r7, #20]
    120a:	4618      	mov	r0, r3
    120c:	f7ff fa3e 	bl	68c <am_bootloader_image_run>
    }
    //
    // If we get here, we're going to try to download a new image from a host
    // processor. Speed up the clocks and start turning on peripherals.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1210:	2000      	movs	r0, #0
    1212:	f000 fa89 	bl	1728 <am_hal_clkgen_sysclk_select>
    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    1216:	f000 fa75 	bl	1704 <am_bsp_low_power_init>

    //
    // Provide temp buffer for multiboot to operate on
    //
    am_multiboot_init(sramTempBuf, sizeof(sramTempBuf));
    121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    121e:	4859      	ldr	r0, [pc, #356]	; (1384 <main+0x1b0>)
    1220:	f7ff fafe 	bl	820 <am_multiboot_init>
#ifdef AM_MULTIBOOT_SUPPORT_UART
#ifdef MULTIBOOT_DETECT_BAUDRATE
    //
    // Re-Start systick to measure time for autobaud and for the IOS timeout.
    //
    am_hal_systick_stop();
    1224:	f000 fd7e 	bl	1d24 <am_hal_systick_stop>
    am_hal_systick_load(0x00FFFFFF);
    1228:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    122c:	f000 fd82 	bl	1d34 <am_hal_systick_load>
    am_hal_systick_start();
    1230:	f000 fd70 	bl	1d14 <am_hal_systick_start>

    //
    // Configure our RX pin as a GPIO input with a falling edge interrupt.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_INPUT);
    1234:	f3ef 8310 	mrs	r3, PRIMASK
    1238:	60fb      	str	r3, [r7, #12]
    123a:	b672      	cpsid	i
    123c:	4b52      	ldr	r3, [pc, #328]	; (1388 <main+0x1b4>)
    123e:	2273      	movs	r2, #115	; 0x73
    1240:	601a      	str	r2, [r3, #0]
    1242:	4a52      	ldr	r2, [pc, #328]	; (138c <main+0x1b8>)
    1244:	4b51      	ldr	r3, [pc, #324]	; (138c <main+0x1b8>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    124c:	6013      	str	r3, [r2, #0]
    124e:	4a50      	ldr	r2, [pc, #320]	; (1390 <main+0x1bc>)
    1250:	4b4f      	ldr	r3, [pc, #316]	; (1390 <main+0x1bc>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1258:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    125c:	6013      	str	r3, [r2, #0]
    125e:	4a4d      	ldr	r2, [pc, #308]	; (1394 <main+0x1c0>)
    1260:	4b4c      	ldr	r3, [pc, #304]	; (1394 <main+0x1c0>)
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1268:	6013      	str	r3, [r2, #0]
    126a:	4b47      	ldr	r3, [pc, #284]	; (1388 <main+0x1b4>)
    126c:	2200      	movs	r2, #0
    126e:	601a      	str	r2, [r3, #0]
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_FALLING);
    1276:	f3ef 8310 	mrs	r3, PRIMASK
    127a:	60bb      	str	r3, [r7, #8]
    127c:	b672      	cpsid	i
    127e:	4b42      	ldr	r3, [pc, #264]	; (1388 <main+0x1b4>)
    1280:	2273      	movs	r2, #115	; 0x73
    1282:	601a      	str	r2, [r3, #0]
    1284:	4a41      	ldr	r2, [pc, #260]	; (138c <main+0x1b8>)
    1286:	4b41      	ldr	r3, [pc, #260]	; (138c <main+0x1b8>)
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    128e:	6013      	str	r3, [r2, #0]
    1290:	4b3d      	ldr	r3, [pc, #244]	; (1388 <main+0x1b4>)
    1292:	2200      	movs	r2, #0
    1294:	601a      	str	r2, [r3, #0]
    1296:	68bb      	ldr	r3, [r7, #8]
    1298:	f383 8810 	msr	PRIMASK, r3

    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    129c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    12a0:	f04f 0100 	mov.w	r1, #0
    12a4:	f000 fad8 	bl	1858 <am_hal_gpio_int_clear>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    12a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    12ac:	f04f 0100 	mov.w	r1, #0
    12b0:	f000 faa6 	bl	1800 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    12b4:	201c      	movs	r0, #28
    12b6:	f000 fae1 	bl	187c <am_hal_interrupt_enable>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    12ba:	f000 fb2f 	bl	191c <am_hal_interrupt_master_enable>
    while(1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    12be:	f000 fb31 	bl	1924 <am_hal_interrupt_master_disable>
    12c2:	61b8      	str	r0, [r7, #24]

        if (!g_bUartConfigured)
    12c4:	4b34      	ldr	r3, [pc, #208]	; (1398 <main+0x1c4>)
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	b2db      	uxtb	r3, r3
    12ca:	f083 0301 	eor.w	r3, r3, #1
    12ce:	b2db      	uxtb	r3, r3
    12d0:	2b00      	cmp	r3, #0
    12d2:	d006      	beq.n	12e2 <main+0x10e>
        {
            // Wait for Baud rate detection
            am_hal_sysctrl_sleep(false);
    12d4:	2000      	movs	r0, #0
    12d6:	f000 fc83 	bl	1be0 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    12da:	69b8      	ldr	r0, [r7, #24]
    12dc:	f000 fb26 	bl	192c <am_hal_interrupt_master_set>
    12e0:	e7ed      	b.n	12be <main+0xea>
        else
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    12e2:	69b8      	ldr	r0, [r7, #24]
    12e4:	f000 fb22 	bl	192c <am_hal_interrupt_master_set>
            break;
    12e8:	bf00      	nop
        }
    }
    // ISR has already configured the UART by now
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    12ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    12ee:	f04f 0100 	mov.w	r1, #0
    12f2:	f000 fa95 	bl	1820 <am_hal_gpio_int_disable>
    am_hal_interrupt_disable(AM_HAL_INTERRUPT_GPIO);
    12f6:	201c      	movs	r0, #28
    12f8:	f000 fae8 	bl	18cc <am_hal_interrupt_disable>
#endif

    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_TX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_TX);
    12fc:	f3ef 8310 	mrs	r3, PRIMASK
    1300:	607b      	str	r3, [r7, #4]
    1302:	b672      	cpsid	i
    1304:	4b20      	ldr	r3, [pc, #128]	; (1388 <main+0x1b4>)
    1306:	2273      	movs	r2, #115	; 0x73
    1308:	601a      	str	r2, [r3, #0]
    130a:	4a20      	ldr	r2, [pc, #128]	; (138c <main+0x1b8>)
    130c:	4b1f      	ldr	r3, [pc, #124]	; (138c <main+0x1b8>)
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    1314:	6013      	str	r3, [r2, #0]
    1316:	4a1e      	ldr	r2, [pc, #120]	; (1390 <main+0x1bc>)
    1318:	4b1d      	ldr	r3, [pc, #116]	; (1390 <main+0x1bc>)
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    1320:	6013      	str	r3, [r2, #0]
    1322:	4a1c      	ldr	r2, [pc, #112]	; (1394 <main+0x1c0>)
    1324:	4b1b      	ldr	r3, [pc, #108]	; (1394 <main+0x1c0>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    132c:	6013      	str	r3, [r2, #0]
    132e:	4b16      	ldr	r3, [pc, #88]	; (1388 <main+0x1b4>)
    1330:	2200      	movs	r2, #0
    1332:	601a      	str	r2, [r3, #0]
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_RX);
    133a:	f3ef 8310 	mrs	r3, PRIMASK
    133e:	603b      	str	r3, [r7, #0]
    1340:	b672      	cpsid	i
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <main+0x1b4>)
    1344:	2273      	movs	r2, #115	; 0x73
    1346:	601a      	str	r2, [r3, #0]
    1348:	4a10      	ldr	r2, [pc, #64]	; (138c <main+0x1b8>)
    134a:	4b10      	ldr	r3, [pc, #64]	; (138c <main+0x1b8>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    1352:	6013      	str	r3, [r2, #0]
    1354:	4a0e      	ldr	r2, [pc, #56]	; (1390 <main+0x1bc>)
    1356:	4b0e      	ldr	r3, [pc, #56]	; (1390 <main+0x1bc>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    135e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    1362:	6013      	str	r3, [r2, #0]
    1364:	4a0b      	ldr	r2, [pc, #44]	; (1394 <main+0x1c0>)
    1366:	4b0b      	ldr	r3, [pc, #44]	; (1394 <main+0x1c0>)
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    136e:	6013      	str	r3, [r2, #0]
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <main+0x1b4>)
    1372:	2200      	movs	r2, #0
    1374:	601a      	str	r2, [r3, #0]
    1376:	683b      	ldr	r3, [r7, #0]
    1378:	f383 8810 	msr	PRIMASK, r3
    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    137c:	f000 face 	bl	191c <am_hal_interrupt_master_enable>
    //
    // Loop forever - should never reach here
    //
    while (1)
    {
    }
    1380:	e7fe      	b.n	1380 <main+0x1ac>
    1382:	bf00      	nop
    1384:	10001344 	.word	0x10001344
    1388:	40010060 	.word	0x40010060
    138c:	40010048 	.word	0x40010048
    1390:	40010014 	.word	0x40010014
    1394:	400100f4 	.word	0x400100f4
    1398:	100010d5 	.word	0x100010d5

0000139c <multiboot_decrypt>:
    {0xA5A5A5A5, },
    {0x66666666, },
};

static void multiboot_decrypt(uint32_t * data, uint32_t size_words, uint32_t *key, uint32_t key_size_words, uint32_t * iv)
{
    139c:	b480      	push	{r7}
    139e:	b089      	sub	sp, #36	; 0x24
    13a0:	af00      	add	r7, sp, #0
    13a2:	60f8      	str	r0, [r7, #12]
    13a4:	60b9      	str	r1, [r7, #8]
    13a6:	607a      	str	r2, [r7, #4]
    13a8:	603b      	str	r3, [r7, #0]
    int i, j;
    uint32_t temp;
    for ( j = 0; j < size_words / key_size_words; j++ )
    13aa:	2300      	movs	r3, #0
    13ac:	61bb      	str	r3, [r7, #24]
    13ae:	e03d      	b.n	142c <multiboot_decrypt+0x90>
    {
        for ( i = 0; i < key_size_words; i++ )
    13b0:	2300      	movs	r3, #0
    13b2:	61fb      	str	r3, [r7, #28]
    13b4:	e033      	b.n	141e <multiboot_decrypt+0x82>
        {
            temp = data[j * key_size_words + i];
    13b6:	69bb      	ldr	r3, [r7, #24]
    13b8:	683a      	ldr	r2, [r7, #0]
    13ba:	fb02 f203 	mul.w	r2, r2, r3
    13be:	69fb      	ldr	r3, [r7, #28]
    13c0:	4413      	add	r3, r2
    13c2:	009b      	lsls	r3, r3, #2
    13c4:	68fa      	ldr	r2, [r7, #12]
    13c6:	4413      	add	r3, r2
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	617b      	str	r3, [r7, #20]
            data[j * key_size_words + i] = (data[j * key_size_words + i] ^ key[i]) ^ iv[i];
    13cc:	69bb      	ldr	r3, [r7, #24]
    13ce:	683a      	ldr	r2, [r7, #0]
    13d0:	fb02 f203 	mul.w	r2, r2, r3
    13d4:	69fb      	ldr	r3, [r7, #28]
    13d6:	4413      	add	r3, r2
    13d8:	009b      	lsls	r3, r3, #2
    13da:	68fa      	ldr	r2, [r7, #12]
    13dc:	4413      	add	r3, r2
    13de:	69ba      	ldr	r2, [r7, #24]
    13e0:	6839      	ldr	r1, [r7, #0]
    13e2:	fb01 f102 	mul.w	r1, r1, r2
    13e6:	69fa      	ldr	r2, [r7, #28]
    13e8:	440a      	add	r2, r1
    13ea:	0092      	lsls	r2, r2, #2
    13ec:	68f9      	ldr	r1, [r7, #12]
    13ee:	440a      	add	r2, r1
    13f0:	6811      	ldr	r1, [r2, #0]
    13f2:	69fa      	ldr	r2, [r7, #28]
    13f4:	0092      	lsls	r2, r2, #2
    13f6:	6878      	ldr	r0, [r7, #4]
    13f8:	4402      	add	r2, r0
    13fa:	6812      	ldr	r2, [r2, #0]
    13fc:	4051      	eors	r1, r2
    13fe:	69fa      	ldr	r2, [r7, #28]
    1400:	0092      	lsls	r2, r2, #2
    1402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1404:	4402      	add	r2, r0
    1406:	6812      	ldr	r2, [r2, #0]
    1408:	404a      	eors	r2, r1
    140a:	601a      	str	r2, [r3, #0]
            iv[i] = temp;
    140c:	69fb      	ldr	r3, [r7, #28]
    140e:	009b      	lsls	r3, r3, #2
    1410:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1412:	4413      	add	r3, r2
    1414:	697a      	ldr	r2, [r7, #20]
    1416:	601a      	str	r2, [r3, #0]
{
    int i, j;
    uint32_t temp;
    for ( j = 0; j < size_words / key_size_words; j++ )
    {
        for ( i = 0; i < key_size_words; i++ )
    1418:	69fb      	ldr	r3, [r7, #28]
    141a:	3301      	adds	r3, #1
    141c:	61fb      	str	r3, [r7, #28]
    141e:	69fa      	ldr	r2, [r7, #28]
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	429a      	cmp	r2, r3
    1424:	d3c7      	bcc.n	13b6 <multiboot_decrypt+0x1a>

static void multiboot_decrypt(uint32_t * data, uint32_t size_words, uint32_t *key, uint32_t key_size_words, uint32_t * iv)
{
    int i, j;
    uint32_t temp;
    for ( j = 0; j < size_words / key_size_words; j++ )
    1426:	69bb      	ldr	r3, [r7, #24]
    1428:	3301      	adds	r3, #1
    142a:	61bb      	str	r3, [r7, #24]
    142c:	68ba      	ldr	r2, [r7, #8]
    142e:	683b      	ldr	r3, [r7, #0]
    1430:	fbb2 f2f3 	udiv	r2, r2, r3
    1434:	69bb      	ldr	r3, [r7, #24]
    1436:	429a      	cmp	r2, r3
    1438:	d8ba      	bhi.n	13b0 <multiboot_decrypt+0x14>
            temp = data[j * key_size_words + i];
            data[j * key_size_words + i] = (data[j * key_size_words + i] ^ key[i]) ^ iv[i];
            iv[i] = temp;
        }
    }
}
    143a:	bf00      	nop
    143c:	3724      	adds	r7, #36	; 0x24
    143e:	46bd      	mov	sp, r7
    1440:	f85d 7b04 	ldr.w	r7, [sp], #4
    1444:	4770      	bx	lr
    1446:	bf00      	nop

00001448 <validate_keyidx>:
}
#endif

static bool
validate_keyidx(uint32_t keyIdx)
{
    1448:	b580      	push	{r7, lr}
    144a:	b082      	sub	sp, #8
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
    if ( keyIdx > MAX_KEYS )
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	2b08      	cmp	r3, #8
    1454:	d901      	bls.n	145a <validate_keyidx+0x12>
    {
        return true;
    1456:	2301      	movs	r3, #1
    1458:	e004      	b.n	1464 <validate_keyidx+0x1c>
    }
    // Validate the key index to make sure it has not been revoked
    return am_bootloader_check_index(keyIdx, (uint32_t *)KEY_VALID_MASK_LOCATION);
    145a:	4904      	ldr	r1, [pc, #16]	; (146c <validate_keyidx+0x24>)
    145c:	6878      	ldr	r0, [r7, #4]
    145e:	f7ff f8b3 	bl	5c8 <am_bootloader_check_index>
    1462:	4603      	mov	r3, r0
}
    1464:	4618      	mov	r0, r3
    1466:	3708      	adds	r7, #8
    1468:	46bd      	mov	sp, r7
    146a:	bd80      	pop	{r7, pc}
    146c:	1000103c 	.word	0x1000103c

00001470 <validate_sec_trailer>:

static bool
validate_sec_trailer(multiboot_security_trailer_t *pTrailer)
{
    1470:	b580      	push	{r7, lr}
    1472:	b084      	sub	sp, #16
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
    int i;
    // Validate signature of Seurity trailer
    // Signature = CRC32 of trailer ^ key
    uint32_t crc = 0;
    1478:	2300      	movs	r3, #0
    147a:	60bb      	str	r3, [r7, #8]
    am_bootloader_partial_crc32(&(pTrailer->keyIdx), sizeof(pTrailer->keyIdx), &crc);
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	f107 0208 	add.w	r2, r7, #8
    1482:	2104      	movs	r1, #4
    1484:	4618      	mov	r0, r3
    1486:	f7fe fe49 	bl	11c <am_bootloader_partial_crc32>
    am_bootloader_partial_crc32(&(pTrailer->secInfo), sizeof(pTrailer->secInfo), &crc);
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	3304      	adds	r3, #4
    148e:	f107 0208 	add.w	r2, r7, #8
    1492:	2110      	movs	r1, #16
    1494:	4618      	mov	r0, r3
    1496:	f7fe fe41 	bl	11c <am_bootloader_partial_crc32>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    149a:	2300      	movs	r3, #0
    149c:	60fb      	str	r3, [r7, #12]
    149e:	e015      	b.n	14cc <validate_sec_trailer+0x5c>
    {
        if ( pTrailer->signature[i] != (crc ^ keyTbl[pTrailer->keyIdx][i]) )
    14a0:	687a      	ldr	r2, [r7, #4]
    14a2:	68fb      	ldr	r3, [r7, #12]
    14a4:	3304      	adds	r3, #4
    14a6:	009b      	lsls	r3, r3, #2
    14a8:	4413      	add	r3, r2
    14aa:	685a      	ldr	r2, [r3, #4]
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	6819      	ldr	r1, [r3, #0]
    14b0:	480a      	ldr	r0, [pc, #40]	; (14dc <validate_sec_trailer+0x6c>)
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	440b      	add	r3, r1
    14b6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    14ba:	68bb      	ldr	r3, [r7, #8]
    14bc:	404b      	eors	r3, r1
    14be:	429a      	cmp	r2, r3
    14c0:	d001      	beq.n	14c6 <validate_sec_trailer+0x56>
        {
            return true;
    14c2:	2301      	movs	r3, #1
    14c4:	e006      	b.n	14d4 <validate_sec_trailer+0x64>
    // Validate signature of Seurity trailer
    // Signature = CRC32 of trailer ^ key
    uint32_t crc = 0;
    am_bootloader_partial_crc32(&(pTrailer->keyIdx), sizeof(pTrailer->keyIdx), &crc);
    am_bootloader_partial_crc32(&(pTrailer->secInfo), sizeof(pTrailer->secInfo), &crc);
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    14c6:	68fb      	ldr	r3, [r7, #12]
    14c8:	3301      	adds	r3, #1
    14ca:	60fb      	str	r3, [r7, #12]
    14cc:	68fb      	ldr	r3, [r7, #12]
    14ce:	2b00      	cmp	r3, #0
    14d0:	dde6      	ble.n	14a0 <validate_sec_trailer+0x30>
        if ( pTrailer->signature[i] != (crc ^ keyTbl[pTrailer->keyIdx][i]) )
        {
            return true;
        }
    }
    return false;
    14d2:	2300      	movs	r3, #0
}
    14d4:	4618      	mov	r0, r3
    14d6:	3710      	adds	r7, #16
    14d8:	46bd      	mov	sp, r7
    14da:	bd80      	pop	{r7, pc}
    14dc:	10001040 	.word	0x10001040

000014e0 <init_multiboot_secure>:
// Verify the security trailer & initialize the security params
int
init_multiboot_secure(uint32_t length, uint32_t *pData,
                      bool bStoreInSram, am_bootloader_image_t *psImage,
                      uint32_t *pProtect)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b086      	sub	sp, #24
    14e4:	af00      	add	r7, sp, #0
    14e6:	60f8      	str	r0, [r7, #12]
    14e8:	60b9      	str	r1, [r7, #8]
    14ea:	603b      	str	r3, [r7, #0]
    14ec:	4613      	mov	r3, r2
    14ee:	71fb      	strb	r3, [r7, #7]
    int i;
    multiboot_security_trailer_t *pSec = (multiboot_security_trailer_t *)pData;
    14f0:	68bb      	ldr	r3, [r7, #8]
    14f2:	613b      	str	r3, [r7, #16]
    // Verify the length
    if ( length != sizeof(*pSec) )
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	2b18      	cmp	r3, #24
    14f8:	d002      	beq.n	1500 <init_multiboot_secure+0x20>
    {
        return -1;
    14fa:	f04f 33ff 	mov.w	r3, #4294967295
    14fe:	e05c      	b.n	15ba <init_multiboot_secure+0xda>
    }
    // Validate key index
    if ( validate_keyidx(pSec->keyIdx) )
    1500:	693b      	ldr	r3, [r7, #16]
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	4618      	mov	r0, r3
    1506:	f7ff ff9f 	bl	1448 <validate_keyidx>
    150a:	4603      	mov	r3, r0
    150c:	2b00      	cmp	r3, #0
    150e:	d002      	beq.n	1516 <init_multiboot_secure+0x36>
    {
        return -1;
    1510:	f04f 33ff 	mov.w	r3, #4294967295
    1514:	e051      	b.n	15ba <init_multiboot_secure+0xda>
    }
    // Now Authenticate the security trailer itself
    if ( validate_sec_trailer(pSec) )
    1516:	6938      	ldr	r0, [r7, #16]
    1518:	f7ff ffaa 	bl	1470 <validate_sec_trailer>
    151c:	4603      	mov	r3, r0
    151e:	2b00      	cmp	r3, #0
    1520:	d002      	beq.n	1528 <init_multiboot_secure+0x48>
    {
        return -1;
    1522:	f04f 33ff 	mov.w	r3, #4294967295
    1526:	e048      	b.n	15ba <init_multiboot_secure+0xda>
    }
    // We could reject the download if we can not validate if before flashing
    // by checking bStoreInSram herea - optional
    // Initialize State Variables
    g_sSecState.imageLength = pSec->secInfo.imageLength;
    1528:	693b      	ldr	r3, [r7, #16]
    152a:	689b      	ldr	r3, [r3, #8]
    152c:	4a25      	ldr	r2, [pc, #148]	; (15c4 <init_multiboot_secure+0xe4>)
    152e:	6093      	str	r3, [r2, #8]
    if ( g_sSecState.imageLength != psImage->ui32NumBytes )
    1530:	4b24      	ldr	r3, [pc, #144]	; (15c4 <init_multiboot_secure+0xe4>)
    1532:	689a      	ldr	r2, [r3, #8]
    1534:	683b      	ldr	r3, [r7, #0]
    1536:	685b      	ldr	r3, [r3, #4]
    1538:	429a      	cmp	r2, r3
    153a:	d002      	beq.n	1542 <init_multiboot_secure+0x62>
    {
        return -1;
    153c:	f04f 33ff 	mov.w	r3, #4294967295
    1540:	e03b      	b.n	15ba <init_multiboot_secure+0xda>
    }
    g_sSecState.clearCRC = 0;
    1542:	4b20      	ldr	r3, [pc, #128]	; (15c4 <init_multiboot_secure+0xe4>)
    1544:	2200      	movs	r2, #0
    1546:	61da      	str	r2, [r3, #28]
    g_sSecState.offset = 0;
    1548:	4b1e      	ldr	r3, [pc, #120]	; (15c4 <init_multiboot_secure+0xe4>)
    154a:	2200      	movs	r2, #0
    154c:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    154e:	2300      	movs	r3, #0
    1550:	617b      	str	r3, [r7, #20]
    1552:	e02a      	b.n	15aa <init_multiboot_secure+0xca>
    {
        // Initialize IV
        g_sSecState.initVector[i] = pSec->secInfo.initVector[i];
    1554:	693a      	ldr	r2, [r7, #16]
    1556:	697b      	ldr	r3, [r7, #20]
    1558:	3302      	adds	r3, #2
    155a:	009b      	lsls	r3, r3, #2
    155c:	4413      	add	r3, r2
    155e:	689a      	ldr	r2, [r3, #8]
    1560:	4918      	ldr	r1, [pc, #96]	; (15c4 <init_multiboot_secure+0xe4>)
    1562:	697b      	ldr	r3, [r7, #20]
    1564:	3304      	adds	r3, #4
    1566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Store Signature
        g_sSecState.signature[i] = pSec->secInfo.imageSignature[i];
    156a:	693a      	ldr	r2, [r7, #16]
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	3302      	adds	r3, #2
    1570:	009b      	lsls	r3, r3, #2
    1572:	4413      	add	r3, r2
    1574:	685a      	ldr	r2, [r3, #4]
    1576:	4913      	ldr	r1, [pc, #76]	; (15c4 <init_multiboot_secure+0xe4>)
    1578:	697b      	ldr	r3, [r7, #20]
    157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_sSecState.runningSignature[i] = 0;
    157e:	4a11      	ldr	r2, [pc, #68]	; (15c4 <init_multiboot_secure+0xe4>)
    1580:	697b      	ldr	r3, [r7, #20]
    1582:	009b      	lsls	r3, r3, #2
    1584:	4413      	add	r3, r2
    1586:	2200      	movs	r2, #0
    1588:	605a      	str	r2, [r3, #4]
        g_sSecState.key[i] = keyTbl[pSec->keyIdx][i];
    158a:	693b      	ldr	r3, [r7, #16]
    158c:	681a      	ldr	r2, [r3, #0]
    158e:	490e      	ldr	r1, [pc, #56]	; (15c8 <init_multiboot_secure+0xe8>)
    1590:	697b      	ldr	r3, [r7, #20]
    1592:	4413      	add	r3, r2
    1594:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    1598:	490a      	ldr	r1, [pc, #40]	; (15c4 <init_multiboot_secure+0xe4>)
    159a:	697b      	ldr	r3, [r7, #20]
    159c:	3304      	adds	r3, #4
    159e:	009b      	lsls	r3, r3, #2
    15a0:	440b      	add	r3, r1
    15a2:	605a      	str	r2, [r3, #4]
    {
        return -1;
    }
    g_sSecState.clearCRC = 0;
    g_sSecState.offset = 0;
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    15a4:	697b      	ldr	r3, [r7, #20]
    15a6:	3301      	adds	r3, #1
    15a8:	617b      	str	r3, [r7, #20]
    15aa:	697b      	ldr	r3, [r7, #20]
    15ac:	2b00      	cmp	r3, #0
    15ae:	ddd1      	ble.n	1554 <init_multiboot_secure+0x74>
        // Store Signature
        g_sSecState.signature[i] = pSec->secInfo.imageSignature[i];
        g_sSecState.runningSignature[i] = 0;
        g_sSecState.key[i] = keyTbl[pSec->keyIdx][i];
    }
    *pProtect = pSec->secInfo.protection; // Could be set if copy-protection is desired
    15b0:	693b      	ldr	r3, [r7, #16]
    15b2:	685a      	ldr	r2, [r3, #4]
    15b4:	6a3b      	ldr	r3, [r7, #32]
    15b6:	601a      	str	r2, [r3, #0]
    return 0;
    15b8:	2300      	movs	r3, #0
}
    15ba:	4618      	mov	r0, r3
    15bc:	3718      	adds	r7, #24
    15be:	46bd      	mov	sp, r7
    15c0:	bd80      	pop	{r7, pc}
    15c2:	bf00      	nop
    15c4:	100010d8 	.word	0x100010d8
    15c8:	10001040 	.word	0x10001040

000015cc <multiboot_secure_decrypt>:

void
multiboot_secure_decrypt(void *pData, uint32_t ui32NumBytes)
{
    15cc:	b580      	push	{r7, lr}
    15ce:	b084      	sub	sp, #16
    15d0:	af02      	add	r7, sp, #8
    15d2:	6078      	str	r0, [r7, #4]
    15d4:	6039      	str	r1, [r7, #0]
    // Do in place decryption
    // With knowledge of image structure, this can also grab the image version
    // from a fixed location from within image
    multiboot_decrypt((uint32_t *)pData, ui32NumBytes / 4,
    15d6:	683b      	ldr	r3, [r7, #0]
    15d8:	0899      	lsrs	r1, r3, #2
    15da:	4b0b      	ldr	r3, [pc, #44]	; (1608 <multiboot_secure_decrypt+0x3c>)
    15dc:	9300      	str	r3, [sp, #0]
    15de:	2301      	movs	r3, #1
    15e0:	4a0a      	ldr	r2, [pc, #40]	; (160c <multiboot_secure_decrypt+0x40>)
    15e2:	6878      	ldr	r0, [r7, #4]
    15e4:	f7ff feda 	bl	139c <multiboot_decrypt>
        g_sSecState.key, KEY_SIZE_WORDS, g_sSecState.initVector);
    // Update the running CRC for clear image
    am_bootloader_partial_crc32(pData, ui32NumBytes, &g_sSecState.clearCRC);
    15e8:	4a09      	ldr	r2, [pc, #36]	; (1610 <multiboot_secure_decrypt+0x44>)
    15ea:	6839      	ldr	r1, [r7, #0]
    15ec:	6878      	ldr	r0, [r7, #4]
    15ee:	f7fe fd95 	bl	11c <am_bootloader_partial_crc32>
    g_sSecState.offset += ui32NumBytes;
    15f2:	4b08      	ldr	r3, [pc, #32]	; (1614 <multiboot_secure_decrypt+0x48>)
    15f4:	699a      	ldr	r2, [r3, #24]
    15f6:	683b      	ldr	r3, [r7, #0]
    15f8:	4413      	add	r3, r2
    15fa:	4a06      	ldr	r2, [pc, #24]	; (1614 <multiboot_secure_decrypt+0x48>)
    15fc:	6193      	str	r3, [r2, #24]
}
    15fe:	bf00      	nop
    1600:	3708      	adds	r7, #8
    1602:	46bd      	mov	sp, r7
    1604:	bd80      	pop	{r7, pc}
    1606:	bf00      	nop
    1608:	100010e8 	.word	0x100010e8
    160c:	100010ec 	.word	0x100010ec
    1610:	100010f4 	.word	0x100010f4
    1614:	100010d8 	.word	0x100010d8

00001618 <multiboot_secure_verify>:

// Verify the authenticity and integrity of the Image
// return the clear CRC for integrity verification going forward
int
multiboot_secure_verify(uint32_t *pui32ClearCRC)
{
    1618:	b480      	push	{r7}
    161a:	b085      	sub	sp, #20
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
    // Check the signature with computed Value - for authentication
    // Optionally check the version for replay protection
    // Return 0 for success
    // Check for image signature to validate authenticity (and integrity)
    // Image Signature is ClearCRC ^ key
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    1620:	2300      	movs	r3, #0
    1622:	60fb      	str	r3, [r7, #12]
    1624:	e01e      	b.n	1664 <multiboot_secure_verify+0x4c>
    {
        g_sSecState.runningSignature[i] = g_sSecState.key[i] ^ g_sSecState.clearCRC;
    1626:	4a16      	ldr	r2, [pc, #88]	; (1680 <multiboot_secure_verify+0x68>)
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	3304      	adds	r3, #4
    162c:	009b      	lsls	r3, r3, #2
    162e:	4413      	add	r3, r2
    1630:	685a      	ldr	r2, [r3, #4]
    1632:	4b13      	ldr	r3, [pc, #76]	; (1680 <multiboot_secure_verify+0x68>)
    1634:	69db      	ldr	r3, [r3, #28]
    1636:	405a      	eors	r2, r3
    1638:	4911      	ldr	r1, [pc, #68]	; (1680 <multiboot_secure_verify+0x68>)
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	009b      	lsls	r3, r3, #2
    163e:	440b      	add	r3, r1
    1640:	605a      	str	r2, [r3, #4]
        if ( g_sSecState.runningSignature[i] != g_sSecState.signature[i] )
    1642:	4a0f      	ldr	r2, [pc, #60]	; (1680 <multiboot_secure_verify+0x68>)
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	009b      	lsls	r3, r3, #2
    1648:	4413      	add	r3, r2
    164a:	685a      	ldr	r2, [r3, #4]
    164c:	490c      	ldr	r1, [pc, #48]	; (1680 <multiboot_secure_verify+0x68>)
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1654:	429a      	cmp	r2, r3
    1656:	d002      	beq.n	165e <multiboot_secure_verify+0x46>
        {
            return -1;
    1658:	f04f 33ff 	mov.w	r3, #4294967295
    165c:	e00a      	b.n	1674 <multiboot_secure_verify+0x5c>
    // Check the signature with computed Value - for authentication
    // Optionally check the version for replay protection
    // Return 0 for success
    // Check for image signature to validate authenticity (and integrity)
    // Image Signature is ClearCRC ^ key
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	3301      	adds	r3, #1
    1662:	60fb      	str	r3, [r7, #12]
    1664:	68fb      	ldr	r3, [r7, #12]
    1666:	2b00      	cmp	r3, #0
    1668:	dddd      	ble.n	1626 <multiboot_secure_verify+0xe>
        {
            return -1;
        }
    }
    // Update the CRC in psImage for integrity verification going forward
    *pui32ClearCRC = g_sSecState.clearCRC;
    166a:	4b05      	ldr	r3, [pc, #20]	; (1680 <multiboot_secure_verify+0x68>)
    166c:	69da      	ldr	r2, [r3, #28]
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	601a      	str	r2, [r3, #0]
    return 0;
    1672:	2300      	movs	r3, #0
}
    1674:	4618      	mov	r0, r3
    1676:	3714      	adds	r7, #20
    1678:	46bd      	mov	sp, r7
    167a:	f85d 7b04 	ldr.w	r7, [sp], #4
    167e:	4770      	bx	lr
    1680:	100010d8 	.word	0x100010d8

00001684 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    1684:	4811      	ldr	r0, [pc, #68]	; (16cc <zero_loop+0x12>)
    1686:	4912      	ldr	r1, [pc, #72]	; (16d0 <zero_loop+0x16>)
    1688:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    168a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    168e:	4811      	ldr	r0, [pc, #68]	; (16d4 <zero_loop+0x1a>)
    1690:	6801      	ldr	r1, [r0, #0]
    1692:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1696:	6001      	str	r1, [r0, #0]
    1698:	f3bf 8f4f 	dsb	sy
    169c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    16a0:	480d      	ldr	r0, [pc, #52]	; (16d8 <zero_loop+0x1e>)
    16a2:	490e      	ldr	r1, [pc, #56]	; (16dc <zero_loop+0x22>)
    16a4:	4a0e      	ldr	r2, [pc, #56]	; (16e0 <zero_loop+0x26>)

000016a6 <copy_loop>:
    16a6:	f850 3b04 	ldr.w	r3, [r0], #4
    16aa:	f841 3b04 	str.w	r3, [r1], #4
    16ae:	4291      	cmp	r1, r2
    16b0:	dbf9      	blt.n	16a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    16b2:	480c      	ldr	r0, [pc, #48]	; (16e4 <zero_loop+0x2a>)
    16b4:	490c      	ldr	r1, [pc, #48]	; (16e8 <zero_loop+0x2e>)
    16b6:	f04f 0200 	mov.w	r2, #0

000016ba <zero_loop>:
    16ba:	4288      	cmp	r0, r1
    16bc:	bfb8      	it	lt
    16be:	f840 2b04 	strlt.w	r2, [r0], #4
    16c2:	dbfa      	blt.n	16ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    16c4:	f7ff fd86 	bl	11d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    16c8:	be00      	bkpt	0x0000
}
    16ca:	bf00      	nop
    16cc:	e000ed08 	.word	0xe000ed08
    16d0:	00000000 	.word	0x00000000
    16d4:	e000ed88 	.word	0xe000ed88
    16d8:	0000252c 	.word	0x0000252c
    16dc:	10001000 	.word	0x10001000
    16e0:	100010b0 	.word	0x100010b0
    16e4:	100010b0 	.word	0x100010b0
    16e8:	10003344 	.word	0x10003344

000016ec <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    16ec:	b480      	push	{r7}
    16ee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    16f0:	e7fe      	b.n	16f0 <am_nmi_isr+0x4>
    16f2:	bf00      	nop

000016f4 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
    16f4:	b480      	push	{r7}
    16f6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    16f8:	e7fe      	b.n	16f8 <am_busfault_isr+0x4>
    16fa:	bf00      	nop

000016fc <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    16fc:	b480      	push	{r7}
    16fe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    1700:	e7fe      	b.n	1700 <am_adc_isr+0x4>
    1702:	bf00      	nop

00001704 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1704:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1706:	f000 f9d1 	bl	1aac <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    170a:	f000 fa3d 	bl	1b88 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    170e:	f000 fbcf 	bl	1eb0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1712:	2001      	movs	r0, #1
    1714:	f000 fa4e 	bl	1bb4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1718:	2001      	movs	r0, #1
    171a:	f000 f82d 	bl	1778 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    171e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1722:	f000 ba55 	b.w	1bd0 <am_hal_rtc_osc_disable>
    1726:	bf00      	nop

00001728 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1728:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    172a:	4604      	mov	r4, r0
    172c:	b120      	cbz	r0, 1738 <am_hal_clkgen_sysclk_select+0x10>
    172e:	4a06      	ldr	r2, [pc, #24]	; (1748 <am_hal_clkgen_sysclk_select+0x20>)
    1730:	4806      	ldr	r0, [pc, #24]	; (174c <am_hal_clkgen_sysclk_select+0x24>)
    1732:	2150      	movs	r1, #80	; 0x50
    1734:	f000 f84c 	bl	17d0 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1738:	4b05      	ldr	r3, [pc, #20]	; (1750 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    173a:	4906      	ldr	r1, [pc, #24]	; (1754 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    173c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    173e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1740:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1742:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1744:	601a      	str	r2, [r3, #0]
    1746:	bd10      	pop	{r4, pc}
    1748:	000023a0 	.word	0x000023a0
    174c:	000023d8 	.word	0x000023d8
    1750:	40004014 	.word	0x40004014
    1754:	40004018 	.word	0x40004018

00001758 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    175a:	4905      	ldr	r1, [pc, #20]	; (1770 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    175c:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    175e:	4805      	ldr	r0, [pc, #20]	; (1774 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1760:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1764:	bf08      	it	eq
    1766:	4608      	moveq	r0, r1
    1768:	4770      	bx	lr
    176a:	bf00      	nop
    176c:	40004018 	.word	0x40004018
    1770:	02dc6c00 	.word	0x02dc6c00
    1774:	016e3600 	.word	0x016e3600

00001778 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1778:	0783      	lsls	r3, r0, #30
    177a:	d003      	beq.n	1784 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    177c:	4a02      	ldr	r2, [pc, #8]	; (1788 <am_hal_clkgen_osc_stop+0x10>)
    177e:	6813      	ldr	r3, [r2, #0]
    1780:	4318      	orrs	r0, r3
    1782:	6010      	str	r0, [r2, #0]
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	4000400c 	.word	0x4000400c

0000178c <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    178c:	2801      	cmp	r0, #1
    178e:	d900      	bls.n	1792 <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    1790:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1792:	2903      	cmp	r1, #3
    1794:	d8fc      	bhi.n	1790 <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1796:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    179a:	b430      	push	{r4, r5}
    179c:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    179e:	9301      	str	r3, [sp, #4]
    17a0:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    17a2:	4b0a      	ldr	r3, [pc, #40]	; (17cc <am_hal_clkgen_uarten_set+0x40>)
    17a4:	00c5      	lsls	r5, r0, #3
    17a6:	681c      	ldr	r4, [r3, #0]
    17a8:	2203      	movs	r2, #3
    17aa:	40aa      	lsls	r2, r5
    17ac:	ea24 0502 	bic.w	r5, r4, r2
    17b0:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    17b2:	fb00 f000 	mul.w	r0, r0, r0
    17b6:	681a      	ldr	r2, [r3, #0]
    17b8:	00c0      	lsls	r0, r0, #3
    17ba:	4081      	lsls	r1, r0
    17bc:	4311      	orrs	r1, r2
    17be:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	f383 8810 	msr	PRIMASK, r3
}
    17c6:	b002      	add	sp, #8
    17c8:	bc30      	pop	{r4, r5}
    17ca:	4770      	bx	lr
    17cc:	40004034 	.word	0x40004034

000017d0 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    17d0:	e7fe      	b.n	17d0 <am_hal_debug_error>
    17d2:	bf00      	nop

000017d4 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    17d4:	4b01      	ldr	r3, [pc, #4]	; (17dc <am_hal_flash_page_erase+0x8>)
    17d6:	685b      	ldr	r3, [r3, #4]
    17d8:	4718      	bx	r3
    17da:	bf00      	nop
    17dc:	10001060 	.word	0x10001060

000017e0 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    17e0:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    17e2:	4c03      	ldr	r4, [pc, #12]	; (17f0 <am_hal_flash_program_main+0x10>)
    17e4:	68a4      	ldr	r4, [r4, #8]
    17e6:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    17e8:	f85d 4b04 	ldr.w	r4, [sp], #4
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    17ec:	4760      	bx	ip
    17ee:	bf00      	nop
    17f0:	10001060 	.word	0x10001060

000017f4 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    17f4:	4b01      	ldr	r3, [pc, #4]	; (17fc <am_hal_flash_delay+0x8>)
    17f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    17f8:	4708      	bx	r1
    17fa:	bf00      	nop
    17fc:	10001060 	.word	0x10001060

00001800 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    1800:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1802:	4c05      	ldr	r4, [pc, #20]	; (1818 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1804:	4a05      	ldr	r2, [pc, #20]	; (181c <am_hal_gpio_int_enable+0x1c>)
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1806:	6823      	ldr	r3, [r4, #0]
    1808:	4319      	orrs	r1, r3
    180a:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    180c:	6811      	ldr	r1, [r2, #0]
}
    180e:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1812:	4308      	orrs	r0, r1
    1814:	6010      	str	r0, [r2, #0]
}
    1816:	4770      	bx	lr
    1818:	40010210 	.word	0x40010210
    181c:	40010200 	.word	0x40010200

00001820 <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    1820:	b410      	push	{r4}
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1822:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    1826:	b083      	sub	sp, #12
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1828:	9301      	str	r3, [sp, #4]
    182a:	b672      	cpsid	i
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    182c:	4c08      	ldr	r4, [pc, #32]	; (1850 <am_hal_gpio_int_disable+0x30>)
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    182e:	4a09      	ldr	r2, [pc, #36]	; (1854 <am_hal_gpio_int_disable+0x34>)
{
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    1830:	6823      	ldr	r3, [r4, #0]
    1832:	ea23 0101 	bic.w	r1, r3, r1
    1836:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    1838:	6814      	ldr	r4, [r2, #0]
    183a:	ea24 0000 	bic.w	r0, r4, r0
    183e:	6010      	str	r0, [r2, #0]
    AM_CRITICAL_END_ASM
    1840:	9a01      	ldr	r2, [sp, #4]
    1842:	f382 8810 	msr	PRIMASK, r2
}
    1846:	b003      	add	sp, #12
    1848:	f85d 4b04 	ldr.w	r4, [sp], #4
    184c:	4770      	bx	lr
    184e:	bf00      	nop
    1850:	40010210 	.word	0x40010210
    1854:	40010200 	.word	0x40010200

00001858 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    1858:	b082      	sub	sp, #8
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    185a:	f3ef 8310 	mrs	r3, PRIMASK
    185e:	9301      	str	r3, [sp, #4]
    1860:	b672      	cpsid	i
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1862:	4a04      	ldr	r2, [pc, #16]	; (1874 <am_hal_gpio_int_clear+0x1c>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <am_hal_gpio_int_clear+0x20>)
{
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1866:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1868:	6018      	str	r0, [r3, #0]
    AM_CRITICAL_END_ASM
    186a:	9801      	ldr	r0, [sp, #4]
    186c:	f380 8810 	msr	PRIMASK, r0
}
    1870:	b002      	add	sp, #8
    1872:	4770      	bx	lr
    1874:	40010218 	.word	0x40010218
    1878:	40010208 	.word	0x40010208

0000187c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    187c:	280f      	cmp	r0, #15
    187e:	d80b      	bhi.n	1898 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1880:	2805      	cmp	r0, #5
    1882:	d013      	beq.n	18ac <am_hal_interrupt_enable+0x30>
    1884:	2806      	cmp	r0, #6
    1886:	d017      	beq.n	18b8 <am_hal_interrupt_enable+0x3c>
    1888:	2804      	cmp	r0, #4
    188a:	d104      	bne.n	1896 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    188c:	4a0d      	ldr	r2, [pc, #52]	; (18c4 <am_hal_interrupt_enable+0x48>)
    188e:	6813      	ldr	r3, [r2, #0]
    1890:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1894:	6010      	str	r0, [r2, #0]
    1896:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1898:	f1a0 0310 	sub.w	r3, r0, #16
    189c:	f003 0c1f 	and.w	ip, r3, #31
    18a0:	2001      	movs	r0, #1
    18a2:	4909      	ldr	r1, [pc, #36]	; (18c8 <am_hal_interrupt_enable+0x4c>)
    18a4:	fa00 f20c 	lsl.w	r2, r0, ip
    18a8:	600a      	str	r2, [r1, #0]
    18aa:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    18ac:	4805      	ldr	r0, [pc, #20]	; (18c4 <am_hal_interrupt_enable+0x48>)
    18ae:	6801      	ldr	r1, [r0, #0]
    18b0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    18b4:	6002      	str	r2, [r0, #0]
            break;
    18b6:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    18b8:	4902      	ldr	r1, [pc, #8]	; (18c4 <am_hal_interrupt_enable+0x48>)
    18ba:	680a      	ldr	r2, [r1, #0]
    18bc:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    18c0:	600b      	str	r3, [r1, #0]
            break;
    18c2:	4770      	bx	lr
    18c4:	e000ed24 	.word	0xe000ed24
    18c8:	e000e100 	.word	0xe000e100

000018cc <am_hal_interrupt_disable>:
am_hal_interrupt_disable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    18cc:	280f      	cmp	r0, #15
    18ce:	d80b      	bhi.n	18e8 <am_hal_interrupt_disable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    18d0:	2805      	cmp	r0, #5
    18d2:	d013      	beq.n	18fc <am_hal_interrupt_disable+0x30>
    18d4:	2806      	cmp	r0, #6
    18d6:	d017      	beq.n	1908 <am_hal_interrupt_disable+0x3c>
    18d8:	2804      	cmp	r0, #4
    18da:	d104      	bne.n	18e6 <am_hal_interrupt_disable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 0);
    18dc:	4a0d      	ldr	r2, [pc, #52]	; (1914 <am_hal_interrupt_disable+0x48>)
    18de:	6813      	ldr	r3, [r2, #0]
    18e0:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
    18e4:	6010      	str	r0, [r2, #0]
    18e6:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // disable it using the NVIC register.
        //
        AM_REG(NVIC, ICER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    18e8:	f1a0 0310 	sub.w	r3, r0, #16
    18ec:	f003 0c1f 	and.w	ip, r3, #31
    18f0:	2001      	movs	r0, #1
    18f2:	4909      	ldr	r1, [pc, #36]	; (1918 <am_hal_interrupt_disable+0x4c>)
    18f4:	fa00 f20c 	lsl.w	r2, r0, ip
    18f8:	600a      	str	r2, [r1, #0]
    18fa:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 0);
    18fc:	4805      	ldr	r0, [pc, #20]	; (1914 <am_hal_interrupt_disable+0x48>)
    18fe:	6801      	ldr	r1, [r0, #0]
    1900:	f421 3200 	bic.w	r2, r1, #131072	; 0x20000
    1904:	6002      	str	r2, [r0, #0]
            break;
    1906:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
    1908:	4902      	ldr	r1, [pc, #8]	; (1914 <am_hal_interrupt_disable+0x48>)
    190a:	680a      	ldr	r2, [r1, #0]
    190c:	f422 2380 	bic.w	r3, r2, #262144	; 0x40000
    1910:	600b      	str	r3, [r1, #0]
            break;
    1912:	4770      	bx	lr
    1914:	e000ed24 	.word	0xe000ed24
    1918:	e000e180 	.word	0xe000e180

0000191c <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    191c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1920:	b662      	cpsie	i
    __asm("    bx lr");
    1922:	4770      	bx	lr

00001924 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1924:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1928:	b672      	cpsid	i
    __asm("    bx lr");
    192a:	4770      	bx	lr

0000192c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    192c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1930:	4770      	bx	lr
    1932:	bf00      	nop

00001934 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1934:	4b2f      	ldr	r3, [pc, #188]	; (19f4 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1936:	4930      	ldr	r1, [pc, #192]	; (19f8 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    1938:	4a30      	ldr	r2, [pc, #192]	; (19fc <am_hal_mcuctrl_device_info_get+0xc8>)
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    193a:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    193c:	681f      	ldr	r7, [r3, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    193e:	4d30      	ldr	r5, [pc, #192]	; (1a00 <am_hal_mcuctrl_device_info_get+0xcc>)
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1940:	6007      	str	r7, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1942:	682f      	ldr	r7, [r5, #0]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1944:	4c2f      	ldr	r4, [pc, #188]	; (1a04 <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1946:	6047      	str	r7, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1948:	6827      	ldr	r7, [r4, #0]
    194a:	6087      	str	r7, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    194c:	680f      	ldr	r7, [r1, #0]
    194e:	60c7      	str	r7, [r0, #12]

    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1954:	682d      	ldr	r5, [r5, #0]
    1956:	6045      	str	r5, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1958:	6824      	ldr	r4, [r4, #0]
    195a:	6084      	str	r4, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    195c:	6809      	ldr	r1, [r1, #0]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    195e:	4e2a      	ldr	r6, [pc, #168]	; (1a08 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1960:	60c1      	str	r1, [r0, #12]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    1962:	f3c3 5703 	ubfx	r7, r3, #20, #4

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_flash_size[
    1966:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    196a:	6836      	ldr	r6, [r6, #0]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    196c:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1970:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1974:	4a25      	ldr	r2, [pc, #148]	; (1a0c <am_hal_mcuctrl_device_info_get+0xd8>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1976:	6106      	str	r6, [r0, #16]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified =
    1978:	f003 0301 	and.w	r3, r3, #1
    197c:	6143      	str	r3, [r0, #20]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    197e:	6185      	str	r5, [r0, #24]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1980:	61c4      	str	r4, [r0, #28]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1982:	6814      	ldr	r4, [r2, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1984:	4e22      	ldr	r6, [pc, #136]	; (1a10 <am_hal_mcuctrl_device_info_get+0xdc>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1986:	4f23      	ldr	r7, [pc, #140]	; (1a14 <am_hal_mcuctrl_device_info_get+0xe0>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1988:	4923      	ldr	r1, [pc, #140]	; (1a18 <am_hal_mcuctrl_device_info_get+0xe4>)
    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    198a:	4d24      	ldr	r5, [pc, #144]	; (1a1c <am_hal_mcuctrl_device_info_get+0xe8>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    198c:	b2e3      	uxtb	r3, r4
    198e:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1990:	6834      	ldr	r4, [r6, #0]
    1992:	0224      	lsls	r4, r4, #8
    1994:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    1998:	4323      	orrs	r3, r4
    199a:	6203      	str	r3, [r0, #32]

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    199c:	6833      	ldr	r3, [r6, #0]
    199e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    19a2:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    19a4:	683c      	ldr	r4, [r7, #0]
    19a6:	0124      	lsls	r4, r4, #4
    19a8:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
    19ac:	4323      	orrs	r3, r4
    19ae:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    19b0:	683f      	ldr	r7, [r7, #0]
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    19b2:	4c1b      	ldr	r4, [pc, #108]	; (1a20 <am_hal_mcuctrl_device_info_get+0xec>)
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    19b4:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
    19b8:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    19ba:	6809      	ldr	r1, [r1, #0]
    19bc:	f3c1 1703 	ubfx	r7, r1, #4, #4
    19c0:	433b      	orrs	r3, r7

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    19c2:	321c      	adds	r2, #28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    19c4:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    19c6:	6812      	ldr	r2, [r2, #0]
    19c8:	0611      	lsls	r1, r2, #24
    19ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    19cc:	682d      	ldr	r5, [r5, #0]
    19ce:	042b      	lsls	r3, r5, #16
    19d0:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    19d4:	ea47 0201 	orr.w	r2, r7, r1
    19d8:	62c2      	str	r2, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    19da:	6931      	ldr	r1, [r6, #16]
    19dc:	020e      	lsls	r6, r1, #8
    19de:	f406 457f 	and.w	r5, r6, #65280	; 0xff00
    19e2:	4315      	orrs	r5, r2
    19e4:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    19e6:	6824      	ldr	r4, [r4, #0]
    19e8:	b2e3      	uxtb	r3, r4
    19ea:	431d      	orrs	r5, r3
    19ec:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    19ee:	bcf0      	pop	{r4, r5, r6, r7}
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	40020000 	.word	0x40020000
    19f8:	4002000c 	.word	0x4002000c
    19fc:	000023f0 	.word	0x000023f0
    1a00:	40020004 	.word	0x40020004
    1a04:	40020008 	.word	0x40020008
    1a08:	40020010 	.word	0x40020010
    1a0c:	f0000fe0 	.word	0xf0000fe0
    1a10:	f0000fe4 	.word	0xf0000fe4
    1a14:	f0000fe8 	.word	0xf0000fe8
    1a18:	f0000fec 	.word	0xf0000fec
    1a1c:	f0000ff8 	.word	0xf0000ff8
    1a20:	f0000ff0 	.word	0xf0000ff0

00001a24 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1a24:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1a26:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1a28:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1a2a:	b1c0      	cbz	r0, 1a5e <am_hal_pwrctrl_periph_enable+0x3a>
    1a2c:	1e43      	subs	r3, r0, #1
    1a2e:	4203      	tst	r3, r0
    1a30:	d115      	bne.n	1a5e <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a32:	f3ef 8010 	mrs	r0, PRIMASK
    1a36:	9001      	str	r0, [sp, #4]
    1a38:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1a3a:	4a18      	ldr	r2, [pc, #96]	; (1a9c <am_hal_pwrctrl_periph_enable+0x78>)
    1a3c:	6811      	ldr	r1, [r2, #0]
    1a3e:	4321      	orrs	r1, r4
    1a40:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1a42:	9b01      	ldr	r3, [sp, #4]
    1a44:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1a48:	200e      	movs	r0, #14
    1a4a:	f7ff fed3 	bl	17f4 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1a4e:	f014 0f0e 	tst.w	r4, #14
    1a52:	d10a      	bne.n	1a6a <am_hal_pwrctrl_periph_enable+0x46>
    1a54:	f014 0f70 	tst.w	r4, #112	; 0x70
    1a58:	d00e      	beq.n	1a78 <am_hal_pwrctrl_periph_enable+0x54>
    1a5a:	2408      	movs	r4, #8
    1a5c:	e006      	b.n	1a6c <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1a5e:	4a10      	ldr	r2, [pc, #64]	; (1aa0 <am_hal_pwrctrl_periph_enable+0x7c>)
    1a60:	4810      	ldr	r0, [pc, #64]	; (1aa4 <am_hal_pwrctrl_periph_enable+0x80>)
    1a62:	215d      	movs	r1, #93	; 0x5d
    1a64:	f7ff feb4 	bl	17d0 <am_hal_debug_error>
    1a68:	e7e3      	b.n	1a32 <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1a6a:	2404      	movs	r4, #4
    1a6c:	4a0e      	ldr	r2, [pc, #56]	; (1aa8 <am_hal_pwrctrl_periph_enable+0x84>)
    1a6e:	6811      	ldr	r1, [r2, #0]
    1a70:	420c      	tst	r4, r1
    1a72:	d0fc      	beq.n	1a6e <am_hal_pwrctrl_periph_enable+0x4a>
}
    1a74:	b002      	add	sp, #8
    1a76:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1a78:	f240 1081 	movw	r0, #385	; 0x181
    1a7c:	4020      	ands	r0, r4
    1a7e:	b940      	cbnz	r0, 1a92 <am_hal_pwrctrl_periph_enable+0x6e>
    1a80:	05a3      	lsls	r3, r4, #22
    1a82:	d408      	bmi.n	1a96 <am_hal_pwrctrl_periph_enable+0x72>
    1a84:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1a88:	bf14      	ite	ne
    1a8a:	2410      	movne	r4, #16
    1a8c:	f04f 34ff 	moveq.w	r4, #4294967295
    1a90:	e7ec      	b.n	1a6c <am_hal_pwrctrl_periph_enable+0x48>
    1a92:	2402      	movs	r4, #2
    1a94:	e7ea      	b.n	1a6c <am_hal_pwrctrl_periph_enable+0x48>
    1a96:	2480      	movs	r4, #128	; 0x80
    1a98:	e7e8      	b.n	1a6c <am_hal_pwrctrl_periph_enable+0x48>
    1a9a:	bf00      	nop
    1a9c:	40021008 	.word	0x40021008
    1aa0:	00002430 	.word	0x00002430
    1aa4:	00002464 	.word	0x00002464
    1aa8:	40021014 	.word	0x40021014

00001aac <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1aac:	4b0f      	ldr	r3, [pc, #60]	; (1aec <am_hal_pwrctrl_bucks_init+0x40>)
    1aae:	681a      	ldr	r2, [r3, #0]
    1ab0:	0792      	lsls	r2, r2, #30
    1ab2:	d502      	bpl.n	1aba <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ab4:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ab6:	07c3      	lsls	r3, r0, #31
    1ab8:	d40e      	bmi.n	1ad8 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1aba:	4b0d      	ldr	r3, [pc, #52]	; (1af0 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1abc:	4a0b      	ldr	r2, [pc, #44]	; (1aec <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1abe:	6819      	ldr	r1, [r3, #0]
    1ac0:	f041 0002 	orr.w	r0, r1, #2
    1ac4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1ac6:	6819      	ldr	r1, [r3, #0]
    1ac8:	f041 0001 	orr.w	r0, r1, #1
    1acc:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ace:	6813      	ldr	r3, [r2, #0]
    1ad0:	f003 0103 	and.w	r1, r3, #3
    1ad4:	2903      	cmp	r1, #3
    1ad6:	d1fa      	bne.n	1ace <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1ad8:	4a04      	ldr	r2, [pc, #16]	; (1aec <am_hal_pwrctrl_bucks_init+0x40>)
    1ada:	6810      	ldr	r0, [r2, #0]
    1adc:	f000 0303 	and.w	r3, r0, #3
    1ae0:	2b03      	cmp	r3, #3
    1ae2:	d1fa      	bne.n	1ada <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1ae4:	2042      	movs	r0, #66	; 0x42
    1ae6:	f7ff be85 	b.w	17f4 <am_hal_flash_delay>
    1aea:	bf00      	nop
    1aec:	40021004 	.word	0x40021004
    1af0:	40021000 	.word	0x40021000

00001af4 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1af4:	4b0b      	ldr	r3, [pc, #44]	; (1b24 <am_hal_pwrctrl_bucks_enable+0x30>)
    1af6:	681a      	ldr	r2, [r3, #0]
    1af8:	0792      	lsls	r2, r2, #30
    1afa:	d502      	bpl.n	1b02 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1afc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1afe:	07c3      	lsls	r3, r0, #31
    1b00:	d40e      	bmi.n	1b20 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b02:	4b09      	ldr	r3, [pc, #36]	; (1b28 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b04:	4a07      	ldr	r2, [pc, #28]	; (1b24 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b06:	6819      	ldr	r1, [r3, #0]
    1b08:	f041 0002 	orr.w	r0, r1, #2
    1b0c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1b0e:	6819      	ldr	r1, [r3, #0]
    1b10:	f041 0001 	orr.w	r0, r1, #1
    1b14:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b16:	6813      	ldr	r3, [r2, #0]
    1b18:	f003 0103 	and.w	r1, r3, #3
    1b1c:	2903      	cmp	r1, #3
    1b1e:	d1fa      	bne.n	1b16 <am_hal_pwrctrl_bucks_enable+0x22>
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop
    1b24:	40021004 	.word	0x40021004
    1b28:	40021000 	.word	0x40021000

00001b2c <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1b2c:	4b12      	ldr	r3, [pc, #72]	; (1b78 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1b2e:	681a      	ldr	r2, [r3, #0]
    1b30:	0792      	lsls	r2, r2, #30
    1b32:	d402      	bmi.n	1b3a <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1b34:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1b36:	07c3      	lsls	r3, r0, #31
    1b38:	d51c      	bpl.n	1b74 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b3a:	4910      	ldr	r1, [pc, #64]	; (1b7c <am_hal_pwrctrl_bucks_disable+0x50>)
    1b3c:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1b3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1b42:	2a20      	cmp	r2, #32
    1b44:	d00b      	beq.n	1b5e <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1b46:	4b0e      	ldr	r3, [pc, #56]	; (1b80 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b48:	681a      	ldr	r2, [r3, #0]
    1b4a:	f022 0002 	bic.w	r0, r2, #2
    1b4e:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1b50:	6819      	ldr	r1, [r3, #0]
    1b52:	f021 0201 	bic.w	r2, r1, #1
    1b56:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1b58:	200a      	movs	r0, #10
    1b5a:	f7ff be4b 	b.w	17f4 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1b5e:	4809      	ldr	r0, [pc, #36]	; (1b84 <am_hal_pwrctrl_bucks_disable+0x58>)
    1b60:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1b62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1b66:	d1ee      	bne.n	1b46 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b68:	4805      	ldr	r0, [pc, #20]	; (1b80 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b6a:	6803      	ldr	r3, [r0, #0]
    1b6c:	f003 0105 	and.w	r1, r3, #5
    1b70:	6001      	str	r1, [r0, #0]
    1b72:	e7f1      	b.n	1b58 <am_hal_pwrctrl_bucks_disable+0x2c>
    1b74:	4770      	bx	lr
    1b76:	bf00      	nop
    1b78:	40021004 	.word	0x40021004
    1b7c:	4002000c 	.word	0x4002000c
    1b80:	40021000 	.word	0x40021000
    1b84:	40021008 	.word	0x40021008

00001b88 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1b88:	4905      	ldr	r1, [pc, #20]	; (1ba0 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b8a:	4a06      	ldr	r2, [pc, #24]	; (1ba4 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1b8c:	680b      	ldr	r3, [r1, #0]
    1b8e:	f043 0006 	orr.w	r0, r3, #6
    1b92:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b94:	6811      	ldr	r1, [r2, #0]
    1b96:	f021 0304 	bic.w	r3, r1, #4
    1b9a:	6013      	str	r3, [r2, #0]
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	40021018 	.word	0x40021018
    1ba4:	40021000 	.word	0x40021000

00001ba8 <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    1ba8:	4b01      	ldr	r3, [pc, #4]	; (1bb0 <am_hal_reset_poi+0x8>)
    1baa:	221b      	movs	r2, #27
    1bac:	601a      	str	r2, [r3, #0]
    1bae:	4770      	bx	lr
    1bb0:	40000004 	.word	0x40000004

00001bb4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1bb4:	4a05      	ldr	r2, [pc, #20]	; (1bcc <am_hal_rtc_osc_select+0x18>)
    1bb6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1bb8:	b918      	cbnz	r0, 1bc2 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1bba:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1bbe:	6010      	str	r0, [r2, #0]
    1bc0:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1bc2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1bc6:	6011      	str	r1, [r2, #0]
    1bc8:	4770      	bx	lr
    1bca:	bf00      	nop
    1bcc:	4000400c 	.word	0x4000400c

00001bd0 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1bd0:	4a02      	ldr	r2, [pc, #8]	; (1bdc <am_hal_rtc_osc_disable+0xc>)
    1bd2:	6813      	ldr	r3, [r2, #0]
    1bd4:	f043 0010 	orr.w	r0, r3, #16
    1bd8:	6010      	str	r0, [r2, #0]
    1bda:	4770      	bx	lr
    1bdc:	40004050 	.word	0x40004050

00001be0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be2:	b083      	sub	sp, #12
    1be4:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1be6:	f7ff fe9d 	bl	1924 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1bea:	4a41      	ldr	r2, [pc, #260]	; (1cf0 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1bec:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1bee:	b11d      	cbz	r5, 1bf8 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1bf0:	4b40      	ldr	r3, [pc, #256]	; (1cf4 <am_hal_sysctrl_sleep+0x114>)
    1bf2:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1bf4:	07c3      	lsls	r3, r0, #31
    1bf6:	d509      	bpl.n	1c0c <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1bf8:	6811      	ldr	r1, [r2, #0]
    1bfa:	f021 0604 	bic.w	r6, r1, #4
    1bfe:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1c00:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1c02:	4620      	mov	r0, r4
    1c04:	f7ff fe92 	bl	192c <am_hal_interrupt_master_set>
}
    1c08:	b003      	add	sp, #12
    1c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1c0c:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c0e:	493a      	ldr	r1, [pc, #232]	; (1cf8 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1c10:	4f3a      	ldr	r7, [pc, #232]	; (1cfc <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1c12:	4d3b      	ldr	r5, [pc, #236]	; (1d00 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1c14:	483b      	ldr	r0, [pc, #236]	; (1d04 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1c16:	f043 0604 	orr.w	r6, r3, #4
    1c1a:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c1c:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1c1e:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1c20:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1c22:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c24:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1c28:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1c2a:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c2e:	bf14      	ite	ne
    1c30:	2500      	movne	r5, #0
    1c32:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1c34:	2e03      	cmp	r6, #3
    1c36:	bf8c      	ite	hi
    1c38:	2100      	movhi	r1, #0
    1c3a:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1c3c:	f012 0303 	ands.w	r3, r2, #3
    1c40:	bf18      	it	ne
    1c42:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1c44:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1c48:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1c4a:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1c4c:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1c50:	b91e      	cbnz	r6, 1c5a <am_hal_sysctrl_sleep+0x7a>
    1c52:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1c56:	2d0f      	cmp	r5, #15
    1c58:	d00a      	beq.n	1c70 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1c5a:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1c5c:	2d0f      	cmp	r5, #15
    1c5e:	d01a      	beq.n	1c96 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1c60:	4f29      	ldr	r7, [pc, #164]	; (1d08 <am_hal_sysctrl_sleep+0x128>)
    1c62:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1c64:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1c66:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1c68:	f7ff fe60 	bl	192c <am_hal_interrupt_master_set>
}
    1c6c:	b003      	add	sp, #12
    1c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1c70:	683a      	ldr	r2, [r7, #0]
    1c72:	1e50      	subs	r0, r2, #1
    1c74:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1c76:	9800      	ldr	r0, [sp, #0]
    1c78:	f04f 31ff 	mov.w	r1, #4294967295
    1c7c:	f000 f938 	bl	1ef0 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1c80:	9800      	ldr	r0, [sp, #0]
    1c82:	4633      	mov	r3, r6
    1c84:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1c88:	f04f 31ff 	mov.w	r1, #4294967295
    1c8c:	f000 f944 	bl	1f18 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1c90:	f7ff ff4c 	bl	1b2c <am_hal_pwrctrl_bucks_disable>
    1c94:	e7e1      	b.n	1c5a <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c96:	f3ef 8310 	mrs	r3, PRIMASK
    1c9a:	9301      	str	r3, [sp, #4]
    1c9c:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1c9e:	4e1b      	ldr	r6, [pc, #108]	; (1d0c <am_hal_sysctrl_sleep+0x12c>)
    1ca0:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1ca2:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1ca4:	6835      	ldr	r5, [r6, #0]
    1ca6:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1caa:	f04c 021c 	orr.w	r2, ip, #28
    1cae:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1cb0:	6830      	ldr	r0, [r6, #0]
    1cb2:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1cb6:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1cba:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1cbc:	9e01      	ldr	r6, [sp, #4]
    1cbe:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1cc2:	201c      	movs	r0, #28
    1cc4:	f7ff fd96 	bl	17f4 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1cc8:	f7ff ff14 	bl	1af4 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1ccc:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1cce:	4910      	ldr	r1, [pc, #64]	; (1d10 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1cd0:	4d0d      	ldr	r5, [pc, #52]	; (1d08 <am_hal_sysctrl_sleep+0x128>)
    1cd2:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1cd4:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1cd6:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1cd8:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1cda:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1cdc:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1cde:	f7ff fd89 	bl	17f4 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1ce2:	9800      	ldr	r0, [sp, #0]
    1ce4:	f04f 31ff 	mov.w	r1, #4294967295
    1ce8:	f000 f8e8 	bl	1ebc <am_hal_ctimer_start>
    1cec:	e789      	b.n	1c02 <am_hal_sysctrl_sleep+0x22>
    1cee:	bf00      	nop
    1cf0:	e000ed10 	.word	0xe000ed10
    1cf4:	40020250 	.word	0x40020250
    1cf8:	4002000c 	.word	0x4002000c
    1cfc:	10001100 	.word	0x10001100
    1d00:	40021000 	.word	0x40021000
    1d04:	40021008 	.word	0x40021008
    1d08:	100010f8 	.word	0x100010f8
    1d0c:	40020068 	.word	0x40020068
    1d10:	100010fc 	.word	0x100010fc

00001d14 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1d14:	4a02      	ldr	r2, [pc, #8]	; (1d20 <am_hal_systick_start+0xc>)
    1d16:	6813      	ldr	r3, [r2, #0]
    1d18:	f043 0001 	orr.w	r0, r3, #1
    1d1c:	6010      	str	r0, [r2, #0]
    1d1e:	4770      	bx	lr
    1d20:	e000e010 	.word	0xe000e010

00001d24 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1d24:	4a02      	ldr	r2, [pc, #8]	; (1d30 <am_hal_systick_stop+0xc>)
    1d26:	6813      	ldr	r3, [r2, #0]
    1d28:	f023 0001 	bic.w	r0, r3, #1
    1d2c:	6010      	str	r0, [r2, #0]
    1d2e:	4770      	bx	lr
    1d30:	e000e010 	.word	0xe000e010

00001d34 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    1d34:	4b01      	ldr	r3, [pc, #4]	; (1d3c <am_hal_systick_load+0x8>)
    1d36:	6018      	str	r0, [r3, #0]
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	e000e014 	.word	0xe000e014

00001d40 <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    1d40:	4b01      	ldr	r3, [pc, #4]	; (1d48 <am_hal_systick_count+0x8>)
    1d42:	6818      	ldr	r0, [r3, #0]
}
    1d44:	4770      	bx	lr
    1d46:	bf00      	nop
    1d48:	e000e018 	.word	0xe000e018

00001d4c <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1d4e:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1d50:	460f      	mov	r7, r1
    1d52:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1d54:	f7ff fd00 	bl	1758 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1d58:	0169      	lsls	r1, r5, #5
    1d5a:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1d5c:	fbb0 f4f1 	udiv	r4, r0, r1
    1d60:	fbb2 f0f1 	udiv	r0, r2, r1
    1d64:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1d68:	b924      	cbnz	r4, 1d74 <am_hal_uart_config+0x28>
    1d6a:	4a11      	ldr	r2, [pc, #68]	; (1db0 <am_hal_uart_config+0x64>)
    1d6c:	4811      	ldr	r0, [pc, #68]	; (1db4 <am_hal_uart_config+0x68>)
    1d6e:	2161      	movs	r1, #97	; 0x61
    1d70:	f7ff fd2e 	bl	17d0 <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d74:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    1d78:	331c      	adds	r3, #28
    1d7a:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d7c:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d7e:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d80:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1d82:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    1d84:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d86:	68fa      	ldr	r2, [r7, #12]
    1d88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1d8a:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d8c:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d8e:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d92:	bf14      	ite	ne
    1d94:	2208      	movne	r2, #8
    1d96:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d98:	4302      	orrs	r2, r0
    1d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1d9c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    1d9e:	693f      	ldr	r7, [r7, #16]
    1da0:	432f      	orrs	r7, r5
    1da2:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1da4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1da6:	f046 0110 	orr.w	r1, r6, #16
    1daa:	6319      	str	r1, [r3, #48]	; 0x30
    1dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dae:	bf00      	nop
    1db0:	0000247c 	.word	0x0000247c
    1db4:	000024b0 	.word	0x000024b0

00001db8 <am_hal_uart_int_status_get>:
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    1db8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dbc:	301c      	adds	r0, #28
    1dbe:	0302      	lsls	r2, r0, #12
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if (bEnabledOnly)
    1dc0:	b909      	cbnz	r1, 1dc6 <am_hal_uart_int_status_get+0xe>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, IES);
    1dc2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    }
}
    1dc4:	4770      	bx	lr
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    1dc6:	6c10      	ldr	r0, [r2, #64]	; 0x40
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop

00001dcc <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    1dcc:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dd0:	301c      	adds	r0, #28
    1dd2:	0302      	lsls	r2, r0, #12
    1dd4:	6451      	str	r1, [r2, #68]	; 0x44
    1dd6:	4770      	bx	lr

00001dd8 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, ui32Module, IER) |= ui32Interrupt;
    1dd8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1ddc:	301c      	adds	r0, #28
    1dde:	0302      	lsls	r2, r0, #12
    1de0:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1de2:	4319      	orrs	r1, r3
    1de4:	6391      	str	r1, [r2, #56]	; 0x38
    1de6:	4770      	bx	lr

00001de8 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1de8:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1dea:	f3ef 8310 	mrs	r3, PRIMASK
    1dee:	9301      	str	r3, [sp, #4]
    1df0:	b672      	cpsid	i
    1df2:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1df6:	301c      	adds	r0, #28
    1df8:	0301      	lsls	r1, r0, #12
    1dfa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1dfc:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    1e00:	f04c 0301 	orr.w	r3, ip, #1
    1e04:	630b      	str	r3, [r1, #48]	; 0x30
    1e06:	9801      	ldr	r0, [sp, #4]
    1e08:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e0c:	b002      	add	sp, #8
    1e0e:	4770      	bx	lr

00001e10 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1e10:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1e12:	f3ef 8310 	mrs	r3, PRIMASK
    1e16:	9301      	str	r3, [sp, #4]
    1e18:	b672      	cpsid	i
    1e1a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e1e:	301c      	adds	r0, #28
    1e20:	0301      	lsls	r1, r0, #12
    1e22:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1e24:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    1e28:	f02c 0301 	bic.w	r3, ip, #1
    1e2c:	630b      	str	r3, [r1, #48]	; 0x30
    1e2e:	9801      	ldr	r0, [sp, #4]
    1e30:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e34:	b002      	add	sp, #8
    1e36:	4770      	bx	lr

00001e38 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e38:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    1e3a:	b510      	push	{r4, lr}
    1e3c:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e3e:	d905      	bls.n	1e4c <am_hal_uart_pwrctrl_enable+0x14>
    1e40:	4a05      	ldr	r2, [pc, #20]	; (1e58 <am_hal_uart_pwrctrl_enable+0x20>)
    1e42:	4806      	ldr	r0, [pc, #24]	; (1e5c <am_hal_uart_pwrctrl_enable+0x24>)
    1e44:	f240 11a3 	movw	r1, #419	; 0x1a3
    1e48:	f7ff fcc2 	bl	17d0 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e4c:	2080      	movs	r0, #128	; 0x80
    1e4e:	40a0      	lsls	r0, r4
}
    1e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e54:	f7ff bde6 	b.w	1a24 <am_hal_pwrctrl_periph_enable>
    1e58:	000024c4 	.word	0x000024c4
    1e5c:	000024b0 	.word	0x000024b0

00001e60 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1e60:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1e62:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1e64:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1e66:	f7ff fc91 	bl	178c <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1e6a:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1e6e:	301c      	adds	r0, #28
    1e70:	0301      	lsls	r1, r0, #12
    1e72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1e74:	f043 0208 	orr.w	r2, r3, #8
    1e78:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1e7a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1e7c:	f044 0010 	orr.w	r0, r4, #16
    1e80:	6308      	str	r0, [r1, #48]	; 0x30
    1e82:	bd10      	pop	{r4, pc}

00001e84 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1e84:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e88:	301c      	adds	r0, #28
    1e8a:	0302      	lsls	r2, r0, #12
    1e8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e8e:	f043 0010 	orr.w	r0, r3, #16
    1e92:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1e94:	6351      	str	r1, [r2, #52]	; 0x34
    1e96:	4770      	bx	lr

00001e98 <am_hal_uart_char_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_char_transmit_polled(uint32_t ui32Module, char cChar)
{
    1e98:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e9c:	301c      	adds	r0, #28
    1e9e:	0300      	lsls	r0, r0, #12
    1ea0:	f100 0218 	add.w	r2, r0, #24
    //
    // Wait for space, i.e.  TX FIFO EMPTY
    //
    while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1ea4:	6813      	ldr	r3, [r2, #0]
    1ea6:	069b      	lsls	r3, r3, #26
    1ea8:	d4fc      	bmi.n	1ea4 <am_hal_uart_char_transmit_polled+0xc>

    //
    // Write the char.
    //
    AM_REGn(UART, ui32Module, DR) = cChar;
    1eaa:	6001      	str	r1, [r0, #0]
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop

00001eb0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1eb0:	4b01      	ldr	r3, [pc, #4]	; (1eb8 <am_hal_vcomp_disable+0x8>)
    1eb2:	2237      	movs	r2, #55	; 0x37
    1eb4:	601a      	str	r2, [r3, #0]
    1eb6:	4770      	bx	lr
    1eb8:	4000c008 	.word	0x4000c008

00001ebc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ebc:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1ebe:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ec2:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1ec4:	0100      	lsls	r0, r0, #4
    1ec6:	4a09      	ldr	r2, [pc, #36]	; (1eec <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1ec8:	9301      	str	r3, [sp, #4]
    1eca:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1ecc:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1ece:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1ed2:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1ed6:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1eda:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1edc:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ede:	9801      	ldr	r0, [sp, #4]
    1ee0:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1ee4:	b003      	add	sp, #12
    1ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1eea:	4770      	bx	lr
    1eec:	4000800c 	.word	0x4000800c

00001ef0 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ef0:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1ef2:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1ef6:	0100      	lsls	r0, r0, #4
    1ef8:	4a06      	ldr	r2, [pc, #24]	; (1f14 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1efa:	9301      	str	r3, [sp, #4]
    1efc:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1efe:	5883      	ldr	r3, [r0, r2]
    1f00:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1f04:	4319      	orrs	r1, r3
    1f06:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f08:	9801      	ldr	r0, [sp, #4]
    1f0a:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1f0e:	b002      	add	sp, #8
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop
    1f14:	4000800c 	.word	0x4000800c

00001f18 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f18:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f1a:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f1e:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1f20:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f22:	4d1c      	ldr	r5, [pc, #112]	; (1f94 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f24:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1f26:	4e1c      	ldr	r6, [pc, #112]	; (1f98 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1f28:	4f1c      	ldr	r7, [pc, #112]	; (1f9c <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f2a:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f2c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1f30:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f32:	d01a      	beq.n	1f6a <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f34:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1f38:	2d80      	cmp	r5, #128	; 0x80
    1f3a:	d01b      	beq.n	1f74 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f40:	2500      	movs	r5, #0
    1f42:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1f44:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f46:	d01c      	beq.n	1f82 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f48:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1f4c:	d01e      	beq.n	1f8c <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f4e:	0c21      	lsrs	r1, r4, #16
    1f50:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f52:	b291      	uxth	r1, r2
    1f54:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f56:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f5a:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f5c:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f5e:	9801      	ldr	r0, [sp, #4]
    1f60:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1f64:	b002      	add	sp, #8
    1f66:	bcf0      	pop	{r4, r5, r6, r7}
    1f68:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f6a:	0c25      	lsrs	r5, r4, #16
    1f6c:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1f70:	2c80      	cmp	r4, #128	; 0x80
    1f72:	d10a      	bne.n	1f8a <am_hal_ctimer_period_set+0x72>
    1f74:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1f76:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1f78:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f7e:	4299      	cmp	r1, r3
    1f80:	d1e2      	bne.n	1f48 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f82:	b297      	uxth	r7, r2
    1f84:	433d      	orrs	r5, r7
    1f86:	5185      	str	r5, [r0, r6]
    1f88:	e7e9      	b.n	1f5e <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f8a:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f8c:	b296      	uxth	r6, r2
    1f8e:	4335      	orrs	r5, r6
    1f90:	51c5      	str	r5, [r0, r7]
    1f92:	e7e4      	b.n	1f5e <am_hal_ctimer_period_set+0x46>
    1f94:	4000800c 	.word	0x4000800c
    1f98:	40008004 	.word	0x40008004
    1f9c:	40008008 	.word	0x40008008

00001fa0 <g_pui32CRC32Table>:
    1fa0:	00000000 1edc6f41 3db8de82 2364b1c3     ....Ao.....=..d#
    1fb0:	7b71bd04 65add245 46c96386 58150cc7     ..q{E..e.c.F...X
    1fc0:	f6e37a08 e83f1549 cb5ba48a d587cbcb     .z..I.?...[.....
    1fd0:	8d92c70c 934ea84d b02a198e aef676cf     ....M.N...*..v..
    1fe0:	f31a9b51 edc6f410 cea245d3 d07e2a92     Q........E...*~.
    1ff0:	886b2655 96b74914 b5d3f8d7 ab0f9796     U&k..I..........
    2000:	05f9e159 1b258e18 38413fdb 269d509a     Y.....%..?A8.P.&
    2010:	7e885c5d 6054331c 433082df 5deced9e     ]\.~.3T`..0C...]
    2020:	f8e959e3 e63536a2 c5518761 db8de820     .Y...65.a.Q. ...
    2030:	8398e4e7 9d448ba6 be203a65 a0fc5524     ......D.e: .$U..
    2040:	0e0a23eb 10d64caa 33b2fd69 2d6e9228     .#...L..i..3(.n-
    2050:	757b9eef 6ba7f1ae 48c3406d 561f2f2c     ..{u...km@.H,/.V
    2060:	0bf3c2b2 152fadf3 364b1c30 28977371     ....../.0.K6qs.(
    2070:	70827fb6 6e5e10f7 4d3aa134 53e6ce75     ...p..^n4.:Mu..S
    2080:	fd10b8ba e3ccd7fb c0a86638 de740979     ........8f..y.t.
    2090:	866105be 98bd6aff bbd9db3c a505b47d     ..a..j..<...}...
    20a0:	ef0edc87 f1d2b3c6 d2b60205 cc6a6d44     ............Dmj.
    20b0:	947f6183 8aa30ec2 a9c7bf01 b71bd040     .a..........@...
    20c0:	19eda68f 0731c9ce 2455780d 3a89174c     ......1..xU$L..:
    20d0:	629c1b8b 7c4074ca 5f24c509 41f8aa48     ...b.t@|..$_H..A
    20e0:	1c1447d6 02c82897 21ac9954 3f70f615     .G...(..T..!..p?
    20f0:	6765fad2 79b99593 5add2450 44014b11     ..eg...yP$.Z.K.D
    2100:	eaf73dde f42b529f d74fe35c c9938c1d     .=...R+.\.O.....
    2110:	918680da 8f5aef9b ac3e5e58 b2e23119     ......Z.X^>..1..
    2120:	17e78564 093bea25 2a5f5be6 348334a7     d...%.;..[_*.4.4
    2130:	6c963860 724a5721 512ee6e2 4ff289a3     `8.l!WJr...Q...O
    2140:	e104ff6c ffd8902d dcbc21ee c2604eaf     l...-....!...N`.
    2150:	9a754268 84a92d29 a7cd9cea b911f3ab     hBu.)-..........
    2160:	e4fd1e35 fa217174 d945c0b7 c799aff6     5...tq!...E.....
    2170:	9f8ca331 8150cc70 a2347db3 bce812f2     1...p.P..}4.....
    2180:	121e643d 0cc20b7c 2fa6babf 317ad5fe     =d..|....../..z1
    2190:	696fd939 77b3b678 54d707bb 4a0b68fa     9.oix..w...T.h.J
    21a0:	c0c1d64f de1db90e fd7908cd e3a5678c     O.........y..g..
    21b0:	bbb06b4b a56c040a 8608b5c9 98d4da88     Kk....l.........
    21c0:	3622ac47 28fec306 0b9a72c5 15461d84     G."6...(.r....F.
    21d0:	4d531143 538f7e02 70ebcfc1 6e37a080     C.SM.~.S...p..7n
    21e0:	33db4d1e 2d07225f 0e63939c 10bffcdd     .M.3_".-..c.....
    21f0:	48aaf01a 56769f5b 75122e98 6bce41d9     ...H[.vV...u.A.k
    2200:	c5383716 dbe45857 f880e994 e65c86d5     .78.WX........\.
    2210:	be498a12 a095e553 83f15490 9d2d3bd1     ..I.S....T...;-.
    2220:	38288fac 26f4e0ed 0590512e 1b4c3e6f     ..(8...&.Q..o>L.
    2230:	435932a8 5d855de9 7ee1ec2a 603d836b     .2YC.].]*..~k.=`
    2240:	cecbf5a4 d0179ae5 f3732b26 edaf4467     ........&+s.gD..
    2250:	b5ba48a0 ab6627e1 88029622 96def963     .H...'f."...c...
    2260:	cb3214fd d5ee7bbc f68aca7f e856a53e     ..2..{......>.V.
    2270:	b043a9f9 ae9fc6b8 8dfb777b 9327183a     ..C.....{w..:.'.
    2280:	3dd16ef5 230d01b4 0069b077 1eb5df36     .n.=...#w.i.6...
    2290:	46a0d3f1 587cbcb0 7b180d73 65c46232     ...F..|Xs..{2b.e
    22a0:	2fcf0ac8 31136589 1277d44a 0cabbb0b     .../.e.1J.w.....
    22b0:	54beb7cc 4a62d88d 6906694e 77da060f     ...T..bJNi.i...w
    22c0:	d92c70c0 c7f01f81 e494ae42 fa48c103     .p,.....B.....H.
    22d0:	a25dcdc4 bc81a285 9fe51346 81397c07     ..].....F....|9.
    22e0:	dcd59199 c209fed8 e16d4f1b ffb1205a     .........Om.Z ..
    22f0:	a7a42c9d b97843dc 9a1cf21f 84c09d5e     .,...Cx.....^...
    2300:	2a36eb91 34ea84d0 178e3513 09525a52     ..6*...4.5..RZR.
    2310:	51475695 4f9b39d4 6cff8817 7223e756     .VGQ.9.O...lV.#r
    2320:	d726532b c9fa3c6a ea9e8da9 f442e2e8     +S&.j<........B.
    2330:	ac57ee2f b28b816e 91ef30ad 8f335fec     /.W.n....0..._3.
    2340:	21c52923 3f194662 1c7df7a1 02a198e0     #).!bF.?..}.....
    2350:	5ab49427 4468fb66 670c4aa5 79d025e4     '..Zf.hD.J.g.%.y
    2360:	243cc87a 3ae0a73b 198416f8 075879b9     z.<$;..:.....yX.
    2370:	5f4d757e 41911a3f 62f5abfc 7c29c4bd     ~uM_?..A...b..)|
    2380:	d2dfb272 cc03dd33 ef676cf0 f1bb03b1     r...3....lg.....
    2390:	a9ae0f76 b7726037 9416d1f4 8acabeb5     v...7`r.........
    23a0:	685f6d61 635f6c61 65676b6c 79735f6e     am_hal_clkgen_sy
    23b0:	6b6c6373 6c65735f 28746365 69203a29     sclk_select(): i
    23c0:	6c61766e 63206469 6b636f6c 74657320     nvalid clock set
    23d0:	676e6974 0000002e 2e5c2e2e 6d615c2e     ting......\..\am
    23e0:	6c61685f 6b6c635f 2e6e6567 00000063     _hal_clkgen.c...

000023f0 <g_am_hal_mcuctrl_flash_size>:
    23f0:	00004000 00008000 00010000 00020000     .@..............
    2400:	00040000 00080000 00100000 00200000     .............. .
    2410:	00400000 00800000 01000000 02000000     ..@.............
    2420:	04000000 08000000 10000000 20000000     ............... 
    2430:	6e6e6143 6520746f 6c62616e 6f6d2065     Cannot enable mo
    2440:	74206572 206e6168 20656e6f 69726570     re than one peri
    2450:	72656870 61206c61 20612074 656d6974     pheral at a time
    2460:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2470:	7277705f 6c727463 0000632e 65746e49     _pwrctrl.c..Inte
    2480:	20726567 69766964 20726f73 5453554d     ger divisor MUST
    2490:	20656220 61657267 20726574 6e616874      be greater than
    24a0:	20726f20 61757165 6f74206c 002e3120      or equal to 1..
    24b0:	2e5c2e2e 6d615c2e 6c61685f 7261755f     ..\..\am_hal_uar
    24c0:	00632e74 69797254 7420676e 6964206f     t.c.Trying to di
    24d0:	6c626173 20612065 54524155 646f6d20     sable a UART mod
    24e0:	20656c75 74616874 656f6420 74276e73     ule that doesn't
    24f0:	69786520 00007473 69797254 7420676e      exist..Trying t
    2500:	6e65206f 656c6261 55206120 20545241     o enable a UART 
    2510:	75646f6d 7420656c 20746168 73656f64     module that does
    2520:	2074276e 73697865 00000074              n't exist...
