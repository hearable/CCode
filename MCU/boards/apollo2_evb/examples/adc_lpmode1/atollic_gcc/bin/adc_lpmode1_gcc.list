
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\adc_lpmode1\atollic_gcc\bin\adc_lpmode1_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002244  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000078  10001000  00002244  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000128  10001078  000022bc  00021078  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY
  5 .debug_info   000068da  00000000  00000000  000210af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cdc  00000000  00000000  00027989  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000888  00000000  00000000  00029665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ec8  00000000  00000000  00029eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000431a  00000000  00000000  0002adb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d30  00000000  00000000  0002f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00031dff  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001808  00000000  00000000  00031e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003730  00000000  00000000  00033688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 21 06 00 00 89 06 00 00 c9 06 00 00     ....!...........
      10:	c9 06 00 00 c9 06 00 00 c9 06 00 00 00 00 00 00     ................
	...
      2c:	91 06 00 00 91 06 00 00 00 00 00 00 91 06 00 00     ................
      3c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      4c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      5c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      6c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      7c:	91 06 00 00 99 05 00 00 91 06 00 00 91 06 00 00     ................
      8c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      9c:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      ac:	91 06 00 00 91 06 00 00 91 06 00 00 91 06 00 00     ................
      bc:	91 06 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     47e:	4818      	ldr	r0, [pc, #96]	; (4e0 <itm_start+0x68>)
     480:	f000 f9a2 	bl	7c8 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     484:	f3ef 8310 	mrs	r3, PRIMASK
     488:	607b      	str	r3, [r7, #4]
     48a:	b672      	cpsid	i
     48c:	4b15      	ldr	r3, [pc, #84]	; (4e4 <itm_start+0x6c>)
     48e:	2273      	movs	r2, #115	; 0x73
     490:	601a      	str	r2, [r3, #0]
     492:	4a15      	ldr	r2, [pc, #84]	; (4e8 <itm_start+0x70>)
     494:	4b14      	ldr	r3, [pc, #80]	; (4e8 <itm_start+0x70>)
     496:	681b      	ldr	r3, [r3, #0]
     498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     49c:	6013      	str	r3, [r2, #0]
     49e:	4a13      	ldr	r2, [pc, #76]	; (4ec <itm_start+0x74>)
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <itm_start+0x74>)
     4a2:	681b      	ldr	r3, [r3, #0]
     4a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     4a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4ac:	6013      	str	r3, [r2, #0]
     4ae:	4a10      	ldr	r2, [pc, #64]	; (4f0 <itm_start+0x78>)
     4b0:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <itm_start+0x78>)
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     4b8:	6013      	str	r3, [r2, #0]
     4ba:	4b0a      	ldr	r3, [pc, #40]	; (4e4 <itm_start+0x6c>)
     4bc:	2200      	movs	r2, #0
     4be:	601a      	str	r2, [r3, #0]
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	f383 8810 	msr	PRIMASK, r3
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     4c6:	2105      	movs	r1, #5
     4c8:	480a      	ldr	r0, [pc, #40]	; (4f4 <itm_start+0x7c>)
     4ca:	f7ff ffbb 	bl	444 <am_devices_led_array_init>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     4ce:	f001 fb1d 	bl	1b0c <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     4d2:	f001 f813 	bl	14fc <am_bsp_debug_printf_enable>
}
     4d6:	bf00      	nop
     4d8:	3708      	adds	r7, #8
     4da:	46bd      	mov	sp, r7
     4dc:	bd80      	pop	{r7, pc}
     4de:	bf00      	nop
     4e0:	000015e9 	.word	0x000015e9
     4e4:	40010060 	.word	0x40010060
     4e8:	40010054 	.word	0x40010054
     4ec:	40010028 	.word	0x40010028
     4f0:	40010108 	.word	0x40010108
     4f4:	10001000 	.word	0x10001000

000004f8 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	af00      	add	r7, sp, #0
    //
    // Disable things that can't run in sleep mode.
    //
    am_bsp_debug_printf_disable();
     4fc:	f001 f83e 	bl	157c <am_bsp_debug_printf_disable>

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     500:	2001      	movs	r0, #1
     502:	f001 fd0b 	bl	1f1c <am_hal_sysctrl_sleep>

    //
    // Re-enable peripherals for run mode.
    //
    am_bsp_debug_printf_enable();
     506:	f000 fff9 	bl	14fc <am_bsp_debug_printf_enable>
}
     50a:	bf00      	nop
     50c:	bd80      	pop	{r7, pc}
     50e:	bf00      	nop

00000510 <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
     510:	b580      	push	{r7, lr}
     512:	b086      	sub	sp, #24
     514:	af00      	add	r7, sp, #0
    am_hal_adc_config_t sADCConfig;

    //
    // Enable the ADC power domain.
    //
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_ADC);
     516:	f44f 7000 	mov.w	r0, #512	; 0x200
     51a:	f001 fb69 	bl	1bf0 <am_hal_pwrctrl_periph_enable>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    sADCConfig.ui32Clock = AM_HAL_ADC_CLOCK_HFRC;
     51e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     522:	603b      	str	r3, [r7, #0]
    sADCConfig.ui32TriggerConfig = AM_HAL_ADC_TRIGGER_SOFT;
     524:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
     528:	607b      	str	r3, [r7, #4]
    sADCConfig.ui32Reference = AM_HAL_ADC_REF_INT_2P0;
     52a:	2300      	movs	r3, #0
     52c:	60bb      	str	r3, [r7, #8]
    sADCConfig.ui32ClockMode = AM_HAL_ADC_CK_LOW_POWER;
     52e:	2300      	movs	r3, #0
     530:	60fb      	str	r3, [r7, #12]
    sADCConfig.ui32PowerMode = AM_HAL_ADC_LPMODE_1;
     532:	2308      	movs	r3, #8
     534:	613b      	str	r3, [r7, #16]
    sADCConfig.ui32Repeat = AM_HAL_ADC_REPEAT;
     536:	2304      	movs	r3, #4
     538:	617b      	str	r3, [r7, #20]
    am_hal_adc_config(&sADCConfig);
     53a:	463b      	mov	r3, r7
     53c:	4618      	mov	r0, r3
     53e:	f001 f855 	bl	15ec <am_hal_adc_config>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_int_enable(AM_HAL_ADC_INT_CNVCMP);
     542:	2001      	movs	r0, #1
     544:	f001 f8c0 	bl	16c8 <am_hal_adc_int_enable>

    //
    // Set up an ADC slot
    //
    am_hal_adc_slot_config(0, AM_HAL_ADC_SLOT_AVG_1 |
     548:	f640 4101 	movw	r1, #3073	; 0xc01
     54c:	2000      	movs	r0, #0
     54e:	f001 f88f 	bl	1670 <am_hal_adc_slot_config>
                              AM_HAL_ADC_SLOT_CHSEL_TEMP |
                              AM_HAL_ADC_SLOT_ENABLE);
    //
    // Enable the ADC.
    //
    am_hal_adc_enable();
     552:	f001 f8b1 	bl	16b8 <am_hal_adc_enable>
}
     556:	bf00      	nop
     558:	3718      	adds	r7, #24
     55a:	46bd      	mov	sp, r7
     55c:	bd80      	pop	{r7, pc}
     55e:	bf00      	nop

00000560 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
     560:	b580      	push	{r7, lr}
     562:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (1 second).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
     564:	f242 224a 	movw	r2, #8778	; 0x224a
     568:	f64f 71ff 	movw	r1, #65535	; 0xffff
     56c:	2003      	movs	r0, #3
     56e:	f001 f985 	bl	187c <am_hal_ctimer_config_single>
                                   AM_HAL_CTIMER_HFRC_12KHZ |
                                   AM_HAL_CTIMER_FN_REPEAT |
                                   AM_HAL_CTIMER_INT_ENABLE |
                                   AM_HAL_CTIMER_PIN_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);
     572:	2040      	movs	r0, #64	; 0x40
     574:	f001 fa78 	bl	1a68 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 120, 0);
     578:	2300      	movs	r3, #0
     57a:	2278      	movs	r2, #120	; 0x78
     57c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     580:	2003      	movs	r0, #3
     582:	f001 fa1b 	bl	19bc <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
     586:	f001 fa5d 	bl	1a44 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
     58a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     58e:	2003      	movs	r0, #3
     590:	f001 f9e6 	bl	1960 <am_hal_ctimer_start>
}
     594:	bf00      	nop
     596:	bd80      	pop	{r7, pc}

00000598 <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read the interrupt status.
    //
    ui32Status = am_hal_adc_int_status_get(true);
     59e:	2001      	movs	r0, #1
     5a0:	f001 f8a0 	bl	16e4 <am_hal_adc_int_status_get>
     5a4:	6078      	str	r0, [r7, #4]

    //
    // Clear the ADC interrupt.
    //
    am_hal_adc_int_clear(ui32Status);
     5a6:	6878      	ldr	r0, [r7, #4]
     5a8:	f001 f896 	bl	16d8 <am_hal_adc_int_clear>

    //
    // If we got a conversion completion interrupt (which should be our only
    // ADC interrupt), go ahead and read the data.
    //
    if (ui32Status & AM_HAL_ADC_INT_CNVCMP)
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	f003 0301 	and.w	r3, r3, #1
     5b2:	2b00      	cmp	r3, #0
     5b4:	d001      	beq.n	5ba <am_adc_isr+0x22>
    {
        //
        // Read the value from the FIFO.
        //
        am_hal_adc_fifo_pop();
     5b6:	f001 f871 	bl	169c <am_hal_adc_fifo_pop>
    }

}
     5ba:	bf00      	nop
     5bc:	3708      	adds	r7, #8
     5be:	46bd      	mov	sp, r7
     5c0:	bd80      	pop	{r7, pc}
     5c2:	bf00      	nop

000005c4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	af00      	add	r7, sp, #0
    //
    // Set the system clock to maximum frequency, and set the default low-power
    // settings for this board.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     5c8:	2000      	movs	r0, #0
     5ca:	f001 f92f 	bl	182c <am_hal_clkgen_sysclk_select>
    am_hal_mcuctrl_bucks_enable();
     5ce:	f001 fc5b 	bl	1e88 <am_hal_pwrctrl_bucks_enable>
    am_hal_vcomp_disable();
     5d2:	f001 fd99 	bl	2108 <am_hal_vcomp_disable>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     5d6:	4810      	ldr	r0, [pc, #64]	; (618 <main+0x54>)
     5d8:	f001 f892 	bl	1700 <am_hal_cachectrl_enable>

    //
    // Start the ITM interface.
    //
    itm_start();
     5dc:	f7ff ff4c 	bl	478 <itm_start>

    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
     5e0:	f7ff ffbe 	bl	560 <init_timerA3_for_ADC>

    //
    // Enable interrupts.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
     5e4:	2020      	movs	r0, #32
     5e6:	f001 fa5d 	bl	1aa4 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     5ea:	f001 fa83 	bl	1af4 <am_hal_interrupt_master_enable>

    //
    // Configure the ADC
    //
    adc_config();
     5ee:	f7ff ff8f 	bl	510 <adc_config>

    //
    // Trigger the ADC sampling for the first time manually.
    //
    am_hal_adc_trigger();
     5f2:	f001 f85b 	bl	16ac <am_hal_adc_trigger>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     5f6:	f000 ff77 	bl	14e8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example at 100Hz with ADC in LPMODE=1\n");
     5fa:	4808      	ldr	r0, [pc, #32]	; (61c <main+0x58>)
     5fc:	f000 ff56 	bl	14ac <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
     600:	200a      	movs	r0, #10
     602:	f000 f849 	bl	698 <am_util_delay_ms>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     606:	f000 ffb9 	bl	157c <am_bsp_debug_printf_disable>
    while(1)
    {
        //
        // Disable interrupts
        //
        am_hal_interrupt_master_disable();
     60a:	f001 fa77 	bl	1afc <am_hal_interrupt_master_disable>

        //
        // Put the core to sleep.
        //
        sleep();
     60e:	f7ff ff73 	bl	4f8 <sleep>

        //
        // Enable interrupts.
        //
        am_hal_interrupt_master_enable();
     612:	f001 fa6f 	bl	1af4 <am_hal_interrupt_master_enable>
    }
     616:	e7f8      	b.n	60a <main+0x46>
     618:	0000219c 	.word	0x0000219c
     61c:	00002114 	.word	0x00002114

00000620 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     620:	4811      	ldr	r0, [pc, #68]	; (668 <zero_loop+0x12>)
     622:	4912      	ldr	r1, [pc, #72]	; (66c <zero_loop+0x16>)
     624:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     626:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     62a:	4811      	ldr	r0, [pc, #68]	; (670 <zero_loop+0x1a>)
     62c:	6801      	ldr	r1, [r0, #0]
     62e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     632:	6001      	str	r1, [r0, #0]
     634:	f3bf 8f4f 	dsb	sy
     638:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     63c:	480d      	ldr	r0, [pc, #52]	; (674 <zero_loop+0x1e>)
     63e:	490e      	ldr	r1, [pc, #56]	; (678 <zero_loop+0x22>)
     640:	4a0e      	ldr	r2, [pc, #56]	; (67c <zero_loop+0x26>)

00000642 <copy_loop>:
     642:	f850 3b04 	ldr.w	r3, [r0], #4
     646:	f841 3b04 	str.w	r3, [r1], #4
     64a:	4291      	cmp	r1, r2
     64c:	dbf9      	blt.n	642 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     64e:	480c      	ldr	r0, [pc, #48]	; (680 <zero_loop+0x2a>)
     650:	490c      	ldr	r1, [pc, #48]	; (684 <zero_loop+0x2e>)
     652:	f04f 0200 	mov.w	r2, #0

00000656 <zero_loop>:
     656:	4288      	cmp	r0, r1
     658:	bfb8      	it	lt
     65a:	f840 2b04 	strlt.w	r2, [r0], #4
     65e:	dbfa      	blt.n	656 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     660:	f7ff ffb0 	bl	5c4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     664:	be00      	bkpt	0x0000
}
     666:	bf00      	nop
     668:	e000ed08 	.word	0xe000ed08
     66c:	00000000 	.word	0x00000000
     670:	e000ed88 	.word	0xe000ed88
     674:	00002244 	.word	0x00002244
     678:	10001000 	.word	0x10001000
     67c:	10001078 	.word	0x10001078
     680:	10001078 	.word	0x10001078
     684:	100011a0 	.word	0x100011a0

00000688 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     688:	b480      	push	{r7}
     68a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     68c:	e7fe      	b.n	68c <am_nmi_isr+0x4>
     68e:	bf00      	nop

00000690 <am_brownout_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     690:	b480      	push	{r7}
     692:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     694:	e7fe      	b.n	694 <am_brownout_isr+0x4>
     696:	bf00      	nop

00000698 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     6a0:	f001 f8dc 	bl	185c <am_hal_clkgen_sysclk_get>
     6a4:	4602      	mov	r2, r0
     6a6:	4b07      	ldr	r3, [pc, #28]	; (6c4 <am_util_delay_ms+0x2c>)
     6a8:	fba3 2302 	umull	r2, r3, r3, r2
     6ac:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     6ae:	687a      	ldr	r2, [r7, #4]
     6b0:	fb02 f303 	mul.w	r3, r2, r3
     6b4:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     6b6:	68f8      	ldr	r0, [r7, #12]
     6b8:	f001 f9ee 	bl	1a98 <am_hal_flash_delay>
}
     6bc:	bf00      	nop
     6be:	3710      	adds	r7, #16
     6c0:	46bd      	mov	sp, r7
     6c2:	bd80      	pop	{r7, pc}
     6c4:	057619f1 	.word	0x057619f1

000006c8 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     6c8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     6ca:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     6cc:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     6ce:	f000 f809 	bl	6e4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     6d2:	bd01      	pop	{r0, pc}
}
     6d4:	bf00      	nop
     6d6:	4618      	mov	r0, r3

000006d8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     6d8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     6da:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     6dc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     6de:	4770      	bx	lr
}
     6e0:	bf00      	nop
     6e2:	4618      	mov	r0, r3

000006e4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	b096      	sub	sp, #88	; 0x58
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     6ec:	f107 030c 	add.w	r3, r7, #12
     6f0:	2200      	movs	r2, #0
     6f2:	601a      	str	r2, [r3, #0]
     6f4:	605a      	str	r2, [r3, #4]
     6f6:	609a      	str	r2, [r3, #8]
     6f8:	60da      	str	r2, [r3, #12]
     6fa:	611a      	str	r2, [r3, #16]
     6fc:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     6fe:	2300      	movs	r3, #0
     700:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     704:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     706:	4b2e      	ldr	r3, [pc, #184]	; (7c0 <am_util_faultisr_collect_data+0xdc>)
     708:	681b      	ldr	r3, [r3, #0]
     70a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     70e:	b2db      	uxtb	r3, r3
     710:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     716:	0a1b      	lsrs	r3, r3, #8
     718:	b2db      	uxtb	r3, r3
     71a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     720:	0c1b      	lsrs	r3, r3, #16
     722:	b29b      	uxth	r3, r3
     724:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     728:	4b26      	ldr	r3, [pc, #152]	; (7c4 <am_util_faultisr_collect_data+0xe0>)
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     72e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     732:	b2db      	uxtb	r3, r3
     734:	f003 0302 	and.w	r3, r3, #2
     738:	2b00      	cmp	r3, #0
     73a:	d005      	beq.n	748 <am_util_faultisr_collect_data+0x64>
     73c:	6879      	ldr	r1, [r7, #4]
     73e:	2006      	movs	r0, #6
     740:	f7ff ffca 	bl	6d8 <getStackedReg>
     744:	4603      	mov	r3, r0
     746:	e001      	b.n	74c <am_util_faultisr_collect_data+0x68>
     748:	f04f 33ff 	mov.w	r3, #4294967295
     74c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     74e:	6879      	ldr	r1, [r7, #4]
     750:	2000      	movs	r0, #0
     752:	f7ff ffc1 	bl	6d8 <getStackedReg>
     756:	4603      	mov	r3, r0
     758:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     75a:	6879      	ldr	r1, [r7, #4]
     75c:	2001      	movs	r0, #1
     75e:	f7ff ffbb 	bl	6d8 <getStackedReg>
     762:	4603      	mov	r3, r0
     764:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     766:	6879      	ldr	r1, [r7, #4]
     768:	2002      	movs	r0, #2
     76a:	f7ff ffb5 	bl	6d8 <getStackedReg>
     76e:	4603      	mov	r3, r0
     770:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     772:	6879      	ldr	r1, [r7, #4]
     774:	2003      	movs	r0, #3
     776:	f7ff ffaf 	bl	6d8 <getStackedReg>
     77a:	4603      	mov	r3, r0
     77c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     77e:	6879      	ldr	r1, [r7, #4]
     780:	2004      	movs	r0, #4
     782:	f7ff ffa9 	bl	6d8 <getStackedReg>
     786:	4603      	mov	r3, r0
     788:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     78a:	6879      	ldr	r1, [r7, #4]
     78c:	2005      	movs	r0, #5
     78e:	f7ff ffa3 	bl	6d8 <getStackedReg>
     792:	4603      	mov	r3, r0
     794:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     796:	6879      	ldr	r1, [r7, #4]
     798:	2006      	movs	r0, #6
     79a:	f7ff ff9d 	bl	6d8 <getStackedReg>
     79e:	4603      	mov	r3, r0
     7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     7a2:	6879      	ldr	r1, [r7, #4]
     7a4:	2007      	movs	r0, #7
     7a6:	f7ff ff97 	bl	6d8 <getStackedReg>
     7aa:	4603      	mov	r3, r0
     7ac:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     7ae:	f107 030c 	add.w	r3, r7, #12
     7b2:	4618      	mov	r0, r3
     7b4:	f001 f9fa 	bl	1bac <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     7b8:	2300      	movs	r3, #0
     7ba:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     7bc:	e7fe      	b.n	7bc <am_util_faultisr_collect_data+0xd8>
     7be:	bf00      	nop
     7c0:	e000ed28 	.word	0xe000ed28
     7c4:	e000ed38 	.word	0xe000ed38

000007c8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     7c8:	b480      	push	{r7}
     7ca:	b083      	sub	sp, #12
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     7d0:	4a04      	ldr	r2, [pc, #16]	; (7e4 <am_util_stdio_printf_init+0x1c>)
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	6013      	str	r3, [r2, #0]
}
     7d6:	bf00      	nop
     7d8:	370c      	adds	r7, #12
     7da:	46bd      	mov	sp, r7
     7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	1000119c 	.word	0x1000119c

000007e8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     7e8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7ec:	b096      	sub	sp, #88	; 0x58
     7ee:	af00      	add	r7, sp, #0
     7f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     7f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7f8:	0025      	movs	r5, r4
     7fa:	2600      	movs	r6, #0
     7fc:	ea55 0306 	orrs.w	r3, r5, r6
     800:	f000 809e 	beq.w	940 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     804:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     808:	0862      	lsrs	r2, r4, #1
     80a:	ea4f 0133 	mov.w	r1, r3, rrx
     80e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     812:	ea4f 0893 	mov.w	r8, r3, lsr #2
     816:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     81a:	ea4f 0994 	mov.w	r9, r4, lsr #2
     81e:	eb11 0308 	adds.w	r3, r1, r8
     822:	eb42 0409 	adc.w	r4, r2, r9
     826:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     82a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     82e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     832:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     836:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     83a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     83e:	eb13 030a 	adds.w	r3, r3, sl
     842:	eb44 040b 	adc.w	r4, r4, fp
     846:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     84a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     84e:	0a1a      	lsrs	r2, r3, #8
     850:	62ba      	str	r2, [r7, #40]	; 0x28
     852:	6aba      	ldr	r2, [r7, #40]	; 0x28
     854:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     858:	62ba      	str	r2, [r7, #40]	; 0x28
     85a:	0a23      	lsrs	r3, r4, #8
     85c:	62fb      	str	r3, [r7, #44]	; 0x2c
     85e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     862:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     866:	18c9      	adds	r1, r1, r3
     868:	eb42 0204 	adc.w	r2, r2, r4
     86c:	460b      	mov	r3, r1
     86e:	4614      	mov	r4, r2
     870:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     874:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     878:	0c1a      	lsrs	r2, r3, #16
     87a:	623a      	str	r2, [r7, #32]
     87c:	6a3a      	ldr	r2, [r7, #32]
     87e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     882:	623a      	str	r2, [r7, #32]
     884:	0c23      	lsrs	r3, r4, #16
     886:	627b      	str	r3, [r7, #36]	; 0x24
     888:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     88c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     890:	18c9      	adds	r1, r1, r3
     892:	eb42 0204 	adc.w	r2, r2, r4
     896:	460b      	mov	r3, r1
     898:	4614      	mov	r4, r2
     89a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     89e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8a2:	0023      	movs	r3, r4
     8a4:	603b      	str	r3, [r7, #0]
     8a6:	2300      	movs	r3, #0
     8a8:	607b      	str	r3, [r7, #4]
     8aa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8ae:	e897 0006 	ldmia.w	r7, {r1, r2}
     8b2:	18c9      	adds	r1, r1, r3
     8b4:	eb42 0204 	adc.w	r2, r2, r4
     8b8:	460b      	mov	r3, r1
     8ba:	4614      	mov	r4, r2
     8bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     8c0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8c4:	08da      	lsrs	r2, r3, #3
     8c6:	613a      	str	r2, [r7, #16]
     8c8:	693a      	ldr	r2, [r7, #16]
     8ca:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     8ce:	613a      	str	r2, [r7, #16]
     8d0:	08e3      	lsrs	r3, r4, #3
     8d2:	617b      	str	r3, [r7, #20]
     8d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     8d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     8dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8e0:	18db      	adds	r3, r3, r3
     8e2:	eb44 0404 	adc.w	r4, r4, r4
     8e6:	00a2      	lsls	r2, r4, #2
     8e8:	60fa      	str	r2, [r7, #12]
     8ea:	68fa      	ldr	r2, [r7, #12]
     8ec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     8f0:	60fa      	str	r2, [r7, #12]
     8f2:	009a      	lsls	r2, r3, #2
     8f4:	60ba      	str	r2, [r7, #8]
     8f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     8fa:	18c9      	adds	r1, r1, r3
     8fc:	eb42 0204 	adc.w	r2, r2, r4
     900:	460b      	mov	r3, r1
     902:	4614      	mov	r4, r2
     904:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     908:	1acb      	subs	r3, r1, r3
     90a:	eb62 0404 	sbc.w	r4, r2, r4
     90e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     912:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     916:	3306      	adds	r3, #6
     918:	f144 0400 	adc.w	r4, r4, #0
     91c:	091a      	lsrs	r2, r3, #4
     91e:	61ba      	str	r2, [r7, #24]
     920:	69ba      	ldr	r2, [r7, #24]
     922:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     926:	61ba      	str	r2, [r7, #24]
     928:	0923      	lsrs	r3, r4, #4
     92a:	61fb      	str	r3, [r7, #28]
     92c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     934:	18c9      	adds	r1, r1, r3
     936:	eb42 0204 	adc.w	r2, r2, r4
     93a:	460b      	mov	r3, r1
     93c:	4614      	mov	r4, r2
     93e:	e029      	b.n	994 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     942:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     946:	085a      	lsrs	r2, r3, #1
     948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     94a:	089b      	lsrs	r3, r3, #2
     94c:	4413      	add	r3, r2
     94e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     952:	091b      	lsrs	r3, r3, #4
     954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     956:	4413      	add	r3, r2
     958:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     95c:	0a1b      	lsrs	r3, r3, #8
     95e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     960:	4413      	add	r3, r2
     962:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     966:	0c1b      	lsrs	r3, r3, #16
     968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     96a:	4413      	add	r3, r2
     96c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     970:	08db      	lsrs	r3, r3, #3
     972:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     976:	4613      	mov	r3, r2
     978:	009b      	lsls	r3, r3, #2
     97a:	4413      	add	r3, r2
     97c:	005b      	lsls	r3, r3, #1
     97e:	461a      	mov	r2, r3
     980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     982:	1a9b      	subs	r3, r3, r2
     984:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     988:	3306      	adds	r3, #6
     98a:	091a      	lsrs	r2, r3, #4
     98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     98e:	4413      	add	r3, r2
     990:	f04f 0400 	mov.w	r4, #0
    }
}
     994:	4618      	mov	r0, r3
     996:	4621      	mov	r1, r4
     998:	3758      	adds	r7, #88	; 0x58
     99a:	46bd      	mov	sp, r7
     99c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     9a0:	4770      	bx	lr
     9a2:	bf00      	nop

000009a4 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     9a4:	b590      	push	{r4, r7, lr}
     9a6:	b085      	sub	sp, #20
     9a8:	af00      	add	r7, sp, #0
     9aa:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     9ae:	683a      	ldr	r2, [r7, #0]
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	4313      	orrs	r3, r2
     9b4:	2b00      	cmp	r3, #0
     9b6:	bf0c      	ite	eq
     9b8:	2301      	moveq	r3, #1
     9ba:	2300      	movne	r3, #0
     9bc:	b2db      	uxtb	r3, r3
     9be:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     9c0:	e008      	b.n	9d4 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     9c2:	e9d7 0100 	ldrd	r0, r1, [r7]
     9c6:	f7ff ff0f 	bl	7e8 <divu64_10>
     9ca:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     9ce:	68fb      	ldr	r3, [r7, #12]
     9d0:	3301      	adds	r3, #1
     9d2:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     9d4:	e897 0018 	ldmia.w	r7, {r3, r4}
     9d8:	4323      	orrs	r3, r4
     9da:	d1f2      	bne.n	9c2 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     9dc:	68fb      	ldr	r3, [r7, #12]
}
     9de:	4618      	mov	r0, r3
     9e0:	3714      	adds	r7, #20
     9e2:	46bd      	mov	sp, r7
     9e4:	bd90      	pop	{r4, r7, pc}
     9e6:	bf00      	nop

000009e8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     9e8:	b590      	push	{r4, r7, lr}
     9ea:	b083      	sub	sp, #12
     9ec:	af00      	add	r7, sp, #0
     9ee:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     9f2:	e897 0018 	ldmia.w	r7, {r3, r4}
     9f6:	2b00      	cmp	r3, #0
     9f8:	f174 0300 	sbcs.w	r3, r4, #0
     9fc:	da06      	bge.n	a0c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     9fe:	e897 0018 	ldmia.w	r7, {r3, r4}
     a02:	425b      	negs	r3, r3
     a04:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     a08:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     a0c:	e897 0018 	ldmia.w	r7, {r3, r4}
     a10:	4618      	mov	r0, r3
     a12:	4621      	mov	r1, r4
     a14:	f7ff ffc6 	bl	9a4 <ndigits_in_u64>
     a18:	4603      	mov	r3, r0
}
     a1a:	4618      	mov	r0, r3
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	bd90      	pop	{r4, r7, pc}
     a22:	bf00      	nop

00000a24 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     a24:	b490      	push	{r4, r7}
     a26:	b084      	sub	sp, #16
     a28:	af00      	add	r7, sp, #0
     a2a:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     a2e:	6839      	ldr	r1, [r7, #0]
     a30:	687a      	ldr	r2, [r7, #4]
     a32:	430a      	orrs	r2, r1
     a34:	2a00      	cmp	r2, #0
     a36:	bf0c      	ite	eq
     a38:	2201      	moveq	r2, #1
     a3a:	2200      	movne	r2, #0
     a3c:	b2d2      	uxtb	r2, r2
     a3e:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     a40:	e00a      	b.n	a58 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     a42:	e897 0006 	ldmia.w	r7, {r1, r2}
     a46:	090b      	lsrs	r3, r1, #4
     a48:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     a4c:	0914      	lsrs	r4, r2, #4
     a4e:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     a52:	68fa      	ldr	r2, [r7, #12]
     a54:	3201      	adds	r2, #1
     a56:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     a58:	e897 0006 	ldmia.w	r7, {r1, r2}
     a5c:	430a      	orrs	r2, r1
     a5e:	d1f0      	bne.n	a42 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     a60:	68fb      	ldr	r3, [r7, #12]
}
     a62:	4618      	mov	r0, r3
     a64:	3710      	adds	r7, #16
     a66:	46bd      	mov	sp, r7
     a68:	bc90      	pop	{r4, r7}
     a6a:	4770      	bx	lr

00000a6c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     a6c:	b480      	push	{r7}
     a6e:	b087      	sub	sp, #28
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
     a74:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     a76:	2300      	movs	r3, #0
     a78:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     a7a:	2300      	movs	r3, #0
     a7c:	613b      	str	r3, [r7, #16]
     a7e:	2300      	movs	r3, #0
     a80:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b2d      	cmp	r3, #45	; 0x2d
     a88:	d11b      	bne.n	ac2 <decstr_to_int+0x56>
    {
        bNeg = true;
     a8a:	2301      	movs	r3, #1
     a8c:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	3301      	adds	r3, #1
     a92:	607b      	str	r3, [r7, #4]
        uCnt++;
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	3301      	adds	r3, #1
     a98:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     a9a:	e012      	b.n	ac2 <decstr_to_int+0x56>
    {
        ++uCnt;
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	3301      	adds	r3, #1
     aa0:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     aa2:	693a      	ldr	r2, [r7, #16]
     aa4:	4613      	mov	r3, r2
     aa6:	009b      	lsls	r3, r3, #2
     aa8:	4413      	add	r3, r2
     aaa:	005b      	lsls	r3, r3, #1
     aac:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	461a      	mov	r2, r3
     ab4:	693b      	ldr	r3, [r7, #16]
     ab6:	4413      	add	r3, r2
     ab8:	3b30      	subs	r3, #48	; 0x30
     aba:	613b      	str	r3, [r7, #16]
        pcStr++;
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	3301      	adds	r3, #1
     ac0:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	781b      	ldrb	r3, [r3, #0]
     ac6:	2b2f      	cmp	r3, #47	; 0x2f
     ac8:	d903      	bls.n	ad2 <decstr_to_int+0x66>
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	781b      	ldrb	r3, [r3, #0]
     ace:	2b39      	cmp	r3, #57	; 0x39
     ad0:	d9e4      	bls.n	a9c <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d002      	beq.n	ade <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     ad8:	683b      	ldr	r3, [r7, #0]
     ada:	68fa      	ldr	r2, [r7, #12]
     adc:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     ade:	7dfb      	ldrb	r3, [r7, #23]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d002      	beq.n	aea <decstr_to_int+0x7e>
     ae4:	693b      	ldr	r3, [r7, #16]
     ae6:	425b      	negs	r3, r3
     ae8:	e000      	b.n	aec <decstr_to_int+0x80>
     aea:	693b      	ldr	r3, [r7, #16]
}
     aec:	4618      	mov	r0, r3
     aee:	371c      	adds	r7, #28
     af0:	46bd      	mov	sp, r7
     af2:	f85d 7b04 	ldr.w	r7, [sp], #4
     af6:	4770      	bx	lr

00000af8 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     af8:	b590      	push	{r4, r7, lr}
     afa:	b091      	sub	sp, #68	; 0x44
     afc:	af00      	add	r7, sp, #0
     afe:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b02:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     b04:	2300      	movs	r3, #0
     b06:	63fb      	str	r3, [r7, #60]	; 0x3c
     b08:	2300      	movs	r3, #0
     b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     b10:	f7ff fe6a 	bl	7e8 <divu64_10>
     b14:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     b18:	68b9      	ldr	r1, [r7, #8]
     b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b1c:	4613      	mov	r3, r2
     b1e:	009b      	lsls	r3, r3, #2
     b20:	4413      	add	r3, r2
     b22:	005b      	lsls	r3, r3, #1
     b24:	1acb      	subs	r3, r1, r3
     b26:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b2a:	1c5a      	adds	r2, r3, #1
     b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
     b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b30:	b2d2      	uxtb	r2, r2
     b32:	3230      	adds	r2, #48	; 0x30
     b34:	b2d2      	uxtb	r2, r2
     b36:	f107 0140 	add.w	r1, r7, #64	; 0x40
     b3a:	440b      	add	r3, r1
     b3c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     b40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b44:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     b48:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     b4c:	4323      	orrs	r3, r4
     b4e:	d1dd      	bne.n	b0c <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b52:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	2b00      	cmp	r3, #0
     b58:	d011      	beq.n	b7e <uint64_to_str+0x86>
    {
        while ( ix-- )
     b5a:	e008      	b.n	b6e <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	1c5a      	adds	r2, r3, #1
     b60:	607a      	str	r2, [r7, #4]
     b62:	f107 0110 	add.w	r1, r7, #16
     b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b68:	440a      	add	r2, r1
     b6a:	7812      	ldrb	r2, [r2, #0]
     b6c:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b70:	1e5a      	subs	r2, r3, #1
     b72:	63fa      	str	r2, [r7, #60]	; 0x3c
     b74:	2b00      	cmp	r3, #0
     b76:	d1f1      	bne.n	b5c <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	2200      	movs	r2, #0
     b7c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     b80:	4618      	mov	r0, r3
     b82:	3744      	adds	r7, #68	; 0x44
     b84:	46bd      	mov	sp, r7
     b86:	bd90      	pop	{r4, r7, pc}

00000b88 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     b88:	b4b0      	push	{r4, r5, r7}
     b8a:	b08d      	sub	sp, #52	; 0x34
     b8c:	af00      	add	r7, sp, #0
     b8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b92:	607a      	str	r2, [r7, #4]
     b94:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     b96:	2300      	movs	r3, #0
     b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b9e:	4313      	orrs	r3, r2
     ba0:	d131      	bne.n	c06 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ba4:	1c5a      	adds	r2, r3, #1
     ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
     ba8:	f107 0230 	add.w	r2, r7, #48	; 0x30
     bac:	4413      	add	r3, r2
     bae:	2230      	movs	r2, #48	; 0x30
     bb0:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     bb4:	e027      	b.n	c06 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     bb6:	7a3b      	ldrb	r3, [r7, #8]
     bb8:	f003 030f 	and.w	r3, r3, #15
     bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     bc4:	2b09      	cmp	r3, #9
     bc6:	d90a      	bls.n	bde <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     bc8:	78fb      	ldrb	r3, [r7, #3]
     bca:	2b00      	cmp	r3, #0
     bcc:	d001      	beq.n	bd2 <uint64_to_hexstr+0x4a>
     bce:	2227      	movs	r2, #39	; 0x27
     bd0:	e000      	b.n	bd4 <uint64_to_hexstr+0x4c>
     bd2:	2207      	movs	r2, #7
     bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     bd8:	4413      	add	r3, r2
     bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be0:	1c5a      	adds	r2, r3, #1
     be2:	62fa      	str	r2, [r7, #44]	; 0x2c
     be4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     be8:	3230      	adds	r2, #48	; 0x30
     bea:	b2d2      	uxtb	r2, r2
     bec:	f107 0130 	add.w	r1, r7, #48	; 0x30
     bf0:	440b      	add	r3, r1
     bf2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bfa:	0914      	lsrs	r4, r2, #4
     bfc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     c00:	091d      	lsrs	r5, r3, #4
     c02:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c0a:	4313      	orrs	r3, r2
     c0c:	d1d3      	bne.n	bb6 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c10:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	2b00      	cmp	r3, #0
     c16:	d011      	beq.n	c3c <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     c18:	e008      	b.n	c2c <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	1c5a      	adds	r2, r3, #1
     c1e:	607a      	str	r2, [r7, #4]
     c20:	f107 0110 	add.w	r1, r7, #16
     c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c26:	440a      	add	r2, r1
     c28:	7812      	ldrb	r2, [r2, #0]
     c2a:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c2e:	1e5a      	subs	r2, r3, #1
     c30:	62fa      	str	r2, [r7, #44]	; 0x2c
     c32:	2b00      	cmp	r3, #0
     c34:	d1f1      	bne.n	c1a <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	2200      	movs	r2, #0
     c3a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     c3e:	4618      	mov	r0, r3
     c40:	3734      	adds	r7, #52	; 0x34
     c42:	46bd      	mov	sp, r7
     c44:	bcb0      	pop	{r4, r5, r7}
     c46:	4770      	bx	lr

00000c48 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     c48:	b480      	push	{r7}
     c4a:	b085      	sub	sp, #20
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     c50:	2300      	movs	r3, #0
     c52:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	2b00      	cmp	r3, #0
     c58:	d104      	bne.n	c64 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     c5a:	68fb      	ldr	r3, [r7, #12]
     c5c:	e009      	b.n	c72 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     c5e:	68fb      	ldr	r3, [r7, #12]
     c60:	3301      	adds	r3, #1
     c62:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	1c5a      	adds	r2, r3, #1
     c68:	607a      	str	r2, [r7, #4]
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d1f6      	bne.n	c5e <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     c70:	68fb      	ldr	r3, [r7, #12]
}
     c72:	4618      	mov	r0, r3
     c74:	3714      	adds	r7, #20
     c76:	46bd      	mov	sp, r7
     c78:	f85d 7b04 	ldr.w	r7, [sp], #4
     c7c:	4770      	bx	lr
     c7e:	bf00      	nop

00000c80 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     c80:	b480      	push	{r7}
     c82:	b087      	sub	sp, #28
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	460b      	mov	r3, r1
     c8a:	607a      	str	r2, [r7, #4]
     c8c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     c8e:	2300      	movs	r3, #0
     c90:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	2b00      	cmp	r3, #0
     c96:	dc0c      	bgt.n	cb2 <padbuffer+0x32>
    {
        return i32Cnt;
     c98:	697b      	ldr	r3, [r7, #20]
     c9a:	e010      	b.n	cbe <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     c9c:	68fb      	ldr	r3, [r7, #12]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d004      	beq.n	cac <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	1c5a      	adds	r2, r3, #1
     ca6:	60fa      	str	r2, [r7, #12]
     ca8:	7afa      	ldrb	r2, [r7, #11]
     caa:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     cac:	697b      	ldr	r3, [r7, #20]
     cae:	3301      	adds	r3, #1
     cb0:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	1e5a      	subs	r2, r3, #1
     cb6:	607a      	str	r2, [r7, #4]
     cb8:	2b00      	cmp	r3, #0
     cba:	d1ef      	bne.n	c9c <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     cbc:	697b      	ldr	r3, [r7, #20]
}
     cbe:	4618      	mov	r0, r3
     cc0:	371c      	adds	r7, #28
     cc2:	46bd      	mov	sp, r7
     cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc8:	4770      	bx	lr
     cca:	bf00      	nop

00000ccc <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ccc:	b590      	push	{r4, r7, lr}
     cce:	b08f      	sub	sp, #60	; 0x3c
     cd0:	af00      	add	r7, sp, #0
     cd2:	60f8      	str	r0, [r7, #12]
     cd4:	60b9      	str	r1, [r7, #8]
     cd6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     cd8:	68bb      	ldr	r3, [r7, #8]
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ce0:	2b03      	cmp	r3, #3
     ce2:	dc02      	bgt.n	cea <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     ce4:	f06f 0302 	mvn.w	r3, #2
     ce8:	e0d4      	b.n	e94 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     cea:	edd7 7a03 	vldr	s15, [r7, #12]
     cee:	eef5 7a40 	vcmp.f32	s15, #0.0
     cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cf6:	d104      	bne.n	d02 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     cf8:	68bb      	ldr	r3, [r7, #8]
     cfa:	4a68      	ldr	r2, [pc, #416]	; (e9c <ftoa+0x1d0>)
     cfc:	601a      	str	r2, [r3, #0]
        return 3;
     cfe:	2303      	movs	r3, #3
     d00:	e0c8      	b.n	e94 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	15db      	asrs	r3, r3, #23
     d0e:	b2db      	uxtb	r3, r3
     d10:	3b7f      	subs	r3, #127	; 0x7f
     d12:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     d14:	697b      	ldr	r3, [r7, #20]
     d16:	f3c3 0316 	ubfx	r3, r3, #0, #23
     d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d1e:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     d20:	2300      	movs	r3, #0
     d22:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     d24:	2300      	movs	r3, #0
     d26:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     d28:	6a3b      	ldr	r3, [r7, #32]
     d2a:	2b1e      	cmp	r3, #30
     d2c:	dd02      	ble.n	d34 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     d2e:	f06f 0301 	mvn.w	r3, #1
     d32:	e0af      	b.n	e94 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     d34:	6a3b      	ldr	r3, [r7, #32]
     d36:	f113 0f17 	cmn.w	r3, #23
     d3a:	da02      	bge.n	d42 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     d3c:	f04f 33ff 	mov.w	r3, #4294967295
     d40:	e0a8      	b.n	e94 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     d42:	6a3b      	ldr	r3, [r7, #32]
     d44:	2b16      	cmp	r3, #22
     d46:	dd06      	ble.n	d56 <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     d48:	6a3b      	ldr	r3, [r7, #32]
     d4a:	3b17      	subs	r3, #23
     d4c:	69fa      	ldr	r2, [r7, #28]
     d4e:	fa02 f303 	lsl.w	r3, r2, r3
     d52:	637b      	str	r3, [r7, #52]	; 0x34
     d54:	e01a      	b.n	d8c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     d56:	6a3b      	ldr	r3, [r7, #32]
     d58:	2b00      	cmp	r3, #0
     d5a:	db0f      	blt.n	d7c <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     d5c:	6a3b      	ldr	r3, [r7, #32]
     d5e:	f1c3 0317 	rsb	r3, r3, #23
     d62:	69fa      	ldr	r2, [r7, #28]
     d64:	fa42 f303 	asr.w	r3, r2, r3
     d68:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     d6a:	6a3b      	ldr	r3, [r7, #32]
     d6c:	3301      	adds	r3, #1
     d6e:	69fa      	ldr	r2, [r7, #28]
     d70:	fa02 f303 	lsl.w	r3, r2, r3
     d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d78:	633b      	str	r3, [r7, #48]	; 0x30
     d7a:	e007      	b.n	d8c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     d7c:	69fb      	ldr	r3, [r7, #28]
     d7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     d82:	6a3b      	ldr	r3, [r7, #32]
     d84:	43db      	mvns	r3, r3
     d86:	fa42 f303 	asr.w	r3, r2, r3
     d8a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	2b00      	cmp	r3, #0
     d90:	da04      	bge.n	d9c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     d92:	68bb      	ldr	r3, [r7, #8]
     d94:	1c5a      	adds	r2, r3, #1
     d96:	60ba      	str	r2, [r7, #8]
     d98:	222d      	movs	r2, #45	; 0x2d
     d9a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d9e:	2b00      	cmp	r3, #0
     da0:	d105      	bne.n	dae <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     da2:	68bb      	ldr	r3, [r7, #8]
     da4:	1c5a      	adds	r2, r3, #1
     da6:	60ba      	str	r2, [r7, #8]
     da8:	2230      	movs	r2, #48	; 0x30
     daa:	701a      	strb	r2, [r3, #0]
     dac:	e021      	b.n	df2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     db0:	2b00      	cmp	r3, #0
     db2:	dd08      	ble.n	dc6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     db6:	ea4f 74e3 	mov.w	r4, r3, asr #31
     dba:	68ba      	ldr	r2, [r7, #8]
     dbc:	4618      	mov	r0, r3
     dbe:	4621      	mov	r1, r4
     dc0:	f7ff fe9a 	bl	af8 <uint64_to_str>
     dc4:	e011      	b.n	dea <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     dc6:	68bb      	ldr	r3, [r7, #8]
     dc8:	1c5a      	adds	r2, r3, #1
     dca:	60ba      	str	r2, [r7, #8]
     dcc:	222d      	movs	r2, #45	; 0x2d
     dce:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd2:	425b      	negs	r3, r3
     dd4:	ea4f 74e3 	mov.w	r4, r3, asr #31
     dd8:	68ba      	ldr	r2, [r7, #8]
     dda:	4618      	mov	r0, r3
     ddc:	4621      	mov	r1, r4
     dde:	f7ff fe8b 	bl	af8 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     de2:	e002      	b.n	dea <ftoa+0x11e>
        {
            pcBuf++;
     de4:	68bb      	ldr	r3, [r7, #8]
     de6:	3301      	adds	r3, #1
     de8:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     dea:	68bb      	ldr	r3, [r7, #8]
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	2b00      	cmp	r3, #0
     df0:	d1f8      	bne.n	de4 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     df2:	68bb      	ldr	r3, [r7, #8]
     df4:	1c5a      	adds	r2, r3, #1
     df6:	60ba      	str	r2, [r7, #8]
     df8:	222e      	movs	r2, #46	; 0x2e
     dfa:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dfe:	2b00      	cmp	r3, #0
     e00:	d105      	bne.n	e0e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     e02:	68bb      	ldr	r3, [r7, #8]
     e04:	1c5a      	adds	r2, r3, #1
     e06:	60ba      	str	r2, [r7, #8]
     e08:	2230      	movs	r2, #48	; 0x30
     e0a:	701a      	strb	r2, [r3, #0]
     e0c:	e03c      	b.n	e88 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     e0e:	68ba      	ldr	r2, [r7, #8]
     e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e12:	1ad3      	subs	r3, r2, r3
     e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e16:	1ad3      	subs	r3, r2, r3
     e18:	3b01      	subs	r3, #1
     e1a:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     e1c:	69ba      	ldr	r2, [r7, #24]
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	4293      	cmp	r3, r2
     e22:	bfa8      	it	ge
     e24:	4613      	movge	r3, r2
     e26:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     e28:	2300      	movs	r3, #0
     e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
     e2c:	e015      	b.n	e5a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e30:	4613      	mov	r3, r2
     e32:	009b      	lsls	r3, r3, #2
     e34:	4413      	add	r3, r2
     e36:	005b      	lsls	r3, r3, #1
     e38:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     e3a:	68bb      	ldr	r3, [r7, #8]
     e3c:	1c5a      	adds	r2, r3, #1
     e3e:	60ba      	str	r2, [r7, #8]
     e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e42:	1612      	asrs	r2, r2, #24
     e44:	b2d2      	uxtb	r2, r2
     e46:	3230      	adds	r2, #48	; 0x30
     e48:	b2d2      	uxtb	r2, r2
     e4a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e52:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e56:	3301      	adds	r3, #1
     e58:	62fb      	str	r3, [r7, #44]	; 0x2c
     e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e5c:	69bb      	ldr	r3, [r7, #24]
     e5e:	429a      	cmp	r2, r3
     e60:	dbe5      	blt.n	e2e <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     e62:	68bb      	ldr	r3, [r7, #8]
     e64:	3b01      	subs	r3, #1
     e66:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     e68:	e002      	b.n	e70 <ftoa+0x1a4>
        {
            --pcBuf;
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	3b01      	subs	r3, #1
     e6e:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     e70:	68bb      	ldr	r3, [r7, #8]
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	2b30      	cmp	r3, #48	; 0x30
     e76:	d104      	bne.n	e82 <ftoa+0x1b6>
     e78:	68bb      	ldr	r3, [r7, #8]
     e7a:	3b01      	subs	r3, #1
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b2e      	cmp	r3, #46	; 0x2e
     e80:	d1f3      	bne.n	e6a <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     e82:	68bb      	ldr	r3, [r7, #8]
     e84:	3301      	adds	r3, #1
     e86:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     e88:	68bb      	ldr	r3, [r7, #8]
     e8a:	2200      	movs	r2, #0
     e8c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     e8e:	68ba      	ldr	r2, [r7, #8]
     e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e92:	1ad3      	subs	r3, r2, r3
} // ftoa()
     e94:	4618      	mov	r0, r3
     e96:	373c      	adds	r7, #60	; 0x3c
     e98:	46bd      	mov	sp, r7
     e9a:	bd90      	pop	{r4, r7, pc}
     e9c:	00302e30 	.word	0x00302e30

00000ea0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ea0:	b590      	push	{r4, r7, lr}
     ea2:	b095      	sub	sp, #84	; 0x54
     ea4:	af00      	add	r7, sp, #0
     ea6:	60f8      	str	r0, [r7, #12]
     ea8:	60b9      	str	r1, [r7, #8]
     eaa:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     eac:	2300      	movs	r3, #0
     eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     eb0:	2300      	movs	r3, #0
     eb2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     eb4:	e2e3      	b.n	147e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     eb6:	2306      	movs	r3, #6
     eb8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     eba:	68bb      	ldr	r3, [r7, #8]
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	2b25      	cmp	r3, #37	; 0x25
     ec0:	d01f      	beq.n	f02 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d015      	beq.n	ef4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     ec8:	68bb      	ldr	r3, [r7, #8]
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	2b0a      	cmp	r3, #10
     ece:	d10b      	bne.n	ee8 <am_util_stdio_vsprintf+0x48>
     ed0:	4bb1      	ldr	r3, [pc, #708]	; (1198 <am_util_stdio_vsprintf+0x2f8>)
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d007      	beq.n	ee8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	1c5a      	adds	r2, r3, #1
     edc:	60fa      	str	r2, [r7, #12]
     ede:	220d      	movs	r2, #13
     ee0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee4:	3301      	adds	r3, #1
     ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	1c5a      	adds	r2, r3, #1
     eec:	60fa      	str	r2, [r7, #12]
     eee:	68ba      	ldr	r2, [r7, #8]
     ef0:	7812      	ldrb	r2, [r2, #0]
     ef2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	3301      	adds	r3, #1
     ef8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     efc:	3301      	adds	r3, #1
     efe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     f00:	e2bd      	b.n	147e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     f02:	68bb      	ldr	r3, [r7, #8]
     f04:	3301      	adds	r3, #1
     f06:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     f08:	2300      	movs	r3, #0
     f0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     f0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     f16:	2320      	movs	r3, #32
     f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     f1c:	68bb      	ldr	r3, [r7, #8]
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2b30      	cmp	r3, #48	; 0x30
     f22:	d105      	bne.n	f30 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     f24:	2330      	movs	r3, #48	; 0x30
     f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	3301      	adds	r3, #1
     f2e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     f30:	f107 0310 	add.w	r3, r7, #16
     f34:	4619      	mov	r1, r3
     f36:	68b8      	ldr	r0, [r7, #8]
     f38:	f7ff fd98 	bl	a6c <decstr_to_int>
     f3c:	4603      	mov	r3, r0
     f3e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     f40:	693b      	ldr	r3, [r7, #16]
     f42:	68ba      	ldr	r2, [r7, #8]
     f44:	4413      	add	r3, r2
     f46:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	2b73      	cmp	r3, #115	; 0x73
     f4e:	d005      	beq.n	f5c <am_util_stdio_vsprintf+0xbc>
     f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f52:	2b00      	cmp	r3, #0
     f54:	da02      	bge.n	f5c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f58:	425b      	negs	r3, r3
     f5a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     f5c:	68bb      	ldr	r3, [r7, #8]
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b2e      	cmp	r3, #46	; 0x2e
     f62:	d10e      	bne.n	f82 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     f64:	68bb      	ldr	r3, [r7, #8]
     f66:	3301      	adds	r3, #1
     f68:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     f6a:	f107 0310 	add.w	r3, r7, #16
     f6e:	4619      	mov	r1, r3
     f70:	68b8      	ldr	r0, [r7, #8]
     f72:	f7ff fd7b 	bl	a6c <decstr_to_int>
     f76:	4603      	mov	r3, r0
     f78:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     f7a:	693b      	ldr	r3, [r7, #16]
     f7c:	68ba      	ldr	r2, [r7, #8]
     f7e:	4413      	add	r3, r2
     f80:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2b6c      	cmp	r3, #108	; 0x6c
     f88:	d10c      	bne.n	fa4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     f8a:	68bb      	ldr	r3, [r7, #8]
     f8c:	3301      	adds	r3, #1
     f8e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     f90:	68bb      	ldr	r3, [r7, #8]
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2b6c      	cmp	r3, #108	; 0x6c
     f96:	d105      	bne.n	fa4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     f98:	68bb      	ldr	r3, [r7, #8]
     f9a:	3301      	adds	r3, #1
     f9c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     f9e:	2301      	movs	r3, #1
     fa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     fa4:	68bb      	ldr	r3, [r7, #8]
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	3b46      	subs	r3, #70	; 0x46
     faa:	2b32      	cmp	r3, #50	; 0x32
     fac:	f200 8254 	bhi.w	1458 <am_util_stdio_vsprintf+0x5b8>
     fb0:	a201      	add	r2, pc, #4	; (adr r2, fb8 <am_util_stdio_vsprintf+0x118>)
     fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fb6:	bf00      	nop
     fb8:	000013e3 	.word	0x000013e3
     fbc:	00001459 	.word	0x00001459
     fc0:	00001459 	.word	0x00001459
     fc4:	00001459 	.word	0x00001459
     fc8:	00001459 	.word	0x00001459
     fcc:	00001459 	.word	0x00001459
     fd0:	00001459 	.word	0x00001459
     fd4:	00001459 	.word	0x00001459
     fd8:	00001459 	.word	0x00001459
     fdc:	00001459 	.word	0x00001459
     fe0:	00001459 	.word	0x00001459
     fe4:	00001459 	.word	0x00001459
     fe8:	00001459 	.word	0x00001459
     fec:	00001459 	.word	0x00001459
     ff0:	00001459 	.word	0x00001459
     ff4:	00001459 	.word	0x00001459
     ff8:	00001459 	.word	0x00001459
     ffc:	00001459 	.word	0x00001459
    1000:	0000117f 	.word	0x0000117f
    1004:	00001459 	.word	0x00001459
    1008:	00001459 	.word	0x00001459
    100c:	00001459 	.word	0x00001459
    1010:	00001459 	.word	0x00001459
    1014:	00001459 	.word	0x00001459
    1018:	00001459 	.word	0x00001459
    101c:	00001459 	.word	0x00001459
    1020:	00001459 	.word	0x00001459
    1024:	00001459 	.word	0x00001459
    1028:	00001459 	.word	0x00001459
    102c:	00001085 	.word	0x00001085
    1030:	000012ab 	.word	0x000012ab
    1034:	00001459 	.word	0x00001459
    1038:	000013e3 	.word	0x000013e3
    103c:	00001459 	.word	0x00001459
    1040:	00001459 	.word	0x00001459
    1044:	000012ab 	.word	0x000012ab
    1048:	00001459 	.word	0x00001459
    104c:	00001459 	.word	0x00001459
    1050:	00001459 	.word	0x00001459
    1054:	00001459 	.word	0x00001459
    1058:	00001459 	.word	0x00001459
    105c:	00001459 	.word	0x00001459
    1060:	00001459 	.word	0x00001459
    1064:	00001459 	.word	0x00001459
    1068:	00001459 	.word	0x00001459
    106c:	000010ab 	.word	0x000010ab
    1070:	00001459 	.word	0x00001459
    1074:	00001219 	.word	0x00001219
    1078:	00001459 	.word	0x00001459
    107c:	00001459 	.word	0x00001459
    1080:	00001179 	.word	0x00001179
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	1d1a      	adds	r2, r3, #4
    1088:	607a      	str	r2, [r7, #4]
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1090:	68fb      	ldr	r3, [r7, #12]
    1092:	2b00      	cmp	r3, #0
    1094:	d005      	beq.n	10a2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	1c5a      	adds	r2, r3, #1
    109a:	60fa      	str	r2, [r7, #12]
    109c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    10a0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10a4:	3301      	adds	r3, #1
    10a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10a8:	e1e6      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	1d1a      	adds	r2, r3, #4
    10ae:	607a      	str	r2, [r7, #4]
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    10b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    10b6:	f7ff fdc7 	bl	c48 <simple_strlen>
    10ba:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    10bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10be:	2b00      	cmp	r3, #0
    10c0:	dd2e      	ble.n	1120 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    10c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10c6:	429a      	cmp	r2, r3
    10c8:	d22a      	bcs.n	1120 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    10ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ce:	1ad3      	subs	r3, r2, r3
    10d0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10d8:	4619      	mov	r1, r3
    10da:	68f8      	ldr	r0, [r7, #12]
    10dc:	f7ff fdd0 	bl	c80 <padbuffer>
    10e0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d001      	beq.n	10ec <am_util_stdio_vsprintf+0x24c>
    10e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ea:	e000      	b.n	10ee <am_util_stdio_vsprintf+0x24e>
    10ec:	2300      	movs	r3, #0
    10ee:	68fa      	ldr	r2, [r7, #12]
    10f0:	4413      	add	r3, r2
    10f2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    10f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10f8:	4413      	add	r3, r2
    10fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    10fc:	2300      	movs	r3, #0
    10fe:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1100:	e00e      	b.n	1120 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	2b00      	cmp	r3, #0
    1106:	d005      	beq.n	1114 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	1c5a      	adds	r2, r3, #1
    110c:	60fa      	str	r2, [r7, #12]
    110e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1110:	7812      	ldrb	r2, [r2, #0]
    1112:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1116:	3301      	adds	r3, #1
    1118:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    111a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111c:	3301      	adds	r3, #1
    111e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	2b00      	cmp	r3, #0
    1126:	d1ec      	bne.n	1102 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    1128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    112a:	2b00      	cmp	r3, #0
    112c:	f000 81a1 	beq.w	1472 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1132:	425b      	negs	r3, r3
    1134:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    113a:	429a      	cmp	r2, r3
    113c:	f080 8199 	bcs.w	1472 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1140:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1144:	1ad3      	subs	r3, r2, r3
    1146:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    114c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    114e:	4619      	mov	r1, r3
    1150:	68f8      	ldr	r0, [r7, #12]
    1152:	f7ff fd95 	bl	c80 <padbuffer>
    1156:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	2b00      	cmp	r3, #0
    115c:	d001      	beq.n	1162 <am_util_stdio_vsprintf+0x2c2>
    115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1160:	e000      	b.n	1164 <am_util_stdio_vsprintf+0x2c4>
    1162:	2300      	movs	r3, #0
    1164:	68fa      	ldr	r2, [r7, #12]
    1166:	4413      	add	r3, r2
    1168:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    116c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    116e:	4413      	add	r3, r2
    1170:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1172:	2300      	movs	r3, #0
    1174:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1176:	e17c      	b.n	1472 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1178:	2301      	movs	r3, #1
    117a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    117e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1182:	2b00      	cmp	r3, #0
    1184:	d00a      	beq.n	119c <am_util_stdio_vsprintf+0x2fc>
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	3307      	adds	r3, #7
    118a:	f023 0307 	bic.w	r3, r3, #7
    118e:	f103 0208 	add.w	r2, r3, #8
    1192:	607a      	str	r2, [r7, #4]
    1194:	cb18      	ldmia	r3, {r3, r4}
    1196:	e007      	b.n	11a8 <am_util_stdio_vsprintf+0x308>
    1198:	10001178 	.word	0x10001178
                                      va_arg(pArgs, uint32_t);
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	1d1a      	adds	r2, r3, #4
    11a0:	607a      	str	r2, [r7, #4]
    11a2:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11a4:	f04f 0400 	mov.w	r4, #0
    11a8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    11ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ae:	2b00      	cmp	r3, #0
    11b0:	d01e      	beq.n	11f0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    11b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11b6:	f7ff fc35 	bl	a24 <ndigits_in_hex>
    11ba:	4602      	mov	r2, r0
    11bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11be:	1a9b      	subs	r3, r3, r2
    11c0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11c8:	4619      	mov	r1, r3
    11ca:	68f8      	ldr	r0, [r7, #12]
    11cc:	f7ff fd58 	bl	c80 <padbuffer>
    11d0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d001      	beq.n	11dc <am_util_stdio_vsprintf+0x33c>
    11d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11da:	e000      	b.n	11de <am_util_stdio_vsprintf+0x33e>
    11dc:	2300      	movs	r3, #0
    11de:	68fa      	ldr	r2, [r7, #12]
    11e0:	4413      	add	r3, r2
    11e2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    11e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11e8:	4413      	add	r3, r2
    11ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11ec:	2300      	movs	r3, #0
    11ee:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    11f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    11f4:	68fa      	ldr	r2, [r7, #12]
    11f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11fa:	f7ff fcc5 	bl	b88 <uint64_to_hexstr>
    11fe:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	2b00      	cmp	r3, #0
    1204:	d003      	beq.n	120e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1208:	68fa      	ldr	r2, [r7, #12]
    120a:	4413      	add	r3, r2
    120c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1212:	4413      	add	r3, r2
    1214:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1216:	e12f      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1218:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    121c:	2b00      	cmp	r3, #0
    121e:	d008      	beq.n	1232 <am_util_stdio_vsprintf+0x392>
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	3307      	adds	r3, #7
    1224:	f023 0307 	bic.w	r3, r3, #7
    1228:	f103 0208 	add.w	r2, r3, #8
    122c:	607a      	str	r2, [r7, #4]
    122e:	cb18      	ldmia	r3, {r3, r4}
    1230:	e005      	b.n	123e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	1d1a      	adds	r2, r3, #4
    1236:	607a      	str	r2, [r7, #4]
    1238:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    123a:	f04f 0400 	mov.w	r4, #0
    123e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1244:	2b00      	cmp	r3, #0
    1246:	d01e      	beq.n	1286 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1248:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    124c:	f7ff fbaa 	bl	9a4 <ndigits_in_u64>
    1250:	4602      	mov	r2, r0
    1252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1254:	1a9b      	subs	r3, r3, r2
    1256:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    125c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    125e:	4619      	mov	r1, r3
    1260:	68f8      	ldr	r0, [r7, #12]
    1262:	f7ff fd0d 	bl	c80 <padbuffer>
    1266:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	2b00      	cmp	r3, #0
    126c:	d001      	beq.n	1272 <am_util_stdio_vsprintf+0x3d2>
    126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1270:	e000      	b.n	1274 <am_util_stdio_vsprintf+0x3d4>
    1272:	2300      	movs	r3, #0
    1274:	68fa      	ldr	r2, [r7, #12]
    1276:	4413      	add	r3, r2
    1278:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    127c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    127e:	4413      	add	r3, r2
    1280:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1282:	2300      	movs	r3, #0
    1284:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1286:	68fa      	ldr	r2, [r7, #12]
    1288:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    128c:	f7ff fc34 	bl	af8 <uint64_to_str>
    1290:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	2b00      	cmp	r3, #0
    1296:	d003      	beq.n	12a0 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    129a:	68fa      	ldr	r2, [r7, #12]
    129c:	4413      	add	r3, r2
    129e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12a4:	4413      	add	r3, r2
    12a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12a8:	e0e6      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12ae:	2b00      	cmp	r3, #0
    12b0:	d008      	beq.n	12c4 <am_util_stdio_vsprintf+0x424>
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	3307      	adds	r3, #7
    12b6:	f023 0307 	bic.w	r3, r3, #7
    12ba:	f103 0208 	add.w	r2, r3, #8
    12be:	607a      	str	r2, [r7, #4]
    12c0:	cb18      	ldmia	r3, {r3, r4}
    12c2:	e005      	b.n	12d0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	1d1a      	adds	r2, r3, #4
    12c8:	607a      	str	r2, [r7, #4]
    12ca:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    12d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    12d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12d8:	2b00      	cmp	r3, #0
    12da:	f174 0300 	sbcs.w	r3, r4, #0
    12de:	da0a      	bge.n	12f6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    12e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12e4:	425b      	negs	r3, r3
    12e6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    12ea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    12ee:	2301      	movs	r3, #1
    12f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    12f4:	e006      	b.n	1304 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    12f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    12fe:	2300      	movs	r3, #0
    1300:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1306:	2b00      	cmp	r3, #0
    1308:	d04a      	beq.n	13a0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    130a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    130e:	4618      	mov	r0, r3
    1310:	4621      	mov	r1, r4
    1312:	f7ff fb69 	bl	9e8 <ndigits_in_i64>
    1316:	4602      	mov	r2, r0
    1318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    131a:	1a9b      	subs	r3, r3, r2
    131c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    131e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1322:	2b00      	cmp	r3, #0
    1324:	d011      	beq.n	134a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1328:	3b01      	subs	r3, #1
    132a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    132c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1330:	2b30      	cmp	r3, #48	; 0x30
    1332:	d10a      	bne.n	134a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1334:	68fb      	ldr	r3, [r7, #12]
    1336:	2b00      	cmp	r3, #0
    1338:	d004      	beq.n	1344 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	1c5a      	adds	r2, r3, #1
    133e:	60fa      	str	r2, [r7, #12]
    1340:	222d      	movs	r2, #45	; 0x2d
    1342:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1346:	3301      	adds	r3, #1
    1348:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    134e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1350:	4619      	mov	r1, r3
    1352:	68f8      	ldr	r0, [r7, #12]
    1354:	f7ff fc94 	bl	c80 <padbuffer>
    1358:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	2b00      	cmp	r3, #0
    135e:	d001      	beq.n	1364 <am_util_stdio_vsprintf+0x4c4>
    1360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1362:	e000      	b.n	1366 <am_util_stdio_vsprintf+0x4c6>
    1364:	2300      	movs	r3, #0
    1366:	68fa      	ldr	r2, [r7, #12]
    1368:	4413      	add	r3, r2
    136a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    136e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1370:	4413      	add	r3, r2
    1372:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1374:	2300      	movs	r3, #0
    1376:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1378:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    137c:	2b00      	cmp	r3, #0
    137e:	d01e      	beq.n	13be <am_util_stdio_vsprintf+0x51e>
    1380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1384:	2b20      	cmp	r3, #32
    1386:	d11a      	bne.n	13be <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2b00      	cmp	r3, #0
    138c:	d004      	beq.n	1398 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	1c5a      	adds	r2, r3, #1
    1392:	60fa      	str	r2, [r7, #12]
    1394:	222d      	movs	r2, #45	; 0x2d
    1396:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    139a:	3301      	adds	r3, #1
    139c:	63fb      	str	r3, [r7, #60]	; 0x3c
    139e:	e00e      	b.n	13be <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    13a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13a4:	2b00      	cmp	r3, #0
    13a6:	d00a      	beq.n	13be <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d004      	beq.n	13b8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	1c5a      	adds	r2, r3, #1
    13b2:	60fa      	str	r2, [r7, #12]
    13b4:	222d      	movs	r2, #45	; 0x2d
    13b6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    13b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ba:	3301      	adds	r3, #1
    13bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    13be:	68fa      	ldr	r2, [r7, #12]
    13c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13c4:	f7ff fb98 	bl	af8 <uint64_to_str>
    13c8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d003      	beq.n	13d8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    13d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d2:	68fa      	ldr	r2, [r7, #12]
    13d4:	4413      	add	r3, r2
    13d6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13dc:	4413      	add	r3, r2
    13de:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13e0:	e04a      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d046      	beq.n	1476 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	3307      	adds	r3, #7
    13ec:	f023 0307 	bic.w	r3, r3, #7
    13f0:	f103 0208 	add.w	r2, r3, #8
    13f4:	607a      	str	r2, [r7, #4]
    13f6:	cb18      	ldmia	r3, {r3, r4}
    13f8:	4618      	mov	r0, r3
    13fa:	4621      	mov	r1, r4
    13fc:	f7fe fe60 	bl	c0 <__aeabi_d2f>
    1400:	4603      	mov	r3, r0
    1402:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1404:	68fb      	ldr	r3, [r7, #12]
    1406:	2214      	movs	r2, #20
    1408:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    140a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    140c:	68f9      	ldr	r1, [r7, #12]
    140e:	6978      	ldr	r0, [r7, #20]
    1410:	f7ff fc5c 	bl	ccc <ftoa>
    1414:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1418:	2b00      	cmp	r3, #0
    141a:	da14      	bge.n	1446 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    141e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1422:	d102      	bne.n	142a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1424:	4b1e      	ldr	r3, [pc, #120]	; (14a0 <am_util_stdio_vsprintf+0x600>)
    1426:	62bb      	str	r3, [r7, #40]	; 0x28
    1428:	e008      	b.n	143c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    142c:	f113 0f02 	cmn.w	r3, #2
    1430:	d102      	bne.n	1438 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1432:	4b1c      	ldr	r3, [pc, #112]	; (14a4 <am_util_stdio_vsprintf+0x604>)
    1434:	62bb      	str	r3, [r7, #40]	; 0x28
    1436:	e001      	b.n	143c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1438:	4b1b      	ldr	r3, [pc, #108]	; (14a8 <am_util_stdio_vsprintf+0x608>)
    143a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1440:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1442:	2303      	movs	r3, #3
    1444:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    144a:	4413      	add	r3, r2
    144c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1450:	68fa      	ldr	r2, [r7, #12]
    1452:	4413      	add	r3, r2
    1454:	60fb      	str	r3, [r7, #12]
                }
                break;
    1456:	e00e      	b.n	1476 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	2b00      	cmp	r3, #0
    145c:	d005      	beq.n	146a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    145e:	68fb      	ldr	r3, [r7, #12]
    1460:	1c5a      	adds	r2, r3, #1
    1462:	60fa      	str	r2, [r7, #12]
    1464:	68ba      	ldr	r2, [r7, #8]
    1466:	7812      	ldrb	r2, [r2, #0]
    1468:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    146a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    146c:	3301      	adds	r3, #1
    146e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1470:	e002      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1472:	bf00      	nop
    1474:	e000      	b.n	1478 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    1476:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1478:	68bb      	ldr	r3, [r7, #8]
    147a:	3301      	adds	r3, #1
    147c:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    147e:	68bb      	ldr	r3, [r7, #8]
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	2b00      	cmp	r3, #0
    1484:	f47f ad17 	bne.w	eb6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	2b00      	cmp	r3, #0
    148c:	d002      	beq.n	1494 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	2200      	movs	r2, #0
    1492:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1496:	4618      	mov	r0, r3
    1498:	3754      	adds	r7, #84	; 0x54
    149a:	46bd      	mov	sp, r7
    149c:	bd90      	pop	{r4, r7, pc}
    149e:	bf00      	nop
    14a0:	00302e30 	.word	0x00302e30
    14a4:	00232e23 	.word	0x00232e23
    14a8:	003f2e3f 	.word	0x003f2e3f

000014ac <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    14ac:	b40f      	push	{r0, r1, r2, r3}
    14ae:	b580      	push	{r7, lr}
    14b0:	b082      	sub	sp, #8
    14b2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    14b4:	f107 0314 	add.w	r3, r7, #20
    14b8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    14ba:	683a      	ldr	r2, [r7, #0]
    14bc:	6939      	ldr	r1, [r7, #16]
    14be:	4808      	ldr	r0, [pc, #32]	; (14e0 <am_util_stdio_printf+0x34>)
    14c0:	f7ff fcee 	bl	ea0 <am_util_stdio_vsprintf>
    14c4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    14c6:	4b07      	ldr	r3, [pc, #28]	; (14e4 <am_util_stdio_printf+0x38>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	4805      	ldr	r0, [pc, #20]	; (14e0 <am_util_stdio_printf+0x34>)
    14cc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    14ce:	687b      	ldr	r3, [r7, #4]
}
    14d0:	4618      	mov	r0, r3
    14d2:	3708      	adds	r7, #8
    14d4:	46bd      	mov	sp, r7
    14d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    14da:	b004      	add	sp, #16
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	10001078 	.word	0x10001078
    14e4:	1000119c 	.word	0x1000119c

000014e8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    14e8:	b580      	push	{r7, lr}
    14ea:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    14ec:	4802      	ldr	r0, [pc, #8]	; (14f8 <am_util_stdio_terminal_clear+0x10>)
    14ee:	f7ff ffdd 	bl	14ac <am_util_stdio_printf>
}
    14f2:	bf00      	nop
    14f4:	bd80      	pop	{r7, pc}
    14f6:	bf00      	nop
    14f8:	00002140 	.word	0x00002140

000014fc <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    14fc:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    14fe:	4b17      	ldr	r3, [pc, #92]	; (155c <am_bsp_debug_printf_enable+0x60>)
    1500:	6818      	ldr	r0, [r3, #0]
    1502:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1506:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1508:	d001      	beq.n	150e <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    150a:	b007      	add	sp, #28
    150c:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    150e:	4a14      	ldr	r2, [pc, #80]	; (1560 <am_bsp_debug_printf_enable+0x64>)
    1510:	4914      	ldr	r1, [pc, #80]	; (1564 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1512:	4d15      	ldr	r5, [pc, #84]	; (1568 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1514:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1516:	a806      	add	r0, sp, #24
    1518:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    151c:	f000 fd98 	bl	2050 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1520:	f3ef 8310 	mrs	r3, PRIMASK
    1524:	9300      	str	r3, [sp, #0]
    1526:	b672      	cpsid	i
    1528:	4a10      	ldr	r2, [pc, #64]	; (156c <am_bsp_debug_printf_enable+0x70>)
    152a:	4d11      	ldr	r5, [pc, #68]	; (1570 <am_bsp_debug_printf_enable+0x74>)
    152c:	4811      	ldr	r0, [pc, #68]	; (1574 <am_bsp_debug_printf_enable+0x78>)
    152e:	4912      	ldr	r1, [pc, #72]	; (1578 <am_bsp_debug_printf_enable+0x7c>)
    1530:	2373      	movs	r3, #115	; 0x73
    1532:	6013      	str	r3, [r2, #0]
    1534:	682b      	ldr	r3, [r5, #0]
    1536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    153a:	602b      	str	r3, [r5, #0]
    153c:	6805      	ldr	r5, [r0, #0]
    153e:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1542:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1546:	6003      	str	r3, [r0, #0]
    1548:	6808      	ldr	r0, [r1, #0]
    154a:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    154e:	600d      	str	r5, [r1, #0]
    1550:	6014      	str	r4, [r2, #0]
    1552:	9c00      	ldr	r4, [sp, #0]
    1554:	f384 8810 	msr	PRIMASK, r4
}
    1558:	b007      	add	sp, #28
    155a:	bd30      	pop	{r4, r5, pc}
    155c:	1000118c 	.word	0x1000118c
    1560:	e0000e80 	.word	0xe0000e80
    1564:	00150511 	.word	0x00150511
    1568:	000f4240 	.word	0x000f4240
    156c:	40010060 	.word	0x40010060
    1570:	40010054 	.word	0x40010054
    1574:	40010028 	.word	0x40010028
    1578:	40010108 	.word	0x40010108

0000157c <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    157c:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    157e:	4b15      	ldr	r3, [pc, #84]	; (15d4 <am_bsp_debug_printf_disable+0x58>)
    1580:	6818      	ldr	r0, [r3, #0]
    1582:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1586:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1588:	d121      	bne.n	15ce <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    158a:	f000 faeb 	bl	1b64 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    158e:	f3ef 8110 	mrs	r1, PRIMASK
    1592:	9101      	str	r1, [sp, #4]
    1594:	b672      	cpsid	i
    1596:	4a10      	ldr	r2, [pc, #64]	; (15d8 <am_bsp_debug_printf_disable+0x5c>)
    1598:	4d10      	ldr	r5, [pc, #64]	; (15dc <am_bsp_debug_printf_disable+0x60>)
    159a:	4811      	ldr	r0, [pc, #68]	; (15e0 <am_bsp_debug_printf_disable+0x64>)
    159c:	4911      	ldr	r1, [pc, #68]	; (15e4 <am_bsp_debug_printf_disable+0x68>)
    159e:	2373      	movs	r3, #115	; 0x73
    15a0:	6013      	str	r3, [r2, #0]
    15a2:	682b      	ldr	r3, [r5, #0]
    15a4:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    15a8:	f04c 0320 	orr.w	r3, ip, #32
    15ac:	602b      	str	r3, [r5, #0]
    15ae:	6805      	ldr	r5, [r0, #0]
    15b0:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    15b4:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    15b8:	6003      	str	r3, [r0, #0]
    15ba:	6808      	ldr	r0, [r1, #0]
    15bc:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    15c0:	600d      	str	r5, [r1, #0]
    15c2:	6014      	str	r4, [r2, #0]
    15c4:	9c01      	ldr	r4, [sp, #4]
    15c6:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    15ca:	f000 fd97 	bl	20fc <am_hal_tpiu_disable>
}
    15ce:	b003      	add	sp, #12
    15d0:	bd30      	pop	{r4, r5, pc}
    15d2:	bf00      	nop
    15d4:	1000118c 	.word	0x1000118c
    15d8:	40010060 	.word	0x40010060
    15dc:	40010054 	.word	0x40010054
    15e0:	40010028 	.word	0x40010028
    15e4:	40010108 	.word	0x40010108

000015e8 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    15e8:	f000 bac6 	b.w	1b78 <am_hal_itm_print>

000015ec <am_hal_adc_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    15ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
                        psConfig->ui32TriggerConfig |
                        psConfig->ui32Reference |
                        psConfig->ui32ClockMode |
                        psConfig->ui32PowerMode |
                        psConfig->ui32Repeat |
    15ee:	6842      	ldr	r2, [r0, #4]
    15f0:	6803      	ldr	r3, [r0, #0]
    15f2:	6886      	ldr	r6, [r0, #8]
    15f4:	68c5      	ldr	r5, [r0, #12]
    15f6:	6904      	ldr	r4, [r0, #16]
    15f8:	6941      	ldr	r1, [r0, #20]
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    //
    // Set general ADC configuration parameters.
    //
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    15fa:	4f15      	ldr	r7, [pc, #84]	; (1650 <am_hal_adc_config+0x64>)

    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    15fc:	4815      	ldr	r0, [pc, #84]	; (1654 <am_hal_adc_config+0x68>)
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
                        psConfig->ui32TriggerConfig |
                        psConfig->ui32Reference |
                        psConfig->ui32ClockMode |
                        psConfig->ui32PowerMode |
                        psConfig->ui32Repeat |
    15fe:	4313      	orrs	r3, r2
    1600:	f043 0301 	orr.w	r3, r3, #1
    1604:	4333      	orrs	r3, r6
    1606:	432b      	orrs	r3, r5
    1608:	4323      	orrs	r3, r4
    160a:	430b      	orrs	r3, r1
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    //
    // Set general ADC configuration parameters.
    //
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    160c:	603b      	str	r3, [r7, #0]

    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    160e:	f000 fa3d 	bl	1a8c <am_hal_flash_load_ui32>
                        AM_REG_ADC_CFG_ADCEN(1));

    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
    1612:	4f11      	ldr	r7, [pc, #68]	; (1658 <am_hal_adc_config+0x6c>)
    1614:	6038      	str	r0, [r7, #0]
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    1616:	4811      	ldr	r0, [pc, #68]	; (165c <am_hal_adc_config+0x70>)
    1618:	f000 fa38 	bl	1a8c <am_hal_flash_load_ui32>
    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
    161c:	6078      	str	r0, [r7, #4]
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    priv_temp_trims.ui32.ui32CalibrationOffset      =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
    161e:	4810      	ldr	r0, [pc, #64]	; (1660 <am_hal_adc_config+0x74>)
    1620:	f000 fa34 	bl	1a8c <am_hal_flash_load_ui32>

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1624:	683a      	ldr	r2, [r7, #0]
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    priv_temp_trims.ui32.ui32CalibrationOffset      =
    1626:	60b8      	str	r0, [r7, #8]
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1628:	1c53      	adds	r3, r2, #1
    162a:	d007      	beq.n	163c <am_hal_adc_config+0x50>
    162c:	687e      	ldr	r6, [r7, #4]
    162e:	1c73      	adds	r3, r6, #1
    1630:	d004      	beq.n	163c <am_hal_adc_config+0x50>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
    1632:	3001      	adds	r0, #1
    1634:	d002      	beq.n	163c <am_hal_adc_config+0x50>
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
    1636:	2001      	movs	r0, #1
    1638:	7338      	strb	r0, [r7, #12]
    163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //
        // Since the device has not been calibrated on the tester, we'll load
        // default calibration values.  These default values should result
        // in worst-case temperature measurements of +-6 degress C.
        //
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    163c:	4d09      	ldr	r5, [pc, #36]	; (1664 <am_hal_adc_config+0x78>)
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    163e:	4c0a      	ldr	r4, [pc, #40]	; (1668 <am_hal_adc_config+0x7c>)
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    1640:	490a      	ldr	r1, [pc, #40]	; (166c <am_hal_adc_config+0x80>)
        //
        // Since the device has not been calibrated on the tester, we'll load
        // default calibration values.  These default values should result
        // in worst-case temperature measurements of +-6 degress C.
        //
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    1642:	603d      	str	r5, [r7, #0]
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    1644:	2000      	movs	r0, #0
        // Since the device has not been calibrated on the tester, we'll load
        // default calibration values.  These default values should result
        // in worst-case temperature measurements of +-6 degress C.
        //
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    1646:	607c      	str	r4, [r7, #4]
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    1648:	60b9      	str	r1, [r7, #8]
    164a:	7338      	strb	r0, [r7, #12]
    164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    164e:	bf00      	nop
    1650:	50010000 	.word	0x50010000
    1654:	50023010 	.word	0x50023010
    1658:	1000117c 	.word	0x1000117c
    165c:	50023014 	.word	0x50023014
    1660:	50023018 	.word	0x50023018
    1664:	4395c000 	.word	0x4395c000
    1668:	3f839874 	.word	0x3f839874
    166c:	bb8c47a1 	.word	0xbb8c47a1

00001670 <am_hal_adc_slot_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_slot_config(uint32_t ui32SlotNumber, uint32_t ui32SlotConfig)
{
    1670:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32RegOffset;

    //
    // Make sure we're accessing a real slot.
    //
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    1672:	f030 030f 	bics.w	r3, r0, #15
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_slot_config(uint32_t ui32SlotNumber, uint32_t ui32SlotConfig)
{
    1676:	4604      	mov	r4, r0
    1678:	460d      	mov	r5, r1
    uint32_t ui32RegOffset;

    //
    // Make sure we're accessing a real slot.
    //
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    167a:	d004      	beq.n	1686 <am_hal_adc_slot_config+0x16>
    167c:	4a04      	ldr	r2, [pc, #16]	; (1690 <am_hal_adc_slot_config+0x20>)
    167e:	4805      	ldr	r0, [pc, #20]	; (1694 <am_hal_adc_slot_config+0x24>)
    1680:	21f1      	movs	r1, #241	; 0xf1
    1682:	f000 fa01 	bl	1a88 <am_hal_debug_error>
    ui32RegOffset = (AM_REG_ADCn(0) + AM_REG_ADC_SL0CFG_O + (4 * ui32SlotNumber));

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32SlotConfig;
    1686:	4b04      	ldr	r3, [pc, #16]	; (1698 <am_hal_adc_slot_config+0x28>)
    1688:	4423      	add	r3, r4
    168a:	0098      	lsls	r0, r3, #2
    168c:	6005      	str	r5, [r0, #0]
    168e:	bd38      	pop	{r3, r4, r5, pc}
    1690:	00002154 	.word	0x00002154
    1694:	00002188 	.word	0x00002188
    1698:	14004003 	.word	0x14004003

0000169c <am_hal_adc_fifo_pop>:
    uint32_t ui32FIFOValue;

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    169c:	4b02      	ldr	r3, [pc, #8]	; (16a8 <am_hal_adc_fifo_pop+0xc>)

    //
    // Pop the FIFO.
    //
    AM_REG(ADC, FIFO) = 0;
    169e:	2200      	movs	r2, #0
    uint32_t ui32FIFOValue;

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    16a0:	6818      	ldr	r0, [r3, #0]

    //
    // Pop the FIFO.
    //
    AM_REG(ADC, FIFO) = 0;
    16a2:	601a      	str	r2, [r3, #0]

    //
    // Return FIFO valid bits.
    //
    return ui32FIFOValue;
}
    16a4:	4770      	bx	lr
    16a6:	bf00      	nop
    16a8:	50010038 	.word	0x50010038

000016ac <am_hal_adc_trigger>:
am_hal_adc_trigger(void)
{
    //
    // Write to the Software trigger register in the ADC.
    //
    AM_REG(ADC, SWT) = 0x37;
    16ac:	4b01      	ldr	r3, [pc, #4]	; (16b4 <am_hal_adc_trigger+0x8>)
    16ae:	2237      	movs	r2, #55	; 0x37
    16b0:	601a      	str	r2, [r3, #0]
    16b2:	4770      	bx	lr
    16b4:	50010008 	.word	0x50010008

000016b8 <am_hal_adc_enable>:
am_hal_adc_enable(void)
{
    //
    // Enable the ADC.
    //
    AM_BFW(ADC, CFG, ADCEN, 0x1);
    16b8:	4a02      	ldr	r2, [pc, #8]	; (16c4 <am_hal_adc_enable+0xc>)
    16ba:	6813      	ldr	r3, [r2, #0]
    16bc:	f043 0001 	orr.w	r0, r3, #1
    16c0:	6010      	str	r0, [r2, #0]
    16c2:	4770      	bx	lr
    16c4:	50010000 	.word	0x50010000

000016c8 <am_hal_adc_int_enable>:
am_hal_adc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(ADC, INTEN) |= ui32Interrupt;
    16c8:	4a02      	ldr	r2, [pc, #8]	; (16d4 <am_hal_adc_int_enable+0xc>)
    16ca:	6813      	ldr	r3, [r2, #0]
    16cc:	4318      	orrs	r0, r3
    16ce:	6010      	str	r0, [r2, #0]
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	50010200 	.word	0x50010200

000016d8 <am_hal_adc_int_clear>:
am_hal_adc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(ADC, INTCLR) = ui32Interrupt;
    16d8:	4b01      	ldr	r3, [pc, #4]	; (16e0 <am_hal_adc_int_clear+0x8>)
    16da:	6018      	str	r0, [r3, #0]
    16dc:	4770      	bx	lr
    16de:	bf00      	nop
    16e0:	50010208 	.word	0x50010208

000016e4 <am_hal_adc_int_status_get>:
am_hal_adc_int_status_get(bool bEnabledOnly)
{
    //
    // Return the status.
    //
    if (bEnabledOnly)
    16e4:	b910      	cbnz	r0, 16ec <am_hal_adc_int_status_get+0x8>
        u32RetVal &= AM_REG(ADC, INTSTAT);
        return u32RetVal;
    }
    else
    {
        return AM_REG(ADC, INTSTAT);
    16e6:	4b04      	ldr	r3, [pc, #16]	; (16f8 <am_hal_adc_int_status_get+0x14>)
    16e8:	6818      	ldr	r0, [r3, #0]
    }
}
    16ea:	4770      	bx	lr
    //
    // Return the status.
    //
    if (bEnabledOnly)
    {
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    16ec:	4a03      	ldr	r2, [pc, #12]	; (16fc <am_hal_adc_int_status_get+0x18>)
        u32RetVal &= AM_REG(ADC, INTSTAT);
    16ee:	4902      	ldr	r1, [pc, #8]	; (16f8 <am_hal_adc_int_status_get+0x14>)
    //
    // Return the status.
    //
    if (bEnabledOnly)
    {
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    16f0:	6810      	ldr	r0, [r2, #0]
        u32RetVal &= AM_REG(ADC, INTSTAT);
    16f2:	680b      	ldr	r3, [r1, #0]
    16f4:	4018      	ands	r0, r3
        return u32RetVal;
    16f6:	4770      	bx	lr
    16f8:	50010204 	.word	0x50010204
    16fc:	50010200 	.word	0x50010200

00001700 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1702:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1704:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1708:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    170a:	7863      	ldrb	r3, [r4, #1]
    170c:	78e2      	ldrb	r2, [r4, #3]
    170e:	7925      	ldrb	r5, [r4, #4]
    1710:	79a1      	ldrb	r1, [r4, #6]
    1712:	00be      	lsls	r6, r7, #2
    1714:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1718:	f006 0304 	and.w	r3, r6, #4
    171c:	f00e 0602 	and.w	r6, lr, #2
    1720:	431e      	orrs	r6, r3
    1722:	f042 0201 	orr.w	r2, r2, #1
    1726:	79e3      	ldrb	r3, [r4, #7]
    1728:	01ed      	lsls	r5, r5, #7
    172a:	4316      	orrs	r6, r2
    172c:	b2ed      	uxtb	r5, r5
    172e:	7a22      	ldrb	r2, [r4, #8]
    1730:	0289      	lsls	r1, r1, #10
    1732:	432e      	orrs	r6, r5
    1734:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1738:	7a65      	ldrb	r5, [r4, #9]
    173a:	02db      	lsls	r3, r3, #11
    173c:	430e      	orrs	r6, r1
    173e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1742:	0312      	lsls	r2, r2, #12
    1744:	7aa1      	ldrb	r1, [r4, #10]
    1746:	431e      	orrs	r6, r3
    1748:	042d      	lsls	r5, r5, #16
    174a:	b293      	uxth	r3, r2
    174c:	7ae2      	ldrb	r2, [r4, #11]
    174e:	431e      	orrs	r6, r3
    1750:	0509      	lsls	r1, r1, #20
    1752:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    1756:	0612      	lsls	r2, r2, #24
    1758:	4333      	orrs	r3, r6
    175a:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    175e:	00bf      	lsls	r7, r7, #2
    1760:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1764:	4333      	orrs	r3, r6
    1766:	430b      	orrs	r3, r1
    1768:	f007 0508 	and.w	r5, r7, #8
    176c:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    176e:	f000 fa83 	bl	1c78 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1772:	482c      	ldr	r0, [pc, #176]	; (1824 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1774:	4b2c      	ldr	r3, [pc, #176]	; (1828 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1776:	6005      	str	r5, [r0, #0]
    1778:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    177a:	681e      	ldr	r6, [r3, #0]
    177c:	0777      	lsls	r7, r6, #29
    177e:	d41e      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    1780:	681f      	ldr	r7, [r3, #0]
    1782:	077e      	lsls	r6, r7, #29
    1784:	f102 32ff 	add.w	r2, r2, #4294967295
    1788:	d419      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    178a:	6819      	ldr	r1, [r3, #0]
    178c:	074f      	lsls	r7, r1, #29
    178e:	d416      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    1790:	6818      	ldr	r0, [r3, #0]
    1792:	0746      	lsls	r6, r0, #29
    1794:	d413      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    1796:	681e      	ldr	r6, [r3, #0]
    1798:	0770      	lsls	r0, r6, #29
    179a:	d410      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    179c:	681f      	ldr	r7, [r3, #0]
    179e:	0779      	lsls	r1, r7, #29
    17a0:	d40d      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    17a2:	6819      	ldr	r1, [r3, #0]
    17a4:	074f      	lsls	r7, r1, #29
    17a6:	d40a      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    17a8:	6818      	ldr	r0, [r3, #0]
    17aa:	0746      	lsls	r6, r0, #29
    17ac:	d407      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    17ae:	681e      	ldr	r6, [r3, #0]
    17b0:	0770      	lsls	r0, r6, #29
    17b2:	d404      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    17b4:	681f      	ldr	r7, [r3, #0]
    17b6:	0779      	lsls	r1, r7, #29
    17b8:	d401      	bmi.n	17be <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    17ba:	3a09      	subs	r2, #9
    17bc:	d1dd      	bne.n	177a <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    17be:	4b1a      	ldr	r3, [pc, #104]	; (1828 <am_hal_cachectrl_enable+0x128>)
    17c0:	681a      	ldr	r2, [r3, #0]
    17c2:	f042 0101 	orr.w	r1, r2, #1
    17c6:	6019      	str	r1, [r3, #0]
    17c8:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    17ca:	6818      	ldr	r0, [r3, #0]
    17cc:	0740      	lsls	r0, r0, #29
    17ce:	d41e      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17d0:	681e      	ldr	r6, [r3, #0]
    17d2:	0771      	lsls	r1, r6, #29
    17d4:	f102 32ff 	add.w	r2, r2, #4294967295
    17d8:	d419      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17da:	681f      	ldr	r7, [r3, #0]
    17dc:	077f      	lsls	r7, r7, #29
    17de:	d416      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17e0:	6819      	ldr	r1, [r3, #0]
    17e2:	074e      	lsls	r6, r1, #29
    17e4:	d413      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17e6:	6818      	ldr	r0, [r3, #0]
    17e8:	0740      	lsls	r0, r0, #29
    17ea:	d410      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17ec:	681e      	ldr	r6, [r3, #0]
    17ee:	0771      	lsls	r1, r6, #29
    17f0:	d40d      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17f2:	681f      	ldr	r7, [r3, #0]
    17f4:	077f      	lsls	r7, r7, #29
    17f6:	d40a      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17f8:	6819      	ldr	r1, [r3, #0]
    17fa:	074e      	lsls	r6, r1, #29
    17fc:	d407      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    17fe:	6818      	ldr	r0, [r3, #0]
    1800:	0740      	lsls	r0, r0, #29
    1802:	d404      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    1804:	681e      	ldr	r6, [r3, #0]
    1806:	0771      	lsls	r1, r6, #29
    1808:	d401      	bmi.n	180e <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    180a:	3a09      	subs	r2, #9
    180c:	d1dd      	bne.n	17ca <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    180e:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1810:	4f04      	ldr	r7, [pc, #16]	; (1824 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1812:	0223      	lsls	r3, r4, #8
    1814:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1818:	f403 7280 	and.w	r2, r3, #256	; 0x100
    181c:	4311      	orrs	r1, r2
    181e:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1820:	6039      	str	r1, [r7, #0]
    1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1824:	40018000 	.word	0x40018000
    1828:	40018008 	.word	0x40018008

0000182c <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    182c:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    182e:	4604      	mov	r4, r0
    1830:	b120      	cbz	r0, 183c <am_hal_clkgen_sysclk_select+0x10>
    1832:	4a06      	ldr	r2, [pc, #24]	; (184c <am_hal_clkgen_sysclk_select+0x20>)
    1834:	4806      	ldr	r0, [pc, #24]	; (1850 <am_hal_clkgen_sysclk_select+0x24>)
    1836:	2150      	movs	r1, #80	; 0x50
    1838:	f000 f926 	bl	1a88 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    183e:	4906      	ldr	r1, [pc, #24]	; (1858 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1840:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1842:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1844:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1846:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1848:	601a      	str	r2, [r3, #0]
    184a:	bd10      	pop	{r4, pc}
    184c:	000021a8 	.word	0x000021a8
    1850:	000021e0 	.word	0x000021e0
    1854:	40004014 	.word	0x40004014
    1858:	40004018 	.word	0x40004018

0000185c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    185e:	4905      	ldr	r1, [pc, #20]	; (1874 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1860:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1862:	4805      	ldr	r0, [pc, #20]	; (1878 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1864:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1868:	bf08      	it	eq
    186a:	4608      	moveq	r0, r1
    186c:	4770      	bx	lr
    186e:	bf00      	nop
    1870:	40004018 	.word	0x40004018
    1874:	02dc6c00 	.word	0x02dc6c00
    1878:	016e3600 	.word	0x016e3600

0000187c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    187c:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    187e:	f3ef 8310 	mrs	r3, PRIMASK
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    1882:	b083      	sub	sp, #12
    uint32_t ui32WriteVal;

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1884:	0100      	lsls	r0, r0, #4
    1886:	4c30      	ldr	r4, [pc, #192]	; (1948 <am_hal_ctimer_config_single+0xcc>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1888:	9301      	str	r3, [sp, #4]
    188a:	b672      	cpsid	i
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    188c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    AM_CRITICAL_BEGIN_ASM

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    1890:	5903      	ldr	r3, [r0, r4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1892:	d055      	beq.n	1940 <am_hal_ctimer_config_single+0xc4>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    1894:	ea23 0301 	bic.w	r3, r3, r1
    1898:	431a      	orrs	r2, r3

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    189a:	3101      	adds	r1, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    189c:	bf08      	it	eq
    189e:	f042 4200 	orreq.w	r2, r2, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    18a2:	5102      	str	r2, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    18a4:	4a29      	ldr	r2, [pc, #164]	; (194c <am_hal_ctimer_config_single+0xd0>)
    18a6:	6810      	ldr	r0, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    18a8:	f000 0c0f 	and.w	ip, r0, #15
    18ac:	f10c 34ff 	add.w	r4, ip, #4294967295
    18b0:	2c01      	cmp	r4, #1
    18b2:	d93f      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    18b4:	4b24      	ldr	r3, [pc, #144]	; (1948 <am_hal_ctimer_config_single+0xcc>)
    18b6:	6819      	ldr	r1, [r3, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18b8:	f3c1 0244 	ubfx	r2, r1, #1, #5
    18bc:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18be:	f3c1 4c44 	ubfx	ip, r1, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18c2:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18c4:	f10c 34ff 	add.w	r4, ip, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18c8:	d934      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    18ca:	2c04      	cmp	r4, #4
    18cc:	d932      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    18ce:	4b20      	ldr	r3, [pc, #128]	; (1950 <am_hal_ctimer_config_single+0xd4>)
    18d0:	6819      	ldr	r1, [r3, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18d2:	f3c1 0244 	ubfx	r2, r1, #1, #5
    18d6:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18d8:	f3c1 4c44 	ubfx	ip, r1, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18dc:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18de:	f10c 34ff 	add.w	r4, ip, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18e2:	d927      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    18e4:	2c04      	cmp	r4, #4
    18e6:	d925      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    18e8:	4b1a      	ldr	r3, [pc, #104]	; (1954 <am_hal_ctimer_config_single+0xd8>)
    18ea:	6819      	ldr	r1, [r3, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18ec:	f3c1 0244 	ubfx	r2, r1, #1, #5
    18f0:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18f2:	f3c1 4c44 	ubfx	ip, r1, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18f6:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    18f8:	f10c 34ff 	add.w	r4, ip, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    18fc:	d91a      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    18fe:	2c04      	cmp	r4, #4
    1900:	d918      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1902:	4b15      	ldr	r3, [pc, #84]	; (1958 <am_hal_ctimer_config_single+0xdc>)
    1904:	6819      	ldr	r1, [r3, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1906:	f3c1 0244 	ubfx	r2, r1, #1, #5
    190a:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    190c:	f3c1 4c44 	ubfx	ip, r1, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1910:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1912:	f10c 34ff 	add.w	r4, ip, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1916:	d90d      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1918:	2c04      	cmp	r4, #4
    191a:	d90b      	bls.n	1934 <am_hal_ctimer_config_single+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    191c:	490f      	ldr	r1, [pc, #60]	; (195c <am_hal_ctimer_config_single+0xe0>)
    191e:	680b      	ldr	r3, [r1, #0]
    1920:	f043 0204 	orr.w	r2, r3, #4
    1924:	600a      	str	r2, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	f383 8810 	msr	PRIMASK, r3

} // am_hal_ctimer_config_single()
    192c:	b003      	add	sp, #12
    192e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1932:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1934:	4809      	ldr	r0, [pc, #36]	; (195c <am_hal_ctimer_config_single+0xe0>)
    1936:	6804      	ldr	r4, [r0, #0]
    1938:	f024 0104 	bic.w	r1, r4, #4
    193c:	6001      	str	r1, [r0, #0]
    193e:	e7f2      	b.n	1926 <am_hal_ctimer_config_single+0xaa>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    1940:	b299      	uxth	r1, r3
    1942:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    1946:	e7ac      	b.n	18a2 <am_hal_ctimer_config_single+0x26>
    1948:	4000800c 	.word	0x4000800c
    194c:	40008100 	.word	0x40008100
    1950:	4000801c 	.word	0x4000801c
    1954:	4000802c 	.word	0x4000802c
    1958:	4000803c 	.word	0x4000803c
    195c:	40021020 	.word	0x40021020

00001960 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1960:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1962:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1966:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1968:	0100      	lsls	r0, r0, #4
    196a:	4a09      	ldr	r2, [pc, #36]	; (1990 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    196c:	9301      	str	r3, [sp, #4]
    196e:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1970:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1972:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1976:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    197a:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    197e:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1980:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1982:	9801      	ldr	r0, [sp, #4]
    1984:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1988:	b003      	add	sp, #12
    198a:	f85d 4b04 	ldr.w	r4, [sp], #4
    198e:	4770      	bx	lr
    1990:	4000800c 	.word	0x4000800c

00001994 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1994:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1996:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    199a:	0100      	lsls	r0, r0, #4
    199c:	4a06      	ldr	r2, [pc, #24]	; (19b8 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    199e:	9301      	str	r3, [sp, #4]
    19a0:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    19a2:	5883      	ldr	r3, [r0, r2]
    19a4:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    19a8:	4319      	orrs	r1, r3
    19aa:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19ac:	9801      	ldr	r0, [sp, #4]
    19ae:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    19b2:	b002      	add	sp, #8
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop
    19b8:	4000800c 	.word	0x4000800c

000019bc <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    19bc:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    19be:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    19c2:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    19c4:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    19c6:	4d1c      	ldr	r5, [pc, #112]	; (1a38 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    19c8:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    19ca:	4e1c      	ldr	r6, [pc, #112]	; (1a3c <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    19cc:	4f1c      	ldr	r7, [pc, #112]	; (1a40 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    19ce:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    19d0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    19d4:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    19d6:	d01a      	beq.n	1a0e <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    19d8:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    19dc:	2d80      	cmp	r5, #128	; 0x80
    19de:	d01b      	beq.n	1a18 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    19e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    19e4:	2500      	movs	r5, #0
    19e6:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    19e8:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    19ea:	d01c      	beq.n	1a26 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    19ec:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    19f0:	d01e      	beq.n	1a30 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    19f2:	0c21      	lsrs	r1, r4, #16
    19f4:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    19f6:	b291      	uxth	r1, r2
    19f8:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    19fa:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    19fe:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a00:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a02:	9801      	ldr	r0, [sp, #4]
    1a04:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1a08:	b002      	add	sp, #8
    1a0a:	bcf0      	pop	{r4, r5, r6, r7}
    1a0c:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a0e:	0c25      	lsrs	r5, r4, #16
    1a10:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1a14:	2c80      	cmp	r4, #128	; 0x80
    1a16:	d10a      	bne.n	1a2e <am_hal_ctimer_period_set+0x72>
    1a18:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1a1a:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1a1c:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a22:	4299      	cmp	r1, r3
    1a24:	d1e2      	bne.n	19ec <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1a26:	b297      	uxth	r7, r2
    1a28:	433d      	orrs	r5, r7
    1a2a:	5185      	str	r5, [r0, r6]
    1a2c:	e7e9      	b.n	1a02 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a2e:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1a30:	b296      	uxth	r6, r2
    1a32:	4335      	orrs	r5, r6
    1a34:	51c5      	str	r5, [r0, r7]
    1a36:	e7e4      	b.n	1a02 <am_hal_ctimer_period_set+0x46>
    1a38:	4000800c 	.word	0x4000800c
    1a3c:	40008004 	.word	0x40008004
    1a40:	40008008 	.word	0x40008008

00001a44 <am_hal_ctimer_adc_trigger_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_adc_trigger_enable(void)
{
    1a44:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a46:	f3ef 8310 	mrs	r3, PRIMASK
    1a4a:	9301      	str	r3, [sp, #4]
    1a4c:	b672      	cpsid	i

    //
    // Enable the ADC trigger.
    //
    AM_REGn(CTIMER, 0, CTRL3) |= AM_REG_CTIMER_CTRL3_ADCEN_M;
    1a4e:	4a05      	ldr	r2, [pc, #20]	; (1a64 <am_hal_ctimer_adc_trigger_enable+0x20>)
    1a50:	6810      	ldr	r0, [r2, #0]
    1a52:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
    1a56:	6011      	str	r1, [r2, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a58:	9b01      	ldr	r3, [sp, #4]
    1a5a:	f383 8810 	msr	PRIMASK, r3
} // am_hal_ctimer_adc_trigger_enable()
    1a5e:	b002      	add	sp, #8
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop
    1a64:	4000803c 	.word	0x4000803c

00001a68 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1a68:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a6a:	f3ef 8310 	mrs	r3, PRIMASK
    1a6e:	9301      	str	r3, [sp, #4]
    1a70:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1a72:	4904      	ldr	r1, [pc, #16]	; (1a84 <am_hal_ctimer_int_enable+0x1c>)
    1a74:	680a      	ldr	r2, [r1, #0]
    1a76:	4310      	orrs	r0, r2
    1a78:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a7a:	9801      	ldr	r0, [sp, #4]
    1a7c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    1a80:	b002      	add	sp, #8
    1a82:	4770      	bx	lr
    1a84:	40008200 	.word	0x40008200

00001a88 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1a88:	e7fe      	b.n	1a88 <am_hal_debug_error>
    1a8a:	bf00      	nop

00001a8c <am_hal_flash_load_ui32>:
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t ui32Address)
{
    return g_am_hal_flash.flash_util_read_word((uint32_t*)ui32Address);
    1a8c:	4b01      	ldr	r3, [pc, #4]	; (1a94 <am_hal_flash_load_ui32+0x8>)
    1a8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1a90:	4708      	bx	r1
    1a92:	bf00      	nop
    1a94:	10001028 	.word	0x10001028

00001a98 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a98:	4b01      	ldr	r3, [pc, #4]	; (1aa0 <am_hal_flash_delay+0x8>)
    1a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1a9c:	4708      	bx	r1
    1a9e:	bf00      	nop
    1aa0:	10001028 	.word	0x10001028

00001aa4 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1aa4:	280f      	cmp	r0, #15
    1aa6:	d80b      	bhi.n	1ac0 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1aa8:	2805      	cmp	r0, #5
    1aaa:	d013      	beq.n	1ad4 <am_hal_interrupt_enable+0x30>
    1aac:	2806      	cmp	r0, #6
    1aae:	d017      	beq.n	1ae0 <am_hal_interrupt_enable+0x3c>
    1ab0:	2804      	cmp	r0, #4
    1ab2:	d104      	bne.n	1abe <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1ab4:	4a0d      	ldr	r2, [pc, #52]	; (1aec <am_hal_interrupt_enable+0x48>)
    1ab6:	6813      	ldr	r3, [r2, #0]
    1ab8:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1abc:	6010      	str	r0, [r2, #0]
    1abe:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1ac0:	f1a0 0310 	sub.w	r3, r0, #16
    1ac4:	f003 0c1f 	and.w	ip, r3, #31
    1ac8:	2001      	movs	r0, #1
    1aca:	4909      	ldr	r1, [pc, #36]	; (1af0 <am_hal_interrupt_enable+0x4c>)
    1acc:	fa00 f20c 	lsl.w	r2, r0, ip
    1ad0:	600a      	str	r2, [r1, #0]
    1ad2:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1ad4:	4805      	ldr	r0, [pc, #20]	; (1aec <am_hal_interrupt_enable+0x48>)
    1ad6:	6801      	ldr	r1, [r0, #0]
    1ad8:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1adc:	6002      	str	r2, [r0, #0]
            break;
    1ade:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1ae0:	4902      	ldr	r1, [pc, #8]	; (1aec <am_hal_interrupt_enable+0x48>)
    1ae2:	680a      	ldr	r2, [r1, #0]
    1ae4:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1ae8:	600b      	str	r3, [r1, #0]
            break;
    1aea:	4770      	bx	lr
    1aec:	e000ed24 	.word	0xe000ed24
    1af0:	e000e100 	.word	0xe000e100

00001af4 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1af4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1af8:	b662      	cpsie	i
    __asm("    bx lr");
    1afa:	4770      	bx	lr

00001afc <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1afc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1b00:	b672      	cpsid	i
    __asm("    bx lr");
    1b02:	4770      	bx	lr

00001b04 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1b04:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1b08:	4770      	bx	lr
    1b0a:	bf00      	nop

00001b0c <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1b0c:	4b0d      	ldr	r3, [pc, #52]	; (1b44 <am_hal_itm_enable+0x38>)
    1b0e:	6818      	ldr	r0, [r3, #0]
    1b10:	07c2      	lsls	r2, r0, #31
    1b12:	d416      	bmi.n	1b42 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1b14:	4a0c      	ldr	r2, [pc, #48]	; (1b48 <am_hal_itm_enable+0x3c>)
    1b16:	6811      	ldr	r1, [r2, #0]
    1b18:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1b1c:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1b1e:	6810      	ldr	r0, [r2, #0]
    1b20:	01c3      	lsls	r3, r0, #7
    1b22:	d5fc      	bpl.n	1b1e <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1b24:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b26:	4809      	ldr	r0, [pc, #36]	; (1b4c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b28:	4c09      	ldr	r4, [pc, #36]	; (1b50 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b2a:	4d0a      	ldr	r5, [pc, #40]	; (1b54 <am_hal_itm_enable+0x48>)
    1b2c:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b2e:	250f      	movs	r5, #15
    1b30:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1b32:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b34:	4908      	ldr	r1, [pc, #32]	; (1b58 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1b36:	4b09      	ldr	r3, [pc, #36]	; (1b5c <am_hal_itm_enable+0x50>)
    1b38:	4a09      	ldr	r2, [pc, #36]	; (1b60 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b3a:	f04f 30ff 	mov.w	r0, #4294967295
    1b3e:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1b40:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1b42:	4770      	bx	lr
    1b44:	1000118c 	.word	0x1000118c
    1b48:	e000edfc 	.word	0xe000edfc
    1b4c:	e0000fb0 	.word	0xe0000fb0
    1b50:	e0000e40 	.word	0xe0000e40
    1b54:	c5acce55 	.word	0xc5acce55
    1b58:	e0000e00 	.word	0xe0000e00
    1b5c:	e0000e80 	.word	0xe0000e80
    1b60:	00150511 	.word	0x00150511

00001b64 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1b64:	4a03      	ldr	r2, [pc, #12]	; (1b74 <am_hal_itm_not_busy+0x10>)
    1b66:	6813      	ldr	r3, [r2, #0]
    1b68:	021b      	lsls	r3, r3, #8
    1b6a:	d4fc      	bmi.n	1b66 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b6c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1b70:	f7ff bf92 	b.w	1a98 <am_hal_flash_delay>
    1b74:	e0000e80 	.word	0xe0000e80

00001b78 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1b78:	7803      	ldrb	r3, [r0, #0]
    1b7a:	b1ab      	cbz	r3, 1ba8 <am_hal_itm_print+0x30>
    1b7c:	4602      	mov	r2, r0
    1b7e:	2300      	movs	r3, #0
    1b80:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1b84:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1b86:	2900      	cmp	r1, #0
    1b88:	d1fa      	bne.n	1b80 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1b8a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1b8e:	b430      	push	{r4, r5}
    1b90:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1b92:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1b94:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1b98:	f8dc 3000 	ldr.w	r3, [ip]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d0fb      	beq.n	1b98 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1ba0:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1ba2:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1ba4:	d1f6      	bne.n	1b94 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1ba6:	bc30      	pop	{r4, r5}
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop

00001bac <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1bac:	4a0d      	ldr	r2, [pc, #52]	; (1be4 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bb0:	490e      	ldr	r1, [pc, #56]	; (1bec <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1bb2:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1bb4:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1bb6:	6814      	ldr	r4, [r2, #0]
    1bb8:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bba:	6809      	ldr	r1, [r1, #0]
    1bbc:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bbe:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bc0:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bc2:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bc4:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bc6:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1bc8:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bcc:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1bce:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1bd0:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1bd8:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bda:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bdc:	6142      	str	r2, [r0, #20]
}
    1bde:	bc70      	pop	{r4, r5, r6}
    1be0:	4770      	bx	lr
    1be2:	bf00      	nop
    1be4:	400201c4 	.word	0x400201c4
    1be8:	400201cc 	.word	0x400201cc
    1bec:	400201c0 	.word	0x400201c0

00001bf0 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1bf0:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1bf2:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1bf4:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1bf6:	b1c0      	cbz	r0, 1c2a <am_hal_pwrctrl_periph_enable+0x3a>
    1bf8:	1e43      	subs	r3, r0, #1
    1bfa:	4203      	tst	r3, r0
    1bfc:	d115      	bne.n	1c2a <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1bfe:	f3ef 8010 	mrs	r0, PRIMASK
    1c02:	9001      	str	r0, [sp, #4]
    1c04:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1c06:	4a18      	ldr	r2, [pc, #96]	; (1c68 <am_hal_pwrctrl_periph_enable+0x78>)
    1c08:	6811      	ldr	r1, [r2, #0]
    1c0a:	4321      	orrs	r1, r4
    1c0c:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1c0e:	9b01      	ldr	r3, [sp, #4]
    1c10:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1c14:	200e      	movs	r0, #14
    1c16:	f7ff ff3f 	bl	1a98 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1c1a:	f014 0f0e 	tst.w	r4, #14
    1c1e:	d10a      	bne.n	1c36 <am_hal_pwrctrl_periph_enable+0x46>
    1c20:	f014 0f70 	tst.w	r4, #112	; 0x70
    1c24:	d00e      	beq.n	1c44 <am_hal_pwrctrl_periph_enable+0x54>
    1c26:	2408      	movs	r4, #8
    1c28:	e006      	b.n	1c38 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c2a:	4a10      	ldr	r2, [pc, #64]	; (1c6c <am_hal_pwrctrl_periph_enable+0x7c>)
    1c2c:	4810      	ldr	r0, [pc, #64]	; (1c70 <am_hal_pwrctrl_periph_enable+0x80>)
    1c2e:	215d      	movs	r1, #93	; 0x5d
    1c30:	f7ff ff2a 	bl	1a88 <am_hal_debug_error>
    1c34:	e7e3      	b.n	1bfe <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1c36:	2404      	movs	r4, #4
    1c38:	4a0e      	ldr	r2, [pc, #56]	; (1c74 <am_hal_pwrctrl_periph_enable+0x84>)
    1c3a:	6811      	ldr	r1, [r2, #0]
    1c3c:	420c      	tst	r4, r1
    1c3e:	d0fc      	beq.n	1c3a <am_hal_pwrctrl_periph_enable+0x4a>
}
    1c40:	b002      	add	sp, #8
    1c42:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1c44:	f240 1081 	movw	r0, #385	; 0x181
    1c48:	4020      	ands	r0, r4
    1c4a:	b940      	cbnz	r0, 1c5e <am_hal_pwrctrl_periph_enable+0x6e>
    1c4c:	05a3      	lsls	r3, r4, #22
    1c4e:	d408      	bmi.n	1c62 <am_hal_pwrctrl_periph_enable+0x72>
    1c50:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1c54:	bf14      	ite	ne
    1c56:	2410      	movne	r4, #16
    1c58:	f04f 34ff 	moveq.w	r4, #4294967295
    1c5c:	e7ec      	b.n	1c38 <am_hal_pwrctrl_periph_enable+0x48>
    1c5e:	2402      	movs	r4, #2
    1c60:	e7ea      	b.n	1c38 <am_hal_pwrctrl_periph_enable+0x48>
    1c62:	2480      	movs	r4, #128	; 0x80
    1c64:	e7e8      	b.n	1c38 <am_hal_pwrctrl_periph_enable+0x48>
    1c66:	bf00      	nop
    1c68:	40021008 	.word	0x40021008
    1c6c:	000021f8 	.word	0x000021f8
    1c70:	0000222c 	.word	0x0000222c
    1c74:	40021014 	.word	0x40021014

00001c78 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c78:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c7c:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c7e:	d03a      	beq.n	1cf6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1c80:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1c84:	f000 809d 	beq.w	1dc2 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1c88:	2801      	cmp	r0, #1
    1c8a:	f000 809d 	beq.w	1dc8 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1c8e:	2803      	cmp	r0, #3
    1c90:	f000 80a6 	beq.w	1de0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1c94:	2807      	cmp	r0, #7
    1c96:	f000 809c 	beq.w	1dd2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1c9a:	280f      	cmp	r0, #15
    1c9c:	f000 80a5 	beq.w	1dea <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1ca0:	281f      	cmp	r0, #31
    1ca2:	f000 80b1 	beq.w	1e08 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1ca6:	283f      	cmp	r0, #63	; 0x3f
    1ca8:	f000 80b5 	beq.w	1e16 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1cac:	287f      	cmp	r0, #127	; 0x7f
    1cae:	f000 80b9 	beq.w	1e24 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1cb2:	28ff      	cmp	r0, #255	; 0xff
    1cb4:	f000 80a0 	beq.w	1df8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1cb8:	f240 13ff 	movw	r3, #511	; 0x1ff
    1cbc:	4298      	cmp	r0, r3
    1cbe:	f000 80b8 	beq.w	1e32 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1cc2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1cc6:	4288      	cmp	r0, r1
    1cc8:	f000 80b9 	beq.w	1e3e <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1ccc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1cd0:	4290      	cmp	r0, r2
    1cd2:	d00e      	beq.n	1cf2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1cd4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1cd8:	f000 80b7 	beq.w	1e4a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1cdc:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1ce0:	42a0      	cmp	r0, r4
    1ce2:	f000 80b5 	beq.w	1e50 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1ce6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1cea:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1cee:	4560      	cmp	r0, ip
    1cf0:	d132      	bne.n	1d58 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1cf2:	495c      	ldr	r1, [pc, #368]	; (1e64 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1cf4:	e066      	b.n	1dc4 <am_hal_pwrctrl_memory_enable+0x14c>
    1cf6:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1cfa:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1cfc:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1cfe:	4c5a      	ldr	r4, [pc, #360]	; (1e68 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d00:	6822      	ldr	r2, [r4, #0]
    1d02:	402a      	ands	r2, r5
    1d04:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1d06:	4d58      	ldr	r5, [pc, #352]	; (1e68 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d08:	682c      	ldr	r4, [r5, #0]
    1d0a:	4320      	orrs	r0, r4
    1d0c:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d029      	beq.n	1d66 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d12:	4a56      	ldr	r2, [pc, #344]	; (1e6c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1d14:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d16:	4203      	tst	r3, r0
    1d18:	bf18      	it	ne
    1d1a:	20c6      	movne	r0, #198	; 0xc6
    1d1c:	d01f      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d1e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d20:	422b      	tst	r3, r5
    1d22:	d01c      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d24:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d26:	4223      	tst	r3, r4
    1d28:	d019      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d2a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d2c:	422b      	tst	r3, r5
    1d2e:	d016      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d30:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d32:	4223      	tst	r3, r4
    1d34:	d013      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d36:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d38:	422b      	tst	r3, r5
    1d3a:	d010      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d3c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d3e:	4223      	tst	r3, r4
    1d40:	d00d      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d42:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d44:	422b      	tst	r3, r5
    1d46:	d00a      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d48:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d4a:	4223      	tst	r3, r4
    1d4c:	d007      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d4e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d50:	422b      	tst	r3, r5
    1d52:	d004      	beq.n	1d5e <am_hal_pwrctrl_memory_enable+0xe6>
    1d54:	3809      	subs	r0, #9
    1d56:	d1e2      	bne.n	1d1e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1d58:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1d5a:	bc30      	pop	{r4, r5}
    1d5c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1d5e:	b911      	cbnz	r1, 1d66 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1d60:	2001      	movs	r0, #1
}
    1d62:	bc30      	pop	{r4, r5}
    1d64:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d66:	4b41      	ldr	r3, [pc, #260]	; (1e6c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1d68:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d6a:	ea31 0402 	bics.w	r4, r1, r2
    1d6e:	bf18      	it	ne
    1d70:	24c6      	movne	r4, #198	; 0xc6
    1d72:	d0f5      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d74:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d76:	ea31 0000 	bics.w	r0, r1, r0
    1d7a:	d0f1      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d7c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d7e:	ea31 0005 	bics.w	r0, r1, r5
    1d82:	d0ed      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d84:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d86:	ea31 0002 	bics.w	r0, r1, r2
    1d8a:	d0e9      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d8c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d8e:	ea31 0000 	bics.w	r0, r1, r0
    1d92:	d0e5      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d94:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d96:	ea31 0005 	bics.w	r0, r1, r5
    1d9a:	d0e1      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d9c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d9e:	ea31 0002 	bics.w	r0, r1, r2
    1da2:	d0dd      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1da4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1da6:	ea31 0000 	bics.w	r0, r1, r0
    1daa:	d0d9      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dac:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1dae:	ea31 0005 	bics.w	r0, r1, r5
    1db2:	d0d5      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1db4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1db6:	ea31 0002 	bics.w	r0, r1, r2
    1dba:	d0d1      	beq.n	1d60 <am_hal_pwrctrl_memory_enable+0xe8>
    1dbc:	3c09      	subs	r4, #9
    1dbe:	d1d9      	bne.n	1d74 <am_hal_pwrctrl_memory_enable+0xfc>
    1dc0:	e7ca      	b.n	1d58 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1dc2:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1dc4:	2300      	movs	r3, #0
    1dc6:	e79e      	b.n	1d06 <am_hal_pwrctrl_memory_enable+0x8e>
    1dc8:	4d29      	ldr	r5, [pc, #164]	; (1e70 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dca:	4b2a      	ldr	r3, [pc, #168]	; (1e74 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
    1dd0:	e795      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1dd2:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dd6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1dda:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1dde:	e78e      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1de0:	4d25      	ldr	r5, [pc, #148]	; (1e78 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1de2:	4b26      	ldr	r3, [pc, #152]	; (1e7c <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1de4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1de8:	e789      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1dea:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dee:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1df2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1df6:	e782      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1df8:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dfc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1e00:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1e04:	20ff      	movs	r0, #255	; 0xff
    1e06:	e77a      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1e08:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e0c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1e10:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1e14:	e773      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1e16:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e1a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1e1e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1e22:	e76c      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1e24:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e28:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1e2c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e30:	e765      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    1e32:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e36:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1e3a:	4911      	ldr	r1, [pc, #68]	; (1e80 <am_hal_pwrctrl_memory_enable+0x208>)
    1e3c:	e75f      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1e3e:	4911      	ldr	r1, [pc, #68]	; (1e84 <am_hal_pwrctrl_memory_enable+0x20c>)
    1e40:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1e48:	e759      	b.n	1cfe <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e4a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e4e:	e7b9      	b.n	1dc4 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1e50:	4805      	ldr	r0, [pc, #20]	; (1e68 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e52:	6803      	ldr	r3, [r0, #0]
    1e54:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1e58:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e5a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1e5e:	2100      	movs	r1, #0
    1e60:	e757      	b.n	1d12 <am_hal_pwrctrl_memory_enable+0x9a>
    1e62:	bf00      	nop
    1e64:	0007ff00 	.word	0x0007ff00
    1e68:	40021010 	.word	0x40021010
    1e6c:	40021014 	.word	0x40021014
    1e70:	fffff801 	.word	0xfffff801
    1e74:	0007fe00 	.word	0x0007fe00
    1e78:	fffff803 	.word	0xfffff803
    1e7c:	0007fc00 	.word	0x0007fc00
    1e80:	0001ff00 	.word	0x0001ff00
    1e84:	0003ff00 	.word	0x0003ff00

00001e88 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e88:	4b0b      	ldr	r3, [pc, #44]	; (1eb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    1e8a:	681a      	ldr	r2, [r3, #0]
    1e8c:	0792      	lsls	r2, r2, #30
    1e8e:	d502      	bpl.n	1e96 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1e90:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e92:	07c3      	lsls	r3, r0, #31
    1e94:	d40e      	bmi.n	1eb4 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e96:	4b09      	ldr	r3, [pc, #36]	; (1ebc <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e98:	4a07      	ldr	r2, [pc, #28]	; (1eb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e9a:	6819      	ldr	r1, [r3, #0]
    1e9c:	f041 0002 	orr.w	r0, r1, #2
    1ea0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1ea2:	6819      	ldr	r1, [r3, #0]
    1ea4:	f041 0001 	orr.w	r0, r1, #1
    1ea8:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1eaa:	6813      	ldr	r3, [r2, #0]
    1eac:	f003 0103 	and.w	r1, r3, #3
    1eb0:	2903      	cmp	r1, #3
    1eb2:	d1fa      	bne.n	1eaa <am_hal_pwrctrl_bucks_enable+0x22>
    1eb4:	4770      	bx	lr
    1eb6:	bf00      	nop
    1eb8:	40021004 	.word	0x40021004
    1ebc:	40021000 	.word	0x40021000

00001ec0 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1ec0:	4b12      	ldr	r3, [pc, #72]	; (1f0c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1ec2:	681a      	ldr	r2, [r3, #0]
    1ec4:	0792      	lsls	r2, r2, #30
    1ec6:	d402      	bmi.n	1ece <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1ec8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1eca:	07c3      	lsls	r3, r0, #31
    1ecc:	d51c      	bpl.n	1f08 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ece:	4910      	ldr	r1, [pc, #64]	; (1f10 <am_hal_pwrctrl_bucks_disable+0x50>)
    1ed0:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1ed2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1ed6:	2a20      	cmp	r2, #32
    1ed8:	d00b      	beq.n	1ef2 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1eda:	4b0e      	ldr	r3, [pc, #56]	; (1f14 <am_hal_pwrctrl_bucks_disable+0x54>)
    1edc:	681a      	ldr	r2, [r3, #0]
    1ede:	f022 0002 	bic.w	r0, r2, #2
    1ee2:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1ee4:	6819      	ldr	r1, [r3, #0]
    1ee6:	f021 0201 	bic.w	r2, r1, #1
    1eea:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1eec:	200a      	movs	r0, #10
    1eee:	f7ff bdd3 	b.w	1a98 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1ef2:	4809      	ldr	r0, [pc, #36]	; (1f18 <am_hal_pwrctrl_bucks_disable+0x58>)
    1ef4:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1ef6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1efa:	d1ee      	bne.n	1eda <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1efc:	4805      	ldr	r0, [pc, #20]	; (1f14 <am_hal_pwrctrl_bucks_disable+0x54>)
    1efe:	6803      	ldr	r3, [r0, #0]
    1f00:	f003 0105 	and.w	r1, r3, #5
    1f04:	6001      	str	r1, [r0, #0]
    1f06:	e7f1      	b.n	1eec <am_hal_pwrctrl_bucks_disable+0x2c>
    1f08:	4770      	bx	lr
    1f0a:	bf00      	nop
    1f0c:	40021004 	.word	0x40021004
    1f10:	4002000c 	.word	0x4002000c
    1f14:	40021000 	.word	0x40021000
    1f18:	40021008 	.word	0x40021008

00001f1c <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1e:	b083      	sub	sp, #12
    1f20:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1f22:	f7ff fdeb 	bl	1afc <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1f26:	4a41      	ldr	r2, [pc, #260]	; (202c <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1f28:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1f2a:	b11d      	cbz	r5, 1f34 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1f2c:	4b40      	ldr	r3, [pc, #256]	; (2030 <am_hal_sysctrl_sleep+0x114>)
    1f2e:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1f30:	07c3      	lsls	r3, r0, #31
    1f32:	d509      	bpl.n	1f48 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1f34:	6811      	ldr	r1, [r2, #0]
    1f36:	f021 0604 	bic.w	r6, r1, #4
    1f3a:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1f3c:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1f3e:	4620      	mov	r0, r4
    1f40:	f7ff fde0 	bl	1b04 <am_hal_interrupt_master_set>
}
    1f44:	b003      	add	sp, #12
    1f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1f48:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f4a:	493a      	ldr	r1, [pc, #232]	; (2034 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1f4c:	4f3a      	ldr	r7, [pc, #232]	; (2038 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1f4e:	4d3b      	ldr	r5, [pc, #236]	; (203c <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1f50:	483b      	ldr	r0, [pc, #236]	; (2040 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1f52:	f043 0604 	orr.w	r6, r3, #4
    1f56:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f58:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1f5a:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1f5c:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1f5e:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1f64:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1f66:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f6a:	bf14      	ite	ne
    1f6c:	2500      	movne	r5, #0
    1f6e:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1f70:	2e03      	cmp	r6, #3
    1f72:	bf8c      	ite	hi
    1f74:	2100      	movhi	r1, #0
    1f76:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1f78:	f012 0303 	ands.w	r3, r2, #3
    1f7c:	bf18      	it	ne
    1f7e:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f80:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1f84:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f86:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1f88:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f8c:	b91e      	cbnz	r6, 1f96 <am_hal_sysctrl_sleep+0x7a>
    1f8e:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1f92:	2d0f      	cmp	r5, #15
    1f94:	d00a      	beq.n	1fac <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1f96:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1f98:	2d0f      	cmp	r5, #15
    1f9a:	d01a      	beq.n	1fd2 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1f9c:	4f29      	ldr	r7, [pc, #164]	; (2044 <am_hal_sysctrl_sleep+0x128>)
    1f9e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1fa0:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1fa2:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1fa4:	f7ff fdae 	bl	1b04 <am_hal_interrupt_master_set>
}
    1fa8:	b003      	add	sp, #12
    1faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1fac:	683a      	ldr	r2, [r7, #0]
    1fae:	1e50      	subs	r0, r2, #1
    1fb0:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1fb2:	9800      	ldr	r0, [sp, #0]
    1fb4:	f04f 31ff 	mov.w	r1, #4294967295
    1fb8:	f7ff fcec 	bl	1994 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1fbc:	9800      	ldr	r0, [sp, #0]
    1fbe:	4633      	mov	r3, r6
    1fc0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1fc4:	f04f 31ff 	mov.w	r1, #4294967295
    1fc8:	f7ff fcf8 	bl	19bc <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1fcc:	f7ff ff78 	bl	1ec0 <am_hal_pwrctrl_bucks_disable>
    1fd0:	e7e1      	b.n	1f96 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1fd2:	f3ef 8310 	mrs	r3, PRIMASK
    1fd6:	9301      	str	r3, [sp, #4]
    1fd8:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1fda:	4e1b      	ldr	r6, [pc, #108]	; (2048 <am_hal_sysctrl_sleep+0x12c>)
    1fdc:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1fde:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1fe0:	6835      	ldr	r5, [r6, #0]
    1fe2:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1fe6:	f04c 021c 	orr.w	r2, ip, #28
    1fea:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1fec:	6830      	ldr	r0, [r6, #0]
    1fee:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1ff2:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1ff6:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ff8:	9e01      	ldr	r6, [sp, #4]
    1ffa:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1ffe:	201c      	movs	r0, #28
    2000:	f7ff fd4a 	bl	1a98 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2004:	f7ff ff40 	bl	1e88 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2008:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    200a:	4910      	ldr	r1, [pc, #64]	; (204c <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    200c:	4d0d      	ldr	r5, [pc, #52]	; (2044 <am_hal_sysctrl_sleep+0x128>)
    200e:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2010:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2012:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2014:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2016:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2018:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    201a:	f7ff fd3d 	bl	1a98 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    201e:	9800      	ldr	r0, [sp, #0]
    2020:	f04f 31ff 	mov.w	r1, #4294967295
    2024:	f7ff fc9c 	bl	1960 <am_hal_ctimer_start>
    2028:	e789      	b.n	1f3e <am_hal_sysctrl_sleep+0x22>
    202a:	bf00      	nop
    202c:	e000ed10 	.word	0xe000ed10
    2030:	40020250 	.word	0x40020250
    2034:	4002000c 	.word	0x4002000c
    2038:	10001198 	.word	0x10001198
    203c:	40021000 	.word	0x40021000
    2040:	40021008 	.word	0x40021008
    2044:	10001190 	.word	0x10001190
    2048:	40020068 	.word	0x40020068
    204c:	10001194 	.word	0x10001194

00002050 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2050:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2052:	4a22      	ldr	r2, [pc, #136]	; (20dc <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2054:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2056:	2100      	movs	r1, #0
    2058:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    205a:	b333      	cbz	r3, 20aa <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    205c:	4d20      	ldr	r5, [pc, #128]	; (20e0 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    205e:	4921      	ldr	r1, [pc, #132]	; (20e4 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2060:	4a21      	ldr	r2, [pc, #132]	; (20e8 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2062:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2064:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2068:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    206a:	458c      	cmp	ip, r1
    206c:	bf94      	ite	ls
    206e:	461d      	movls	r5, r3
    2070:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2072:	f7ff fbf3 	bl	185c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2076:	1c43      	adds	r3, r0, #1
    2078:	d02e      	beq.n	20d8 <am_hal_tpiu_enable+0x88>
    207a:	08c3      	lsrs	r3, r0, #3
    207c:	fbb3 fef5 	udiv	lr, r3, r5
    2080:	f10e 31ff 	add.w	r1, lr, #4294967295
    2084:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2086:	4a19      	ldr	r2, [pc, #100]	; (20ec <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2088:	4c19      	ldr	r4, [pc, #100]	; (20f0 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    208a:	4b1a      	ldr	r3, [pc, #104]	; (20f4 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    208c:	491a      	ldr	r1, [pc, #104]	; (20f8 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    208e:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2090:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2092:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2094:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2098:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    209a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    209c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    209e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    20a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    20a6:	f7ff bcf7 	b.w	1a98 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    20aa:	4c10      	ldr	r4, [pc, #64]	; (20ec <am_hal_tpiu_enable+0x9c>)
    20ac:	6905      	ldr	r5, [r0, #16]
    20ae:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    20b0:	6882      	ldr	r2, [r0, #8]
    20b2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    20b6:	68c3      	ldr	r3, [r0, #12]
    20b8:	4c09      	ldr	r4, [pc, #36]	; (20e0 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    20ba:	490e      	ldr	r1, [pc, #56]	; (20f4 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    20bc:	1e5d      	subs	r5, r3, #1
    20be:	2201      	movs	r2, #1
    20c0:	40aa      	lsls	r2, r5
    20c2:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    20c4:	680b      	ldr	r3, [r1, #0]
    20c6:	6840      	ldr	r0, [r0, #4]
    20c8:	4318      	orrs	r0, r3
    20ca:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    20cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    20d0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    20d4:	f7ff bce0 	b.w	1a98 <am_hal_flash_delay>
    20d8:	2005      	movs	r0, #5
    20da:	e7d4      	b.n	2086 <am_hal_tpiu_enable+0x36>
    20dc:	e0040304 	.word	0xe0040304
    20e0:	e0040004 	.word	0xe0040004
    20e4:	001da380 	.word	0x001da380
    20e8:	000f4240 	.word	0x000f4240
    20ec:	e0040010 	.word	0xe0040010
    20f0:	e00400f0 	.word	0xe00400f0
    20f4:	40020250 	.word	0x40020250
    20f8:	e0040f00 	.word	0xe0040f00

000020fc <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    20fc:	4b01      	ldr	r3, [pc, #4]	; (2104 <am_hal_tpiu_disable+0x8>)
    20fe:	2200      	movs	r2, #0
    2100:	601a      	str	r2, [r3, #0]
    2102:	4770      	bx	lr
    2104:	40020250 	.word	0x40020250

00002108 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2108:	4b01      	ldr	r3, [pc, #4]	; (2110 <am_hal_vcomp_disable+0x8>)
    210a:	2237      	movs	r2, #55	; 0x37
    210c:	601a      	str	r2, [r3, #0]
    210e:	4770      	bx	lr
    2110:	4000c008 	.word	0x4000c008
    2114:	20434441 	.word	0x20434441
    2118:	6d617845 	.word	0x6d617845
    211c:	20656c70 	.word	0x20656c70
    2120:	31207461 	.word	0x31207461
    2124:	7a483030 	.word	0x7a483030
    2128:	74697720 	.word	0x74697720
    212c:	44412068 	.word	0x44412068
    2130:	6e692043 	.word	0x6e692043
    2134:	4d504c20 	.word	0x4d504c20
    2138:	3d45444f 	.word	0x3d45444f
    213c:	00000a31 	.word	0x00000a31
    2140:	0a0a0a0a 	.word	0x0a0a0a0a
    2144:	0a0a0a0a 	.word	0x0a0a0a0a
    2148:	0a0a0a0a 	.word	0x0a0a0a0a
    214c:	0a0a0a0a 	.word	0x0a0a0a0a
    2150:	00000a0a 	.word	0x00000a0a
    2154:	69797254 	.word	0x69797254
    2158:	7420676e 	.word	0x7420676e
    215c:	6f63206f 	.word	0x6f63206f
    2160:	6769666e 	.word	0x6769666e
    2164:	20657275 	.word	0x20657275
    2168:	41206e61 	.word	0x41206e61
    216c:	73204344 	.word	0x73204344
    2170:	20746f6c 	.word	0x20746f6c
    2174:	74616874 	.word	0x74616874
    2178:	656f6420 	.word	0x656f6420
    217c:	74276e73 	.word	0x74276e73
    2180:	69786520 	.word	0x69786520
    2184:	002e7473 	.word	0x002e7473
    2188:	2e5c2e2e 	.word	0x2e5c2e2e
    218c:	6d615c2e 	.word	0x6d615c2e
    2190:	6c61685f 	.word	0x6c61685f
    2194:	6364615f 	.word	0x6364615f
    2198:	0000632e 	.word	0x0000632e

0000219c <am_hal_cachectrl_defaults>:
    219c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    21ac:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    21bc:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    21cc:	63206469 6b636f6c 74657320 676e6974     id clock setting
    21dc:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    21ec:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    21fc:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    220c:	206e6168 20656e6f 69726570 72656870     han one peripher
    221c:	61206c61 20612074 656d6974 0000002e     al at a time....
    222c:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    223c:	6c727463 0000632e                       ctrl.c..
