
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\uart_fifo_timeout\atollic_gcc\bin\uart_fifo_timeout_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002544  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000064  10001000  00002544  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003b8  10001064  000025a8  00021064  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021064  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006375  00000000  00000000  0002109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a20  00000000  00000000  00027410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f0  00000000  00000000  00028e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ce0  00000000  00000000  00029620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dd5  00000000  00000000  0002a300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a59  00000000  00000000  0002e0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00030b2e  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001670  00000000  00000000  00030bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003279  00000000  00000000  0003221c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 49 05 00 00 b1 05 00 00 c1 05 00 00     ....I...........
      10:	c1 05 00 00 c1 05 00 00 c1 05 00 00 00 00 00 00     ................
	...
      2c:	b9 05 00 00 b9 05 00 00 00 00 00 00 b9 05 00 00     ................
      3c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      4c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      5c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      6c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 29 03 00 00     ............)...
      7c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      8c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      9c:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      ac:	b9 05 00 00 b9 05 00 00 b9 05 00 00 b9 05 00 00     ................
      bc:	b9 05 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32Module)
{
     160:	b580      	push	{r7, lr}
     162:	b086      	sub	sp, #24
     164:	af02      	add	r7, sp, #8
     166:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     168:	f3ef 8310 	mrs	r3, PRIMASK
     16c:	60fb      	str	r3, [r7, #12]
     16e:	b672      	cpsid	i
     170:	4b2d      	ldr	r3, [pc, #180]	; (228 <uart_init+0xc8>)
     172:	2273      	movs	r2, #115	; 0x73
     174:	601a      	str	r2, [r3, #0]
     176:	4a2d      	ldr	r2, [pc, #180]	; (22c <uart_init+0xcc>)
     178:	4b2c      	ldr	r3, [pc, #176]	; (22c <uart_init+0xcc>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     180:	6013      	str	r3, [r2, #0]
     182:	4a2b      	ldr	r2, [pc, #172]	; (230 <uart_init+0xd0>)
     184:	4b2a      	ldr	r3, [pc, #168]	; (230 <uart_init+0xd0>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18c:	6013      	str	r3, [r2, #0]
     18e:	4a29      	ldr	r2, [pc, #164]	; (234 <uart_init+0xd4>)
     190:	4b28      	ldr	r3, [pc, #160]	; (234 <uart_init+0xd4>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     198:	6013      	str	r3, [r2, #0]
     19a:	4b23      	ldr	r3, [pc, #140]	; (228 <uart_init+0xc8>)
     19c:	2200      	movs	r2, #0
     19e:	601a      	str	r2, [r3, #0]
     1a0:	68fb      	ldr	r3, [r7, #12]
     1a2:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     1a6:	f3ef 8310 	mrs	r3, PRIMASK
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	b672      	cpsid	i
     1ae:	4b1e      	ldr	r3, [pc, #120]	; (228 <uart_init+0xc8>)
     1b0:	2273      	movs	r2, #115	; 0x73
     1b2:	601a      	str	r2, [r3, #0]
     1b4:	4a1d      	ldr	r2, [pc, #116]	; (22c <uart_init+0xcc>)
     1b6:	4b1d      	ldr	r3, [pc, #116]	; (22c <uart_init+0xcc>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     1be:	6013      	str	r3, [r2, #0]
     1c0:	4a1b      	ldr	r2, [pc, #108]	; (230 <uart_init+0xd0>)
     1c2:	4b1b      	ldr	r3, [pc, #108]	; (230 <uart_init+0xd0>)
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     1ce:	6013      	str	r3, [r2, #0]
     1d0:	4a18      	ldr	r2, [pc, #96]	; (234 <uart_init+0xd4>)
     1d2:	4b18      	ldr	r3, [pc, #96]	; (234 <uart_init+0xd4>)
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1da:	6013      	str	r3, [r2, #0]
     1dc:	4b12      	ldr	r3, [pc, #72]	; (228 <uart_init+0xc8>)
     1de:	2200      	movs	r2, #0
     1e0:	601a      	str	r2, [r3, #0]
     1e2:	68bb      	ldr	r3, [r7, #8]
     1e4:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32Module);
     1e8:	6878      	ldr	r0, [r7, #4]
     1ea:	f001 fe65 	bl	1eb8 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32Module);
     1ee:	6878      	ldr	r0, [r7, #4]
     1f0:	f001 fe76 	bl	1ee0 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32Module);
     1f4:	6878      	ldr	r0, [r7, #4]
     1f6:	f001 fe4b 	bl	1e90 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32Module, &g_sUartConfig);
     1fa:	490f      	ldr	r1, [pc, #60]	; (238 <uart_init+0xd8>)
     1fc:	6878      	ldr	r0, [r7, #4]
     1fe:	f001 fde5 	bl	1dcc <am_hal_uart_config>

    //
    // Configure the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     202:	2112      	movs	r1, #18
     204:	6878      	ldr	r0, [r7, #4]
     206:	f001 fe7d 	bl	1f04 <am_hal_uart_fifo_config>

    //
    // Initialize the UART queues.
    //
    am_hal_uart_init_buffered(ui32Module, g_pui8UartRxBuffer, UART_BUFFER_SIZE,
     20a:	f44f 7380 	mov.w	r3, #256	; 0x100
     20e:	9300      	str	r3, [sp, #0]
     210:	4b0a      	ldr	r3, [pc, #40]	; (23c <uart_init+0xdc>)
     212:	f44f 7280 	mov.w	r2, #256	; 0x100
     216:	490a      	ldr	r1, [pc, #40]	; (240 <uart_init+0xe0>)
     218:	6878      	ldr	r0, [r7, #4]
     21a:	f001 fe83 	bl	1f24 <am_hal_uart_init_buffered>
                              g_pui8UartTxBuffer, UART_BUFFER_SIZE);
}
     21e:	bf00      	nop
     220:	3710      	adds	r7, #16
     222:	46bd      	mov	sp, r7
     224:	bd80      	pop	{r7, pc}
     226:	bf00      	nop
     228:	40010060 	.word	0x40010060
     22c:	40010048 	.word	0x40010048
     230:	40010014 	.word	0x40010014
     234:	400100f4 	.word	0x400100f4
     238:	10001000 	.word	0x10001000
     23c:	10001270 	.word	0x10001270
     240:	10001170 	.word	0x10001170

00000244 <uart_enable>:
// Enable the UART
//
//*****************************************************************************
void
uart_enable(uint32_t ui32Module)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	6078      	str	r0, [r7, #4]
    //
    // Enable the UART clock.
    //
    am_hal_uart_clock_enable(ui32Module);
     24c:	6878      	ldr	r0, [r7, #4]
     24e:	f001 fe47 	bl	1ee0 <am_hal_uart_clock_enable>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32Module);
     252:	6878      	ldr	r0, [r7, #4]
     254:	f001 fe08 	bl	1e68 <am_hal_uart_enable>
    am_hal_uart_int_enable(ui32Module, AM_HAL_UART_INT_RX_TMOUT |
     258:	2151      	movs	r1, #81	; 0x51
     25a:	6878      	ldr	r0, [r7, #4]
     25c:	f001 fdfc 	bl	1e58 <am_hal_uart_int_enable>
                                       AM_HAL_UART_INT_TXCMP);

    //
    // Enable the UART pins.
    //
    am_bsp_pin_enable(COM_UART_TX);
     260:	f3ef 8310 	mrs	r3, PRIMASK
     264:	60fb      	str	r3, [r7, #12]
     266:	b672      	cpsid	i
     268:	4b22      	ldr	r3, [pc, #136]	; (2f4 <uart_enable+0xb0>)
     26a:	2273      	movs	r2, #115	; 0x73
     26c:	601a      	str	r2, [r3, #0]
     26e:	4a22      	ldr	r2, [pc, #136]	; (2f8 <uart_enable+0xb4>)
     270:	4b21      	ldr	r3, [pc, #132]	; (2f8 <uart_enable+0xb4>)
     272:	681b      	ldr	r3, [r3, #0]
     274:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     278:	6013      	str	r3, [r2, #0]
     27a:	4a20      	ldr	r2, [pc, #128]	; (2fc <uart_enable+0xb8>)
     27c:	4b1f      	ldr	r3, [pc, #124]	; (2fc <uart_enable+0xb8>)
     27e:	681b      	ldr	r3, [r3, #0]
     280:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     284:	6013      	str	r3, [r2, #0]
     286:	4a1e      	ldr	r2, [pc, #120]	; (300 <uart_enable+0xbc>)
     288:	4b1d      	ldr	r3, [pc, #116]	; (300 <uart_enable+0xbc>)
     28a:	681b      	ldr	r3, [r3, #0]
     28c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     290:	6013      	str	r3, [r2, #0]
     292:	4b18      	ldr	r3, [pc, #96]	; (2f4 <uart_enable+0xb0>)
     294:	2200      	movs	r2, #0
     296:	601a      	str	r2, [r3, #0]
     298:	68fb      	ldr	r3, [r7, #12]
     29a:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     29e:	f3ef 8310 	mrs	r3, PRIMASK
     2a2:	60bb      	str	r3, [r7, #8]
     2a4:	b672      	cpsid	i
     2a6:	4b13      	ldr	r3, [pc, #76]	; (2f4 <uart_enable+0xb0>)
     2a8:	2273      	movs	r2, #115	; 0x73
     2aa:	601a      	str	r2, [r3, #0]
     2ac:	4a12      	ldr	r2, [pc, #72]	; (2f8 <uart_enable+0xb4>)
     2ae:	4b12      	ldr	r3, [pc, #72]	; (2f8 <uart_enable+0xb4>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     2b6:	6013      	str	r3, [r2, #0]
     2b8:	4a10      	ldr	r2, [pc, #64]	; (2fc <uart_enable+0xb8>)
     2ba:	4b10      	ldr	r3, [pc, #64]	; (2fc <uart_enable+0xb8>)
     2bc:	681b      	ldr	r3, [r3, #0]
     2be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     2c6:	6013      	str	r3, [r2, #0]
     2c8:	4a0d      	ldr	r2, [pc, #52]	; (300 <uart_enable+0xbc>)
     2ca:	4b0d      	ldr	r3, [pc, #52]	; (300 <uart_enable+0xbc>)
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2d2:	6013      	str	r3, [r2, #0]
     2d4:	4b07      	ldr	r3, [pc, #28]	; (2f4 <uart_enable+0xb0>)
     2d6:	2200      	movs	r2, #0
     2d8:	601a      	str	r2, [r3, #0]
     2da:	68bb      	ldr	r3, [r7, #8]
     2dc:	f383 8810 	msr	PRIMASK, r3

    am_hal_interrupt_enable(AM_HAL_INTERRUPT_UART + ui32Module);
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	331e      	adds	r3, #30
     2e4:	4618      	mov	r0, r3
     2e6:	f001 f9c1 	bl	166c <am_hal_interrupt_enable>
}
     2ea:	bf00      	nop
     2ec:	3710      	adds	r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bd80      	pop	{r7, pc}
     2f2:	bf00      	nop
     2f4:	40010060 	.word	0x40010060
     2f8:	40010048 	.word	0x40010048
     2fc:	40010014 	.word	0x40010014
     300:	400100f4 	.word	0x400100f4

00000304 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(int32_t i32Module)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
     30a:	6078      	str	r0, [r7, #4]
    //
    // Wait until busy bit clears to make sure UART fully transmitted last byte
    //
    while ( am_hal_uart_flags_get(i32Module) & AM_HAL_UART_FR_BUSY );
     30c:	bf00      	nop
     30e:	687b      	ldr	r3, [r7, #4]
     310:	4618      	mov	r0, r3
     312:	f001 fe01 	bl	1f18 <am_hal_uart_flags_get>
     316:	4603      	mov	r3, r0
     318:	f003 0308 	and.w	r3, r3, #8
     31c:	2b00      	cmp	r3, #0
     31e:	d1f6      	bne.n	30e <uart_transmit_delay+0xa>
}
     320:	bf00      	nop
     322:	3708      	adds	r7, #8
     324:	46bd      	mov	sp, r7
     326:	bd80      	pop	{r7, pc}

00000328 <am_uart_isr>:
// UART1 Interrupt Service Routine
//
//*****************************************************************************
void
am_uart_isr(void)
{
     328:	b580      	push	{r7, lr}
     32a:	b084      	sub	sp, #16
     32c:	af00      	add	r7, sp, #0
    uint32_t status;
    uint32_t rxSize, txSize;

    status = am_hal_uart_int_status_get(0, false);
     32e:	2100      	movs	r1, #0
     330:	2000      	movs	r0, #0
     332:	f001 fd81 	bl	1e38 <am_hal_uart_int_status_get>
     336:	60f8      	str	r0, [r7, #12]

    am_hal_uart_int_clear(0, status);
     338:	68f9      	ldr	r1, [r7, #12]
     33a:	2000      	movs	r0, #0
     33c:	f001 fd86 	bl	1e4c <am_hal_uart_int_clear>

    if (status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_TX | AM_HAL_UART_INT_RX))
     340:	68fb      	ldr	r3, [r7, #12]
     342:	f003 0370 	and.w	r3, r3, #112	; 0x70
     346:	2b00      	cmp	r3, #0
     348:	d003      	beq.n	352 <am_uart_isr+0x2a>
    {
        am_hal_uart_service_buffered_timeout_save(0, status);
     34a:	68f9      	ldr	r1, [r7, #12]
     34c:	2000      	movs	r0, #0
     34e:	f001 fe27 	bl	1fa0 <am_hal_uart_service_buffered_timeout_save>
    }

    if (status & (AM_HAL_UART_INT_RX_TMOUT))
     352:	68fb      	ldr	r3, [r7, #12]
     354:	f003 0340 	and.w	r3, r3, #64	; 0x40
     358:	2b00      	cmp	r3, #0
     35a:	d005      	beq.n	368 <am_uart_isr+0x40>
    {
        g_ui8RxTimeoutFlag = 1;
     35c:	4b18      	ldr	r3, [pc, #96]	; (3c0 <am_uart_isr+0x98>)
     35e:	2201      	movs	r2, #1
     360:	701a      	strb	r2, [r3, #0]
        am_util_stdio_printf("\nTMOUT, ");
     362:	4818      	ldr	r0, [pc, #96]	; (3c4 <am_uart_isr+0x9c>)
     364:	f001 f81e 	bl	13a4 <am_util_stdio_printf>
    }

    am_hal_uart_get_status_buffered(0, &rxSize, &txSize);
     368:	1d3a      	adds	r2, r7, #4
     36a:	f107 0308 	add.w	r3, r7, #8
     36e:	4619      	mov	r1, r3
     370:	2000      	movs	r0, #0
     372:	f001 fdfb 	bl	1f6c <am_hal_uart_get_status_buffered>

    if (status & (AM_HAL_UART_INT_RX))
     376:	68fb      	ldr	r3, [r7, #12]
     378:	f003 0310 	and.w	r3, r3, #16
     37c:	2b00      	cmp	r3, #0
     37e:	d002      	beq.n	386 <am_uart_isr+0x5e>
    {
        am_util_stdio_printf(", RX ");
     380:	4811      	ldr	r0, [pc, #68]	; (3c8 <am_uart_isr+0xa0>)
     382:	f001 f80f 	bl	13a4 <am_util_stdio_printf>
    }

    if (status & (AM_HAL_UART_INT_TXCMP))
     386:	68fb      	ldr	r3, [r7, #12]
     388:	f003 0301 	and.w	r3, r3, #1
     38c:	2b00      	cmp	r3, #0
     38e:	d002      	beq.n	396 <am_uart_isr+0x6e>
    {
        am_util_stdio_printf(", TXCMP");
     390:	480e      	ldr	r0, [pc, #56]	; (3cc <am_uart_isr+0xa4>)
     392:	f001 f807 	bl	13a4 <am_util_stdio_printf>
    }

    am_hal_uart_get_status_buffered(0, &rxSize, &txSize);
     396:	1d3a      	adds	r2, r7, #4
     398:	f107 0308 	add.w	r3, r7, #8
     39c:	4619      	mov	r1, r3
     39e:	2000      	movs	r0, #0
     3a0:	f001 fde4 	bl	1f6c <am_hal_uart_get_status_buffered>

    if (rxSize >= UART_BUFFER_SIZE / 2)
     3a4:	68bb      	ldr	r3, [r7, #8]
     3a6:	2b7f      	cmp	r3, #127	; 0x7f
     3a8:	d905      	bls.n	3b6 <am_uart_isr+0x8e>
    {
        g_ui8BufferFullFlag = 1;
     3aa:	4b09      	ldr	r3, [pc, #36]	; (3d0 <am_uart_isr+0xa8>)
     3ac:	2201      	movs	r2, #1
     3ae:	701a      	strb	r2, [r3, #0]
        am_util_stdio_printf(", RXF");
     3b0:	4808      	ldr	r0, [pc, #32]	; (3d4 <am_uart_isr+0xac>)
     3b2:	f000 fff7 	bl	13a4 <am_util_stdio_printf>
    }
}
     3b6:	bf00      	nop
     3b8:	3710      	adds	r7, #16
     3ba:	46bd      	mov	sp, r7
     3bc:	bd80      	pop	{r7, pc}
     3be:	bf00      	nop
     3c0:	10001064 	.word	0x10001064
     3c4:	000022ec 	.word	0x000022ec
     3c8:	000022f8 	.word	0x000022f8
     3cc:	00002300 	.word	0x00002300
     3d0:	10001065 	.word	0x10001065
     3d4:	00002308 	.word	0x00002308

000003d8 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     3d8:	b580      	push	{r7, lr}
     3da:	b0c4      	sub	sp, #272	; 0x110
     3dc:	af00      	add	r7, sp, #0
    uint32_t ui32Module = AM_BSP_UART_PRINT_INST;
     3de:	2300      	movs	r3, #0
     3e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    uint32_t ui32Length;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     3e4:	2000      	movs	r0, #0
     3e6:	f001 f8e5 	bl	15b4 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     3ea:	4849      	ldr	r0, [pc, #292]	; (510 <main+0x138>)
     3ec:	f001 f84c 	bl	1488 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     3f0:	f000 fff6 	bl	13e0 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     3f4:	4847      	ldr	r0, [pc, #284]	; (514 <main+0x13c>)
     3f6:	f000 f963 	bl	6c0 <am_util_stdio_printf_init>
    am_bsp_pin_enable(ITM_SWO);
     3fa:	f3ef 8210 	mrs	r2, PRIMASK
     3fe:	463b      	mov	r3, r7
     400:	601a      	str	r2, [r3, #0]
     402:	b672      	cpsid	i
     404:	4b44      	ldr	r3, [pc, #272]	; (518 <main+0x140>)
     406:	2273      	movs	r2, #115	; 0x73
     408:	601a      	str	r2, [r3, #0]
     40a:	4a44      	ldr	r2, [pc, #272]	; (51c <main+0x144>)
     40c:	4b43      	ldr	r3, [pc, #268]	; (51c <main+0x144>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     414:	6013      	str	r3, [r2, #0]
     416:	4a42      	ldr	r2, [pc, #264]	; (520 <main+0x148>)
     418:	4b41      	ldr	r3, [pc, #260]	; (520 <main+0x148>)
     41a:	681b      	ldr	r3, [r3, #0]
     41c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     424:	6013      	str	r3, [r2, #0]
     426:	4a3f      	ldr	r2, [pc, #252]	; (524 <main+0x14c>)
     428:	4b3e      	ldr	r3, [pc, #248]	; (524 <main+0x14c>)
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     430:	6013      	str	r3, [r2, #0]
     432:	4b39      	ldr	r3, [pc, #228]	; (518 <main+0x140>)
     434:	2200      	movs	r2, #0
     436:	601a      	str	r2, [r3, #0]
     438:	463b      	mov	r3, r7
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	f383 8810 	msr	PRIMASK, r3
    am_bsp_debug_printf_enable();
     440:	f000 ffe0 	bl	1404 <am_bsp_debug_printf_enable>
    am_hal_itm_enable();
     444:	f001 f946 	bl	16d4 <am_hal_itm_enable>

    //
    // Initialize and Enable the UART.
    //
    uart_init(ui32Module);
     448:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
     44c:	f7ff fe88 	bl	160 <uart_init>
    uart_enable(ui32Module);
     450:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
     454:	f7ff fef6 	bl	244 <uart_enable>

    am_hal_interrupt_master_enable();
     458:	f001 f930 	bl	16bc <am_hal_interrupt_master_enable>

    //
    // Print the banner.
    //
    am_util_stdio_printf("UART FIFO Example\n");
     45c:	4832      	ldr	r0, [pc, #200]	; (528 <main+0x150>)
     45e:	f000 ffa1 	bl	13a4 <am_util_stdio_printf>
    am_util_stdio_printf("Note - the UART terminal operates at 115,200 BAUD, 8 bit, no parity.\n");
     462:	4832      	ldr	r0, [pc, #200]	; (52c <main+0x154>)
     464:	f000 ff9e 	bl	13a4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     46c:	4618      	mov	r0, r3
     46e:	f7ff ff49 	bl	304 <uart_transmit_delay>
    am_util_stdio_printf("\n\tEcho back the UART received data.\n");
     472:	482f      	ldr	r0, [pc, #188]	; (530 <main+0x158>)
     474:	f000 ff96 	bl	13a4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     47c:	4618      	mov	r0, r3
     47e:	f7ff ff41 	bl	304 <uart_transmit_delay>
    am_util_stdio_printf("\t");
     482:	482c      	ldr	r0, [pc, #176]	; (534 <main+0x15c>)
     484:	f000 ff8e 	bl	13a4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     48c:	4618      	mov	r0, r3
     48e:	f7ff ff39 	bl	304 <uart_transmit_delay>
        //
        // Need to retrieve and echo received date for loopback
        // if either all the data has been received, or if we are in danger
        // of overflowing the receive buffer
        //
        if (g_ui8RxTimeoutFlag || g_ui8BufferFullFlag)
     492:	4b29      	ldr	r3, [pc, #164]	; (538 <main+0x160>)
     494:	781b      	ldrb	r3, [r3, #0]
     496:	2b00      	cmp	r3, #0
     498:	d103      	bne.n	4a2 <main+0xca>
     49a:	4b28      	ldr	r3, [pc, #160]	; (53c <main+0x164>)
     49c:	781b      	ldrb	r3, [r3, #0]
     49e:	2b00      	cmp	r3, #0
     4a0:	d0f7      	beq.n	492 <main+0xba>
        {

            g_ui8RxTimeoutFlag = 0;
     4a2:	4b25      	ldr	r3, [pc, #148]	; (538 <main+0x160>)
     4a4:	2200      	movs	r2, #0
     4a6:	701a      	strb	r2, [r3, #0]
            g_ui8BufferFullFlag = 0;
     4a8:	4b24      	ldr	r3, [pc, #144]	; (53c <main+0x164>)
     4aa:	2200      	movs	r2, #0
     4ac:	701a      	strb	r2, [r3, #0]

            memset(pcTempBuf, 0x00, sizeof(pcTempBuf));
     4ae:	1d3b      	adds	r3, r7, #4
     4b0:	f240 1201 	movw	r2, #257	; 0x101
     4b4:	2100      	movs	r1, #0
     4b6:	4618      	mov	r0, r3
     4b8:	f001 ff10 	bl	22dc <memset>

            ui32Length = am_hal_uart_char_receive_buffered(ui32Module, pcTempBuf, UART_BUFFER_SIZE);
     4bc:	1d3b      	adds	r3, r7, #4
     4be:	f44f 7280 	mov.w	r2, #256	; 0x100
     4c2:	4619      	mov	r1, r3
     4c4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
     4c8:	f001 fe88 	bl	21dc <am_hal_uart_char_receive_buffered>
     4cc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

            if (ui32Length)
     4d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
     4d4:	2b00      	cmp	r3, #0
     4d6:	d0dc      	beq.n	492 <main+0xba>
            {
                if ( pcTempBuf[0] == '\n' )
     4d8:	1d3b      	adds	r3, r7, #4
     4da:	781b      	ldrb	r3, [r3, #0]
     4dc:	2b0a      	cmp	r3, #10
     4de:	d103      	bne.n	4e8 <main+0x110>
                {
                    am_util_stdio_printf("START_TX (char='\\n')");
     4e0:	4817      	ldr	r0, [pc, #92]	; (540 <main+0x168>)
     4e2:	f000 ff5f 	bl	13a4 <am_util_stdio_printf>
     4e6:	e005      	b.n	4f4 <main+0x11c>
                }
                else
                {
                    am_util_stdio_printf("START_TX (char='%c')", pcTempBuf[0]);
     4e8:	1d3b      	adds	r3, r7, #4
     4ea:	781b      	ldrb	r3, [r3, #0]
     4ec:	4619      	mov	r1, r3
     4ee:	4815      	ldr	r0, [pc, #84]	; (544 <main+0x16c>)
     4f0:	f000 ff58 	bl	13a4 <am_util_stdio_printf>
                }

                //
                // We have overallocated the pcTempBuf, to make sure ui32Length==UART_BUFFER_SIZE is ok
                //
                pcTempBuf[ui32Length] = 0;
     4f4:	1d3a      	adds	r2, r7, #4
     4f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
     4fa:	4413      	add	r3, r2
     4fc:	2200      	movs	r2, #0
     4fe:	701a      	strb	r2, [r3, #0]
                am_hal_uart_string_transmit_buffered(ui32Module, pcTempBuf);
     500:	1d3b      	adds	r3, r7, #4
     502:	4619      	mov	r1, r3
     504:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
     508:	f001 fe3e 	bl	2188 <am_hal_uart_string_transmit_buffered>
            }
        }
    }
     50c:	e7c1      	b.n	492 <main+0xba>
     50e:	bf00      	nop
     510:	000023c8 	.word	0x000023c8
     514:	00001485 	.word	0x00001485
     518:	40010060 	.word	0x40010060
     51c:	40010054 	.word	0x40010054
     520:	40010028 	.word	0x40010028
     524:	40010108 	.word	0x40010108
     528:	00002310 	.word	0x00002310
     52c:	00002324 	.word	0x00002324
     530:	0000236c 	.word	0x0000236c
     534:	00002394 	.word	0x00002394
     538:	10001064 	.word	0x10001064
     53c:	10001065 	.word	0x10001065
     540:	00002398 	.word	0x00002398
     544:	000023b0 	.word	0x000023b0

00000548 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     548:	4811      	ldr	r0, [pc, #68]	; (590 <zero_loop+0x12>)
     54a:	4912      	ldr	r1, [pc, #72]	; (594 <zero_loop+0x16>)
     54c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     54e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     552:	4811      	ldr	r0, [pc, #68]	; (598 <zero_loop+0x1a>)
     554:	6801      	ldr	r1, [r0, #0]
     556:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     55a:	6001      	str	r1, [r0, #0]
     55c:	f3bf 8f4f 	dsb	sy
     560:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     564:	480d      	ldr	r0, [pc, #52]	; (59c <zero_loop+0x1e>)
     566:	490e      	ldr	r1, [pc, #56]	; (5a0 <zero_loop+0x22>)
     568:	4a0e      	ldr	r2, [pc, #56]	; (5a4 <zero_loop+0x26>)

0000056a <copy_loop>:
     56a:	f850 3b04 	ldr.w	r3, [r0], #4
     56e:	f841 3b04 	str.w	r3, [r1], #4
     572:	4291      	cmp	r1, r2
     574:	dbf9      	blt.n	56a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     576:	480c      	ldr	r0, [pc, #48]	; (5a8 <zero_loop+0x2a>)
     578:	490c      	ldr	r1, [pc, #48]	; (5ac <zero_loop+0x2e>)
     57a:	f04f 0200 	mov.w	r2, #0

0000057e <zero_loop>:
     57e:	4288      	cmp	r0, r1
     580:	bfb8      	it	lt
     582:	f840 2b04 	strlt.w	r2, [r0], #4
     586:	dbfa      	blt.n	57e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     588:	f7ff ff26 	bl	3d8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     58c:	be00      	bkpt	0x0000
}
     58e:	bf00      	nop
     590:	e000ed08 	.word	0xe000ed08
     594:	00000000 	.word	0x00000000
     598:	e000ed88 	.word	0xe000ed88
     59c:	00002544 	.word	0x00002544
     5a0:	10001000 	.word	0x10001000
     5a4:	10001064 	.word	0x10001064
     5a8:	10001064 	.word	0x10001064
     5ac:	1000141c 	.word	0x1000141c

000005b0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     5b0:	b480      	push	{r7}
     5b2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     5b4:	e7fe      	b.n	5b4 <am_nmi_isr+0x4>
     5b6:	bf00      	nop

000005b8 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     5b8:	b480      	push	{r7}
     5ba:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     5bc:	e7fe      	b.n	5bc <am_adc_isr+0x4>
     5be:	bf00      	nop

000005c0 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     5c0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     5c2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     5c4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     5c6:	f000 f809 	bl	5dc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     5ca:	bd01      	pop	{r0, pc}
}
     5cc:	bf00      	nop
     5ce:	4618      	mov	r0, r3

000005d0 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     5d0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     5d2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     5d4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     5d6:	4770      	bx	lr
}
     5d8:	bf00      	nop
     5da:	4618      	mov	r0, r3

000005dc <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     5dc:	b580      	push	{r7, lr}
     5de:	b096      	sub	sp, #88	; 0x58
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     5e4:	f107 030c 	add.w	r3, r7, #12
     5e8:	2200      	movs	r2, #0
     5ea:	601a      	str	r2, [r3, #0]
     5ec:	605a      	str	r2, [r3, #4]
     5ee:	609a      	str	r2, [r3, #8]
     5f0:	60da      	str	r2, [r3, #12]
     5f2:	611a      	str	r2, [r3, #16]
     5f4:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     5f6:	2300      	movs	r3, #0
     5f8:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     5fe:	4b2e      	ldr	r3, [pc, #184]	; (6b8 <am_util_faultisr_collect_data+0xdc>)
     600:	681b      	ldr	r3, [r3, #0]
     602:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     606:	b2db      	uxtb	r3, r3
     608:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     60e:	0a1b      	lsrs	r3, r3, #8
     610:	b2db      	uxtb	r3, r3
     612:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     618:	0c1b      	lsrs	r3, r3, #16
     61a:	b29b      	uxth	r3, r3
     61c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     620:	4b26      	ldr	r3, [pc, #152]	; (6bc <am_util_faultisr_collect_data+0xe0>)
     622:	681b      	ldr	r3, [r3, #0]
     624:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     626:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     62a:	b2db      	uxtb	r3, r3
     62c:	f003 0302 	and.w	r3, r3, #2
     630:	2b00      	cmp	r3, #0
     632:	d005      	beq.n	640 <am_util_faultisr_collect_data+0x64>
     634:	6879      	ldr	r1, [r7, #4]
     636:	2006      	movs	r0, #6
     638:	f7ff ffca 	bl	5d0 <getStackedReg>
     63c:	4603      	mov	r3, r0
     63e:	e001      	b.n	644 <am_util_faultisr_collect_data+0x68>
     640:	f04f 33ff 	mov.w	r3, #4294967295
     644:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     646:	6879      	ldr	r1, [r7, #4]
     648:	2000      	movs	r0, #0
     64a:	f7ff ffc1 	bl	5d0 <getStackedReg>
     64e:	4603      	mov	r3, r0
     650:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     652:	6879      	ldr	r1, [r7, #4]
     654:	2001      	movs	r0, #1
     656:	f7ff ffbb 	bl	5d0 <getStackedReg>
     65a:	4603      	mov	r3, r0
     65c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     65e:	6879      	ldr	r1, [r7, #4]
     660:	2002      	movs	r0, #2
     662:	f7ff ffb5 	bl	5d0 <getStackedReg>
     666:	4603      	mov	r3, r0
     668:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     66a:	6879      	ldr	r1, [r7, #4]
     66c:	2003      	movs	r0, #3
     66e:	f7ff ffaf 	bl	5d0 <getStackedReg>
     672:	4603      	mov	r3, r0
     674:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     676:	6879      	ldr	r1, [r7, #4]
     678:	2004      	movs	r0, #4
     67a:	f7ff ffa9 	bl	5d0 <getStackedReg>
     67e:	4603      	mov	r3, r0
     680:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     682:	6879      	ldr	r1, [r7, #4]
     684:	2005      	movs	r0, #5
     686:	f7ff ffa3 	bl	5d0 <getStackedReg>
     68a:	4603      	mov	r3, r0
     68c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     68e:	6879      	ldr	r1, [r7, #4]
     690:	2006      	movs	r0, #6
     692:	f7ff ff9d 	bl	5d0 <getStackedReg>
     696:	4603      	mov	r3, r0
     698:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     69a:	6879      	ldr	r1, [r7, #4]
     69c:	2007      	movs	r0, #7
     69e:	f7ff ff97 	bl	5d0 <getStackedReg>
     6a2:	4603      	mov	r3, r0
     6a4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     6a6:	f107 030c 	add.w	r3, r7, #12
     6aa:	4618      	mov	r0, r3
     6ac:	f001 f858 	bl	1760 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     6b0:	2300      	movs	r3, #0
     6b2:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     6b4:	e7fe      	b.n	6b4 <am_util_faultisr_collect_data+0xd8>
     6b6:	bf00      	nop
     6b8:	e000ed28 	.word	0xe000ed28
     6bc:	e000ed38 	.word	0xe000ed38

000006c0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     6c0:	b480      	push	{r7}
     6c2:	b083      	sub	sp, #12
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     6c8:	4a04      	ldr	r2, [pc, #16]	; (6dc <am_util_stdio_printf_init+0x1c>)
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	6013      	str	r3, [r2, #0]
}
     6ce:	bf00      	nop
     6d0:	370c      	adds	r7, #12
     6d2:	46bd      	mov	sp, r7
     6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6d8:	4770      	bx	lr
     6da:	bf00      	nop
     6dc:	10001370 	.word	0x10001370

000006e0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     6e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     6e4:	b096      	sub	sp, #88	; 0x58
     6e6:	af00      	add	r7, sp, #0
     6e8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     6ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6f0:	0025      	movs	r5, r4
     6f2:	2600      	movs	r6, #0
     6f4:	ea55 0306 	orrs.w	r3, r5, r6
     6f8:	f000 809e 	beq.w	838 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     6fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     700:	0862      	lsrs	r2, r4, #1
     702:	ea4f 0133 	mov.w	r1, r3, rrx
     706:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     70a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     70e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     712:	ea4f 0994 	mov.w	r9, r4, lsr #2
     716:	eb11 0308 	adds.w	r3, r1, r8
     71a:	eb42 0409 	adc.w	r4, r2, r9
     71e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     722:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     726:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     72a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     72e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     732:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     736:	eb13 030a 	adds.w	r3, r3, sl
     73a:	eb44 040b 	adc.w	r4, r4, fp
     73e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     742:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     746:	0a1a      	lsrs	r2, r3, #8
     748:	62ba      	str	r2, [r7, #40]	; 0x28
     74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     74c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     750:	62ba      	str	r2, [r7, #40]	; 0x28
     752:	0a23      	lsrs	r3, r4, #8
     754:	62fb      	str	r3, [r7, #44]	; 0x2c
     756:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     75a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     75e:	18c9      	adds	r1, r1, r3
     760:	eb42 0204 	adc.w	r2, r2, r4
     764:	460b      	mov	r3, r1
     766:	4614      	mov	r4, r2
     768:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     76c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     770:	0c1a      	lsrs	r2, r3, #16
     772:	623a      	str	r2, [r7, #32]
     774:	6a3a      	ldr	r2, [r7, #32]
     776:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     77a:	623a      	str	r2, [r7, #32]
     77c:	0c23      	lsrs	r3, r4, #16
     77e:	627b      	str	r3, [r7, #36]	; 0x24
     780:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     784:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     788:	18c9      	adds	r1, r1, r3
     78a:	eb42 0204 	adc.w	r2, r2, r4
     78e:	460b      	mov	r3, r1
     790:	4614      	mov	r4, r2
     792:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     796:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     79a:	0023      	movs	r3, r4
     79c:	603b      	str	r3, [r7, #0]
     79e:	2300      	movs	r3, #0
     7a0:	607b      	str	r3, [r7, #4]
     7a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7a6:	e897 0006 	ldmia.w	r7, {r1, r2}
     7aa:	18c9      	adds	r1, r1, r3
     7ac:	eb42 0204 	adc.w	r2, r2, r4
     7b0:	460b      	mov	r3, r1
     7b2:	4614      	mov	r4, r2
     7b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     7b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7bc:	08da      	lsrs	r2, r3, #3
     7be:	613a      	str	r2, [r7, #16]
     7c0:	693a      	ldr	r2, [r7, #16]
     7c2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     7c6:	613a      	str	r2, [r7, #16]
     7c8:	08e3      	lsrs	r3, r4, #3
     7ca:	617b      	str	r3, [r7, #20]
     7cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     7d0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     7d4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7d8:	18db      	adds	r3, r3, r3
     7da:	eb44 0404 	adc.w	r4, r4, r4
     7de:	00a2      	lsls	r2, r4, #2
     7e0:	60fa      	str	r2, [r7, #12]
     7e2:	68fa      	ldr	r2, [r7, #12]
     7e4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     7e8:	60fa      	str	r2, [r7, #12]
     7ea:	009a      	lsls	r2, r3, #2
     7ec:	60ba      	str	r2, [r7, #8]
     7ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     7f2:	18c9      	adds	r1, r1, r3
     7f4:	eb42 0204 	adc.w	r2, r2, r4
     7f8:	460b      	mov	r3, r1
     7fa:	4614      	mov	r4, r2
     7fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     800:	1acb      	subs	r3, r1, r3
     802:	eb62 0404 	sbc.w	r4, r2, r4
     806:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     80a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     80e:	3306      	adds	r3, #6
     810:	f144 0400 	adc.w	r4, r4, #0
     814:	091a      	lsrs	r2, r3, #4
     816:	61ba      	str	r2, [r7, #24]
     818:	69ba      	ldr	r2, [r7, #24]
     81a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     81e:	61ba      	str	r2, [r7, #24]
     820:	0923      	lsrs	r3, r4, #4
     822:	61fb      	str	r3, [r7, #28]
     824:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     828:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     82c:	18c9      	adds	r1, r1, r3
     82e:	eb42 0204 	adc.w	r2, r2, r4
     832:	460b      	mov	r3, r1
     834:	4614      	mov	r4, r2
     836:	e029      	b.n	88c <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     83a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     83e:	085a      	lsrs	r2, r3, #1
     840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     842:	089b      	lsrs	r3, r3, #2
     844:	4413      	add	r3, r2
     846:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     84a:	091b      	lsrs	r3, r3, #4
     84c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     84e:	4413      	add	r3, r2
     850:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     854:	0a1b      	lsrs	r3, r3, #8
     856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     858:	4413      	add	r3, r2
     85a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     85e:	0c1b      	lsrs	r3, r3, #16
     860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     862:	4413      	add	r3, r2
     864:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     868:	08db      	lsrs	r3, r3, #3
     86a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     86e:	4613      	mov	r3, r2
     870:	009b      	lsls	r3, r3, #2
     872:	4413      	add	r3, r2
     874:	005b      	lsls	r3, r3, #1
     876:	461a      	mov	r2, r3
     878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     87a:	1a9b      	subs	r3, r3, r2
     87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     880:	3306      	adds	r3, #6
     882:	091a      	lsrs	r2, r3, #4
     884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     886:	4413      	add	r3, r2
     888:	f04f 0400 	mov.w	r4, #0
    }
}
     88c:	4618      	mov	r0, r3
     88e:	4621      	mov	r1, r4
     890:	3758      	adds	r7, #88	; 0x58
     892:	46bd      	mov	sp, r7
     894:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     898:	4770      	bx	lr
     89a:	bf00      	nop

0000089c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     89c:	b590      	push	{r4, r7, lr}
     89e:	b085      	sub	sp, #20
     8a0:	af00      	add	r7, sp, #0
     8a2:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     8a6:	683a      	ldr	r2, [r7, #0]
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	4313      	orrs	r3, r2
     8ac:	2b00      	cmp	r3, #0
     8ae:	bf0c      	ite	eq
     8b0:	2301      	moveq	r3, #1
     8b2:	2300      	movne	r3, #0
     8b4:	b2db      	uxtb	r3, r3
     8b6:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     8b8:	e008      	b.n	8cc <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     8ba:	e9d7 0100 	ldrd	r0, r1, [r7]
     8be:	f7ff ff0f 	bl	6e0 <divu64_10>
     8c2:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     8c6:	68fb      	ldr	r3, [r7, #12]
     8c8:	3301      	adds	r3, #1
     8ca:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     8cc:	e897 0018 	ldmia.w	r7, {r3, r4}
     8d0:	4323      	orrs	r3, r4
     8d2:	d1f2      	bne.n	8ba <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     8d4:	68fb      	ldr	r3, [r7, #12]
}
     8d6:	4618      	mov	r0, r3
     8d8:	3714      	adds	r7, #20
     8da:	46bd      	mov	sp, r7
     8dc:	bd90      	pop	{r4, r7, pc}
     8de:	bf00      	nop

000008e0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     8e0:	b590      	push	{r4, r7, lr}
     8e2:	b083      	sub	sp, #12
     8e4:	af00      	add	r7, sp, #0
     8e6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     8ea:	e897 0018 	ldmia.w	r7, {r3, r4}
     8ee:	2b00      	cmp	r3, #0
     8f0:	f174 0300 	sbcs.w	r3, r4, #0
     8f4:	da06      	bge.n	904 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     8f6:	e897 0018 	ldmia.w	r7, {r3, r4}
     8fa:	425b      	negs	r3, r3
     8fc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     900:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     904:	e897 0018 	ldmia.w	r7, {r3, r4}
     908:	4618      	mov	r0, r3
     90a:	4621      	mov	r1, r4
     90c:	f7ff ffc6 	bl	89c <ndigits_in_u64>
     910:	4603      	mov	r3, r0
}
     912:	4618      	mov	r0, r3
     914:	370c      	adds	r7, #12
     916:	46bd      	mov	sp, r7
     918:	bd90      	pop	{r4, r7, pc}
     91a:	bf00      	nop

0000091c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     91c:	b490      	push	{r4, r7}
     91e:	b084      	sub	sp, #16
     920:	af00      	add	r7, sp, #0
     922:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     926:	6839      	ldr	r1, [r7, #0]
     928:	687a      	ldr	r2, [r7, #4]
     92a:	430a      	orrs	r2, r1
     92c:	2a00      	cmp	r2, #0
     92e:	bf0c      	ite	eq
     930:	2201      	moveq	r2, #1
     932:	2200      	movne	r2, #0
     934:	b2d2      	uxtb	r2, r2
     936:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     938:	e00a      	b.n	950 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     93a:	e897 0006 	ldmia.w	r7, {r1, r2}
     93e:	090b      	lsrs	r3, r1, #4
     940:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     944:	0914      	lsrs	r4, r2, #4
     946:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     94a:	68fa      	ldr	r2, [r7, #12]
     94c:	3201      	adds	r2, #1
     94e:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     950:	e897 0006 	ldmia.w	r7, {r1, r2}
     954:	430a      	orrs	r2, r1
     956:	d1f0      	bne.n	93a <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     958:	68fb      	ldr	r3, [r7, #12]
}
     95a:	4618      	mov	r0, r3
     95c:	3710      	adds	r7, #16
     95e:	46bd      	mov	sp, r7
     960:	bc90      	pop	{r4, r7}
     962:	4770      	bx	lr

00000964 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     964:	b480      	push	{r7}
     966:	b087      	sub	sp, #28
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     96e:	2300      	movs	r3, #0
     970:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     972:	2300      	movs	r3, #0
     974:	613b      	str	r3, [r7, #16]
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	2b2d      	cmp	r3, #45	; 0x2d
     980:	d11b      	bne.n	9ba <decstr_to_int+0x56>
    {
        bNeg = true;
     982:	2301      	movs	r3, #1
     984:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     986:	687b      	ldr	r3, [r7, #4]
     988:	3301      	adds	r3, #1
     98a:	607b      	str	r3, [r7, #4]
        uCnt++;
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	3301      	adds	r3, #1
     990:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     992:	e012      	b.n	9ba <decstr_to_int+0x56>
    {
        ++uCnt;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	3301      	adds	r3, #1
     998:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     99a:	693a      	ldr	r2, [r7, #16]
     99c:	4613      	mov	r3, r2
     99e:	009b      	lsls	r3, r3, #2
     9a0:	4413      	add	r3, r2
     9a2:	005b      	lsls	r3, r3, #1
     9a4:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	461a      	mov	r2, r3
     9ac:	693b      	ldr	r3, [r7, #16]
     9ae:	4413      	add	r3, r2
     9b0:	3b30      	subs	r3, #48	; 0x30
     9b2:	613b      	str	r3, [r7, #16]
        pcStr++;
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	3301      	adds	r3, #1
     9b8:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	781b      	ldrb	r3, [r3, #0]
     9be:	2b2f      	cmp	r3, #47	; 0x2f
     9c0:	d903      	bls.n	9ca <decstr_to_int+0x66>
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	2b39      	cmp	r3, #57	; 0x39
     9c8:	d9e4      	bls.n	994 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d002      	beq.n	9d6 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     9d0:	683b      	ldr	r3, [r7, #0]
     9d2:	68fa      	ldr	r2, [r7, #12]
     9d4:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     9d6:	7dfb      	ldrb	r3, [r7, #23]
     9d8:	2b00      	cmp	r3, #0
     9da:	d002      	beq.n	9e2 <decstr_to_int+0x7e>
     9dc:	693b      	ldr	r3, [r7, #16]
     9de:	425b      	negs	r3, r3
     9e0:	e000      	b.n	9e4 <decstr_to_int+0x80>
     9e2:	693b      	ldr	r3, [r7, #16]
}
     9e4:	4618      	mov	r0, r3
     9e6:	371c      	adds	r7, #28
     9e8:	46bd      	mov	sp, r7
     9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
     9ee:	4770      	bx	lr

000009f0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     9f0:	b590      	push	{r4, r7, lr}
     9f2:	b091      	sub	sp, #68	; 0x44
     9f4:	af00      	add	r7, sp, #0
     9f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9fa:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     9fc:	2300      	movs	r3, #0
     9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
     a00:	2300      	movs	r3, #0
     a02:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     a08:	f7ff fe6a 	bl	6e0 <divu64_10>
     a0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     a10:	68b9      	ldr	r1, [r7, #8]
     a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a14:	4613      	mov	r3, r2
     a16:	009b      	lsls	r3, r3, #2
     a18:	4413      	add	r3, r2
     a1a:	005b      	lsls	r3, r3, #1
     a1c:	1acb      	subs	r3, r1, r3
     a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a22:	1c5a      	adds	r2, r3, #1
     a24:	63fa      	str	r2, [r7, #60]	; 0x3c
     a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a28:	b2d2      	uxtb	r2, r2
     a2a:	3230      	adds	r2, #48	; 0x30
     a2c:	b2d2      	uxtb	r2, r2
     a2e:	f107 0140 	add.w	r1, r7, #64	; 0x40
     a32:	440b      	add	r3, r1
     a34:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     a38:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a3c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     a40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     a44:	4323      	orrs	r3, r4
     a46:	d1dd      	bne.n	a04 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a4a:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	2b00      	cmp	r3, #0
     a50:	d011      	beq.n	a76 <uint64_to_str+0x86>
    {
        while ( ix-- )
     a52:	e008      	b.n	a66 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	1c5a      	adds	r2, r3, #1
     a58:	607a      	str	r2, [r7, #4]
     a5a:	f107 0110 	add.w	r1, r7, #16
     a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a60:	440a      	add	r2, r1
     a62:	7812      	ldrb	r2, [r2, #0]
     a64:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a68:	1e5a      	subs	r2, r3, #1
     a6a:	63fa      	str	r2, [r7, #60]	; 0x3c
     a6c:	2b00      	cmp	r3, #0
     a6e:	d1f1      	bne.n	a54 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	2200      	movs	r2, #0
     a74:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     a78:	4618      	mov	r0, r3
     a7a:	3744      	adds	r7, #68	; 0x44
     a7c:	46bd      	mov	sp, r7
     a7e:	bd90      	pop	{r4, r7, pc}

00000a80 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     a80:	b4b0      	push	{r4, r5, r7}
     a82:	b08d      	sub	sp, #52	; 0x34
     a84:	af00      	add	r7, sp, #0
     a86:	e9c7 0102 	strd	r0, r1, [r7, #8]
     a8a:	607a      	str	r2, [r7, #4]
     a8c:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     a8e:	2300      	movs	r3, #0
     a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a96:	4313      	orrs	r3, r2
     a98:	d131      	bne.n	afe <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a9c:	1c5a      	adds	r2, r3, #1
     a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
     aa0:	f107 0230 	add.w	r2, r7, #48	; 0x30
     aa4:	4413      	add	r3, r2
     aa6:	2230      	movs	r2, #48	; 0x30
     aa8:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     aac:	e027      	b.n	afe <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     aae:	7a3b      	ldrb	r3, [r7, #8]
     ab0:	f003 030f 	and.w	r3, r3, #15
     ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     abc:	2b09      	cmp	r3, #9
     abe:	d90a      	bls.n	ad6 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     ac0:	78fb      	ldrb	r3, [r7, #3]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d001      	beq.n	aca <uint64_to_hexstr+0x4a>
     ac6:	2227      	movs	r2, #39	; 0x27
     ac8:	e000      	b.n	acc <uint64_to_hexstr+0x4c>
     aca:	2207      	movs	r2, #7
     acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     ad0:	4413      	add	r3, r2
     ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ad8:	1c5a      	adds	r2, r3, #1
     ada:	62fa      	str	r2, [r7, #44]	; 0x2c
     adc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     ae0:	3230      	adds	r2, #48	; 0x30
     ae2:	b2d2      	uxtb	r2, r2
     ae4:	f107 0130 	add.w	r1, r7, #48	; 0x30
     ae8:	440b      	add	r3, r1
     aea:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     af2:	0914      	lsrs	r4, r2, #4
     af4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     af8:	091d      	lsrs	r5, r3, #4
     afa:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b02:	4313      	orrs	r3, r2
     b04:	d1d3      	bne.n	aae <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b08:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d011      	beq.n	b34 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     b10:	e008      	b.n	b24 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	1c5a      	adds	r2, r3, #1
     b16:	607a      	str	r2, [r7, #4]
     b18:	f107 0110 	add.w	r1, r7, #16
     b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b1e:	440a      	add	r2, r1
     b20:	7812      	ldrb	r2, [r2, #0]
     b22:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b26:	1e5a      	subs	r2, r3, #1
     b28:	62fa      	str	r2, [r7, #44]	; 0x2c
     b2a:	2b00      	cmp	r3, #0
     b2c:	d1f1      	bne.n	b12 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	2200      	movs	r2, #0
     b32:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     b36:	4618      	mov	r0, r3
     b38:	3734      	adds	r7, #52	; 0x34
     b3a:	46bd      	mov	sp, r7
     b3c:	bcb0      	pop	{r4, r5, r7}
     b3e:	4770      	bx	lr

00000b40 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     b40:	b480      	push	{r7}
     b42:	b085      	sub	sp, #20
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     b48:	2300      	movs	r3, #0
     b4a:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	2b00      	cmp	r3, #0
     b50:	d104      	bne.n	b5c <simple_strlen+0x1c>
    {
        return ui32RetVal;
     b52:	68fb      	ldr	r3, [r7, #12]
     b54:	e009      	b.n	b6a <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	3301      	adds	r3, #1
     b5a:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	1c5a      	adds	r2, r3, #1
     b60:	607a      	str	r2, [r7, #4]
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	2b00      	cmp	r3, #0
     b66:	d1f6      	bne.n	b56 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     b68:	68fb      	ldr	r3, [r7, #12]
}
     b6a:	4618      	mov	r0, r3
     b6c:	3714      	adds	r7, #20
     b6e:	46bd      	mov	sp, r7
     b70:	f85d 7b04 	ldr.w	r7, [sp], #4
     b74:	4770      	bx	lr
     b76:	bf00      	nop

00000b78 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     b78:	b480      	push	{r7}
     b7a:	b087      	sub	sp, #28
     b7c:	af00      	add	r7, sp, #0
     b7e:	60f8      	str	r0, [r7, #12]
     b80:	460b      	mov	r3, r1
     b82:	607a      	str	r2, [r7, #4]
     b84:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     b86:	2300      	movs	r3, #0
     b88:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	2b00      	cmp	r3, #0
     b8e:	dc0c      	bgt.n	baa <padbuffer+0x32>
    {
        return i32Cnt;
     b90:	697b      	ldr	r3, [r7, #20]
     b92:	e010      	b.n	bb6 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     b94:	68fb      	ldr	r3, [r7, #12]
     b96:	2b00      	cmp	r3, #0
     b98:	d004      	beq.n	ba4 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	1c5a      	adds	r2, r3, #1
     b9e:	60fa      	str	r2, [r7, #12]
     ba0:	7afa      	ldrb	r2, [r7, #11]
     ba2:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ba4:	697b      	ldr	r3, [r7, #20]
     ba6:	3301      	adds	r3, #1
     ba8:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	1e5a      	subs	r2, r3, #1
     bae:	607a      	str	r2, [r7, #4]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d1ef      	bne.n	b94 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     bb4:	697b      	ldr	r3, [r7, #20]
}
     bb6:	4618      	mov	r0, r3
     bb8:	371c      	adds	r7, #28
     bba:	46bd      	mov	sp, r7
     bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc0:	4770      	bx	lr
     bc2:	bf00      	nop

00000bc4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     bc4:	b590      	push	{r4, r7, lr}
     bc6:	b08f      	sub	sp, #60	; 0x3c
     bc8:	af00      	add	r7, sp, #0
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	681b      	ldr	r3, [r3, #0]
     bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bd8:	2b03      	cmp	r3, #3
     bda:	dc02      	bgt.n	be2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     bdc:	f06f 0302 	mvn.w	r3, #2
     be0:	e0d4      	b.n	d8c <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     be2:	edd7 7a03 	vldr	s15, [r7, #12]
     be6:	eef5 7a40 	vcmp.f32	s15, #0.0
     bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bee:	d104      	bne.n	bfa <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     bf0:	68bb      	ldr	r3, [r7, #8]
     bf2:	4a68      	ldr	r2, [pc, #416]	; (d94 <ftoa+0x1d0>)
     bf4:	601a      	str	r2, [r3, #0]
        return 3;
     bf6:	2303      	movs	r3, #3
     bf8:	e0c8      	b.n	d8c <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     bfa:	68bb      	ldr	r3, [r7, #8]
     bfc:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     c02:	697b      	ldr	r3, [r7, #20]
     c04:	15db      	asrs	r3, r3, #23
     c06:	b2db      	uxtb	r3, r3
     c08:	3b7f      	subs	r3, #127	; 0x7f
     c0a:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     c0c:	697b      	ldr	r3, [r7, #20]
     c0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
     c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     c16:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     c18:	2300      	movs	r3, #0
     c1a:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     c1c:	2300      	movs	r3, #0
     c1e:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     c20:	6a3b      	ldr	r3, [r7, #32]
     c22:	2b1e      	cmp	r3, #30
     c24:	dd02      	ble.n	c2c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     c26:	f06f 0301 	mvn.w	r3, #1
     c2a:	e0af      	b.n	d8c <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     c2c:	6a3b      	ldr	r3, [r7, #32]
     c2e:	f113 0f17 	cmn.w	r3, #23
     c32:	da02      	bge.n	c3a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     c34:	f04f 33ff 	mov.w	r3, #4294967295
     c38:	e0a8      	b.n	d8c <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     c3a:	6a3b      	ldr	r3, [r7, #32]
     c3c:	2b16      	cmp	r3, #22
     c3e:	dd06      	ble.n	c4e <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     c40:	6a3b      	ldr	r3, [r7, #32]
     c42:	3b17      	subs	r3, #23
     c44:	69fa      	ldr	r2, [r7, #28]
     c46:	fa02 f303 	lsl.w	r3, r2, r3
     c4a:	637b      	str	r3, [r7, #52]	; 0x34
     c4c:	e01a      	b.n	c84 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     c4e:	6a3b      	ldr	r3, [r7, #32]
     c50:	2b00      	cmp	r3, #0
     c52:	db0f      	blt.n	c74 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     c54:	6a3b      	ldr	r3, [r7, #32]
     c56:	f1c3 0317 	rsb	r3, r3, #23
     c5a:	69fa      	ldr	r2, [r7, #28]
     c5c:	fa42 f303 	asr.w	r3, r2, r3
     c60:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     c62:	6a3b      	ldr	r3, [r7, #32]
     c64:	3301      	adds	r3, #1
     c66:	69fa      	ldr	r2, [r7, #28]
     c68:	fa02 f303 	lsl.w	r3, r2, r3
     c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c70:	633b      	str	r3, [r7, #48]	; 0x30
     c72:	e007      	b.n	c84 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     c74:	69fb      	ldr	r3, [r7, #28]
     c76:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     c7a:	6a3b      	ldr	r3, [r7, #32]
     c7c:	43db      	mvns	r3, r3
     c7e:	fa42 f303 	asr.w	r3, r2, r3
     c82:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     c84:	697b      	ldr	r3, [r7, #20]
     c86:	2b00      	cmp	r3, #0
     c88:	da04      	bge.n	c94 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     c8a:	68bb      	ldr	r3, [r7, #8]
     c8c:	1c5a      	adds	r2, r3, #1
     c8e:	60ba      	str	r2, [r7, #8]
     c90:	222d      	movs	r2, #45	; 0x2d
     c92:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c96:	2b00      	cmp	r3, #0
     c98:	d105      	bne.n	ca6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     c9a:	68bb      	ldr	r3, [r7, #8]
     c9c:	1c5a      	adds	r2, r3, #1
     c9e:	60ba      	str	r2, [r7, #8]
     ca0:	2230      	movs	r2, #48	; 0x30
     ca2:	701a      	strb	r2, [r3, #0]
     ca4:	e021      	b.n	cea <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ca8:	2b00      	cmp	r3, #0
     caa:	dd08      	ble.n	cbe <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cae:	ea4f 74e3 	mov.w	r4, r3, asr #31
     cb2:	68ba      	ldr	r2, [r7, #8]
     cb4:	4618      	mov	r0, r3
     cb6:	4621      	mov	r1, r4
     cb8:	f7ff fe9a 	bl	9f0 <uint64_to_str>
     cbc:	e011      	b.n	ce2 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	1c5a      	adds	r2, r3, #1
     cc2:	60ba      	str	r2, [r7, #8]
     cc4:	222d      	movs	r2, #45	; 0x2d
     cc6:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cca:	425b      	negs	r3, r3
     ccc:	ea4f 74e3 	mov.w	r4, r3, asr #31
     cd0:	68ba      	ldr	r2, [r7, #8]
     cd2:	4618      	mov	r0, r3
     cd4:	4621      	mov	r1, r4
     cd6:	f7ff fe8b 	bl	9f0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     cda:	e002      	b.n	ce2 <ftoa+0x11e>
        {
            pcBuf++;
     cdc:	68bb      	ldr	r3, [r7, #8]
     cde:	3301      	adds	r3, #1
     ce0:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     ce2:	68bb      	ldr	r3, [r7, #8]
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d1f8      	bne.n	cdc <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     cea:	68bb      	ldr	r3, [r7, #8]
     cec:	1c5a      	adds	r2, r3, #1
     cee:	60ba      	str	r2, [r7, #8]
     cf0:	222e      	movs	r2, #46	; 0x2e
     cf2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cf6:	2b00      	cmp	r3, #0
     cf8:	d105      	bne.n	d06 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     cfa:	68bb      	ldr	r3, [r7, #8]
     cfc:	1c5a      	adds	r2, r3, #1
     cfe:	60ba      	str	r2, [r7, #8]
     d00:	2230      	movs	r2, #48	; 0x30
     d02:	701a      	strb	r2, [r3, #0]
     d04:	e03c      	b.n	d80 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     d06:	68ba      	ldr	r2, [r7, #8]
     d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d0a:	1ad3      	subs	r3, r2, r3
     d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     d0e:	1ad3      	subs	r3, r2, r3
     d10:	3b01      	subs	r3, #1
     d12:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     d14:	69ba      	ldr	r2, [r7, #24]
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	4293      	cmp	r3, r2
     d1a:	bfa8      	it	ge
     d1c:	4613      	movge	r3, r2
     d1e:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     d20:	2300      	movs	r3, #0
     d22:	62fb      	str	r3, [r7, #44]	; 0x2c
     d24:	e015      	b.n	d52 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d28:	4613      	mov	r3, r2
     d2a:	009b      	lsls	r3, r3, #2
     d2c:	4413      	add	r3, r2
     d2e:	005b      	lsls	r3, r3, #1
     d30:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     d32:	68bb      	ldr	r3, [r7, #8]
     d34:	1c5a      	adds	r2, r3, #1
     d36:	60ba      	str	r2, [r7, #8]
     d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d3a:	1612      	asrs	r2, r2, #24
     d3c:	b2d2      	uxtb	r2, r2
     d3e:	3230      	adds	r2, #48	; 0x30
     d40:	b2d2      	uxtb	r2, r2
     d42:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d4a:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d4e:	3301      	adds	r3, #1
     d50:	62fb      	str	r3, [r7, #44]	; 0x2c
     d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d54:	69bb      	ldr	r3, [r7, #24]
     d56:	429a      	cmp	r2, r3
     d58:	dbe5      	blt.n	d26 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	3b01      	subs	r3, #1
     d5e:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d60:	e002      	b.n	d68 <ftoa+0x1a4>
        {
            --pcBuf;
     d62:	68bb      	ldr	r3, [r7, #8]
     d64:	3b01      	subs	r3, #1
     d66:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d68:	68bb      	ldr	r3, [r7, #8]
     d6a:	781b      	ldrb	r3, [r3, #0]
     d6c:	2b30      	cmp	r3, #48	; 0x30
     d6e:	d104      	bne.n	d7a <ftoa+0x1b6>
     d70:	68bb      	ldr	r3, [r7, #8]
     d72:	3b01      	subs	r3, #1
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b2e      	cmp	r3, #46	; 0x2e
     d78:	d1f3      	bne.n	d62 <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     d7a:	68bb      	ldr	r3, [r7, #8]
     d7c:	3301      	adds	r3, #1
     d7e:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	2200      	movs	r2, #0
     d84:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     d86:	68ba      	ldr	r2, [r7, #8]
     d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d8a:	1ad3      	subs	r3, r2, r3
} // ftoa()
     d8c:	4618      	mov	r0, r3
     d8e:	373c      	adds	r7, #60	; 0x3c
     d90:	46bd      	mov	sp, r7
     d92:	bd90      	pop	{r4, r7, pc}
     d94:	00302e30 	.word	0x00302e30

00000d98 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     d98:	b590      	push	{r4, r7, lr}
     d9a:	b095      	sub	sp, #84	; 0x54
     d9c:	af00      	add	r7, sp, #0
     d9e:	60f8      	str	r0, [r7, #12]
     da0:	60b9      	str	r1, [r7, #8]
     da2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     da4:	2300      	movs	r3, #0
     da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     da8:	2300      	movs	r3, #0
     daa:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     dac:	e2e3      	b.n	1376 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     dae:	2306      	movs	r3, #6
     db0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     db2:	68bb      	ldr	r3, [r7, #8]
     db4:	781b      	ldrb	r3, [r3, #0]
     db6:	2b25      	cmp	r3, #37	; 0x25
     db8:	d01f      	beq.n	dfa <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	2b00      	cmp	r3, #0
     dbe:	d015      	beq.n	dec <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     dc0:	68bb      	ldr	r3, [r7, #8]
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	2b0a      	cmp	r3, #10
     dc6:	d10b      	bne.n	de0 <am_util_stdio_vsprintf+0x48>
     dc8:	4bb1      	ldr	r3, [pc, #708]	; (1090 <am_util_stdio_vsprintf+0x2f8>)
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b00      	cmp	r3, #0
     dce:	d007      	beq.n	de0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     dd0:	68fb      	ldr	r3, [r7, #12]
     dd2:	1c5a      	adds	r2, r3, #1
     dd4:	60fa      	str	r2, [r7, #12]
     dd6:	220d      	movs	r2, #13
     dd8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ddc:	3301      	adds	r3, #1
     dde:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	1c5a      	adds	r2, r3, #1
     de4:	60fa      	str	r2, [r7, #12]
     de6:	68ba      	ldr	r2, [r7, #8]
     de8:	7812      	ldrb	r2, [r2, #0]
     dea:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     dec:	68bb      	ldr	r3, [r7, #8]
     dee:	3301      	adds	r3, #1
     df0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     df4:	3301      	adds	r3, #1
     df6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     df8:	e2bd      	b.n	1376 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     dfa:	68bb      	ldr	r3, [r7, #8]
     dfc:	3301      	adds	r3, #1
     dfe:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     e00:	2300      	movs	r3, #0
     e02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     e0e:	2320      	movs	r3, #32
     e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     e14:	68bb      	ldr	r3, [r7, #8]
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	2b30      	cmp	r3, #48	; 0x30
     e1a:	d105      	bne.n	e28 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     e1c:	2330      	movs	r3, #48	; 0x30
     e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	3301      	adds	r3, #1
     e26:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     e28:	f107 0310 	add.w	r3, r7, #16
     e2c:	4619      	mov	r1, r3
     e2e:	68b8      	ldr	r0, [r7, #8]
     e30:	f7ff fd98 	bl	964 <decstr_to_int>
     e34:	4603      	mov	r3, r0
     e36:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     e38:	693b      	ldr	r3, [r7, #16]
     e3a:	68ba      	ldr	r2, [r7, #8]
     e3c:	4413      	add	r3, r2
     e3e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     e40:	68bb      	ldr	r3, [r7, #8]
     e42:	781b      	ldrb	r3, [r3, #0]
     e44:	2b73      	cmp	r3, #115	; 0x73
     e46:	d005      	beq.n	e54 <am_util_stdio_vsprintf+0xbc>
     e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4a:	2b00      	cmp	r3, #0
     e4c:	da02      	bge.n	e54 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e50:	425b      	negs	r3, r3
     e52:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     e54:	68bb      	ldr	r3, [r7, #8]
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b2e      	cmp	r3, #46	; 0x2e
     e5a:	d10e      	bne.n	e7a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     e5c:	68bb      	ldr	r3, [r7, #8]
     e5e:	3301      	adds	r3, #1
     e60:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     e62:	f107 0310 	add.w	r3, r7, #16
     e66:	4619      	mov	r1, r3
     e68:	68b8      	ldr	r0, [r7, #8]
     e6a:	f7ff fd7b 	bl	964 <decstr_to_int>
     e6e:	4603      	mov	r3, r0
     e70:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     e72:	693b      	ldr	r3, [r7, #16]
     e74:	68ba      	ldr	r2, [r7, #8]
     e76:	4413      	add	r3, r2
     e78:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     e7a:	68bb      	ldr	r3, [r7, #8]
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b6c      	cmp	r3, #108	; 0x6c
     e80:	d10c      	bne.n	e9c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     e82:	68bb      	ldr	r3, [r7, #8]
     e84:	3301      	adds	r3, #1
     e86:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e88:	68bb      	ldr	r3, [r7, #8]
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	2b6c      	cmp	r3, #108	; 0x6c
     e8e:	d105      	bne.n	e9c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     e90:	68bb      	ldr	r3, [r7, #8]
     e92:	3301      	adds	r3, #1
     e94:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     e96:	2301      	movs	r3, #1
     e98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	781b      	ldrb	r3, [r3, #0]
     ea0:	3b46      	subs	r3, #70	; 0x46
     ea2:	2b32      	cmp	r3, #50	; 0x32
     ea4:	f200 8254 	bhi.w	1350 <am_util_stdio_vsprintf+0x5b8>
     ea8:	a201      	add	r2, pc, #4	; (adr r2, eb0 <am_util_stdio_vsprintf+0x118>)
     eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     eae:	bf00      	nop
     eb0:	000012db 	.word	0x000012db
     eb4:	00001351 	.word	0x00001351
     eb8:	00001351 	.word	0x00001351
     ebc:	00001351 	.word	0x00001351
     ec0:	00001351 	.word	0x00001351
     ec4:	00001351 	.word	0x00001351
     ec8:	00001351 	.word	0x00001351
     ecc:	00001351 	.word	0x00001351
     ed0:	00001351 	.word	0x00001351
     ed4:	00001351 	.word	0x00001351
     ed8:	00001351 	.word	0x00001351
     edc:	00001351 	.word	0x00001351
     ee0:	00001351 	.word	0x00001351
     ee4:	00001351 	.word	0x00001351
     ee8:	00001351 	.word	0x00001351
     eec:	00001351 	.word	0x00001351
     ef0:	00001351 	.word	0x00001351
     ef4:	00001351 	.word	0x00001351
     ef8:	00001077 	.word	0x00001077
     efc:	00001351 	.word	0x00001351
     f00:	00001351 	.word	0x00001351
     f04:	00001351 	.word	0x00001351
     f08:	00001351 	.word	0x00001351
     f0c:	00001351 	.word	0x00001351
     f10:	00001351 	.word	0x00001351
     f14:	00001351 	.word	0x00001351
     f18:	00001351 	.word	0x00001351
     f1c:	00001351 	.word	0x00001351
     f20:	00001351 	.word	0x00001351
     f24:	00000f7d 	.word	0x00000f7d
     f28:	000011a3 	.word	0x000011a3
     f2c:	00001351 	.word	0x00001351
     f30:	000012db 	.word	0x000012db
     f34:	00001351 	.word	0x00001351
     f38:	00001351 	.word	0x00001351
     f3c:	000011a3 	.word	0x000011a3
     f40:	00001351 	.word	0x00001351
     f44:	00001351 	.word	0x00001351
     f48:	00001351 	.word	0x00001351
     f4c:	00001351 	.word	0x00001351
     f50:	00001351 	.word	0x00001351
     f54:	00001351 	.word	0x00001351
     f58:	00001351 	.word	0x00001351
     f5c:	00001351 	.word	0x00001351
     f60:	00001351 	.word	0x00001351
     f64:	00000fa3 	.word	0x00000fa3
     f68:	00001351 	.word	0x00001351
     f6c:	00001111 	.word	0x00001111
     f70:	00001351 	.word	0x00001351
     f74:	00001351 	.word	0x00001351
     f78:	00001071 	.word	0x00001071
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	1d1a      	adds	r2, r3, #4
     f80:	607a      	str	r2, [r7, #4]
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d005      	beq.n	f9a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	1c5a      	adds	r2, r3, #1
     f92:	60fa      	str	r2, [r7, #12]
     f94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     f98:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f9c:	3301      	adds	r3, #1
     f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     fa0:	e1e6      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     fa2:	687b      	ldr	r3, [r7, #4]
     fa4:	1d1a      	adds	r2, r3, #4
     fa6:	607a      	str	r2, [r7, #4]
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     fac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     fae:	f7ff fdc7 	bl	b40 <simple_strlen>
     fb2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb6:	2b00      	cmp	r3, #0
     fb8:	dd2e      	ble.n	1018 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fbe:	429a      	cmp	r2, r3
     fc0:	d22a      	bcs.n	1018 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fc6:	1ad3      	subs	r3, r2, r3
     fc8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fd0:	4619      	mov	r1, r3
     fd2:	68f8      	ldr	r0, [r7, #12]
     fd4:	f7ff fdd0 	bl	b78 <padbuffer>
     fd8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	2b00      	cmp	r3, #0
     fde:	d001      	beq.n	fe4 <am_util_stdio_vsprintf+0x24c>
     fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe2:	e000      	b.n	fe6 <am_util_stdio_vsprintf+0x24e>
     fe4:	2300      	movs	r3, #0
     fe6:	68fa      	ldr	r2, [r7, #12]
     fe8:	4413      	add	r3, r2
     fea:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ff0:	4413      	add	r3, r2
     ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     ff4:	2300      	movs	r3, #0
     ff6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     ff8:	e00e      	b.n	1018 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d005      	beq.n	100c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1000:	68fb      	ldr	r3, [r7, #12]
    1002:	1c5a      	adds	r2, r3, #1
    1004:	60fa      	str	r2, [r7, #12]
    1006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1008:	7812      	ldrb	r2, [r2, #0]
    100a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    100c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    100e:	3301      	adds	r3, #1
    1010:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1014:	3301      	adds	r3, #1
    1016:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    101a:	781b      	ldrb	r3, [r3, #0]
    101c:	2b00      	cmp	r3, #0
    101e:	d1ec      	bne.n	ffa <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    1020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1022:	2b00      	cmp	r3, #0
    1024:	f000 81a1 	beq.w	136a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    102a:	425b      	negs	r3, r3
    102c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1032:	429a      	cmp	r2, r3
    1034:	f080 8199 	bcs.w	136a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1038:	6bba      	ldr	r2, [r7, #56]	; 0x38
    103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    103c:	1ad3      	subs	r3, r2, r3
    103e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1044:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1046:	4619      	mov	r1, r3
    1048:	68f8      	ldr	r0, [r7, #12]
    104a:	f7ff fd95 	bl	b78 <padbuffer>
    104e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1050:	68fb      	ldr	r3, [r7, #12]
    1052:	2b00      	cmp	r3, #0
    1054:	d001      	beq.n	105a <am_util_stdio_vsprintf+0x2c2>
    1056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1058:	e000      	b.n	105c <am_util_stdio_vsprintf+0x2c4>
    105a:	2300      	movs	r3, #0
    105c:	68fa      	ldr	r2, [r7, #12]
    105e:	4413      	add	r3, r2
    1060:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1066:	4413      	add	r3, r2
    1068:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    106a:	2300      	movs	r3, #0
    106c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    106e:	e17c      	b.n	136a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1070:	2301      	movs	r3, #1
    1072:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1076:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    107a:	2b00      	cmp	r3, #0
    107c:	d00a      	beq.n	1094 <am_util_stdio_vsprintf+0x2fc>
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	3307      	adds	r3, #7
    1082:	f023 0307 	bic.w	r3, r3, #7
    1086:	f103 0208 	add.w	r2, r3, #8
    108a:	607a      	str	r2, [r7, #4]
    108c:	cb18      	ldmia	r3, {r3, r4}
    108e:	e007      	b.n	10a0 <am_util_stdio_vsprintf+0x308>
    1090:	10001168 	.word	0x10001168
                                      va_arg(pArgs, uint32_t);
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	1d1a      	adds	r2, r3, #4
    1098:	607a      	str	r2, [r7, #4]
    109a:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    109c:	f04f 0400 	mov.w	r4, #0
    10a0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    10a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a6:	2b00      	cmp	r3, #0
    10a8:	d01e      	beq.n	10e8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    10aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10ae:	f7ff fc35 	bl	91c <ndigits_in_hex>
    10b2:	4602      	mov	r2, r0
    10b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b6:	1a9b      	subs	r3, r3, r2
    10b8:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10be:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10c0:	4619      	mov	r1, r3
    10c2:	68f8      	ldr	r0, [r7, #12]
    10c4:	f7ff fd58 	bl	b78 <padbuffer>
    10c8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d001      	beq.n	10d4 <am_util_stdio_vsprintf+0x33c>
    10d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10d2:	e000      	b.n	10d6 <am_util_stdio_vsprintf+0x33e>
    10d4:	2300      	movs	r3, #0
    10d6:	68fa      	ldr	r2, [r7, #12]
    10d8:	4413      	add	r3, r2
    10da:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10e0:	4413      	add	r3, r2
    10e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10e4:	2300      	movs	r3, #0
    10e6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    10e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    10ec:	68fa      	ldr	r2, [r7, #12]
    10ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10f2:	f7ff fcc5 	bl	a80 <uint64_to_hexstr>
    10f6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d003      	beq.n	1106 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    10fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1100:	68fa      	ldr	r2, [r7, #12]
    1102:	4413      	add	r3, r2
    1104:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    110a:	4413      	add	r3, r2
    110c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    110e:	e12f      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1114:	2b00      	cmp	r3, #0
    1116:	d008      	beq.n	112a <am_util_stdio_vsprintf+0x392>
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	3307      	adds	r3, #7
    111c:	f023 0307 	bic.w	r3, r3, #7
    1120:	f103 0208 	add.w	r2, r3, #8
    1124:	607a      	str	r2, [r7, #4]
    1126:	cb18      	ldmia	r3, {r3, r4}
    1128:	e005      	b.n	1136 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	1d1a      	adds	r2, r3, #4
    112e:	607a      	str	r2, [r7, #4]
    1130:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1132:	f04f 0400 	mov.w	r4, #0
    1136:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    113a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113c:	2b00      	cmp	r3, #0
    113e:	d01e      	beq.n	117e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1144:	f7ff fbaa 	bl	89c <ndigits_in_u64>
    1148:	4602      	mov	r2, r0
    114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114c:	1a9b      	subs	r3, r3, r2
    114e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1154:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1156:	4619      	mov	r1, r3
    1158:	68f8      	ldr	r0, [r7, #12]
    115a:	f7ff fd0d 	bl	b78 <padbuffer>
    115e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	2b00      	cmp	r3, #0
    1164:	d001      	beq.n	116a <am_util_stdio_vsprintf+0x3d2>
    1166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1168:	e000      	b.n	116c <am_util_stdio_vsprintf+0x3d4>
    116a:	2300      	movs	r3, #0
    116c:	68fa      	ldr	r2, [r7, #12]
    116e:	4413      	add	r3, r2
    1170:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1176:	4413      	add	r3, r2
    1178:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    117a:	2300      	movs	r3, #0
    117c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    117e:	68fa      	ldr	r2, [r7, #12]
    1180:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1184:	f7ff fc34 	bl	9f0 <uint64_to_str>
    1188:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	2b00      	cmp	r3, #0
    118e:	d003      	beq.n	1198 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1192:	68fa      	ldr	r2, [r7, #12]
    1194:	4413      	add	r3, r2
    1196:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    119a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    119c:	4413      	add	r3, r2
    119e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11a0:	e0e6      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    11a6:	2b00      	cmp	r3, #0
    11a8:	d008      	beq.n	11bc <am_util_stdio_vsprintf+0x424>
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	3307      	adds	r3, #7
    11ae:	f023 0307 	bic.w	r3, r3, #7
    11b2:	f103 0208 	add.w	r2, r3, #8
    11b6:	607a      	str	r2, [r7, #4]
    11b8:	cb18      	ldmia	r3, {r3, r4}
    11ba:	e005      	b.n	11c8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	1d1a      	adds	r2, r3, #4
    11c0:	607a      	str	r2, [r7, #4]
    11c2:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11c4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    11c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    11cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11d0:	2b00      	cmp	r3, #0
    11d2:	f174 0300 	sbcs.w	r3, r4, #0
    11d6:	da0a      	bge.n	11ee <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    11d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11dc:	425b      	negs	r3, r3
    11de:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    11e2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    11e6:	2301      	movs	r3, #1
    11e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    11ec:	e006      	b.n	11fc <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    11ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    11f6:	2300      	movs	r3, #0
    11f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    11fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11fe:	2b00      	cmp	r3, #0
    1200:	d04a      	beq.n	1298 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1202:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1206:	4618      	mov	r0, r3
    1208:	4621      	mov	r1, r4
    120a:	f7ff fb69 	bl	8e0 <ndigits_in_i64>
    120e:	4602      	mov	r2, r0
    1210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1212:	1a9b      	subs	r3, r3, r2
    1214:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    121a:	2b00      	cmp	r3, #0
    121c:	d011      	beq.n	1242 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1220:	3b01      	subs	r3, #1
    1222:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1228:	2b30      	cmp	r3, #48	; 0x30
    122a:	d10a      	bne.n	1242 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	2b00      	cmp	r3, #0
    1230:	d004      	beq.n	123c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1232:	68fb      	ldr	r3, [r7, #12]
    1234:	1c5a      	adds	r2, r3, #1
    1236:	60fa      	str	r2, [r7, #12]
    1238:	222d      	movs	r2, #45	; 0x2d
    123a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    123c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    123e:	3301      	adds	r3, #1
    1240:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1246:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1248:	4619      	mov	r1, r3
    124a:	68f8      	ldr	r0, [r7, #12]
    124c:	f7ff fc94 	bl	b78 <padbuffer>
    1250:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	2b00      	cmp	r3, #0
    1256:	d001      	beq.n	125c <am_util_stdio_vsprintf+0x4c4>
    1258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    125a:	e000      	b.n	125e <am_util_stdio_vsprintf+0x4c6>
    125c:	2300      	movs	r3, #0
    125e:	68fa      	ldr	r2, [r7, #12]
    1260:	4413      	add	r3, r2
    1262:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1268:	4413      	add	r3, r2
    126a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    126c:	2300      	movs	r3, #0
    126e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1270:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1274:	2b00      	cmp	r3, #0
    1276:	d01e      	beq.n	12b6 <am_util_stdio_vsprintf+0x51e>
    1278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    127c:	2b20      	cmp	r3, #32
    127e:	d11a      	bne.n	12b6 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	2b00      	cmp	r3, #0
    1284:	d004      	beq.n	1290 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	1c5a      	adds	r2, r3, #1
    128a:	60fa      	str	r2, [r7, #12]
    128c:	222d      	movs	r2, #45	; 0x2d
    128e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1292:	3301      	adds	r3, #1
    1294:	63fb      	str	r3, [r7, #60]	; 0x3c
    1296:	e00e      	b.n	12b6 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    129c:	2b00      	cmp	r3, #0
    129e:	d00a      	beq.n	12b6 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    12a0:	68fb      	ldr	r3, [r7, #12]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d004      	beq.n	12b0 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	1c5a      	adds	r2, r3, #1
    12aa:	60fa      	str	r2, [r7, #12]
    12ac:	222d      	movs	r2, #45	; 0x2d
    12ae:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    12b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12b2:	3301      	adds	r3, #1
    12b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    12b6:	68fa      	ldr	r2, [r7, #12]
    12b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12bc:	f7ff fb98 	bl	9f0 <uint64_to_str>
    12c0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    12c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ca:	68fa      	ldr	r2, [r7, #12]
    12cc:	4413      	add	r3, r2
    12ce:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12d4:	4413      	add	r3, r2
    12d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12d8:	e04a      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    12da:	68fb      	ldr	r3, [r7, #12]
    12dc:	2b00      	cmp	r3, #0
    12de:	d046      	beq.n	136e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	3307      	adds	r3, #7
    12e4:	f023 0307 	bic.w	r3, r3, #7
    12e8:	f103 0208 	add.w	r2, r3, #8
    12ec:	607a      	str	r2, [r7, #4]
    12ee:	cb18      	ldmia	r3, {r3, r4}
    12f0:	4618      	mov	r0, r3
    12f2:	4621      	mov	r1, r4
    12f4:	f7fe fee4 	bl	c0 <__aeabi_d2f>
    12f8:	4603      	mov	r3, r0
    12fa:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	2214      	movs	r2, #20
    1300:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1304:	68f9      	ldr	r1, [r7, #12]
    1306:	6978      	ldr	r0, [r7, #20]
    1308:	f7ff fc5c 	bl	bc4 <ftoa>
    130c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1310:	2b00      	cmp	r3, #0
    1312:	da14      	bge.n	133e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1316:	f1b3 3fff 	cmp.w	r3, #4294967295
    131a:	d102      	bne.n	1322 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    131c:	4b1e      	ldr	r3, [pc, #120]	; (1398 <am_util_stdio_vsprintf+0x600>)
    131e:	62bb      	str	r3, [r7, #40]	; 0x28
    1320:	e008      	b.n	1334 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1324:	f113 0f02 	cmn.w	r3, #2
    1328:	d102      	bne.n	1330 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    132a:	4b1c      	ldr	r3, [pc, #112]	; (139c <am_util_stdio_vsprintf+0x604>)
    132c:	62bb      	str	r3, [r7, #40]	; 0x28
    132e:	e001      	b.n	1334 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1330:	4b1b      	ldr	r3, [pc, #108]	; (13a0 <am_util_stdio_vsprintf+0x608>)
    1332:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1334:	68fb      	ldr	r3, [r7, #12]
    1336:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1338:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    133a:	2303      	movs	r3, #3
    133c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1342:	4413      	add	r3, r2
    1344:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1348:	68fa      	ldr	r2, [r7, #12]
    134a:	4413      	add	r3, r2
    134c:	60fb      	str	r3, [r7, #12]
                }
                break;
    134e:	e00e      	b.n	136e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1350:	68fb      	ldr	r3, [r7, #12]
    1352:	2b00      	cmp	r3, #0
    1354:	d005      	beq.n	1362 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1356:	68fb      	ldr	r3, [r7, #12]
    1358:	1c5a      	adds	r2, r3, #1
    135a:	60fa      	str	r2, [r7, #12]
    135c:	68ba      	ldr	r2, [r7, #8]
    135e:	7812      	ldrb	r2, [r2, #0]
    1360:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1364:	3301      	adds	r3, #1
    1366:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1368:	e002      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    136a:	bf00      	nop
    136c:	e000      	b.n	1370 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    136e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1370:	68bb      	ldr	r3, [r7, #8]
    1372:	3301      	adds	r3, #1
    1374:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    1376:	68bb      	ldr	r3, [r7, #8]
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	2b00      	cmp	r3, #0
    137c:	f47f ad17 	bne.w	dae <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	2b00      	cmp	r3, #0
    1384:	d002      	beq.n	138c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	2200      	movs	r2, #0
    138a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    138c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    138e:	4618      	mov	r0, r3
    1390:	3754      	adds	r7, #84	; 0x54
    1392:	46bd      	mov	sp, r7
    1394:	bd90      	pop	{r4, r7, pc}
    1396:	bf00      	nop
    1398:	00302e30 	.word	0x00302e30
    139c:	00232e23 	.word	0x00232e23
    13a0:	003f2e3f 	.word	0x003f2e3f

000013a4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    13a4:	b40f      	push	{r0, r1, r2, r3}
    13a6:	b580      	push	{r7, lr}
    13a8:	b082      	sub	sp, #8
    13aa:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    13ac:	f107 0314 	add.w	r3, r7, #20
    13b0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    13b2:	683a      	ldr	r2, [r7, #0]
    13b4:	6939      	ldr	r1, [r7, #16]
    13b6:	4808      	ldr	r0, [pc, #32]	; (13d8 <am_util_stdio_printf+0x34>)
    13b8:	f7ff fcee 	bl	d98 <am_util_stdio_vsprintf>
    13bc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    13be:	4b07      	ldr	r3, [pc, #28]	; (13dc <am_util_stdio_printf+0x38>)
    13c0:	681b      	ldr	r3, [r3, #0]
    13c2:	4805      	ldr	r0, [pc, #20]	; (13d8 <am_util_stdio_printf+0x34>)
    13c4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    13c6:	687b      	ldr	r3, [r7, #4]
}
    13c8:	4618      	mov	r0, r3
    13ca:	3708      	adds	r7, #8
    13cc:	46bd      	mov	sp, r7
    13ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    13d2:	b004      	add	sp, #16
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	10001068 	.word	0x10001068
    13dc:	10001370 	.word	0x10001370

000013e0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    13e0:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    13e2:	f000 fb2b 	bl	1a3c <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    13e6:	f000 fb4d 	bl	1a84 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    13ea:	f000 ff71 	bl	22d0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    13ee:	2001      	movs	r0, #1
    13f0:	f000 fc80 	bl	1cf4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    13f4:	2001      	movs	r0, #1
    13f6:	f000 f905 	bl	1604 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    13fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    13fe:	f000 bc87 	b.w	1d10 <am_hal_rtc_osc_disable>
    1402:	bf00      	nop

00001404 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1404:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1406:	4b17      	ldr	r3, [pc, #92]	; (1464 <am_bsp_debug_printf_enable+0x60>)
    1408:	6818      	ldr	r0, [r3, #0]
    140a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    140e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1410:	d001      	beq.n	1416 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1412:	b007      	add	sp, #28
    1414:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1416:	4a14      	ldr	r2, [pc, #80]	; (1468 <am_bsp_debug_printf_enable+0x64>)
    1418:	4914      	ldr	r1, [pc, #80]	; (146c <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    141a:	4d15      	ldr	r5, [pc, #84]	; (1470 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    141c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    141e:	a806      	add	r0, sp, #24
    1420:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1424:	f000 fc7c 	bl	1d20 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1428:	f3ef 8310 	mrs	r3, PRIMASK
    142c:	9300      	str	r3, [sp, #0]
    142e:	b672      	cpsid	i
    1430:	4a10      	ldr	r2, [pc, #64]	; (1474 <am_bsp_debug_printf_enable+0x70>)
    1432:	4d11      	ldr	r5, [pc, #68]	; (1478 <am_bsp_debug_printf_enable+0x74>)
    1434:	4811      	ldr	r0, [pc, #68]	; (147c <am_bsp_debug_printf_enable+0x78>)
    1436:	4912      	ldr	r1, [pc, #72]	; (1480 <am_bsp_debug_printf_enable+0x7c>)
    1438:	2373      	movs	r3, #115	; 0x73
    143a:	6013      	str	r3, [r2, #0]
    143c:	682b      	ldr	r3, [r5, #0]
    143e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1442:	602b      	str	r3, [r5, #0]
    1444:	6805      	ldr	r5, [r0, #0]
    1446:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    144a:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    144e:	6003      	str	r3, [r0, #0]
    1450:	6808      	ldr	r0, [r1, #0]
    1452:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1456:	600d      	str	r5, [r1, #0]
    1458:	6014      	str	r4, [r2, #0]
    145a:	9c00      	ldr	r4, [sp, #0]
    145c:	f384 8810 	msr	PRIMASK, r4
}
    1460:	b007      	add	sp, #28
    1462:	bd30      	pop	{r4, r5, pc}
    1464:	1000116c 	.word	0x1000116c
    1468:	e0000e80 	.word	0xe0000e80
    146c:	00150511 	.word	0x00150511
    1470:	000f4240 	.word	0x000f4240
    1474:	40010060 	.word	0x40010060
    1478:	40010054 	.word	0x40010054
    147c:	40010028 	.word	0x40010028
    1480:	40010108 	.word	0x40010108

00001484 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1484:	f000 b952 	b.w	172c <am_hal_itm_print>

00001488 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    148a:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    148c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1490:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1492:	7863      	ldrb	r3, [r4, #1]
    1494:	78e2      	ldrb	r2, [r4, #3]
    1496:	7925      	ldrb	r5, [r4, #4]
    1498:	79a1      	ldrb	r1, [r4, #6]
    149a:	00be      	lsls	r6, r7, #2
    149c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    14a0:	f006 0304 	and.w	r3, r6, #4
    14a4:	f00e 0602 	and.w	r6, lr, #2
    14a8:	431e      	orrs	r6, r3
    14aa:	f042 0201 	orr.w	r2, r2, #1
    14ae:	79e3      	ldrb	r3, [r4, #7]
    14b0:	01ed      	lsls	r5, r5, #7
    14b2:	4316      	orrs	r6, r2
    14b4:	b2ed      	uxtb	r5, r5
    14b6:	7a22      	ldrb	r2, [r4, #8]
    14b8:	0289      	lsls	r1, r1, #10
    14ba:	432e      	orrs	r6, r5
    14bc:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    14c0:	7a65      	ldrb	r5, [r4, #9]
    14c2:	02db      	lsls	r3, r3, #11
    14c4:	430e      	orrs	r6, r1
    14c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    14ca:	0312      	lsls	r2, r2, #12
    14cc:	7aa1      	ldrb	r1, [r4, #10]
    14ce:	431e      	orrs	r6, r3
    14d0:	042d      	lsls	r5, r5, #16
    14d2:	b293      	uxth	r3, r2
    14d4:	7ae2      	ldrb	r2, [r4, #11]
    14d6:	431e      	orrs	r6, r3
    14d8:	0509      	lsls	r1, r1, #20
    14da:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    14de:	0612      	lsls	r2, r2, #24
    14e0:	4333      	orrs	r3, r6
    14e2:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    14e6:	00bf      	lsls	r7, r7, #2
    14e8:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    14ec:	4333      	orrs	r3, r6
    14ee:	430b      	orrs	r3, r1
    14f0:	f007 0508 	and.w	r5, r7, #8
    14f4:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    14f6:	f000 f999 	bl	182c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    14fa:	482c      	ldr	r0, [pc, #176]	; (15ac <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14fc:	4b2c      	ldr	r3, [pc, #176]	; (15b0 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    14fe:	6005      	str	r5, [r0, #0]
    1500:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1502:	681e      	ldr	r6, [r3, #0]
    1504:	0777      	lsls	r7, r6, #29
    1506:	d41e      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1508:	681f      	ldr	r7, [r3, #0]
    150a:	077e      	lsls	r6, r7, #29
    150c:	f102 32ff 	add.w	r2, r2, #4294967295
    1510:	d419      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1512:	6819      	ldr	r1, [r3, #0]
    1514:	074f      	lsls	r7, r1, #29
    1516:	d416      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1518:	6818      	ldr	r0, [r3, #0]
    151a:	0746      	lsls	r6, r0, #29
    151c:	d413      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    151e:	681e      	ldr	r6, [r3, #0]
    1520:	0770      	lsls	r0, r6, #29
    1522:	d410      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1524:	681f      	ldr	r7, [r3, #0]
    1526:	0779      	lsls	r1, r7, #29
    1528:	d40d      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    152a:	6819      	ldr	r1, [r3, #0]
    152c:	074f      	lsls	r7, r1, #29
    152e:	d40a      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1530:	6818      	ldr	r0, [r3, #0]
    1532:	0746      	lsls	r6, r0, #29
    1534:	d407      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    1536:	681e      	ldr	r6, [r3, #0]
    1538:	0770      	lsls	r0, r6, #29
    153a:	d404      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    153c:	681f      	ldr	r7, [r3, #0]
    153e:	0779      	lsls	r1, r7, #29
    1540:	d401      	bmi.n	1546 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1542:	3a09      	subs	r2, #9
    1544:	d1dd      	bne.n	1502 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1546:	4b1a      	ldr	r3, [pc, #104]	; (15b0 <am_hal_cachectrl_enable+0x128>)
    1548:	681a      	ldr	r2, [r3, #0]
    154a:	f042 0101 	orr.w	r1, r2, #1
    154e:	6019      	str	r1, [r3, #0]
    1550:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1552:	6818      	ldr	r0, [r3, #0]
    1554:	0740      	lsls	r0, r0, #29
    1556:	d41e      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1558:	681e      	ldr	r6, [r3, #0]
    155a:	0771      	lsls	r1, r6, #29
    155c:	f102 32ff 	add.w	r2, r2, #4294967295
    1560:	d419      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1562:	681f      	ldr	r7, [r3, #0]
    1564:	077f      	lsls	r7, r7, #29
    1566:	d416      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1568:	6819      	ldr	r1, [r3, #0]
    156a:	074e      	lsls	r6, r1, #29
    156c:	d413      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    156e:	6818      	ldr	r0, [r3, #0]
    1570:	0740      	lsls	r0, r0, #29
    1572:	d410      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1574:	681e      	ldr	r6, [r3, #0]
    1576:	0771      	lsls	r1, r6, #29
    1578:	d40d      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    157a:	681f      	ldr	r7, [r3, #0]
    157c:	077f      	lsls	r7, r7, #29
    157e:	d40a      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1580:	6819      	ldr	r1, [r3, #0]
    1582:	074e      	lsls	r6, r1, #29
    1584:	d407      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    1586:	6818      	ldr	r0, [r3, #0]
    1588:	0740      	lsls	r0, r0, #29
    158a:	d404      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    158c:	681e      	ldr	r6, [r3, #0]
    158e:	0771      	lsls	r1, r6, #29
    1590:	d401      	bmi.n	1596 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1592:	3a09      	subs	r2, #9
    1594:	d1dd      	bne.n	1552 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1596:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1598:	4f04      	ldr	r7, [pc, #16]	; (15ac <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    159a:	0223      	lsls	r3, r4, #8
    159c:	f403 7100 	and.w	r1, r3, #512	; 0x200
    15a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
    15a4:	4311      	orrs	r1, r2
    15a6:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    15a8:	6039      	str	r1, [r7, #0]
    15aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ac:	40018000 	.word	0x40018000
    15b0:	40018008 	.word	0x40018008

000015b4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    15b4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    15b6:	4604      	mov	r4, r0
    15b8:	b120      	cbz	r0, 15c4 <am_hal_clkgen_sysclk_select+0x10>
    15ba:	4a06      	ldr	r2, [pc, #24]	; (15d4 <am_hal_clkgen_sysclk_select+0x20>)
    15bc:	4806      	ldr	r0, [pc, #24]	; (15d8 <am_hal_clkgen_sysclk_select+0x24>)
    15be:	2150      	movs	r1, #80	; 0x50
    15c0:	f000 f84c 	bl	165c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15c6:	4906      	ldr	r1, [pc, #24]	; (15e0 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15c8:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    15ca:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15cc:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15ce:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    15d0:	601a      	str	r2, [r3, #0]
    15d2:	bd10      	pop	{r4, pc}
    15d4:	000023d4 	.word	0x000023d4
    15d8:	0000240c 	.word	0x0000240c
    15dc:	40004014 	.word	0x40004014
    15e0:	40004018 	.word	0x40004018

000015e4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    15e4:	4b04      	ldr	r3, [pc, #16]	; (15f8 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    15e6:	4905      	ldr	r1, [pc, #20]	; (15fc <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    15e8:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    15ea:	4805      	ldr	r0, [pc, #20]	; (1600 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    15ec:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    15f0:	bf08      	it	eq
    15f2:	4608      	moveq	r0, r1
    15f4:	4770      	bx	lr
    15f6:	bf00      	nop
    15f8:	40004018 	.word	0x40004018
    15fc:	02dc6c00 	.word	0x02dc6c00
    1600:	016e3600 	.word	0x016e3600

00001604 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1604:	0783      	lsls	r3, r0, #30
    1606:	d003      	beq.n	1610 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1608:	4a02      	ldr	r2, [pc, #8]	; (1614 <am_hal_clkgen_osc_stop+0x10>)
    160a:	6813      	ldr	r3, [r2, #0]
    160c:	4318      	orrs	r0, r3
    160e:	6010      	str	r0, [r2, #0]
    1610:	4770      	bx	lr
    1612:	bf00      	nop
    1614:	4000400c 	.word	0x4000400c

00001618 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1618:	2801      	cmp	r0, #1
    161a:	d900      	bls.n	161e <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    161c:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    161e:	2903      	cmp	r1, #3
    1620:	d8fc      	bhi.n	161c <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1622:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    1626:	b430      	push	{r4, r5}
    1628:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    162a:	9301      	str	r3, [sp, #4]
    162c:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    162e:	4b0a      	ldr	r3, [pc, #40]	; (1658 <am_hal_clkgen_uarten_set+0x40>)
    1630:	00c5      	lsls	r5, r0, #3
    1632:	681c      	ldr	r4, [r3, #0]
    1634:	2203      	movs	r2, #3
    1636:	40aa      	lsls	r2, r5
    1638:	ea24 0502 	bic.w	r5, r4, r2
    163c:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    163e:	fb00 f000 	mul.w	r0, r0, r0
    1642:	681a      	ldr	r2, [r3, #0]
    1644:	00c0      	lsls	r0, r0, #3
    1646:	4081      	lsls	r1, r0
    1648:	4311      	orrs	r1, r2
    164a:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    164c:	9b01      	ldr	r3, [sp, #4]
    164e:	f383 8810 	msr	PRIMASK, r3
}
    1652:	b002      	add	sp, #8
    1654:	bc30      	pop	{r4, r5}
    1656:	4770      	bx	lr
    1658:	40004034 	.word	0x40004034

0000165c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    165c:	e7fe      	b.n	165c <am_hal_debug_error>
    165e:	bf00      	nop

00001660 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1660:	4b01      	ldr	r3, [pc, #4]	; (1668 <am_hal_flash_delay+0x8>)
    1662:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1664:	4708      	bx	r1
    1666:	bf00      	nop
    1668:	10001014 	.word	0x10001014

0000166c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    166c:	280f      	cmp	r0, #15
    166e:	d80b      	bhi.n	1688 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1670:	2805      	cmp	r0, #5
    1672:	d013      	beq.n	169c <am_hal_interrupt_enable+0x30>
    1674:	2806      	cmp	r0, #6
    1676:	d017      	beq.n	16a8 <am_hal_interrupt_enable+0x3c>
    1678:	2804      	cmp	r0, #4
    167a:	d104      	bne.n	1686 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    167c:	4a0d      	ldr	r2, [pc, #52]	; (16b4 <am_hal_interrupt_enable+0x48>)
    167e:	6813      	ldr	r3, [r2, #0]
    1680:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1684:	6010      	str	r0, [r2, #0]
    1686:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1688:	f1a0 0310 	sub.w	r3, r0, #16
    168c:	f003 0c1f 	and.w	ip, r3, #31
    1690:	2001      	movs	r0, #1
    1692:	4909      	ldr	r1, [pc, #36]	; (16b8 <am_hal_interrupt_enable+0x4c>)
    1694:	fa00 f20c 	lsl.w	r2, r0, ip
    1698:	600a      	str	r2, [r1, #0]
    169a:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    169c:	4805      	ldr	r0, [pc, #20]	; (16b4 <am_hal_interrupt_enable+0x48>)
    169e:	6801      	ldr	r1, [r0, #0]
    16a0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    16a4:	6002      	str	r2, [r0, #0]
            break;
    16a6:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    16a8:	4902      	ldr	r1, [pc, #8]	; (16b4 <am_hal_interrupt_enable+0x48>)
    16aa:	680a      	ldr	r2, [r1, #0]
    16ac:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    16b0:	600b      	str	r3, [r1, #0]
            break;
    16b2:	4770      	bx	lr
    16b4:	e000ed24 	.word	0xe000ed24
    16b8:	e000e100 	.word	0xe000e100

000016bc <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16bc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    16c0:	b662      	cpsie	i
    __asm("    bx lr");
    16c2:	4770      	bx	lr

000016c4 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16c4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    16c8:	b672      	cpsid	i
    __asm("    bx lr");
    16ca:	4770      	bx	lr

000016cc <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    16cc:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop

000016d4 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    16d4:	4b0d      	ldr	r3, [pc, #52]	; (170c <am_hal_itm_enable+0x38>)
    16d6:	6818      	ldr	r0, [r3, #0]
    16d8:	07c2      	lsls	r2, r0, #31
    16da:	d416      	bmi.n	170a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    16dc:	4a0c      	ldr	r2, [pc, #48]	; (1710 <am_hal_itm_enable+0x3c>)
    16de:	6811      	ldr	r1, [r2, #0]
    16e0:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    16e4:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    16e6:	6810      	ldr	r0, [r2, #0]
    16e8:	01c3      	lsls	r3, r0, #7
    16ea:	d5fc      	bpl.n	16e6 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    16ec:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    16ee:	4809      	ldr	r0, [pc, #36]	; (1714 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16f0:	4c09      	ldr	r4, [pc, #36]	; (1718 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    16f2:	4d0a      	ldr	r5, [pc, #40]	; (171c <am_hal_itm_enable+0x48>)
    16f4:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16f6:	250f      	movs	r5, #15
    16f8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    16fa:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    16fc:	4908      	ldr	r1, [pc, #32]	; (1720 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16fe:	4b09      	ldr	r3, [pc, #36]	; (1724 <am_hal_itm_enable+0x50>)
    1700:	4a09      	ldr	r2, [pc, #36]	; (1728 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1702:	f04f 30ff 	mov.w	r0, #4294967295
    1706:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1708:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    170a:	4770      	bx	lr
    170c:	1000116c 	.word	0x1000116c
    1710:	e000edfc 	.word	0xe000edfc
    1714:	e0000fb0 	.word	0xe0000fb0
    1718:	e0000e40 	.word	0xe0000e40
    171c:	c5acce55 	.word	0xc5acce55
    1720:	e0000e00 	.word	0xe0000e00
    1724:	e0000e80 	.word	0xe0000e80
    1728:	00150511 	.word	0x00150511

0000172c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    172c:	7803      	ldrb	r3, [r0, #0]
    172e:	b1ab      	cbz	r3, 175c <am_hal_itm_print+0x30>
    1730:	4602      	mov	r2, r0
    1732:	2300      	movs	r3, #0
    1734:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1738:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    173a:	2900      	cmp	r1, #0
    173c:	d1fa      	bne.n	1734 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    173e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1742:	b430      	push	{r4, r5}
    1744:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1746:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1748:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    174c:	f8dc 3000 	ldr.w	r3, [ip]
    1750:	2b00      	cmp	r3, #0
    1752:	d0fb      	beq.n	174c <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1754:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1756:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1758:	d1f6      	bne.n	1748 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    175a:	bc30      	pop	{r4, r5}
    175c:	4770      	bx	lr
    175e:	bf00      	nop

00001760 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1760:	4a0d      	ldr	r2, [pc, #52]	; (1798 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1762:	4b0e      	ldr	r3, [pc, #56]	; (179c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1764:	490e      	ldr	r1, [pc, #56]	; (17a0 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1766:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1768:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    176a:	6814      	ldr	r4, [r2, #0]
    176c:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    176e:	6809      	ldr	r1, [r1, #0]
    1770:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1772:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1774:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1776:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1778:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    177a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    177c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1780:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1782:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1784:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1788:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    178c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    178e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1790:	6142      	str	r2, [r0, #20]
}
    1792:	bc70      	pop	{r4, r5, r6}
    1794:	4770      	bx	lr
    1796:	bf00      	nop
    1798:	400201c4 	.word	0x400201c4
    179c:	400201cc 	.word	0x400201cc
    17a0:	400201c0 	.word	0x400201c0

000017a4 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    17a4:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    17a6:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    17a8:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    17aa:	b1c0      	cbz	r0, 17de <am_hal_pwrctrl_periph_enable+0x3a>
    17ac:	1e43      	subs	r3, r0, #1
    17ae:	4203      	tst	r3, r0
    17b0:	d115      	bne.n	17de <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    17b2:	f3ef 8010 	mrs	r0, PRIMASK
    17b6:	9001      	str	r0, [sp, #4]
    17b8:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    17ba:	4a18      	ldr	r2, [pc, #96]	; (181c <am_hal_pwrctrl_periph_enable+0x78>)
    17bc:	6811      	ldr	r1, [r2, #0]
    17be:	4321      	orrs	r1, r4
    17c0:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    17c2:	9b01      	ldr	r3, [sp, #4]
    17c4:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    17c8:	200e      	movs	r0, #14
    17ca:	f7ff ff49 	bl	1660 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    17ce:	f014 0f0e 	tst.w	r4, #14
    17d2:	d10a      	bne.n	17ea <am_hal_pwrctrl_periph_enable+0x46>
    17d4:	f014 0f70 	tst.w	r4, #112	; 0x70
    17d8:	d00e      	beq.n	17f8 <am_hal_pwrctrl_periph_enable+0x54>
    17da:	2408      	movs	r4, #8
    17dc:	e006      	b.n	17ec <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    17de:	4a10      	ldr	r2, [pc, #64]	; (1820 <am_hal_pwrctrl_periph_enable+0x7c>)
    17e0:	4810      	ldr	r0, [pc, #64]	; (1824 <am_hal_pwrctrl_periph_enable+0x80>)
    17e2:	215d      	movs	r1, #93	; 0x5d
    17e4:	f7ff ff3a 	bl	165c <am_hal_debug_error>
    17e8:	e7e3      	b.n	17b2 <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    17ea:	2404      	movs	r4, #4
    17ec:	4a0e      	ldr	r2, [pc, #56]	; (1828 <am_hal_pwrctrl_periph_enable+0x84>)
    17ee:	6811      	ldr	r1, [r2, #0]
    17f0:	420c      	tst	r4, r1
    17f2:	d0fc      	beq.n	17ee <am_hal_pwrctrl_periph_enable+0x4a>
}
    17f4:	b002      	add	sp, #8
    17f6:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    17f8:	f240 1081 	movw	r0, #385	; 0x181
    17fc:	4020      	ands	r0, r4
    17fe:	b940      	cbnz	r0, 1812 <am_hal_pwrctrl_periph_enable+0x6e>
    1800:	05a3      	lsls	r3, r4, #22
    1802:	d408      	bmi.n	1816 <am_hal_pwrctrl_periph_enable+0x72>
    1804:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1808:	bf14      	ite	ne
    180a:	2410      	movne	r4, #16
    180c:	f04f 34ff 	moveq.w	r4, #4294967295
    1810:	e7ec      	b.n	17ec <am_hal_pwrctrl_periph_enable+0x48>
    1812:	2402      	movs	r4, #2
    1814:	e7ea      	b.n	17ec <am_hal_pwrctrl_periph_enable+0x48>
    1816:	2480      	movs	r4, #128	; 0x80
    1818:	e7e8      	b.n	17ec <am_hal_pwrctrl_periph_enable+0x48>
    181a:	bf00      	nop
    181c:	40021008 	.word	0x40021008
    1820:	00002424 	.word	0x00002424
    1824:	00002458 	.word	0x00002458
    1828:	40021014 	.word	0x40021014

0000182c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    182c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1830:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1832:	d03a      	beq.n	18aa <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1834:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1838:	f000 809d 	beq.w	1976 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    183c:	2801      	cmp	r0, #1
    183e:	f000 809d 	beq.w	197c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1842:	2803      	cmp	r0, #3
    1844:	f000 80a6 	beq.w	1994 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1848:	2807      	cmp	r0, #7
    184a:	f000 809c 	beq.w	1986 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    184e:	280f      	cmp	r0, #15
    1850:	f000 80a5 	beq.w	199e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1854:	281f      	cmp	r0, #31
    1856:	f000 80b1 	beq.w	19bc <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    185a:	283f      	cmp	r0, #63	; 0x3f
    185c:	f000 80b5 	beq.w	19ca <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1860:	287f      	cmp	r0, #127	; 0x7f
    1862:	f000 80b9 	beq.w	19d8 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1866:	28ff      	cmp	r0, #255	; 0xff
    1868:	f000 80a0 	beq.w	19ac <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    186c:	f240 13ff 	movw	r3, #511	; 0x1ff
    1870:	4298      	cmp	r0, r3
    1872:	f000 80b8 	beq.w	19e6 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1876:	f240 31ff 	movw	r1, #1023	; 0x3ff
    187a:	4288      	cmp	r0, r1
    187c:	f000 80b9 	beq.w	19f2 <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1880:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1884:	4290      	cmp	r0, r2
    1886:	d00e      	beq.n	18a6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1888:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    188c:	f000 80b7 	beq.w	19fe <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1890:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1894:	42a0      	cmp	r0, r4
    1896:	f000 80b5 	beq.w	1a04 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    189a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    189e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    18a2:	4560      	cmp	r0, ip
    18a4:	d132      	bne.n	190c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    18a6:	495c      	ldr	r1, [pc, #368]	; (1a18 <am_hal_pwrctrl_memory_enable+0x1ec>)
    18a8:	e066      	b.n	1978 <am_hal_pwrctrl_memory_enable+0x14c>
    18aa:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    18ae:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    18b0:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    18b2:	4c5a      	ldr	r4, [pc, #360]	; (1a1c <am_hal_pwrctrl_memory_enable+0x1f0>)
    18b4:	6822      	ldr	r2, [r4, #0]
    18b6:	402a      	ands	r2, r5
    18b8:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    18ba:	4d58      	ldr	r5, [pc, #352]	; (1a1c <am_hal_pwrctrl_memory_enable+0x1f0>)
    18bc:	682c      	ldr	r4, [r5, #0]
    18be:	4320      	orrs	r0, r4
    18c0:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    18c2:	2b00      	cmp	r3, #0
    18c4:	d029      	beq.n	191a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18c6:	4a56      	ldr	r2, [pc, #344]	; (1a20 <am_hal_pwrctrl_memory_enable+0x1f4>)
    18c8:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18ca:	4203      	tst	r3, r0
    18cc:	bf18      	it	ne
    18ce:	20c6      	movne	r0, #198	; 0xc6
    18d0:	d01f      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18d2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18d4:	422b      	tst	r3, r5
    18d6:	d01c      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18d8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18da:	4223      	tst	r3, r4
    18dc:	d019      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18de:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18e0:	422b      	tst	r3, r5
    18e2:	d016      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18e4:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18e6:	4223      	tst	r3, r4
    18e8:	d013      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18ea:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18ec:	422b      	tst	r3, r5
    18ee:	d010      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18f0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18f2:	4223      	tst	r3, r4
    18f4:	d00d      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18f6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18f8:	422b      	tst	r3, r5
    18fa:	d00a      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    18fc:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    18fe:	4223      	tst	r3, r4
    1900:	d007      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1902:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1904:	422b      	tst	r3, r5
    1906:	d004      	beq.n	1912 <am_hal_pwrctrl_memory_enable+0xe6>
    1908:	3809      	subs	r0, #9
    190a:	d1e2      	bne.n	18d2 <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    190c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    190e:	bc30      	pop	{r4, r5}
    1910:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1912:	b911      	cbnz	r1, 191a <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1914:	2001      	movs	r0, #1
}
    1916:	bc30      	pop	{r4, r5}
    1918:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    191a:	4b41      	ldr	r3, [pc, #260]	; (1a20 <am_hal_pwrctrl_memory_enable+0x1f4>)
    191c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    191e:	ea31 0402 	bics.w	r4, r1, r2
    1922:	bf18      	it	ne
    1924:	24c6      	movne	r4, #198	; 0xc6
    1926:	d0f5      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1928:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    192a:	ea31 0000 	bics.w	r0, r1, r0
    192e:	d0f1      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1930:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1932:	ea31 0005 	bics.w	r0, r1, r5
    1936:	d0ed      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1938:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    193a:	ea31 0002 	bics.w	r0, r1, r2
    193e:	d0e9      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1940:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1942:	ea31 0000 	bics.w	r0, r1, r0
    1946:	d0e5      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1948:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    194a:	ea31 0005 	bics.w	r0, r1, r5
    194e:	d0e1      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1950:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1952:	ea31 0002 	bics.w	r0, r1, r2
    1956:	d0dd      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1958:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    195a:	ea31 0000 	bics.w	r0, r1, r0
    195e:	d0d9      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1960:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1962:	ea31 0005 	bics.w	r0, r1, r5
    1966:	d0d5      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1968:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    196a:	ea31 0002 	bics.w	r0, r1, r2
    196e:	d0d1      	beq.n	1914 <am_hal_pwrctrl_memory_enable+0xe8>
    1970:	3c09      	subs	r4, #9
    1972:	d1d9      	bne.n	1928 <am_hal_pwrctrl_memory_enable+0xfc>
    1974:	e7ca      	b.n	190c <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1976:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1978:	2300      	movs	r3, #0
    197a:	e79e      	b.n	18ba <am_hal_pwrctrl_memory_enable+0x8e>
    197c:	4d29      	ldr	r5, [pc, #164]	; (1a24 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    197e:	4b2a      	ldr	r3, [pc, #168]	; (1a28 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1980:	f44f 7180 	mov.w	r1, #256	; 0x100
    1984:	e795      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    1986:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    198a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    198e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1992:	e78e      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    1994:	4d25      	ldr	r5, [pc, #148]	; (1a2c <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1996:	4b26      	ldr	r3, [pc, #152]	; (1a30 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1998:	f44f 7140 	mov.w	r1, #768	; 0x300
    199c:	e789      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    199e:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19a2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    19a6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    19aa:	e782      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    19ac:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19b0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    19b4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    19b8:	20ff      	movs	r0, #255	; 0xff
    19ba:	e77a      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    19bc:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19c0:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    19c4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    19c8:	e773      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    19ca:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19ce:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    19d2:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    19d6:	e76c      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    19d8:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19dc:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    19e0:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    19e4:	e765      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    19e6:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19ea:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    19ee:	4911      	ldr	r1, [pc, #68]	; (1a34 <am_hal_pwrctrl_memory_enable+0x208>)
    19f0:	e75f      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    19f2:	4911      	ldr	r1, [pc, #68]	; (1a38 <am_hal_pwrctrl_memory_enable+0x20c>)
    19f4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    19f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    19fc:	e759      	b.n	18b2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    19fe:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1a02:	e7b9      	b.n	1978 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1a04:	4805      	ldr	r0, [pc, #20]	; (1a1c <am_hal_pwrctrl_memory_enable+0x1f0>)
    1a06:	6803      	ldr	r3, [r0, #0]
    1a08:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1a0c:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1a0e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1a12:	2100      	movs	r1, #0
    1a14:	e757      	b.n	18c6 <am_hal_pwrctrl_memory_enable+0x9a>
    1a16:	bf00      	nop
    1a18:	0007ff00 	.word	0x0007ff00
    1a1c:	40021010 	.word	0x40021010
    1a20:	40021014 	.word	0x40021014
    1a24:	fffff801 	.word	0xfffff801
    1a28:	0007fe00 	.word	0x0007fe00
    1a2c:	fffff803 	.word	0xfffff803
    1a30:	0007fc00 	.word	0x0007fc00
    1a34:	0001ff00 	.word	0x0001ff00
    1a38:	0003ff00 	.word	0x0003ff00

00001a3c <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a3c:	4b0f      	ldr	r3, [pc, #60]	; (1a7c <am_hal_pwrctrl_bucks_init+0x40>)
    1a3e:	681a      	ldr	r2, [r3, #0]
    1a40:	0792      	lsls	r2, r2, #30
    1a42:	d502      	bpl.n	1a4a <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1a44:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a46:	07c3      	lsls	r3, r0, #31
    1a48:	d40e      	bmi.n	1a68 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a4a:	4b0d      	ldr	r3, [pc, #52]	; (1a80 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a4c:	4a0b      	ldr	r2, [pc, #44]	; (1a7c <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a4e:	6819      	ldr	r1, [r3, #0]
    1a50:	f041 0002 	orr.w	r0, r1, #2
    1a54:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1a56:	6819      	ldr	r1, [r3, #0]
    1a58:	f041 0001 	orr.w	r0, r1, #1
    1a5c:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a5e:	6813      	ldr	r3, [r2, #0]
    1a60:	f003 0103 	and.w	r1, r3, #3
    1a64:	2903      	cmp	r1, #3
    1a66:	d1fa      	bne.n	1a5e <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1a68:	4a04      	ldr	r2, [pc, #16]	; (1a7c <am_hal_pwrctrl_bucks_init+0x40>)
    1a6a:	6810      	ldr	r0, [r2, #0]
    1a6c:	f000 0303 	and.w	r3, r0, #3
    1a70:	2b03      	cmp	r3, #3
    1a72:	d1fa      	bne.n	1a6a <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1a74:	2042      	movs	r0, #66	; 0x42
    1a76:	f7ff bdf3 	b.w	1660 <am_hal_flash_delay>
    1a7a:	bf00      	nop
    1a7c:	40021004 	.word	0x40021004
    1a80:	40021000 	.word	0x40021000

00001a84 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a86:	4a06      	ldr	r2, [pc, #24]	; (1aa0 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a88:	680b      	ldr	r3, [r1, #0]
    1a8a:	f043 0006 	orr.w	r0, r3, #6
    1a8e:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a90:	6811      	ldr	r1, [r2, #0]
    1a92:	f021 0304 	bic.w	r3, r1, #4
    1a96:	6013      	str	r3, [r2, #0]
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop
    1a9c:	40021018 	.word	0x40021018
    1aa0:	40021000 	.word	0x40021000

00001aa4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    1aa4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    1aa6:	2400      	movs	r4, #0
    1aa8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    1aaa:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    1aac:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    1aae:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    1ab0:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    1ab2:	6141      	str	r1, [r0, #20]
}
    1ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop

00001abc <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    1abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1abe:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1ac0:	6907      	ldr	r7, [r0, #16]
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    1ac2:	460e      	mov	r6, r1
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1ac4:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    1ac8:	f7ff fdfc 	bl	16c4 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    1acc:	68a5      	ldr	r5, [r4, #8]
    1ace:	68e3      	ldr	r3, [r4, #12]
    1ad0:	1b59      	subs	r1, r3, r5
    1ad2:	428f      	cmp	r7, r1
    1ad4:	d87a      	bhi.n	1bcc <am_hal_queue_item_add+0x110>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1ad6:	2f00      	cmp	r7, #0
    1ad8:	d071      	beq.n	1bbe <am_hal_queue_item_add+0x102>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1ada:	4635      	mov	r5, r6
    1adc:	6823      	ldr	r3, [r4, #0]
    1ade:	6962      	ldr	r2, [r4, #20]
    1ae0:	f815 1b01 	ldrb.w	r1, [r5], #1
    1ae4:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1ae6:	6822      	ldr	r2, [r4, #0]
    1ae8:	68e3      	ldr	r3, [r4, #12]
    1aea:	3201      	adds	r2, #1
    1aec:	19f1      	adds	r1, r6, r7
    1aee:	fbb2 fcf3 	udiv	ip, r2, r3
    1af2:	1e7e      	subs	r6, r7, #1
    1af4:	fb03 231c 	mls	r3, r3, ip, r2
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1af8:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1afa:	6023      	str	r3, [r4, #0]
    1afc:	f006 0203 	and.w	r2, r6, #3
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1b00:	d05c      	beq.n	1bbc <am_hal_queue_item_add+0x100>
    1b02:	b34a      	cbz	r2, 1b58 <am_hal_queue_item_add+0x9c>
    1b04:	2a01      	cmp	r2, #1
    1b06:	d019      	beq.n	1b3c <am_hal_queue_item_add+0x80>
    1b08:	2a02      	cmp	r2, #2
    1b0a:	d00b      	beq.n	1b24 <am_hal_queue_item_add+0x68>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b0c:	6962      	ldr	r2, [r4, #20]
    1b0e:	f815 6b01 	ldrb.w	r6, [r5], #1
    1b12:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b14:	6822      	ldr	r2, [r4, #0]
    1b16:	68e3      	ldr	r3, [r4, #12]
    1b18:	3201      	adds	r2, #1
    1b1a:	fbb2 fef3 	udiv	lr, r2, r3
    1b1e:	fb03 231e 	mls	r3, r3, lr, r2
    1b22:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b24:	6962      	ldr	r2, [r4, #20]
    1b26:	f815 6b01 	ldrb.w	r6, [r5], #1
    1b2a:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b2c:	6822      	ldr	r2, [r4, #0]
    1b2e:	68e3      	ldr	r3, [r4, #12]
    1b30:	3201      	adds	r2, #1
    1b32:	fbb2 fcf3 	udiv	ip, r2, r3
    1b36:	fb03 231c 	mls	r3, r3, ip, r2
    1b3a:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b3c:	6962      	ldr	r2, [r4, #20]
    1b3e:	f815 6b01 	ldrb.w	r6, [r5], #1
    1b42:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b44:	6822      	ldr	r2, [r4, #0]
    1b46:	68e3      	ldr	r3, [r4, #12]
    1b48:	3201      	adds	r2, #1
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1b4a:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b4c:	fbb2 fef3 	udiv	lr, r2, r3
    1b50:	fb03 231e 	mls	r3, r3, lr, r2
    1b54:	6023      	str	r3, [r4, #0]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1b56:	d031      	beq.n	1bbc <am_hal_queue_item_add+0x100>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b58:	46ac      	mov	ip, r5
    1b5a:	6962      	ldr	r2, [r4, #20]
    1b5c:	f81c 6b01 	ldrb.w	r6, [ip], #1
    1b60:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b62:	6823      	ldr	r3, [r4, #0]
    1b64:	68e2      	ldr	r2, [r4, #12]
    1b66:	3301      	adds	r3, #1
    1b68:	fbb3 fef2 	udiv	lr, r3, r2
    1b6c:	fb02 331e 	mls	r3, r2, lr, r3
    1b70:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b72:	6962      	ldr	r2, [r4, #20]
    1b74:	786e      	ldrb	r6, [r5, #1]
    1b76:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b78:	6823      	ldr	r3, [r4, #0]
    1b7a:	68e6      	ldr	r6, [r4, #12]
    1b7c:	3301      	adds	r3, #1
    1b7e:	fbb3 fef6 	udiv	lr, r3, r6
    1b82:	fb06 331e 	mls	r3, r6, lr, r3
    1b86:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1b88:	6966      	ldr	r6, [r4, #20]
    1b8a:	f89c 2001 	ldrb.w	r2, [ip, #1]
    1b8e:	54f2      	strb	r2, [r6, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1b90:	6823      	ldr	r3, [r4, #0]
    1b92:	68e2      	ldr	r2, [r4, #12]
    1b94:	3301      	adds	r3, #1
    1b96:	fbb3 fcf2 	udiv	ip, r3, r2
    1b9a:	fb02 331c 	mls	r3, r2, ip, r3
    1b9e:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    1ba0:	6962      	ldr	r2, [r4, #20]
    1ba2:	78ee      	ldrb	r6, [r5, #3]
    1ba4:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1ba6:	6826      	ldr	r6, [r4, #0]
    1ba8:	68e3      	ldr	r3, [r4, #12]
    1baa:	3601      	adds	r6, #1
    1bac:	3504      	adds	r5, #4
    1bae:	fbb6 fef3 	udiv	lr, r6, r3
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1bb2:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    1bb4:	fb03 631e 	mls	r3, r3, lr, r6
    1bb8:	6023      	str	r3, [r4, #0]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1bba:	d1cd      	bne.n	1b58 <am_hal_queue_item_add+0x9c>
    1bbc:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    1bbe:	443d      	add	r5, r7
    1bc0:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    1bc2:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    1bc4:	f7ff fd82 	bl	16cc <am_hal_interrupt_master_set>

    return bSuccess;
}
    1bc8:	4620      	mov	r0, r4
    1bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        //
        // The buffer can't fit the amount of data requested. Return a
        // failure.
        //
        bSuccess = false;
    1bcc:	2400      	movs	r4, #0
    }

    am_hal_interrupt_master_set(ui32Primask);
    1bce:	f7ff fd7d 	bl	16cc <am_hal_interrupt_master_set>

    return bSuccess;
}
    1bd2:	4620      	mov	r0, r4
    1bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bd6:	bf00      	nop

00001bd8 <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bda:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1bdc:	6907      	ldr	r7, [r0, #16]
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    1bde:	460d      	mov	r5, r1
    uint32_t i;
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1be0:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Dest = (uint8_t *) pvDest;

    ui32Primask = am_hal_interrupt_master_disable();
    1be4:	f7ff fd6e 	bl	16c4 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    1be8:	68a6      	ldr	r6, [r4, #8]
    1bea:	42b7      	cmp	r7, r6
    1bec:	d87d      	bhi.n	1cea <am_hal_queue_item_get+0x112>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1bee:	2f00      	cmp	r7, #0
    1bf0:	d074      	beq.n	1cdc <am_hal_queue_item_get+0x104>
    1bf2:	6863      	ldr	r3, [r4, #4]
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1bf4:	6962      	ldr	r2, [r4, #20]
    1bf6:	462e      	mov	r6, r5
    1bf8:	5cd1      	ldrb	r1, [r2, r3]
    1bfa:	f806 1b01 	strb.w	r1, [r6], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1bfe:	6863      	ldr	r3, [r4, #4]
    1c00:	68e2      	ldr	r2, [r4, #12]
    1c02:	3301      	adds	r3, #1
    1c04:	19e9      	adds	r1, r5, r7
    1c06:	fbb3 fcf2 	udiv	ip, r3, r2
    1c0a:	1e7d      	subs	r5, r7, #1
    1c0c:	fb02 331c 	mls	r3, r2, ip, r3
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1c10:	42b1      	cmp	r1, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c12:	6063      	str	r3, [r4, #4]
    1c14:	f005 0203 	and.w	r2, r5, #3
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1c18:	d05f      	beq.n	1cda <am_hal_queue_item_get+0x102>
    1c1a:	b362      	cbz	r2, 1c76 <am_hal_queue_item_get+0x9e>
    1c1c:	2a01      	cmp	r2, #1
    1c1e:	d01b      	beq.n	1c58 <am_hal_queue_item_get+0x80>
    1c20:	2a02      	cmp	r2, #2
    1c22:	d00c      	beq.n	1c3e <am_hal_queue_item_get+0x66>
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c24:	6965      	ldr	r5, [r4, #20]
    1c26:	f815 e003 	ldrb.w	lr, [r5, r3]
    1c2a:	f806 eb01 	strb.w	lr, [r6], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c2e:	6863      	ldr	r3, [r4, #4]
    1c30:	68e2      	ldr	r2, [r4, #12]
    1c32:	3301      	adds	r3, #1
    1c34:	fbb3 fcf2 	udiv	ip, r3, r2
    1c38:	fb02 331c 	mls	r3, r2, ip, r3
    1c3c:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c3e:	6965      	ldr	r5, [r4, #20]
    1c40:	f815 e003 	ldrb.w	lr, [r5, r3]
    1c44:	f806 eb01 	strb.w	lr, [r6], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c48:	6863      	ldr	r3, [r4, #4]
    1c4a:	68e2      	ldr	r2, [r4, #12]
    1c4c:	3301      	adds	r3, #1
    1c4e:	fbb3 fcf2 	udiv	ip, r3, r2
    1c52:	fb02 331c 	mls	r3, r2, ip, r3
    1c56:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c58:	6965      	ldr	r5, [r4, #20]
    1c5a:	f815 e003 	ldrb.w	lr, [r5, r3]
    1c5e:	f806 eb01 	strb.w	lr, [r6], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c62:	6863      	ldr	r3, [r4, #4]
    1c64:	68e2      	ldr	r2, [r4, #12]
    1c66:	3301      	adds	r3, #1
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1c68:	42b1      	cmp	r1, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c6a:	fbb3 fcf2 	udiv	ip, r3, r2
    1c6e:	fb02 331c 	mls	r3, r2, ip, r3
    1c72:	6063      	str	r3, [r4, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1c74:	d031      	beq.n	1cda <am_hal_queue_item_get+0x102>
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c76:	6965      	ldr	r5, [r4, #20]
    1c78:	46b6      	mov	lr, r6
    1c7a:	5cea      	ldrb	r2, [r5, r3]
    1c7c:	f80e 2b01 	strb.w	r2, [lr], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c80:	6863      	ldr	r3, [r4, #4]
    1c82:	68e2      	ldr	r2, [r4, #12]
    1c84:	3301      	adds	r3, #1
    1c86:	fbb3 fcf2 	udiv	ip, r3, r2
    1c8a:	fb02 351c 	mls	r5, r2, ip, r3
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c8e:	6963      	ldr	r3, [r4, #20]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c90:	6065      	str	r5, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c92:	5d5a      	ldrb	r2, [r3, r5]
    1c94:	7072      	strb	r2, [r6, #1]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c96:	6863      	ldr	r3, [r4, #4]
    1c98:	68e5      	ldr	r5, [r4, #12]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1c9a:	6962      	ldr	r2, [r4, #20]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1c9c:	3301      	adds	r3, #1
    1c9e:	fbb3 fcf5 	udiv	ip, r3, r5
    1ca2:	fb05 331c 	mls	r3, r5, ip, r3
    1ca6:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1ca8:	5cd5      	ldrb	r5, [r2, r3]
    1caa:	f88e 5001 	strb.w	r5, [lr, #1]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1cae:	6863      	ldr	r3, [r4, #4]
    1cb0:	68e5      	ldr	r5, [r4, #12]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1cb2:	6962      	ldr	r2, [r4, #20]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1cb4:	3301      	adds	r3, #1
    1cb6:	fbb3 fef5 	udiv	lr, r3, r5
    1cba:	fb05 331e 	mls	r3, r5, lr, r3
    1cbe:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    1cc0:	5cd5      	ldrb	r5, [r2, r3]
    1cc2:	70f5      	strb	r5, [r6, #3]

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1cc4:	6863      	ldr	r3, [r4, #4]
    1cc6:	68e2      	ldr	r2, [r4, #12]
    1cc8:	3301      	adds	r3, #1
    1cca:	3604      	adds	r6, #4
    1ccc:	fbb3 fcf2 	udiv	ip, r3, r2
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1cd0:	42b1      	cmp	r1, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    1cd2:	fb02 331c 	mls	r3, r2, ip, r3
    1cd6:	6063      	str	r3, [r4, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1cd8:	d1cd      	bne.n	1c76 <am_hal_queue_item_get+0x9e>
    1cda:	68a6      	ldr	r6, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    1cdc:	1bf7      	subs	r7, r6, r7
    1cde:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    1ce0:	2601      	movs	r6, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    1ce2:	f7ff fcf3 	bl	16cc <am_hal_interrupt_master_set>

    return bSuccess;
}
    1ce6:	4630      	mov	r0, r6
    1ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
    {
        //
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    1cea:	2600      	movs	r6, #0
    }

    am_hal_interrupt_master_set(ui32Primask);
    1cec:	f7ff fcee 	bl	16cc <am_hal_interrupt_master_set>

    return bSuccess;
}
    1cf0:	4630      	mov	r0, r6
    1cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001cf4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1cf4:	4a05      	ldr	r2, [pc, #20]	; (1d0c <am_hal_rtc_osc_select+0x18>)
    1cf6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1cf8:	b918      	cbnz	r0, 1d02 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1cfa:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1cfe:	6010      	str	r0, [r2, #0]
    1d00:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1d02:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1d06:	6011      	str	r1, [r2, #0]
    1d08:	4770      	bx	lr
    1d0a:	bf00      	nop
    1d0c:	4000400c 	.word	0x4000400c

00001d10 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1d10:	4a02      	ldr	r2, [pc, #8]	; (1d1c <am_hal_rtc_osc_disable+0xc>)
    1d12:	6813      	ldr	r3, [r2, #0]
    1d14:	f043 0010 	orr.w	r0, r3, #16
    1d18:	6010      	str	r0, [r2, #0]
    1d1a:	4770      	bx	lr
    1d1c:	40004050 	.word	0x40004050

00001d20 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1d20:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1d22:	4a22      	ldr	r2, [pc, #136]	; (1dac <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1d24:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1d26:	2100      	movs	r1, #0
    1d28:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1d2a:	b333      	cbz	r3, 1d7a <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1d2c:	4d20      	ldr	r5, [pc, #128]	; (1db0 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1d2e:	4921      	ldr	r1, [pc, #132]	; (1db4 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1d30:	4a21      	ldr	r2, [pc, #132]	; (1db8 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1d32:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1d34:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1d38:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1d3a:	458c      	cmp	ip, r1
    1d3c:	bf94      	ite	ls
    1d3e:	461d      	movls	r5, r3
    1d40:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1d42:	f7ff fc4f 	bl	15e4 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1d46:	1c43      	adds	r3, r0, #1
    1d48:	d02e      	beq.n	1da8 <am_hal_tpiu_enable+0x88>
    1d4a:	08c3      	lsrs	r3, r0, #3
    1d4c:	fbb3 fef5 	udiv	lr, r3, r5
    1d50:	f10e 31ff 	add.w	r1, lr, #4294967295
    1d54:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1d56:	4a19      	ldr	r2, [pc, #100]	; (1dbc <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1d58:	4c19      	ldr	r4, [pc, #100]	; (1dc0 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1d5a:	4b1a      	ldr	r3, [pc, #104]	; (1dc4 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1d5c:	491a      	ldr	r1, [pc, #104]	; (1dc8 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1d5e:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1d60:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1d62:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1d64:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1d68:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1d6a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1d6c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1d6e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1d76:	f7ff bc73 	b.w	1660 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1d7a:	4c10      	ldr	r4, [pc, #64]	; (1dbc <am_hal_tpiu_enable+0x9c>)
    1d7c:	6905      	ldr	r5, [r0, #16]
    1d7e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1d80:	6882      	ldr	r2, [r0, #8]
    1d82:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1d86:	68c3      	ldr	r3, [r0, #12]
    1d88:	4c09      	ldr	r4, [pc, #36]	; (1db0 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1d8a:	490e      	ldr	r1, [pc, #56]	; (1dc4 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1d8c:	1e5d      	subs	r5, r3, #1
    1d8e:	2201      	movs	r2, #1
    1d90:	40aa      	lsls	r2, r5
    1d92:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1d94:	680b      	ldr	r3, [r1, #0]
    1d96:	6840      	ldr	r0, [r0, #4]
    1d98:	4318      	orrs	r0, r3
    1d9a:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1da0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1da4:	f7ff bc5c 	b.w	1660 <am_hal_flash_delay>
    1da8:	2005      	movs	r0, #5
    1daa:	e7d4      	b.n	1d56 <am_hal_tpiu_enable+0x36>
    1dac:	e0040304 	.word	0xe0040304
    1db0:	e0040004 	.word	0xe0040004
    1db4:	001da380 	.word	0x001da380
    1db8:	000f4240 	.word	0x000f4240
    1dbc:	e0040010 	.word	0xe0040010
    1dc0:	e00400f0 	.word	0xe00400f0
    1dc4:	40020250 	.word	0x40020250
    1dc8:	e0040f00 	.word	0xe0040f00

00001dcc <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1dce:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1dd0:	460f      	mov	r7, r1
    1dd2:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1dd4:	f7ff fc06 	bl	15e4 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1dd8:	0169      	lsls	r1, r5, #5
    1dda:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1ddc:	fbb0 f4f1 	udiv	r4, r0, r1
    1de0:	fbb2 f0f1 	udiv	r0, r2, r1
    1de4:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1de8:	b924      	cbnz	r4, 1df4 <am_hal_uart_config+0x28>
    1dea:	4a11      	ldr	r2, [pc, #68]	; (1e30 <am_hal_uart_config+0x64>)
    1dec:	4811      	ldr	r0, [pc, #68]	; (1e34 <am_hal_uart_config+0x68>)
    1dee:	2161      	movs	r1, #97	; 0x61
    1df0:	f7ff fc34 	bl	165c <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1df4:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    1df8:	331c      	adds	r3, #28
    1dfa:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1dfc:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1dfe:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1e00:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1e02:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    1e04:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1e06:	68fa      	ldr	r2, [r7, #12]
    1e08:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1e0a:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1e0c:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1e0e:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1e12:	bf14      	ite	ne
    1e14:	2208      	movne	r2, #8
    1e16:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1e18:	4302      	orrs	r2, r0
    1e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1e1c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    1e1e:	693f      	ldr	r7, [r7, #16]
    1e20:	432f      	orrs	r7, r5
    1e22:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1e24:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1e26:	f046 0110 	orr.w	r1, r6, #16
    1e2a:	6319      	str	r1, [r3, #48]	; 0x30
    1e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e2e:	bf00      	nop
    1e30:	00002494 	.word	0x00002494
    1e34:	000024c8 	.word	0x000024c8

00001e38 <am_hal_uart_int_status_get>:
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    1e38:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e3c:	301c      	adds	r0, #28
    1e3e:	0302      	lsls	r2, r0, #12
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if (bEnabledOnly)
    1e40:	b909      	cbnz	r1, 1e46 <am_hal_uart_int_status_get+0xe>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, IES);
    1e42:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    }
}
    1e44:	4770      	bx	lr
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    1e46:	6c10      	ldr	r0, [r2, #64]	; 0x40
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    1e4c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e50:	301c      	adds	r0, #28
    1e52:	0302      	lsls	r2, r0, #12
    1e54:	6451      	str	r1, [r2, #68]	; 0x44
    1e56:	4770      	bx	lr

00001e58 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, ui32Module, IER) |= ui32Interrupt;
    1e58:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e5c:	301c      	adds	r0, #28
    1e5e:	0302      	lsls	r2, r0, #12
    1e60:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1e62:	4319      	orrs	r1, r3
    1e64:	6391      	str	r1, [r2, #56]	; 0x38
    1e66:	4770      	bx	lr

00001e68 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1e68:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1e6a:	f3ef 8310 	mrs	r3, PRIMASK
    1e6e:	9301      	str	r3, [sp, #4]
    1e70:	b672      	cpsid	i
    1e72:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e76:	301c      	adds	r0, #28
    1e78:	0301      	lsls	r1, r0, #12
    1e7a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1e7c:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    1e80:	f04c 0301 	orr.w	r3, ip, #1
    1e84:	630b      	str	r3, [r1, #48]	; 0x30
    1e86:	9801      	ldr	r0, [sp, #4]
    1e88:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e8c:	b002      	add	sp, #8
    1e8e:	4770      	bx	lr

00001e90 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1e90:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1e92:	f3ef 8310 	mrs	r3, PRIMASK
    1e96:	9301      	str	r3, [sp, #4]
    1e98:	b672      	cpsid	i
    1e9a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e9e:	301c      	adds	r0, #28
    1ea0:	0301      	lsls	r1, r0, #12
    1ea2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1ea4:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    1ea8:	f02c 0301 	bic.w	r3, ip, #1
    1eac:	630b      	str	r3, [r1, #48]	; 0x30
    1eae:	9801      	ldr	r0, [sp, #4]
    1eb0:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1eb4:	b002      	add	sp, #8
    1eb6:	4770      	bx	lr

00001eb8 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1eb8:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    1eba:	b510      	push	{r4, lr}
    1ebc:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1ebe:	d905      	bls.n	1ecc <am_hal_uart_pwrctrl_enable+0x14>
    1ec0:	4a05      	ldr	r2, [pc, #20]	; (1ed8 <am_hal_uart_pwrctrl_enable+0x20>)
    1ec2:	4806      	ldr	r0, [pc, #24]	; (1edc <am_hal_uart_pwrctrl_enable+0x24>)
    1ec4:	f240 11a3 	movw	r1, #419	; 0x1a3
    1ec8:	f7ff fbc8 	bl	165c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ecc:	2080      	movs	r0, #128	; 0x80
    1ece:	40a0      	lsls	r0, r4
}
    1ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ed4:	f7ff bc66 	b.w	17a4 <am_hal_pwrctrl_periph_enable>
    1ed8:	000024dc 	.word	0x000024dc
    1edc:	000024c8 	.word	0x000024c8

00001ee0 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1ee0:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1ee2:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1ee4:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1ee6:	f7ff fb97 	bl	1618 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1eea:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1eee:	301c      	adds	r0, #28
    1ef0:	0301      	lsls	r1, r0, #12
    1ef2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1ef4:	f043 0208 	orr.w	r2, r3, #8
    1ef8:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1efa:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1efc:	f044 0010 	orr.w	r0, r4, #16
    1f00:	6308      	str	r0, [r1, #48]	; 0x30
    1f02:	bd10      	pop	{r4, pc}

00001f04 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1f04:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1f08:	301c      	adds	r0, #28
    1f0a:	0302      	lsls	r2, r0, #12
    1f0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1f0e:	f043 0010 	orr.w	r0, r3, #16
    1f12:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1f14:	6351      	str	r1, [r2, #52]	; 0x34
    1f16:	4770      	bx	lr

00001f18 <am_hal_uart_flags_get>:
am_hal_uart_flags_get(uint32_t ui32Module)
{
    //
    // Read and return the Flags.
    //
    return AM_REGn(UART, ui32Module, FR);
    1f18:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1f1c:	301c      	adds	r0, #28
    1f1e:	0301      	lsls	r1, r0, #12
    1f20:	6988      	ldr	r0, [r1, #24]
}
    1f22:	4770      	bx	lr

00001f24 <am_hal_uart_init_buffered>:
//*****************************************************************************
void
am_hal_uart_init_buffered(uint32_t ui32Module,
                          uint8_t *pui8RxArray, uint32_t ui32RxSize,
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    1f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    //
    // Enable the UART RX timeout interrupt.
    //
    AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M |
    1f28:	f500 2480 	add.w	r4, r0, #262144	; 0x40000
    1f2c:	341c      	adds	r4, #28
    1f2e:	0324      	lsls	r4, r4, #12
                                       AM_REG_UART_IES_TXRIS_M);

    //
    // Initialize the ring buffers.
    //
    am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    1f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    //
    // Enable the UART RX timeout interrupt.
    //
    AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M |
    1f34:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                                       AM_REG_UART_IES_TXRIS_M);

    //
    // Initialize the ring buffers.
    //
    am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    1f36:	4e0b      	ldr	r6, [pc, #44]	; (1f64 <am_hal_uart_init_buffered+0x40>)
    1f38:	00c5      	lsls	r5, r0, #3
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    //
    // Enable the UART RX timeout interrupt.
    //
    AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M |
    1f3a:	f047 0060 	orr.w	r0, r7, #96	; 0x60
//*****************************************************************************
void
am_hal_uart_init_buffered(uint32_t ui32Module,
                          uint8_t *pui8RxArray, uint32_t ui32RxSize,
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    1f3e:	4688      	mov	r8, r1
    1f40:	4691      	mov	r9, r2
                                       AM_REG_UART_IES_TXRIS_M);

    //
    // Initialize the ring buffers.
    //
    am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    1f42:	4619      	mov	r1, r3
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    //
    // Enable the UART RX timeout interrupt.
    //
    AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M |
    1f44:	63a0      	str	r0, [r4, #56]	; 0x38
                                       AM_REG_UART_IES_TXRIS_M);

    //
    // Initialize the ring buffers.
    //
    am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    1f46:	9b08      	ldr	r3, [sp, #32]
    1f48:	1970      	adds	r0, r6, r5
    1f4a:	2201      	movs	r2, #1
    1f4c:	f7ff fdaa 	bl	1aa4 <am_hal_queue_init>
    am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    1f50:	4805      	ldr	r0, [pc, #20]	; (1f68 <am_hal_uart_init_buffered+0x44>)
    1f52:	464b      	mov	r3, r9
    1f54:	4641      	mov	r1, r8
    1f56:	4428      	add	r0, r5
    1f58:	2201      	movs	r2, #1
}
    1f5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    //
    // Initialize the ring buffers.
    //
    am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    1f5e:	f7ff bda1 	b.w	1aa4 <am_hal_queue_init>
    1f62:	bf00      	nop
    1f64:	100013ec 	.word	0x100013ec
    1f68:	100013bc 	.word	0x100013bc

00001f6c <am_hal_uart_get_status_buffered>:
//*****************************************************************************
void
am_hal_uart_get_status_buffered(uint32_t ui32Module,
                                uint32_t *pui32RxSize,
                                uint32_t *pui32TxSize)
{
    1f6c:	b410      	push	{r4}
    //
    // Return the current size of ring buffers.
    //
    if ( pui32RxSize )
    1f6e:	b139      	cbz	r1, 1f80 <am_hal_uart_get_status_buffered+0x14>
    {
        *pui32RxSize = am_hal_queue_data_left(&g_psRxQueue[ui32Module]);
    1f70:	4b09      	ldr	r3, [pc, #36]	; (1f98 <am_hal_uart_get_status_buffered+0x2c>)
    1f72:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    1f76:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
    1f7a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    1f7e:	600b      	str	r3, [r1, #0]
    }

    if ( pui32TxSize )
    1f80:	b132      	cbz	r2, 1f90 <am_hal_uart_get_status_buffered+0x24>
    {
        *pui32TxSize = am_hal_queue_data_left(&g_psTxQueue[ui32Module]);
    1f82:	4906      	ldr	r1, [pc, #24]	; (1f9c <am_hal_uart_get_status_buffered+0x30>)
    1f84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f88:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
    1f8c:	68a3      	ldr	r3, [r4, #8]
    1f8e:	6013      	str	r3, [r2, #0]
    }
}
    1f90:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop
    1f98:	100013bc 	.word	0x100013bc
    1f9c:	100013ec 	.word	0x100013ec

00001fa0 <am_hal_uart_service_buffered_timeout_save>:
//! @return None
//
//*****************************************************************************
void
am_hal_uart_service_buffered_timeout_save(uint32_t ui32Module, uint32_t ui32Status)
{
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa4:	b083      	sub	sp, #12
    uint8_t ui8Character = '\x00';
    1fa6:	2300      	movs	r3, #0

    //
    // Check to see if we have filled the Rx FIFO past the configured limit, or
    // if we have an 'old' character or two sitting in the FIFO.
    //
    if (ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M))
    1fa8:	f011 0f50 	tst.w	r1, #80	; 0x50
//! @return None
//
//*****************************************************************************
void
am_hal_uart_service_buffered_timeout_save(uint32_t ui32Module, uint32_t ui32Status)
{
    1fac:	468a      	mov	sl, r1
    1fae:	4604      	mov	r4, r0
    uint8_t ui8Character = '\x00';
    1fb0:	f88d 3007 	strb.w	r3, [sp, #7]

    //
    // Check to see if we have filled the Rx FIFO past the configured limit, or
    // if we have an 'old' character or two sitting in the FIFO.
    //
    if (ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M))
    1fb4:	d06e      	beq.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
    {
        //
        // Check to see what our FIFO configuration setting is.
        //
        uint32_t ui32FifoThreshold;
        uint32_t ui32FifoCfg = AM_BFMn(UART, ui32Module, IFLS, RXIFLSEL);
    1fb6:	f500 2580 	add.w	r5, r0, #262144	; 0x40000
    1fba:	351c      	adds	r5, #28
    1fbc:	032d      	lsls	r5, r5, #12
    1fbe:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1fc0:	f000 0138 	and.w	r1, r0, #56	; 0x38
    1fc4:	2920      	cmp	r1, #32
    1fc6:	f200 808e 	bhi.w	20e6 <am_hal_uart_service_buffered_timeout_save+0x146>
    1fca:	4a6c      	ldr	r2, [pc, #432]	; (217c <am_hal_uart_service_buffered_timeout_save+0x1dc>)
    1fcc:	f812 b001 	ldrb.w	fp, [r2, r1]
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    1fd0:	4e6b      	ldr	r6, [pc, #428]	; (2180 <am_hal_uart_service_buffered_timeout_save+0x1e0>)
    1fd2:	462f      	mov	r7, r5
    1fd4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    1fd8:	f857 3f18 	ldr.w	r3, [r7, #24]!
    1fdc:	f1ab 0102 	sub.w	r1, fp, #2
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    1fe0:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    1fe4:	06de      	lsls	r6, r3, #27
    1fe6:	f001 0803 	and.w	r8, r1, #3
    1fea:	d453      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    1fec:	682e      	ldr	r6, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    1fee:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    1ff2:	f000 809f 	beq.w	2134 <am_hal_uart_service_buffered_timeout_save+0x194>
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    1ff6:	2601      	movs	r6, #1
    1ff8:	f10b 32ff 	add.w	r2, fp, #4294967295
    1ffc:	4296      	cmp	r6, r2
    1ffe:	d249      	bcs.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
    2000:	f1b8 0f00 	cmp.w	r8, #0
    2004:	d023      	beq.n	204e <am_hal_uart_service_buffered_timeout_save+0xae>
    2006:	45b0      	cmp	r8, r6
    2008:	d014      	beq.n	2034 <am_hal_uart_service_buffered_timeout_save+0x94>
    200a:	f1b8 0f02 	cmp.w	r8, #2
    200e:	d008      	beq.n	2022 <am_hal_uart_service_buffered_timeout_save+0x82>
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    2010:	683b      	ldr	r3, [r7, #0]
    2012:	06db      	lsls	r3, r3, #27
    2014:	d43e      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2016:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    2018:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    201c:	f000 8093 	beq.w	2146 <am_hal_uart_service_buffered_timeout_save+0x1a6>
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    2020:	3601      	adds	r6, #1
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    2022:	6838      	ldr	r0, [r7, #0]
    2024:	06c0      	lsls	r0, r0, #27
    2026:	d435      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2028:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    202a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    202e:	f000 8093 	beq.w	2158 <am_hal_uart_service_buffered_timeout_save+0x1b8>
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    2032:	3601      	adds	r6, #1
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    2034:	6839      	ldr	r1, [r7, #0]
    2036:	06c9      	lsls	r1, r1, #27
    2038:	d42c      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    203a:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    203c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    2040:	f000 8093 	beq.w	216a <am_hal_uart_service_buffered_timeout_save+0x1ca>
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    2044:	3601      	adds	r6, #1
    2046:	f10b 32ff 	add.w	r2, fp, #4294967295
    204a:	4296      	cmp	r6, r2
    204c:	d222      	bcs.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    204e:	6838      	ldr	r0, [r7, #0]
    2050:	06c0      	lsls	r0, r0, #27
    2052:	d41f      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2054:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    2056:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    205a:	d047      	beq.n	20ec <am_hal_uart_service_buffered_timeout_save+0x14c>
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    205c:	6839      	ldr	r1, [r7, #0]
    205e:	06cb      	lsls	r3, r1, #27
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    2060:	f106 0601 	add.w	r6, r6, #1
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    2064:	d416      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2066:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    2068:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    206c:	d047      	beq.n	20fe <am_hal_uart_service_buffered_timeout_save+0x15e>
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    206e:	683a      	ldr	r2, [r7, #0]
    2070:	06d2      	lsls	r2, r2, #27
    2072:	d40f      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2074:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    2076:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    207a:	d049      	beq.n	2110 <am_hal_uart_service_buffered_timeout_save+0x170>
        }

        //
        // While there's stuff in the RX fifo....
        //
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    207c:	6838      	ldr	r0, [r7, #0]
    207e:	06c3      	lsls	r3, r0, #27
    2080:	d408      	bmi.n	2094 <am_hal_uart_service_buffered_timeout_save+0xf4>
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    2082:	682b      	ldr	r3, [r5, #0]

            //
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
    2084:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    2088:	d04b      	beq.n	2122 <am_hal_uart_service_buffered_timeout_save+0x182>
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    208a:	3603      	adds	r6, #3
    208c:	f10b 31ff 	add.w	r1, fp, #4294967295
    2090:	428e      	cmp	r6, r1
    2092:	d3dc      	bcc.n	204e <am_hal_uart_service_buffered_timeout_save+0xae>

    //
    // Check to see if our TX buffer has been recently emptied. If so, we
    // should refill it from the TX ring buffer.
    //
    if (ui32Status & AM_REG_UART_IES_TXRIS_M)
    2094:	f01a 0f20 	tst.w	sl, #32
    2098:	d022      	beq.n	20e0 <am_hal_uart_service_buffered_timeout_save+0x140>
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    209a:	4f3a      	ldr	r7, [pc, #232]	; (2184 <am_hal_uart_service_buffered_timeout_save+0x1e4>)
    209c:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    20a0:	eb07 05cc 	add.w	r5, r7, ip, lsl #3
    20a4:	68ae      	ldr	r6, [r5, #8]
    20a6:	b1de      	cbz	r6, 20e0 <am_hal_uart_service_buffered_timeout_save+0x140>
               !AM_BFRn(UART, ui32Module, FR, TXFF))
    20a8:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    20ac:	341c      	adds	r4, #28
    20ae:	0324      	lsls	r4, r4, #12
    20b0:	f104 0b18 	add.w	fp, r4, #24
    20b4:	69a2      	ldr	r2, [r4, #24]
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    20b6:	0691      	lsls	r1, r2, #26
    20b8:	d412      	bmi.n	20e0 <am_hal_uart_service_buffered_timeout_save+0x140>
    20ba:	46a9      	mov	r9, r5
    20bc:	e003      	b.n	20c6 <am_hal_uart_service_buffered_timeout_save+0x126>
               !AM_BFRn(UART, ui32Module, FR, TXFF))
    20be:	f8db 1000 	ldr.w	r1, [fp]
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    20c2:	068a      	lsls	r2, r1, #26
    20c4:	d40c      	bmi.n	20e0 <am_hal_uart_service_buffered_timeout_save+0x140>
               !AM_BFRn(UART, ui32Module, FR, TXFF))
        {
            am_hal_queue_item_get(&g_psTxQueue[ui32Module], &ui8Character, 1);
    20c6:	2201      	movs	r2, #1
    20c8:	f10d 0107 	add.w	r1, sp, #7
    20cc:	4628      	mov	r0, r5
    20ce:	f7ff fd83 	bl	1bd8 <am_hal_queue_item_get>
            AM_REGn(UART, ui32Module , DR) = ui8Character;
    20d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    20d6:	6020      	str	r0, [r4, #0]
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    20d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    20dc:	2b00      	cmp	r3, #0
    20de:	d1ee      	bne.n	20be <am_hal_uart_service_buffered_timeout_save+0x11e>
        {
            am_hal_queue_item_get(&g_psTxQueue[ui32Module], &ui8Character, 1);
            AM_REGn(UART, ui32Module , DR) = ui8Character;
        }
    }
}
    20e0:	b003      	add	sp, #12
    20e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        //
        // Check to see what our FIFO configuration setting is.
        //
        uint32_t ui32FifoThreshold;
        uint32_t ui32FifoCfg = AM_BFMn(UART, ui32Module, IFLS, RXIFLSEL);
    20e6:	f04f 0b20 	mov.w	fp, #32
    20ea:	e771      	b.n	1fd0 <am_hal_uart_service_buffered_timeout_save+0x30>
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    20ec:	2201      	movs	r2, #1
    20ee:	f10d 0107 	add.w	r1, sp, #7
    20f2:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    20f4:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    20f8:	f7ff fce0 	bl	1abc <am_hal_queue_item_add>
    20fc:	e7ae      	b.n	205c <am_hal_uart_service_buffered_timeout_save+0xbc>
    20fe:	2201      	movs	r2, #1
    2100:	f10d 0107 	add.w	r1, sp, #7
    2104:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    2106:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    210a:	f7ff fcd7 	bl	1abc <am_hal_queue_item_add>
    210e:	e7ae      	b.n	206e <am_hal_uart_service_buffered_timeout_save+0xce>
    2110:	2201      	movs	r2, #1
    2112:	f10d 0107 	add.w	r1, sp, #7
    2116:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    2118:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    211c:	f7ff fcce 	bl	1abc <am_hal_queue_item_add>
    2120:	e7ac      	b.n	207c <am_hal_uart_service_buffered_timeout_save+0xdc>
    2122:	2201      	movs	r2, #1
    2124:	f10d 0107 	add.w	r1, sp, #7
    2128:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    212a:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    212e:	f7ff fcc5 	bl	1abc <am_hal_queue_item_add>
    2132:	e7aa      	b.n	208a <am_hal_uart_service_buffered_timeout_save+0xea>
    2134:	2201      	movs	r2, #1
    2136:	f10d 0107 	add.w	r1, sp, #7
    213a:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    213c:	f88d 6007 	strb.w	r6, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    2140:	f7ff fcbc 	bl	1abc <am_hal_queue_item_add>
    2144:	e757      	b.n	1ff6 <am_hal_uart_service_buffered_timeout_save+0x56>
    2146:	4632      	mov	r2, r6
    2148:	f10d 0107 	add.w	r1, sp, #7
    214c:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    214e:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    2152:	f7ff fcb3 	bl	1abc <am_hal_queue_item_add>
    2156:	e763      	b.n	2020 <am_hal_uart_service_buffered_timeout_save+0x80>
    2158:	2201      	movs	r2, #1
    215a:	f10d 0107 	add.w	r1, sp, #7
    215e:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    2160:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    2164:	f7ff fcaa 	bl	1abc <am_hal_queue_item_add>
    2168:	e763      	b.n	2032 <am_hal_uart_service_buffered_timeout_save+0x92>
    216a:	2201      	movs	r2, #1
    216c:	f10d 0107 	add.w	r1, sp, #7
    2170:	4648      	mov	r0, r9
            // As long as no error bits were set, we should push this byte to
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
    2172:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    2176:	f7ff fca1 	bl	1abc <am_hal_queue_item_add>
    217a:	e763      	b.n	2044 <am_hal_uart_service_buffered_timeout_save+0xa4>
    217c:	00002470 	.word	0x00002470
    2180:	100013bc 	.word	0x100013bc
    2184:	100013ec 	.word	0x100013ec

00002188 <am_hal_uart_string_transmit_buffered>:
am_hal_uart_string_transmit_buffered(uint32_t ui32Module, char *pcString)
{
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    2188:	780b      	ldrb	r3, [r1, #0]
    218a:	b31b      	cbz	r3, 21d4 <am_hal_uart_string_transmit_buffered+0x4c>
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_buffered(uint32_t ui32Module, char *pcString)
{
    218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    {
        if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
            !AM_BFRn(UART, ui32Module, FR, TXFF))
    2190:	f500 2780 	add.w	r7, r0, #262144	; 0x40000
    2194:	371c      	adds	r7, #28
    2196:	4a10      	ldr	r2, [pc, #64]	; (21d8 <am_hal_uart_string_transmit_buffered+0x50>)
    2198:	033f      	lsls	r7, r7, #12
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    {
        if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    219a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    219e:	460c      	mov	r4, r1
    21a0:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
            !AM_BFRn(UART, ui32Module, FR, TXFF))
    21a4:	f107 0818 	add.w	r8, r7, #24
    21a8:	e003      	b.n	21b2 <am_hal_uart_string_transmit_buffered+0x2a>
        {
            //
            // If the fifo isn't full yet, and the ring buffer isn't being used,
            // just write the new character directly to the fifo.
            //
            AM_REGn(UART, ui32Module, DR) = *pcString;
    21aa:	603b      	str	r3, [r7, #0]
am_hal_uart_string_transmit_buffered(uint32_t ui32Module, char *pcString)
{
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    21ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    21b0:	b173      	cbz	r3, 21d0 <am_hal_uart_string_transmit_buffered+0x48>
    {
        if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    21b2:	68ae      	ldr	r6, [r5, #8]
            // already in use. In either case, we need to use the ring buffer
            // to make sure that the transmitted data gets sent in the right
            // order. If the buffer is already full, we will simply lose this
            // byte.
            //
            am_hal_queue_item_add(&g_psTxQueue[ui32Module], pcString, 1);
    21b4:	4621      	mov	r1, r4
    21b6:	2201      	movs	r2, #1
    21b8:	4628      	mov	r0, r5
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    {
        if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    21ba:	b91e      	cbnz	r6, 21c4 <am_hal_uart_string_transmit_buffered+0x3c>
            !AM_BFRn(UART, ui32Module, FR, TXFF))
    21bc:	f8d8 6000 	ldr.w	r6, [r8]
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    {
        if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    21c0:	06b6      	lsls	r6, r6, #26
    21c2:	d5f2      	bpl.n	21aa <am_hal_uart_string_transmit_buffered+0x22>
            // already in use. In either case, we need to use the ring buffer
            // to make sure that the transmitted data gets sent in the right
            // order. If the buffer is already full, we will simply lose this
            // byte.
            //
            am_hal_queue_item_add(&g_psTxQueue[ui32Module], pcString, 1);
    21c4:	f7ff fc7a 	bl	1abc <am_hal_queue_item_add>
am_hal_uart_string_transmit_buffered(uint32_t ui32Module, char *pcString)
{
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    while (*pcString)
    21c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    21cc:	2b00      	cmp	r3, #0
    21ce:	d1f0      	bne.n	21b2 <am_hal_uart_string_transmit_buffered+0x2a>
    21d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop
    21d8:	100013ec 	.word	0x100013ec

000021dc <am_hal_uart_char_receive_buffered>:
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    21dc:	4b3b      	ldr	r3, [pc, #236]	; (22cc <am_hal_uart_char_receive_buffered+0xf0>)
    21de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
//*****************************************************************************
uint32_t
am_hal_uart_char_receive_buffered(uint32_t ui32Module,
                                  char *pcString,
                                  uint32_t ui32MaxChars)
{
    21e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    21e6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    21ea:	68a7      	ldr	r7, [r4, #8]
    21ec:	2f00      	cmp	r7, #0
    21ee:	d069      	beq.n	22c4 <am_hal_uart_char_receive_buffered+0xe8>
    21f0:	2a00      	cmp	r2, #0
    21f2:	d069      	beq.n	22c8 <am_hal_uart_char_receive_buffered+0xec>
    21f4:	46a2      	mov	sl, r4
    21f6:	1e56      	subs	r6, r2, #1
    21f8:	4617      	mov	r7, r2
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    21fa:	4620      	mov	r0, r4
    21fc:	2201      	movs	r2, #1
    21fe:	460d      	mov	r5, r1
    2200:	f7ff fcea 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2204:	f85a 1f08 	ldr.w	r1, [sl, #8]!
    2208:	f006 0803 	and.w	r8, r6, #3
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    220c:	f04f 0901 	mov.w	r9, #1
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2210:	4626      	mov	r6, r4
    2212:	2900      	cmp	r1, #0
    2214:	d053      	beq.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    2216:	2f01      	cmp	r7, #1
    2218:	d051      	beq.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    221a:	f1b8 0f00 	cmp.w	r8, #0
    221e:	d026      	beq.n	226e <am_hal_uart_char_receive_buffered+0x92>
    2220:	f1b8 0f01 	cmp.w	r8, #1
    2224:	d017      	beq.n	2256 <am_hal_uart_char_receive_buffered+0x7a>
    2226:	f1b8 0f02 	cmp.w	r8, #2
    222a:	d00a      	beq.n	2242 <am_hal_uart_char_receive_buffered+0x66>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    222c:	464a      	mov	r2, r9
    222e:	1c69      	adds	r1, r5, #1
    2230:	4620      	mov	r0, r4
    2232:	f7ff fcd1 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2236:	f8da 2000 	ldr.w	r2, [sl]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    223a:	f04f 0902 	mov.w	r9, #2
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    223e:	2a00      	cmp	r2, #0
    2240:	d03d      	beq.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    2242:	eb05 0109 	add.w	r1, r5, r9
    2246:	2201      	movs	r2, #1
    2248:	4620      	mov	r0, r4
    224a:	f7ff fcc5 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    224e:	68b3      	ldr	r3, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    2250:	f109 0901 	add.w	r9, r9, #1
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2254:	b39b      	cbz	r3, 22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    2256:	eb05 0109 	add.w	r1, r5, r9
    225a:	2201      	movs	r2, #1
    225c:	4620      	mov	r0, r4
    225e:	f7ff fcbb 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2262:	68b0      	ldr	r0, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    2264:	f109 0901 	add.w	r9, r9, #1
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2268:	b348      	cbz	r0, 22be <am_hal_uart_char_receive_buffered+0xe2>
    226a:	454f      	cmp	r7, r9
    226c:	d027      	beq.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    226e:	eb05 0109 	add.w	r1, r5, r9
    2272:	2201      	movs	r2, #1
    2274:	4620      	mov	r0, r4
    2276:	f7ff fcaf 	bl	1bd8 <am_hal_queue_item_get>
    227a:	2201      	movs	r2, #1
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    227c:	68b3      	ldr	r3, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    227e:	4491      	add	r9, r2
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    2280:	4620      	mov	r0, r4
    2282:	eb05 0109 	add.w	r1, r5, r9
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    2286:	46ca      	mov	sl, r9
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2288:	b1cb      	cbz	r3, 22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    228a:	f7ff fca5 	bl	1bd8 <am_hal_queue_item_get>
    228e:	2201      	movs	r2, #1
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    2290:	68b3      	ldr	r3, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    2292:	4491      	add	r9, r2
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    2294:	4620      	mov	r0, r4
    2296:	eb05 0109 	add.w	r1, r5, r9
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    229a:	b183      	cbz	r3, 22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    229c:	f7ff fc9c 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    22a0:	68b3      	ldr	r3, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    22a2:	f10a 0902 	add.w	r9, sl, #2
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    22a6:	2201      	movs	r2, #1
    22a8:	4620      	mov	r0, r4
    22aa:	eb05 0109 	add.w	r1, r5, r9
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    22ae:	b133      	cbz	r3, 22be <am_hal_uart_char_receive_buffered+0xe2>
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    22b0:	f7ff fc92 	bl	1bd8 <am_hal_queue_item_get>
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    22b4:	68b1      	ldr	r1, [r6, #8]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    22b6:	f10a 0903 	add.w	r9, sl, #3
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    22ba:	2900      	cmp	r1, #0
    22bc:	d1d5      	bne.n	226a <am_hal_uart_char_receive_buffered+0x8e>

    //
    // return the number of chars received.
    //
    return ui32NumChars;
}
    22be:	4648      	mov	r0, r9
    22c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
uint32_t
am_hal_uart_char_receive_buffered(uint32_t ui32Module,
                                  char *pcString,
                                  uint32_t ui32MaxChars)
{
    uint32_t ui32NumChars = 0;
    22c4:	46b9      	mov	r9, r7
    22c6:	e7fa      	b.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    22c8:	4691      	mov	r9, r2
    22ca:	e7f8      	b.n	22be <am_hal_uart_char_receive_buffered+0xe2>
    22cc:	100013bc 	.word	0x100013bc

000022d0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    22d0:	4b01      	ldr	r3, [pc, #4]	; (22d8 <am_hal_vcomp_disable+0x8>)
    22d2:	2237      	movs	r2, #55	; 0x37
    22d4:	601a      	str	r2, [r3, #0]
    22d6:	4770      	bx	lr
    22d8:	4000c008 	.word	0x4000c008

000022dc <memset>:
    22dc:	4402      	add	r2, r0
    22de:	4603      	mov	r3, r0
    22e0:	4293      	cmp	r3, r2
    22e2:	d002      	beq.n	22ea <memset+0xe>
    22e4:	f803 1b01 	strb.w	r1, [r3], #1
    22e8:	e7fa      	b.n	22e0 <memset+0x4>
    22ea:	4770      	bx	lr
    22ec:	4f4d540a 	.word	0x4f4d540a
    22f0:	202c5455 	.word	0x202c5455
    22f4:	00000000 	.word	0x00000000
    22f8:	5852202c 	.word	0x5852202c
    22fc:	00000020 	.word	0x00000020
    2300:	5854202c 	.word	0x5854202c
    2304:	00504d43 	.word	0x00504d43
    2308:	5852202c 	.word	0x5852202c
    230c:	00000046 	.word	0x00000046
    2310:	54524155 	.word	0x54524155
    2314:	46494620 	.word	0x46494620
    2318:	7845204f 	.word	0x7845204f
    231c:	6c706d61 	.word	0x6c706d61
    2320:	00000a65 	.word	0x00000a65
    2324:	65746f4e 	.word	0x65746f4e
    2328:	74202d20 	.word	0x74202d20
    232c:	55206568 	.word	0x55206568
    2330:	20545241 	.word	0x20545241
    2334:	6d726574 	.word	0x6d726574
    2338:	6c616e69 	.word	0x6c616e69
    233c:	65706f20 	.word	0x65706f20
    2340:	65746172 	.word	0x65746172
    2344:	74612073 	.word	0x74612073
    2348:	35313120 	.word	0x35313120
    234c:	3030322c 	.word	0x3030322c
    2350:	55414220 	.word	0x55414220
    2354:	38202c44 	.word	0x38202c44
    2358:	74696220 	.word	0x74696220
    235c:	6f6e202c 	.word	0x6f6e202c
    2360:	72617020 	.word	0x72617020
    2364:	2e797469 	.word	0x2e797469
    2368:	0000000a 	.word	0x0000000a
    236c:	6345090a 	.word	0x6345090a
    2370:	62206f68 	.word	0x62206f68
    2374:	206b6361 	.word	0x206b6361
    2378:	20656874 	.word	0x20656874
    237c:	54524155 	.word	0x54524155
    2380:	63657220 	.word	0x63657220
    2384:	65766965 	.word	0x65766965
    2388:	61642064 	.word	0x61642064
    238c:	0a2e6174 	.word	0x0a2e6174
    2390:	00000000 	.word	0x00000000
    2394:	00000009 	.word	0x00000009
    2398:	52415453 	.word	0x52415453
    239c:	58545f54 	.word	0x58545f54
    23a0:	68632820 	.word	0x68632820
    23a4:	273d7261 	.word	0x273d7261
    23a8:	29276e5c 	.word	0x29276e5c
    23ac:	00000000 	.word	0x00000000
    23b0:	52415453 	.word	0x52415453
    23b4:	58545f54 	.word	0x58545f54
    23b8:	68632820 	.word	0x68632820
    23bc:	273d7261 	.word	0x273d7261
    23c0:	29276325 	.word	0x29276325
    23c4:	00000000 	.word	0x00000000

000023c8 <am_hal_cachectrl_defaults>:
    23c8:	50000001 00010300 00010101 685f6d61     ...P........am_h
    23d8:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    23e8:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    23f8:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2408:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2418:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    2428:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2438:	206e6168 20656e6f 69726570 72656870     han one peripher
    2448:	61206c61 20612074 656d6974 0000002e     al at a time....
    2458:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2468:	6c727463 0000632e                       ctrl.c..

00002470 <CSWTCH.37>:
    2470:	20202004 20202020 20202008 20202020     .       .       
    2480:	20202010 20202020 20202018 20202020     .       .       
    2490:	0000001c 65746e49 20726567 69766964     ....Integer divi
    24a0:	20726f73 5453554d 20656220 61657267     sor MUST be grea
    24b0:	20726574 6e616874 20726f20 61757165     ter than or equa
    24c0:	6f74206c 002e3120 2e5c2e2e 6d615c2e     l to 1....\..\am
    24d0:	6c61685f 7261755f 00632e74 69797254     _hal_uart.c.Tryi
    24e0:	7420676e 6964206f 6c626173 20612065     ng to disable a 
    24f0:	54524155 646f6d20 20656c75 74616874     UART module that
    2500:	656f6420 74276e73 69786520 00007473      doesn't exist..
    2510:	69797254 7420676e 6e65206f 656c6261     Trying to enable
    2520:	55206120 20545241 75646f6d 7420656c      a UART module t
    2530:	20746168 73656f64 2074276e 73697865     hat doesn't exis
    2540:	00000074                                t...
