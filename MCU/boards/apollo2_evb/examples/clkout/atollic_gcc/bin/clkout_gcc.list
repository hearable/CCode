
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\clkout\atollic_gcc\bin\clkout_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000078  10001000  00001f68  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10001078  00001fe0  00021078  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY
  5 .debug_info   000055cf  00000000  00000000  000210af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000182c  00000000  00000000  0002667e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000728  00000000  00000000  00027eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000c28  00000000  00000000  000285d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003950  00000000  00000000  000291fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025e2  00000000  00000000  0002cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0002f12c  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000143c  00000000  00000000  0002f1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000026c3  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 b5 08 00 00 1d 09 00 00 2d 09 00 00     ............-...
      10:	2d 09 00 00 2d 09 00 00 2d 09 00 00 00 00 00 00     -...-...-.......
	...
      2c:	25 09 00 00 25 09 00 00 00 00 00 00 25 09 00 00     %...%.......%...
      3c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      4c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      5c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      6c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      7c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      8c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      9c:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      ac:	25 09 00 00 25 09 00 00 25 09 00 00 25 09 00 00     %...%...%...%...
      bc:	25 09 00 00                                         %...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     482:	683b      	ldr	r3, [r7, #0]
     484:	00db      	lsls	r3, r3, #3
     486:	687a      	ldr	r2, [r7, #4]
     488:	4413      	add	r3, r2
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	f003 0302 	and.w	r3, r3, #2
     490:	2b00      	cmp	r3, #0
     492:	d036      	beq.n	502 <am_devices_led_on+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     494:	683b      	ldr	r3, [r7, #0]
     496:	00db      	lsls	r3, r3, #3
     498:	687a      	ldr	r2, [r7, #4]
     49a:	4413      	add	r3, r2
     49c:	685b      	ldr	r3, [r3, #4]
     49e:	f003 0301 	and.w	r3, r3, #1
     4a2:	2b00      	cmp	r3, #0
     4a4:	d016      	beq.n	4d4 <am_devices_led_on+0x5c>
     4a6:	683b      	ldr	r3, [r7, #0]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	687a      	ldr	r2, [r7, #4]
     4ac:	4413      	add	r3, r2
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	08db      	lsrs	r3, r3, #3
     4b2:	f003 0204 	and.w	r2, r3, #4
     4b6:	4b21      	ldr	r3, [pc, #132]	; (53c <am_devices_led_on+0xc4>)
     4b8:	4413      	add	r3, r2
     4ba:	4619      	mov	r1, r3
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	f003 031f 	and.w	r3, r3, #31
     4ca:	2201      	movs	r2, #1
     4cc:	fa02 f303 	lsl.w	r3, r2, r3
     4d0:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     4d2:	e02c      	b.n	52e <am_devices_led_on+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	00db      	lsls	r3, r3, #3
     4d8:	687a      	ldr	r2, [r7, #4]
     4da:	4413      	add	r3, r2
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	08db      	lsrs	r3, r3, #3
     4e0:	f003 0204 	and.w	r2, r3, #4
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <am_devices_led_on+0xc8>)
     4e6:	4413      	add	r3, r2
     4e8:	4619      	mov	r1, r3
     4ea:	683b      	ldr	r3, [r7, #0]
     4ec:	00db      	lsls	r3, r3, #3
     4ee:	687a      	ldr	r2, [r7, #4]
     4f0:	4413      	add	r3, r2
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	f003 031f 	and.w	r3, r3, #31
     4f8:	2201      	movs	r2, #1
     4fa:	fa02 f303 	lsl.w	r3, r2, r3
     4fe:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     500:	e015      	b.n	52e <am_devices_led_on+0xb6>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     502:	683b      	ldr	r3, [r7, #0]
     504:	00db      	lsls	r3, r3, #3
     506:	687a      	ldr	r2, [r7, #4]
     508:	4413      	add	r3, r2
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	08db      	lsrs	r3, r3, #3
     50e:	f003 0204 	and.w	r2, r3, #4
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <am_devices_led_on+0xcc>)
     514:	4413      	add	r3, r2
     516:	4619      	mov	r1, r3
     518:	683b      	ldr	r3, [r7, #0]
     51a:	00db      	lsls	r3, r3, #3
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	4413      	add	r3, r2
     520:	681b      	ldr	r3, [r3, #0]
     522:	f003 031f 	and.w	r3, r3, #31
     526:	2201      	movs	r2, #1
     528:	fa02 f303 	lsl.w	r3, r2, r3
     52c:	600b      	str	r3, [r1, #0]
    }
}
     52e:	bf00      	nop
     530:	370c      	adds	r7, #12
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr
     53a:	bf00      	nop
     53c:	40010090 	.word	0x40010090
     540:	40010098 	.word	0x40010098
     544:	400100a8 	.word	0x400100a8

00000548 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     548:	b480      	push	{r7}
     54a:	b083      	sub	sp, #12
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
     550:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	685b      	ldr	r3, [r3, #4]
     55c:	f003 0302 	and.w	r3, r3, #2
     560:	2b00      	cmp	r3, #0
     562:	d036      	beq.n	5d2 <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     564:	683b      	ldr	r3, [r7, #0]
     566:	00db      	lsls	r3, r3, #3
     568:	687a      	ldr	r2, [r7, #4]
     56a:	4413      	add	r3, r2
     56c:	685b      	ldr	r3, [r3, #4]
     56e:	f003 0301 	and.w	r3, r3, #1
     572:	2b00      	cmp	r3, #0
     574:	d116      	bne.n	5a4 <am_devices_led_off+0x5c>
     576:	683b      	ldr	r3, [r7, #0]
     578:	00db      	lsls	r3, r3, #3
     57a:	687a      	ldr	r2, [r7, #4]
     57c:	4413      	add	r3, r2
     57e:	681b      	ldr	r3, [r3, #0]
     580:	08db      	lsrs	r3, r3, #3
     582:	f003 0204 	and.w	r2, r3, #4
     586:	4b21      	ldr	r3, [pc, #132]	; (60c <am_devices_led_off+0xc4>)
     588:	4413      	add	r3, r2
     58a:	4619      	mov	r1, r3
     58c:	683b      	ldr	r3, [r7, #0]
     58e:	00db      	lsls	r3, r3, #3
     590:	687a      	ldr	r2, [r7, #4]
     592:	4413      	add	r3, r2
     594:	681b      	ldr	r3, [r3, #0]
     596:	f003 031f 	and.w	r3, r3, #31
     59a:	2201      	movs	r2, #1
     59c:	fa02 f303 	lsl.w	r3, r2, r3
     5a0:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     5a2:	e02c      	b.n	5fe <am_devices_led_off+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     5a4:	683b      	ldr	r3, [r7, #0]
     5a6:	00db      	lsls	r3, r3, #3
     5a8:	687a      	ldr	r2, [r7, #4]
     5aa:	4413      	add	r3, r2
     5ac:	681b      	ldr	r3, [r3, #0]
     5ae:	08db      	lsrs	r3, r3, #3
     5b0:	f003 0204 	and.w	r2, r3, #4
     5b4:	4b16      	ldr	r3, [pc, #88]	; (610 <am_devices_led_off+0xc8>)
     5b6:	4413      	add	r3, r2
     5b8:	4619      	mov	r1, r3
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	00db      	lsls	r3, r3, #3
     5be:	687a      	ldr	r2, [r7, #4]
     5c0:	4413      	add	r3, r2
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	f003 031f 	and.w	r3, r3, #31
     5c8:	2201      	movs	r2, #1
     5ca:	fa02 f303 	lsl.w	r3, r2, r3
     5ce:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     5d0:	e015      	b.n	5fe <am_devices_led_off+0xb6>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	00db      	lsls	r3, r3, #3
     5d6:	687a      	ldr	r2, [r7, #4]
     5d8:	4413      	add	r3, r2
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	08db      	lsrs	r3, r3, #3
     5de:	f003 0204 	and.w	r2, r3, #4
     5e2:	4b0c      	ldr	r3, [pc, #48]	; (614 <am_devices_led_off+0xcc>)
     5e4:	4413      	add	r3, r2
     5e6:	4619      	mov	r1, r3
     5e8:	683b      	ldr	r3, [r7, #0]
     5ea:	00db      	lsls	r3, r3, #3
     5ec:	687a      	ldr	r2, [r7, #4]
     5ee:	4413      	add	r3, r2
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	f003 031f 	and.w	r3, r3, #31
     5f6:	2201      	movs	r2, #1
     5f8:	fa02 f303 	lsl.w	r3, r2, r3
     5fc:	600b      	str	r3, [r1, #0]
    }
}
     5fe:	bf00      	nop
     600:	370c      	adds	r7, #12
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	40010090 	.word	0x40010090
     610:	40010098 	.word	0x40010098
     614:	400100b4 	.word	0x400100b4

00000618 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     618:	b580      	push	{r7, lr}
     61a:	b084      	sub	sp, #16
     61c:	af00      	add	r7, sp, #0
     61e:	6078      	str	r0, [r7, #4]
     620:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     622:	683b      	ldr	r3, [r7, #0]
     624:	00db      	lsls	r3, r3, #3
     626:	687a      	ldr	r2, [r7, #4]
     628:	4413      	add	r3, r2
     62a:	685b      	ldr	r3, [r3, #4]
     62c:	f003 0302 	and.w	r3, r3, #2
     630:	2b00      	cmp	r3, #0
     632:	d029      	beq.n	688 <am_devices_led_toggle+0x70>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     634:	f3ef 8310 	mrs	r3, PRIMASK
     638:	60fb      	str	r3, [r7, #12]
     63a:	b672      	cpsid	i
     63c:	683b      	ldr	r3, [r7, #0]
     63e:	00db      	lsls	r3, r3, #3
     640:	687a      	ldr	r2, [r7, #4]
     642:	4413      	add	r3, r2
     644:	681b      	ldr	r3, [r3, #0]
     646:	08db      	lsrs	r3, r3, #3
     648:	f003 0204 	and.w	r2, r3, #4
     64c:	4b2c      	ldr	r3, [pc, #176]	; (700 <am_devices_led_toggle+0xe8>)
     64e:	4413      	add	r3, r2
     650:	4618      	mov	r0, r3
     652:	683b      	ldr	r3, [r7, #0]
     654:	00db      	lsls	r3, r3, #3
     656:	687a      	ldr	r2, [r7, #4]
     658:	4413      	add	r3, r2
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	08db      	lsrs	r3, r3, #3
     65e:	f003 0204 	and.w	r2, r3, #4
     662:	4b27      	ldr	r3, [pc, #156]	; (700 <am_devices_led_toggle+0xe8>)
     664:	4413      	add	r3, r2
     666:	681a      	ldr	r2, [r3, #0]
     668:	683b      	ldr	r3, [r7, #0]
     66a:	00db      	lsls	r3, r3, #3
     66c:	6879      	ldr	r1, [r7, #4]
     66e:	440b      	add	r3, r1
     670:	681b      	ldr	r3, [r3, #0]
     672:	f003 031f 	and.w	r3, r3, #31
     676:	2101      	movs	r1, #1
     678:	fa01 f303 	lsl.w	r3, r1, r3
     67c:	4053      	eors	r3, r2
     67e:	6003      	str	r3, [r0, #0]
     680:	68fb      	ldr	r3, [r7, #12]
     682:	f383 8810 	msr	PRIMASK, r3
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     686:	e037      	b.n	6f8 <am_devices_led_toggle+0xe0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     688:	683b      	ldr	r3, [r7, #0]
     68a:	00db      	lsls	r3, r3, #3
     68c:	687a      	ldr	r2, [r7, #4]
     68e:	4413      	add	r3, r2
     690:	681b      	ldr	r3, [r3, #0]
     692:	4618      	mov	r0, r3
     694:	f001 f9d0 	bl	1a38 <am_hal_gpio_out_enable_bit_get>
     698:	4603      	mov	r3, r0
     69a:	2b00      	cmp	r3, #0
     69c:	d016      	beq.n	6cc <am_devices_led_toggle+0xb4>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	00db      	lsls	r3, r3, #3
     6a2:	687a      	ldr	r2, [r7, #4]
     6a4:	4413      	add	r3, r2
     6a6:	681b      	ldr	r3, [r3, #0]
     6a8:	08db      	lsrs	r3, r3, #3
     6aa:	f003 0204 	and.w	r2, r3, #4
     6ae:	4b15      	ldr	r3, [pc, #84]	; (704 <am_devices_led_toggle+0xec>)
     6b0:	4413      	add	r3, r2
     6b2:	4619      	mov	r1, r3
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	00db      	lsls	r3, r3, #3
     6b8:	687a      	ldr	r2, [r7, #4]
     6ba:	4413      	add	r3, r2
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	f003 031f 	and.w	r3, r3, #31
     6c2:	2201      	movs	r2, #1
     6c4:	fa02 f303 	lsl.w	r3, r2, r3
     6c8:	600b      	str	r3, [r1, #0]
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     6ca:	e015      	b.n	6f8 <am_devices_led_toggle+0xe0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	00db      	lsls	r3, r3, #3
     6d0:	687a      	ldr	r2, [r7, #4]
     6d2:	4413      	add	r3, r2
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	08db      	lsrs	r3, r3, #3
     6d8:	f003 0204 	and.w	r2, r3, #4
     6dc:	4b0a      	ldr	r3, [pc, #40]	; (708 <am_devices_led_toggle+0xf0>)
     6de:	4413      	add	r3, r2
     6e0:	4619      	mov	r1, r3
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	00db      	lsls	r3, r3, #3
     6e6:	687a      	ldr	r2, [r7, #4]
     6e8:	4413      	add	r3, r2
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	f003 031f 	and.w	r3, r3, #31
     6f0:	2201      	movs	r2, #1
     6f2:	fa02 f303 	lsl.w	r3, r2, r3
     6f6:	600b      	str	r3, [r1, #0]
        }
    }
}
     6f8:	bf00      	nop
     6fa:	3710      	adds	r7, #16
     6fc:	46bd      	mov	sp, r7
     6fe:	bd80      	pop	{r7, pc}
     700:	40010088 	.word	0x40010088
     704:	400100b4 	.word	0x400100b4
     708:	400100a8 	.word	0x400100a8

0000070c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     70c:	b580      	push	{r7, lr}
     70e:	b086      	sub	sp, #24
     710:	af00      	add	r7, sp, #0
    bool bNewClkout, bOldClkout;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     712:	2000      	movs	r0, #0
     714:	f001 f944 	bl	19a0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     718:	4858      	ldr	r0, [pc, #352]	; (87c <main+0x170>)
     71a:	f001 f8ab 	bl	1874 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     71e:	f001 f81f 	bl	1760 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     722:	4857      	ldr	r0, [pc, #348]	; (880 <main+0x174>)
     724:	f000 f982 	bl	a2c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     728:	f3ef 8310 	mrs	r3, PRIMASK
     72c:	60bb      	str	r3, [r7, #8]
     72e:	b672      	cpsid	i
     730:	4b54      	ldr	r3, [pc, #336]	; (884 <main+0x178>)
     732:	2273      	movs	r2, #115	; 0x73
     734:	601a      	str	r2, [r3, #0]
     736:	4a54      	ldr	r2, [pc, #336]	; (888 <main+0x17c>)
     738:	4b53      	ldr	r3, [pc, #332]	; (888 <main+0x17c>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     740:	6013      	str	r3, [r2, #0]
     742:	4a52      	ldr	r2, [pc, #328]	; (88c <main+0x180>)
     744:	4b51      	ldr	r3, [pc, #324]	; (88c <main+0x180>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     74c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     750:	6013      	str	r3, [r2, #0]
     752:	4a4f      	ldr	r2, [pc, #316]	; (890 <main+0x184>)
     754:	4b4e      	ldr	r3, [pc, #312]	; (890 <main+0x184>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     75c:	6013      	str	r3, [r2, #0]
     75e:	4b49      	ldr	r3, [pc, #292]	; (884 <main+0x178>)
     760:	2200      	movs	r2, #0
     762:	601a      	str	r2, [r3, #0]
     764:	68bb      	ldr	r3, [r7, #8]
     766:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     76a:	f001 f973 	bl	1a54 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     76e:	f001 f809 	bl	1784 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     772:	f000 ffeb 	bl	174c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CLKOUT to LED Example\n");
     776:	4847      	ldr	r0, [pc, #284]	; (894 <main+0x188>)
     778:	f000 ffca 	bl	1710 <am_util_stdio_printf>
    am_util_stdio_printf("\tClocks an LED about once a second based on the CLKOUT "
     77c:	4846      	ldr	r0, [pc, #280]	; (898 <main+0x18c>)
     77e:	f000 ffc7 	bl	1710 <am_util_stdio_printf>
                         "signal.\n");

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     782:	f001 f83f 	bl	1804 <am_bsp_debug_printf_disable>

    //
    // Clear the LED.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     786:	2105      	movs	r1, #5
     788:	4844      	ldr	r0, [pc, #272]	; (89c <main+0x190>)
     78a:	f7ff fe5b 	bl	444 <am_devices_led_array_init>

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     78e:	2002      	movs	r0, #2
     790:	f001 f92e 	bl	19f0 <am_hal_clkgen_osc_start>

    //
    // Enable the clockout to the desired pin.
    // And make it readable on the pin with AM_HAL_GPIO_INPEN
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_CLKOUT_PIN,
     794:	f3ef 8310 	mrs	r3, PRIMASK
     798:	607b      	str	r3, [r7, #4]
     79a:	b672      	cpsid	i
     79c:	4b39      	ldr	r3, [pc, #228]	; (884 <main+0x178>)
     79e:	2273      	movs	r2, #115	; 0x73
     7a0:	601a      	str	r2, [r3, #0]
     7a2:	4a3f      	ldr	r2, [pc, #252]	; (8a0 <main+0x194>)
     7a4:	4b3e      	ldr	r3, [pc, #248]	; (8a0 <main+0x194>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     7ac:	6013      	str	r3, [r2, #0]
     7ae:	4a3d      	ldr	r2, [pc, #244]	; (8a4 <main+0x198>)
     7b0:	4b3c      	ldr	r3, [pc, #240]	; (8a4 <main+0x198>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     7b8:	f043 5390 	orr.w	r3, r3, #301989888	; 0x12000000
     7bc:	6013      	str	r3, [r2, #0]
     7be:	4a3a      	ldr	r2, [pc, #232]	; (8a8 <main+0x19c>)
     7c0:	4b39      	ldr	r3, [pc, #228]	; (8a8 <main+0x19c>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     7c8:	6013      	str	r3, [r2, #0]
     7ca:	4b2e      	ldr	r3, [pc, #184]	; (884 <main+0x178>)
     7cc:	2200      	movs	r2, #0
     7ce:	601a      	str	r2, [r3, #0]
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	f383 8810 	msr	PRIMASK, r3
                           (AM_BSP_GPIO_CFG_CLKOUT_PIN | AM_HAL_GPIO_INPEN));

    //
    // Initialize clkgen to output the selected clock.
    //
    am_hal_clkgen_clkout_enable(AM_HAL_CLKGEN_CLKOUT_CKSEL_LFRC_DIV2);
     7d6:	2023      	movs	r0, #35	; 0x23
     7d8:	f001 f91e 	bl	1a18 <am_hal_clkgen_clkout_enable>

    //
    // Initialize LED 0 to on
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     7dc:	2100      	movs	r1, #0
     7de:	482f      	ldr	r0, [pc, #188]	; (89c <main+0x190>)
     7e0:	f7ff ff1a 	bl	618 <am_devices_led_toggle>
    iLEDcount = 1;      // LED 1 is next
     7e4:	2301      	movs	r3, #1
     7e6:	613b      	str	r3, [r7, #16]

    //
    // Initialize loop variables
    //
    iRisingCount = RISING_EDGE_COUNT;
     7e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     7ec:	617b      	str	r3, [r7, #20]
    bOldClkout = false;
     7ee:	2300      	movs	r3, #0
     7f0:	73fb      	strb	r3, [r7, #15]
    while (1)
    {
        //
        // Grab new clock output value and look for a change.
        //
        bNewClkout = am_hal_gpio_input_bit_read(AM_BSP_GPIO_CLKOUT_PIN);
     7f2:	4b2e      	ldr	r3, [pc, #184]	; (8ac <main+0x1a0>)
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
     7fa:	2b00      	cmp	r3, #0
     7fc:	bf14      	ite	ne
     7fe:	2301      	movne	r3, #1
     800:	2300      	moveq	r3, #0
     802:	73bb      	strb	r3, [r7, #14]

        //
        // Look for any change.
        //
        if ( bOldClkout != bNewClkout )
     804:	7bfa      	ldrb	r2, [r7, #15]
     806:	7bbb      	ldrb	r3, [r7, #14]
     808:	429a      	cmp	r2, r3
     80a:	d0f2      	beq.n	7f2 <main+0xe6>
        {
            //
            // OK a change occurred.
            //
            bOldClkout = bNewClkout;
     80c:	7bbb      	ldrb	r3, [r7, #14]
     80e:	73fb      	strb	r3, [r7, #15]

            //
            //  Was it rising or falling.
            //
            if ( bNewClkout )
     810:	7bbb      	ldrb	r3, [r7, #14]
     812:	2b00      	cmp	r3, #0
     814:	d0ed      	beq.n	7f2 <main+0xe6>
            {
                //
                // It was rising so count them until time to act.
                //
                if (--iRisingCount < 0)
     816:	697b      	ldr	r3, [r7, #20]
     818:	3b01      	subs	r3, #1
     81a:	617b      	str	r3, [r7, #20]
     81c:	697b      	ldr	r3, [r7, #20]
     81e:	2b00      	cmp	r3, #0
     820:	dae7      	bge.n	7f2 <main+0xe6>
                {
                    //
                    // Act on the time out (walk the 4 LEDs)
                    //
                    am_devices_led_off(am_bsp_psLEDs, 0);
     822:	2100      	movs	r1, #0
     824:	481d      	ldr	r0, [pc, #116]	; (89c <main+0x190>)
     826:	f7ff fe8f 	bl	548 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 1);
     82a:	2101      	movs	r1, #1
     82c:	481b      	ldr	r0, [pc, #108]	; (89c <main+0x190>)
     82e:	f7ff fe8b 	bl	548 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 2);
     832:	2102      	movs	r1, #2
     834:	4819      	ldr	r0, [pc, #100]	; (89c <main+0x190>)
     836:	f7ff fe87 	bl	548 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 3);
     83a:	2103      	movs	r1, #3
     83c:	4817      	ldr	r0, [pc, #92]	; (89c <main+0x190>)
     83e:	f7ff fe83 	bl	548 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 4);
     842:	2104      	movs	r1, #4
     844:	4815      	ldr	r0, [pc, #84]	; (89c <main+0x190>)
     846:	f7ff fe7f 	bl	548 <am_devices_led_off>
                    am_devices_led_on(am_bsp_psLEDs, iLEDcount);
     84a:	693b      	ldr	r3, [r7, #16]
     84c:	4619      	mov	r1, r3
     84e:	4813      	ldr	r0, [pc, #76]	; (89c <main+0x190>)
     850:	f7ff fe12 	bl	478 <am_devices_led_on>
                    iLEDcount++;
     854:	693b      	ldr	r3, [r7, #16]
     856:	3301      	adds	r3, #1
     858:	613b      	str	r3, [r7, #16]
                    iLEDcount %= 5;
     85a:	693a      	ldr	r2, [r7, #16]
     85c:	4b14      	ldr	r3, [pc, #80]	; (8b0 <main+0x1a4>)
     85e:	fb83 1302 	smull	r1, r3, r3, r2
     862:	1059      	asrs	r1, r3, #1
     864:	17d3      	asrs	r3, r2, #31
     866:	1ac9      	subs	r1, r1, r3
     868:	460b      	mov	r3, r1
     86a:	009b      	lsls	r3, r3, #2
     86c:	440b      	add	r3, r1
     86e:	1ad3      	subs	r3, r2, r3
     870:	613b      	str	r3, [r7, #16]

                    //
                    // Reset the rising edge count.
                    //
                    iRisingCount = RISING_EDGE_COUNT;
     872:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     876:	617b      	str	r3, [r7, #20]
                }
            }
        }

    }
     878:	e7bb      	b.n	7f2 <main+0xe6>
     87a:	bf00      	nop
     87c:	00001f0c 	.word	0x00001f0c
     880:	00001871 	.word	0x00001871
     884:	40010060 	.word	0x40010060
     888:	40010054 	.word	0x40010054
     88c:	40010028 	.word	0x40010028
     890:	40010108 	.word	0x40010108
     894:	00001ea0 	.word	0x00001ea0
     898:	00001eb8 	.word	0x00001eb8
     89c:	10001000 	.word	0x10001000
     8a0:	40010040 	.word	0x40010040
     8a4:	40010004 	.word	0x40010004
     8a8:	400100e4 	.word	0x400100e4
     8ac:	40010080 	.word	0x40010080
     8b0:	66666667 	.word	0x66666667

000008b4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     8b4:	4811      	ldr	r0, [pc, #68]	; (8fc <zero_loop+0x12>)
     8b6:	4912      	ldr	r1, [pc, #72]	; (900 <zero_loop+0x16>)
     8b8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     8ba:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     8be:	4811      	ldr	r0, [pc, #68]	; (904 <zero_loop+0x1a>)
     8c0:	6801      	ldr	r1, [r0, #0]
     8c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     8c6:	6001      	str	r1, [r0, #0]
     8c8:	f3bf 8f4f 	dsb	sy
     8cc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     8d0:	480d      	ldr	r0, [pc, #52]	; (908 <zero_loop+0x1e>)
     8d2:	490e      	ldr	r1, [pc, #56]	; (90c <zero_loop+0x22>)
     8d4:	4a0e      	ldr	r2, [pc, #56]	; (910 <zero_loop+0x26>)

000008d6 <copy_loop>:
     8d6:	f850 3b04 	ldr.w	r3, [r0], #4
     8da:	f841 3b04 	str.w	r3, [r1], #4
     8de:	4291      	cmp	r1, r2
     8e0:	dbf9      	blt.n	8d6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     8e2:	480c      	ldr	r0, [pc, #48]	; (914 <zero_loop+0x2a>)
     8e4:	490c      	ldr	r1, [pc, #48]	; (918 <zero_loop+0x2e>)
     8e6:	f04f 0200 	mov.w	r2, #0

000008ea <zero_loop>:
     8ea:	4288      	cmp	r0, r1
     8ec:	bfb8      	it	lt
     8ee:	f840 2b04 	strlt.w	r2, [r0], #4
     8f2:	dbfa      	blt.n	8ea <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     8f4:	f7ff ff0a 	bl	70c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     8f8:	be00      	bkpt	0x0000
}
     8fa:	bf00      	nop
     8fc:	e000ed08 	.word	0xe000ed08
     900:	00000000 	.word	0x00000000
     904:	e000ed88 	.word	0xe000ed88
     908:	00001f68 	.word	0x00001f68
     90c:	10001000 	.word	0x10001000
     910:	10001078 	.word	0x10001078
     914:	10001078 	.word	0x10001078
     918:	10001184 	.word	0x10001184

0000091c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     91c:	b480      	push	{r7}
     91e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     920:	e7fe      	b.n	920 <am_nmi_isr+0x4>
     922:	bf00      	nop

00000924 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     924:	b480      	push	{r7}
     926:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     928:	e7fe      	b.n	928 <am_adc_isr+0x4>
     92a:	bf00      	nop

0000092c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     92c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     92e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     930:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     932:	f000 f809 	bl	948 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     936:	bd01      	pop	{r0, pc}
}
     938:	bf00      	nop
     93a:	4618      	mov	r0, r3

0000093c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     93c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     93e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     940:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     942:	4770      	bx	lr
}
     944:	bf00      	nop
     946:	4618      	mov	r0, r3

00000948 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     948:	b580      	push	{r7, lr}
     94a:	b096      	sub	sp, #88	; 0x58
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     950:	f107 030c 	add.w	r3, r7, #12
     954:	2200      	movs	r2, #0
     956:	601a      	str	r2, [r3, #0]
     958:	605a      	str	r2, [r3, #4]
     95a:	609a      	str	r2, [r3, #8]
     95c:	60da      	str	r2, [r3, #12]
     95e:	611a      	str	r2, [r3, #16]
     960:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     962:	2300      	movs	r3, #0
     964:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     968:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     96a:	4b2e      	ldr	r3, [pc, #184]	; (a24 <am_util_faultisr_collect_data+0xdc>)
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     972:	b2db      	uxtb	r3, r3
     974:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     97a:	0a1b      	lsrs	r3, r3, #8
     97c:	b2db      	uxtb	r3, r3
     97e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     984:	0c1b      	lsrs	r3, r3, #16
     986:	b29b      	uxth	r3, r3
     988:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     98c:	4b26      	ldr	r3, [pc, #152]	; (a28 <am_util_faultisr_collect_data+0xe0>)
     98e:	681b      	ldr	r3, [r3, #0]
     990:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     992:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     996:	b2db      	uxtb	r3, r3
     998:	f003 0302 	and.w	r3, r3, #2
     99c:	2b00      	cmp	r3, #0
     99e:	d005      	beq.n	9ac <am_util_faultisr_collect_data+0x64>
     9a0:	6879      	ldr	r1, [r7, #4]
     9a2:	2006      	movs	r0, #6
     9a4:	f7ff ffca 	bl	93c <getStackedReg>
     9a8:	4603      	mov	r3, r0
     9aa:	e001      	b.n	9b0 <am_util_faultisr_collect_data+0x68>
     9ac:	f04f 33ff 	mov.w	r3, #4294967295
     9b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     9b2:	6879      	ldr	r1, [r7, #4]
     9b4:	2000      	movs	r0, #0
     9b6:	f7ff ffc1 	bl	93c <getStackedReg>
     9ba:	4603      	mov	r3, r0
     9bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     9be:	6879      	ldr	r1, [r7, #4]
     9c0:	2001      	movs	r0, #1
     9c2:	f7ff ffbb 	bl	93c <getStackedReg>
     9c6:	4603      	mov	r3, r0
     9c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     9ca:	6879      	ldr	r1, [r7, #4]
     9cc:	2002      	movs	r0, #2
     9ce:	f7ff ffb5 	bl	93c <getStackedReg>
     9d2:	4603      	mov	r3, r0
     9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     9d6:	6879      	ldr	r1, [r7, #4]
     9d8:	2003      	movs	r0, #3
     9da:	f7ff ffaf 	bl	93c <getStackedReg>
     9de:	4603      	mov	r3, r0
     9e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     9e2:	6879      	ldr	r1, [r7, #4]
     9e4:	2004      	movs	r0, #4
     9e6:	f7ff ffa9 	bl	93c <getStackedReg>
     9ea:	4603      	mov	r3, r0
     9ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     9ee:	6879      	ldr	r1, [r7, #4]
     9f0:	2005      	movs	r0, #5
     9f2:	f7ff ffa3 	bl	93c <getStackedReg>
     9f6:	4603      	mov	r3, r0
     9f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     9fa:	6879      	ldr	r1, [r7, #4]
     9fc:	2006      	movs	r0, #6
     9fe:	f7ff ff9d 	bl	93c <getStackedReg>
     a02:	4603      	mov	r3, r0
     a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     a06:	6879      	ldr	r1, [r7, #4]
     a08:	2007      	movs	r0, #7
     a0a:	f7ff ff97 	bl	93c <getStackedReg>
     a0e:	4603      	mov	r3, r0
     a10:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     a12:	f107 030c 	add.w	r3, r7, #12
     a16:	4618      	mov	r0, r3
     a18:	f001 f86c 	bl	1af4 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     a1c:	2300      	movs	r3, #0
     a1e:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     a20:	e7fe      	b.n	a20 <am_util_faultisr_collect_data+0xd8>
     a22:	bf00      	nop
     a24:	e000ed28 	.word	0xe000ed28
     a28:	e000ed38 	.word	0xe000ed38

00000a2c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     a2c:	b480      	push	{r7}
     a2e:	b083      	sub	sp, #12
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     a34:	4a04      	ldr	r2, [pc, #16]	; (a48 <am_util_stdio_printf_init+0x1c>)
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	6013      	str	r3, [r2, #0]
}
     a3a:	bf00      	nop
     a3c:	370c      	adds	r7, #12
     a3e:	46bd      	mov	sp, r7
     a40:	f85d 7b04 	ldr.w	r7, [sp], #4
     a44:	4770      	bx	lr
     a46:	bf00      	nop
     a48:	10001180 	.word	0x10001180

00000a4c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     a4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     a50:	b096      	sub	sp, #88	; 0x58
     a52:	af00      	add	r7, sp, #0
     a54:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     a58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a5c:	0025      	movs	r5, r4
     a5e:	2600      	movs	r6, #0
     a60:	ea55 0306 	orrs.w	r3, r5, r6
     a64:	f000 809e 	beq.w	ba4 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     a68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a6c:	0862      	lsrs	r2, r4, #1
     a6e:	ea4f 0133 	mov.w	r1, r3, rrx
     a72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a76:	ea4f 0893 	mov.w	r8, r3, lsr #2
     a7a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     a7e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     a82:	eb11 0308 	adds.w	r3, r1, r8
     a86:	eb42 0409 	adc.w	r4, r2, r9
     a8a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     a8e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a92:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     a96:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     a9a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     a9e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     aa2:	eb13 030a 	adds.w	r3, r3, sl
     aa6:	eb44 040b 	adc.w	r4, r4, fp
     aaa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     aae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ab2:	0a1a      	lsrs	r2, r3, #8
     ab4:	62ba      	str	r2, [r7, #40]	; 0x28
     ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ab8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     abc:	62ba      	str	r2, [r7, #40]	; 0x28
     abe:	0a23      	lsrs	r3, r4, #8
     ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
     ac2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ac6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     aca:	18c9      	adds	r1, r1, r3
     acc:	eb42 0204 	adc.w	r2, r2, r4
     ad0:	460b      	mov	r3, r1
     ad2:	4614      	mov	r4, r2
     ad4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     ad8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     adc:	0c1a      	lsrs	r2, r3, #16
     ade:	623a      	str	r2, [r7, #32]
     ae0:	6a3a      	ldr	r2, [r7, #32]
     ae2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     ae6:	623a      	str	r2, [r7, #32]
     ae8:	0c23      	lsrs	r3, r4, #16
     aea:	627b      	str	r3, [r7, #36]	; 0x24
     aec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     af0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     af4:	18c9      	adds	r1, r1, r3
     af6:	eb42 0204 	adc.w	r2, r2, r4
     afa:	460b      	mov	r3, r1
     afc:	4614      	mov	r4, r2
     afe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     b02:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b06:	0023      	movs	r3, r4
     b08:	603b      	str	r3, [r7, #0]
     b0a:	2300      	movs	r3, #0
     b0c:	607b      	str	r3, [r7, #4]
     b0e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b12:	e897 0006 	ldmia.w	r7, {r1, r2}
     b16:	18c9      	adds	r1, r1, r3
     b18:	eb42 0204 	adc.w	r2, r2, r4
     b1c:	460b      	mov	r3, r1
     b1e:	4614      	mov	r4, r2
     b20:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     b24:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b28:	08da      	lsrs	r2, r3, #3
     b2a:	613a      	str	r2, [r7, #16]
     b2c:	693a      	ldr	r2, [r7, #16]
     b2e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     b32:	613a      	str	r2, [r7, #16]
     b34:	08e3      	lsrs	r3, r4, #3
     b36:	617b      	str	r3, [r7, #20]
     b38:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     b3c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     b40:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b44:	18db      	adds	r3, r3, r3
     b46:	eb44 0404 	adc.w	r4, r4, r4
     b4a:	00a2      	lsls	r2, r4, #2
     b4c:	60fa      	str	r2, [r7, #12]
     b4e:	68fa      	ldr	r2, [r7, #12]
     b50:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     b54:	60fa      	str	r2, [r7, #12]
     b56:	009a      	lsls	r2, r3, #2
     b58:	60ba      	str	r2, [r7, #8]
     b5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     b5e:	18c9      	adds	r1, r1, r3
     b60:	eb42 0204 	adc.w	r2, r2, r4
     b64:	460b      	mov	r3, r1
     b66:	4614      	mov	r4, r2
     b68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     b6c:	1acb      	subs	r3, r1, r3
     b6e:	eb62 0404 	sbc.w	r4, r2, r4
     b72:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     b76:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     b7a:	3306      	adds	r3, #6
     b7c:	f144 0400 	adc.w	r4, r4, #0
     b80:	091a      	lsrs	r2, r3, #4
     b82:	61ba      	str	r2, [r7, #24]
     b84:	69ba      	ldr	r2, [r7, #24]
     b86:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     b8a:	61ba      	str	r2, [r7, #24]
     b8c:	0923      	lsrs	r3, r4, #4
     b8e:	61fb      	str	r3, [r7, #28]
     b90:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     b98:	18c9      	adds	r1, r1, r3
     b9a:	eb42 0204 	adc.w	r2, r2, r4
     b9e:	460b      	mov	r3, r1
     ba0:	4614      	mov	r4, r2
     ba2:	e029      	b.n	bf8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ba6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     baa:	085a      	lsrs	r2, r3, #1
     bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     bae:	089b      	lsrs	r3, r3, #2
     bb0:	4413      	add	r3, r2
     bb2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bb6:	091b      	lsrs	r3, r3, #4
     bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     bba:	4413      	add	r3, r2
     bbc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bc0:	0a1b      	lsrs	r3, r3, #8
     bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     bc4:	4413      	add	r3, r2
     bc6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bca:	0c1b      	lsrs	r3, r3, #16
     bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     bce:	4413      	add	r3, r2
     bd0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bd4:	08db      	lsrs	r3, r3, #3
     bd6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     bda:	4613      	mov	r3, r2
     bdc:	009b      	lsls	r3, r3, #2
     bde:	4413      	add	r3, r2
     be0:	005b      	lsls	r3, r3, #1
     be2:	461a      	mov	r2, r3
     be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     be6:	1a9b      	subs	r3, r3, r2
     be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bec:	3306      	adds	r3, #6
     bee:	091a      	lsrs	r2, r3, #4
     bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bf2:	4413      	add	r3, r2
     bf4:	f04f 0400 	mov.w	r4, #0
    }
}
     bf8:	4618      	mov	r0, r3
     bfa:	4621      	mov	r1, r4
     bfc:	3758      	adds	r7, #88	; 0x58
     bfe:	46bd      	mov	sp, r7
     c00:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c04:	4770      	bx	lr
     c06:	bf00      	nop

00000c08 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     c08:	b590      	push	{r4, r7, lr}
     c0a:	b085      	sub	sp, #20
     c0c:	af00      	add	r7, sp, #0
     c0e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     c12:	683a      	ldr	r2, [r7, #0]
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	4313      	orrs	r3, r2
     c18:	2b00      	cmp	r3, #0
     c1a:	bf0c      	ite	eq
     c1c:	2301      	moveq	r3, #1
     c1e:	2300      	movne	r3, #0
     c20:	b2db      	uxtb	r3, r3
     c22:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     c24:	e008      	b.n	c38 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     c26:	e9d7 0100 	ldrd	r0, r1, [r7]
     c2a:	f7ff ff0f 	bl	a4c <divu64_10>
     c2e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     c32:	68fb      	ldr	r3, [r7, #12]
     c34:	3301      	adds	r3, #1
     c36:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     c38:	e897 0018 	ldmia.w	r7, {r3, r4}
     c3c:	4323      	orrs	r3, r4
     c3e:	d1f2      	bne.n	c26 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     c40:	68fb      	ldr	r3, [r7, #12]
}
     c42:	4618      	mov	r0, r3
     c44:	3714      	adds	r7, #20
     c46:	46bd      	mov	sp, r7
     c48:	bd90      	pop	{r4, r7, pc}
     c4a:	bf00      	nop

00000c4c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     c4c:	b590      	push	{r4, r7, lr}
     c4e:	b083      	sub	sp, #12
     c50:	af00      	add	r7, sp, #0
     c52:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     c56:	e897 0018 	ldmia.w	r7, {r3, r4}
     c5a:	2b00      	cmp	r3, #0
     c5c:	f174 0300 	sbcs.w	r3, r4, #0
     c60:	da06      	bge.n	c70 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     c62:	e897 0018 	ldmia.w	r7, {r3, r4}
     c66:	425b      	negs	r3, r3
     c68:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     c6c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     c70:	e897 0018 	ldmia.w	r7, {r3, r4}
     c74:	4618      	mov	r0, r3
     c76:	4621      	mov	r1, r4
     c78:	f7ff ffc6 	bl	c08 <ndigits_in_u64>
     c7c:	4603      	mov	r3, r0
}
     c7e:	4618      	mov	r0, r3
     c80:	370c      	adds	r7, #12
     c82:	46bd      	mov	sp, r7
     c84:	bd90      	pop	{r4, r7, pc}
     c86:	bf00      	nop

00000c88 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     c88:	b490      	push	{r4, r7}
     c8a:	b084      	sub	sp, #16
     c8c:	af00      	add	r7, sp, #0
     c8e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     c92:	6839      	ldr	r1, [r7, #0]
     c94:	687a      	ldr	r2, [r7, #4]
     c96:	430a      	orrs	r2, r1
     c98:	2a00      	cmp	r2, #0
     c9a:	bf0c      	ite	eq
     c9c:	2201      	moveq	r2, #1
     c9e:	2200      	movne	r2, #0
     ca0:	b2d2      	uxtb	r2, r2
     ca2:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     ca4:	e00a      	b.n	cbc <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     ca6:	e897 0006 	ldmia.w	r7, {r1, r2}
     caa:	090b      	lsrs	r3, r1, #4
     cac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     cb0:	0914      	lsrs	r4, r2, #4
     cb2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     cb6:	68fa      	ldr	r2, [r7, #12]
     cb8:	3201      	adds	r2, #1
     cba:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     cbc:	e897 0006 	ldmia.w	r7, {r1, r2}
     cc0:	430a      	orrs	r2, r1
     cc2:	d1f0      	bne.n	ca6 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     cc4:	68fb      	ldr	r3, [r7, #12]
}
     cc6:	4618      	mov	r0, r3
     cc8:	3710      	adds	r7, #16
     cca:	46bd      	mov	sp, r7
     ccc:	bc90      	pop	{r4, r7}
     cce:	4770      	bx	lr

00000cd0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     cd0:	b480      	push	{r7}
     cd2:	b087      	sub	sp, #28
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
     cd8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     cda:	2300      	movs	r3, #0
     cdc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     cde:	2300      	movs	r3, #0
     ce0:	613b      	str	r3, [r7, #16]
     ce2:	2300      	movs	r3, #0
     ce4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b2d      	cmp	r3, #45	; 0x2d
     cec:	d11b      	bne.n	d26 <decstr_to_int+0x56>
    {
        bNeg = true;
     cee:	2301      	movs	r3, #1
     cf0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	3301      	adds	r3, #1
     cf6:	607b      	str	r3, [r7, #4]
        uCnt++;
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	3301      	adds	r3, #1
     cfc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     cfe:	e012      	b.n	d26 <decstr_to_int+0x56>
    {
        ++uCnt;
     d00:	68fb      	ldr	r3, [r7, #12]
     d02:	3301      	adds	r3, #1
     d04:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     d06:	693a      	ldr	r2, [r7, #16]
     d08:	4613      	mov	r3, r2
     d0a:	009b      	lsls	r3, r3, #2
     d0c:	4413      	add	r3, r2
     d0e:	005b      	lsls	r3, r3, #1
     d10:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	461a      	mov	r2, r3
     d18:	693b      	ldr	r3, [r7, #16]
     d1a:	4413      	add	r3, r2
     d1c:	3b30      	subs	r3, #48	; 0x30
     d1e:	613b      	str	r3, [r7, #16]
        pcStr++;
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	3301      	adds	r3, #1
     d24:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b2f      	cmp	r3, #47	; 0x2f
     d2c:	d903      	bls.n	d36 <decstr_to_int+0x66>
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b39      	cmp	r3, #57	; 0x39
     d34:	d9e4      	bls.n	d00 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     d36:	683b      	ldr	r3, [r7, #0]
     d38:	2b00      	cmp	r3, #0
     d3a:	d002      	beq.n	d42 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     d3c:	683b      	ldr	r3, [r7, #0]
     d3e:	68fa      	ldr	r2, [r7, #12]
     d40:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     d42:	7dfb      	ldrb	r3, [r7, #23]
     d44:	2b00      	cmp	r3, #0
     d46:	d002      	beq.n	d4e <decstr_to_int+0x7e>
     d48:	693b      	ldr	r3, [r7, #16]
     d4a:	425b      	negs	r3, r3
     d4c:	e000      	b.n	d50 <decstr_to_int+0x80>
     d4e:	693b      	ldr	r3, [r7, #16]
}
     d50:	4618      	mov	r0, r3
     d52:	371c      	adds	r7, #28
     d54:	46bd      	mov	sp, r7
     d56:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5a:	4770      	bx	lr

00000d5c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     d5c:	b590      	push	{r4, r7, lr}
     d5e:	b091      	sub	sp, #68	; 0x44
     d60:	af00      	add	r7, sp, #0
     d62:	e9c7 0102 	strd	r0, r1, [r7, #8]
     d66:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     d68:	2300      	movs	r3, #0
     d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
     d6c:	2300      	movs	r3, #0
     d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     d70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     d74:	f7ff fe6a 	bl	a4c <divu64_10>
     d78:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     d7c:	68b9      	ldr	r1, [r7, #8]
     d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d80:	4613      	mov	r3, r2
     d82:	009b      	lsls	r3, r3, #2
     d84:	4413      	add	r3, r2
     d86:	005b      	lsls	r3, r3, #1
     d88:	1acb      	subs	r3, r1, r3
     d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d8e:	1c5a      	adds	r2, r3, #1
     d90:	63fa      	str	r2, [r7, #60]	; 0x3c
     d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d94:	b2d2      	uxtb	r2, r2
     d96:	3230      	adds	r2, #48	; 0x30
     d98:	b2d2      	uxtb	r2, r2
     d9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     d9e:	440b      	add	r3, r1
     da0:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     da4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     da8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     dac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     db0:	4323      	orrs	r3, r4
     db2:	d1dd      	bne.n	d70 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     db6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	2b00      	cmp	r3, #0
     dbc:	d011      	beq.n	de2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     dbe:	e008      	b.n	dd2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	1c5a      	adds	r2, r3, #1
     dc4:	607a      	str	r2, [r7, #4]
     dc6:	f107 0110 	add.w	r1, r7, #16
     dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dcc:	440a      	add	r2, r1
     dce:	7812      	ldrb	r2, [r2, #0]
     dd0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dd4:	1e5a      	subs	r2, r3, #1
     dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
     dd8:	2b00      	cmp	r3, #0
     dda:	d1f1      	bne.n	dc0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	2200      	movs	r2, #0
     de0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     de4:	4618      	mov	r0, r3
     de6:	3744      	adds	r7, #68	; 0x44
     de8:	46bd      	mov	sp, r7
     dea:	bd90      	pop	{r4, r7, pc}

00000dec <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     dec:	b4b0      	push	{r4, r5, r7}
     dee:	b08d      	sub	sp, #52	; 0x34
     df0:	af00      	add	r7, sp, #0
     df2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     df6:	607a      	str	r2, [r7, #4]
     df8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e02:	4313      	orrs	r3, r2
     e04:	d131      	bne.n	e6a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e08:	1c5a      	adds	r2, r3, #1
     e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
     e0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     e10:	4413      	add	r3, r2
     e12:	2230      	movs	r2, #48	; 0x30
     e14:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     e18:	e027      	b.n	e6a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     e1a:	7a3b      	ldrb	r3, [r7, #8]
     e1c:	f003 030f 	and.w	r3, r3, #15
     e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     e24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     e28:	2b09      	cmp	r3, #9
     e2a:	d90a      	bls.n	e42 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     e2c:	78fb      	ldrb	r3, [r7, #3]
     e2e:	2b00      	cmp	r3, #0
     e30:	d001      	beq.n	e36 <uint64_to_hexstr+0x4a>
     e32:	2227      	movs	r2, #39	; 0x27
     e34:	e000      	b.n	e38 <uint64_to_hexstr+0x4c>
     e36:	2207      	movs	r2, #7
     e38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     e3c:	4413      	add	r3, r2
     e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e44:	1c5a      	adds	r2, r3, #1
     e46:	62fa      	str	r2, [r7, #44]	; 0x2c
     e48:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     e4c:	3230      	adds	r2, #48	; 0x30
     e4e:	b2d2      	uxtb	r2, r2
     e50:	f107 0130 	add.w	r1, r7, #48	; 0x30
     e54:	440b      	add	r3, r1
     e56:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e5e:	0914      	lsrs	r4, r2, #4
     e60:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     e64:	091d      	lsrs	r5, r3, #4
     e66:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e6e:	4313      	orrs	r3, r2
     e70:	d1d3      	bne.n	e1a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e74:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	2b00      	cmp	r3, #0
     e7a:	d011      	beq.n	ea0 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     e7c:	e008      	b.n	e90 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	1c5a      	adds	r2, r3, #1
     e82:	607a      	str	r2, [r7, #4]
     e84:	f107 0110 	add.w	r1, r7, #16
     e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e8a:	440a      	add	r2, r1
     e8c:	7812      	ldrb	r2, [r2, #0]
     e8e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e92:	1e5a      	subs	r2, r3, #1
     e94:	62fa      	str	r2, [r7, #44]	; 0x2c
     e96:	2b00      	cmp	r3, #0
     e98:	d1f1      	bne.n	e7e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	2200      	movs	r2, #0
     e9e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     ea2:	4618      	mov	r0, r3
     ea4:	3734      	adds	r7, #52	; 0x34
     ea6:	46bd      	mov	sp, r7
     ea8:	bcb0      	pop	{r4, r5, r7}
     eaa:	4770      	bx	lr

00000eac <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     eac:	b480      	push	{r7}
     eae:	b085      	sub	sp, #20
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     eb4:	2300      	movs	r3, #0
     eb6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	2b00      	cmp	r3, #0
     ebc:	d104      	bne.n	ec8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     ebe:	68fb      	ldr	r3, [r7, #12]
     ec0:	e009      	b.n	ed6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	3301      	adds	r3, #1
     ec6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	1c5a      	adds	r2, r3, #1
     ecc:	607a      	str	r2, [r7, #4]
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	2b00      	cmp	r3, #0
     ed2:	d1f6      	bne.n	ec2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     ed4:	68fb      	ldr	r3, [r7, #12]
}
     ed6:	4618      	mov	r0, r3
     ed8:	3714      	adds	r7, #20
     eda:	46bd      	mov	sp, r7
     edc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ee0:	4770      	bx	lr
     ee2:	bf00      	nop

00000ee4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     ee4:	b480      	push	{r7}
     ee6:	b087      	sub	sp, #28
     ee8:	af00      	add	r7, sp, #0
     eea:	60f8      	str	r0, [r7, #12]
     eec:	460b      	mov	r3, r1
     eee:	607a      	str	r2, [r7, #4]
     ef0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     ef2:	2300      	movs	r3, #0
     ef4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	2b00      	cmp	r3, #0
     efa:	dc0c      	bgt.n	f16 <padbuffer+0x32>
    {
        return i32Cnt;
     efc:	697b      	ldr	r3, [r7, #20]
     efe:	e010      	b.n	f22 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	2b00      	cmp	r3, #0
     f04:	d004      	beq.n	f10 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	1c5a      	adds	r2, r3, #1
     f0a:	60fa      	str	r2, [r7, #12]
     f0c:	7afa      	ldrb	r2, [r7, #11]
     f0e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     f10:	697b      	ldr	r3, [r7, #20]
     f12:	3301      	adds	r3, #1
     f14:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	1e5a      	subs	r2, r3, #1
     f1a:	607a      	str	r2, [r7, #4]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d1ef      	bne.n	f00 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     f20:	697b      	ldr	r3, [r7, #20]
}
     f22:	4618      	mov	r0, r3
     f24:	371c      	adds	r7, #28
     f26:	46bd      	mov	sp, r7
     f28:	f85d 7b04 	ldr.w	r7, [sp], #4
     f2c:	4770      	bx	lr
     f2e:	bf00      	nop

00000f30 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     f30:	b590      	push	{r4, r7, lr}
     f32:	b08f      	sub	sp, #60	; 0x3c
     f34:	af00      	add	r7, sp, #0
     f36:	60f8      	str	r0, [r7, #12]
     f38:	60b9      	str	r1, [r7, #8]
     f3a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     f3c:	68bb      	ldr	r3, [r7, #8]
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f44:	2b03      	cmp	r3, #3
     f46:	dc02      	bgt.n	f4e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     f48:	f06f 0302 	mvn.w	r3, #2
     f4c:	e0d4      	b.n	10f8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     f4e:	edd7 7a03 	vldr	s15, [r7, #12]
     f52:	eef5 7a40 	vcmp.f32	s15, #0.0
     f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f5a:	d104      	bne.n	f66 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     f5c:	68bb      	ldr	r3, [r7, #8]
     f5e:	4a68      	ldr	r2, [pc, #416]	; (1100 <ftoa+0x1d0>)
     f60:	601a      	str	r2, [r3, #0]
        return 3;
     f62:	2303      	movs	r3, #3
     f64:	e0c8      	b.n	10f8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     f66:	68bb      	ldr	r3, [r7, #8]
     f68:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     f6e:	697b      	ldr	r3, [r7, #20]
     f70:	15db      	asrs	r3, r3, #23
     f72:	b2db      	uxtb	r3, r3
     f74:	3b7f      	subs	r3, #127	; 0x7f
     f76:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     f78:	697b      	ldr	r3, [r7, #20]
     f7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     f82:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     f84:	2300      	movs	r3, #0
     f86:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     f88:	2300      	movs	r3, #0
     f8a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     f8c:	6a3b      	ldr	r3, [r7, #32]
     f8e:	2b1e      	cmp	r3, #30
     f90:	dd02      	ble.n	f98 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     f92:	f06f 0301 	mvn.w	r3, #1
     f96:	e0af      	b.n	10f8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     f98:	6a3b      	ldr	r3, [r7, #32]
     f9a:	f113 0f17 	cmn.w	r3, #23
     f9e:	da02      	bge.n	fa6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     fa0:	f04f 33ff 	mov.w	r3, #4294967295
     fa4:	e0a8      	b.n	10f8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     fa6:	6a3b      	ldr	r3, [r7, #32]
     fa8:	2b16      	cmp	r3, #22
     faa:	dd06      	ble.n	fba <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     fac:	6a3b      	ldr	r3, [r7, #32]
     fae:	3b17      	subs	r3, #23
     fb0:	69fa      	ldr	r2, [r7, #28]
     fb2:	fa02 f303 	lsl.w	r3, r2, r3
     fb6:	637b      	str	r3, [r7, #52]	; 0x34
     fb8:	e01a      	b.n	ff0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     fba:	6a3b      	ldr	r3, [r7, #32]
     fbc:	2b00      	cmp	r3, #0
     fbe:	db0f      	blt.n	fe0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     fc0:	6a3b      	ldr	r3, [r7, #32]
     fc2:	f1c3 0317 	rsb	r3, r3, #23
     fc6:	69fa      	ldr	r2, [r7, #28]
     fc8:	fa42 f303 	asr.w	r3, r2, r3
     fcc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     fce:	6a3b      	ldr	r3, [r7, #32]
     fd0:	3301      	adds	r3, #1
     fd2:	69fa      	ldr	r2, [r7, #28]
     fd4:	fa02 f303 	lsl.w	r3, r2, r3
     fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     fdc:	633b      	str	r3, [r7, #48]	; 0x30
     fde:	e007      	b.n	ff0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     fe0:	69fb      	ldr	r3, [r7, #28]
     fe2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     fe6:	6a3b      	ldr	r3, [r7, #32]
     fe8:	43db      	mvns	r3, r3
     fea:	fa42 f303 	asr.w	r3, r2, r3
     fee:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     ff0:	697b      	ldr	r3, [r7, #20]
     ff2:	2b00      	cmp	r3, #0
     ff4:	da04      	bge.n	1000 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     ff6:	68bb      	ldr	r3, [r7, #8]
     ff8:	1c5a      	adds	r2, r3, #1
     ffa:	60ba      	str	r2, [r7, #8]
     ffc:	222d      	movs	r2, #45	; 0x2d
     ffe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    1000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1002:	2b00      	cmp	r3, #0
    1004:	d105      	bne.n	1012 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    1006:	68bb      	ldr	r3, [r7, #8]
    1008:	1c5a      	adds	r2, r3, #1
    100a:	60ba      	str	r2, [r7, #8]
    100c:	2230      	movs	r2, #48	; 0x30
    100e:	701a      	strb	r2, [r3, #0]
    1010:	e021      	b.n	1056 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    1012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1014:	2b00      	cmp	r3, #0
    1016:	dd08      	ble.n	102a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    1018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    101a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    101e:	68ba      	ldr	r2, [r7, #8]
    1020:	4618      	mov	r0, r3
    1022:	4621      	mov	r1, r4
    1024:	f7ff fe9a 	bl	d5c <uint64_to_str>
    1028:	e011      	b.n	104e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	1c5a      	adds	r2, r3, #1
    102e:	60ba      	str	r2, [r7, #8]
    1030:	222d      	movs	r2, #45	; 0x2d
    1032:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    1034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1036:	425b      	negs	r3, r3
    1038:	ea4f 74e3 	mov.w	r4, r3, asr #31
    103c:	68ba      	ldr	r2, [r7, #8]
    103e:	4618      	mov	r0, r3
    1040:	4621      	mov	r1, r4
    1042:	f7ff fe8b 	bl	d5c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1046:	e002      	b.n	104e <ftoa+0x11e>
        {
            pcBuf++;
    1048:	68bb      	ldr	r3, [r7, #8]
    104a:	3301      	adds	r3, #1
    104c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    104e:	68bb      	ldr	r3, [r7, #8]
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	2b00      	cmp	r3, #0
    1054:	d1f8      	bne.n	1048 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	1c5a      	adds	r2, r3, #1
    105a:	60ba      	str	r2, [r7, #8]
    105c:	222e      	movs	r2, #46	; 0x2e
    105e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1062:	2b00      	cmp	r3, #0
    1064:	d105      	bne.n	1072 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    1066:	68bb      	ldr	r3, [r7, #8]
    1068:	1c5a      	adds	r2, r3, #1
    106a:	60ba      	str	r2, [r7, #8]
    106c:	2230      	movs	r2, #48	; 0x30
    106e:	701a      	strb	r2, [r3, #0]
    1070:	e03c      	b.n	10ec <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1072:	68ba      	ldr	r2, [r7, #8]
    1074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1076:	1ad3      	subs	r3, r2, r3
    1078:	6aba      	ldr	r2, [r7, #40]	; 0x28
    107a:	1ad3      	subs	r3, r2, r3
    107c:	3b01      	subs	r3, #1
    107e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1080:	69ba      	ldr	r2, [r7, #24]
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	4293      	cmp	r3, r2
    1086:	bfa8      	it	ge
    1088:	4613      	movge	r3, r2
    108a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    108c:	2300      	movs	r3, #0
    108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1090:	e015      	b.n	10be <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1094:	4613      	mov	r3, r2
    1096:	009b      	lsls	r3, r3, #2
    1098:	4413      	add	r3, r2
    109a:	005b      	lsls	r3, r3, #1
    109c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    109e:	68bb      	ldr	r3, [r7, #8]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60ba      	str	r2, [r7, #8]
    10a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    10a6:	1612      	asrs	r2, r2, #24
    10a8:	b2d2      	uxtb	r2, r2
    10aa:	3230      	adds	r2, #48	; 0x30
    10ac:	b2d2      	uxtb	r2, r2
    10ae:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    10b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    10b6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    10b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10ba:	3301      	adds	r3, #1
    10bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    10be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    10c0:	69bb      	ldr	r3, [r7, #24]
    10c2:	429a      	cmp	r2, r3
    10c4:	dbe5      	blt.n	1092 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    10c6:	68bb      	ldr	r3, [r7, #8]
    10c8:	3b01      	subs	r3, #1
    10ca:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    10cc:	e002      	b.n	10d4 <ftoa+0x1a4>
        {
            --pcBuf;
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	3b01      	subs	r3, #1
    10d2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    10d4:	68bb      	ldr	r3, [r7, #8]
    10d6:	781b      	ldrb	r3, [r3, #0]
    10d8:	2b30      	cmp	r3, #48	; 0x30
    10da:	d104      	bne.n	10e6 <ftoa+0x1b6>
    10dc:	68bb      	ldr	r3, [r7, #8]
    10de:	3b01      	subs	r3, #1
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	2b2e      	cmp	r3, #46	; 0x2e
    10e4:	d1f3      	bne.n	10ce <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    10e6:	68bb      	ldr	r3, [r7, #8]
    10e8:	3301      	adds	r3, #1
    10ea:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	2200      	movs	r2, #0
    10f0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    10f2:	68ba      	ldr	r2, [r7, #8]
    10f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10f6:	1ad3      	subs	r3, r2, r3
} // ftoa()
    10f8:	4618      	mov	r0, r3
    10fa:	373c      	adds	r7, #60	; 0x3c
    10fc:	46bd      	mov	sp, r7
    10fe:	bd90      	pop	{r4, r7, pc}
    1100:	00302e30 	.word	0x00302e30

00001104 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    1104:	b590      	push	{r4, r7, lr}
    1106:	b095      	sub	sp, #84	; 0x54
    1108:	af00      	add	r7, sp, #0
    110a:	60f8      	str	r0, [r7, #12]
    110c:	60b9      	str	r1, [r7, #8]
    110e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    1110:	2300      	movs	r3, #0
    1112:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1114:	2300      	movs	r3, #0
    1116:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1118:	e2e3      	b.n	16e2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    111a:	2306      	movs	r3, #6
    111c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    111e:	68bb      	ldr	r3, [r7, #8]
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	2b25      	cmp	r3, #37	; 0x25
    1124:	d01f      	beq.n	1166 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    1126:	68fb      	ldr	r3, [r7, #12]
    1128:	2b00      	cmp	r3, #0
    112a:	d015      	beq.n	1158 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    112c:	68bb      	ldr	r3, [r7, #8]
    112e:	781b      	ldrb	r3, [r3, #0]
    1130:	2b0a      	cmp	r3, #10
    1132:	d10b      	bne.n	114c <am_util_stdio_vsprintf+0x48>
    1134:	4bb1      	ldr	r3, [pc, #708]	; (13fc <am_util_stdio_vsprintf+0x2f8>)
    1136:	781b      	ldrb	r3, [r3, #0]
    1138:	2b00      	cmp	r3, #0
    113a:	d007      	beq.n	114c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    113c:	68fb      	ldr	r3, [r7, #12]
    113e:	1c5a      	adds	r2, r3, #1
    1140:	60fa      	str	r2, [r7, #12]
    1142:	220d      	movs	r2, #13
    1144:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1148:	3301      	adds	r3, #1
    114a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    114c:	68fb      	ldr	r3, [r7, #12]
    114e:	1c5a      	adds	r2, r3, #1
    1150:	60fa      	str	r2, [r7, #12]
    1152:	68ba      	ldr	r2, [r7, #8]
    1154:	7812      	ldrb	r2, [r2, #0]
    1156:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1158:	68bb      	ldr	r3, [r7, #8]
    115a:	3301      	adds	r3, #1
    115c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    115e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1160:	3301      	adds	r3, #1
    1162:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1164:	e2bd      	b.n	16e2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1166:	68bb      	ldr	r3, [r7, #8]
    1168:	3301      	adds	r3, #1
    116a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    116c:	2300      	movs	r3, #0
    116e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1172:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1176:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    117a:	2320      	movs	r3, #32
    117c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1180:	68bb      	ldr	r3, [r7, #8]
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	2b30      	cmp	r3, #48	; 0x30
    1186:	d105      	bne.n	1194 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1188:	2330      	movs	r3, #48	; 0x30
    118a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    118e:	68bb      	ldr	r3, [r7, #8]
    1190:	3301      	adds	r3, #1
    1192:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1194:	f107 0310 	add.w	r3, r7, #16
    1198:	4619      	mov	r1, r3
    119a:	68b8      	ldr	r0, [r7, #8]
    119c:	f7ff fd98 	bl	cd0 <decstr_to_int>
    11a0:	4603      	mov	r3, r0
    11a2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    11a4:	693b      	ldr	r3, [r7, #16]
    11a6:	68ba      	ldr	r2, [r7, #8]
    11a8:	4413      	add	r3, r2
    11aa:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    11ac:	68bb      	ldr	r3, [r7, #8]
    11ae:	781b      	ldrb	r3, [r3, #0]
    11b0:	2b73      	cmp	r3, #115	; 0x73
    11b2:	d005      	beq.n	11c0 <am_util_stdio_vsprintf+0xbc>
    11b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b6:	2b00      	cmp	r3, #0
    11b8:	da02      	bge.n	11c0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    11ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11bc:	425b      	negs	r3, r3
    11be:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    11c0:	68bb      	ldr	r3, [r7, #8]
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	2b2e      	cmp	r3, #46	; 0x2e
    11c6:	d10e      	bne.n	11e6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    11c8:	68bb      	ldr	r3, [r7, #8]
    11ca:	3301      	adds	r3, #1
    11cc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    11ce:	f107 0310 	add.w	r3, r7, #16
    11d2:	4619      	mov	r1, r3
    11d4:	68b8      	ldr	r0, [r7, #8]
    11d6:	f7ff fd7b 	bl	cd0 <decstr_to_int>
    11da:	4603      	mov	r3, r0
    11dc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    11de:	693b      	ldr	r3, [r7, #16]
    11e0:	68ba      	ldr	r2, [r7, #8]
    11e2:	4413      	add	r3, r2
    11e4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    11e6:	68bb      	ldr	r3, [r7, #8]
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	2b6c      	cmp	r3, #108	; 0x6c
    11ec:	d10c      	bne.n	1208 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	3301      	adds	r3, #1
    11f2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    11f4:	68bb      	ldr	r3, [r7, #8]
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b6c      	cmp	r3, #108	; 0x6c
    11fa:	d105      	bne.n	1208 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    11fc:	68bb      	ldr	r3, [r7, #8]
    11fe:	3301      	adds	r3, #1
    1200:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    1202:	2301      	movs	r3, #1
    1204:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    1208:	68bb      	ldr	r3, [r7, #8]
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	3b46      	subs	r3, #70	; 0x46
    120e:	2b32      	cmp	r3, #50	; 0x32
    1210:	f200 8254 	bhi.w	16bc <am_util_stdio_vsprintf+0x5b8>
    1214:	a201      	add	r2, pc, #4	; (adr r2, 121c <am_util_stdio_vsprintf+0x118>)
    1216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    121a:	bf00      	nop
    121c:	00001647 	.word	0x00001647
    1220:	000016bd 	.word	0x000016bd
    1224:	000016bd 	.word	0x000016bd
    1228:	000016bd 	.word	0x000016bd
    122c:	000016bd 	.word	0x000016bd
    1230:	000016bd 	.word	0x000016bd
    1234:	000016bd 	.word	0x000016bd
    1238:	000016bd 	.word	0x000016bd
    123c:	000016bd 	.word	0x000016bd
    1240:	000016bd 	.word	0x000016bd
    1244:	000016bd 	.word	0x000016bd
    1248:	000016bd 	.word	0x000016bd
    124c:	000016bd 	.word	0x000016bd
    1250:	000016bd 	.word	0x000016bd
    1254:	000016bd 	.word	0x000016bd
    1258:	000016bd 	.word	0x000016bd
    125c:	000016bd 	.word	0x000016bd
    1260:	000016bd 	.word	0x000016bd
    1264:	000013e3 	.word	0x000013e3
    1268:	000016bd 	.word	0x000016bd
    126c:	000016bd 	.word	0x000016bd
    1270:	000016bd 	.word	0x000016bd
    1274:	000016bd 	.word	0x000016bd
    1278:	000016bd 	.word	0x000016bd
    127c:	000016bd 	.word	0x000016bd
    1280:	000016bd 	.word	0x000016bd
    1284:	000016bd 	.word	0x000016bd
    1288:	000016bd 	.word	0x000016bd
    128c:	000016bd 	.word	0x000016bd
    1290:	000012e9 	.word	0x000012e9
    1294:	0000150f 	.word	0x0000150f
    1298:	000016bd 	.word	0x000016bd
    129c:	00001647 	.word	0x00001647
    12a0:	000016bd 	.word	0x000016bd
    12a4:	000016bd 	.word	0x000016bd
    12a8:	0000150f 	.word	0x0000150f
    12ac:	000016bd 	.word	0x000016bd
    12b0:	000016bd 	.word	0x000016bd
    12b4:	000016bd 	.word	0x000016bd
    12b8:	000016bd 	.word	0x000016bd
    12bc:	000016bd 	.word	0x000016bd
    12c0:	000016bd 	.word	0x000016bd
    12c4:	000016bd 	.word	0x000016bd
    12c8:	000016bd 	.word	0x000016bd
    12cc:	000016bd 	.word	0x000016bd
    12d0:	0000130f 	.word	0x0000130f
    12d4:	000016bd 	.word	0x000016bd
    12d8:	0000147d 	.word	0x0000147d
    12dc:	000016bd 	.word	0x000016bd
    12e0:	000016bd 	.word	0x000016bd
    12e4:	000013dd 	.word	0x000013dd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	1d1a      	adds	r2, r3, #4
    12ec:	607a      	str	r2, [r7, #4]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d005      	beq.n	1306 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	1c5a      	adds	r2, r3, #1
    12fe:	60fa      	str	r2, [r7, #12]
    1300:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1304:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1308:	3301      	adds	r3, #1
    130a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    130c:	e1e6      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	1d1a      	adds	r2, r3, #4
    1312:	607a      	str	r2, [r7, #4]
    1314:	681b      	ldr	r3, [r3, #0]
    1316:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1318:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    131a:	f7ff fdc7 	bl	eac <simple_strlen>
    131e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1322:	2b00      	cmp	r3, #0
    1324:	dd2e      	ble.n	1384 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    132a:	429a      	cmp	r2, r3
    132c:	d22a      	bcs.n	1384 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    132e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1332:	1ad3      	subs	r3, r2, r3
    1334:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    133a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    133c:	4619      	mov	r1, r3
    133e:	68f8      	ldr	r0, [r7, #12]
    1340:	f7ff fdd0 	bl	ee4 <padbuffer>
    1344:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	2b00      	cmp	r3, #0
    134a:	d001      	beq.n	1350 <am_util_stdio_vsprintf+0x24c>
    134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    134e:	e000      	b.n	1352 <am_util_stdio_vsprintf+0x24e>
    1350:	2300      	movs	r3, #0
    1352:	68fa      	ldr	r2, [r7, #12]
    1354:	4413      	add	r3, r2
    1356:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    135a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    135c:	4413      	add	r3, r2
    135e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1360:	2300      	movs	r3, #0
    1362:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1364:	e00e      	b.n	1384 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	2b00      	cmp	r3, #0
    136a:	d005      	beq.n	1378 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	1c5a      	adds	r2, r3, #1
    1370:	60fa      	str	r2, [r7, #12]
    1372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1374:	7812      	ldrb	r2, [r2, #0]
    1376:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    137a:	3301      	adds	r3, #1
    137c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1380:	3301      	adds	r3, #1
    1382:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1386:	781b      	ldrb	r3, [r3, #0]
    1388:	2b00      	cmp	r3, #0
    138a:	d1ec      	bne.n	1366 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    138e:	2b00      	cmp	r3, #0
    1390:	f000 81a1 	beq.w	16d6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1396:	425b      	negs	r3, r3
    1398:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    139e:	429a      	cmp	r2, r3
    13a0:	f080 8199 	bcs.w	16d6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    13a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13a8:	1ad3      	subs	r3, r2, r3
    13aa:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13b2:	4619      	mov	r1, r3
    13b4:	68f8      	ldr	r0, [r7, #12]
    13b6:	f7ff fd95 	bl	ee4 <padbuffer>
    13ba:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <am_util_stdio_vsprintf+0x2c2>
    13c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c4:	e000      	b.n	13c8 <am_util_stdio_vsprintf+0x2c4>
    13c6:	2300      	movs	r3, #0
    13c8:	68fa      	ldr	r2, [r7, #12]
    13ca:	4413      	add	r3, r2
    13cc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    13ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13d2:	4413      	add	r3, r2
    13d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    13da:	e17c      	b.n	16d6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    13dc:	2301      	movs	r3, #1
    13de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13e6:	2b00      	cmp	r3, #0
    13e8:	d00a      	beq.n	1400 <am_util_stdio_vsprintf+0x2fc>
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	3307      	adds	r3, #7
    13ee:	f023 0307 	bic.w	r3, r3, #7
    13f2:	f103 0208 	add.w	r2, r3, #8
    13f6:	607a      	str	r2, [r7, #4]
    13f8:	cb18      	ldmia	r3, {r3, r4}
    13fa:	e007      	b.n	140c <am_util_stdio_vsprintf+0x308>
    13fc:	10001178 	.word	0x10001178
                                      va_arg(pArgs, uint32_t);
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	1d1a      	adds	r2, r3, #4
    1404:	607a      	str	r2, [r7, #4]
    1406:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1408:	f04f 0400 	mov.w	r4, #0
    140c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1412:	2b00      	cmp	r3, #0
    1414:	d01e      	beq.n	1454 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1416:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    141a:	f7ff fc35 	bl	c88 <ndigits_in_hex>
    141e:	4602      	mov	r2, r0
    1420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1422:	1a9b      	subs	r3, r3, r2
    1424:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    142a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    142c:	4619      	mov	r1, r3
    142e:	68f8      	ldr	r0, [r7, #12]
    1430:	f7ff fd58 	bl	ee4 <padbuffer>
    1434:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	2b00      	cmp	r3, #0
    143a:	d001      	beq.n	1440 <am_util_stdio_vsprintf+0x33c>
    143c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    143e:	e000      	b.n	1442 <am_util_stdio_vsprintf+0x33e>
    1440:	2300      	movs	r3, #0
    1442:	68fa      	ldr	r2, [r7, #12]
    1444:	4413      	add	r3, r2
    1446:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    144a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    144c:	4413      	add	r3, r2
    144e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1450:	2300      	movs	r3, #0
    1452:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1454:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1458:	68fa      	ldr	r2, [r7, #12]
    145a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    145e:	f7ff fcc5 	bl	dec <uint64_to_hexstr>
    1462:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1464:	68fb      	ldr	r3, [r7, #12]
    1466:	2b00      	cmp	r3, #0
    1468:	d003      	beq.n	1472 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    146c:	68fa      	ldr	r2, [r7, #12]
    146e:	4413      	add	r3, r2
    1470:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1476:	4413      	add	r3, r2
    1478:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    147a:	e12f      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    147c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1480:	2b00      	cmp	r3, #0
    1482:	d008      	beq.n	1496 <am_util_stdio_vsprintf+0x392>
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	3307      	adds	r3, #7
    1488:	f023 0307 	bic.w	r3, r3, #7
    148c:	f103 0208 	add.w	r2, r3, #8
    1490:	607a      	str	r2, [r7, #4]
    1492:	cb18      	ldmia	r3, {r3, r4}
    1494:	e005      	b.n	14a2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	1d1a      	adds	r2, r3, #4
    149a:	607a      	str	r2, [r7, #4]
    149c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    149e:	f04f 0400 	mov.w	r4, #0
    14a2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    14a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14a8:	2b00      	cmp	r3, #0
    14aa:	d01e      	beq.n	14ea <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    14ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14b0:	f7ff fbaa 	bl	c08 <ndigits_in_u64>
    14b4:	4602      	mov	r2, r0
    14b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14b8:	1a9b      	subs	r3, r3, r2
    14ba:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    14bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    14c2:	4619      	mov	r1, r3
    14c4:	68f8      	ldr	r0, [r7, #12]
    14c6:	f7ff fd0d 	bl	ee4 <padbuffer>
    14ca:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    14cc:	68fb      	ldr	r3, [r7, #12]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d001      	beq.n	14d6 <am_util_stdio_vsprintf+0x3d2>
    14d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14d4:	e000      	b.n	14d8 <am_util_stdio_vsprintf+0x3d4>
    14d6:	2300      	movs	r3, #0
    14d8:	68fa      	ldr	r2, [r7, #12]
    14da:	4413      	add	r3, r2
    14dc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    14de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14e2:	4413      	add	r3, r2
    14e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    14e6:	2300      	movs	r3, #0
    14e8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    14ea:	68fa      	ldr	r2, [r7, #12]
    14ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14f0:	f7ff fc34 	bl	d5c <uint64_to_str>
    14f4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d003      	beq.n	1504 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    14fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	4413      	add	r3, r2
    1502:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1508:	4413      	add	r3, r2
    150a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    150c:	e0e6      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    150e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1512:	2b00      	cmp	r3, #0
    1514:	d008      	beq.n	1528 <am_util_stdio_vsprintf+0x424>
    1516:	687b      	ldr	r3, [r7, #4]
    1518:	3307      	adds	r3, #7
    151a:	f023 0307 	bic.w	r3, r3, #7
    151e:	f103 0208 	add.w	r2, r3, #8
    1522:	607a      	str	r2, [r7, #4]
    1524:	cb18      	ldmia	r3, {r3, r4}
    1526:	e005      	b.n	1534 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	1d1a      	adds	r2, r3, #4
    152c:	607a      	str	r2, [r7, #4]
    152e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1530:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1534:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1538:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    153c:	2b00      	cmp	r3, #0
    153e:	f174 0300 	sbcs.w	r3, r4, #0
    1542:	da0a      	bge.n	155a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1544:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1548:	425b      	negs	r3, r3
    154a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    154e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1552:	2301      	movs	r3, #1
    1554:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1558:	e006      	b.n	1568 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    155a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    155e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1562:	2300      	movs	r3, #0
    1564:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    156a:	2b00      	cmp	r3, #0
    156c:	d04a      	beq.n	1604 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    156e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1572:	4618      	mov	r0, r3
    1574:	4621      	mov	r1, r4
    1576:	f7ff fb69 	bl	c4c <ndigits_in_i64>
    157a:	4602      	mov	r2, r0
    157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    157e:	1a9b      	subs	r3, r3, r2
    1580:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1586:	2b00      	cmp	r3, #0
    1588:	d011      	beq.n	15ae <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    158c:	3b01      	subs	r3, #1
    158e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1594:	2b30      	cmp	r3, #48	; 0x30
    1596:	d10a      	bne.n	15ae <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	2b00      	cmp	r3, #0
    159c:	d004      	beq.n	15a8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	1c5a      	adds	r2, r3, #1
    15a2:	60fa      	str	r2, [r7, #12]
    15a4:	222d      	movs	r2, #45	; 0x2d
    15a6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    15a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15aa:	3301      	adds	r3, #1
    15ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    15ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    15b4:	4619      	mov	r1, r3
    15b6:	68f8      	ldr	r0, [r7, #12]
    15b8:	f7ff fc94 	bl	ee4 <padbuffer>
    15bc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    15be:	68fb      	ldr	r3, [r7, #12]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d001      	beq.n	15c8 <am_util_stdio_vsprintf+0x4c4>
    15c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15c6:	e000      	b.n	15ca <am_util_stdio_vsprintf+0x4c6>
    15c8:	2300      	movs	r3, #0
    15ca:	68fa      	ldr	r2, [r7, #12]
    15cc:	4413      	add	r3, r2
    15ce:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    15d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15d4:	4413      	add	r3, r2
    15d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    15d8:	2300      	movs	r3, #0
    15da:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    15dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    15e0:	2b00      	cmp	r3, #0
    15e2:	d01e      	beq.n	1622 <am_util_stdio_vsprintf+0x51e>
    15e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15e8:	2b20      	cmp	r3, #32
    15ea:	d11a      	bne.n	1622 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	2b00      	cmp	r3, #0
    15f0:	d004      	beq.n	15fc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    15f2:	68fb      	ldr	r3, [r7, #12]
    15f4:	1c5a      	adds	r2, r3, #1
    15f6:	60fa      	str	r2, [r7, #12]
    15f8:	222d      	movs	r2, #45	; 0x2d
    15fa:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    15fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15fe:	3301      	adds	r3, #1
    1600:	63fb      	str	r3, [r7, #60]	; 0x3c
    1602:	e00e      	b.n	1622 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1604:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1608:	2b00      	cmp	r3, #0
    160a:	d00a      	beq.n	1622 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	2b00      	cmp	r3, #0
    1610:	d004      	beq.n	161c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	1c5a      	adds	r2, r3, #1
    1616:	60fa      	str	r2, [r7, #12]
    1618:	222d      	movs	r2, #45	; 0x2d
    161a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    161e:	3301      	adds	r3, #1
    1620:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1622:	68fa      	ldr	r2, [r7, #12]
    1624:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1628:	f7ff fb98 	bl	d5c <uint64_to_str>
    162c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	2b00      	cmp	r3, #0
    1632:	d003      	beq.n	163c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1636:	68fa      	ldr	r2, [r7, #12]
    1638:	4413      	add	r3, r2
    163a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    163e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1640:	4413      	add	r3, r2
    1642:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1644:	e04a      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1646:	68fb      	ldr	r3, [r7, #12]
    1648:	2b00      	cmp	r3, #0
    164a:	d046      	beq.n	16da <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	3307      	adds	r3, #7
    1650:	f023 0307 	bic.w	r3, r3, #7
    1654:	f103 0208 	add.w	r2, r3, #8
    1658:	607a      	str	r2, [r7, #4]
    165a:	cb18      	ldmia	r3, {r3, r4}
    165c:	4618      	mov	r0, r3
    165e:	4621      	mov	r1, r4
    1660:	f7fe fd2e 	bl	c0 <__aeabi_d2f>
    1664:	4603      	mov	r3, r0
    1666:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	2214      	movs	r2, #20
    166c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    166e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1670:	68f9      	ldr	r1, [r7, #12]
    1672:	6978      	ldr	r0, [r7, #20]
    1674:	f7ff fc5c 	bl	f30 <ftoa>
    1678:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    167c:	2b00      	cmp	r3, #0
    167e:	da14      	bge.n	16aa <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1682:	f1b3 3fff 	cmp.w	r3, #4294967295
    1686:	d102      	bne.n	168e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1688:	4b1e      	ldr	r3, [pc, #120]	; (1704 <am_util_stdio_vsprintf+0x600>)
    168a:	62bb      	str	r3, [r7, #40]	; 0x28
    168c:	e008      	b.n	16a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1690:	f113 0f02 	cmn.w	r3, #2
    1694:	d102      	bne.n	169c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1696:	4b1c      	ldr	r3, [pc, #112]	; (1708 <am_util_stdio_vsprintf+0x604>)
    1698:	62bb      	str	r3, [r7, #40]	; 0x28
    169a:	e001      	b.n	16a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    169c:	4b1b      	ldr	r3, [pc, #108]	; (170c <am_util_stdio_vsprintf+0x608>)
    169e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16a4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    16a6:	2303      	movs	r3, #3
    16a8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    16aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16ae:	4413      	add	r3, r2
    16b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    16b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16b4:	68fa      	ldr	r2, [r7, #12]
    16b6:	4413      	add	r3, r2
    16b8:	60fb      	str	r3, [r7, #12]
                }
                break;
    16ba:	e00e      	b.n	16da <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	2b00      	cmp	r3, #0
    16c0:	d005      	beq.n	16ce <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    16c2:	68fb      	ldr	r3, [r7, #12]
    16c4:	1c5a      	adds	r2, r3, #1
    16c6:	60fa      	str	r2, [r7, #12]
    16c8:	68ba      	ldr	r2, [r7, #8]
    16ca:	7812      	ldrb	r2, [r2, #0]
    16cc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    16ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16d0:	3301      	adds	r3, #1
    16d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    16d4:	e002      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    16d6:	bf00      	nop
    16d8:	e000      	b.n	16dc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    16da:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    16dc:	68bb      	ldr	r3, [r7, #8]
    16de:	3301      	adds	r3, #1
    16e0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    16e2:	68bb      	ldr	r3, [r7, #8]
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	f47f ad17 	bne.w	111a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    16ec:	68fb      	ldr	r3, [r7, #12]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d002      	beq.n	16f8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    16f2:	68fb      	ldr	r3, [r7, #12]
    16f4:	2200      	movs	r2, #0
    16f6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    16f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    16fa:	4618      	mov	r0, r3
    16fc:	3754      	adds	r7, #84	; 0x54
    16fe:	46bd      	mov	sp, r7
    1700:	bd90      	pop	{r4, r7, pc}
    1702:	bf00      	nop
    1704:	00302e30 	.word	0x00302e30
    1708:	00232e23 	.word	0x00232e23
    170c:	003f2e3f 	.word	0x003f2e3f

00001710 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1710:	b40f      	push	{r0, r1, r2, r3}
    1712:	b580      	push	{r7, lr}
    1714:	b082      	sub	sp, #8
    1716:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1718:	f107 0314 	add.w	r3, r7, #20
    171c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    171e:	683a      	ldr	r2, [r7, #0]
    1720:	6939      	ldr	r1, [r7, #16]
    1722:	4808      	ldr	r0, [pc, #32]	; (1744 <am_util_stdio_printf+0x34>)
    1724:	f7ff fcee 	bl	1104 <am_util_stdio_vsprintf>
    1728:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    172a:	4b07      	ldr	r3, [pc, #28]	; (1748 <am_util_stdio_printf+0x38>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	4805      	ldr	r0, [pc, #20]	; (1744 <am_util_stdio_printf+0x34>)
    1730:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1732:	687b      	ldr	r3, [r7, #4]
}
    1734:	4618      	mov	r0, r3
    1736:	3708      	adds	r7, #8
    1738:	46bd      	mov	sp, r7
    173a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    173e:	b004      	add	sp, #16
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	10001078 	.word	0x10001078
    1748:	10001180 	.word	0x10001180

0000174c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    174c:	b580      	push	{r7, lr}
    174e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1750:	4802      	ldr	r0, [pc, #8]	; (175c <am_util_stdio_terminal_clear+0x10>)
    1752:	f7ff ffdd 	bl	1710 <am_util_stdio_printf>
}
    1756:	bf00      	nop
    1758:	bd80      	pop	{r7, pc}
    175a:	bf00      	nop
    175c:	00001ef8 	.word	0x00001ef8

00001760 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1760:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1762:	f000 faf1 	bl	1d48 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1766:	f000 fb13 	bl	1d90 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    176a:	f000 fb93 	bl	1e94 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    176e:	2001      	movs	r0, #1
    1770:	f000 fb1e 	bl	1db0 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1774:	2001      	movs	r0, #1
    1776:	f000 f945 	bl	1a04 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    177a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    177e:	f000 bb25 	b.w	1dcc <am_hal_rtc_osc_disable>
    1782:	bf00      	nop

00001784 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1784:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1786:	4b17      	ldr	r3, [pc, #92]	; (17e4 <am_bsp_debug_printf_enable+0x60>)
    1788:	6818      	ldr	r0, [r3, #0]
    178a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    178e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1790:	d001      	beq.n	1796 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1792:	b007      	add	sp, #28
    1794:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1796:	4a14      	ldr	r2, [pc, #80]	; (17e8 <am_bsp_debug_printf_enable+0x64>)
    1798:	4914      	ldr	r1, [pc, #80]	; (17ec <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    179a:	4d15      	ldr	r5, [pc, #84]	; (17f0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    179c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    179e:	a806      	add	r0, sp, #24
    17a0:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    17a4:	f000 fb1a 	bl	1ddc <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    17a8:	f3ef 8310 	mrs	r3, PRIMASK
    17ac:	9300      	str	r3, [sp, #0]
    17ae:	b672      	cpsid	i
    17b0:	4a10      	ldr	r2, [pc, #64]	; (17f4 <am_bsp_debug_printf_enable+0x70>)
    17b2:	4d11      	ldr	r5, [pc, #68]	; (17f8 <am_bsp_debug_printf_enable+0x74>)
    17b4:	4811      	ldr	r0, [pc, #68]	; (17fc <am_bsp_debug_printf_enable+0x78>)
    17b6:	4912      	ldr	r1, [pc, #72]	; (1800 <am_bsp_debug_printf_enable+0x7c>)
    17b8:	2373      	movs	r3, #115	; 0x73
    17ba:	6013      	str	r3, [r2, #0]
    17bc:	682b      	ldr	r3, [r5, #0]
    17be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    17c2:	602b      	str	r3, [r5, #0]
    17c4:	6805      	ldr	r5, [r0, #0]
    17c6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    17ca:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    17ce:	6003      	str	r3, [r0, #0]
    17d0:	6808      	ldr	r0, [r1, #0]
    17d2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    17d6:	600d      	str	r5, [r1, #0]
    17d8:	6014      	str	r4, [r2, #0]
    17da:	9c00      	ldr	r4, [sp, #0]
    17dc:	f384 8810 	msr	PRIMASK, r4
}
    17e0:	b007      	add	sp, #28
    17e2:	bd30      	pop	{r4, r5, pc}
    17e4:	1000117c 	.word	0x1000117c
    17e8:	e0000e80 	.word	0xe0000e80
    17ec:	00150511 	.word	0x00150511
    17f0:	000f4240 	.word	0x000f4240
    17f4:	40010060 	.word	0x40010060
    17f8:	40010054 	.word	0x40010054
    17fc:	40010028 	.word	0x40010028
    1800:	40010108 	.word	0x40010108

00001804 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1804:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1806:	4b15      	ldr	r3, [pc, #84]	; (185c <am_bsp_debug_printf_disable+0x58>)
    1808:	6818      	ldr	r0, [r3, #0]
    180a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    180e:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1810:	d121      	bne.n	1856 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1812:	f000 f94b 	bl	1aac <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1816:	f3ef 8110 	mrs	r1, PRIMASK
    181a:	9101      	str	r1, [sp, #4]
    181c:	b672      	cpsid	i
    181e:	4a10      	ldr	r2, [pc, #64]	; (1860 <am_bsp_debug_printf_disable+0x5c>)
    1820:	4d10      	ldr	r5, [pc, #64]	; (1864 <am_bsp_debug_printf_disable+0x60>)
    1822:	4811      	ldr	r0, [pc, #68]	; (1868 <am_bsp_debug_printf_disable+0x64>)
    1824:	4911      	ldr	r1, [pc, #68]	; (186c <am_bsp_debug_printf_disable+0x68>)
    1826:	2373      	movs	r3, #115	; 0x73
    1828:	6013      	str	r3, [r2, #0]
    182a:	682b      	ldr	r3, [r5, #0]
    182c:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1830:	f04c 0320 	orr.w	r3, ip, #32
    1834:	602b      	str	r3, [r5, #0]
    1836:	6805      	ldr	r5, [r0, #0]
    1838:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    183c:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1840:	6003      	str	r3, [r0, #0]
    1842:	6808      	ldr	r0, [r1, #0]
    1844:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1848:	600d      	str	r5, [r1, #0]
    184a:	6014      	str	r4, [r2, #0]
    184c:	9c01      	ldr	r4, [sp, #4]
    184e:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1852:	f000 fb19 	bl	1e88 <am_hal_tpiu_disable>
}
    1856:	b003      	add	sp, #12
    1858:	bd30      	pop	{r4, r5, pc}
    185a:	bf00      	nop
    185c:	1000117c 	.word	0x1000117c
    1860:	40010060 	.word	0x40010060
    1864:	40010054 	.word	0x40010054
    1868:	40010028 	.word	0x40010028
    186c:	40010108 	.word	0x40010108

00001870 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1870:	f000 b926 	b.w	1ac0 <am_hal_itm_print>

00001874 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1876:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1878:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    187c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    187e:	7863      	ldrb	r3, [r4, #1]
    1880:	78e2      	ldrb	r2, [r4, #3]
    1882:	7925      	ldrb	r5, [r4, #4]
    1884:	79a1      	ldrb	r1, [r4, #6]
    1886:	00be      	lsls	r6, r7, #2
    1888:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    188c:	f006 0304 	and.w	r3, r6, #4
    1890:	f00e 0602 	and.w	r6, lr, #2
    1894:	431e      	orrs	r6, r3
    1896:	f042 0201 	orr.w	r2, r2, #1
    189a:	79e3      	ldrb	r3, [r4, #7]
    189c:	01ed      	lsls	r5, r5, #7
    189e:	4316      	orrs	r6, r2
    18a0:	b2ed      	uxtb	r5, r5
    18a2:	7a22      	ldrb	r2, [r4, #8]
    18a4:	0289      	lsls	r1, r1, #10
    18a6:	432e      	orrs	r6, r5
    18a8:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    18ac:	7a65      	ldrb	r5, [r4, #9]
    18ae:	02db      	lsls	r3, r3, #11
    18b0:	430e      	orrs	r6, r1
    18b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    18b6:	0312      	lsls	r2, r2, #12
    18b8:	7aa1      	ldrb	r1, [r4, #10]
    18ba:	431e      	orrs	r6, r3
    18bc:	042d      	lsls	r5, r5, #16
    18be:	b293      	uxth	r3, r2
    18c0:	7ae2      	ldrb	r2, [r4, #11]
    18c2:	431e      	orrs	r6, r3
    18c4:	0509      	lsls	r1, r1, #20
    18c6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    18ca:	0612      	lsls	r2, r2, #24
    18cc:	4333      	orrs	r3, r6
    18ce:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    18d2:	00bf      	lsls	r7, r7, #2
    18d4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    18d8:	4333      	orrs	r3, r6
    18da:	430b      	orrs	r3, r1
    18dc:	f007 0508 	and.w	r5, r7, #8
    18e0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    18e2:	f000 f929 	bl	1b38 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18e6:	482c      	ldr	r0, [pc, #176]	; (1998 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18e8:	4b2c      	ldr	r3, [pc, #176]	; (199c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18ea:	6005      	str	r5, [r0, #0]
    18ec:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18ee:	681e      	ldr	r6, [r3, #0]
    18f0:	0777      	lsls	r7, r6, #29
    18f2:	d41e      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    18f4:	681f      	ldr	r7, [r3, #0]
    18f6:	077e      	lsls	r6, r7, #29
    18f8:	f102 32ff 	add.w	r2, r2, #4294967295
    18fc:	d419      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    18fe:	6819      	ldr	r1, [r3, #0]
    1900:	074f      	lsls	r7, r1, #29
    1902:	d416      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1904:	6818      	ldr	r0, [r3, #0]
    1906:	0746      	lsls	r6, r0, #29
    1908:	d413      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    190a:	681e      	ldr	r6, [r3, #0]
    190c:	0770      	lsls	r0, r6, #29
    190e:	d410      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1910:	681f      	ldr	r7, [r3, #0]
    1912:	0779      	lsls	r1, r7, #29
    1914:	d40d      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1916:	6819      	ldr	r1, [r3, #0]
    1918:	074f      	lsls	r7, r1, #29
    191a:	d40a      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    191c:	6818      	ldr	r0, [r3, #0]
    191e:	0746      	lsls	r6, r0, #29
    1920:	d407      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1922:	681e      	ldr	r6, [r3, #0]
    1924:	0770      	lsls	r0, r6, #29
    1926:	d404      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1928:	681f      	ldr	r7, [r3, #0]
    192a:	0779      	lsls	r1, r7, #29
    192c:	d401      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    192e:	3a09      	subs	r2, #9
    1930:	d1dd      	bne.n	18ee <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1932:	4b1a      	ldr	r3, [pc, #104]	; (199c <am_hal_cachectrl_enable+0x128>)
    1934:	681a      	ldr	r2, [r3, #0]
    1936:	f042 0101 	orr.w	r1, r2, #1
    193a:	6019      	str	r1, [r3, #0]
    193c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    193e:	6818      	ldr	r0, [r3, #0]
    1940:	0740      	lsls	r0, r0, #29
    1942:	d41e      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1944:	681e      	ldr	r6, [r3, #0]
    1946:	0771      	lsls	r1, r6, #29
    1948:	f102 32ff 	add.w	r2, r2, #4294967295
    194c:	d419      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    194e:	681f      	ldr	r7, [r3, #0]
    1950:	077f      	lsls	r7, r7, #29
    1952:	d416      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1954:	6819      	ldr	r1, [r3, #0]
    1956:	074e      	lsls	r6, r1, #29
    1958:	d413      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    195a:	6818      	ldr	r0, [r3, #0]
    195c:	0740      	lsls	r0, r0, #29
    195e:	d410      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1960:	681e      	ldr	r6, [r3, #0]
    1962:	0771      	lsls	r1, r6, #29
    1964:	d40d      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1966:	681f      	ldr	r7, [r3, #0]
    1968:	077f      	lsls	r7, r7, #29
    196a:	d40a      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    196c:	6819      	ldr	r1, [r3, #0]
    196e:	074e      	lsls	r6, r1, #29
    1970:	d407      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1972:	6818      	ldr	r0, [r3, #0]
    1974:	0740      	lsls	r0, r0, #29
    1976:	d404      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1978:	681e      	ldr	r6, [r3, #0]
    197a:	0771      	lsls	r1, r6, #29
    197c:	d401      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    197e:	3a09      	subs	r2, #9
    1980:	d1dd      	bne.n	193e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1982:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1984:	4f04      	ldr	r7, [pc, #16]	; (1998 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1986:	0223      	lsls	r3, r4, #8
    1988:	f403 7100 	and.w	r1, r3, #512	; 0x200
    198c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1990:	4311      	orrs	r1, r2
    1992:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1994:	6039      	str	r1, [r7, #0]
    1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1998:	40018000 	.word	0x40018000
    199c:	40018008 	.word	0x40018008

000019a0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    19a0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    19a2:	4604      	mov	r4, r0
    19a4:	b120      	cbz	r0, 19b0 <am_hal_clkgen_sysclk_select+0x10>
    19a6:	4a06      	ldr	r2, [pc, #24]	; (19c0 <am_hal_clkgen_sysclk_select+0x20>)
    19a8:	4806      	ldr	r0, [pc, #24]	; (19c4 <am_hal_clkgen_sysclk_select+0x24>)
    19aa:	2150      	movs	r1, #80	; 0x50
    19ac:	f000 f83c 	bl	1a28 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b0:	4b05      	ldr	r3, [pc, #20]	; (19c8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    19b2:	4906      	ldr	r1, [pc, #24]	; (19cc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    19b6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    19ba:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    19bc:	601a      	str	r2, [r3, #0]
    19be:	bd10      	pop	{r4, pc}
    19c0:	00001f18 	.word	0x00001f18
    19c4:	00001f50 	.word	0x00001f50
    19c8:	40004014 	.word	0x40004014
    19cc:	40004018 	.word	0x40004018

000019d0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    19d0:	4b04      	ldr	r3, [pc, #16]	; (19e4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    19d2:	4905      	ldr	r1, [pc, #20]	; (19e8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    19d4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    19d6:	4805      	ldr	r0, [pc, #20]	; (19ec <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    19d8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    19dc:	bf08      	it	eq
    19de:	4608      	moveq	r0, r1
    19e0:	4770      	bx	lr
    19e2:	bf00      	nop
    19e4:	40004018 	.word	0x40004018
    19e8:	02dc6c00 	.word	0x02dc6c00
    19ec:	016e3600 	.word	0x016e3600

000019f0 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    19f0:	0783      	lsls	r3, r0, #30
    19f2:	d004      	beq.n	19fe <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    19f4:	4a02      	ldr	r2, [pc, #8]	; (1a00 <am_hal_clkgen_osc_start+0x10>)
    19f6:	6813      	ldr	r3, [r2, #0]
    19f8:	ea23 0000 	bic.w	r0, r3, r0
    19fc:	6010      	str	r0, [r2, #0]
    19fe:	4770      	bx	lr
    1a00:	4000400c 	.word	0x4000400c

00001a04 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a04:	0783      	lsls	r3, r0, #30
    1a06:	d003      	beq.n	1a10 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1a08:	4a02      	ldr	r2, [pc, #8]	; (1a14 <am_hal_clkgen_osc_stop+0x10>)
    1a0a:	6813      	ldr	r3, [r2, #0]
    1a0c:	4318      	orrs	r0, r3
    1a0e:	6010      	str	r0, [r2, #0]
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop
    1a14:	4000400c 	.word	0x4000400c

00001a18 <am_hal_clkgen_clkout_enable>:
am_hal_clkgen_clkout_enable(uint32_t ui32Signal)
{
    //
    // Enable the clock out on desired signal.
    //
    AM_REG(CLKGEN, CLKOUT) = AM_REG_CLKGEN_CLKOUT_CKEN_M | ui32Signal;
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <am_hal_clkgen_clkout_enable+0xc>)
    1a1a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1a1e:	6018      	str	r0, [r3, #0]
    1a20:	4770      	bx	lr
    1a22:	bf00      	nop
    1a24:	40004010 	.word	0x40004010

00001a28 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1a28:	e7fe      	b.n	1a28 <am_hal_debug_error>
    1a2a:	bf00      	nop

00001a2c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a2c:	4b01      	ldr	r3, [pc, #4]	; (1a34 <am_hal_flash_delay+0x8>)
    1a2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1a30:	4708      	bx	r1
    1a32:	bf00      	nop
    1a34:	10001028 	.word	0x10001028

00001a38 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1a38:	08c3      	lsrs	r3, r0, #3
    1a3a:	f003 0104 	and.w	r1, r3, #4
    1a3e:	4a04      	ldr	r2, [pc, #16]	; (1a50 <am_hal_gpio_out_enable_bit_get+0x18>)
    1a40:	588b      	ldr	r3, [r1, r2]
    1a42:	f000 001f 	and.w	r0, r0, #31
    1a46:	fa23 f100 	lsr.w	r1, r3, r0
}
    1a4a:	f001 0001 	and.w	r0, r1, #1
    1a4e:	4770      	bx	lr
    1a50:	400100a0 	.word	0x400100a0

00001a54 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1a54:	4b0d      	ldr	r3, [pc, #52]	; (1a8c <am_hal_itm_enable+0x38>)
    1a56:	6818      	ldr	r0, [r3, #0]
    1a58:	07c2      	lsls	r2, r0, #31
    1a5a:	d416      	bmi.n	1a8a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1a5c:	4a0c      	ldr	r2, [pc, #48]	; (1a90 <am_hal_itm_enable+0x3c>)
    1a5e:	6811      	ldr	r1, [r2, #0]
    1a60:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1a64:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1a66:	6810      	ldr	r0, [r2, #0]
    1a68:	01c3      	lsls	r3, r0, #7
    1a6a:	d5fc      	bpl.n	1a66 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1a6c:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a6e:	4809      	ldr	r0, [pc, #36]	; (1a94 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a70:	4c09      	ldr	r4, [pc, #36]	; (1a98 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a72:	4d0a      	ldr	r5, [pc, #40]	; (1a9c <am_hal_itm_enable+0x48>)
    1a74:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a76:	250f      	movs	r5, #15
    1a78:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a7a:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a7c:	4908      	ldr	r1, [pc, #32]	; (1aa0 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a7e:	4b09      	ldr	r3, [pc, #36]	; (1aa4 <am_hal_itm_enable+0x50>)
    1a80:	4a09      	ldr	r2, [pc, #36]	; (1aa8 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a82:	f04f 30ff 	mov.w	r0, #4294967295
    1a86:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a88:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a8a:	4770      	bx	lr
    1a8c:	1000117c 	.word	0x1000117c
    1a90:	e000edfc 	.word	0xe000edfc
    1a94:	e0000fb0 	.word	0xe0000fb0
    1a98:	e0000e40 	.word	0xe0000e40
    1a9c:	c5acce55 	.word	0xc5acce55
    1aa0:	e0000e00 	.word	0xe0000e00
    1aa4:	e0000e80 	.word	0xe0000e80
    1aa8:	00150511 	.word	0x00150511

00001aac <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1aac:	4a03      	ldr	r2, [pc, #12]	; (1abc <am_hal_itm_not_busy+0x10>)
    1aae:	6813      	ldr	r3, [r2, #0]
    1ab0:	021b      	lsls	r3, r3, #8
    1ab2:	d4fc      	bmi.n	1aae <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ab4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1ab8:	f7ff bfb8 	b.w	1a2c <am_hal_flash_delay>
    1abc:	e0000e80 	.word	0xe0000e80

00001ac0 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1ac0:	7803      	ldrb	r3, [r0, #0]
    1ac2:	b1ab      	cbz	r3, 1af0 <am_hal_itm_print+0x30>
    1ac4:	4602      	mov	r2, r0
    1ac6:	2300      	movs	r3, #0
    1ac8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1acc:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1ace:	2900      	cmp	r1, #0
    1ad0:	d1fa      	bne.n	1ac8 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1ad2:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1ad6:	b430      	push	{r4, r5}
    1ad8:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1ada:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1adc:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1ae0:	f8dc 3000 	ldr.w	r3, [ip]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d0fb      	beq.n	1ae0 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1ae8:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1aea:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1aec:	d1f6      	bne.n	1adc <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1aee:	bc30      	pop	{r4, r5}
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop

00001af4 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1af4:	4a0d      	ldr	r2, [pc, #52]	; (1b2c <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1af6:	4b0e      	ldr	r3, [pc, #56]	; (1b30 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1af8:	490e      	ldr	r1, [pc, #56]	; (1b34 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1afa:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1afc:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1afe:	6814      	ldr	r4, [r2, #0]
    1b00:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b02:	6809      	ldr	r1, [r1, #0]
    1b04:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b06:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b08:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b0a:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b0c:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b0e:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b10:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b14:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b16:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b18:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b20:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b22:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b24:	6142      	str	r2, [r0, #20]
}
    1b26:	bc70      	pop	{r4, r5, r6}
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop
    1b2c:	400201c4 	.word	0x400201c4
    1b30:	400201cc 	.word	0x400201cc
    1b34:	400201c0 	.word	0x400201c0

00001b38 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b38:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1b3c:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b3e:	d03a      	beq.n	1bb6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1b40:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1b44:	f000 809d 	beq.w	1c82 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1b48:	2801      	cmp	r0, #1
    1b4a:	f000 809d 	beq.w	1c88 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1b4e:	2803      	cmp	r0, #3
    1b50:	f000 80a6 	beq.w	1ca0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1b54:	2807      	cmp	r0, #7
    1b56:	f000 809c 	beq.w	1c92 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1b5a:	280f      	cmp	r0, #15
    1b5c:	f000 80a5 	beq.w	1caa <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1b60:	281f      	cmp	r0, #31
    1b62:	f000 80b1 	beq.w	1cc8 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1b66:	283f      	cmp	r0, #63	; 0x3f
    1b68:	f000 80b5 	beq.w	1cd6 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1b6c:	287f      	cmp	r0, #127	; 0x7f
    1b6e:	f000 80b9 	beq.w	1ce4 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1b72:	28ff      	cmp	r0, #255	; 0xff
    1b74:	f000 80a0 	beq.w	1cb8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1b78:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b7c:	4298      	cmp	r0, r3
    1b7e:	f000 80b8 	beq.w	1cf2 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1b82:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1b86:	4288      	cmp	r0, r1
    1b88:	f000 80b9 	beq.w	1cfe <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1b8c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1b90:	4290      	cmp	r0, r2
    1b92:	d00e      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1b94:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1b98:	f000 80b7 	beq.w	1d0a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1b9c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1ba0:	42a0      	cmp	r0, r4
    1ba2:	f000 80b5 	beq.w	1d10 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1ba6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1baa:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1bae:	4560      	cmp	r0, ip
    1bb0:	d132      	bne.n	1c18 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1bb2:	495c      	ldr	r1, [pc, #368]	; (1d24 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1bb4:	e066      	b.n	1c84 <am_hal_pwrctrl_memory_enable+0x14c>
    1bb6:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1bba:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1bbc:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1bbe:	4c5a      	ldr	r4, [pc, #360]	; (1d28 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1bc0:	6822      	ldr	r2, [r4, #0]
    1bc2:	402a      	ands	r2, r5
    1bc4:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1bc6:	4d58      	ldr	r5, [pc, #352]	; (1d28 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1bc8:	682c      	ldr	r4, [r5, #0]
    1bca:	4320      	orrs	r0, r4
    1bcc:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d029      	beq.n	1c26 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bd2:	4a56      	ldr	r2, [pc, #344]	; (1d2c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1bd4:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bd6:	4203      	tst	r3, r0
    1bd8:	bf18      	it	ne
    1bda:	20c6      	movne	r0, #198	; 0xc6
    1bdc:	d01f      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bde:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1be0:	422b      	tst	r3, r5
    1be2:	d01c      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1be4:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1be6:	4223      	tst	r3, r4
    1be8:	d019      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bea:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bec:	422b      	tst	r3, r5
    1bee:	d016      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bf0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bf2:	4223      	tst	r3, r4
    1bf4:	d013      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bf6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bf8:	422b      	tst	r3, r5
    1bfa:	d010      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bfc:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bfe:	4223      	tst	r3, r4
    1c00:	d00d      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c02:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c04:	422b      	tst	r3, r5
    1c06:	d00a      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c08:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c0a:	4223      	tst	r3, r4
    1c0c:	d007      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c0e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c10:	422b      	tst	r3, r5
    1c12:	d004      	beq.n	1c1e <am_hal_pwrctrl_memory_enable+0xe6>
    1c14:	3809      	subs	r0, #9
    1c16:	d1e2      	bne.n	1bde <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1c18:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1c1a:	bc30      	pop	{r4, r5}
    1c1c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1c1e:	b911      	cbnz	r1, 1c26 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1c20:	2001      	movs	r0, #1
}
    1c22:	bc30      	pop	{r4, r5}
    1c24:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c26:	4b41      	ldr	r3, [pc, #260]	; (1d2c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1c28:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c2a:	ea31 0402 	bics.w	r4, r1, r2
    1c2e:	bf18      	it	ne
    1c30:	24c6      	movne	r4, #198	; 0xc6
    1c32:	d0f5      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c34:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c36:	ea31 0000 	bics.w	r0, r1, r0
    1c3a:	d0f1      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c3c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c3e:	ea31 0005 	bics.w	r0, r1, r5
    1c42:	d0ed      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c44:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c46:	ea31 0002 	bics.w	r0, r1, r2
    1c4a:	d0e9      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c4c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c4e:	ea31 0000 	bics.w	r0, r1, r0
    1c52:	d0e5      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c54:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c56:	ea31 0005 	bics.w	r0, r1, r5
    1c5a:	d0e1      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c5c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c5e:	ea31 0002 	bics.w	r0, r1, r2
    1c62:	d0dd      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c64:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c66:	ea31 0000 	bics.w	r0, r1, r0
    1c6a:	d0d9      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c6c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c6e:	ea31 0005 	bics.w	r0, r1, r5
    1c72:	d0d5      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c74:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c76:	ea31 0002 	bics.w	r0, r1, r2
    1c7a:	d0d1      	beq.n	1c20 <am_hal_pwrctrl_memory_enable+0xe8>
    1c7c:	3c09      	subs	r4, #9
    1c7e:	d1d9      	bne.n	1c34 <am_hal_pwrctrl_memory_enable+0xfc>
    1c80:	e7ca      	b.n	1c18 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1c82:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c84:	2300      	movs	r3, #0
    1c86:	e79e      	b.n	1bc6 <am_hal_pwrctrl_memory_enable+0x8e>
    1c88:	4d29      	ldr	r5, [pc, #164]	; (1d30 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c8a:	4b2a      	ldr	r3, [pc, #168]	; (1d34 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c90:	e795      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1c92:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c96:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1c9a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1c9e:	e78e      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1ca0:	4d25      	ldr	r5, [pc, #148]	; (1d38 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ca2:	4b26      	ldr	r3, [pc, #152]	; (1d3c <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1ca4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1ca8:	e789      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1caa:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cae:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1cb2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1cb6:	e782      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1cb8:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cbc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1cc0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1cc4:	20ff      	movs	r0, #255	; 0xff
    1cc6:	e77a      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1cc8:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ccc:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1cd0:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1cd4:	e773      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1cd6:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cda:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1cde:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1ce2:	e76c      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1ce4:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ce8:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1cec:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1cf0:	e765      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    1cf2:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cf6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1cfa:	4911      	ldr	r1, [pc, #68]	; (1d40 <am_hal_pwrctrl_memory_enable+0x208>)
    1cfc:	e75f      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1cfe:	4911      	ldr	r1, [pc, #68]	; (1d44 <am_hal_pwrctrl_memory_enable+0x20c>)
    1d00:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1d08:	e759      	b.n	1bbe <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d0a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1d0e:	e7b9      	b.n	1c84 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d10:	4805      	ldr	r0, [pc, #20]	; (1d28 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d12:	6803      	ldr	r3, [r0, #0]
    1d14:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1d18:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d1a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1d1e:	2100      	movs	r1, #0
    1d20:	e757      	b.n	1bd2 <am_hal_pwrctrl_memory_enable+0x9a>
    1d22:	bf00      	nop
    1d24:	0007ff00 	.word	0x0007ff00
    1d28:	40021010 	.word	0x40021010
    1d2c:	40021014 	.word	0x40021014
    1d30:	fffff801 	.word	0xfffff801
    1d34:	0007fe00 	.word	0x0007fe00
    1d38:	fffff803 	.word	0xfffff803
    1d3c:	0007fc00 	.word	0x0007fc00
    1d40:	0001ff00 	.word	0x0001ff00
    1d44:	0003ff00 	.word	0x0003ff00

00001d48 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d48:	4b0f      	ldr	r3, [pc, #60]	; (1d88 <am_hal_pwrctrl_bucks_init+0x40>)
    1d4a:	681a      	ldr	r2, [r3, #0]
    1d4c:	0792      	lsls	r2, r2, #30
    1d4e:	d502      	bpl.n	1d56 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d50:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d52:	07c3      	lsls	r3, r0, #31
    1d54:	d40e      	bmi.n	1d74 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d56:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d58:	4a0b      	ldr	r2, [pc, #44]	; (1d88 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d5a:	6819      	ldr	r1, [r3, #0]
    1d5c:	f041 0002 	orr.w	r0, r1, #2
    1d60:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d62:	6819      	ldr	r1, [r3, #0]
    1d64:	f041 0001 	orr.w	r0, r1, #1
    1d68:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d6a:	6813      	ldr	r3, [r2, #0]
    1d6c:	f003 0103 	and.w	r1, r3, #3
    1d70:	2903      	cmp	r1, #3
    1d72:	d1fa      	bne.n	1d6a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1d74:	4a04      	ldr	r2, [pc, #16]	; (1d88 <am_hal_pwrctrl_bucks_init+0x40>)
    1d76:	6810      	ldr	r0, [r2, #0]
    1d78:	f000 0303 	and.w	r3, r0, #3
    1d7c:	2b03      	cmp	r3, #3
    1d7e:	d1fa      	bne.n	1d76 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1d80:	2042      	movs	r0, #66	; 0x42
    1d82:	f7ff be53 	b.w	1a2c <am_hal_flash_delay>
    1d86:	bf00      	nop
    1d88:	40021004 	.word	0x40021004
    1d8c:	40021000 	.word	0x40021000

00001d90 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1d90:	4905      	ldr	r1, [pc, #20]	; (1da8 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1d92:	4a06      	ldr	r2, [pc, #24]	; (1dac <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1d94:	680b      	ldr	r3, [r1, #0]
    1d96:	f043 0006 	orr.w	r0, r3, #6
    1d9a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1d9c:	6811      	ldr	r1, [r2, #0]
    1d9e:	f021 0304 	bic.w	r3, r1, #4
    1da2:	6013      	str	r3, [r2, #0]
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	40021018 	.word	0x40021018
    1dac:	40021000 	.word	0x40021000

00001db0 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1db0:	4a05      	ldr	r2, [pc, #20]	; (1dc8 <am_hal_rtc_osc_select+0x18>)
    1db2:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1db4:	b918      	cbnz	r0, 1dbe <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1db6:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1dba:	6010      	str	r0, [r2, #0]
    1dbc:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1dbe:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1dc2:	6011      	str	r1, [r2, #0]
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	4000400c 	.word	0x4000400c

00001dcc <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1dcc:	4a02      	ldr	r2, [pc, #8]	; (1dd8 <am_hal_rtc_osc_disable+0xc>)
    1dce:	6813      	ldr	r3, [r2, #0]
    1dd0:	f043 0010 	orr.w	r0, r3, #16
    1dd4:	6010      	str	r0, [r2, #0]
    1dd6:	4770      	bx	lr
    1dd8:	40004050 	.word	0x40004050

00001ddc <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1ddc:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1dde:	4a22      	ldr	r2, [pc, #136]	; (1e68 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1de0:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1de2:	2100      	movs	r1, #0
    1de4:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1de6:	b333      	cbz	r3, 1e36 <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1de8:	4d20      	ldr	r5, [pc, #128]	; (1e6c <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1dea:	4921      	ldr	r1, [pc, #132]	; (1e70 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1dec:	4a21      	ldr	r2, [pc, #132]	; (1e74 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1dee:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1df0:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1df4:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1df6:	458c      	cmp	ip, r1
    1df8:	bf94      	ite	ls
    1dfa:	461d      	movls	r5, r3
    1dfc:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1dfe:	f7ff fde7 	bl	19d0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1e02:	1c43      	adds	r3, r0, #1
    1e04:	d02e      	beq.n	1e64 <am_hal_tpiu_enable+0x88>
    1e06:	08c3      	lsrs	r3, r0, #3
    1e08:	fbb3 fef5 	udiv	lr, r3, r5
    1e0c:	f10e 31ff 	add.w	r1, lr, #4294967295
    1e10:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1e12:	4a19      	ldr	r2, [pc, #100]	; (1e78 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1e14:	4c19      	ldr	r4, [pc, #100]	; (1e7c <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1e16:	4b1a      	ldr	r3, [pc, #104]	; (1e80 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1e18:	491a      	ldr	r1, [pc, #104]	; (1e84 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1e1a:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1e1c:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1e1e:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1e20:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1e24:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1e26:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1e28:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1e2a:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1e32:	f7ff bdfb 	b.w	1a2c <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1e36:	4c10      	ldr	r4, [pc, #64]	; (1e78 <am_hal_tpiu_enable+0x9c>)
    1e38:	6905      	ldr	r5, [r0, #16]
    1e3a:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1e3c:	6882      	ldr	r2, [r0, #8]
    1e3e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1e42:	68c3      	ldr	r3, [r0, #12]
    1e44:	4c09      	ldr	r4, [pc, #36]	; (1e6c <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1e46:	490e      	ldr	r1, [pc, #56]	; (1e80 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1e48:	1e5d      	subs	r5, r3, #1
    1e4a:	2201      	movs	r2, #1
    1e4c:	40aa      	lsls	r2, r5
    1e4e:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1e50:	680b      	ldr	r3, [r1, #0]
    1e52:	6840      	ldr	r0, [r0, #4]
    1e54:	4318      	orrs	r0, r3
    1e56:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1e5c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1e60:	f7ff bde4 	b.w	1a2c <am_hal_flash_delay>
    1e64:	2005      	movs	r0, #5
    1e66:	e7d4      	b.n	1e12 <am_hal_tpiu_enable+0x36>
    1e68:	e0040304 	.word	0xe0040304
    1e6c:	e0040004 	.word	0xe0040004
    1e70:	001da380 	.word	0x001da380
    1e74:	000f4240 	.word	0x000f4240
    1e78:	e0040010 	.word	0xe0040010
    1e7c:	e00400f0 	.word	0xe00400f0
    1e80:	40020250 	.word	0x40020250
    1e84:	e0040f00 	.word	0xe0040f00

00001e88 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1e88:	4b01      	ldr	r3, [pc, #4]	; (1e90 <am_hal_tpiu_disable+0x8>)
    1e8a:	2200      	movs	r2, #0
    1e8c:	601a      	str	r2, [r3, #0]
    1e8e:	4770      	bx	lr
    1e90:	40020250 	.word	0x40020250

00001e94 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1e94:	4b01      	ldr	r3, [pc, #4]	; (1e9c <am_hal_vcomp_disable+0x8>)
    1e96:	2237      	movs	r2, #55	; 0x37
    1e98:	601a      	str	r2, [r3, #0]
    1e9a:	4770      	bx	lr
    1e9c:	4000c008 	.word	0x4000c008
    1ea0:	4f4b4c43 	.word	0x4f4b4c43
    1ea4:	74205455 	.word	0x74205455
    1ea8:	454c206f 	.word	0x454c206f
    1eac:	78452044 	.word	0x78452044
    1eb0:	6c706d61 	.word	0x6c706d61
    1eb4:	00000a65 	.word	0x00000a65
    1eb8:	6f6c4309 	.word	0x6f6c4309
    1ebc:	20736b63 	.word	0x20736b63
    1ec0:	4c206e61 	.word	0x4c206e61
    1ec4:	61204445 	.word	0x61204445
    1ec8:	74756f62 	.word	0x74756f62
    1ecc:	636e6f20 	.word	0x636e6f20
    1ed0:	20612065 	.word	0x20612065
    1ed4:	6f636573 	.word	0x6f636573
    1ed8:	6220646e 	.word	0x6220646e
    1edc:	64657361 	.word	0x64657361
    1ee0:	206e6f20 	.word	0x206e6f20
    1ee4:	20656874 	.word	0x20656874
    1ee8:	4f4b4c43 	.word	0x4f4b4c43
    1eec:	73205455 	.word	0x73205455
    1ef0:	616e6769 	.word	0x616e6769
    1ef4:	000a2e6c 	.word	0x000a2e6c
    1ef8:	0a0a0a0a 	.word	0x0a0a0a0a
    1efc:	0a0a0a0a 	.word	0x0a0a0a0a
    1f00:	0a0a0a0a 	.word	0x0a0a0a0a
    1f04:	0a0a0a0a 	.word	0x0a0a0a0a
    1f08:	00000a0a 	.word	0x00000a0a

00001f0c <am_hal_cachectrl_defaults>:
    1f0c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1f1c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1f2c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1f3c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1f4c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1f5c:	6b6c635f 2e6e6567 00000063              _clkgen.c...
