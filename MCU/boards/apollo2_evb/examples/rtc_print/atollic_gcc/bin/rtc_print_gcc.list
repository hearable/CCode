
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\rtc_print\atollic_gcc\bin\rtc_print_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         000000b0  10001000  000024f0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000144  100010b0  000025a0  000210b0  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY
  5 .debug_info   000068fd  00000000  00000000  000210e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c22  00000000  00000000  000279e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000868  00000000  00000000  00029606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ea8  00000000  00000000  00029e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000429d  00000000  00000000  0002ad16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002cd5  00000000  00000000  0002efb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017c0  00000000  00000000  00031d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003837  00000000  00000000  000334c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 75 04 00 00 dd 04 00 00 ed 04 00 00     ....u...........
      10:	ed 04 00 00 ed 04 00 00 ed 04 00 00 00 00 00 00     ................
	...
      2c:	e5 04 00 00 e5 04 00 00 00 00 00 00 e5 04 00 00     ................
      3c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      4c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      5c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      6c:	e5 04 00 00 e5 04 00 00 99 01 00 00 e5 04 00 00     ................
      7c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      8c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      9c:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      ac:	e5 04 00 00 e5 04 00 00 e5 04 00 00 e5 04 00 00     ................
      bc:	e5 04 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     164:	2002      	movs	r0, #2
     166:	f001 fb0d 	bl	1784 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     16e:	2000      	movs	r0, #0
     170:	f001 fba6 	bl	18c0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     174:	4907      	ldr	r1, [pc, #28]	; (194 <timerA0_init+0x34>)
     176:	2000      	movs	r0, #0
     178:	f001 fb18 	bl	17ac <am_hal_ctimer_config>

    //
    // Set the timing for timerA0.
    //
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 31, 0);
     17c:	2300      	movs	r3, #0
     17e:	221f      	movs	r2, #31
     180:	f64f 71ff 	movw	r1, #65535	; 0xffff
     184:	2000      	movs	r0, #0
     186:	f001 fbaf 	bl	18e8 <am_hal_ctimer_period_set>

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     18a:	2001      	movs	r0, #1
     18c:	f001 fc00 	bl	1990 <am_hal_ctimer_int_clear>
}
     190:	bf00      	nop
     192:	bd80      	pop	{r7, pc}
     194:	10001054 	.word	0x10001054

00000198 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     198:	b580      	push	{r7, lr}
     19a:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     19c:	2001      	movs	r0, #1
     19e:	f001 fbf7 	bl	1990 <am_hal_ctimer_int_clear>

    am_hal_rtc_time_get(&hal_time);
     1a2:	4802      	ldr	r0, [pc, #8]	; (1ac <am_ctimer_isr+0x14>)
     1a4:	f001 feda 	bl	1f5c <am_hal_rtc_time_get>

}
     1a8:	bf00      	nop
     1aa:	bd80      	pop	{r7, pc}
     1ac:	100011c4 	.word	0x100011c4

000001b0 <toVal>:
// toVal() converts a string to an ASCII value.
//
//*****************************************************************************
int
toVal(char *pcAsciiStr)
{
     1b0:	b480      	push	{r7}
     1b2:	b085      	sub	sp, #20
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
    int iRetVal = 0;
     1b8:	2300      	movs	r3, #0
     1ba:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[1] - '0';
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	3301      	adds	r3, #1
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	3b30      	subs	r3, #48	; 0x30
     1c4:	68fa      	ldr	r2, [r7, #12]
     1c6:	4413      	add	r3, r2
     1c8:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b20      	cmp	r3, #32
     1d0:	d009      	beq.n	1e6 <toVal+0x36>
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     1da:	4613      	mov	r3, r2
     1dc:	009b      	lsls	r3, r3, #2
     1de:	4413      	add	r3, r2
     1e0:	005b      	lsls	r3, r3, #1
     1e2:	461a      	mov	r2, r3
     1e4:	e000      	b.n	1e8 <toVal+0x38>
     1e6:	2200      	movs	r2, #0
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	4413      	add	r3, r2
     1ec:	60fb      	str	r3, [r7, #12]
    return iRetVal;
     1ee:	68fb      	ldr	r3, [r7, #12]
}
     1f0:	4618      	mov	r0, r3
     1f2:	3714      	adds	r7, #20
     1f4:	46bd      	mov	sp, r7
     1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1fa:	4770      	bx	lr

000001fc <mthToIndex>:
// by the string, and 12 indicating that the string is not a month.
//
//*****************************************************************************
int
mthToIndex(char *pcMon)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
    int idx;
    for (idx = 0; idx < 12; idx++)
     204:	2300      	movs	r3, #0
     206:	60fb      	str	r3, [r7, #12]
     208:	e010      	b.n	22c <mthToIndex+0x30>
    {
        if ( am_util_string_strnicmp(pcMonth[idx], pcMon, 3) == 0 )
     20a:	4a0c      	ldr	r2, [pc, #48]	; (23c <mthToIndex+0x40>)
     20c:	68fb      	ldr	r3, [r7, #12]
     20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     212:	2203      	movs	r2, #3
     214:	6879      	ldr	r1, [r7, #4]
     216:	4618      	mov	r0, r3
     218:	f001 f882 	bl	1320 <am_util_string_strnicmp>
     21c:	4603      	mov	r3, r0
     21e:	2b00      	cmp	r3, #0
     220:	d101      	bne.n	226 <mthToIndex+0x2a>
        {
            return idx;
     222:	68fb      	ldr	r3, [r7, #12]
     224:	e006      	b.n	234 <mthToIndex+0x38>
//*****************************************************************************
int
mthToIndex(char *pcMon)
{
    int idx;
    for (idx = 0; idx < 12; idx++)
     226:	68fb      	ldr	r3, [r7, #12]
     228:	3301      	adds	r3, #1
     22a:	60fb      	str	r3, [r7, #12]
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	2b0b      	cmp	r3, #11
     230:	ddeb      	ble.n	20a <mthToIndex+0xe>
        if ( am_util_string_strnicmp(pcMonth[idx], pcMon, 3) == 0 )
        {
            return idx;
        }
    }
    return 12;
     232:	230c      	movs	r3, #12
}
     234:	4618      	mov	r0, r3
     236:	3710      	adds	r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bd80      	pop	{r7, pc}
     23c:	10001020 	.word	0x10001020

00000240 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     240:	b5b0      	push	{r4, r5, r7, lr}
     242:	b082      	sub	sp, #8
     244:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     246:	2000      	movs	r0, #0
     248:	f001 fa74 	bl	1734 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     24c:	4870      	ldr	r0, [pc, #448]	; (410 <main+0x1d0>)
     24e:	f001 f9db 	bl	1608 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     252:	f001 f94f 	bl	14f4 <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     256:	2001      	movs	r0, #1
     258:	f001 fa94 	bl	1784 <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     25c:	2000      	movs	r0, #0
     25e:	f001 fdd1 	bl	1e04 <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     262:	f001 fddd 	bl	1e20 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     266:	486b      	ldr	r0, [pc, #428]	; (414 <main+0x1d4>)
     268:	f000 f9c0 	bl	5ec <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     26c:	f3ef 8310 	mrs	r3, PRIMASK
     270:	607b      	str	r3, [r7, #4]
     272:	b672      	cpsid	i
     274:	4b68      	ldr	r3, [pc, #416]	; (418 <main+0x1d8>)
     276:	2273      	movs	r2, #115	; 0x73
     278:	601a      	str	r2, [r3, #0]
     27a:	4a68      	ldr	r2, [pc, #416]	; (41c <main+0x1dc>)
     27c:	4b67      	ldr	r3, [pc, #412]	; (41c <main+0x1dc>)
     27e:	681b      	ldr	r3, [r3, #0]
     280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     284:	6013      	str	r3, [r2, #0]
     286:	4a66      	ldr	r2, [pc, #408]	; (420 <main+0x1e0>)
     288:	4b65      	ldr	r3, [pc, #404]	; (420 <main+0x1e0>)
     28a:	681b      	ldr	r3, [r3, #0]
     28c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     294:	6013      	str	r3, [r2, #0]
     296:	4a63      	ldr	r2, [pc, #396]	; (424 <main+0x1e4>)
     298:	4b62      	ldr	r3, [pc, #392]	; (424 <main+0x1e4>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2a0:	6013      	str	r3, [r2, #0]
     2a2:	4b5d      	ldr	r3, [pc, #372]	; (418 <main+0x1d8>)
     2a4:	2200      	movs	r2, #0
     2a6:	601a      	str	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     2ae:	f001 fbb1 	bl	1a14 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     2b2:	f001 f931 	bl	1518 <am_bsp_debug_printf_enable>
#if defined(__GNUC__)  ||  defined(__ARMCC_VERSION)  ||  defined(__IAR_SYSTEMS_ICC__)
    //
    // The RTC is initialized from the date and time strings that are
    // obtained from the compiler at compile time.
    //
    hal_time.ui32Hour = toVal(&__TIME__[0]);
     2b6:	485c      	ldr	r0, [pc, #368]	; (428 <main+0x1e8>)
     2b8:	f7ff ff7a 	bl	1b0 <toVal>
     2bc:	4603      	mov	r3, r0
     2be:	461a      	mov	r2, r3
     2c0:	4b5a      	ldr	r3, [pc, #360]	; (42c <main+0x1ec>)
     2c2:	61da      	str	r2, [r3, #28]
    hal_time.ui32Minute = toVal(&__TIME__[3]);
     2c4:	485a      	ldr	r0, [pc, #360]	; (430 <main+0x1f0>)
     2c6:	f7ff ff73 	bl	1b0 <toVal>
     2ca:	4603      	mov	r3, r0
     2cc:	461a      	mov	r2, r3
     2ce:	4b57      	ldr	r3, [pc, #348]	; (42c <main+0x1ec>)
     2d0:	621a      	str	r2, [r3, #32]
    hal_time.ui32Second = toVal(&__TIME__[6]);
     2d2:	4858      	ldr	r0, [pc, #352]	; (434 <main+0x1f4>)
     2d4:	f7ff ff6c 	bl	1b0 <toVal>
     2d8:	4603      	mov	r3, r0
     2da:	461a      	mov	r2, r3
     2dc:	4b53      	ldr	r3, [pc, #332]	; (42c <main+0x1ec>)
     2de:	625a      	str	r2, [r3, #36]	; 0x24
    hal_time.ui32Hundredths = 00;
     2e0:	4b52      	ldr	r3, [pc, #328]	; (42c <main+0x1ec>)
     2e2:	2200      	movs	r2, #0
     2e4:	629a      	str	r2, [r3, #40]	; 0x28
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
     2e6:	4854      	ldr	r0, [pc, #336]	; (438 <main+0x1f8>)
     2e8:	f7ff ff62 	bl	1b0 <toVal>
     2ec:	4603      	mov	r3, r0
     2ee:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
     2f2:	4852      	ldr	r0, [pc, #328]	; (43c <main+0x1fc>)
     2f4:	f7ff ff82 	bl	1fc <mthToIndex>
     2f8:	4603      	mov	r3, r0
     2fa:	1c5d      	adds	r5, r3, #1
     2fc:	4850      	ldr	r0, [pc, #320]	; (440 <main+0x200>)
     2fe:	f7ff ff57 	bl	1b0 <toVal>
     302:	4603      	mov	r3, r0
     304:	461a      	mov	r2, r3
     306:	4629      	mov	r1, r5
     308:	4620      	mov	r0, r4
     30a:	f001 f859 	bl	13c0 <am_util_time_computeDayofWeek>
     30e:	4603      	mov	r3, r0
     310:	461a      	mov	r2, r3
     312:	4b46      	ldr	r3, [pc, #280]	; (42c <main+0x1ec>)
     314:	609a      	str	r2, [r3, #8]
    hal_time.ui32DayOfMonth = toVal(&__DATE__[4]);
     316:	484a      	ldr	r0, [pc, #296]	; (440 <main+0x200>)
     318:	f7ff ff4a 	bl	1b0 <toVal>
     31c:	4603      	mov	r3, r0
     31e:	461a      	mov	r2, r3
     320:	4b42      	ldr	r3, [pc, #264]	; (42c <main+0x1ec>)
     322:	619a      	str	r2, [r3, #24]
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
     324:	4845      	ldr	r0, [pc, #276]	; (43c <main+0x1fc>)
     326:	f7ff ff69 	bl	1fc <mthToIndex>
     32a:	4603      	mov	r3, r0
     32c:	461a      	mov	r2, r3
     32e:	4b3f      	ldr	r3, [pc, #252]	; (42c <main+0x1ec>)
     330:	615a      	str	r2, [r3, #20]
    hal_time.ui32Year = toVal(&__DATE__[9]);
     332:	4841      	ldr	r0, [pc, #260]	; (438 <main+0x1f8>)
     334:	f7ff ff3c 	bl	1b0 <toVal>
     338:	4603      	mov	r3, r0
     33a:	461a      	mov	r2, r3
     33c:	4b3b      	ldr	r3, [pc, #236]	; (42c <main+0x1ec>)
     33e:	611a      	str	r2, [r3, #16]
    hal_time.ui32Century = 0;
     340:	4b3a      	ldr	r3, [pc, #232]	; (42c <main+0x1ec>)
     342:	2200      	movs	r2, #0
     344:	60da      	str	r2, [r3, #12]
    hal_time.ui32DayOfMonth = 15;
    hal_time.ui32Month = 4;
    hal_time.ui32Year = 14;
    hal_time.ui32Century = 0;
#endif
    am_hal_rtc_time_set(&hal_time);
     346:	4839      	ldr	r0, [pc, #228]	; (42c <main+0x1ec>)
     348:	f001 fd7a 	bl	1e40 <am_hal_rtc_time_set>

    //
    // TimerA0 init.
    //
    timerA0_init();
     34c:	f7ff ff08 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     350:	2001      	movs	r0, #1
     352:	f001 fb0d 	bl	1970 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     356:	201d      	movs	r0, #29
     358:	f001 fb28 	bl	19ac <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     35c:	f001 fb4e 	bl	19fc <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     360:	f64f 71ff 	movw	r1, #65535	; 0xffff
     364:	2000      	movs	r0, #0
     366:	f001 fa91 	bl	188c <am_hal_ctimer_start>
    while (1)
    {
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
     36a:	f001 f8d5 	bl	1518 <am_bsp_debug_printf_enable>

        //
        // Clear the terminal.
        //
        am_util_stdio_terminal_clear();
     36e:	f000 ffcd 	bl	130c <am_util_stdio_terminal_clear>

        //
        // Print the banner.
        //
        am_util_stdio_printf("RTC Print Example\n");
     372:	4834      	ldr	r0, [pc, #208]	; (444 <main+0x204>)
     374:	f000 ffac 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("This example was built on %s at %s.\n\n", __DATE__, __TIME__);
     378:	4a2b      	ldr	r2, [pc, #172]	; (428 <main+0x1e8>)
     37a:	4930      	ldr	r1, [pc, #192]	; (43c <main+0x1fc>)
     37c:	4832      	ldr	r0, [pc, #200]	; (448 <main+0x208>)
     37e:	f000 ffa7 	bl	12d0 <am_util_stdio_printf>

        //
        // Print RTC time.
        //
        am_hal_rtc_time_get(&hal_time);
     382:	482a      	ldr	r0, [pc, #168]	; (42c <main+0x1ec>)
     384:	f001 fdea 	bl	1f5c <am_hal_rtc_time_get>
        am_util_stdio_printf("\tIt is now ");
     388:	4830      	ldr	r0, [pc, #192]	; (44c <main+0x20c>)
     38a:	f000 ffa1 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("%d : ", hal_time.ui32Hour);
     38e:	4b27      	ldr	r3, [pc, #156]	; (42c <main+0x1ec>)
     390:	69db      	ldr	r3, [r3, #28]
     392:	4619      	mov	r1, r3
     394:	482e      	ldr	r0, [pc, #184]	; (450 <main+0x210>)
     396:	f000 ff9b 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d : ", hal_time.ui32Minute);
     39a:	4b24      	ldr	r3, [pc, #144]	; (42c <main+0x1ec>)
     39c:	6a1b      	ldr	r3, [r3, #32]
     39e:	4619      	mov	r1, r3
     3a0:	482c      	ldr	r0, [pc, #176]	; (454 <main+0x214>)
     3a2:	f000 ff95 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d.", hal_time.ui32Second);
     3a6:	4b21      	ldr	r3, [pc, #132]	; (42c <main+0x1ec>)
     3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     3aa:	4619      	mov	r1, r3
     3ac:	482a      	ldr	r0, [pc, #168]	; (458 <main+0x218>)
     3ae:	f000 ff8f 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d ", hal_time.ui32Hundredths);
     3b2:	4b1e      	ldr	r3, [pc, #120]	; (42c <main+0x1ec>)
     3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3b6:	4619      	mov	r1, r3
     3b8:	4828      	ldr	r0, [pc, #160]	; (45c <main+0x21c>)
     3ba:	f000 ff89 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf(pcWeekday[hal_time.ui32Weekday]);
     3be:	4b1b      	ldr	r3, [pc, #108]	; (42c <main+0x1ec>)
     3c0:	689b      	ldr	r3, [r3, #8]
     3c2:	4a27      	ldr	r2, [pc, #156]	; (460 <main+0x220>)
     3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     3c8:	4618      	mov	r0, r3
     3ca:	f000 ff81 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     3ce:	4825      	ldr	r0, [pc, #148]	; (464 <main+0x224>)
     3d0:	f000 ff7e 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf(pcMonth[hal_time.ui32Month]);
     3d4:	4b15      	ldr	r3, [pc, #84]	; (42c <main+0x1ec>)
     3d6:	695b      	ldr	r3, [r3, #20]
     3d8:	4a23      	ldr	r2, [pc, #140]	; (468 <main+0x228>)
     3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     3de:	4618      	mov	r0, r3
     3e0:	f000 ff76 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     3e4:	481f      	ldr	r0, [pc, #124]	; (464 <main+0x224>)
     3e6:	f000 ff73 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("%d, ", hal_time.ui32DayOfMonth);
     3ea:	4b10      	ldr	r3, [pc, #64]	; (42c <main+0x1ec>)
     3ec:	699b      	ldr	r3, [r3, #24]
     3ee:	4619      	mov	r1, r3
     3f0:	481e      	ldr	r0, [pc, #120]	; (46c <main+0x22c>)
     3f2:	f000 ff6d 	bl	12d0 <am_util_stdio_printf>
        am_util_stdio_printf("20%02d", hal_time.ui32Year);
     3f6:	4b0d      	ldr	r3, [pc, #52]	; (42c <main+0x1ec>)
     3f8:	691b      	ldr	r3, [r3, #16]
     3fa:	4619      	mov	r1, r3
     3fc:	481c      	ldr	r0, [pc, #112]	; (470 <main+0x230>)
     3fe:	f000 ff67 	bl	12d0 <am_util_stdio_printf>

        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
     402:	f001 f8c9 	bl	1598 <am_bsp_debug_printf_disable>

        //
        // Go to Deep Sleep and wait for a wake up.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     406:	2001      	movs	r0, #1
     408:	f001 fe0e 	bl	2028 <am_hal_sysctrl_sleep>
    }
     40c:	e7ad      	b.n	36a <main+0x12a>
     40e:	bf00      	nop
     410:	00002494 	.word	0x00002494
     414:	00001605 	.word	0x00001605
     418:	40010060 	.word	0x40010060
     41c:	40010054 	.word	0x40010054
     420:	40010028 	.word	0x40010028
     424:	40010108 	.word	0x40010108
     428:	000022ec 	.word	0x000022ec
     42c:	100011c4 	.word	0x100011c4
     430:	000022ef 	.word	0x000022ef
     434:	000022f2 	.word	0x000022f2
     438:	00002301 	.word	0x00002301
     43c:	000022f8 	.word	0x000022f8
     440:	000022fc 	.word	0x000022fc
     444:	00002304 	.word	0x00002304
     448:	00002318 	.word	0x00002318
     44c:	00002340 	.word	0x00002340
     450:	0000234c 	.word	0x0000234c
     454:	00002354 	.word	0x00002354
     458:	0000235c 	.word	0x0000235c
     45c:	00002364 	.word	0x00002364
     460:	10001000 	.word	0x10001000
     464:	0000236c 	.word	0x0000236c
     468:	10001020 	.word	0x10001020
     46c:	00002370 	.word	0x00002370
     470:	00002378 	.word	0x00002378

00000474 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     474:	4811      	ldr	r0, [pc, #68]	; (4bc <zero_loop+0x12>)
     476:	4912      	ldr	r1, [pc, #72]	; (4c0 <zero_loop+0x16>)
     478:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     47a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     47e:	4811      	ldr	r0, [pc, #68]	; (4c4 <zero_loop+0x1a>)
     480:	6801      	ldr	r1, [r0, #0]
     482:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     486:	6001      	str	r1, [r0, #0]
     488:	f3bf 8f4f 	dsb	sy
     48c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     490:	480d      	ldr	r0, [pc, #52]	; (4c8 <zero_loop+0x1e>)
     492:	490e      	ldr	r1, [pc, #56]	; (4cc <zero_loop+0x22>)
     494:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <zero_loop+0x26>)

00000496 <copy_loop>:
     496:	f850 3b04 	ldr.w	r3, [r0], #4
     49a:	f841 3b04 	str.w	r3, [r1], #4
     49e:	4291      	cmp	r1, r2
     4a0:	dbf9      	blt.n	496 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     4a2:	480c      	ldr	r0, [pc, #48]	; (4d4 <zero_loop+0x2a>)
     4a4:	490c      	ldr	r1, [pc, #48]	; (4d8 <zero_loop+0x2e>)
     4a6:	f04f 0200 	mov.w	r2, #0

000004aa <zero_loop>:
     4aa:	4288      	cmp	r0, r1
     4ac:	bfb8      	it	lt
     4ae:	f840 2b04 	strlt.w	r2, [r0], #4
     4b2:	dbfa      	blt.n	4aa <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     4b4:	f7ff fec4 	bl	240 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     4b8:	be00      	bkpt	0x0000
}
     4ba:	bf00      	nop
     4bc:	e000ed08 	.word	0xe000ed08
     4c0:	00000000 	.word	0x00000000
     4c4:	e000ed88 	.word	0xe000ed88
     4c8:	000024f0 	.word	0x000024f0
     4cc:	10001000 	.word	0x10001000
     4d0:	100010b0 	.word	0x100010b0
     4d4:	100010b0 	.word	0x100010b0
     4d8:	100011f4 	.word	0x100011f4

000004dc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     4dc:	b480      	push	{r7}
     4de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     4e0:	e7fe      	b.n	4e0 <am_nmi_isr+0x4>
     4e2:	bf00      	nop

000004e4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     4e4:	b480      	push	{r7}
     4e6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     4e8:	e7fe      	b.n	4e8 <am_adc_isr+0x4>
     4ea:	bf00      	nop

000004ec <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     4ec:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     4ee:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     4f0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     4f2:	f000 f809 	bl	508 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     4f6:	bd01      	pop	{r0, pc}
}
     4f8:	bf00      	nop
     4fa:	4618      	mov	r0, r3

000004fc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     4fc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     4fe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     500:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     502:	4770      	bx	lr
}
     504:	bf00      	nop
     506:	4618      	mov	r0, r3

00000508 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     508:	b580      	push	{r7, lr}
     50a:	b096      	sub	sp, #88	; 0x58
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     510:	f107 030c 	add.w	r3, r7, #12
     514:	2200      	movs	r2, #0
     516:	601a      	str	r2, [r3, #0]
     518:	605a      	str	r2, [r3, #4]
     51a:	609a      	str	r2, [r3, #8]
     51c:	60da      	str	r2, [r3, #12]
     51e:	611a      	str	r2, [r3, #16]
     520:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     522:	2300      	movs	r3, #0
     524:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     528:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     52a:	4b2e      	ldr	r3, [pc, #184]	; (5e4 <am_util_faultisr_collect_data+0xdc>)
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     532:	b2db      	uxtb	r3, r3
     534:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     53a:	0a1b      	lsrs	r3, r3, #8
     53c:	b2db      	uxtb	r3, r3
     53e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     544:	0c1b      	lsrs	r3, r3, #16
     546:	b29b      	uxth	r3, r3
     548:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     54c:	4b26      	ldr	r3, [pc, #152]	; (5e8 <am_util_faultisr_collect_data+0xe0>)
     54e:	681b      	ldr	r3, [r3, #0]
     550:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     552:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     556:	b2db      	uxtb	r3, r3
     558:	f003 0302 	and.w	r3, r3, #2
     55c:	2b00      	cmp	r3, #0
     55e:	d005      	beq.n	56c <am_util_faultisr_collect_data+0x64>
     560:	6879      	ldr	r1, [r7, #4]
     562:	2006      	movs	r0, #6
     564:	f7ff ffca 	bl	4fc <getStackedReg>
     568:	4603      	mov	r3, r0
     56a:	e001      	b.n	570 <am_util_faultisr_collect_data+0x68>
     56c:	f04f 33ff 	mov.w	r3, #4294967295
     570:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     572:	6879      	ldr	r1, [r7, #4]
     574:	2000      	movs	r0, #0
     576:	f7ff ffc1 	bl	4fc <getStackedReg>
     57a:	4603      	mov	r3, r0
     57c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     57e:	6879      	ldr	r1, [r7, #4]
     580:	2001      	movs	r0, #1
     582:	f7ff ffbb 	bl	4fc <getStackedReg>
     586:	4603      	mov	r3, r0
     588:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     58a:	6879      	ldr	r1, [r7, #4]
     58c:	2002      	movs	r0, #2
     58e:	f7ff ffb5 	bl	4fc <getStackedReg>
     592:	4603      	mov	r3, r0
     594:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     596:	6879      	ldr	r1, [r7, #4]
     598:	2003      	movs	r0, #3
     59a:	f7ff ffaf 	bl	4fc <getStackedReg>
     59e:	4603      	mov	r3, r0
     5a0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5a2:	6879      	ldr	r1, [r7, #4]
     5a4:	2004      	movs	r0, #4
     5a6:	f7ff ffa9 	bl	4fc <getStackedReg>
     5aa:	4603      	mov	r3, r0
     5ac:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5ae:	6879      	ldr	r1, [r7, #4]
     5b0:	2005      	movs	r0, #5
     5b2:	f7ff ffa3 	bl	4fc <getStackedReg>
     5b6:	4603      	mov	r3, r0
     5b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5ba:	6879      	ldr	r1, [r7, #4]
     5bc:	2006      	movs	r0, #6
     5be:	f7ff ff9d 	bl	4fc <getStackedReg>
     5c2:	4603      	mov	r3, r0
     5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	2007      	movs	r0, #7
     5ca:	f7ff ff97 	bl	4fc <getStackedReg>
     5ce:	4603      	mov	r3, r0
     5d0:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     5d2:	f107 030c 	add.w	r3, r7, #12
     5d6:	4618      	mov	r0, r3
     5d8:	f001 fa6c 	bl	1ab4 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     5dc:	2300      	movs	r3, #0
     5de:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     5e0:	e7fe      	b.n	5e0 <am_util_faultisr_collect_data+0xd8>
     5e2:	bf00      	nop
     5e4:	e000ed28 	.word	0xe000ed28
     5e8:	e000ed38 	.word	0xe000ed38

000005ec <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5ec:	b480      	push	{r7}
     5ee:	b083      	sub	sp, #12
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5f4:	4a04      	ldr	r2, [pc, #16]	; (608 <am_util_stdio_printf_init+0x1c>)
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	6013      	str	r3, [r2, #0]
}
     5fa:	bf00      	nop
     5fc:	370c      	adds	r7, #12
     5fe:	46bd      	mov	sp, r7
     600:	f85d 7b04 	ldr.w	r7, [sp], #4
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	100011f0 	.word	0x100011f0

0000060c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     60c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     610:	b096      	sub	sp, #88	; 0x58
     612:	af00      	add	r7, sp, #0
     614:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     618:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     61c:	0025      	movs	r5, r4
     61e:	2600      	movs	r6, #0
     620:	ea55 0306 	orrs.w	r3, r5, r6
     624:	f000 809e 	beq.w	764 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     628:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     62c:	0862      	lsrs	r2, r4, #1
     62e:	ea4f 0133 	mov.w	r1, r3, rrx
     632:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     636:	ea4f 0893 	mov.w	r8, r3, lsr #2
     63a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     63e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     642:	eb11 0308 	adds.w	r3, r1, r8
     646:	eb42 0409 	adc.w	r4, r2, r9
     64a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     64e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     652:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     656:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     65a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     65e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     662:	eb13 030a 	adds.w	r3, r3, sl
     666:	eb44 040b 	adc.w	r4, r4, fp
     66a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     66e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     672:	0a1a      	lsrs	r2, r3, #8
     674:	62ba      	str	r2, [r7, #40]	; 0x28
     676:	6aba      	ldr	r2, [r7, #40]	; 0x28
     678:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     67c:	62ba      	str	r2, [r7, #40]	; 0x28
     67e:	0a23      	lsrs	r3, r4, #8
     680:	62fb      	str	r3, [r7, #44]	; 0x2c
     682:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     686:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     68a:	18c9      	adds	r1, r1, r3
     68c:	eb42 0204 	adc.w	r2, r2, r4
     690:	460b      	mov	r3, r1
     692:	4614      	mov	r4, r2
     694:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     698:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     69c:	0c1a      	lsrs	r2, r3, #16
     69e:	623a      	str	r2, [r7, #32]
     6a0:	6a3a      	ldr	r2, [r7, #32]
     6a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     6a6:	623a      	str	r2, [r7, #32]
     6a8:	0c23      	lsrs	r3, r4, #16
     6aa:	627b      	str	r3, [r7, #36]	; 0x24
     6ac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     6b4:	18c9      	adds	r1, r1, r3
     6b6:	eb42 0204 	adc.w	r2, r2, r4
     6ba:	460b      	mov	r3, r1
     6bc:	4614      	mov	r4, r2
     6be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     6c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6c6:	0023      	movs	r3, r4
     6c8:	603b      	str	r3, [r7, #0]
     6ca:	2300      	movs	r3, #0
     6cc:	607b      	str	r3, [r7, #4]
     6ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6d2:	e897 0006 	ldmia.w	r7, {r1, r2}
     6d6:	18c9      	adds	r1, r1, r3
     6d8:	eb42 0204 	adc.w	r2, r2, r4
     6dc:	460b      	mov	r3, r1
     6de:	4614      	mov	r4, r2
     6e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6e8:	08da      	lsrs	r2, r3, #3
     6ea:	613a      	str	r2, [r7, #16]
     6ec:	693a      	ldr	r2, [r7, #16]
     6ee:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6f2:	613a      	str	r2, [r7, #16]
     6f4:	08e3      	lsrs	r3, r4, #3
     6f6:	617b      	str	r3, [r7, #20]
     6f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     700:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     704:	18db      	adds	r3, r3, r3
     706:	eb44 0404 	adc.w	r4, r4, r4
     70a:	00a2      	lsls	r2, r4, #2
     70c:	60fa      	str	r2, [r7, #12]
     70e:	68fa      	ldr	r2, [r7, #12]
     710:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     714:	60fa      	str	r2, [r7, #12]
     716:	009a      	lsls	r2, r3, #2
     718:	60ba      	str	r2, [r7, #8]
     71a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     71e:	18c9      	adds	r1, r1, r3
     720:	eb42 0204 	adc.w	r2, r2, r4
     724:	460b      	mov	r3, r1
     726:	4614      	mov	r4, r2
     728:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     72c:	1acb      	subs	r3, r1, r3
     72e:	eb62 0404 	sbc.w	r4, r2, r4
     732:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     736:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     73a:	3306      	adds	r3, #6
     73c:	f144 0400 	adc.w	r4, r4, #0
     740:	091a      	lsrs	r2, r3, #4
     742:	61ba      	str	r2, [r7, #24]
     744:	69ba      	ldr	r2, [r7, #24]
     746:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     74a:	61ba      	str	r2, [r7, #24]
     74c:	0923      	lsrs	r3, r4, #4
     74e:	61fb      	str	r3, [r7, #28]
     750:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     754:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     758:	18c9      	adds	r1, r1, r3
     75a:	eb42 0204 	adc.w	r2, r2, r4
     75e:	460b      	mov	r3, r1
     760:	4614      	mov	r4, r2
     762:	e029      	b.n	7b8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     766:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76a:	085a      	lsrs	r2, r3, #1
     76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76e:	089b      	lsrs	r3, r3, #2
     770:	4413      	add	r3, r2
     772:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     776:	091b      	lsrs	r3, r3, #4
     778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     77a:	4413      	add	r3, r2
     77c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     780:	0a1b      	lsrs	r3, r3, #8
     782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     784:	4413      	add	r3, r2
     786:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     78a:	0c1b      	lsrs	r3, r3, #16
     78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     78e:	4413      	add	r3, r2
     790:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     794:	08db      	lsrs	r3, r3, #3
     796:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     79a:	4613      	mov	r3, r2
     79c:	009b      	lsls	r3, r3, #2
     79e:	4413      	add	r3, r2
     7a0:	005b      	lsls	r3, r3, #1
     7a2:	461a      	mov	r2, r3
     7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7a6:	1a9b      	subs	r3, r3, r2
     7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7ac:	3306      	adds	r3, #6
     7ae:	091a      	lsrs	r2, r3, #4
     7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7b2:	4413      	add	r3, r2
     7b4:	f04f 0400 	mov.w	r4, #0
    }
}
     7b8:	4618      	mov	r0, r3
     7ba:	4621      	mov	r1, r4
     7bc:	3758      	adds	r7, #88	; 0x58
     7be:	46bd      	mov	sp, r7
     7c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7c4:	4770      	bx	lr
     7c6:	bf00      	nop

000007c8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     7c8:	b590      	push	{r4, r7, lr}
     7ca:	b085      	sub	sp, #20
     7cc:	af00      	add	r7, sp, #0
     7ce:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     7d2:	683a      	ldr	r2, [r7, #0]
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	4313      	orrs	r3, r2
     7d8:	2b00      	cmp	r3, #0
     7da:	bf0c      	ite	eq
     7dc:	2301      	moveq	r3, #1
     7de:	2300      	movne	r3, #0
     7e0:	b2db      	uxtb	r3, r3
     7e2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7e4:	e008      	b.n	7f8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7e6:	e9d7 0100 	ldrd	r0, r1, [r7]
     7ea:	f7ff ff0f 	bl	60c <divu64_10>
     7ee:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	3301      	adds	r3, #1
     7f6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     7f8:	e897 0018 	ldmia.w	r7, {r3, r4}
     7fc:	4323      	orrs	r3, r4
     7fe:	d1f2      	bne.n	7e6 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     800:	68fb      	ldr	r3, [r7, #12]
}
     802:	4618      	mov	r0, r3
     804:	3714      	adds	r7, #20
     806:	46bd      	mov	sp, r7
     808:	bd90      	pop	{r4, r7, pc}
     80a:	bf00      	nop

0000080c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     80c:	b590      	push	{r4, r7, lr}
     80e:	b083      	sub	sp, #12
     810:	af00      	add	r7, sp, #0
     812:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     816:	e897 0018 	ldmia.w	r7, {r3, r4}
     81a:	2b00      	cmp	r3, #0
     81c:	f174 0300 	sbcs.w	r3, r4, #0
     820:	da06      	bge.n	830 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     822:	e897 0018 	ldmia.w	r7, {r3, r4}
     826:	425b      	negs	r3, r3
     828:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     82c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     830:	e897 0018 	ldmia.w	r7, {r3, r4}
     834:	4618      	mov	r0, r3
     836:	4621      	mov	r1, r4
     838:	f7ff ffc6 	bl	7c8 <ndigits_in_u64>
     83c:	4603      	mov	r3, r0
}
     83e:	4618      	mov	r0, r3
     840:	370c      	adds	r7, #12
     842:	46bd      	mov	sp, r7
     844:	bd90      	pop	{r4, r7, pc}
     846:	bf00      	nop

00000848 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     848:	b490      	push	{r4, r7}
     84a:	b084      	sub	sp, #16
     84c:	af00      	add	r7, sp, #0
     84e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     852:	6839      	ldr	r1, [r7, #0]
     854:	687a      	ldr	r2, [r7, #4]
     856:	430a      	orrs	r2, r1
     858:	2a00      	cmp	r2, #0
     85a:	bf0c      	ite	eq
     85c:	2201      	moveq	r2, #1
     85e:	2200      	movne	r2, #0
     860:	b2d2      	uxtb	r2, r2
     862:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     864:	e00a      	b.n	87c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     866:	e897 0006 	ldmia.w	r7, {r1, r2}
     86a:	090b      	lsrs	r3, r1, #4
     86c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     870:	0914      	lsrs	r4, r2, #4
     872:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     876:	68fa      	ldr	r2, [r7, #12]
     878:	3201      	adds	r2, #1
     87a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     87c:	e897 0006 	ldmia.w	r7, {r1, r2}
     880:	430a      	orrs	r2, r1
     882:	d1f0      	bne.n	866 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     884:	68fb      	ldr	r3, [r7, #12]
}
     886:	4618      	mov	r0, r3
     888:	3710      	adds	r7, #16
     88a:	46bd      	mov	sp, r7
     88c:	bc90      	pop	{r4, r7}
     88e:	4770      	bx	lr

00000890 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     890:	b480      	push	{r7}
     892:	b087      	sub	sp, #28
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     89a:	2300      	movs	r3, #0
     89c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     89e:	2300      	movs	r3, #0
     8a0:	613b      	str	r3, [r7, #16]
     8a2:	2300      	movs	r3, #0
     8a4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	781b      	ldrb	r3, [r3, #0]
     8aa:	2b2d      	cmp	r3, #45	; 0x2d
     8ac:	d11b      	bne.n	8e6 <decstr_to_int+0x56>
    {
        bNeg = true;
     8ae:	2301      	movs	r3, #1
     8b0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	3301      	adds	r3, #1
     8b6:	607b      	str	r3, [r7, #4]
        uCnt++;
     8b8:	68fb      	ldr	r3, [r7, #12]
     8ba:	3301      	adds	r3, #1
     8bc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8be:	e012      	b.n	8e6 <decstr_to_int+0x56>
    {
        ++uCnt;
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	3301      	adds	r3, #1
     8c4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     8c6:	693a      	ldr	r2, [r7, #16]
     8c8:	4613      	mov	r3, r2
     8ca:	009b      	lsls	r3, r3, #2
     8cc:	4413      	add	r3, r2
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	781b      	ldrb	r3, [r3, #0]
     8d6:	461a      	mov	r2, r3
     8d8:	693b      	ldr	r3, [r7, #16]
     8da:	4413      	add	r3, r2
     8dc:	3b30      	subs	r3, #48	; 0x30
     8de:	613b      	str	r3, [r7, #16]
        pcStr++;
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	3301      	adds	r3, #1
     8e4:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	2b2f      	cmp	r3, #47	; 0x2f
     8ec:	d903      	bls.n	8f6 <decstr_to_int+0x66>
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	2b39      	cmp	r3, #57	; 0x39
     8f4:	d9e4      	bls.n	8c0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     8f6:	683b      	ldr	r3, [r7, #0]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d002      	beq.n	902 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	68fa      	ldr	r2, [r7, #12]
     900:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     902:	7dfb      	ldrb	r3, [r7, #23]
     904:	2b00      	cmp	r3, #0
     906:	d002      	beq.n	90e <decstr_to_int+0x7e>
     908:	693b      	ldr	r3, [r7, #16]
     90a:	425b      	negs	r3, r3
     90c:	e000      	b.n	910 <decstr_to_int+0x80>
     90e:	693b      	ldr	r3, [r7, #16]
}
     910:	4618      	mov	r0, r3
     912:	371c      	adds	r7, #28
     914:	46bd      	mov	sp, r7
     916:	f85d 7b04 	ldr.w	r7, [sp], #4
     91a:	4770      	bx	lr

0000091c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     91c:	b590      	push	{r4, r7, lr}
     91e:	b091      	sub	sp, #68	; 0x44
     920:	af00      	add	r7, sp, #0
     922:	e9c7 0102 	strd	r0, r1, [r7, #8]
     926:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     928:	2300      	movs	r3, #0
     92a:	63fb      	str	r3, [r7, #60]	; 0x3c
     92c:	2300      	movs	r3, #0
     92e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     934:	f7ff fe6a 	bl	60c <divu64_10>
     938:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     93c:	68b9      	ldr	r1, [r7, #8]
     93e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     940:	4613      	mov	r3, r2
     942:	009b      	lsls	r3, r3, #2
     944:	4413      	add	r3, r2
     946:	005b      	lsls	r3, r3, #1
     948:	1acb      	subs	r3, r1, r3
     94a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     94e:	1c5a      	adds	r2, r3, #1
     950:	63fa      	str	r2, [r7, #60]	; 0x3c
     952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     954:	b2d2      	uxtb	r2, r2
     956:	3230      	adds	r2, #48	; 0x30
     958:	b2d2      	uxtb	r2, r2
     95a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     95e:	440b      	add	r3, r1
     960:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     964:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     968:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     96c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     970:	4323      	orrs	r3, r4
     972:	d1dd      	bne.n	930 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     976:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2b00      	cmp	r3, #0
     97c:	d011      	beq.n	9a2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     97e:	e008      	b.n	992 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     980:	687b      	ldr	r3, [r7, #4]
     982:	1c5a      	adds	r2, r3, #1
     984:	607a      	str	r2, [r7, #4]
     986:	f107 0110 	add.w	r1, r7, #16
     98a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     98c:	440a      	add	r2, r1
     98e:	7812      	ldrb	r2, [r2, #0]
     990:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     994:	1e5a      	subs	r2, r3, #1
     996:	63fa      	str	r2, [r7, #60]	; 0x3c
     998:	2b00      	cmp	r3, #0
     99a:	d1f1      	bne.n	980 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2200      	movs	r2, #0
     9a0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     9a4:	4618      	mov	r0, r3
     9a6:	3744      	adds	r7, #68	; 0x44
     9a8:	46bd      	mov	sp, r7
     9aa:	bd90      	pop	{r4, r7, pc}

000009ac <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     9ac:	b4b0      	push	{r4, r5, r7}
     9ae:	b08d      	sub	sp, #52	; 0x34
     9b0:	af00      	add	r7, sp, #0
     9b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9b6:	607a      	str	r2, [r7, #4]
     9b8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     9ba:	2300      	movs	r3, #0
     9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     9be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9c2:	4313      	orrs	r3, r2
     9c4:	d131      	bne.n	a2a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9c8:	1c5a      	adds	r2, r3, #1
     9ca:	62fa      	str	r2, [r7, #44]	; 0x2c
     9cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     9d0:	4413      	add	r3, r2
     9d2:	2230      	movs	r2, #48	; 0x30
     9d4:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9d8:	e027      	b.n	a2a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9da:	7a3b      	ldrb	r3, [r7, #8]
     9dc:	f003 030f 	and.w	r3, r3, #15
     9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9e8:	2b09      	cmp	r3, #9
     9ea:	d90a      	bls.n	a02 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9ec:	78fb      	ldrb	r3, [r7, #3]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d001      	beq.n	9f6 <uint64_to_hexstr+0x4a>
     9f2:	2227      	movs	r2, #39	; 0x27
     9f4:	e000      	b.n	9f8 <uint64_to_hexstr+0x4c>
     9f6:	2207      	movs	r2, #7
     9f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9fc:	4413      	add	r3, r2
     9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a04:	1c5a      	adds	r2, r3, #1
     a06:	62fa      	str	r2, [r7, #44]	; 0x2c
     a08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     a0c:	3230      	adds	r2, #48	; 0x30
     a0e:	b2d2      	uxtb	r2, r2
     a10:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a14:	440b      	add	r3, r1
     a16:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a1e:	0914      	lsrs	r4, r2, #4
     a20:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     a24:	091d      	lsrs	r5, r3, #4
     a26:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     a2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a2e:	4313      	orrs	r3, r2
     a30:	d1d3      	bne.n	9da <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a34:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	2b00      	cmp	r3, #0
     a3a:	d011      	beq.n	a60 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a3c:	e008      	b.n	a50 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	1c5a      	adds	r2, r3, #1
     a42:	607a      	str	r2, [r7, #4]
     a44:	f107 0110 	add.w	r1, r7, #16
     a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a4a:	440a      	add	r2, r1
     a4c:	7812      	ldrb	r2, [r2, #0]
     a4e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a52:	1e5a      	subs	r2, r3, #1
     a54:	62fa      	str	r2, [r7, #44]	; 0x2c
     a56:	2b00      	cmp	r3, #0
     a58:	d1f1      	bne.n	a3e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	2200      	movs	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a62:	4618      	mov	r0, r3
     a64:	3734      	adds	r7, #52	; 0x34
     a66:	46bd      	mov	sp, r7
     a68:	bcb0      	pop	{r4, r5, r7}
     a6a:	4770      	bx	lr

00000a6c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a6c:	b480      	push	{r7}
     a6e:	b085      	sub	sp, #20
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a74:	2300      	movs	r3, #0
     a76:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d104      	bne.n	a88 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	e009      	b.n	a96 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	3301      	adds	r3, #1
     a86:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	1c5a      	adds	r2, r3, #1
     a8c:	607a      	str	r2, [r7, #4]
     a8e:	781b      	ldrb	r3, [r3, #0]
     a90:	2b00      	cmp	r3, #0
     a92:	d1f6      	bne.n	a82 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     a94:	68fb      	ldr	r3, [r7, #12]
}
     a96:	4618      	mov	r0, r3
     a98:	3714      	adds	r7, #20
     a9a:	46bd      	mov	sp, r7
     a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa0:	4770      	bx	lr
     aa2:	bf00      	nop

00000aa4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     aa4:	b480      	push	{r7}
     aa6:	b087      	sub	sp, #28
     aa8:	af00      	add	r7, sp, #0
     aaa:	60f8      	str	r0, [r7, #12]
     aac:	460b      	mov	r3, r1
     aae:	607a      	str	r2, [r7, #4]
     ab0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     ab2:	2300      	movs	r3, #0
     ab4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	dc0c      	bgt.n	ad6 <padbuffer+0x32>
    {
        return i32Cnt;
     abc:	697b      	ldr	r3, [r7, #20]
     abe:	e010      	b.n	ae2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d004      	beq.n	ad0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     ac6:	68fb      	ldr	r3, [r7, #12]
     ac8:	1c5a      	adds	r2, r3, #1
     aca:	60fa      	str	r2, [r7, #12]
     acc:	7afa      	ldrb	r2, [r7, #11]
     ace:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ad0:	697b      	ldr	r3, [r7, #20]
     ad2:	3301      	adds	r3, #1
     ad4:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	1e5a      	subs	r2, r3, #1
     ada:	607a      	str	r2, [r7, #4]
     adc:	2b00      	cmp	r3, #0
     ade:	d1ef      	bne.n	ac0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     ae0:	697b      	ldr	r3, [r7, #20]
}
     ae2:	4618      	mov	r0, r3
     ae4:	371c      	adds	r7, #28
     ae6:	46bd      	mov	sp, r7
     ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
     aec:	4770      	bx	lr
     aee:	bf00      	nop

00000af0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     af0:	b590      	push	{r4, r7, lr}
     af2:	b08f      	sub	sp, #60	; 0x3c
     af4:	af00      	add	r7, sp, #0
     af6:	60f8      	str	r0, [r7, #12]
     af8:	60b9      	str	r1, [r7, #8]
     afa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     afc:	68bb      	ldr	r3, [r7, #8]
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b04:	2b03      	cmp	r3, #3
     b06:	dc02      	bgt.n	b0e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     b08:	f06f 0302 	mvn.w	r3, #2
     b0c:	e0d4      	b.n	cb8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     b0e:	edd7 7a03 	vldr	s15, [r7, #12]
     b12:	eef5 7a40 	vcmp.f32	s15, #0.0
     b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b1a:	d104      	bne.n	b26 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b1c:	68bb      	ldr	r3, [r7, #8]
     b1e:	4a68      	ldr	r2, [pc, #416]	; (cc0 <ftoa+0x1d0>)
     b20:	601a      	str	r2, [r3, #0]
        return 3;
     b22:	2303      	movs	r3, #3
     b24:	e0c8      	b.n	cb8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     b26:	68bb      	ldr	r3, [r7, #8]
     b28:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     b2e:	697b      	ldr	r3, [r7, #20]
     b30:	15db      	asrs	r3, r3, #23
     b32:	b2db      	uxtb	r3, r3
     b34:	3b7f      	subs	r3, #127	; 0x7f
     b36:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b38:	697b      	ldr	r3, [r7, #20]
     b3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b42:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     b44:	2300      	movs	r3, #0
     b46:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b48:	2300      	movs	r3, #0
     b4a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b4c:	6a3b      	ldr	r3, [r7, #32]
     b4e:	2b1e      	cmp	r3, #30
     b50:	dd02      	ble.n	b58 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b52:	f06f 0301 	mvn.w	r3, #1
     b56:	e0af      	b.n	cb8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     b58:	6a3b      	ldr	r3, [r7, #32]
     b5a:	f113 0f17 	cmn.w	r3, #23
     b5e:	da02      	bge.n	b66 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b60:	f04f 33ff 	mov.w	r3, #4294967295
     b64:	e0a8      	b.n	cb8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     b66:	6a3b      	ldr	r3, [r7, #32]
     b68:	2b16      	cmp	r3, #22
     b6a:	dd06      	ble.n	b7a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     b6c:	6a3b      	ldr	r3, [r7, #32]
     b6e:	3b17      	subs	r3, #23
     b70:	69fa      	ldr	r2, [r7, #28]
     b72:	fa02 f303 	lsl.w	r3, r2, r3
     b76:	637b      	str	r3, [r7, #52]	; 0x34
     b78:	e01a      	b.n	bb0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b7a:	6a3b      	ldr	r3, [r7, #32]
     b7c:	2b00      	cmp	r3, #0
     b7e:	db0f      	blt.n	ba0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     b80:	6a3b      	ldr	r3, [r7, #32]
     b82:	f1c3 0317 	rsb	r3, r3, #23
     b86:	69fa      	ldr	r2, [r7, #28]
     b88:	fa42 f303 	asr.w	r3, r2, r3
     b8c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     b8e:	6a3b      	ldr	r3, [r7, #32]
     b90:	3301      	adds	r3, #1
     b92:	69fa      	ldr	r2, [r7, #28]
     b94:	fa02 f303 	lsl.w	r3, r2, r3
     b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b9c:	633b      	str	r3, [r7, #48]	; 0x30
     b9e:	e007      	b.n	bb0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     ba0:	69fb      	ldr	r3, [r7, #28]
     ba2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ba6:	6a3b      	ldr	r3, [r7, #32]
     ba8:	43db      	mvns	r3, r3
     baa:	fa42 f303 	asr.w	r3, r2, r3
     bae:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     bb0:	697b      	ldr	r3, [r7, #20]
     bb2:	2b00      	cmp	r3, #0
     bb4:	da04      	bge.n	bc0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	1c5a      	adds	r2, r3, #1
     bba:	60ba      	str	r2, [r7, #8]
     bbc:	222d      	movs	r2, #45	; 0x2d
     bbe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc2:	2b00      	cmp	r3, #0
     bc4:	d105      	bne.n	bd2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	1c5a      	adds	r2, r3, #1
     bca:	60ba      	str	r2, [r7, #8]
     bcc:	2230      	movs	r2, #48	; 0x30
     bce:	701a      	strb	r2, [r3, #0]
     bd0:	e021      	b.n	c16 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bd4:	2b00      	cmp	r3, #0
     bd6:	dd08      	ble.n	bea <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bda:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bde:	68ba      	ldr	r2, [r7, #8]
     be0:	4618      	mov	r0, r3
     be2:	4621      	mov	r1, r4
     be4:	f7ff fe9a 	bl	91c <uint64_to_str>
     be8:	e011      	b.n	c0e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	1c5a      	adds	r2, r3, #1
     bee:	60ba      	str	r2, [r7, #8]
     bf0:	222d      	movs	r2, #45	; 0x2d
     bf2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bf6:	425b      	negs	r3, r3
     bf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bfc:	68ba      	ldr	r2, [r7, #8]
     bfe:	4618      	mov	r0, r3
     c00:	4621      	mov	r1, r4
     c02:	f7ff fe8b 	bl	91c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     c06:	e002      	b.n	c0e <ftoa+0x11e>
        {
            pcBuf++;
     c08:	68bb      	ldr	r3, [r7, #8]
     c0a:	3301      	adds	r3, #1
     c0c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     c0e:	68bb      	ldr	r3, [r7, #8]
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d1f8      	bne.n	c08 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	1c5a      	adds	r2, r3, #1
     c1a:	60ba      	str	r2, [r7, #8]
     c1c:	222e      	movs	r2, #46	; 0x2e
     c1e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c22:	2b00      	cmp	r3, #0
     c24:	d105      	bne.n	c32 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     c26:	68bb      	ldr	r3, [r7, #8]
     c28:	1c5a      	adds	r2, r3, #1
     c2a:	60ba      	str	r2, [r7, #8]
     c2c:	2230      	movs	r2, #48	; 0x30
     c2e:	701a      	strb	r2, [r3, #0]
     c30:	e03c      	b.n	cac <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     c32:	68ba      	ldr	r2, [r7, #8]
     c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c36:	1ad3      	subs	r3, r2, r3
     c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c3a:	1ad3      	subs	r3, r2, r3
     c3c:	3b01      	subs	r3, #1
     c3e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c40:	69ba      	ldr	r2, [r7, #24]
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	4293      	cmp	r3, r2
     c46:	bfa8      	it	ge
     c48:	4613      	movge	r3, r2
     c4a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     c4c:	2300      	movs	r3, #0
     c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
     c50:	e015      	b.n	c7e <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c54:	4613      	mov	r3, r2
     c56:	009b      	lsls	r3, r3, #2
     c58:	4413      	add	r3, r2
     c5a:	005b      	lsls	r3, r3, #1
     c5c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c5e:	68bb      	ldr	r3, [r7, #8]
     c60:	1c5a      	adds	r2, r3, #1
     c62:	60ba      	str	r2, [r7, #8]
     c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c66:	1612      	asrs	r2, r2, #24
     c68:	b2d2      	uxtb	r2, r2
     c6a:	3230      	adds	r2, #48	; 0x30
     c6c:	b2d2      	uxtb	r2, r2
     c6e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c76:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c7a:	3301      	adds	r3, #1
     c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
     c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c80:	69bb      	ldr	r3, [r7, #24]
     c82:	429a      	cmp	r2, r3
     c84:	dbe5      	blt.n	c52 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     c86:	68bb      	ldr	r3, [r7, #8]
     c88:	3b01      	subs	r3, #1
     c8a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c8c:	e002      	b.n	c94 <ftoa+0x1a4>
        {
            --pcBuf;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3b01      	subs	r3, #1
     c92:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c94:	68bb      	ldr	r3, [r7, #8]
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	2b30      	cmp	r3, #48	; 0x30
     c9a:	d104      	bne.n	ca6 <ftoa+0x1b6>
     c9c:	68bb      	ldr	r3, [r7, #8]
     c9e:	3b01      	subs	r3, #1
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b2e      	cmp	r3, #46	; 0x2e
     ca4:	d1f3      	bne.n	c8e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	3301      	adds	r3, #1
     caa:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     cac:	68bb      	ldr	r3, [r7, #8]
     cae:	2200      	movs	r2, #0
     cb0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     cb2:	68ba      	ldr	r2, [r7, #8]
     cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cb6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     cb8:	4618      	mov	r0, r3
     cba:	373c      	adds	r7, #60	; 0x3c
     cbc:	46bd      	mov	sp, r7
     cbe:	bd90      	pop	{r4, r7, pc}
     cc0:	00302e30 	.word	0x00302e30

00000cc4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     cc4:	b590      	push	{r4, r7, lr}
     cc6:	b095      	sub	sp, #84	; 0x54
     cc8:	af00      	add	r7, sp, #0
     cca:	60f8      	str	r0, [r7, #12]
     ccc:	60b9      	str	r1, [r7, #8]
     cce:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     cd0:	2300      	movs	r3, #0
     cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     cd4:	2300      	movs	r3, #0
     cd6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     cd8:	e2e3      	b.n	12a2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     cda:	2306      	movs	r3, #6
     cdc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     cde:	68bb      	ldr	r3, [r7, #8]
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b25      	cmp	r3, #37	; 0x25
     ce4:	d01f      	beq.n	d26 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	2b00      	cmp	r3, #0
     cea:	d015      	beq.n	d18 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     cec:	68bb      	ldr	r3, [r7, #8]
     cee:	781b      	ldrb	r3, [r3, #0]
     cf0:	2b0a      	cmp	r3, #10
     cf2:	d10b      	bne.n	d0c <am_util_stdio_vsprintf+0x48>
     cf4:	4bb1      	ldr	r3, [pc, #708]	; (fbc <am_util_stdio_vsprintf+0x2f8>)
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d007      	beq.n	d0c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     cfc:	68fb      	ldr	r3, [r7, #12]
     cfe:	1c5a      	adds	r2, r3, #1
     d00:	60fa      	str	r2, [r7, #12]
     d02:	220d      	movs	r2, #13
     d04:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d08:	3301      	adds	r3, #1
     d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	1c5a      	adds	r2, r3, #1
     d10:	60fa      	str	r2, [r7, #12]
     d12:	68ba      	ldr	r2, [r7, #8]
     d14:	7812      	ldrb	r2, [r2, #0]
     d16:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	3301      	adds	r3, #1
     d1c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d20:	3301      	adds	r3, #1
     d22:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     d24:	e2bd      	b.n	12a2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	3301      	adds	r3, #1
     d2a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     d2c:	2300      	movs	r3, #0
     d2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d3a:	2320      	movs	r3, #32
     d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d40:	68bb      	ldr	r3, [r7, #8]
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	2b30      	cmp	r3, #48	; 0x30
     d46:	d105      	bne.n	d54 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d48:	2330      	movs	r3, #48	; 0x30
     d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d4e:	68bb      	ldr	r3, [r7, #8]
     d50:	3301      	adds	r3, #1
     d52:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d54:	f107 0310 	add.w	r3, r7, #16
     d58:	4619      	mov	r1, r3
     d5a:	68b8      	ldr	r0, [r7, #8]
     d5c:	f7ff fd98 	bl	890 <decstr_to_int>
     d60:	4603      	mov	r3, r0
     d62:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d64:	693b      	ldr	r3, [r7, #16]
     d66:	68ba      	ldr	r2, [r7, #8]
     d68:	4413      	add	r3, r2
     d6a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d6c:	68bb      	ldr	r3, [r7, #8]
     d6e:	781b      	ldrb	r3, [r3, #0]
     d70:	2b73      	cmp	r3, #115	; 0x73
     d72:	d005      	beq.n	d80 <am_util_stdio_vsprintf+0xbc>
     d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d76:	2b00      	cmp	r3, #0
     d78:	da02      	bge.n	d80 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d7c:	425b      	negs	r3, r3
     d7e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	2b2e      	cmp	r3, #46	; 0x2e
     d86:	d10e      	bne.n	da6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	3301      	adds	r3, #1
     d8c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d8e:	f107 0310 	add.w	r3, r7, #16
     d92:	4619      	mov	r1, r3
     d94:	68b8      	ldr	r0, [r7, #8]
     d96:	f7ff fd7b 	bl	890 <decstr_to_int>
     d9a:	4603      	mov	r3, r0
     d9c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d9e:	693b      	ldr	r3, [r7, #16]
     da0:	68ba      	ldr	r2, [r7, #8]
     da2:	4413      	add	r3, r2
     da4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     da6:	68bb      	ldr	r3, [r7, #8]
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b6c      	cmp	r3, #108	; 0x6c
     dac:	d10c      	bne.n	dc8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     dae:	68bb      	ldr	r3, [r7, #8]
     db0:	3301      	adds	r3, #1
     db2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     db4:	68bb      	ldr	r3, [r7, #8]
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	2b6c      	cmp	r3, #108	; 0x6c
     dba:	d105      	bne.n	dc8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     dbc:	68bb      	ldr	r3, [r7, #8]
     dbe:	3301      	adds	r3, #1
     dc0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     dc2:	2301      	movs	r3, #1
     dc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     dc8:	68bb      	ldr	r3, [r7, #8]
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	3b46      	subs	r3, #70	; 0x46
     dce:	2b32      	cmp	r3, #50	; 0x32
     dd0:	f200 8254 	bhi.w	127c <am_util_stdio_vsprintf+0x5b8>
     dd4:	a201      	add	r2, pc, #4	; (adr r2, ddc <am_util_stdio_vsprintf+0x118>)
     dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dda:	bf00      	nop
     ddc:	00001207 	.word	0x00001207
     de0:	0000127d 	.word	0x0000127d
     de4:	0000127d 	.word	0x0000127d
     de8:	0000127d 	.word	0x0000127d
     dec:	0000127d 	.word	0x0000127d
     df0:	0000127d 	.word	0x0000127d
     df4:	0000127d 	.word	0x0000127d
     df8:	0000127d 	.word	0x0000127d
     dfc:	0000127d 	.word	0x0000127d
     e00:	0000127d 	.word	0x0000127d
     e04:	0000127d 	.word	0x0000127d
     e08:	0000127d 	.word	0x0000127d
     e0c:	0000127d 	.word	0x0000127d
     e10:	0000127d 	.word	0x0000127d
     e14:	0000127d 	.word	0x0000127d
     e18:	0000127d 	.word	0x0000127d
     e1c:	0000127d 	.word	0x0000127d
     e20:	0000127d 	.word	0x0000127d
     e24:	00000fa3 	.word	0x00000fa3
     e28:	0000127d 	.word	0x0000127d
     e2c:	0000127d 	.word	0x0000127d
     e30:	0000127d 	.word	0x0000127d
     e34:	0000127d 	.word	0x0000127d
     e38:	0000127d 	.word	0x0000127d
     e3c:	0000127d 	.word	0x0000127d
     e40:	0000127d 	.word	0x0000127d
     e44:	0000127d 	.word	0x0000127d
     e48:	0000127d 	.word	0x0000127d
     e4c:	0000127d 	.word	0x0000127d
     e50:	00000ea9 	.word	0x00000ea9
     e54:	000010cf 	.word	0x000010cf
     e58:	0000127d 	.word	0x0000127d
     e5c:	00001207 	.word	0x00001207
     e60:	0000127d 	.word	0x0000127d
     e64:	0000127d 	.word	0x0000127d
     e68:	000010cf 	.word	0x000010cf
     e6c:	0000127d 	.word	0x0000127d
     e70:	0000127d 	.word	0x0000127d
     e74:	0000127d 	.word	0x0000127d
     e78:	0000127d 	.word	0x0000127d
     e7c:	0000127d 	.word	0x0000127d
     e80:	0000127d 	.word	0x0000127d
     e84:	0000127d 	.word	0x0000127d
     e88:	0000127d 	.word	0x0000127d
     e8c:	0000127d 	.word	0x0000127d
     e90:	00000ecf 	.word	0x00000ecf
     e94:	0000127d 	.word	0x0000127d
     e98:	0000103d 	.word	0x0000103d
     e9c:	0000127d 	.word	0x0000127d
     ea0:	0000127d 	.word	0x0000127d
     ea4:	00000f9d 	.word	0x00000f9d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	1d1a      	adds	r2, r3, #4
     eac:	607a      	str	r2, [r7, #4]
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d005      	beq.n	ec6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	60fa      	str	r2, [r7, #12]
     ec0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     ec4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec8:	3301      	adds	r3, #1
     eca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ecc:	e1e6      	b.n	129c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	1d1a      	adds	r2, r3, #4
     ed2:	607a      	str	r2, [r7, #4]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ed8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     eda:	f7ff fdc7 	bl	a6c <simple_strlen>
     ede:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee2:	2b00      	cmp	r3, #0
     ee4:	dd2e      	ble.n	f44 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     eea:	429a      	cmp	r2, r3
     eec:	d22a      	bcs.n	f44 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ef2:	1ad3      	subs	r3, r2, r3
     ef4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
     efc:	4619      	mov	r1, r3
     efe:	68f8      	ldr	r0, [r7, #12]
     f00:	f7ff fdd0 	bl	aa4 <padbuffer>
     f04:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	2b00      	cmp	r3, #0
     f0a:	d001      	beq.n	f10 <am_util_stdio_vsprintf+0x24c>
     f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0e:	e000      	b.n	f12 <am_util_stdio_vsprintf+0x24e>
     f10:	2300      	movs	r3, #0
     f12:	68fa      	ldr	r2, [r7, #12]
     f14:	4413      	add	r3, r2
     f16:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f1c:	4413      	add	r3, r2
     f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f20:	2300      	movs	r3, #0
     f22:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     f24:	e00e      	b.n	f44 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	2b00      	cmp	r3, #0
     f2a:	d005      	beq.n	f38 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	60fa      	str	r2, [r7, #12]
     f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f34:	7812      	ldrb	r2, [r2, #0]
     f36:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f3a:	3301      	adds	r3, #1
     f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f40:	3301      	adds	r3, #1
     f42:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	2b00      	cmp	r3, #0
     f4a:	d1ec      	bne.n	f26 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4e:	2b00      	cmp	r3, #0
     f50:	f000 81a1 	beq.w	1296 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f56:	425b      	negs	r3, r3
     f58:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f5e:	429a      	cmp	r2, r3
     f60:	f080 8199 	bcs.w	1296 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f68:	1ad3      	subs	r3, r2, r3
     f6a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f72:	4619      	mov	r1, r3
     f74:	68f8      	ldr	r0, [r7, #12]
     f76:	f7ff fd95 	bl	aa4 <padbuffer>
     f7a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	2b00      	cmp	r3, #0
     f80:	d001      	beq.n	f86 <am_util_stdio_vsprintf+0x2c2>
     f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f84:	e000      	b.n	f88 <am_util_stdio_vsprintf+0x2c4>
     f86:	2300      	movs	r3, #0
     f88:	68fa      	ldr	r2, [r7, #12]
     f8a:	4413      	add	r3, r2
     f8c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f92:	4413      	add	r3, r2
     f94:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f96:	2300      	movs	r3, #0
     f98:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f9a:	e17c      	b.n	1296 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f9c:	2301      	movs	r3, #1
     f9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fa6:	2b00      	cmp	r3, #0
     fa8:	d00a      	beq.n	fc0 <am_util_stdio_vsprintf+0x2fc>
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	3307      	adds	r3, #7
     fae:	f023 0307 	bic.w	r3, r3, #7
     fb2:	f103 0208 	add.w	r2, r3, #8
     fb6:	607a      	str	r2, [r7, #4]
     fb8:	cb18      	ldmia	r3, {r3, r4}
     fba:	e007      	b.n	fcc <am_util_stdio_vsprintf+0x308>
     fbc:	100011b0 	.word	0x100011b0
                                      va_arg(pArgs, uint32_t);
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	1d1a      	adds	r2, r3, #4
     fc4:	607a      	str	r2, [r7, #4]
     fc6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc8:	f04f 0400 	mov.w	r4, #0
     fcc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd2:	2b00      	cmp	r3, #0
     fd4:	d01e      	beq.n	1014 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fda:	f7ff fc35 	bl	848 <ndigits_in_hex>
     fde:	4602      	mov	r2, r0
     fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe2:	1a9b      	subs	r3, r3, r2
     fe4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fec:	4619      	mov	r1, r3
     fee:	68f8      	ldr	r0, [r7, #12]
     ff0:	f7ff fd58 	bl	aa4 <padbuffer>
     ff4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d001      	beq.n	1000 <am_util_stdio_vsprintf+0x33c>
     ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffe:	e000      	b.n	1002 <am_util_stdio_vsprintf+0x33e>
    1000:	2300      	movs	r3, #0
    1002:	68fa      	ldr	r2, [r7, #12]
    1004:	4413      	add	r3, r2
    1006:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    100c:	4413      	add	r3, r2
    100e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1010:	2300      	movs	r3, #0
    1012:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1018:	68fa      	ldr	r2, [r7, #12]
    101a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    101e:	f7ff fcc5 	bl	9ac <uint64_to_hexstr>
    1022:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1024:	68fb      	ldr	r3, [r7, #12]
    1026:	2b00      	cmp	r3, #0
    1028:	d003      	beq.n	1032 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    102c:	68fa      	ldr	r2, [r7, #12]
    102e:	4413      	add	r3, r2
    1030:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1036:	4413      	add	r3, r2
    1038:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    103a:	e12f      	b.n	129c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    103c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1040:	2b00      	cmp	r3, #0
    1042:	d008      	beq.n	1056 <am_util_stdio_vsprintf+0x392>
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	3307      	adds	r3, #7
    1048:	f023 0307 	bic.w	r3, r3, #7
    104c:	f103 0208 	add.w	r2, r3, #8
    1050:	607a      	str	r2, [r7, #4]
    1052:	cb18      	ldmia	r3, {r3, r4}
    1054:	e005      	b.n	1062 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	1d1a      	adds	r2, r3, #4
    105a:	607a      	str	r2, [r7, #4]
    105c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    105e:	f04f 0400 	mov.w	r4, #0
    1062:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1068:	2b00      	cmp	r3, #0
    106a:	d01e      	beq.n	10aa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    106c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1070:	f7ff fbaa 	bl	7c8 <ndigits_in_u64>
    1074:	4602      	mov	r2, r0
    1076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1078:	1a9b      	subs	r3, r3, r2
    107a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    107c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1080:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1082:	4619      	mov	r1, r3
    1084:	68f8      	ldr	r0, [r7, #12]
    1086:	f7ff fd0d 	bl	aa4 <padbuffer>
    108a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    108c:	68fb      	ldr	r3, [r7, #12]
    108e:	2b00      	cmp	r3, #0
    1090:	d001      	beq.n	1096 <am_util_stdio_vsprintf+0x3d2>
    1092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1094:	e000      	b.n	1098 <am_util_stdio_vsprintf+0x3d4>
    1096:	2300      	movs	r3, #0
    1098:	68fa      	ldr	r2, [r7, #12]
    109a:	4413      	add	r3, r2
    109c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10a2:	4413      	add	r3, r2
    10a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10a6:	2300      	movs	r3, #0
    10a8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    10aa:	68fa      	ldr	r2, [r7, #12]
    10ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10b0:	f7ff fc34 	bl	91c <uint64_to_str>
    10b4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d003      	beq.n	10c4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    10bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10be:	68fa      	ldr	r2, [r7, #12]
    10c0:	4413      	add	r3, r2
    10c2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10c8:	4413      	add	r3, r2
    10ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10cc:	e0e6      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10d2:	2b00      	cmp	r3, #0
    10d4:	d008      	beq.n	10e8 <am_util_stdio_vsprintf+0x424>
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	3307      	adds	r3, #7
    10da:	f023 0307 	bic.w	r3, r3, #7
    10de:	f103 0208 	add.w	r2, r3, #8
    10e2:	607a      	str	r2, [r7, #4]
    10e4:	cb18      	ldmia	r3, {r3, r4}
    10e6:	e005      	b.n	10f4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	1d1a      	adds	r2, r3, #4
    10ec:	607a      	str	r2, [r7, #4]
    10ee:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    10f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10fc:	2b00      	cmp	r3, #0
    10fe:	f174 0300 	sbcs.w	r3, r4, #0
    1102:	da0a      	bge.n	111a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1104:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1108:	425b      	negs	r3, r3
    110a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    110e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1112:	2301      	movs	r3, #1
    1114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1118:	e006      	b.n	1128 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    111a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    111e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1122:	2300      	movs	r3, #0
    1124:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    112a:	2b00      	cmp	r3, #0
    112c:	d04a      	beq.n	11c4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    112e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1132:	4618      	mov	r0, r3
    1134:	4621      	mov	r1, r4
    1136:	f7ff fb69 	bl	80c <ndigits_in_i64>
    113a:	4602      	mov	r2, r0
    113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113e:	1a9b      	subs	r3, r3, r2
    1140:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1146:	2b00      	cmp	r3, #0
    1148:	d011      	beq.n	116e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114c:	3b01      	subs	r3, #1
    114e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1154:	2b30      	cmp	r3, #48	; 0x30
    1156:	d10a      	bne.n	116e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	2b00      	cmp	r3, #0
    115c:	d004      	beq.n	1168 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	1c5a      	adds	r2, r3, #1
    1162:	60fa      	str	r2, [r7, #12]
    1164:	222d      	movs	r2, #45	; 0x2d
    1166:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    116a:	3301      	adds	r3, #1
    116c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    116e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1172:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1174:	4619      	mov	r1, r3
    1176:	68f8      	ldr	r0, [r7, #12]
    1178:	f7ff fc94 	bl	aa4 <padbuffer>
    117c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	2b00      	cmp	r3, #0
    1182:	d001      	beq.n	1188 <am_util_stdio_vsprintf+0x4c4>
    1184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1186:	e000      	b.n	118a <am_util_stdio_vsprintf+0x4c6>
    1188:	2300      	movs	r3, #0
    118a:	68fa      	ldr	r2, [r7, #12]
    118c:	4413      	add	r3, r2
    118e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1194:	4413      	add	r3, r2
    1196:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1198:	2300      	movs	r3, #0
    119a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    119c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11a0:	2b00      	cmp	r3, #0
    11a2:	d01e      	beq.n	11e2 <am_util_stdio_vsprintf+0x51e>
    11a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11a8:	2b20      	cmp	r3, #32
    11aa:	d11a      	bne.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d004      	beq.n	11bc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    11b2:	68fb      	ldr	r3, [r7, #12]
    11b4:	1c5a      	adds	r2, r3, #1
    11b6:	60fa      	str	r2, [r7, #12]
    11b8:	222d      	movs	r2, #45	; 0x2d
    11ba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    11bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11be:	3301      	adds	r3, #1
    11c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    11c2:	e00e      	b.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    11c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11c8:	2b00      	cmp	r3, #0
    11ca:	d00a      	beq.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d004      	beq.n	11dc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	1c5a      	adds	r2, r3, #1
    11d6:	60fa      	str	r2, [r7, #12]
    11d8:	222d      	movs	r2, #45	; 0x2d
    11da:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11de:	3301      	adds	r3, #1
    11e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    11e2:	68fa      	ldr	r2, [r7, #12]
    11e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11e8:	f7ff fb98 	bl	91c <uint64_to_str>
    11ec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d003      	beq.n	11fc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    11f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f6:	68fa      	ldr	r2, [r7, #12]
    11f8:	4413      	add	r3, r2
    11fa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1200:	4413      	add	r3, r2
    1202:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1204:	e04a      	b.n	129c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	2b00      	cmp	r3, #0
    120a:	d046      	beq.n	129a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	3307      	adds	r3, #7
    1210:	f023 0307 	bic.w	r3, r3, #7
    1214:	f103 0208 	add.w	r2, r3, #8
    1218:	607a      	str	r2, [r7, #4]
    121a:	cb18      	ldmia	r3, {r3, r4}
    121c:	4618      	mov	r0, r3
    121e:	4621      	mov	r1, r4
    1220:	f7fe ff4e 	bl	c0 <__aeabi_d2f>
    1224:	4603      	mov	r3, r0
    1226:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	2214      	movs	r2, #20
    122c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    122e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1230:	68f9      	ldr	r1, [r7, #12]
    1232:	6978      	ldr	r0, [r7, #20]
    1234:	f7ff fc5c 	bl	af0 <ftoa>
    1238:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    123c:	2b00      	cmp	r3, #0
    123e:	da14      	bge.n	126a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1242:	f1b3 3fff 	cmp.w	r3, #4294967295
    1246:	d102      	bne.n	124e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1248:	4b1e      	ldr	r3, [pc, #120]	; (12c4 <am_util_stdio_vsprintf+0x600>)
    124a:	62bb      	str	r3, [r7, #40]	; 0x28
    124c:	e008      	b.n	1260 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1250:	f113 0f02 	cmn.w	r3, #2
    1254:	d102      	bne.n	125c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1256:	4b1c      	ldr	r3, [pc, #112]	; (12c8 <am_util_stdio_vsprintf+0x604>)
    1258:	62bb      	str	r3, [r7, #40]	; 0x28
    125a:	e001      	b.n	1260 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    125c:	4b1b      	ldr	r3, [pc, #108]	; (12cc <am_util_stdio_vsprintf+0x608>)
    125e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1264:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1266:	2303      	movs	r3, #3
    1268:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    126c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    126e:	4413      	add	r3, r2
    1270:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1274:	68fa      	ldr	r2, [r7, #12]
    1276:	4413      	add	r3, r2
    1278:	60fb      	str	r3, [r7, #12]
                }
                break;
    127a:	e00e      	b.n	129a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	2b00      	cmp	r3, #0
    1280:	d005      	beq.n	128e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	1c5a      	adds	r2, r3, #1
    1286:	60fa      	str	r2, [r7, #12]
    1288:	68ba      	ldr	r2, [r7, #8]
    128a:	7812      	ldrb	r2, [r2, #0]
    128c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1290:	3301      	adds	r3, #1
    1292:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1294:	e002      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1296:	bf00      	nop
    1298:	e000      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    129a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    129c:	68bb      	ldr	r3, [r7, #8]
    129e:	3301      	adds	r3, #1
    12a0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    12a2:	68bb      	ldr	r3, [r7, #8]
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	f47f ad17 	bne.w	cda <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d002      	beq.n	12b8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    12b2:	68fb      	ldr	r3, [r7, #12]
    12b4:	2200      	movs	r2, #0
    12b6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    12b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    12ba:	4618      	mov	r0, r3
    12bc:	3754      	adds	r7, #84	; 0x54
    12be:	46bd      	mov	sp, r7
    12c0:	bd90      	pop	{r4, r7, pc}
    12c2:	bf00      	nop
    12c4:	00302e30 	.word	0x00302e30
    12c8:	00232e23 	.word	0x00232e23
    12cc:	003f2e3f 	.word	0x003f2e3f

000012d0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    12d0:	b40f      	push	{r0, r1, r2, r3}
    12d2:	b580      	push	{r7, lr}
    12d4:	b082      	sub	sp, #8
    12d6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12d8:	f107 0314 	add.w	r3, r7, #20
    12dc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12de:	683a      	ldr	r2, [r7, #0]
    12e0:	6939      	ldr	r1, [r7, #16]
    12e2:	4808      	ldr	r0, [pc, #32]	; (1304 <am_util_stdio_printf+0x34>)
    12e4:	f7ff fcee 	bl	cc4 <am_util_stdio_vsprintf>
    12e8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    12ea:	4b07      	ldr	r3, [pc, #28]	; (1308 <am_util_stdio_printf+0x38>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	4805      	ldr	r0, [pc, #20]	; (1304 <am_util_stdio_printf+0x34>)
    12f0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12f2:	687b      	ldr	r3, [r7, #4]
}
    12f4:	4618      	mov	r0, r3
    12f6:	3708      	adds	r7, #8
    12f8:	46bd      	mov	sp, r7
    12fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12fe:	b004      	add	sp, #16
    1300:	4770      	bx	lr
    1302:	bf00      	nop
    1304:	100010b0 	.word	0x100010b0
    1308:	100011f0 	.word	0x100011f0

0000130c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    130c:	b580      	push	{r7, lr}
    130e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1310:	4802      	ldr	r0, [pc, #8]	; (131c <am_util_stdio_terminal_clear+0x10>)
    1312:	f7ff ffdd 	bl	12d0 <am_util_stdio_printf>
}
    1316:	bf00      	nop
    1318:	bd80      	pop	{r7, pc}
    131a:	bf00      	nop
    131c:	00002380 	.word	0x00002380

00001320 <am_util_string_strnicmp>:
//!  if str1>str2.
//
//*****************************************************************************
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
    1320:	b480      	push	{r7}
    1322:	b087      	sub	sp, #28
    1324:	af00      	add	r7, sp, #0
    1326:	60f8      	str	r0, [r7, #12]
    1328:	60b9      	str	r1, [r7, #8]
    132a:	607a      	str	r2, [r7, #4]
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
    132c:	e034      	b.n	1398 <am_util_string_strnicmp+0x78>
    {
        cChar1 = *str1;
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	75fb      	strb	r3, [r7, #23]
        cChar2 = *str2;
    1334:	68bb      	ldr	r3, [r7, #8]
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	75bb      	strb	r3, [r7, #22]

        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    133a:	7dfb      	ldrb	r3, [r7, #23]
    133c:	4a1f      	ldr	r2, [pc, #124]	; (13bc <am_util_string_strnicmp+0x9c>)
    133e:	5cd3      	ldrb	r3, [r2, r3]
    1340:	f003 0304 	and.w	r3, r3, #4
    1344:	2b00      	cmp	r3, #0
    1346:	d001      	beq.n	134c <am_util_string_strnicmp+0x2c>
    1348:	2220      	movs	r2, #32
    134a:	e000      	b.n	134e <am_util_string_strnicmp+0x2e>
    134c:	2200      	movs	r2, #0
    134e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1352:	4313      	orrs	r3, r2
    1354:	b25b      	sxtb	r3, r3
    1356:	75fb      	strb	r3, [r7, #23]
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    1358:	7dbb      	ldrb	r3, [r7, #22]
    135a:	4a18      	ldr	r2, [pc, #96]	; (13bc <am_util_string_strnicmp+0x9c>)
    135c:	5cd3      	ldrb	r3, [r2, r3]
    135e:	f003 0304 	and.w	r3, r3, #4
    1362:	2b00      	cmp	r3, #0
    1364:	d001      	beq.n	136a <am_util_string_strnicmp+0x4a>
    1366:	2220      	movs	r2, #32
    1368:	e000      	b.n	136c <am_util_string_strnicmp+0x4c>
    136a:	2200      	movs	r2, #0
    136c:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1370:	4313      	orrs	r3, r2
    1372:	b25b      	sxtb	r3, r3
    1374:	75bb      	strb	r3, [r7, #22]

        if ( cChar1 != cChar2 )
    1376:	7dfa      	ldrb	r2, [r7, #23]
    1378:	7dbb      	ldrb	r3, [r7, #22]
    137a:	429a      	cmp	r2, r3
    137c:	d003      	beq.n	1386 <am_util_string_strnicmp+0x66>
        {
            return cChar1 - cChar2;
    137e:	7dfa      	ldrb	r2, [r7, #23]
    1380:	7dbb      	ldrb	r3, [r7, #22]
    1382:	1ad3      	subs	r3, r2, r3
    1384:	e014      	b.n	13b0 <am_util_string_strnicmp+0x90>
        }

        str1++;
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	3301      	adds	r3, #1
    138a:	60fb      	str	r3, [r7, #12]
        str2++;
    138c:	68bb      	ldr	r3, [r7, #8]
    138e:	3301      	adds	r3, #1
    1390:	60bb      	str	r3, [r7, #8]
        num--;
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	3b01      	subs	r3, #1
    1396:	607b      	str	r3, [r7, #4]
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	2b00      	cmp	r3, #0
    139e:	d006      	beq.n	13ae <am_util_string_strnicmp+0x8e>
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d002      	beq.n	13ae <am_util_string_strnicmp+0x8e>
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d1bf      	bne.n	132e <am_util_string_strnicmp+0xe>
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
    13ae:	2300      	movs	r3, #0
}
    13b0:	4618      	mov	r0, r3
    13b2:	371c      	adds	r7, #28
    13b4:	46bd      	mov	sp, r7
    13b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13ba:	4770      	bx	lr
    13bc:	00002394 	.word	0x00002394

000013c0 <am_util_time_computeDayofWeek>:
//! 7   indicates that the given date is invalid (e.g. 2/29/2015).
//
//*****************************************************************************
int
am_util_time_computeDayofWeek(int iYear, int iMonth, int iDay)
{
    13c0:	b490      	push	{r4, r7}
    13c2:	b086      	sub	sp, #24
    13c4:	af00      	add	r7, sp, #0
    13c6:	60f8      	str	r0, [r7, #12]
    13c8:	60b9      	str	r1, [r7, #8]
    13ca:	607a      	str	r2, [r7, #4]
    //

    //
    // Validate inputs.  Return 7 if any are out-of-bounds.
    //
    if ( (iMonth < 1) || (iMonth > 12) || (iYear < 2000) || (iYear >= 2400) || (iDay < 1) )
    13cc:	68bb      	ldr	r3, [r7, #8]
    13ce:	2b00      	cmp	r3, #0
    13d0:	dd0d      	ble.n	13ee <am_util_time_computeDayofWeek+0x2e>
    13d2:	68bb      	ldr	r3, [r7, #8]
    13d4:	2b0c      	cmp	r3, #12
    13d6:	dc0a      	bgt.n	13ee <am_util_time_computeDayofWeek+0x2e>
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    13de:	db06      	blt.n	13ee <am_util_time_computeDayofWeek+0x2e>
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    13e6:	da02      	bge.n	13ee <am_util_time_computeDayofWeek+0x2e>
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	2b00      	cmp	r3, #0
    13ec:	dc01      	bgt.n	13f2 <am_util_time_computeDayofWeek+0x32>
    {
        return 7;
    13ee:	2107      	movs	r1, #7
    13f0:	e078      	b.n	14e4 <am_util_time_computeDayofWeek+0x124>
    }

    if ( (iMonth == 2) && (iDay > 28) )
    13f2:	68bb      	ldr	r3, [r7, #8]
    13f4:	2b02      	cmp	r3, #2
    13f6:	d10c      	bne.n	1412 <am_util_time_computeDayofWeek+0x52>
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	2b1c      	cmp	r3, #28
    13fc:	dd09      	ble.n	1412 <am_util_time_computeDayofWeek+0x52>
    {
        if ( (iDay > 29) || (iYear % 4) )
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	2b1d      	cmp	r3, #29
    1402:	dc04      	bgt.n	140e <am_util_time_computeDayofWeek+0x4e>
    1404:	68fb      	ldr	r3, [r7, #12]
    1406:	f003 0303 	and.w	r3, r3, #3
    140a:	2b00      	cmp	r3, #0
    140c:	d001      	beq.n	1412 <am_util_time_computeDayofWeek+0x52>
        {
            return 7;
    140e:	2107      	movs	r1, #7
    1410:	e068      	b.n	14e4 <am_util_time_computeDayofWeek+0x124>
    }

    //
    // 0-base the month and date.
    //
    iMonth--;
    1412:	68bb      	ldr	r3, [r7, #8]
    1414:	3b01      	subs	r3, #1
    1416:	60bb      	str	r3, [r7, #8]
    iDay--;
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	3b01      	subs	r3, #1
    141c:	607b      	str	r3, [r7, #4]

    //
    // First we'll count the number of days up to the the specified
    // month and date in the specified year.
    //
    iDayCnt = iDay;
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	617b      	str	r3, [r7, #20]
    iCnt = 0;
    1422:	2300      	movs	r3, #0
    1424:	613b      	str	r3, [r7, #16]
    while ( iCnt < iMonth )
    1426:	e034      	b.n	1492 <am_util_time_computeDayofWeek+0xd2>
    {
        switch ( iCnt )
    1428:	693b      	ldr	r3, [r7, #16]
    142a:	2b0b      	cmp	r3, #11
    142c:	d82e      	bhi.n	148c <am_util_time_computeDayofWeek+0xcc>
    142e:	a201      	add	r2, pc, #4	; (adr r2, 1434 <am_util_time_computeDayofWeek+0x74>)
    1430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1434:	0000146d 	.word	0x0000146d
    1438:	00001475 	.word	0x00001475
    143c:	0000146d 	.word	0x0000146d
    1440:	00001465 	.word	0x00001465
    1444:	0000146d 	.word	0x0000146d
    1448:	00001465 	.word	0x00001465
    144c:	0000146d 	.word	0x0000146d
    1450:	0000146d 	.word	0x0000146d
    1454:	00001465 	.word	0x00001465
    1458:	0000146d 	.word	0x0000146d
    145c:	00001465 	.word	0x00001465
    1460:	0000146d 	.word	0x0000146d
        {
            case 3:
            case 5:
            case 8:
            case 10:
                iDayCnt += 30;
    1464:	697b      	ldr	r3, [r7, #20]
    1466:	331e      	adds	r3, #30
    1468:	617b      	str	r3, [r7, #20]
                break;
    146a:	e00f      	b.n	148c <am_util_time_computeDayofWeek+0xcc>
            case 4:
            case 6:
            case 7:
            case 9:
            case 11:
                iDayCnt += 31;
    146c:	697b      	ldr	r3, [r7, #20]
    146e:	331f      	adds	r3, #31
    1470:	617b      	str	r3, [r7, #20]
                break;
    1472:	e00b      	b.n	148c <am_util_time_computeDayofWeek+0xcc>
            case 1:
                iDayCnt += (iYear % 4) ? 28 : 29;
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	f003 0303 	and.w	r3, r3, #3
    147a:	2b00      	cmp	r3, #0
    147c:	d001      	beq.n	1482 <am_util_time_computeDayofWeek+0xc2>
    147e:	231c      	movs	r3, #28
    1480:	e000      	b.n	1484 <am_util_time_computeDayofWeek+0xc4>
    1482:	231d      	movs	r3, #29
    1484:	697a      	ldr	r2, [r7, #20]
    1486:	4413      	add	r3, r2
    1488:	617b      	str	r3, [r7, #20]
                break;
    148a:	bf00      	nop
        }
        iCnt++;
    148c:	693b      	ldr	r3, [r7, #16]
    148e:	3301      	adds	r3, #1
    1490:	613b      	str	r3, [r7, #16]
    // First we'll count the number of days up to the the specified
    // month and date in the specified year.
    //
    iDayCnt = iDay;
    iCnt = 0;
    while ( iCnt < iMonth )
    1492:	693a      	ldr	r2, [r7, #16]
    1494:	68bb      	ldr	r3, [r7, #8]
    1496:	429a      	cmp	r2, r3
    1498:	dbc6      	blt.n	1428 <am_util_time_computeDayofWeek+0x68>

    //
    // Now, add in the number of days in the intervening years between
    // 2000 and the specified year.
    //
    iCnt = 2000;
    149a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    149e:	613b      	str	r3, [r7, #16]
    while ( iCnt < iYear )
    14a0:	e00f      	b.n	14c2 <am_util_time_computeDayofWeek+0x102>
    {
        iDayCnt += (iCnt % 4) ? 365 : 366;
    14a2:	693b      	ldr	r3, [r7, #16]
    14a4:	f003 0303 	and.w	r3, r3, #3
    14a8:	2b00      	cmp	r3, #0
    14aa:	d002      	beq.n	14b2 <am_util_time_computeDayofWeek+0xf2>
    14ac:	f240 136d 	movw	r3, #365	; 0x16d
    14b0:	e001      	b.n	14b6 <am_util_time_computeDayofWeek+0xf6>
    14b2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
    14b6:	697a      	ldr	r2, [r7, #20]
    14b8:	4413      	add	r3, r2
    14ba:	617b      	str	r3, [r7, #20]
        iCnt++;
    14bc:	693b      	ldr	r3, [r7, #16]
    14be:	3301      	adds	r3, #1
    14c0:	613b      	str	r3, [r7, #16]
    //
    // Now, add in the number of days in the intervening years between
    // 2000 and the specified year.
    //
    iCnt = 2000;
    while ( iCnt < iYear )
    14c2:	693a      	ldr	r2, [r7, #16]
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	429a      	cmp	r2, r3
    14c8:	dbeb      	blt.n	14a2 <am_util_time_computeDayofWeek+0xe2>

    //
    // Offset the day count with the base day of the week.
    // For Saturday, this is 6.
    //
    return (iDayCnt + 6) % 7;
    14ca:	697b      	ldr	r3, [r7, #20]
    14cc:	1d9a      	adds	r2, r3, #6
    14ce:	4b08      	ldr	r3, [pc, #32]	; (14f0 <am_util_time_computeDayofWeek+0x130>)
    14d0:	fb82 3403 	smull	r3, r4, r2, r3
    14d4:	1913      	adds	r3, r2, r4
    14d6:	1099      	asrs	r1, r3, #2
    14d8:	17d3      	asrs	r3, r2, #31
    14da:	1ac9      	subs	r1, r1, r3
    14dc:	460b      	mov	r3, r1
    14de:	00db      	lsls	r3, r3, #3
    14e0:	1a5b      	subs	r3, r3, r1
    14e2:	1ad1      	subs	r1, r2, r3
    14e4:	460b      	mov	r3, r1
}
    14e6:	4618      	mov	r0, r3
    14e8:	3718      	adds	r7, #24
    14ea:	46bd      	mov	sp, r7
    14ec:	bc90      	pop	{r4, r7}
    14ee:	4770      	bx	lr
    14f0:	92492493 	.word	0x92492493

000014f4 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    14f4:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    14f6:	f000 fc07 	bl	1d08 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    14fa:	f000 fc73 	bl	1de4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    14fe:	f000 fe89 	bl	2214 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1502:	2001      	movs	r0, #1
    1504:	f000 fc7e 	bl	1e04 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1508:	2001      	movs	r0, #1
    150a:	f000 f945 	bl	1798 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    150e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1512:	f000 bc8d 	b.w	1e30 <am_hal_rtc_osc_disable>
    1516:	bf00      	nop

00001518 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1518:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    151a:	4b17      	ldr	r3, [pc, #92]	; (1578 <am_bsp_debug_printf_enable+0x60>)
    151c:	6818      	ldr	r0, [r3, #0]
    151e:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1522:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1524:	d001      	beq.n	152a <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1526:	b007      	add	sp, #28
    1528:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    152a:	4a14      	ldr	r2, [pc, #80]	; (157c <am_bsp_debug_printf_enable+0x64>)
    152c:	4914      	ldr	r1, [pc, #80]	; (1580 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    152e:	4d15      	ldr	r5, [pc, #84]	; (1584 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1530:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1532:	a806      	add	r0, sp, #24
    1534:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1538:	f000 fe10 	bl	215c <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    153c:	f3ef 8310 	mrs	r3, PRIMASK
    1540:	9300      	str	r3, [sp, #0]
    1542:	b672      	cpsid	i
    1544:	4a10      	ldr	r2, [pc, #64]	; (1588 <am_bsp_debug_printf_enable+0x70>)
    1546:	4d11      	ldr	r5, [pc, #68]	; (158c <am_bsp_debug_printf_enable+0x74>)
    1548:	4811      	ldr	r0, [pc, #68]	; (1590 <am_bsp_debug_printf_enable+0x78>)
    154a:	4912      	ldr	r1, [pc, #72]	; (1594 <am_bsp_debug_printf_enable+0x7c>)
    154c:	2373      	movs	r3, #115	; 0x73
    154e:	6013      	str	r3, [r2, #0]
    1550:	682b      	ldr	r3, [r5, #0]
    1552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1556:	602b      	str	r3, [r5, #0]
    1558:	6805      	ldr	r5, [r0, #0]
    155a:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    155e:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1562:	6003      	str	r3, [r0, #0]
    1564:	6808      	ldr	r0, [r1, #0]
    1566:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    156a:	600d      	str	r5, [r1, #0]
    156c:	6014      	str	r4, [r2, #0]
    156e:	9c00      	ldr	r4, [sp, #0]
    1570:	f384 8810 	msr	PRIMASK, r4
}
    1574:	b007      	add	sp, #28
    1576:	bd30      	pop	{r4, r5, pc}
    1578:	100011b4 	.word	0x100011b4
    157c:	e0000e80 	.word	0xe0000e80
    1580:	00150511 	.word	0x00150511
    1584:	000f4240 	.word	0x000f4240
    1588:	40010060 	.word	0x40010060
    158c:	40010054 	.word	0x40010054
    1590:	40010028 	.word	0x40010028
    1594:	40010108 	.word	0x40010108

00001598 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1598:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    159a:	4b15      	ldr	r3, [pc, #84]	; (15f0 <am_bsp_debug_printf_disable+0x58>)
    159c:	6818      	ldr	r0, [r3, #0]
    159e:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    15a2:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15a4:	d121      	bne.n	15ea <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    15a6:	f000 fa61 	bl	1a6c <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    15aa:	f3ef 8110 	mrs	r1, PRIMASK
    15ae:	9101      	str	r1, [sp, #4]
    15b0:	b672      	cpsid	i
    15b2:	4a10      	ldr	r2, [pc, #64]	; (15f4 <am_bsp_debug_printf_disable+0x5c>)
    15b4:	4d10      	ldr	r5, [pc, #64]	; (15f8 <am_bsp_debug_printf_disable+0x60>)
    15b6:	4811      	ldr	r0, [pc, #68]	; (15fc <am_bsp_debug_printf_disable+0x64>)
    15b8:	4911      	ldr	r1, [pc, #68]	; (1600 <am_bsp_debug_printf_disable+0x68>)
    15ba:	2373      	movs	r3, #115	; 0x73
    15bc:	6013      	str	r3, [r2, #0]
    15be:	682b      	ldr	r3, [r5, #0]
    15c0:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    15c4:	f04c 0320 	orr.w	r3, ip, #32
    15c8:	602b      	str	r3, [r5, #0]
    15ca:	6805      	ldr	r5, [r0, #0]
    15cc:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    15d0:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    15d4:	6003      	str	r3, [r0, #0]
    15d6:	6808      	ldr	r0, [r1, #0]
    15d8:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    15dc:	600d      	str	r5, [r1, #0]
    15de:	6014      	str	r4, [r2, #0]
    15e0:	9c01      	ldr	r4, [sp, #4]
    15e2:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    15e6:	f000 fe0f 	bl	2208 <am_hal_tpiu_disable>
}
    15ea:	b003      	add	sp, #12
    15ec:	bd30      	pop	{r4, r5, pc}
    15ee:	bf00      	nop
    15f0:	100011b4 	.word	0x100011b4
    15f4:	40010060 	.word	0x40010060
    15f8:	40010054 	.word	0x40010054
    15fc:	40010028 	.word	0x40010028
    1600:	40010108 	.word	0x40010108

00001604 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1604:	f000 ba3c 	b.w	1a80 <am_hal_itm_print>

00001608 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    160a:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    160c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1610:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1612:	7863      	ldrb	r3, [r4, #1]
    1614:	78e2      	ldrb	r2, [r4, #3]
    1616:	7925      	ldrb	r5, [r4, #4]
    1618:	79a1      	ldrb	r1, [r4, #6]
    161a:	00be      	lsls	r6, r7, #2
    161c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1620:	f006 0304 	and.w	r3, r6, #4
    1624:	f00e 0602 	and.w	r6, lr, #2
    1628:	431e      	orrs	r6, r3
    162a:	f042 0201 	orr.w	r2, r2, #1
    162e:	79e3      	ldrb	r3, [r4, #7]
    1630:	01ed      	lsls	r5, r5, #7
    1632:	4316      	orrs	r6, r2
    1634:	b2ed      	uxtb	r5, r5
    1636:	7a22      	ldrb	r2, [r4, #8]
    1638:	0289      	lsls	r1, r1, #10
    163a:	432e      	orrs	r6, r5
    163c:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1640:	7a65      	ldrb	r5, [r4, #9]
    1642:	02db      	lsls	r3, r3, #11
    1644:	430e      	orrs	r6, r1
    1646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    164a:	0312      	lsls	r2, r2, #12
    164c:	7aa1      	ldrb	r1, [r4, #10]
    164e:	431e      	orrs	r6, r3
    1650:	042d      	lsls	r5, r5, #16
    1652:	b293      	uxth	r3, r2
    1654:	7ae2      	ldrb	r2, [r4, #11]
    1656:	431e      	orrs	r6, r3
    1658:	0509      	lsls	r1, r1, #20
    165a:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    165e:	0612      	lsls	r2, r2, #24
    1660:	4333      	orrs	r3, r6
    1662:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1666:	00bf      	lsls	r7, r7, #2
    1668:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    166c:	4333      	orrs	r3, r6
    166e:	430b      	orrs	r3, r1
    1670:	f007 0508 	and.w	r5, r7, #8
    1674:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1676:	f000 fa3f 	bl	1af8 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    167a:	482c      	ldr	r0, [pc, #176]	; (172c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    167c:	4b2c      	ldr	r3, [pc, #176]	; (1730 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    167e:	6005      	str	r5, [r0, #0]
    1680:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1682:	681e      	ldr	r6, [r3, #0]
    1684:	0777      	lsls	r7, r6, #29
    1686:	d41e      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    1688:	681f      	ldr	r7, [r3, #0]
    168a:	077e      	lsls	r6, r7, #29
    168c:	f102 32ff 	add.w	r2, r2, #4294967295
    1690:	d419      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    1692:	6819      	ldr	r1, [r3, #0]
    1694:	074f      	lsls	r7, r1, #29
    1696:	d416      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    1698:	6818      	ldr	r0, [r3, #0]
    169a:	0746      	lsls	r6, r0, #29
    169c:	d413      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    169e:	681e      	ldr	r6, [r3, #0]
    16a0:	0770      	lsls	r0, r6, #29
    16a2:	d410      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    16a4:	681f      	ldr	r7, [r3, #0]
    16a6:	0779      	lsls	r1, r7, #29
    16a8:	d40d      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    16aa:	6819      	ldr	r1, [r3, #0]
    16ac:	074f      	lsls	r7, r1, #29
    16ae:	d40a      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    16b0:	6818      	ldr	r0, [r3, #0]
    16b2:	0746      	lsls	r6, r0, #29
    16b4:	d407      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    16b6:	681e      	ldr	r6, [r3, #0]
    16b8:	0770      	lsls	r0, r6, #29
    16ba:	d404      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    16bc:	681f      	ldr	r7, [r3, #0]
    16be:	0779      	lsls	r1, r7, #29
    16c0:	d401      	bmi.n	16c6 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    16c2:	3a09      	subs	r2, #9
    16c4:	d1dd      	bne.n	1682 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    16c6:	4b1a      	ldr	r3, [pc, #104]	; (1730 <am_hal_cachectrl_enable+0x128>)
    16c8:	681a      	ldr	r2, [r3, #0]
    16ca:	f042 0101 	orr.w	r1, r2, #1
    16ce:	6019      	str	r1, [r3, #0]
    16d0:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16d2:	6818      	ldr	r0, [r3, #0]
    16d4:	0740      	lsls	r0, r0, #29
    16d6:	d41e      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16d8:	681e      	ldr	r6, [r3, #0]
    16da:	0771      	lsls	r1, r6, #29
    16dc:	f102 32ff 	add.w	r2, r2, #4294967295
    16e0:	d419      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16e2:	681f      	ldr	r7, [r3, #0]
    16e4:	077f      	lsls	r7, r7, #29
    16e6:	d416      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16e8:	6819      	ldr	r1, [r3, #0]
    16ea:	074e      	lsls	r6, r1, #29
    16ec:	d413      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16ee:	6818      	ldr	r0, [r3, #0]
    16f0:	0740      	lsls	r0, r0, #29
    16f2:	d410      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16f4:	681e      	ldr	r6, [r3, #0]
    16f6:	0771      	lsls	r1, r6, #29
    16f8:	d40d      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    16fa:	681f      	ldr	r7, [r3, #0]
    16fc:	077f      	lsls	r7, r7, #29
    16fe:	d40a      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    1700:	6819      	ldr	r1, [r3, #0]
    1702:	074e      	lsls	r6, r1, #29
    1704:	d407      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    1706:	6818      	ldr	r0, [r3, #0]
    1708:	0740      	lsls	r0, r0, #29
    170a:	d404      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    170c:	681e      	ldr	r6, [r3, #0]
    170e:	0771      	lsls	r1, r6, #29
    1710:	d401      	bmi.n	1716 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1712:	3a09      	subs	r2, #9
    1714:	d1dd      	bne.n	16d2 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1716:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1718:	4f04      	ldr	r7, [pc, #16]	; (172c <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    171a:	0223      	lsls	r3, r4, #8
    171c:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1720:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1724:	4311      	orrs	r1, r2
    1726:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1728:	6039      	str	r1, [r7, #0]
    172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    172c:	40018000 	.word	0x40018000
    1730:	40018008 	.word	0x40018008

00001734 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1734:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1736:	4604      	mov	r4, r0
    1738:	b120      	cbz	r0, 1744 <am_hal_clkgen_sysclk_select+0x10>
    173a:	4a06      	ldr	r2, [pc, #24]	; (1754 <am_hal_clkgen_sysclk_select+0x20>)
    173c:	4806      	ldr	r0, [pc, #24]	; (1758 <am_hal_clkgen_sysclk_select+0x24>)
    173e:	2150      	movs	r1, #80	; 0x50
    1740:	f000 f92c 	bl	199c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1744:	4b05      	ldr	r3, [pc, #20]	; (175c <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1746:	4906      	ldr	r1, [pc, #24]	; (1760 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1748:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    174a:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    174c:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    174e:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1750:	601a      	str	r2, [r3, #0]
    1752:	bd10      	pop	{r4, pc}
    1754:	000024a0 	.word	0x000024a0
    1758:	000024d8 	.word	0x000024d8
    175c:	40004014 	.word	0x40004014
    1760:	40004018 	.word	0x40004018

00001764 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1766:	4905      	ldr	r1, [pc, #20]	; (177c <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1768:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    176a:	4805      	ldr	r0, [pc, #20]	; (1780 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    176c:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1770:	bf08      	it	eq
    1772:	4608      	moveq	r0, r1
    1774:	4770      	bx	lr
    1776:	bf00      	nop
    1778:	40004018 	.word	0x40004018
    177c:	02dc6c00 	.word	0x02dc6c00
    1780:	016e3600 	.word	0x016e3600

00001784 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1784:	0783      	lsls	r3, r0, #30
    1786:	d004      	beq.n	1792 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1788:	4a02      	ldr	r2, [pc, #8]	; (1794 <am_hal_clkgen_osc_start+0x10>)
    178a:	6813      	ldr	r3, [r2, #0]
    178c:	ea23 0000 	bic.w	r0, r3, r0
    1790:	6010      	str	r0, [r2, #0]
    1792:	4770      	bx	lr
    1794:	4000400c 	.word	0x4000400c

00001798 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1798:	0783      	lsls	r3, r0, #30
    179a:	d003      	beq.n	17a4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    179c:	4a02      	ldr	r2, [pc, #8]	; (17a8 <am_hal_clkgen_osc_stop+0x10>)
    179e:	6813      	ldr	r3, [r2, #0]
    17a0:	4318      	orrs	r0, r3
    17a2:	6010      	str	r0, [r2, #0]
    17a4:	4770      	bx	lr
    17a6:	bf00      	nop
    17a8:	4000400c 	.word	0x4000400c

000017ac <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    17ac:	b410      	push	{r4}
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17ae:	680c      	ldr	r4, [r1, #0]
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    17b0:	688b      	ldr	r3, [r1, #8]
    17b2:	684a      	ldr	r2, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    17b4:	f3ef 8110 	mrs	r1, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    17b8:	b083      	sub	sp, #12
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17ba:	2c00      	cmp	r4, #0
    17bc:	bf18      	it	ne
    17be:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    17c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17c6:	4323      	orrs	r3, r4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    17c8:	9101      	str	r1, [sp, #4]
    17ca:	b672      	cpsid	i

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    17cc:	4c29      	ldr	r4, [pc, #164]	; (1874 <am_hal_ctimer_config+0xc8>)
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    17ce:	4a2a      	ldr	r2, [pc, #168]	; (1878 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    17d0:	0100      	lsls	r0, r0, #4
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    17d2:	5103      	str	r3, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    17d4:	6811      	ldr	r1, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    17d6:	f001 0c0f 	and.w	ip, r1, #15
    17da:	f10c 33ff 	add.w	r3, ip, #4294967295
    17de:	2b01      	cmp	r3, #1
    17e0:	d941      	bls.n	1866 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    17e2:	6824      	ldr	r4, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    17e4:	f3c4 0244 	ubfx	r2, r4, #1, #5
    17e8:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    17ea:	f3c4 4144 	ubfx	r1, r4, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    17ee:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    17f0:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    17f4:	d937      	bls.n	1866 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    17f6:	2b04      	cmp	r3, #4
    17f8:	d935      	bls.n	1866 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    17fa:	4c20      	ldr	r4, [pc, #128]	; (187c <am_hal_ctimer_config+0xd0>)
    17fc:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    17fe:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1802:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1806:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    180a:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    180c:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1810:	d929      	bls.n	1866 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1812:	2b04      	cmp	r3, #4
    1814:	d927      	bls.n	1866 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1816:	4c1a      	ldr	r4, [pc, #104]	; (1880 <am_hal_ctimer_config+0xd4>)
    1818:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    181a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    181e:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1822:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1826:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1828:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    182c:	d91b      	bls.n	1866 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    182e:	2b04      	cmp	r3, #4
    1830:	d919      	bls.n	1866 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1832:	4c14      	ldr	r4, [pc, #80]	; (1884 <am_hal_ctimer_config+0xd8>)
    1834:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1836:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    183a:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    183e:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1842:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1844:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1848:	d90d      	bls.n	1866 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    184a:	2b04      	cmp	r3, #4
    184c:	d90b      	bls.n	1866 <am_hal_ctimer_config+0xba>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    184e:	4c0e      	ldr	r4, [pc, #56]	; (1888 <am_hal_ctimer_config+0xdc>)
    1850:	6820      	ldr	r0, [r4, #0]
    1852:	f040 0204 	orr.w	r2, r0, #4
    1856:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1858:	9801      	ldr	r0, [sp, #4]
    185a:	f380 8810 	msr	PRIMASK, r0

} // am_hal_ctimer_config()
    185e:	b003      	add	sp, #12
    1860:	f85d 4b04 	ldr.w	r4, [sp], #4
    1864:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1866:	4908      	ldr	r1, [pc, #32]	; (1888 <am_hal_ctimer_config+0xdc>)
    1868:	680b      	ldr	r3, [r1, #0]
    186a:	f023 0404 	bic.w	r4, r3, #4
    186e:	600c      	str	r4, [r1, #0]
    1870:	e7f2      	b.n	1858 <am_hal_ctimer_config+0xac>
    1872:	bf00      	nop
    1874:	4000800c 	.word	0x4000800c
    1878:	40008100 	.word	0x40008100
    187c:	4000801c 	.word	0x4000801c
    1880:	4000802c 	.word	0x4000802c
    1884:	4000803c 	.word	0x4000803c
    1888:	40021020 	.word	0x40021020

0000188c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    188c:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    188e:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1892:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1894:	0100      	lsls	r0, r0, #4
    1896:	4a09      	ldr	r2, [pc, #36]	; (18bc <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1898:	9301      	str	r3, [sp, #4]
    189a:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    189c:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    189e:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    18a2:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    18a6:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    18aa:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    18ac:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    18ae:	9801      	ldr	r0, [sp, #4]
    18b0:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    18b4:	b003      	add	sp, #12
    18b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    18ba:	4770      	bx	lr
    18bc:	4000800c 	.word	0x4000800c

000018c0 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    18c0:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18c2:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    18c6:	0100      	lsls	r0, r0, #4
    18c8:	4a06      	ldr	r2, [pc, #24]	; (18e4 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18ca:	9301      	str	r3, [sp, #4]
    18cc:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    18ce:	5883      	ldr	r3, [r0, r2]
    18d0:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    18d4:	4319      	orrs	r1, r3
    18d6:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    18d8:	9801      	ldr	r0, [sp, #4]
    18da:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    18de:	b002      	add	sp, #8
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
    18e4:	4000800c 	.word	0x4000800c

000018e8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    18e8:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18ea:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    18ee:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    18f0:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    18f2:	4d1c      	ldr	r5, [pc, #112]	; (1964 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18f4:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    18f6:	4e1c      	ldr	r6, [pc, #112]	; (1968 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    18f8:	4f1c      	ldr	r7, [pc, #112]	; (196c <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18fa:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    18fc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1900:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1902:	d01a      	beq.n	193a <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1904:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1908:	2d80      	cmp	r5, #128	; 0x80
    190a:	d01b      	beq.n	1944 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    190c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1910:	2500      	movs	r5, #0
    1912:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1914:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1916:	d01c      	beq.n	1952 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1918:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    191c:	d01e      	beq.n	195c <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    191e:	0c21      	lsrs	r1, r4, #16
    1920:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1922:	b291      	uxth	r1, r2
    1924:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1926:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    192a:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    192c:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    192e:	9801      	ldr	r0, [sp, #4]
    1930:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1934:	b002      	add	sp, #8
    1936:	bcf0      	pop	{r4, r5, r6, r7}
    1938:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    193a:	0c25      	lsrs	r5, r4, #16
    193c:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1940:	2c80      	cmp	r4, #128	; 0x80
    1942:	d10a      	bne.n	195a <am_hal_ctimer_period_set+0x72>
    1944:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1946:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1948:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    194a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    194e:	4299      	cmp	r1, r3
    1950:	d1e2      	bne.n	1918 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1952:	b297      	uxth	r7, r2
    1954:	433d      	orrs	r5, r7
    1956:	5185      	str	r5, [r0, r6]
    1958:	e7e9      	b.n	192e <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    195a:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    195c:	b296      	uxth	r6, r2
    195e:	4335      	orrs	r5, r6
    1960:	51c5      	str	r5, [r0, r7]
    1962:	e7e4      	b.n	192e <am_hal_ctimer_period_set+0x46>
    1964:	4000800c 	.word	0x4000800c
    1968:	40008004 	.word	0x40008004
    196c:	40008008 	.word	0x40008008

00001970 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1970:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1972:	f3ef 8310 	mrs	r3, PRIMASK
    1976:	9301      	str	r3, [sp, #4]
    1978:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    197a:	4904      	ldr	r1, [pc, #16]	; (198c <am_hal_ctimer_int_enable+0x1c>)
    197c:	680a      	ldr	r2, [r1, #0]
    197e:	4310      	orrs	r0, r2
    1980:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1982:	9801      	ldr	r0, [sp, #4]
    1984:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    1988:	b002      	add	sp, #8
    198a:	4770      	bx	lr
    198c:	40008200 	.word	0x40008200

00001990 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1990:	4b01      	ldr	r3, [pc, #4]	; (1998 <am_hal_ctimer_int_clear+0x8>)
    1992:	6018      	str	r0, [r3, #0]
    1994:	4770      	bx	lr
    1996:	bf00      	nop
    1998:	40008208 	.word	0x40008208

0000199c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    199c:	e7fe      	b.n	199c <am_hal_debug_error>
    199e:	bf00      	nop

000019a0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19a0:	4b01      	ldr	r3, [pc, #4]	; (19a8 <am_hal_flash_delay+0x8>)
    19a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    19a4:	4708      	bx	r1
    19a6:	bf00      	nop
    19a8:	10001060 	.word	0x10001060

000019ac <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    19ac:	280f      	cmp	r0, #15
    19ae:	d80b      	bhi.n	19c8 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    19b0:	2805      	cmp	r0, #5
    19b2:	d013      	beq.n	19dc <am_hal_interrupt_enable+0x30>
    19b4:	2806      	cmp	r0, #6
    19b6:	d017      	beq.n	19e8 <am_hal_interrupt_enable+0x3c>
    19b8:	2804      	cmp	r0, #4
    19ba:	d104      	bne.n	19c6 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    19bc:	4a0d      	ldr	r2, [pc, #52]	; (19f4 <am_hal_interrupt_enable+0x48>)
    19be:	6813      	ldr	r3, [r2, #0]
    19c0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    19c4:	6010      	str	r0, [r2, #0]
    19c6:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    19c8:	f1a0 0310 	sub.w	r3, r0, #16
    19cc:	f003 0c1f 	and.w	ip, r3, #31
    19d0:	2001      	movs	r0, #1
    19d2:	4909      	ldr	r1, [pc, #36]	; (19f8 <am_hal_interrupt_enable+0x4c>)
    19d4:	fa00 f20c 	lsl.w	r2, r0, ip
    19d8:	600a      	str	r2, [r1, #0]
    19da:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    19dc:	4805      	ldr	r0, [pc, #20]	; (19f4 <am_hal_interrupt_enable+0x48>)
    19de:	6801      	ldr	r1, [r0, #0]
    19e0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    19e4:	6002      	str	r2, [r0, #0]
            break;
    19e6:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    19e8:	4902      	ldr	r1, [pc, #8]	; (19f4 <am_hal_interrupt_enable+0x48>)
    19ea:	680a      	ldr	r2, [r1, #0]
    19ec:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    19f0:	600b      	str	r3, [r1, #0]
            break;
    19f2:	4770      	bx	lr
    19f4:	e000ed24 	.word	0xe000ed24
    19f8:	e000e100 	.word	0xe000e100

000019fc <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    19fc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1a00:	b662      	cpsie	i
    __asm("    bx lr");
    1a02:	4770      	bx	lr

00001a04 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1a04:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1a08:	b672      	cpsid	i
    __asm("    bx lr");
    1a0a:	4770      	bx	lr

00001a0c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1a0c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop

00001a14 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1a14:	4b0d      	ldr	r3, [pc, #52]	; (1a4c <am_hal_itm_enable+0x38>)
    1a16:	6818      	ldr	r0, [r3, #0]
    1a18:	07c2      	lsls	r2, r0, #31
    1a1a:	d416      	bmi.n	1a4a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1a1c:	4a0c      	ldr	r2, [pc, #48]	; (1a50 <am_hal_itm_enable+0x3c>)
    1a1e:	6811      	ldr	r1, [r2, #0]
    1a20:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1a24:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1a26:	6810      	ldr	r0, [r2, #0]
    1a28:	01c3      	lsls	r3, r0, #7
    1a2a:	d5fc      	bpl.n	1a26 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1a2c:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a2e:	4809      	ldr	r0, [pc, #36]	; (1a54 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a30:	4c09      	ldr	r4, [pc, #36]	; (1a58 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a32:	4d0a      	ldr	r5, [pc, #40]	; (1a5c <am_hal_itm_enable+0x48>)
    1a34:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a36:	250f      	movs	r5, #15
    1a38:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a3a:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a3c:	4908      	ldr	r1, [pc, #32]	; (1a60 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a3e:	4b09      	ldr	r3, [pc, #36]	; (1a64 <am_hal_itm_enable+0x50>)
    1a40:	4a09      	ldr	r2, [pc, #36]	; (1a68 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a42:	f04f 30ff 	mov.w	r0, #4294967295
    1a46:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a48:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a4a:	4770      	bx	lr
    1a4c:	100011b4 	.word	0x100011b4
    1a50:	e000edfc 	.word	0xe000edfc
    1a54:	e0000fb0 	.word	0xe0000fb0
    1a58:	e0000e40 	.word	0xe0000e40
    1a5c:	c5acce55 	.word	0xc5acce55
    1a60:	e0000e00 	.word	0xe0000e00
    1a64:	e0000e80 	.word	0xe0000e80
    1a68:	00150511 	.word	0x00150511

00001a6c <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1a6c:	4a03      	ldr	r2, [pc, #12]	; (1a7c <am_hal_itm_not_busy+0x10>)
    1a6e:	6813      	ldr	r3, [r2, #0]
    1a70:	021b      	lsls	r3, r3, #8
    1a72:	d4fc      	bmi.n	1a6e <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1a74:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1a78:	f7ff bf92 	b.w	19a0 <am_hal_flash_delay>
    1a7c:	e0000e80 	.word	0xe0000e80

00001a80 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1a80:	7803      	ldrb	r3, [r0, #0]
    1a82:	b1ab      	cbz	r3, 1ab0 <am_hal_itm_print+0x30>
    1a84:	4602      	mov	r2, r0
    1a86:	2300      	movs	r3, #0
    1a88:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1a8c:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1a8e:	2900      	cmp	r1, #0
    1a90:	d1fa      	bne.n	1a88 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1a92:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1a96:	b430      	push	{r4, r5}
    1a98:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1a9a:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1a9c:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1aa0:	f8dc 3000 	ldr.w	r3, [ip]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d0fb      	beq.n	1aa0 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1aa8:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1aaa:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1aac:	d1f6      	bne.n	1a9c <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1aae:	bc30      	pop	{r4, r5}
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop

00001ab4 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1ab4:	4a0d      	ldr	r2, [pc, #52]	; (1aec <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1ab6:	4b0e      	ldr	r3, [pc, #56]	; (1af0 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1ab8:	490e      	ldr	r1, [pc, #56]	; (1af4 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1aba:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1abc:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1abe:	6814      	ldr	r4, [r2, #0]
    1ac0:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1ac2:	6809      	ldr	r1, [r1, #0]
    1ac4:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ac6:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1ac8:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1aca:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1acc:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ace:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1ad0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ad4:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1ad6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1ad8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1adc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1ae0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1ae2:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ae4:	6142      	str	r2, [r0, #20]
}
    1ae6:	bc70      	pop	{r4, r5, r6}
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop
    1aec:	400201c4 	.word	0x400201c4
    1af0:	400201cc 	.word	0x400201cc
    1af4:	400201c0 	.word	0x400201c0

00001af8 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1af8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1afc:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1afe:	d03a      	beq.n	1b76 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1b00:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1b04:	f000 809d 	beq.w	1c42 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1b08:	2801      	cmp	r0, #1
    1b0a:	f000 809d 	beq.w	1c48 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1b0e:	2803      	cmp	r0, #3
    1b10:	f000 80a6 	beq.w	1c60 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1b14:	2807      	cmp	r0, #7
    1b16:	f000 809c 	beq.w	1c52 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1b1a:	280f      	cmp	r0, #15
    1b1c:	f000 80a5 	beq.w	1c6a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1b20:	281f      	cmp	r0, #31
    1b22:	f000 80b1 	beq.w	1c88 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1b26:	283f      	cmp	r0, #63	; 0x3f
    1b28:	f000 80b5 	beq.w	1c96 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1b2c:	287f      	cmp	r0, #127	; 0x7f
    1b2e:	f000 80b9 	beq.w	1ca4 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1b32:	28ff      	cmp	r0, #255	; 0xff
    1b34:	f000 80a0 	beq.w	1c78 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1b38:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b3c:	4298      	cmp	r0, r3
    1b3e:	f000 80b8 	beq.w	1cb2 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1b42:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1b46:	4288      	cmp	r0, r1
    1b48:	f000 80b9 	beq.w	1cbe <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1b4c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1b50:	4290      	cmp	r0, r2
    1b52:	d00e      	beq.n	1b72 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1b54:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1b58:	f000 80b7 	beq.w	1cca <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1b5c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1b60:	42a0      	cmp	r0, r4
    1b62:	f000 80b5 	beq.w	1cd0 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1b66:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1b6a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1b6e:	4560      	cmp	r0, ip
    1b70:	d132      	bne.n	1bd8 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1b72:	495c      	ldr	r1, [pc, #368]	; (1ce4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1b74:	e066      	b.n	1c44 <am_hal_pwrctrl_memory_enable+0x14c>
    1b76:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1b7a:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1b7c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1b7e:	4c5a      	ldr	r4, [pc, #360]	; (1ce8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1b80:	6822      	ldr	r2, [r4, #0]
    1b82:	402a      	ands	r2, r5
    1b84:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1b86:	4d58      	ldr	r5, [pc, #352]	; (1ce8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1b88:	682c      	ldr	r4, [r5, #0]
    1b8a:	4320      	orrs	r0, r4
    1b8c:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d029      	beq.n	1be6 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b92:	4a56      	ldr	r2, [pc, #344]	; (1cec <am_hal_pwrctrl_memory_enable+0x1f4>)
    1b94:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1b96:	4203      	tst	r3, r0
    1b98:	bf18      	it	ne
    1b9a:	20c6      	movne	r0, #198	; 0xc6
    1b9c:	d01f      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b9e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1ba0:	422b      	tst	r3, r5
    1ba2:	d01c      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1ba4:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1ba6:	4223      	tst	r3, r4
    1ba8:	d019      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1baa:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bac:	422b      	tst	r3, r5
    1bae:	d016      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bb0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bb2:	4223      	tst	r3, r4
    1bb4:	d013      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bb6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bb8:	422b      	tst	r3, r5
    1bba:	d010      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bbc:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bbe:	4223      	tst	r3, r4
    1bc0:	d00d      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bc2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bc4:	422b      	tst	r3, r5
    1bc6:	d00a      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bc8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bca:	4223      	tst	r3, r4
    1bcc:	d007      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bce:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bd0:	422b      	tst	r3, r5
    1bd2:	d004      	beq.n	1bde <am_hal_pwrctrl_memory_enable+0xe6>
    1bd4:	3809      	subs	r0, #9
    1bd6:	d1e2      	bne.n	1b9e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1bd8:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1bda:	bc30      	pop	{r4, r5}
    1bdc:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1bde:	b911      	cbnz	r1, 1be6 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1be0:	2001      	movs	r0, #1
}
    1be2:	bc30      	pop	{r4, r5}
    1be4:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1be6:	4b41      	ldr	r3, [pc, #260]	; (1cec <am_hal_pwrctrl_memory_enable+0x1f4>)
    1be8:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1bea:	ea31 0402 	bics.w	r4, r1, r2
    1bee:	bf18      	it	ne
    1bf0:	24c6      	movne	r4, #198	; 0xc6
    1bf2:	d0f5      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bf4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1bf6:	ea31 0000 	bics.w	r0, r1, r0
    1bfa:	d0f1      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bfc:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1bfe:	ea31 0005 	bics.w	r0, r1, r5
    1c02:	d0ed      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c04:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c06:	ea31 0002 	bics.w	r0, r1, r2
    1c0a:	d0e9      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c0c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c0e:	ea31 0000 	bics.w	r0, r1, r0
    1c12:	d0e5      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c14:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c16:	ea31 0005 	bics.w	r0, r1, r5
    1c1a:	d0e1      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c1c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c1e:	ea31 0002 	bics.w	r0, r1, r2
    1c22:	d0dd      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c24:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c26:	ea31 0000 	bics.w	r0, r1, r0
    1c2a:	d0d9      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c2c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c2e:	ea31 0005 	bics.w	r0, r1, r5
    1c32:	d0d5      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c34:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c36:	ea31 0002 	bics.w	r0, r1, r2
    1c3a:	d0d1      	beq.n	1be0 <am_hal_pwrctrl_memory_enable+0xe8>
    1c3c:	3c09      	subs	r4, #9
    1c3e:	d1d9      	bne.n	1bf4 <am_hal_pwrctrl_memory_enable+0xfc>
    1c40:	e7ca      	b.n	1bd8 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1c42:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c44:	2300      	movs	r3, #0
    1c46:	e79e      	b.n	1b86 <am_hal_pwrctrl_memory_enable+0x8e>
    1c48:	4d29      	ldr	r5, [pc, #164]	; (1cf0 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c4a:	4b2a      	ldr	r3, [pc, #168]	; (1cf4 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c50:	e795      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c52:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c56:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1c5a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1c5e:	e78e      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c60:	4d25      	ldr	r5, [pc, #148]	; (1cf8 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c62:	4b26      	ldr	r3, [pc, #152]	; (1cfc <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1c64:	f44f 7140 	mov.w	r1, #768	; 0x300
    1c68:	e789      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c6a:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c6e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1c72:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1c76:	e782      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c78:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c7c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1c80:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1c84:	20ff      	movs	r0, #255	; 0xff
    1c86:	e77a      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c88:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c8c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1c90:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1c94:	e773      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1c96:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c9a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1c9e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1ca2:	e76c      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1ca4:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ca8:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1cac:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1cb0:	e765      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    1cb2:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cb6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1cba:	4911      	ldr	r1, [pc, #68]	; (1d00 <am_hal_pwrctrl_memory_enable+0x208>)
    1cbc:	e75f      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1cbe:	4911      	ldr	r1, [pc, #68]	; (1d04 <am_hal_pwrctrl_memory_enable+0x20c>)
    1cc0:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1cc8:	e759      	b.n	1b7e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1cca:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1cce:	e7b9      	b.n	1c44 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1cd0:	4805      	ldr	r0, [pc, #20]	; (1ce8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1cd2:	6803      	ldr	r3, [r0, #0]
    1cd4:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1cd8:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1cda:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1cde:	2100      	movs	r1, #0
    1ce0:	e757      	b.n	1b92 <am_hal_pwrctrl_memory_enable+0x9a>
    1ce2:	bf00      	nop
    1ce4:	0007ff00 	.word	0x0007ff00
    1ce8:	40021010 	.word	0x40021010
    1cec:	40021014 	.word	0x40021014
    1cf0:	fffff801 	.word	0xfffff801
    1cf4:	0007fe00 	.word	0x0007fe00
    1cf8:	fffff803 	.word	0xfffff803
    1cfc:	0007fc00 	.word	0x0007fc00
    1d00:	0001ff00 	.word	0x0001ff00
    1d04:	0003ff00 	.word	0x0003ff00

00001d08 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d08:	4b0f      	ldr	r3, [pc, #60]	; (1d48 <am_hal_pwrctrl_bucks_init+0x40>)
    1d0a:	681a      	ldr	r2, [r3, #0]
    1d0c:	0792      	lsls	r2, r2, #30
    1d0e:	d502      	bpl.n	1d16 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d10:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d12:	07c3      	lsls	r3, r0, #31
    1d14:	d40e      	bmi.n	1d34 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d16:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d18:	4a0b      	ldr	r2, [pc, #44]	; (1d48 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d1a:	6819      	ldr	r1, [r3, #0]
    1d1c:	f041 0002 	orr.w	r0, r1, #2
    1d20:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d22:	6819      	ldr	r1, [r3, #0]
    1d24:	f041 0001 	orr.w	r0, r1, #1
    1d28:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d2a:	6813      	ldr	r3, [r2, #0]
    1d2c:	f003 0103 	and.w	r1, r3, #3
    1d30:	2903      	cmp	r1, #3
    1d32:	d1fa      	bne.n	1d2a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1d34:	4a04      	ldr	r2, [pc, #16]	; (1d48 <am_hal_pwrctrl_bucks_init+0x40>)
    1d36:	6810      	ldr	r0, [r2, #0]
    1d38:	f000 0303 	and.w	r3, r0, #3
    1d3c:	2b03      	cmp	r3, #3
    1d3e:	d1fa      	bne.n	1d36 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1d40:	2042      	movs	r0, #66	; 0x42
    1d42:	f7ff be2d 	b.w	19a0 <am_hal_flash_delay>
    1d46:	bf00      	nop
    1d48:	40021004 	.word	0x40021004
    1d4c:	40021000 	.word	0x40021000

00001d50 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d50:	4b0b      	ldr	r3, [pc, #44]	; (1d80 <am_hal_pwrctrl_bucks_enable+0x30>)
    1d52:	681a      	ldr	r2, [r3, #0]
    1d54:	0792      	lsls	r2, r2, #30
    1d56:	d502      	bpl.n	1d5e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d58:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d5a:	07c3      	lsls	r3, r0, #31
    1d5c:	d40e      	bmi.n	1d7c <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d5e:	4b09      	ldr	r3, [pc, #36]	; (1d84 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d60:	4a07      	ldr	r2, [pc, #28]	; (1d80 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d62:	6819      	ldr	r1, [r3, #0]
    1d64:	f041 0002 	orr.w	r0, r1, #2
    1d68:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d6a:	6819      	ldr	r1, [r3, #0]
    1d6c:	f041 0001 	orr.w	r0, r1, #1
    1d70:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d72:	6813      	ldr	r3, [r2, #0]
    1d74:	f003 0103 	and.w	r1, r3, #3
    1d78:	2903      	cmp	r1, #3
    1d7a:	d1fa      	bne.n	1d72 <am_hal_pwrctrl_bucks_enable+0x22>
    1d7c:	4770      	bx	lr
    1d7e:	bf00      	nop
    1d80:	40021004 	.word	0x40021004
    1d84:	40021000 	.word	0x40021000

00001d88 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1d88:	4b12      	ldr	r3, [pc, #72]	; (1dd4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1d8a:	681a      	ldr	r2, [r3, #0]
    1d8c:	0792      	lsls	r2, r2, #30
    1d8e:	d402      	bmi.n	1d96 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1d90:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1d92:	07c3      	lsls	r3, r0, #31
    1d94:	d51c      	bpl.n	1dd0 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d96:	4910      	ldr	r1, [pc, #64]	; (1dd8 <am_hal_pwrctrl_bucks_disable+0x50>)
    1d98:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1d9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1d9e:	2a20      	cmp	r2, #32
    1da0:	d00b      	beq.n	1dba <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1da2:	4b0e      	ldr	r3, [pc, #56]	; (1ddc <am_hal_pwrctrl_bucks_disable+0x54>)
    1da4:	681a      	ldr	r2, [r3, #0]
    1da6:	f022 0002 	bic.w	r0, r2, #2
    1daa:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1dac:	6819      	ldr	r1, [r3, #0]
    1dae:	f021 0201 	bic.w	r2, r1, #1
    1db2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1db4:	200a      	movs	r0, #10
    1db6:	f7ff bdf3 	b.w	19a0 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1dba:	4809      	ldr	r0, [pc, #36]	; (1de0 <am_hal_pwrctrl_bucks_disable+0x58>)
    1dbc:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1dbe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1dc2:	d1ee      	bne.n	1da2 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1dc4:	4805      	ldr	r0, [pc, #20]	; (1ddc <am_hal_pwrctrl_bucks_disable+0x54>)
    1dc6:	6803      	ldr	r3, [r0, #0]
    1dc8:	f003 0105 	and.w	r1, r3, #5
    1dcc:	6001      	str	r1, [r0, #0]
    1dce:	e7f1      	b.n	1db4 <am_hal_pwrctrl_bucks_disable+0x2c>
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop
    1dd4:	40021004 	.word	0x40021004
    1dd8:	4002000c 	.word	0x4002000c
    1ddc:	40021000 	.word	0x40021000
    1de0:	40021008 	.word	0x40021008

00001de4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1de4:	4905      	ldr	r1, [pc, #20]	; (1dfc <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1de6:	4a06      	ldr	r2, [pc, #24]	; (1e00 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1de8:	680b      	ldr	r3, [r1, #0]
    1dea:	f043 0006 	orr.w	r0, r3, #6
    1dee:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1df0:	6811      	ldr	r1, [r2, #0]
    1df2:	f021 0304 	bic.w	r3, r1, #4
    1df6:	6013      	str	r3, [r2, #0]
    1df8:	4770      	bx	lr
    1dfa:	bf00      	nop
    1dfc:	40021018 	.word	0x40021018
    1e00:	40021000 	.word	0x40021000

00001e04 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e04:	4a05      	ldr	r2, [pc, #20]	; (1e1c <am_hal_rtc_osc_select+0x18>)
    1e06:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1e08:	b918      	cbnz	r0, 1e12 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e0a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1e0e:	6010      	str	r0, [r2, #0]
    1e10:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e12:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1e16:	6011      	str	r1, [r2, #0]
    1e18:	4770      	bx	lr
    1e1a:	bf00      	nop
    1e1c:	4000400c 	.word	0x4000400c

00001e20 <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    1e20:	4a02      	ldr	r2, [pc, #8]	; (1e2c <am_hal_rtc_osc_enable+0xc>)
    1e22:	6813      	ldr	r3, [r2, #0]
    1e24:	f023 0010 	bic.w	r0, r3, #16
    1e28:	6010      	str	r0, [r2, #0]
    1e2a:	4770      	bx	lr
    1e2c:	40004050 	.word	0x40004050

00001e30 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1e30:	4a02      	ldr	r2, [pc, #8]	; (1e3c <am_hal_rtc_osc_disable+0xc>)
    1e32:	6813      	ldr	r3, [r2, #0]
    1e34:	f043 0010 	orr.w	r0, r3, #16
    1e38:	6010      	str	r0, [r2, #0]
    1e3a:	4770      	bx	lr
    1e3c:	40004050 	.word	0x40004050

00001e40 <am_hal_rtc_time_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_rtc_time_set(am_hal_rtc_time_t *pTime)
{
    1e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //
    // Enable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e44:	4c41      	ldr	r4, [pc, #260]	; (1f4c <am_hal_rtc_time_set+0x10c>)
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1e46:	4b42      	ldr	r3, [pc, #264]	; (1f50 <am_hal_rtc_time_set+0x110>)
am_hal_rtc_time_set(am_hal_rtc_time_t *pTime)
{
    //
    // Enable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e48:	6822      	ldr	r2, [r4, #0]

    //
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
    1e4a:	4f42      	ldr	r7, [pc, #264]	; (1f54 <am_hal_rtc_time_set+0x114>)
am_hal_rtc_time_set(am_hal_rtc_time_t *pTime)
{
    //
    // Enable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e4c:	f042 0101 	orr.w	r1, r2, #1
    1e50:	6021      	str	r1, [r4, #0]

    //
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1e52:	f890 e01c 	ldrb.w	lr, [r0, #28]
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    1e56:	f890 6020 	ldrb.w	r6, [r0, #32]
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));
    1e5a:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1e5e:	fba3 520e 	umull	r5, r2, r3, lr
    1e62:	08d2      	lsrs	r2, r2, #3
    1e64:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    1e68:	ebae 0845 	sub.w	r8, lr, r5, lsl #1
    1e6c:	fba3 1506 	umull	r1, r5, r3, r6
    1e70:	08e9      	lsrs	r1, r5, #3
    1e72:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    1e76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    1e7a:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    1e7e:	eba6 0642 	sub.w	r6, r6, r2, lsl #1
    1e82:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
    1e86:	fba3 250c 	umull	r2, r5, r3, ip
    1e8a:	08e9      	lsrs	r1, r5, #3
    1e8c:	0436      	lsls	r6, r6, #16
    1e8e:	fba3 520e 	umull	r5, r2, r3, lr
    1e92:	ea4f 6508 	mov.w	r5, r8, lsl #24
    1e96:	f005 557c 	and.w	r5, r5, #1056964608	; 0x3f000000
    1e9a:	f406 08fe 	and.w	r8, r6, #8323072	; 0x7f0000
    1e9e:	ea45 0608 	orr.w	r6, r5, r8
    1ea2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
    1ea6:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    1eaa:	08d2      	lsrs	r2, r2, #3
    1eac:	ea4c 1801 	orr.w	r8, ip, r1, lsl #4
    1eb0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    1eb4:	ebae 0541 	sub.w	r5, lr, r1, lsl #1
    1eb8:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
    1ebc:	0215      	lsls	r5, r2, #8
    1ebe:	fa5f f188 	uxtb.w	r1, r8
    1ec2:	4331      	orrs	r1, r6
    1ec4:	f405 46fe 	and.w	r6, r5, #32512	; 0x7f00
    1ec8:	430e      	orrs	r6, r1
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);

    //
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
    1eca:	603e      	str	r6, [r7, #0]
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));
    1ecc:	f890 8018 	ldrb.w	r8, [r0, #24]
    AM_REG(RTC, CTRUP) =
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1ed0:	6847      	ldr	r7, [r0, #4]
    //
    AM_REG(RTC, CTRUP) =
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
    1ed2:	7c06      	ldrb	r6, [r0, #16]
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1ed4:	7d02      	ldrb	r2, [r0, #20]
    1ed6:	fba3 e108 	umull	lr, r1, r3, r8
    1eda:	08c9      	lsrs	r1, r1, #3
    1edc:	ea4f 7e07 	mov.w	lr, r7, lsl #28
    1ee0:	68c7      	ldr	r7, [r0, #12]
    1ee2:	6880      	ldr	r0, [r0, #8]
    1ee4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
    1ee8:	eba8 0845 	sub.w	r8, r8, r5, lsl #1
    1eec:	06fd      	lsls	r5, r7, #27
    1eee:	ea48 1801 	orr.w	r8, r8, r1, lsl #4
    1ef2:	f005 6700 	and.w	r7, r5, #134217728	; 0x8000000
    1ef6:	fba3 1506 	umull	r1, r5, r3, r6
    1efa:	f00e 5c80 	and.w	ip, lr, #268435456	; 0x10000000
    1efe:	fba3 3102 	umull	r3, r1, r3, r2
    1f02:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
    1f06:	08cb      	lsrs	r3, r1, #3
    1f08:	ea4c 0707 	orr.w	r7, ip, r7
    1f0c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    1f10:	f008 053f 	and.w	r5, r8, #63	; 0x3f
    1f14:	0600      	lsls	r0, r0, #24
    1f16:	eba6 084c 	sub.w	r8, r6, ip, lsl #1
    1f1a:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    1f1e:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    1f22:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
    1f26:	4338      	orrs	r0, r7
    1f28:	ea48 110e 	orr.w	r1, r8, lr, lsl #4
    1f2c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
    1f30:	4305      	orrs	r5, r0
    1f32:	b2cf      	uxtb	r7, r1
    1f34:	0218      	lsls	r0, r3, #8
    1f36:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    1f3a:	f400 56f8 	and.w	r6, r0, #7936	; 0x1f00
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));

    //
    // Write the RTCUP register.
    //
    AM_REG(RTC, CTRUP) =
    1f3e:	4a06      	ldr	r2, [pc, #24]	; (1f58 <am_hal_rtc_time_set+0x118>)
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f40:	432e      	orrs	r6, r5
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));

    //
    // Write the RTCUP register.
    //
    AM_REG(RTC, CTRUP) =
    1f42:	6016      	str	r6, [r2, #0]
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));

    //
    // Disable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(0);
    1f44:	6821      	ldr	r1, [r4, #0]
    1f46:	6021      	str	r1, [r4, #0]
    1f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f4c:	40004050 	.word	0x40004050
    1f50:	cccccccd 	.word	0xcccccccd
    1f54:	40004040 	.word	0x40004040
    1f58:	40004044 	.word	0x40004044

00001f5c <am_hal_rtc_time_get>:
    uint32_t ui32RTCLow, ui32RTCUp, ui32Value;

    //
    // Read the upper and lower RTC registers.
    //
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    1f5c:	4a30      	ldr	r2, [pc, #192]	; (2020 <am_hal_rtc_time_get+0xc4>)
    ui32RTCUp = AM_REG(RTC, CTRUP);
    1f5e:	4b31      	ldr	r3, [pc, #196]	; (2024 <am_hal_rtc_time_get+0xc8>)
    uint32_t ui32RTCLow, ui32RTCUp, ui32Value;

    //
    // Read the upper and lower RTC registers.
    //
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    1f60:	6812      	ldr	r2, [r2, #0]
//! @return 0 for success and 1 for error.
//
//*****************************************************************************
uint32_t
am_hal_rtc_time_get(am_hal_rtc_time_t *pTime)
{
    1f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1f66:	f3c2 6e05 	ubfx	lr, r2, #24, #6

    //
    // Read the upper and lower RTC registers.
    //
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    ui32RTCUp = AM_REG(RTC, CTRUP);
    1f6a:	681c      	ldr	r4, [r3, #0]
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1f6c:	b2d5      	uxtb	r5, r2
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1f6e:	ea4f 161e 	mov.w	r6, lr, lsr #4
//! @return 0 for success and 1 for error.
//
//*****************************************************************************
uint32_t
am_hal_rtc_time_get(am_hal_rtc_time_t *pTime)
{
    1f72:	4603      	mov	r3, r0
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1f74:	f00e 0c0f 	and.w	ip, lr, #15
    1f78:	eb06 0086 	add.w	r0, r6, r6, lsl #2
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1f7c:	ea4f 1e15 	mov.w	lr, r5, lsr #4
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1f80:	eb0c 0640 	add.w	r6, ip, r0, lsl #1
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1f84:	f3c4 4107 	ubfx	r1, r4, #16, #8
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1f88:	eb0e 008e 	add.w	r0, lr, lr, lsl #2
    1f8c:	f005 050f 	and.w	r5, r5, #15
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1f90:	f3c2 4706 	ubfx	r7, r2, #16, #7
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1f94:	eb05 0e40 	add.w	lr, r5, r0, lsl #1
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1f98:	0908      	lsrs	r0, r1, #4
    1f9a:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
    1f9e:	f001 010f 	and.w	r1, r1, #15
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1fa2:	61de      	str	r6, [r3, #28]

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1fa4:	093e      	lsrs	r6, r7, #4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fa6:	f3c4 2804 	ubfx	r8, r4, #8, #5
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1faa:	eb01 054c 	add.w	r5, r1, ip, lsl #1
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1fae:	f007 070f 	and.w	r7, r7, #15
    1fb2:	eb06 0186 	add.w	r1, r6, r6, lsl #2
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fb6:	ea4f 1c18 	mov.w	ip, r8, lsr #4
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1fba:	eb07 0641 	add.w	r6, r7, r1, lsl #1

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1fbe:	f3c2 2206 	ubfx	r2, r2, #8, #7
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1fc2:	f004 003f 	and.w	r0, r4, #63	; 0x3f
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1fc6:	0911      	lsrs	r1, r2, #4
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1fc8:	621e      	str	r6, [r3, #32]
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fca:	ea4f 068c 	mov.w	r6, ip, lsl #2
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1fce:	eb01 0781 	add.w	r7, r1, r1, lsl #2
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fd2:	f008 080f 	and.w	r8, r8, #15

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1fd6:	0901      	lsrs	r1, r0, #4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fd8:	4466      	add	r6, ip
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1fda:	f002 020f 	and.w	r2, r2, #15
    1fde:	eb02 0247 	add.w	r2, r2, r7, lsl #1
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1fe2:	eb08 0646 	add.w	r6, r8, r6, lsl #1

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1fe6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    1fea:	f000 080f 	and.w	r8, r0, #15
    1fee:	eb08 014c 	add.w	r1, r8, ip, lsl #1
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1ff2:	fa5f fe8e 	uxtb.w	lr, lr
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1ff6:	b2ed      	uxtb	r5, r5
    // Break out the upper word.
    //
    pTime->ui32ReadError =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);

    pTime->ui32CenturyEnable =
    1ff8:	f3c4 7c00 	ubfx	ip, r4, #28, #1
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRMIN_M) >> AM_REG_RTC_CTRLOW_CTRMIN_S);
    pTime->ui32Minute = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1ffc:	625a      	str	r2, [r3, #36]	; 0x24
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);

    pTime->ui32CenturyEnable =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CEB_M) >> AM_REG_RTC_CTRUP_CEB_S);

    pTime->ui32Century =
    1ffe:	f3c4 67c0 	ubfx	r7, r4, #27, #1
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CB_M) >> AM_REG_RTC_CTRUP_CB_S);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);
    2002:	f3c4 6202 	ubfx	r2, r4, #24, #3

    //
    // Break out the upper word.
    //
    pTime->ui32ReadError =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);
    2006:	0fe0      	lsrs	r0, r4, #31
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    2008:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
    // Break out the upper word.
    //
    pTime->ui32ReadError =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);

    pTime->ui32CenturyEnable =
    200c:	f8c3 c004 	str.w	ip, [r3, #4]
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CEB_M) >> AM_REG_RTC_CTRUP_CEB_S);

    pTime->ui32Century =
    2010:	60df      	str	r7, [r3, #12]
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CB_M) >> AM_REG_RTC_CTRUP_CB_S);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);
    2012:	609a      	str	r2, [r3, #8]

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    2014:	611d      	str	r5, [r3, #16]

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    2016:	615e      	str	r6, [r3, #20]
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);

    //
    // Break out the upper word.
    //
    pTime->ui32ReadError =
    2018:	6018      	str	r0, [r3, #0]
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    201a:	6199      	str	r1, [r3, #24]
    }
    else
    {
        return 0;
    }
}
    201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2020:	40004040 	.word	0x40004040
    2024:	40004044 	.word	0x40004044

00002028 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	b083      	sub	sp, #12
    202c:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    202e:	f7ff fce9 	bl	1a04 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2032:	4a41      	ldr	r2, [pc, #260]	; (2138 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2034:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2036:	b11d      	cbz	r5, 2040 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2038:	4b40      	ldr	r3, [pc, #256]	; (213c <am_hal_sysctrl_sleep+0x114>)
    203a:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    203c:	07c3      	lsls	r3, r0, #31
    203e:	d509      	bpl.n	2054 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	f021 0604 	bic.w	r6, r1, #4
    2046:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2048:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    204a:	4620      	mov	r0, r4
    204c:	f7ff fcde 	bl	1a0c <am_hal_interrupt_master_set>
}
    2050:	b003      	add	sp, #12
    2052:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2054:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2056:	493a      	ldr	r1, [pc, #232]	; (2140 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2058:	4f3a      	ldr	r7, [pc, #232]	; (2144 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    205a:	4d3b      	ldr	r5, [pc, #236]	; (2148 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    205c:	483b      	ldr	r0, [pc, #236]	; (214c <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    205e:	f043 0604 	orr.w	r6, r3, #4
    2062:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2064:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2066:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2068:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    206a:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    206c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2070:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2072:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2076:	bf14      	ite	ne
    2078:	2500      	movne	r5, #0
    207a:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    207c:	2e03      	cmp	r6, #3
    207e:	bf8c      	ite	hi
    2080:	2100      	movhi	r1, #0
    2082:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2084:	f012 0303 	ands.w	r3, r2, #3
    2088:	bf18      	it	ne
    208a:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    208c:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2090:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2092:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2094:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2098:	b91e      	cbnz	r6, 20a2 <am_hal_sysctrl_sleep+0x7a>
    209a:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    209e:	2d0f      	cmp	r5, #15
    20a0:	d00a      	beq.n	20b8 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    20a2:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    20a4:	2d0f      	cmp	r5, #15
    20a6:	d01a      	beq.n	20de <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    20a8:	4f29      	ldr	r7, [pc, #164]	; (2150 <am_hal_sysctrl_sleep+0x128>)
    20aa:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    20ac:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    20ae:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    20b0:	f7ff fcac 	bl	1a0c <am_hal_interrupt_master_set>
}
    20b4:	b003      	add	sp, #12
    20b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20b8:	683a      	ldr	r2, [r7, #0]
    20ba:	1e50      	subs	r0, r2, #1
    20bc:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    20be:	9800      	ldr	r0, [sp, #0]
    20c0:	f04f 31ff 	mov.w	r1, #4294967295
    20c4:	f7ff fbfc 	bl	18c0 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    20c8:	9800      	ldr	r0, [sp, #0]
    20ca:	4633      	mov	r3, r6
    20cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    20d0:	f04f 31ff 	mov.w	r1, #4294967295
    20d4:	f7ff fc08 	bl	18e8 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    20d8:	f7ff fe56 	bl	1d88 <am_hal_pwrctrl_bucks_disable>
    20dc:	e7e1      	b.n	20a2 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    20de:	f3ef 8310 	mrs	r3, PRIMASK
    20e2:	9301      	str	r3, [sp, #4]
    20e4:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20e6:	4e1b      	ldr	r6, [pc, #108]	; (2154 <am_hal_sysctrl_sleep+0x12c>)
    20e8:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    20ea:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    20ec:	6835      	ldr	r5, [r6, #0]
    20ee:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    20f2:	f04c 021c 	orr.w	r2, ip, #28
    20f6:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20f8:	6830      	ldr	r0, [r6, #0]
    20fa:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    20fe:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    2102:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2104:	9e01      	ldr	r6, [sp, #4]
    2106:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    210a:	201c      	movs	r0, #28
    210c:	f7ff fc48 	bl	19a0 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2110:	f7ff fe1e 	bl	1d50 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2114:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2116:	4910      	ldr	r1, [pc, #64]	; (2158 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2118:	4d0d      	ldr	r5, [pc, #52]	; (2150 <am_hal_sysctrl_sleep+0x128>)
    211a:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    211c:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    211e:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2120:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2122:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2124:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2126:	f7ff fc3b 	bl	19a0 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    212a:	9800      	ldr	r0, [sp, #0]
    212c:	f04f 31ff 	mov.w	r1, #4294967295
    2130:	f7ff fbac 	bl	188c <am_hal_ctimer_start>
    2134:	e789      	b.n	204a <am_hal_sysctrl_sleep+0x22>
    2136:	bf00      	nop
    2138:	e000ed10 	.word	0xe000ed10
    213c:	40020250 	.word	0x40020250
    2140:	4002000c 	.word	0x4002000c
    2144:	100011c0 	.word	0x100011c0
    2148:	40021000 	.word	0x40021000
    214c:	40021008 	.word	0x40021008
    2150:	100011b8 	.word	0x100011b8
    2154:	40020068 	.word	0x40020068
    2158:	100011bc 	.word	0x100011bc

0000215c <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    215c:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    215e:	4a22      	ldr	r2, [pc, #136]	; (21e8 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2160:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2162:	2100      	movs	r1, #0
    2164:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    2166:	b333      	cbz	r3, 21b6 <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2168:	4d20      	ldr	r5, [pc, #128]	; (21ec <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    216a:	4921      	ldr	r1, [pc, #132]	; (21f0 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    216c:	4a21      	ldr	r2, [pc, #132]	; (21f4 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    216e:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2170:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2174:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2176:	458c      	cmp	ip, r1
    2178:	bf94      	ite	ls
    217a:	461d      	movls	r5, r3
    217c:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    217e:	f7ff faf1 	bl	1764 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2182:	1c43      	adds	r3, r0, #1
    2184:	d02e      	beq.n	21e4 <am_hal_tpiu_enable+0x88>
    2186:	08c3      	lsrs	r3, r0, #3
    2188:	fbb3 fef5 	udiv	lr, r3, r5
    218c:	f10e 31ff 	add.w	r1, lr, #4294967295
    2190:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2192:	4a19      	ldr	r2, [pc, #100]	; (21f8 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2194:	4c19      	ldr	r4, [pc, #100]	; (21fc <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2196:	4b1a      	ldr	r3, [pc, #104]	; (2200 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2198:	491a      	ldr	r1, [pc, #104]	; (2204 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    219a:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    219c:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    219e:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21a0:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    21a4:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    21a6:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21a8:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21aa:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    21ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21b2:	f7ff bbf5 	b.w	19a0 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    21b6:	4c10      	ldr	r4, [pc, #64]	; (21f8 <am_hal_tpiu_enable+0x9c>)
    21b8:	6905      	ldr	r5, [r0, #16]
    21ba:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    21bc:	6882      	ldr	r2, [r0, #8]
    21be:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    21c2:	68c3      	ldr	r3, [r0, #12]
    21c4:	4c09      	ldr	r4, [pc, #36]	; (21ec <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    21c6:	490e      	ldr	r1, [pc, #56]	; (2200 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    21c8:	1e5d      	subs	r5, r3, #1
    21ca:	2201      	movs	r2, #1
    21cc:	40aa      	lsls	r2, r5
    21ce:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    21d0:	680b      	ldr	r3, [r1, #0]
    21d2:	6840      	ldr	r0, [r0, #4]
    21d4:	4318      	orrs	r0, r3
    21d6:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    21d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21dc:	f44f 7047 	mov.w	r0, #796	; 0x31c
    21e0:	f7ff bbde 	b.w	19a0 <am_hal_flash_delay>
    21e4:	2005      	movs	r0, #5
    21e6:	e7d4      	b.n	2192 <am_hal_tpiu_enable+0x36>
    21e8:	e0040304 	.word	0xe0040304
    21ec:	e0040004 	.word	0xe0040004
    21f0:	001da380 	.word	0x001da380
    21f4:	000f4240 	.word	0x000f4240
    21f8:	e0040010 	.word	0xe0040010
    21fc:	e00400f0 	.word	0xe00400f0
    2200:	40020250 	.word	0x40020250
    2204:	e0040f00 	.word	0xe0040f00

00002208 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    2208:	4b01      	ldr	r3, [pc, #4]	; (2210 <am_hal_tpiu_disable+0x8>)
    220a:	2200      	movs	r2, #0
    220c:	601a      	str	r2, [r3, #0]
    220e:	4770      	bx	lr
    2210:	40020250 	.word	0x40020250

00002214 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2214:	4b01      	ldr	r3, [pc, #4]	; (221c <am_hal_vcomp_disable+0x8>)
    2216:	2237      	movs	r2, #55	; 0x37
    2218:	601a      	str	r2, [r3, #0]
    221a:	4770      	bx	lr
    221c:	4000c008 	.word	0x4000c008
    2220:	646e7553 	.word	0x646e7553
    2224:	00007961 	.word	0x00007961
    2228:	646e6f4d 	.word	0x646e6f4d
    222c:	00007961 	.word	0x00007961
    2230:	73657554 	.word	0x73657554
    2234:	00796164 	.word	0x00796164
    2238:	6e646557 	.word	0x6e646557
    223c:	61647365 	.word	0x61647365
    2240:	00000079 	.word	0x00000079
    2244:	72756854 	.word	0x72756854
    2248:	79616473 	.word	0x79616473
    224c:	00000000 	.word	0x00000000
    2250:	64697246 	.word	0x64697246
    2254:	00007961 	.word	0x00007961
    2258:	75746153 	.word	0x75746153
    225c:	79616472 	.word	0x79616472
    2260:	00000000 	.word	0x00000000
    2264:	61766e49 	.word	0x61766e49
    2268:	2064696c 	.word	0x2064696c
    226c:	00796164 	.word	0x00796164
    2270:	756e614a 	.word	0x756e614a
    2274:	00797261 	.word	0x00797261
    2278:	72626546 	.word	0x72626546
    227c:	79726175 	.word	0x79726175
    2280:	00000000 	.word	0x00000000
    2284:	6372614d 	.word	0x6372614d
    2288:	00000068 	.word	0x00000068
    228c:	69727041 	.word	0x69727041
    2290:	0000006c 	.word	0x0000006c
    2294:	0079614d 	.word	0x0079614d
    2298:	656e754a 	.word	0x656e754a
    229c:	00000000 	.word	0x00000000
    22a0:	796c754a 	.word	0x796c754a
    22a4:	00000000 	.word	0x00000000
    22a8:	75677541 	.word	0x75677541
    22ac:	00007473 	.word	0x00007473
    22b0:	74706553 	.word	0x74706553
    22b4:	65626d65 	.word	0x65626d65
    22b8:	00000072 	.word	0x00000072
    22bc:	6f74634f 	.word	0x6f74634f
    22c0:	00726562 	.word	0x00726562
    22c4:	65766f4e 	.word	0x65766f4e
    22c8:	7265626d 	.word	0x7265626d
    22cc:	00000000 	.word	0x00000000
    22d0:	65636544 	.word	0x65636544
    22d4:	7265626d 	.word	0x7265626d
    22d8:	00000000 	.word	0x00000000
    22dc:	61766e49 	.word	0x61766e49
    22e0:	2064696c 	.word	0x2064696c
    22e4:	746e6f6d 	.word	0x746e6f6d
    22e8:	00000068 	.word	0x00000068
    22ec:	303a3131 	.word	0x303a3131
    22f0:	38303a31 	.word	0x38303a31
    22f4:	00000000 	.word	0x00000000
    22f8:	20766f4e 	.word	0x20766f4e
    22fc:	32203932 	.word	0x32203932
    2300:	00373130 	.word	0x00373130
    2304:	20435452 	.word	0x20435452
    2308:	6e697250 	.word	0x6e697250
    230c:	78452074 	.word	0x78452074
    2310:	6c706d61 	.word	0x6c706d61
    2314:	00000a65 	.word	0x00000a65
    2318:	73696854 	.word	0x73696854
    231c:	61786520 	.word	0x61786520
    2320:	656c706d 	.word	0x656c706d
    2324:	73617720 	.word	0x73617720
    2328:	69756220 	.word	0x69756220
    232c:	6f20746c 	.word	0x6f20746c
    2330:	7325206e 	.word	0x7325206e
    2334:	20746120 	.word	0x20746120
    2338:	0a2e7325 	.word	0x0a2e7325
    233c:	0000000a 	.word	0x0000000a
    2340:	20744909 	.word	0x20744909
    2344:	6e207369 	.word	0x6e207369
    2348:	0020776f 	.word	0x0020776f
    234c:	3a206425 	.word	0x3a206425
    2350:	00000020 	.word	0x00000020
    2354:	64323025 	.word	0x64323025
    2358:	00203a20 	.word	0x00203a20
    235c:	64323025 	.word	0x64323025
    2360:	0000002e 	.word	0x0000002e
    2364:	64323025 	.word	0x64323025
    2368:	00000020 	.word	0x00000020
    236c:	00000020 	.word	0x00000020
    2370:	202c6425 	.word	0x202c6425
    2374:	00000000 	.word	0x00000000
    2378:	30253032 	.word	0x30253032
    237c:	00006432 	.word	0x00006432
    2380:	0a0a0a0a 	.word	0x0a0a0a0a
    2384:	0a0a0a0a 	.word	0x0a0a0a0a
    2388:	0a0a0a0a 	.word	0x0a0a0a0a
    238c:	0a0a0a0a 	.word	0x0a0a0a0a
    2390:	00000a0a 	.word	0x00000a0a

00002394 <am_cattr>:
	...
    239c:	20202000 00002020 00000000 00000000     .     ..........
	...
    23b4:	80008020 80808080 00008080 00808000      ...............
    23c4:	98989898 98989898 00009898 00000000     ................
    23d4:	95959580 85959595 85858585 85858585     ................
    23e4:	85858585 85858585 00858585 80800000     ................
    23f4:	93939380 83939393 83838383 83838383     ................
    2404:	83838383 83838383 80838383 00808000     ................
	...

00002494 <am_hal_cachectrl_defaults>:
    2494:	50000001 00010300 00010101 685f6d61     ...P........am_h
    24a4:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    24b4:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    24c4:	63206469 6b636f6c 74657320 676e6974     id clock setting
    24d4:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    24e4:	6b6c635f 2e6e6567 00000063              _clkgen.c...
