
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\binary_counter\atollic_gcc\bin\binary_counter_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000220c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000084  10001000  0000220c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000011c  10001084  00002290  00021084  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021084  2**0
                  CONTENTS, READONLY
  5 .debug_info   000066e5  00000000  00000000  000210bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bdd  00000000  00000000  000277a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000838  00000000  00000000  0002937d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e88  00000000  00000000  00029bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000420c  00000000  00000000  0002aa3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c02  00000000  00000000  0002ec49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0003184b  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001740  00000000  00000000  000318cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003837  00000000  00000000  0003300c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 a5 07 00 00 0d 08 00 00 1d 08 00 00     ................
      10:	1d 08 00 00 1d 08 00 00 1d 08 00 00 00 00 00 00     ................
	...
      2c:	15 08 00 00 15 08 00 00 00 00 00 00 15 08 00 00     ................
      3c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      4c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      5c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      6c:	15 08 00 00 15 08 00 00 a9 06 00 00 15 08 00 00     ................
      7c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      8c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      9c:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      ac:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      bc:	15 08 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     482:	683b      	ldr	r3, [r7, #0]
     484:	00db      	lsls	r3, r3, #3
     486:	687a      	ldr	r2, [r7, #4]
     488:	4413      	add	r3, r2
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	f003 0302 	and.w	r3, r3, #2
     490:	2b00      	cmp	r3, #0
     492:	d036      	beq.n	502 <am_devices_led_on+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     494:	683b      	ldr	r3, [r7, #0]
     496:	00db      	lsls	r3, r3, #3
     498:	687a      	ldr	r2, [r7, #4]
     49a:	4413      	add	r3, r2
     49c:	685b      	ldr	r3, [r3, #4]
     49e:	f003 0301 	and.w	r3, r3, #1
     4a2:	2b00      	cmp	r3, #0
     4a4:	d016      	beq.n	4d4 <am_devices_led_on+0x5c>
     4a6:	683b      	ldr	r3, [r7, #0]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	687a      	ldr	r2, [r7, #4]
     4ac:	4413      	add	r3, r2
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	08db      	lsrs	r3, r3, #3
     4b2:	f003 0204 	and.w	r2, r3, #4
     4b6:	4b21      	ldr	r3, [pc, #132]	; (53c <am_devices_led_on+0xc4>)
     4b8:	4413      	add	r3, r2
     4ba:	4619      	mov	r1, r3
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	f003 031f 	and.w	r3, r3, #31
     4ca:	2201      	movs	r2, #1
     4cc:	fa02 f303 	lsl.w	r3, r2, r3
     4d0:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     4d2:	e02c      	b.n	52e <am_devices_led_on+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	00db      	lsls	r3, r3, #3
     4d8:	687a      	ldr	r2, [r7, #4]
     4da:	4413      	add	r3, r2
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	08db      	lsrs	r3, r3, #3
     4e0:	f003 0204 	and.w	r2, r3, #4
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <am_devices_led_on+0xc8>)
     4e6:	4413      	add	r3, r2
     4e8:	4619      	mov	r1, r3
     4ea:	683b      	ldr	r3, [r7, #0]
     4ec:	00db      	lsls	r3, r3, #3
     4ee:	687a      	ldr	r2, [r7, #4]
     4f0:	4413      	add	r3, r2
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	f003 031f 	and.w	r3, r3, #31
     4f8:	2201      	movs	r2, #1
     4fa:	fa02 f303 	lsl.w	r3, r2, r3
     4fe:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     500:	e015      	b.n	52e <am_devices_led_on+0xb6>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     502:	683b      	ldr	r3, [r7, #0]
     504:	00db      	lsls	r3, r3, #3
     506:	687a      	ldr	r2, [r7, #4]
     508:	4413      	add	r3, r2
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	08db      	lsrs	r3, r3, #3
     50e:	f003 0204 	and.w	r2, r3, #4
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <am_devices_led_on+0xcc>)
     514:	4413      	add	r3, r2
     516:	4619      	mov	r1, r3
     518:	683b      	ldr	r3, [r7, #0]
     51a:	00db      	lsls	r3, r3, #3
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	4413      	add	r3, r2
     520:	681b      	ldr	r3, [r3, #0]
     522:	f003 031f 	and.w	r3, r3, #31
     526:	2201      	movs	r2, #1
     528:	fa02 f303 	lsl.w	r3, r2, r3
     52c:	600b      	str	r3, [r1, #0]
    }
}
     52e:	bf00      	nop
     530:	370c      	adds	r7, #12
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr
     53a:	bf00      	nop
     53c:	40010090 	.word	0x40010090
     540:	40010098 	.word	0x40010098
     544:	400100a8 	.word	0x400100a8

00000548 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     548:	b480      	push	{r7}
     54a:	b083      	sub	sp, #12
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
     550:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	685b      	ldr	r3, [r3, #4]
     55c:	f003 0302 	and.w	r3, r3, #2
     560:	2b00      	cmp	r3, #0
     562:	d036      	beq.n	5d2 <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     564:	683b      	ldr	r3, [r7, #0]
     566:	00db      	lsls	r3, r3, #3
     568:	687a      	ldr	r2, [r7, #4]
     56a:	4413      	add	r3, r2
     56c:	685b      	ldr	r3, [r3, #4]
     56e:	f003 0301 	and.w	r3, r3, #1
     572:	2b00      	cmp	r3, #0
     574:	d116      	bne.n	5a4 <am_devices_led_off+0x5c>
     576:	683b      	ldr	r3, [r7, #0]
     578:	00db      	lsls	r3, r3, #3
     57a:	687a      	ldr	r2, [r7, #4]
     57c:	4413      	add	r3, r2
     57e:	681b      	ldr	r3, [r3, #0]
     580:	08db      	lsrs	r3, r3, #3
     582:	f003 0204 	and.w	r2, r3, #4
     586:	4b21      	ldr	r3, [pc, #132]	; (60c <am_devices_led_off+0xc4>)
     588:	4413      	add	r3, r2
     58a:	4619      	mov	r1, r3
     58c:	683b      	ldr	r3, [r7, #0]
     58e:	00db      	lsls	r3, r3, #3
     590:	687a      	ldr	r2, [r7, #4]
     592:	4413      	add	r3, r2
     594:	681b      	ldr	r3, [r3, #0]
     596:	f003 031f 	and.w	r3, r3, #31
     59a:	2201      	movs	r2, #1
     59c:	fa02 f303 	lsl.w	r3, r2, r3
     5a0:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     5a2:	e02c      	b.n	5fe <am_devices_led_off+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     5a4:	683b      	ldr	r3, [r7, #0]
     5a6:	00db      	lsls	r3, r3, #3
     5a8:	687a      	ldr	r2, [r7, #4]
     5aa:	4413      	add	r3, r2
     5ac:	681b      	ldr	r3, [r3, #0]
     5ae:	08db      	lsrs	r3, r3, #3
     5b0:	f003 0204 	and.w	r2, r3, #4
     5b4:	4b16      	ldr	r3, [pc, #88]	; (610 <am_devices_led_off+0xc8>)
     5b6:	4413      	add	r3, r2
     5b8:	4619      	mov	r1, r3
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	00db      	lsls	r3, r3, #3
     5be:	687a      	ldr	r2, [r7, #4]
     5c0:	4413      	add	r3, r2
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	f003 031f 	and.w	r3, r3, #31
     5c8:	2201      	movs	r2, #1
     5ca:	fa02 f303 	lsl.w	r3, r2, r3
     5ce:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     5d0:	e015      	b.n	5fe <am_devices_led_off+0xb6>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	00db      	lsls	r3, r3, #3
     5d6:	687a      	ldr	r2, [r7, #4]
     5d8:	4413      	add	r3, r2
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	08db      	lsrs	r3, r3, #3
     5de:	f003 0204 	and.w	r2, r3, #4
     5e2:	4b0c      	ldr	r3, [pc, #48]	; (614 <am_devices_led_off+0xcc>)
     5e4:	4413      	add	r3, r2
     5e6:	4619      	mov	r1, r3
     5e8:	683b      	ldr	r3, [r7, #0]
     5ea:	00db      	lsls	r3, r3, #3
     5ec:	687a      	ldr	r2, [r7, #4]
     5ee:	4413      	add	r3, r2
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	f003 031f 	and.w	r3, r3, #31
     5f6:	2201      	movs	r2, #1
     5f8:	fa02 f303 	lsl.w	r3, r2, r3
     5fc:	600b      	str	r3, [r1, #0]
    }
}
     5fe:	bf00      	nop
     600:	370c      	adds	r7, #12
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	40010090 	.word	0x40010090
     610:	40010098 	.word	0x40010098
     614:	400100b4 	.word	0x400100b4

00000618 <am_devices_led_array_out>:
//
//*****************************************************************************
void
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
     618:	b580      	push	{r7, lr}
     61a:	b086      	sub	sp, #24
     61c:	af00      	add	r7, sp, #0
     61e:	60f8      	str	r0, [r7, #12]
     620:	60b9      	str	r1, [r7, #8]
     622:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
     624:	2300      	movs	r3, #0
     626:	617b      	str	r3, [r7, #20]
     628:	e014      	b.n	654 <am_devices_led_array_out+0x3c>
    {
        if ( ui32Value & (1 << i) )
     62a:	2201      	movs	r2, #1
     62c:	697b      	ldr	r3, [r7, #20]
     62e:	fa02 f303 	lsl.w	r3, r2, r3
     632:	461a      	mov	r2, r3
     634:	687b      	ldr	r3, [r7, #4]
     636:	4013      	ands	r3, r2
     638:	2b00      	cmp	r3, #0
     63a:	d004      	beq.n	646 <am_devices_led_array_out+0x2e>
        {
            am_devices_led_on(psLEDs, i);
     63c:	6979      	ldr	r1, [r7, #20]
     63e:	68f8      	ldr	r0, [r7, #12]
     640:	f7ff ff1a 	bl	478 <am_devices_led_on>
     644:	e003      	b.n	64e <am_devices_led_array_out+0x36>
        }
        else
        {
            am_devices_led_off(psLEDs, i);
     646:	6979      	ldr	r1, [r7, #20]
     648:	68f8      	ldr	r0, [r7, #12]
     64a:	f7ff ff7d 	bl	548 <am_devices_led_off>
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
     64e:	697b      	ldr	r3, [r7, #20]
     650:	3301      	adds	r3, #1
     652:	617b      	str	r3, [r7, #20]
     654:	697a      	ldr	r2, [r7, #20]
     656:	68bb      	ldr	r3, [r7, #8]
     658:	429a      	cmp	r2, r3
     65a:	d3e6      	bcc.n	62a <am_devices_led_array_out+0x12>
        else
        {
            am_devices_led_off(psLEDs, i);
        }
    }
}
     65c:	bf00      	nop
     65e:	3718      	adds	r7, #24
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}

00000664 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     66a:	2002      	movs	r0, #2
     66c:	f001 f938 	bl	18e0 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     670:	f64f 71ff 	movw	r1, #65535	; 0xffff
     674:	2000      	movs	r0, #0
     676:	f001 f9d1 	bl	1a1c <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     67a:	490a      	ldr	r1, [pc, #40]	; (6a4 <timerA0_init+0x40>)
     67c:	2000      	movs	r0, #0
     67e:	f001 f943 	bl	1908 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 8;
     682:	2308      	movs	r3, #8
     684:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     686:	687b      	ldr	r3, [r7, #4]
     688:	085b      	lsrs	r3, r3, #1
     68a:	687a      	ldr	r2, [r7, #4]
     68c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     690:	2000      	movs	r0, #0
     692:	f001 f9d7 	bl	1a44 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     696:	2001      	movs	r0, #1
     698:	f001 fa28 	bl	1aec <am_hal_ctimer_int_clear>
}
     69c:	bf00      	nop
     69e:	3708      	adds	r7, #8
     6a0:	46bd      	mov	sp, r7
     6a2:	bd80      	pop	{r7, pc}
     6a4:	10001000 	.word	0x10001000

000006a8 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    if (++g_ui32TimerCount >= (1 << AM_BSP_NUM_LEDS))
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <am_ctimer_isr+0x24>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	3301      	adds	r3, #1
     6b2:	4a06      	ldr	r2, [pc, #24]	; (6cc <am_ctimer_isr+0x24>)
     6b4:	6013      	str	r3, [r2, #0]
     6b6:	2b1f      	cmp	r3, #31
     6b8:	d902      	bls.n	6c0 <am_ctimer_isr+0x18>
    {
        //
        // Reset the global.
        //
        g_ui32TimerCount = 0;
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <am_ctimer_isr+0x24>)
     6bc:	2200      	movs	r2, #0
     6be:	601a      	str	r2, [r3, #0]
    }
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     6c0:	2001      	movs	r0, #1
     6c2:	f001 fa13 	bl	1aec <am_hal_ctimer_int_clear>

}
     6c6:	bf00      	nop
     6c8:	bd80      	pop	{r7, pc}
     6ca:	bf00      	nop
     6cc:	10001084 	.word	0x10001084

000006d0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     6d6:	2000      	movs	r0, #0
     6d8:	f001 f8da 	bl	1890 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     6dc:	4828      	ldr	r0, [pc, #160]	; (780 <main+0xb0>)
     6de:	f001 f841 	bl	1764 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     6e2:	f000 ffb5 	bl	1650 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     6e6:	4827      	ldr	r0, [pc, #156]	; (784 <main+0xb4>)
     6e8:	f000 f918 	bl	91c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     6ec:	f3ef 8310 	mrs	r3, PRIMASK
     6f0:	607b      	str	r3, [r7, #4]
     6f2:	b672      	cpsid	i
     6f4:	4b24      	ldr	r3, [pc, #144]	; (788 <main+0xb8>)
     6f6:	2273      	movs	r2, #115	; 0x73
     6f8:	601a      	str	r2, [r3, #0]
     6fa:	4a24      	ldr	r2, [pc, #144]	; (78c <main+0xbc>)
     6fc:	4b23      	ldr	r3, [pc, #140]	; (78c <main+0xbc>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     704:	6013      	str	r3, [r2, #0]
     706:	4a22      	ldr	r2, [pc, #136]	; (790 <main+0xc0>)
     708:	4b21      	ldr	r3, [pc, #132]	; (790 <main+0xc0>)
     70a:	681b      	ldr	r3, [r3, #0]
     70c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     714:	6013      	str	r3, [r2, #0]
     716:	4a1f      	ldr	r2, [pc, #124]	; (794 <main+0xc4>)
     718:	4b1e      	ldr	r3, [pc, #120]	; (794 <main+0xc4>)
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     720:	6013      	str	r3, [r2, #0]
     722:	4b19      	ldr	r3, [pc, #100]	; (788 <main+0xb8>)
     724:	2200      	movs	r2, #0
     726:	601a      	str	r2, [r3, #0]
     728:	687b      	ldr	r3, [r7, #4]
     72a:	f383 8810 	msr	PRIMASK, r3
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     72e:	2105      	movs	r1, #5
     730:	4819      	ldr	r0, [pc, #100]	; (798 <main+0xc8>)
     732:	f7ff fe87 	bl	444 <am_devices_led_array_init>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     736:	f001 fa1b 	bl	1b70 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     73a:	f000 ff9b 	bl	1674 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     73e:	f000 ff7d 	bl	163c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Binary Counter Example\n");
     742:	4816      	ldr	r0, [pc, #88]	; (79c <main+0xcc>)
     744:	f000 ff5c 	bl	1600 <am_util_stdio_printf>

    //
    // TimerA0 init.
    //
    timerA0_init();
     748:	f7ff ff8c 	bl	664 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     74c:	2001      	movs	r0, #1
     74e:	f001 f9bd 	bl	1acc <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     752:	201d      	movs	r0, #29
     754:	f001 f9d8 	bl	1b08 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     758:	f001 f9fe 	bl	1b58 <am_hal_interrupt_master_enable>

    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     75c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     760:	2000      	movs	r0, #0
     762:	f001 f941 	bl	19e8 <am_hal_ctimer_start>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     766:	f000 ffc5 	bl	16f4 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     76a:	2001      	movs	r0, #1
     76c:	f001 fc0e 	bl	1f8c <am_hal_sysctrl_sleep>

        //
        // Set the LEDs.
        //
        am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS,
     770:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <main+0xd0>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	461a      	mov	r2, r3
     776:	2105      	movs	r1, #5
     778:	4807      	ldr	r0, [pc, #28]	; (798 <main+0xc8>)
     77a:	f7ff ff4d 	bl	618 <am_devices_led_array_out>
                         g_ui32TimerCount);
    }
     77e:	e7f4      	b.n	76a <main+0x9a>
     780:	000021b0 	.word	0x000021b0
     784:	00001761 	.word	0x00001761
     788:	40010060 	.word	0x40010060
     78c:	40010054 	.word	0x40010054
     790:	40010028 	.word	0x40010028
     794:	40010108 	.word	0x40010108
     798:	1000100c 	.word	0x1000100c
     79c:	00002184 	.word	0x00002184
     7a0:	10001084 	.word	0x10001084

000007a4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     7a4:	4811      	ldr	r0, [pc, #68]	; (7ec <zero_loop+0x12>)
     7a6:	4912      	ldr	r1, [pc, #72]	; (7f0 <zero_loop+0x16>)
     7a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     7aa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     7ae:	4811      	ldr	r0, [pc, #68]	; (7f4 <zero_loop+0x1a>)
     7b0:	6801      	ldr	r1, [r0, #0]
     7b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7b6:	6001      	str	r1, [r0, #0]
     7b8:	f3bf 8f4f 	dsb	sy
     7bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     7c0:	480d      	ldr	r0, [pc, #52]	; (7f8 <zero_loop+0x1e>)
     7c2:	490e      	ldr	r1, [pc, #56]	; (7fc <zero_loop+0x22>)
     7c4:	4a0e      	ldr	r2, [pc, #56]	; (800 <zero_loop+0x26>)

000007c6 <copy_loop>:
     7c6:	f850 3b04 	ldr.w	r3, [r0], #4
     7ca:	f841 3b04 	str.w	r3, [r1], #4
     7ce:	4291      	cmp	r1, r2
     7d0:	dbf9      	blt.n	7c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     7d2:	480c      	ldr	r0, [pc, #48]	; (804 <zero_loop+0x2a>)
     7d4:	490c      	ldr	r1, [pc, #48]	; (808 <zero_loop+0x2e>)
     7d6:	f04f 0200 	mov.w	r2, #0

000007da <zero_loop>:
     7da:	4288      	cmp	r0, r1
     7dc:	bfb8      	it	lt
     7de:	f840 2b04 	strlt.w	r2, [r0], #4
     7e2:	dbfa      	blt.n	7da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     7e4:	f7ff ff74 	bl	6d0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     7e8:	be00      	bkpt	0x0000
}
     7ea:	bf00      	nop
     7ec:	e000ed08 	.word	0xe000ed08
     7f0:	00000000 	.word	0x00000000
     7f4:	e000ed88 	.word	0xe000ed88
     7f8:	0000220c 	.word	0x0000220c
     7fc:	10001000 	.word	0x10001000
     800:	10001084 	.word	0x10001084
     804:	10001084 	.word	0x10001084
     808:	100011a0 	.word	0x100011a0

0000080c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     80c:	b480      	push	{r7}
     80e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     810:	e7fe      	b.n	810 <am_nmi_isr+0x4>
     812:	bf00      	nop

00000814 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     814:	b480      	push	{r7}
     816:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     818:	e7fe      	b.n	818 <am_adc_isr+0x4>
     81a:	bf00      	nop

0000081c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     81c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     81e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     820:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     822:	f000 f809 	bl	838 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     826:	bd01      	pop	{r0, pc}
}
     828:	bf00      	nop
     82a:	4618      	mov	r0, r3

0000082c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     82c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     82e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     830:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     832:	4770      	bx	lr
}
     834:	bf00      	nop
     836:	4618      	mov	r0, r3

00000838 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     838:	b580      	push	{r7, lr}
     83a:	b096      	sub	sp, #88	; 0x58
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     840:	f107 030c 	add.w	r3, r7, #12
     844:	2200      	movs	r2, #0
     846:	601a      	str	r2, [r3, #0]
     848:	605a      	str	r2, [r3, #4]
     84a:	609a      	str	r2, [r3, #8]
     84c:	60da      	str	r2, [r3, #12]
     84e:	611a      	str	r2, [r3, #16]
     850:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     852:	2300      	movs	r3, #0
     854:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     858:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     85a:	4b2e      	ldr	r3, [pc, #184]	; (914 <am_util_faultisr_collect_data+0xdc>)
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     862:	b2db      	uxtb	r3, r3
     864:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     86a:	0a1b      	lsrs	r3, r3, #8
     86c:	b2db      	uxtb	r3, r3
     86e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     874:	0c1b      	lsrs	r3, r3, #16
     876:	b29b      	uxth	r3, r3
     878:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     87c:	4b26      	ldr	r3, [pc, #152]	; (918 <am_util_faultisr_collect_data+0xe0>)
     87e:	681b      	ldr	r3, [r3, #0]
     880:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     882:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     886:	b2db      	uxtb	r3, r3
     888:	f003 0302 	and.w	r3, r3, #2
     88c:	2b00      	cmp	r3, #0
     88e:	d005      	beq.n	89c <am_util_faultisr_collect_data+0x64>
     890:	6879      	ldr	r1, [r7, #4]
     892:	2006      	movs	r0, #6
     894:	f7ff ffca 	bl	82c <getStackedReg>
     898:	4603      	mov	r3, r0
     89a:	e001      	b.n	8a0 <am_util_faultisr_collect_data+0x68>
     89c:	f04f 33ff 	mov.w	r3, #4294967295
     8a0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     8a2:	6879      	ldr	r1, [r7, #4]
     8a4:	2000      	movs	r0, #0
     8a6:	f7ff ffc1 	bl	82c <getStackedReg>
     8aa:	4603      	mov	r3, r0
     8ac:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     8ae:	6879      	ldr	r1, [r7, #4]
     8b0:	2001      	movs	r0, #1
     8b2:	f7ff ffbb 	bl	82c <getStackedReg>
     8b6:	4603      	mov	r3, r0
     8b8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     8ba:	6879      	ldr	r1, [r7, #4]
     8bc:	2002      	movs	r0, #2
     8be:	f7ff ffb5 	bl	82c <getStackedReg>
     8c2:	4603      	mov	r3, r0
     8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     8c6:	6879      	ldr	r1, [r7, #4]
     8c8:	2003      	movs	r0, #3
     8ca:	f7ff ffaf 	bl	82c <getStackedReg>
     8ce:	4603      	mov	r3, r0
     8d0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     8d2:	6879      	ldr	r1, [r7, #4]
     8d4:	2004      	movs	r0, #4
     8d6:	f7ff ffa9 	bl	82c <getStackedReg>
     8da:	4603      	mov	r3, r0
     8dc:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     8de:	6879      	ldr	r1, [r7, #4]
     8e0:	2005      	movs	r0, #5
     8e2:	f7ff ffa3 	bl	82c <getStackedReg>
     8e6:	4603      	mov	r3, r0
     8e8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     8ea:	6879      	ldr	r1, [r7, #4]
     8ec:	2006      	movs	r0, #6
     8ee:	f7ff ff9d 	bl	82c <getStackedReg>
     8f2:	4603      	mov	r3, r0
     8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     8f6:	6879      	ldr	r1, [r7, #4]
     8f8:	2007      	movs	r0, #7
     8fa:	f7ff ff97 	bl	82c <getStackedReg>
     8fe:	4603      	mov	r3, r0
     900:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     902:	f107 030c 	add.w	r3, r7, #12
     906:	4618      	mov	r0, r3
     908:	f001 f982 	bl	1c10 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     90c:	2300      	movs	r3, #0
     90e:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     910:	e7fe      	b.n	910 <am_util_faultisr_collect_data+0xd8>
     912:	bf00      	nop
     914:	e000ed28 	.word	0xe000ed28
     918:	e000ed38 	.word	0xe000ed38

0000091c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     91c:	b480      	push	{r7}
     91e:	b083      	sub	sp, #12
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     924:	4a04      	ldr	r2, [pc, #16]	; (938 <am_util_stdio_printf_init+0x1c>)
     926:	687b      	ldr	r3, [r7, #4]
     928:	6013      	str	r3, [r2, #0]
}
     92a:	bf00      	nop
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	f85d 7b04 	ldr.w	r7, [sp], #4
     934:	4770      	bx	lr
     936:	bf00      	nop
     938:	1000119c 	.word	0x1000119c

0000093c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     93c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     940:	b096      	sub	sp, #88	; 0x58
     942:	af00      	add	r7, sp, #0
     944:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     948:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     94c:	0025      	movs	r5, r4
     94e:	2600      	movs	r6, #0
     950:	ea55 0306 	orrs.w	r3, r5, r6
     954:	f000 809e 	beq.w	a94 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     958:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     95c:	0862      	lsrs	r2, r4, #1
     95e:	ea4f 0133 	mov.w	r1, r3, rrx
     962:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     966:	ea4f 0893 	mov.w	r8, r3, lsr #2
     96a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     96e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     972:	eb11 0308 	adds.w	r3, r1, r8
     976:	eb42 0409 	adc.w	r4, r2, r9
     97a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     97e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     982:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     986:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     98a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     98e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     992:	eb13 030a 	adds.w	r3, r3, sl
     996:	eb44 040b 	adc.w	r4, r4, fp
     99a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     99e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9a2:	0a1a      	lsrs	r2, r3, #8
     9a4:	62ba      	str	r2, [r7, #40]	; 0x28
     9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     9a8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     9ac:	62ba      	str	r2, [r7, #40]	; 0x28
     9ae:	0a23      	lsrs	r3, r4, #8
     9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
     9b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     9ba:	18c9      	adds	r1, r1, r3
     9bc:	eb42 0204 	adc.w	r2, r2, r4
     9c0:	460b      	mov	r3, r1
     9c2:	4614      	mov	r4, r2
     9c4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     9c8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9cc:	0c1a      	lsrs	r2, r3, #16
     9ce:	623a      	str	r2, [r7, #32]
     9d0:	6a3a      	ldr	r2, [r7, #32]
     9d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     9d6:	623a      	str	r2, [r7, #32]
     9d8:	0c23      	lsrs	r3, r4, #16
     9da:	627b      	str	r3, [r7, #36]	; 0x24
     9dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     9e4:	18c9      	adds	r1, r1, r3
     9e6:	eb42 0204 	adc.w	r2, r2, r4
     9ea:	460b      	mov	r3, r1
     9ec:	4614      	mov	r4, r2
     9ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     9f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9f6:	0023      	movs	r3, r4
     9f8:	603b      	str	r3, [r7, #0]
     9fa:	2300      	movs	r3, #0
     9fc:	607b      	str	r3, [r7, #4]
     9fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a02:	e897 0006 	ldmia.w	r7, {r1, r2}
     a06:	18c9      	adds	r1, r1, r3
     a08:	eb42 0204 	adc.w	r2, r2, r4
     a0c:	460b      	mov	r3, r1
     a0e:	4614      	mov	r4, r2
     a10:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     a14:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a18:	08da      	lsrs	r2, r3, #3
     a1a:	613a      	str	r2, [r7, #16]
     a1c:	693a      	ldr	r2, [r7, #16]
     a1e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     a22:	613a      	str	r2, [r7, #16]
     a24:	08e3      	lsrs	r3, r4, #3
     a26:	617b      	str	r3, [r7, #20]
     a28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     a2c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     a30:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a34:	18db      	adds	r3, r3, r3
     a36:	eb44 0404 	adc.w	r4, r4, r4
     a3a:	00a2      	lsls	r2, r4, #2
     a3c:	60fa      	str	r2, [r7, #12]
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     a44:	60fa      	str	r2, [r7, #12]
     a46:	009a      	lsls	r2, r3, #2
     a48:	60ba      	str	r2, [r7, #8]
     a4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     a4e:	18c9      	adds	r1, r1, r3
     a50:	eb42 0204 	adc.w	r2, r2, r4
     a54:	460b      	mov	r3, r1
     a56:	4614      	mov	r4, r2
     a58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     a5c:	1acb      	subs	r3, r1, r3
     a5e:	eb62 0404 	sbc.w	r4, r2, r4
     a62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     a66:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     a6a:	3306      	adds	r3, #6
     a6c:	f144 0400 	adc.w	r4, r4, #0
     a70:	091a      	lsrs	r2, r3, #4
     a72:	61ba      	str	r2, [r7, #24]
     a74:	69ba      	ldr	r2, [r7, #24]
     a76:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     a7a:	61ba      	str	r2, [r7, #24]
     a7c:	0923      	lsrs	r3, r4, #4
     a7e:	61fb      	str	r3, [r7, #28]
     a80:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     a88:	18c9      	adds	r1, r1, r3
     a8a:	eb42 0204 	adc.w	r2, r2, r4
     a8e:	460b      	mov	r3, r1
     a90:	4614      	mov	r4, r2
     a92:	e029      	b.n	ae8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a96:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a9a:	085a      	lsrs	r2, r3, #1
     a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a9e:	089b      	lsrs	r3, r3, #2
     aa0:	4413      	add	r3, r2
     aa2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     aa6:	091b      	lsrs	r3, r3, #4
     aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     aaa:	4413      	add	r3, r2
     aac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ab0:	0a1b      	lsrs	r3, r3, #8
     ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     ab4:	4413      	add	r3, r2
     ab6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     aba:	0c1b      	lsrs	r3, r3, #16
     abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     abe:	4413      	add	r3, r2
     ac0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ac4:	08db      	lsrs	r3, r3, #3
     ac6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     aca:	4613      	mov	r3, r2
     acc:	009b      	lsls	r3, r3, #2
     ace:	4413      	add	r3, r2
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	461a      	mov	r2, r3
     ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ad6:	1a9b      	subs	r3, r3, r2
     ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     adc:	3306      	adds	r3, #6
     ade:	091a      	lsrs	r2, r3, #4
     ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ae2:	4413      	add	r3, r2
     ae4:	f04f 0400 	mov.w	r4, #0
    }
}
     ae8:	4618      	mov	r0, r3
     aea:	4621      	mov	r1, r4
     aec:	3758      	adds	r7, #88	; 0x58
     aee:	46bd      	mov	sp, r7
     af0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     af4:	4770      	bx	lr
     af6:	bf00      	nop

00000af8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     af8:	b590      	push	{r4, r7, lr}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     b02:	683a      	ldr	r2, [r7, #0]
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	4313      	orrs	r3, r2
     b08:	2b00      	cmp	r3, #0
     b0a:	bf0c      	ite	eq
     b0c:	2301      	moveq	r3, #1
     b0e:	2300      	movne	r3, #0
     b10:	b2db      	uxtb	r3, r3
     b12:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     b14:	e008      	b.n	b28 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     b16:	e9d7 0100 	ldrd	r0, r1, [r7]
     b1a:	f7ff ff0f 	bl	93c <divu64_10>
     b1e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	3301      	adds	r3, #1
     b26:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     b28:	e897 0018 	ldmia.w	r7, {r3, r4}
     b2c:	4323      	orrs	r3, r4
     b2e:	d1f2      	bne.n	b16 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     b30:	68fb      	ldr	r3, [r7, #12]
}
     b32:	4618      	mov	r0, r3
     b34:	3714      	adds	r7, #20
     b36:	46bd      	mov	sp, r7
     b38:	bd90      	pop	{r4, r7, pc}
     b3a:	bf00      	nop

00000b3c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     b3c:	b590      	push	{r4, r7, lr}
     b3e:	b083      	sub	sp, #12
     b40:	af00      	add	r7, sp, #0
     b42:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     b46:	e897 0018 	ldmia.w	r7, {r3, r4}
     b4a:	2b00      	cmp	r3, #0
     b4c:	f174 0300 	sbcs.w	r3, r4, #0
     b50:	da06      	bge.n	b60 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     b52:	e897 0018 	ldmia.w	r7, {r3, r4}
     b56:	425b      	negs	r3, r3
     b58:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     b5c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     b60:	e897 0018 	ldmia.w	r7, {r3, r4}
     b64:	4618      	mov	r0, r3
     b66:	4621      	mov	r1, r4
     b68:	f7ff ffc6 	bl	af8 <ndigits_in_u64>
     b6c:	4603      	mov	r3, r0
}
     b6e:	4618      	mov	r0, r3
     b70:	370c      	adds	r7, #12
     b72:	46bd      	mov	sp, r7
     b74:	bd90      	pop	{r4, r7, pc}
     b76:	bf00      	nop

00000b78 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     b78:	b490      	push	{r4, r7}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     b82:	6839      	ldr	r1, [r7, #0]
     b84:	687a      	ldr	r2, [r7, #4]
     b86:	430a      	orrs	r2, r1
     b88:	2a00      	cmp	r2, #0
     b8a:	bf0c      	ite	eq
     b8c:	2201      	moveq	r2, #1
     b8e:	2200      	movne	r2, #0
     b90:	b2d2      	uxtb	r2, r2
     b92:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     b94:	e00a      	b.n	bac <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     b96:	e897 0006 	ldmia.w	r7, {r1, r2}
     b9a:	090b      	lsrs	r3, r1, #4
     b9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     ba0:	0914      	lsrs	r4, r2, #4
     ba2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     ba6:	68fa      	ldr	r2, [r7, #12]
     ba8:	3201      	adds	r2, #1
     baa:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     bac:	e897 0006 	ldmia.w	r7, {r1, r2}
     bb0:	430a      	orrs	r2, r1
     bb2:	d1f0      	bne.n	b96 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     bb4:	68fb      	ldr	r3, [r7, #12]
}
     bb6:	4618      	mov	r0, r3
     bb8:	3710      	adds	r7, #16
     bba:	46bd      	mov	sp, r7
     bbc:	bc90      	pop	{r4, r7}
     bbe:	4770      	bx	lr

00000bc0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     bc0:	b480      	push	{r7}
     bc2:	b087      	sub	sp, #28
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
     bc8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     bca:	2300      	movs	r3, #0
     bcc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     bce:	2300      	movs	r3, #0
     bd0:	613b      	str	r3, [r7, #16]
     bd2:	2300      	movs	r3, #0
     bd4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	781b      	ldrb	r3, [r3, #0]
     bda:	2b2d      	cmp	r3, #45	; 0x2d
     bdc:	d11b      	bne.n	c16 <decstr_to_int+0x56>
    {
        bNeg = true;
     bde:	2301      	movs	r3, #1
     be0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	3301      	adds	r3, #1
     be6:	607b      	str	r3, [r7, #4]
        uCnt++;
     be8:	68fb      	ldr	r3, [r7, #12]
     bea:	3301      	adds	r3, #1
     bec:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     bee:	e012      	b.n	c16 <decstr_to_int+0x56>
    {
        ++uCnt;
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	3301      	adds	r3, #1
     bf4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     bf6:	693a      	ldr	r2, [r7, #16]
     bf8:	4613      	mov	r3, r2
     bfa:	009b      	lsls	r3, r3, #2
     bfc:	4413      	add	r3, r2
     bfe:	005b      	lsls	r3, r3, #1
     c00:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	461a      	mov	r2, r3
     c08:	693b      	ldr	r3, [r7, #16]
     c0a:	4413      	add	r3, r2
     c0c:	3b30      	subs	r3, #48	; 0x30
     c0e:	613b      	str	r3, [r7, #16]
        pcStr++;
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	3301      	adds	r3, #1
     c14:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	2b2f      	cmp	r3, #47	; 0x2f
     c1c:	d903      	bls.n	c26 <decstr_to_int+0x66>
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b39      	cmp	r3, #57	; 0x39
     c24:	d9e4      	bls.n	bf0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     c26:	683b      	ldr	r3, [r7, #0]
     c28:	2b00      	cmp	r3, #0
     c2a:	d002      	beq.n	c32 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     c2c:	683b      	ldr	r3, [r7, #0]
     c2e:	68fa      	ldr	r2, [r7, #12]
     c30:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     c32:	7dfb      	ldrb	r3, [r7, #23]
     c34:	2b00      	cmp	r3, #0
     c36:	d002      	beq.n	c3e <decstr_to_int+0x7e>
     c38:	693b      	ldr	r3, [r7, #16]
     c3a:	425b      	negs	r3, r3
     c3c:	e000      	b.n	c40 <decstr_to_int+0x80>
     c3e:	693b      	ldr	r3, [r7, #16]
}
     c40:	4618      	mov	r0, r3
     c42:	371c      	adds	r7, #28
     c44:	46bd      	mov	sp, r7
     c46:	f85d 7b04 	ldr.w	r7, [sp], #4
     c4a:	4770      	bx	lr

00000c4c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     c4c:	b590      	push	{r4, r7, lr}
     c4e:	b091      	sub	sp, #68	; 0x44
     c50:	af00      	add	r7, sp, #0
     c52:	e9c7 0102 	strd	r0, r1, [r7, #8]
     c56:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     c58:	2300      	movs	r3, #0
     c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
     c5c:	2300      	movs	r3, #0
     c5e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     c64:	f7ff fe6a 	bl	93c <divu64_10>
     c68:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     c6c:	68b9      	ldr	r1, [r7, #8]
     c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c70:	4613      	mov	r3, r2
     c72:	009b      	lsls	r3, r3, #2
     c74:	4413      	add	r3, r2
     c76:	005b      	lsls	r3, r3, #1
     c78:	1acb      	subs	r3, r1, r3
     c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c7e:	1c5a      	adds	r2, r3, #1
     c80:	63fa      	str	r2, [r7, #60]	; 0x3c
     c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c84:	b2d2      	uxtb	r2, r2
     c86:	3230      	adds	r2, #48	; 0x30
     c88:	b2d2      	uxtb	r2, r2
     c8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     c8e:	440b      	add	r3, r1
     c90:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     c94:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c98:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     c9c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     ca0:	4323      	orrs	r3, r4
     ca2:	d1dd      	bne.n	c60 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ca6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	2b00      	cmp	r3, #0
     cac:	d011      	beq.n	cd2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     cae:	e008      	b.n	cc2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	1c5a      	adds	r2, r3, #1
     cb4:	607a      	str	r2, [r7, #4]
     cb6:	f107 0110 	add.w	r1, r7, #16
     cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     cbc:	440a      	add	r2, r1
     cbe:	7812      	ldrb	r2, [r2, #0]
     cc0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cc4:	1e5a      	subs	r2, r3, #1
     cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
     cc8:	2b00      	cmp	r3, #0
     cca:	d1f1      	bne.n	cb0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	2200      	movs	r2, #0
     cd0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     cd4:	4618      	mov	r0, r3
     cd6:	3744      	adds	r7, #68	; 0x44
     cd8:	46bd      	mov	sp, r7
     cda:	bd90      	pop	{r4, r7, pc}

00000cdc <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     cdc:	b4b0      	push	{r4, r5, r7}
     cde:	b08d      	sub	sp, #52	; 0x34
     ce0:	af00      	add	r7, sp, #0
     ce2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     ce6:	607a      	str	r2, [r7, #4]
     ce8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     cea:	2300      	movs	r3, #0
     cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     cee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     cf2:	4313      	orrs	r3, r2
     cf4:	d131      	bne.n	d5a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cf8:	1c5a      	adds	r2, r3, #1
     cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
     cfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     d00:	4413      	add	r3, r2
     d02:	2230      	movs	r2, #48	; 0x30
     d04:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     d08:	e027      	b.n	d5a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     d0a:	7a3b      	ldrb	r3, [r7, #8]
     d0c:	f003 030f 	and.w	r3, r3, #15
     d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d18:	2b09      	cmp	r3, #9
     d1a:	d90a      	bls.n	d32 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     d1c:	78fb      	ldrb	r3, [r7, #3]
     d1e:	2b00      	cmp	r3, #0
     d20:	d001      	beq.n	d26 <uint64_to_hexstr+0x4a>
     d22:	2227      	movs	r2, #39	; 0x27
     d24:	e000      	b.n	d28 <uint64_to_hexstr+0x4c>
     d26:	2207      	movs	r2, #7
     d28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d2c:	4413      	add	r3, r2
     d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d34:	1c5a      	adds	r2, r3, #1
     d36:	62fa      	str	r2, [r7, #44]	; 0x2c
     d38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     d3c:	3230      	adds	r2, #48	; 0x30
     d3e:	b2d2      	uxtb	r2, r2
     d40:	f107 0130 	add.w	r1, r7, #48	; 0x30
     d44:	440b      	add	r3, r1
     d46:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d4e:	0914      	lsrs	r4, r2, #4
     d50:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     d54:	091d      	lsrs	r5, r3, #4
     d56:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d5e:	4313      	orrs	r3, r2
     d60:	d1d3      	bne.n	d0a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d64:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2b00      	cmp	r3, #0
     d6a:	d011      	beq.n	d90 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     d6c:	e008      	b.n	d80 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	1c5a      	adds	r2, r3, #1
     d72:	607a      	str	r2, [r7, #4]
     d74:	f107 0110 	add.w	r1, r7, #16
     d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d7a:	440a      	add	r2, r1
     d7c:	7812      	ldrb	r2, [r2, #0]
     d7e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d82:	1e5a      	subs	r2, r3, #1
     d84:	62fa      	str	r2, [r7, #44]	; 0x2c
     d86:	2b00      	cmp	r3, #0
     d88:	d1f1      	bne.n	d6e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     d92:	4618      	mov	r0, r3
     d94:	3734      	adds	r7, #52	; 0x34
     d96:	46bd      	mov	sp, r7
     d98:	bcb0      	pop	{r4, r5, r7}
     d9a:	4770      	bx	lr

00000d9c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     d9c:	b480      	push	{r7}
     d9e:	b085      	sub	sp, #20
     da0:	af00      	add	r7, sp, #0
     da2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     da4:	2300      	movs	r3, #0
     da6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	2b00      	cmp	r3, #0
     dac:	d104      	bne.n	db8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	e009      	b.n	dc6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     db2:	68fb      	ldr	r3, [r7, #12]
     db4:	3301      	adds	r3, #1
     db6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	1c5a      	adds	r2, r3, #1
     dbc:	607a      	str	r2, [r7, #4]
     dbe:	781b      	ldrb	r3, [r3, #0]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d1f6      	bne.n	db2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     dc4:	68fb      	ldr	r3, [r7, #12]
}
     dc6:	4618      	mov	r0, r3
     dc8:	3714      	adds	r7, #20
     dca:	46bd      	mov	sp, r7
     dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd0:	4770      	bx	lr
     dd2:	bf00      	nop

00000dd4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     dd4:	b480      	push	{r7}
     dd6:	b087      	sub	sp, #28
     dd8:	af00      	add	r7, sp, #0
     dda:	60f8      	str	r0, [r7, #12]
     ddc:	460b      	mov	r3, r1
     dde:	607a      	str	r2, [r7, #4]
     de0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     de2:	2300      	movs	r3, #0
     de4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2b00      	cmp	r3, #0
     dea:	dc0c      	bgt.n	e06 <padbuffer+0x32>
    {
        return i32Cnt;
     dec:	697b      	ldr	r3, [r7, #20]
     dee:	e010      	b.n	e12 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	2b00      	cmp	r3, #0
     df4:	d004      	beq.n	e00 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     df6:	68fb      	ldr	r3, [r7, #12]
     df8:	1c5a      	adds	r2, r3, #1
     dfa:	60fa      	str	r2, [r7, #12]
     dfc:	7afa      	ldrb	r2, [r7, #11]
     dfe:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     e00:	697b      	ldr	r3, [r7, #20]
     e02:	3301      	adds	r3, #1
     e04:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	1e5a      	subs	r2, r3, #1
     e0a:	607a      	str	r2, [r7, #4]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1ef      	bne.n	df0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     e10:	697b      	ldr	r3, [r7, #20]
}
     e12:	4618      	mov	r0, r3
     e14:	371c      	adds	r7, #28
     e16:	46bd      	mov	sp, r7
     e18:	f85d 7b04 	ldr.w	r7, [sp], #4
     e1c:	4770      	bx	lr
     e1e:	bf00      	nop

00000e20 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     e20:	b590      	push	{r4, r7, lr}
     e22:	b08f      	sub	sp, #60	; 0x3c
     e24:	af00      	add	r7, sp, #0
     e26:	60f8      	str	r0, [r7, #12]
     e28:	60b9      	str	r1, [r7, #8]
     e2a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     e2c:	68bb      	ldr	r3, [r7, #8]
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e34:	2b03      	cmp	r3, #3
     e36:	dc02      	bgt.n	e3e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     e38:	f06f 0302 	mvn.w	r3, #2
     e3c:	e0d4      	b.n	fe8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     e3e:	edd7 7a03 	vldr	s15, [r7, #12]
     e42:	eef5 7a40 	vcmp.f32	s15, #0.0
     e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e4a:	d104      	bne.n	e56 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     e4c:	68bb      	ldr	r3, [r7, #8]
     e4e:	4a68      	ldr	r2, [pc, #416]	; (ff0 <ftoa+0x1d0>)
     e50:	601a      	str	r2, [r3, #0]
        return 3;
     e52:	2303      	movs	r3, #3
     e54:	e0c8      	b.n	fe8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     e56:	68bb      	ldr	r3, [r7, #8]
     e58:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     e5a:	68fb      	ldr	r3, [r7, #12]
     e5c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     e5e:	697b      	ldr	r3, [r7, #20]
     e60:	15db      	asrs	r3, r3, #23
     e62:	b2db      	uxtb	r3, r3
     e64:	3b7f      	subs	r3, #127	; 0x7f
     e66:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     e68:	697b      	ldr	r3, [r7, #20]
     e6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     e72:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     e74:	2300      	movs	r3, #0
     e76:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     e78:	2300      	movs	r3, #0
     e7a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     e7c:	6a3b      	ldr	r3, [r7, #32]
     e7e:	2b1e      	cmp	r3, #30
     e80:	dd02      	ble.n	e88 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     e82:	f06f 0301 	mvn.w	r3, #1
     e86:	e0af      	b.n	fe8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     e88:	6a3b      	ldr	r3, [r7, #32]
     e8a:	f113 0f17 	cmn.w	r3, #23
     e8e:	da02      	bge.n	e96 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     e90:	f04f 33ff 	mov.w	r3, #4294967295
     e94:	e0a8      	b.n	fe8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     e96:	6a3b      	ldr	r3, [r7, #32]
     e98:	2b16      	cmp	r3, #22
     e9a:	dd06      	ble.n	eaa <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     e9c:	6a3b      	ldr	r3, [r7, #32]
     e9e:	3b17      	subs	r3, #23
     ea0:	69fa      	ldr	r2, [r7, #28]
     ea2:	fa02 f303 	lsl.w	r3, r2, r3
     ea6:	637b      	str	r3, [r7, #52]	; 0x34
     ea8:	e01a      	b.n	ee0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     eaa:	6a3b      	ldr	r3, [r7, #32]
     eac:	2b00      	cmp	r3, #0
     eae:	db0f      	blt.n	ed0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     eb0:	6a3b      	ldr	r3, [r7, #32]
     eb2:	f1c3 0317 	rsb	r3, r3, #23
     eb6:	69fa      	ldr	r2, [r7, #28]
     eb8:	fa42 f303 	asr.w	r3, r2, r3
     ebc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     ebe:	6a3b      	ldr	r3, [r7, #32]
     ec0:	3301      	adds	r3, #1
     ec2:	69fa      	ldr	r2, [r7, #28]
     ec4:	fa02 f303 	lsl.w	r3, r2, r3
     ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ecc:	633b      	str	r3, [r7, #48]	; 0x30
     ece:	e007      	b.n	ee0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     ed0:	69fb      	ldr	r3, [r7, #28]
     ed2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ed6:	6a3b      	ldr	r3, [r7, #32]
     ed8:	43db      	mvns	r3, r3
     eda:	fa42 f303 	asr.w	r3, r2, r3
     ede:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     ee0:	697b      	ldr	r3, [r7, #20]
     ee2:	2b00      	cmp	r3, #0
     ee4:	da04      	bge.n	ef0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     ee6:	68bb      	ldr	r3, [r7, #8]
     ee8:	1c5a      	adds	r2, r3, #1
     eea:	60ba      	str	r2, [r7, #8]
     eec:	222d      	movs	r2, #45	; 0x2d
     eee:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ef2:	2b00      	cmp	r3, #0
     ef4:	d105      	bne.n	f02 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     ef6:	68bb      	ldr	r3, [r7, #8]
     ef8:	1c5a      	adds	r2, r3, #1
     efa:	60ba      	str	r2, [r7, #8]
     efc:	2230      	movs	r2, #48	; 0x30
     efe:	701a      	strb	r2, [r3, #0]
     f00:	e021      	b.n	f46 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f04:	2b00      	cmp	r3, #0
     f06:	dd08      	ble.n	f1a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f0e:	68ba      	ldr	r2, [r7, #8]
     f10:	4618      	mov	r0, r3
     f12:	4621      	mov	r1, r4
     f14:	f7ff fe9a 	bl	c4c <uint64_to_str>
     f18:	e011      	b.n	f3e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     f1a:	68bb      	ldr	r3, [r7, #8]
     f1c:	1c5a      	adds	r2, r3, #1
     f1e:	60ba      	str	r2, [r7, #8]
     f20:	222d      	movs	r2, #45	; 0x2d
     f22:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f26:	425b      	negs	r3, r3
     f28:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f2c:	68ba      	ldr	r2, [r7, #8]
     f2e:	4618      	mov	r0, r3
     f30:	4621      	mov	r1, r4
     f32:	f7ff fe8b 	bl	c4c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     f36:	e002      	b.n	f3e <ftoa+0x11e>
        {
            pcBuf++;
     f38:	68bb      	ldr	r3, [r7, #8]
     f3a:	3301      	adds	r3, #1
     f3c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     f3e:	68bb      	ldr	r3, [r7, #8]
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	2b00      	cmp	r3, #0
     f44:	d1f8      	bne.n	f38 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     f46:	68bb      	ldr	r3, [r7, #8]
     f48:	1c5a      	adds	r2, r3, #1
     f4a:	60ba      	str	r2, [r7, #8]
     f4c:	222e      	movs	r2, #46	; 0x2e
     f4e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f52:	2b00      	cmp	r3, #0
     f54:	d105      	bne.n	f62 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     f56:	68bb      	ldr	r3, [r7, #8]
     f58:	1c5a      	adds	r2, r3, #1
     f5a:	60ba      	str	r2, [r7, #8]
     f5c:	2230      	movs	r2, #48	; 0x30
     f5e:	701a      	strb	r2, [r3, #0]
     f60:	e03c      	b.n	fdc <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     f62:	68ba      	ldr	r2, [r7, #8]
     f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f66:	1ad3      	subs	r3, r2, r3
     f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
     f6a:	1ad3      	subs	r3, r2, r3
     f6c:	3b01      	subs	r3, #1
     f6e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     f70:	69ba      	ldr	r2, [r7, #24]
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	4293      	cmp	r3, r2
     f76:	bfa8      	it	ge
     f78:	4613      	movge	r3, r2
     f7a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     f7c:	2300      	movs	r3, #0
     f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
     f80:	e015      	b.n	fae <ftoa+0x18e>
        {
            i32FracPart *= 10;
     f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f84:	4613      	mov	r3, r2
     f86:	009b      	lsls	r3, r3, #2
     f88:	4413      	add	r3, r2
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     f8e:	68bb      	ldr	r3, [r7, #8]
     f90:	1c5a      	adds	r2, r3, #1
     f92:	60ba      	str	r2, [r7, #8]
     f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f96:	1612      	asrs	r2, r2, #24
     f98:	b2d2      	uxtb	r2, r2
     f9a:	3230      	adds	r2, #48	; 0x30
     f9c:	b2d2      	uxtb	r2, r2
     f9e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     fa6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     faa:	3301      	adds	r3, #1
     fac:	62fb      	str	r3, [r7, #44]	; 0x2c
     fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     fb0:	69bb      	ldr	r3, [r7, #24]
     fb2:	429a      	cmp	r2, r3
     fb4:	dbe5      	blt.n	f82 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	3b01      	subs	r3, #1
     fba:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     fbc:	e002      	b.n	fc4 <ftoa+0x1a4>
        {
            --pcBuf;
     fbe:	68bb      	ldr	r3, [r7, #8]
     fc0:	3b01      	subs	r3, #1
     fc2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     fc4:	68bb      	ldr	r3, [r7, #8]
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	2b30      	cmp	r3, #48	; 0x30
     fca:	d104      	bne.n	fd6 <ftoa+0x1b6>
     fcc:	68bb      	ldr	r3, [r7, #8]
     fce:	3b01      	subs	r3, #1
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	2b2e      	cmp	r3, #46	; 0x2e
     fd4:	d1f3      	bne.n	fbe <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     fd6:	68bb      	ldr	r3, [r7, #8]
     fd8:	3301      	adds	r3, #1
     fda:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     fdc:	68bb      	ldr	r3, [r7, #8]
     fde:	2200      	movs	r2, #0
     fe0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     fe2:	68ba      	ldr	r2, [r7, #8]
     fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fe6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     fe8:	4618      	mov	r0, r3
     fea:	373c      	adds	r7, #60	; 0x3c
     fec:	46bd      	mov	sp, r7
     fee:	bd90      	pop	{r4, r7, pc}
     ff0:	00302e30 	.word	0x00302e30

00000ff4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ff4:	b590      	push	{r4, r7, lr}
     ff6:	b095      	sub	sp, #84	; 0x54
     ff8:	af00      	add	r7, sp, #0
     ffa:	60f8      	str	r0, [r7, #12]
     ffc:	60b9      	str	r1, [r7, #8]
     ffe:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    1000:	2300      	movs	r3, #0
    1002:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1004:	2300      	movs	r3, #0
    1006:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1008:	e2e3      	b.n	15d2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    100a:	2306      	movs	r3, #6
    100c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    100e:	68bb      	ldr	r3, [r7, #8]
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	2b25      	cmp	r3, #37	; 0x25
    1014:	d01f      	beq.n	1056 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	2b00      	cmp	r3, #0
    101a:	d015      	beq.n	1048 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    101c:	68bb      	ldr	r3, [r7, #8]
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2b0a      	cmp	r3, #10
    1022:	d10b      	bne.n	103c <am_util_stdio_vsprintf+0x48>
    1024:	4bb1      	ldr	r3, [pc, #708]	; (12ec <am_util_stdio_vsprintf+0x2f8>)
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	2b00      	cmp	r3, #0
    102a:	d007      	beq.n	103c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    102c:	68fb      	ldr	r3, [r7, #12]
    102e:	1c5a      	adds	r2, r3, #1
    1030:	60fa      	str	r2, [r7, #12]
    1032:	220d      	movs	r2, #13
    1034:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1038:	3301      	adds	r3, #1
    103a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	1c5a      	adds	r2, r3, #1
    1040:	60fa      	str	r2, [r7, #12]
    1042:	68ba      	ldr	r2, [r7, #8]
    1044:	7812      	ldrb	r2, [r2, #0]
    1046:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1048:	68bb      	ldr	r3, [r7, #8]
    104a:	3301      	adds	r3, #1
    104c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    104e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1050:	3301      	adds	r3, #1
    1052:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1054:	e2bd      	b.n	15d2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	3301      	adds	r3, #1
    105a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    105c:	2300      	movs	r3, #0
    105e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1066:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    106a:	2320      	movs	r3, #32
    106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1070:	68bb      	ldr	r3, [r7, #8]
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	2b30      	cmp	r3, #48	; 0x30
    1076:	d105      	bne.n	1084 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1078:	2330      	movs	r3, #48	; 0x30
    107a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    107e:	68bb      	ldr	r3, [r7, #8]
    1080:	3301      	adds	r3, #1
    1082:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1084:	f107 0310 	add.w	r3, r7, #16
    1088:	4619      	mov	r1, r3
    108a:	68b8      	ldr	r0, [r7, #8]
    108c:	f7ff fd98 	bl	bc0 <decstr_to_int>
    1090:	4603      	mov	r3, r0
    1092:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1094:	693b      	ldr	r3, [r7, #16]
    1096:	68ba      	ldr	r2, [r7, #8]
    1098:	4413      	add	r3, r2
    109a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    109c:	68bb      	ldr	r3, [r7, #8]
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	2b73      	cmp	r3, #115	; 0x73
    10a2:	d005      	beq.n	10b0 <am_util_stdio_vsprintf+0xbc>
    10a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a6:	2b00      	cmp	r3, #0
    10a8:	da02      	bge.n	10b0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    10aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ac:	425b      	negs	r3, r3
    10ae:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    10b0:	68bb      	ldr	r3, [r7, #8]
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	2b2e      	cmp	r3, #46	; 0x2e
    10b6:	d10e      	bne.n	10d6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    10b8:	68bb      	ldr	r3, [r7, #8]
    10ba:	3301      	adds	r3, #1
    10bc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    10be:	f107 0310 	add.w	r3, r7, #16
    10c2:	4619      	mov	r1, r3
    10c4:	68b8      	ldr	r0, [r7, #8]
    10c6:	f7ff fd7b 	bl	bc0 <decstr_to_int>
    10ca:	4603      	mov	r3, r0
    10cc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    10ce:	693b      	ldr	r3, [r7, #16]
    10d0:	68ba      	ldr	r2, [r7, #8]
    10d2:	4413      	add	r3, r2
    10d4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    10d6:	68bb      	ldr	r3, [r7, #8]
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	2b6c      	cmp	r3, #108	; 0x6c
    10dc:	d10c      	bne.n	10f8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    10de:	68bb      	ldr	r3, [r7, #8]
    10e0:	3301      	adds	r3, #1
    10e2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    10e4:	68bb      	ldr	r3, [r7, #8]
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	2b6c      	cmp	r3, #108	; 0x6c
    10ea:	d105      	bne.n	10f8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	3301      	adds	r3, #1
    10f0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    10f2:	2301      	movs	r3, #1
    10f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	3b46      	subs	r3, #70	; 0x46
    10fe:	2b32      	cmp	r3, #50	; 0x32
    1100:	f200 8254 	bhi.w	15ac <am_util_stdio_vsprintf+0x5b8>
    1104:	a201      	add	r2, pc, #4	; (adr r2, 110c <am_util_stdio_vsprintf+0x118>)
    1106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    110a:	bf00      	nop
    110c:	00001537 	.word	0x00001537
    1110:	000015ad 	.word	0x000015ad
    1114:	000015ad 	.word	0x000015ad
    1118:	000015ad 	.word	0x000015ad
    111c:	000015ad 	.word	0x000015ad
    1120:	000015ad 	.word	0x000015ad
    1124:	000015ad 	.word	0x000015ad
    1128:	000015ad 	.word	0x000015ad
    112c:	000015ad 	.word	0x000015ad
    1130:	000015ad 	.word	0x000015ad
    1134:	000015ad 	.word	0x000015ad
    1138:	000015ad 	.word	0x000015ad
    113c:	000015ad 	.word	0x000015ad
    1140:	000015ad 	.word	0x000015ad
    1144:	000015ad 	.word	0x000015ad
    1148:	000015ad 	.word	0x000015ad
    114c:	000015ad 	.word	0x000015ad
    1150:	000015ad 	.word	0x000015ad
    1154:	000012d3 	.word	0x000012d3
    1158:	000015ad 	.word	0x000015ad
    115c:	000015ad 	.word	0x000015ad
    1160:	000015ad 	.word	0x000015ad
    1164:	000015ad 	.word	0x000015ad
    1168:	000015ad 	.word	0x000015ad
    116c:	000015ad 	.word	0x000015ad
    1170:	000015ad 	.word	0x000015ad
    1174:	000015ad 	.word	0x000015ad
    1178:	000015ad 	.word	0x000015ad
    117c:	000015ad 	.word	0x000015ad
    1180:	000011d9 	.word	0x000011d9
    1184:	000013ff 	.word	0x000013ff
    1188:	000015ad 	.word	0x000015ad
    118c:	00001537 	.word	0x00001537
    1190:	000015ad 	.word	0x000015ad
    1194:	000015ad 	.word	0x000015ad
    1198:	000013ff 	.word	0x000013ff
    119c:	000015ad 	.word	0x000015ad
    11a0:	000015ad 	.word	0x000015ad
    11a4:	000015ad 	.word	0x000015ad
    11a8:	000015ad 	.word	0x000015ad
    11ac:	000015ad 	.word	0x000015ad
    11b0:	000015ad 	.word	0x000015ad
    11b4:	000015ad 	.word	0x000015ad
    11b8:	000015ad 	.word	0x000015ad
    11bc:	000015ad 	.word	0x000015ad
    11c0:	000011ff 	.word	0x000011ff
    11c4:	000015ad 	.word	0x000015ad
    11c8:	0000136d 	.word	0x0000136d
    11cc:	000015ad 	.word	0x000015ad
    11d0:	000015ad 	.word	0x000015ad
    11d4:	000012cd 	.word	0x000012cd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	1d1a      	adds	r2, r3, #4
    11dc:	607a      	str	r2, [r7, #4]
    11de:	681b      	ldr	r3, [r3, #0]
    11e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d005      	beq.n	11f6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	1c5a      	adds	r2, r3, #1
    11ee:	60fa      	str	r2, [r7, #12]
    11f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    11f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f8:	3301      	adds	r3, #1
    11fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11fc:	e1e6      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	1d1a      	adds	r2, r3, #4
    1202:	607a      	str	r2, [r7, #4]
    1204:	681b      	ldr	r3, [r3, #0]
    1206:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1208:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    120a:	f7ff fdc7 	bl	d9c <simple_strlen>
    120e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1212:	2b00      	cmp	r3, #0
    1214:	dd2e      	ble.n	1274 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    121a:	429a      	cmp	r2, r3
    121c:	d22a      	bcs.n	1274 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    121e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1222:	1ad3      	subs	r3, r2, r3
    1224:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    122c:	4619      	mov	r1, r3
    122e:	68f8      	ldr	r0, [r7, #12]
    1230:	f7ff fdd0 	bl	dd4 <padbuffer>
    1234:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1236:	68fb      	ldr	r3, [r7, #12]
    1238:	2b00      	cmp	r3, #0
    123a:	d001      	beq.n	1240 <am_util_stdio_vsprintf+0x24c>
    123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    123e:	e000      	b.n	1242 <am_util_stdio_vsprintf+0x24e>
    1240:	2300      	movs	r3, #0
    1242:	68fa      	ldr	r2, [r7, #12]
    1244:	4413      	add	r3, r2
    1246:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    124a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    124c:	4413      	add	r3, r2
    124e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1250:	2300      	movs	r3, #0
    1252:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1254:	e00e      	b.n	1274 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	2b00      	cmp	r3, #0
    125a:	d005      	beq.n	1268 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    125c:	68fb      	ldr	r3, [r7, #12]
    125e:	1c5a      	adds	r2, r3, #1
    1260:	60fa      	str	r2, [r7, #12]
    1262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1264:	7812      	ldrb	r2, [r2, #0]
    1266:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    126a:	3301      	adds	r3, #1
    126c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    126e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1270:	3301      	adds	r3, #1
    1272:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	2b00      	cmp	r3, #0
    127a:	d1ec      	bne.n	1256 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    127e:	2b00      	cmp	r3, #0
    1280:	f000 81a1 	beq.w	15c6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1286:	425b      	negs	r3, r3
    1288:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    128a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    128e:	429a      	cmp	r2, r3
    1290:	f080 8199 	bcs.w	15c6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1294:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1298:	1ad3      	subs	r3, r2, r3
    129a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    129c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12a2:	4619      	mov	r1, r3
    12a4:	68f8      	ldr	r0, [r7, #12]
    12a6:	f7ff fd95 	bl	dd4 <padbuffer>
    12aa:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d001      	beq.n	12b6 <am_util_stdio_vsprintf+0x2c2>
    12b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12b4:	e000      	b.n	12b8 <am_util_stdio_vsprintf+0x2c4>
    12b6:	2300      	movs	r3, #0
    12b8:	68fa      	ldr	r2, [r7, #12]
    12ba:	4413      	add	r3, r2
    12bc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    12be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12c2:	4413      	add	r3, r2
    12c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    12c6:	2300      	movs	r3, #0
    12c8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    12ca:	e17c      	b.n	15c6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    12cc:	2301      	movs	r3, #1
    12ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12d6:	2b00      	cmp	r3, #0
    12d8:	d00a      	beq.n	12f0 <am_util_stdio_vsprintf+0x2fc>
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	3307      	adds	r3, #7
    12de:	f023 0307 	bic.w	r3, r3, #7
    12e2:	f103 0208 	add.w	r2, r3, #8
    12e6:	607a      	str	r2, [r7, #4]
    12e8:	cb18      	ldmia	r3, {r3, r4}
    12ea:	e007      	b.n	12fc <am_util_stdio_vsprintf+0x308>
    12ec:	10001188 	.word	0x10001188
                                      va_arg(pArgs, uint32_t);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	1d1a      	adds	r2, r3, #4
    12f4:	607a      	str	r2, [r7, #4]
    12f6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12f8:	f04f 0400 	mov.w	r4, #0
    12fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1302:	2b00      	cmp	r3, #0
    1304:	d01e      	beq.n	1344 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1306:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    130a:	f7ff fc35 	bl	b78 <ndigits_in_hex>
    130e:	4602      	mov	r2, r0
    1310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1312:	1a9b      	subs	r3, r3, r2
    1314:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    131a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    131c:	4619      	mov	r1, r3
    131e:	68f8      	ldr	r0, [r7, #12]
    1320:	f7ff fd58 	bl	dd4 <padbuffer>
    1324:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	2b00      	cmp	r3, #0
    132a:	d001      	beq.n	1330 <am_util_stdio_vsprintf+0x33c>
    132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    132e:	e000      	b.n	1332 <am_util_stdio_vsprintf+0x33e>
    1330:	2300      	movs	r3, #0
    1332:	68fa      	ldr	r2, [r7, #12]
    1334:	4413      	add	r3, r2
    1336:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    133a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    133c:	4413      	add	r3, r2
    133e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1340:	2300      	movs	r3, #0
    1342:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1344:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1348:	68fa      	ldr	r2, [r7, #12]
    134a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    134e:	f7ff fcc5 	bl	cdc <uint64_to_hexstr>
    1352:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1354:	68fb      	ldr	r3, [r7, #12]
    1356:	2b00      	cmp	r3, #0
    1358:	d003      	beq.n	1362 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    135c:	68fa      	ldr	r2, [r7, #12]
    135e:	4413      	add	r3, r2
    1360:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1366:	4413      	add	r3, r2
    1368:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    136a:	e12f      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    136c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1370:	2b00      	cmp	r3, #0
    1372:	d008      	beq.n	1386 <am_util_stdio_vsprintf+0x392>
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	3307      	adds	r3, #7
    1378:	f023 0307 	bic.w	r3, r3, #7
    137c:	f103 0208 	add.w	r2, r3, #8
    1380:	607a      	str	r2, [r7, #4]
    1382:	cb18      	ldmia	r3, {r3, r4}
    1384:	e005      	b.n	1392 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	1d1a      	adds	r2, r3, #4
    138a:	607a      	str	r2, [r7, #4]
    138c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    138e:	f04f 0400 	mov.w	r4, #0
    1392:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1398:	2b00      	cmp	r3, #0
    139a:	d01e      	beq.n	13da <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    139c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13a0:	f7ff fbaa 	bl	af8 <ndigits_in_u64>
    13a4:	4602      	mov	r2, r0
    13a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13a8:	1a9b      	subs	r3, r3, r2
    13aa:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13b2:	4619      	mov	r1, r3
    13b4:	68f8      	ldr	r0, [r7, #12]
    13b6:	f7ff fd0d 	bl	dd4 <padbuffer>
    13ba:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <am_util_stdio_vsprintf+0x3d2>
    13c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c4:	e000      	b.n	13c8 <am_util_stdio_vsprintf+0x3d4>
    13c6:	2300      	movs	r3, #0
    13c8:	68fa      	ldr	r2, [r7, #12]
    13ca:	4413      	add	r3, r2
    13cc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    13ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13d2:	4413      	add	r3, r2
    13d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    13da:	68fa      	ldr	r2, [r7, #12]
    13dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13e0:	f7ff fc34 	bl	c4c <uint64_to_str>
    13e4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    13e6:	68fb      	ldr	r3, [r7, #12]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d003      	beq.n	13f4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    13ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13ee:	68fa      	ldr	r2, [r7, #12]
    13f0:	4413      	add	r3, r2
    13f2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13f8:	4413      	add	r3, r2
    13fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13fc:	e0e6      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    13fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1402:	2b00      	cmp	r3, #0
    1404:	d008      	beq.n	1418 <am_util_stdio_vsprintf+0x424>
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	3307      	adds	r3, #7
    140a:	f023 0307 	bic.w	r3, r3, #7
    140e:	f103 0208 	add.w	r2, r3, #8
    1412:	607a      	str	r2, [r7, #4]
    1414:	cb18      	ldmia	r3, {r3, r4}
    1416:	e005      	b.n	1424 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	1d1a      	adds	r2, r3, #4
    141c:	607a      	str	r2, [r7, #4]
    141e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1420:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1424:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1428:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    142c:	2b00      	cmp	r3, #0
    142e:	f174 0300 	sbcs.w	r3, r4, #0
    1432:	da0a      	bge.n	144a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1434:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1438:	425b      	negs	r3, r3
    143a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    143e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1442:	2301      	movs	r3, #1
    1444:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1448:	e006      	b.n	1458 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    144a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    144e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1452:	2300      	movs	r3, #0
    1454:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    145a:	2b00      	cmp	r3, #0
    145c:	d04a      	beq.n	14f4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    145e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1462:	4618      	mov	r0, r3
    1464:	4621      	mov	r1, r4
    1466:	f7ff fb69 	bl	b3c <ndigits_in_i64>
    146a:	4602      	mov	r2, r0
    146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    146e:	1a9b      	subs	r3, r3, r2
    1470:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1472:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1476:	2b00      	cmp	r3, #0
    1478:	d011      	beq.n	149e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    147c:	3b01      	subs	r3, #1
    147e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1484:	2b30      	cmp	r3, #48	; 0x30
    1486:	d10a      	bne.n	149e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	2b00      	cmp	r3, #0
    148c:	d004      	beq.n	1498 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	1c5a      	adds	r2, r3, #1
    1492:	60fa      	str	r2, [r7, #12]
    1494:	222d      	movs	r2, #45	; 0x2d
    1496:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149a:	3301      	adds	r3, #1
    149c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    149e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    14a4:	4619      	mov	r1, r3
    14a6:	68f8      	ldr	r0, [r7, #12]
    14a8:	f7ff fc94 	bl	dd4 <padbuffer>
    14ac:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d001      	beq.n	14b8 <am_util_stdio_vsprintf+0x4c4>
    14b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14b6:	e000      	b.n	14ba <am_util_stdio_vsprintf+0x4c6>
    14b8:	2300      	movs	r3, #0
    14ba:	68fa      	ldr	r2, [r7, #12]
    14bc:	4413      	add	r3, r2
    14be:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    14c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14c4:	4413      	add	r3, r2
    14c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    14c8:	2300      	movs	r3, #0
    14ca:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    14cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    14d0:	2b00      	cmp	r3, #0
    14d2:	d01e      	beq.n	1512 <am_util_stdio_vsprintf+0x51e>
    14d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14d8:	2b20      	cmp	r3, #32
    14da:	d11a      	bne.n	1512 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	2b00      	cmp	r3, #0
    14e0:	d004      	beq.n	14ec <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	1c5a      	adds	r2, r3, #1
    14e6:	60fa      	str	r2, [r7, #12]
    14e8:	222d      	movs	r2, #45	; 0x2d
    14ea:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    14ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14ee:	3301      	adds	r3, #1
    14f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    14f2:	e00e      	b.n	1512 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    14f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    14f8:	2b00      	cmp	r3, #0
    14fa:	d00a      	beq.n	1512 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	2b00      	cmp	r3, #0
    1500:	d004      	beq.n	150c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	1c5a      	adds	r2, r3, #1
    1506:	60fa      	str	r2, [r7, #12]
    1508:	222d      	movs	r2, #45	; 0x2d
    150a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    150c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    150e:	3301      	adds	r3, #1
    1510:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1512:	68fa      	ldr	r2, [r7, #12]
    1514:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1518:	f7ff fb98 	bl	c4c <uint64_to_str>
    151c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	2b00      	cmp	r3, #0
    1522:	d003      	beq.n	152c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1526:	68fa      	ldr	r2, [r7, #12]
    1528:	4413      	add	r3, r2
    152a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    152e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1530:	4413      	add	r3, r2
    1532:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1534:	e04a      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d046      	beq.n	15ca <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	3307      	adds	r3, #7
    1540:	f023 0307 	bic.w	r3, r3, #7
    1544:	f103 0208 	add.w	r2, r3, #8
    1548:	607a      	str	r2, [r7, #4]
    154a:	cb18      	ldmia	r3, {r3, r4}
    154c:	4618      	mov	r0, r3
    154e:	4621      	mov	r1, r4
    1550:	f7fe fdb6 	bl	c0 <__aeabi_d2f>
    1554:	4603      	mov	r3, r0
    1556:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	2214      	movs	r2, #20
    155c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    155e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1560:	68f9      	ldr	r1, [r7, #12]
    1562:	6978      	ldr	r0, [r7, #20]
    1564:	f7ff fc5c 	bl	e20 <ftoa>
    1568:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    156c:	2b00      	cmp	r3, #0
    156e:	da14      	bge.n	159a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1572:	f1b3 3fff 	cmp.w	r3, #4294967295
    1576:	d102      	bne.n	157e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1578:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <am_util_stdio_vsprintf+0x600>)
    157a:	62bb      	str	r3, [r7, #40]	; 0x28
    157c:	e008      	b.n	1590 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1580:	f113 0f02 	cmn.w	r3, #2
    1584:	d102      	bne.n	158c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1586:	4b1c      	ldr	r3, [pc, #112]	; (15f8 <am_util_stdio_vsprintf+0x604>)
    1588:	62bb      	str	r3, [r7, #40]	; 0x28
    158a:	e001      	b.n	1590 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    158c:	4b1b      	ldr	r3, [pc, #108]	; (15fc <am_util_stdio_vsprintf+0x608>)
    158e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1594:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1596:	2303      	movs	r3, #3
    1598:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    159c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    159e:	4413      	add	r3, r2
    15a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    15a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15a4:	68fa      	ldr	r2, [r7, #12]
    15a6:	4413      	add	r3, r2
    15a8:	60fb      	str	r3, [r7, #12]
                }
                break;
    15aa:	e00e      	b.n	15ca <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    15ac:	68fb      	ldr	r3, [r7, #12]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d005      	beq.n	15be <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	1c5a      	adds	r2, r3, #1
    15b6:	60fa      	str	r2, [r7, #12]
    15b8:	68ba      	ldr	r2, [r7, #8]
    15ba:	7812      	ldrb	r2, [r2, #0]
    15bc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    15be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15c0:	3301      	adds	r3, #1
    15c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15c4:	e002      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    15c6:	bf00      	nop
    15c8:	e000      	b.n	15cc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    15ca:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    15cc:	68bb      	ldr	r3, [r7, #8]
    15ce:	3301      	adds	r3, #1
    15d0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    15d2:	68bb      	ldr	r3, [r7, #8]
    15d4:	781b      	ldrb	r3, [r3, #0]
    15d6:	2b00      	cmp	r3, #0
    15d8:	f47f ad17 	bne.w	100a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	2b00      	cmp	r3, #0
    15e0:	d002      	beq.n	15e8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	2200      	movs	r2, #0
    15e6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    15e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    15ea:	4618      	mov	r0, r3
    15ec:	3754      	adds	r7, #84	; 0x54
    15ee:	46bd      	mov	sp, r7
    15f0:	bd90      	pop	{r4, r7, pc}
    15f2:	bf00      	nop
    15f4:	00302e30 	.word	0x00302e30
    15f8:	00232e23 	.word	0x00232e23
    15fc:	003f2e3f 	.word	0x003f2e3f

00001600 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1600:	b40f      	push	{r0, r1, r2, r3}
    1602:	b580      	push	{r7, lr}
    1604:	b082      	sub	sp, #8
    1606:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1608:	f107 0314 	add.w	r3, r7, #20
    160c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    160e:	683a      	ldr	r2, [r7, #0]
    1610:	6939      	ldr	r1, [r7, #16]
    1612:	4808      	ldr	r0, [pc, #32]	; (1634 <am_util_stdio_printf+0x34>)
    1614:	f7ff fcee 	bl	ff4 <am_util_stdio_vsprintf>
    1618:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    161a:	4b07      	ldr	r3, [pc, #28]	; (1638 <am_util_stdio_printf+0x38>)
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	4805      	ldr	r0, [pc, #20]	; (1634 <am_util_stdio_printf+0x34>)
    1620:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1622:	687b      	ldr	r3, [r7, #4]
}
    1624:	4618      	mov	r0, r3
    1626:	3708      	adds	r7, #8
    1628:	46bd      	mov	sp, r7
    162a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    162e:	b004      	add	sp, #16
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	10001088 	.word	0x10001088
    1638:	1000119c 	.word	0x1000119c

0000163c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    163c:	b580      	push	{r7, lr}
    163e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1640:	4802      	ldr	r0, [pc, #8]	; (164c <am_util_stdio_terminal_clear+0x10>)
    1642:	f7ff ffdd 	bl	1600 <am_util_stdio_printf>
}
    1646:	bf00      	nop
    1648:	bd80      	pop	{r7, pc}
    164a:	bf00      	nop
    164c:	0000219c 	.word	0x0000219c

00001650 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1650:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1652:	f000 fc07 	bl	1e64 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1656:	f000 fc73 	bl	1f40 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    165a:	f000 fd8d 	bl	2178 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    165e:	2001      	movs	r0, #1
    1660:	f000 fc7e 	bl	1f60 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1664:	2001      	movs	r0, #1
    1666:	f000 f945 	bl	18f4 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    166e:	f000 bc85 	b.w	1f7c <am_hal_rtc_osc_disable>
    1672:	bf00      	nop

00001674 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1674:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1676:	4b17      	ldr	r3, [pc, #92]	; (16d4 <am_bsp_debug_printf_enable+0x60>)
    1678:	6818      	ldr	r0, [r3, #0]
    167a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    167e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1680:	d001      	beq.n	1686 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1682:	b007      	add	sp, #28
    1684:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1686:	4a14      	ldr	r2, [pc, #80]	; (16d8 <am_bsp_debug_printf_enable+0x64>)
    1688:	4914      	ldr	r1, [pc, #80]	; (16dc <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    168a:	4d15      	ldr	r5, [pc, #84]	; (16e0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    168c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    168e:	a806      	add	r0, sp, #24
    1690:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1694:	f000 fd14 	bl	20c0 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1698:	f3ef 8310 	mrs	r3, PRIMASK
    169c:	9300      	str	r3, [sp, #0]
    169e:	b672      	cpsid	i
    16a0:	4a10      	ldr	r2, [pc, #64]	; (16e4 <am_bsp_debug_printf_enable+0x70>)
    16a2:	4d11      	ldr	r5, [pc, #68]	; (16e8 <am_bsp_debug_printf_enable+0x74>)
    16a4:	4811      	ldr	r0, [pc, #68]	; (16ec <am_bsp_debug_printf_enable+0x78>)
    16a6:	4912      	ldr	r1, [pc, #72]	; (16f0 <am_bsp_debug_printf_enable+0x7c>)
    16a8:	2373      	movs	r3, #115	; 0x73
    16aa:	6013      	str	r3, [r2, #0]
    16ac:	682b      	ldr	r3, [r5, #0]
    16ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    16b2:	602b      	str	r3, [r5, #0]
    16b4:	6805      	ldr	r5, [r0, #0]
    16b6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    16ba:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    16be:	6003      	str	r3, [r0, #0]
    16c0:	6808      	ldr	r0, [r1, #0]
    16c2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    16c6:	600d      	str	r5, [r1, #0]
    16c8:	6014      	str	r4, [r2, #0]
    16ca:	9c00      	ldr	r4, [sp, #0]
    16cc:	f384 8810 	msr	PRIMASK, r4
}
    16d0:	b007      	add	sp, #28
    16d2:	bd30      	pop	{r4, r5, pc}
    16d4:	1000118c 	.word	0x1000118c
    16d8:	e0000e80 	.word	0xe0000e80
    16dc:	00150511 	.word	0x00150511
    16e0:	000f4240 	.word	0x000f4240
    16e4:	40010060 	.word	0x40010060
    16e8:	40010054 	.word	0x40010054
    16ec:	40010028 	.word	0x40010028
    16f0:	40010108 	.word	0x40010108

000016f4 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    16f4:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    16f6:	4b15      	ldr	r3, [pc, #84]	; (174c <am_bsp_debug_printf_disable+0x58>)
    16f8:	6818      	ldr	r0, [r3, #0]
    16fa:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    16fe:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1700:	d121      	bne.n	1746 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1702:	f000 fa61 	bl	1bc8 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1706:	f3ef 8110 	mrs	r1, PRIMASK
    170a:	9101      	str	r1, [sp, #4]
    170c:	b672      	cpsid	i
    170e:	4a10      	ldr	r2, [pc, #64]	; (1750 <am_bsp_debug_printf_disable+0x5c>)
    1710:	4d10      	ldr	r5, [pc, #64]	; (1754 <am_bsp_debug_printf_disable+0x60>)
    1712:	4811      	ldr	r0, [pc, #68]	; (1758 <am_bsp_debug_printf_disable+0x64>)
    1714:	4911      	ldr	r1, [pc, #68]	; (175c <am_bsp_debug_printf_disable+0x68>)
    1716:	2373      	movs	r3, #115	; 0x73
    1718:	6013      	str	r3, [r2, #0]
    171a:	682b      	ldr	r3, [r5, #0]
    171c:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1720:	f04c 0320 	orr.w	r3, ip, #32
    1724:	602b      	str	r3, [r5, #0]
    1726:	6805      	ldr	r5, [r0, #0]
    1728:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    172c:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1730:	6003      	str	r3, [r0, #0]
    1732:	6808      	ldr	r0, [r1, #0]
    1734:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1738:	600d      	str	r5, [r1, #0]
    173a:	6014      	str	r4, [r2, #0]
    173c:	9c01      	ldr	r4, [sp, #4]
    173e:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1742:	f000 fd13 	bl	216c <am_hal_tpiu_disable>
}
    1746:	b003      	add	sp, #12
    1748:	bd30      	pop	{r4, r5, pc}
    174a:	bf00      	nop
    174c:	1000118c 	.word	0x1000118c
    1750:	40010060 	.word	0x40010060
    1754:	40010054 	.word	0x40010054
    1758:	40010028 	.word	0x40010028
    175c:	40010108 	.word	0x40010108

00001760 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1760:	f000 ba3c 	b.w	1bdc <am_hal_itm_print>

00001764 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1766:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1768:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    176c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    176e:	7863      	ldrb	r3, [r4, #1]
    1770:	78e2      	ldrb	r2, [r4, #3]
    1772:	7925      	ldrb	r5, [r4, #4]
    1774:	79a1      	ldrb	r1, [r4, #6]
    1776:	00be      	lsls	r6, r7, #2
    1778:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    177c:	f006 0304 	and.w	r3, r6, #4
    1780:	f00e 0602 	and.w	r6, lr, #2
    1784:	431e      	orrs	r6, r3
    1786:	f042 0201 	orr.w	r2, r2, #1
    178a:	79e3      	ldrb	r3, [r4, #7]
    178c:	01ed      	lsls	r5, r5, #7
    178e:	4316      	orrs	r6, r2
    1790:	b2ed      	uxtb	r5, r5
    1792:	7a22      	ldrb	r2, [r4, #8]
    1794:	0289      	lsls	r1, r1, #10
    1796:	432e      	orrs	r6, r5
    1798:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    179c:	7a65      	ldrb	r5, [r4, #9]
    179e:	02db      	lsls	r3, r3, #11
    17a0:	430e      	orrs	r6, r1
    17a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    17a6:	0312      	lsls	r2, r2, #12
    17a8:	7aa1      	ldrb	r1, [r4, #10]
    17aa:	431e      	orrs	r6, r3
    17ac:	042d      	lsls	r5, r5, #16
    17ae:	b293      	uxth	r3, r2
    17b0:	7ae2      	ldrb	r2, [r4, #11]
    17b2:	431e      	orrs	r6, r3
    17b4:	0509      	lsls	r1, r1, #20
    17b6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    17ba:	0612      	lsls	r2, r2, #24
    17bc:	4333      	orrs	r3, r6
    17be:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    17c2:	00bf      	lsls	r7, r7, #2
    17c4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    17c8:	4333      	orrs	r3, r6
    17ca:	430b      	orrs	r3, r1
    17cc:	f007 0508 	and.w	r5, r7, #8
    17d0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    17d2:	f000 fa3f 	bl	1c54 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    17d6:	482c      	ldr	r0, [pc, #176]	; (1888 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    17d8:	4b2c      	ldr	r3, [pc, #176]	; (188c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    17da:	6005      	str	r5, [r0, #0]
    17dc:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    17de:	681e      	ldr	r6, [r3, #0]
    17e0:	0777      	lsls	r7, r6, #29
    17e2:	d41e      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    17e4:	681f      	ldr	r7, [r3, #0]
    17e6:	077e      	lsls	r6, r7, #29
    17e8:	f102 32ff 	add.w	r2, r2, #4294967295
    17ec:	d419      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    17ee:	6819      	ldr	r1, [r3, #0]
    17f0:	074f      	lsls	r7, r1, #29
    17f2:	d416      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    17f4:	6818      	ldr	r0, [r3, #0]
    17f6:	0746      	lsls	r6, r0, #29
    17f8:	d413      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    17fa:	681e      	ldr	r6, [r3, #0]
    17fc:	0770      	lsls	r0, r6, #29
    17fe:	d410      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    1800:	681f      	ldr	r7, [r3, #0]
    1802:	0779      	lsls	r1, r7, #29
    1804:	d40d      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    1806:	6819      	ldr	r1, [r3, #0]
    1808:	074f      	lsls	r7, r1, #29
    180a:	d40a      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    180c:	6818      	ldr	r0, [r3, #0]
    180e:	0746      	lsls	r6, r0, #29
    1810:	d407      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    1812:	681e      	ldr	r6, [r3, #0]
    1814:	0770      	lsls	r0, r6, #29
    1816:	d404      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    1818:	681f      	ldr	r7, [r3, #0]
    181a:	0779      	lsls	r1, r7, #29
    181c:	d401      	bmi.n	1822 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    181e:	3a09      	subs	r2, #9
    1820:	d1dd      	bne.n	17de <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1822:	4b1a      	ldr	r3, [pc, #104]	; (188c <am_hal_cachectrl_enable+0x128>)
    1824:	681a      	ldr	r2, [r3, #0]
    1826:	f042 0101 	orr.w	r1, r2, #1
    182a:	6019      	str	r1, [r3, #0]
    182c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    182e:	6818      	ldr	r0, [r3, #0]
    1830:	0740      	lsls	r0, r0, #29
    1832:	d41e      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1834:	681e      	ldr	r6, [r3, #0]
    1836:	0771      	lsls	r1, r6, #29
    1838:	f102 32ff 	add.w	r2, r2, #4294967295
    183c:	d419      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    183e:	681f      	ldr	r7, [r3, #0]
    1840:	077f      	lsls	r7, r7, #29
    1842:	d416      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1844:	6819      	ldr	r1, [r3, #0]
    1846:	074e      	lsls	r6, r1, #29
    1848:	d413      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    184a:	6818      	ldr	r0, [r3, #0]
    184c:	0740      	lsls	r0, r0, #29
    184e:	d410      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1850:	681e      	ldr	r6, [r3, #0]
    1852:	0771      	lsls	r1, r6, #29
    1854:	d40d      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1856:	681f      	ldr	r7, [r3, #0]
    1858:	077f      	lsls	r7, r7, #29
    185a:	d40a      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    185c:	6819      	ldr	r1, [r3, #0]
    185e:	074e      	lsls	r6, r1, #29
    1860:	d407      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1862:	6818      	ldr	r0, [r3, #0]
    1864:	0740      	lsls	r0, r0, #29
    1866:	d404      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    1868:	681e      	ldr	r6, [r3, #0]
    186a:	0771      	lsls	r1, r6, #29
    186c:	d401      	bmi.n	1872 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    186e:	3a09      	subs	r2, #9
    1870:	d1dd      	bne.n	182e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1872:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1874:	4f04      	ldr	r7, [pc, #16]	; (1888 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1876:	0223      	lsls	r3, r4, #8
    1878:	f403 7100 	and.w	r1, r3, #512	; 0x200
    187c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1880:	4311      	orrs	r1, r2
    1882:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1884:	6039      	str	r1, [r7, #0]
    1886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1888:	40018000 	.word	0x40018000
    188c:	40018008 	.word	0x40018008

00001890 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1890:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1892:	4604      	mov	r4, r0
    1894:	b120      	cbz	r0, 18a0 <am_hal_clkgen_sysclk_select+0x10>
    1896:	4a06      	ldr	r2, [pc, #24]	; (18b0 <am_hal_clkgen_sysclk_select+0x20>)
    1898:	4806      	ldr	r0, [pc, #24]	; (18b4 <am_hal_clkgen_sysclk_select+0x24>)
    189a:	2150      	movs	r1, #80	; 0x50
    189c:	f000 f92c 	bl	1af8 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    18a2:	4906      	ldr	r1, [pc, #24]	; (18bc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18a4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    18a6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18a8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    18aa:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    18ac:	601a      	str	r2, [r3, #0]
    18ae:	bd10      	pop	{r4, pc}
    18b0:	000021bc 	.word	0x000021bc
    18b4:	000021f4 	.word	0x000021f4
    18b8:	40004014 	.word	0x40004014
    18bc:	40004018 	.word	0x40004018

000018c0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    18c0:	4b04      	ldr	r3, [pc, #16]	; (18d4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    18c2:	4905      	ldr	r1, [pc, #20]	; (18d8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    18c4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    18c6:	4805      	ldr	r0, [pc, #20]	; (18dc <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    18c8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    18cc:	bf08      	it	eq
    18ce:	4608      	moveq	r0, r1
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	40004018 	.word	0x40004018
    18d8:	02dc6c00 	.word	0x02dc6c00
    18dc:	016e3600 	.word	0x016e3600

000018e0 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    18e0:	0783      	lsls	r3, r0, #30
    18e2:	d004      	beq.n	18ee <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    18e4:	4a02      	ldr	r2, [pc, #8]	; (18f0 <am_hal_clkgen_osc_start+0x10>)
    18e6:	6813      	ldr	r3, [r2, #0]
    18e8:	ea23 0000 	bic.w	r0, r3, r0
    18ec:	6010      	str	r0, [r2, #0]
    18ee:	4770      	bx	lr
    18f0:	4000400c 	.word	0x4000400c

000018f4 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    18f4:	0783      	lsls	r3, r0, #30
    18f6:	d003      	beq.n	1900 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    18f8:	4a02      	ldr	r2, [pc, #8]	; (1904 <am_hal_clkgen_osc_stop+0x10>)
    18fa:	6813      	ldr	r3, [r2, #0]
    18fc:	4318      	orrs	r0, r3
    18fe:	6010      	str	r0, [r2, #0]
    1900:	4770      	bx	lr
    1902:	bf00      	nop
    1904:	4000400c 	.word	0x4000400c

00001908 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1908:	b410      	push	{r4}
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    190a:	680c      	ldr	r4, [r1, #0]
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    190c:	688b      	ldr	r3, [r1, #8]
    190e:	684a      	ldr	r2, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1910:	f3ef 8110 	mrs	r1, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1914:	b083      	sub	sp, #12
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1916:	2c00      	cmp	r4, #0
    1918:	bf18      	it	ne
    191a:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    191e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1922:	4323      	orrs	r3, r4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1924:	9101      	str	r1, [sp, #4]
    1926:	b672      	cpsid	i

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1928:	4c29      	ldr	r4, [pc, #164]	; (19d0 <am_hal_ctimer_config+0xc8>)
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    192a:	4a2a      	ldr	r2, [pc, #168]	; (19d4 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    192c:	0100      	lsls	r0, r0, #4
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    192e:	5103      	str	r3, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1930:	6811      	ldr	r1, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1932:	f001 0c0f 	and.w	ip, r1, #15
    1936:	f10c 33ff 	add.w	r3, ip, #4294967295
    193a:	2b01      	cmp	r3, #1
    193c:	d941      	bls.n	19c2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    193e:	6824      	ldr	r4, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1940:	f3c4 0244 	ubfx	r2, r4, #1, #5
    1944:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1946:	f3c4 4144 	ubfx	r1, r4, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    194a:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    194c:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1950:	d937      	bls.n	19c2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1952:	2b04      	cmp	r3, #4
    1954:	d935      	bls.n	19c2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1956:	4c20      	ldr	r4, [pc, #128]	; (19d8 <am_hal_ctimer_config+0xd0>)
    1958:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    195a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    195e:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1962:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1966:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1968:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    196c:	d929      	bls.n	19c2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    196e:	2b04      	cmp	r3, #4
    1970:	d927      	bls.n	19c2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1972:	4c1a      	ldr	r4, [pc, #104]	; (19dc <am_hal_ctimer_config+0xd4>)
    1974:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1976:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    197a:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    197e:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1982:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1984:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1988:	d91b      	bls.n	19c2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    198a:	2b04      	cmp	r3, #4
    198c:	d919      	bls.n	19c2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    198e:	4c14      	ldr	r4, [pc, #80]	; (19e0 <am_hal_ctimer_config+0xd8>)
    1990:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1992:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1996:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    199a:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    199e:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19a0:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19a4:	d90d      	bls.n	19c2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19a6:	2b04      	cmp	r3, #4
    19a8:	d90b      	bls.n	19c2 <am_hal_ctimer_config+0xba>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    19aa:	4c0e      	ldr	r4, [pc, #56]	; (19e4 <am_hal_ctimer_config+0xdc>)
    19ac:	6820      	ldr	r0, [r4, #0]
    19ae:	f040 0204 	orr.w	r2, r0, #4
    19b2:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19b4:	9801      	ldr	r0, [sp, #4]
    19b6:	f380 8810 	msr	PRIMASK, r0

} // am_hal_ctimer_config()
    19ba:	b003      	add	sp, #12
    19bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    19c0:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    19c2:	4908      	ldr	r1, [pc, #32]	; (19e4 <am_hal_ctimer_config+0xdc>)
    19c4:	680b      	ldr	r3, [r1, #0]
    19c6:	f023 0404 	bic.w	r4, r3, #4
    19ca:	600c      	str	r4, [r1, #0]
    19cc:	e7f2      	b.n	19b4 <am_hal_ctimer_config+0xac>
    19ce:	bf00      	nop
    19d0:	4000800c 	.word	0x4000800c
    19d4:	40008100 	.word	0x40008100
    19d8:	4000801c 	.word	0x4000801c
    19dc:	4000802c 	.word	0x4000802c
    19e0:	4000803c 	.word	0x4000803c
    19e4:	40021020 	.word	0x40021020

000019e8 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    19e8:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    19ea:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    19ee:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    19f0:	0100      	lsls	r0, r0, #4
    19f2:	4a09      	ldr	r2, [pc, #36]	; (1a18 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    19f4:	9301      	str	r3, [sp, #4]
    19f6:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    19f8:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    19fa:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    19fe:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1a02:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1a06:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1a08:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a0a:	9801      	ldr	r0, [sp, #4]
    1a0c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1a10:	b003      	add	sp, #12
    1a12:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a16:	4770      	bx	lr
    1a18:	4000800c 	.word	0x4000800c

00001a1c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a1c:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a1e:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a22:	0100      	lsls	r0, r0, #4
    1a24:	4a06      	ldr	r2, [pc, #24]	; (1a40 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a26:	9301      	str	r3, [sp, #4]
    1a28:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1a2a:	5883      	ldr	r3, [r0, r2]
    1a2c:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1a30:	4319      	orrs	r1, r3
    1a32:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a34:	9801      	ldr	r0, [sp, #4]
    1a36:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1a3a:	b002      	add	sp, #8
    1a3c:	4770      	bx	lr
    1a3e:	bf00      	nop
    1a40:	4000800c 	.word	0x4000800c

00001a44 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a44:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a46:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a4a:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1a4c:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a4e:	4d1c      	ldr	r5, [pc, #112]	; (1ac0 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a50:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1a52:	4e1c      	ldr	r6, [pc, #112]	; (1ac4 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1a54:	4f1c      	ldr	r7, [pc, #112]	; (1ac8 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a56:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a58:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1a5c:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a5e:	d01a      	beq.n	1a96 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a60:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1a64:	2d80      	cmp	r5, #128	; 0x80
    1a66:	d01b      	beq.n	1aa0 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a6c:	2500      	movs	r5, #0
    1a6e:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1a70:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a72:	d01c      	beq.n	1aae <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a74:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1a78:	d01e      	beq.n	1ab8 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a7a:	0c21      	lsrs	r1, r4, #16
    1a7c:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1a7e:	b291      	uxth	r1, r2
    1a80:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a82:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1a86:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a88:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a8a:	9801      	ldr	r0, [sp, #4]
    1a8c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1a90:	b002      	add	sp, #8
    1a92:	bcf0      	pop	{r4, r5, r6, r7}
    1a94:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a96:	0c25      	lsrs	r5, r4, #16
    1a98:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1a9c:	2c80      	cmp	r4, #128	; 0x80
    1a9e:	d10a      	bne.n	1ab6 <am_hal_ctimer_period_set+0x72>
    1aa0:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1aa2:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1aa4:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aaa:	4299      	cmp	r1, r3
    1aac:	d1e2      	bne.n	1a74 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1aae:	b297      	uxth	r7, r2
    1ab0:	433d      	orrs	r5, r7
    1ab2:	5185      	str	r5, [r0, r6]
    1ab4:	e7e9      	b.n	1a8a <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ab6:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ab8:	b296      	uxth	r6, r2
    1aba:	4335      	orrs	r5, r6
    1abc:	51c5      	str	r5, [r0, r7]
    1abe:	e7e4      	b.n	1a8a <am_hal_ctimer_period_set+0x46>
    1ac0:	4000800c 	.word	0x4000800c
    1ac4:	40008004 	.word	0x40008004
    1ac8:	40008008 	.word	0x40008008

00001acc <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1acc:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1ace:	f3ef 8310 	mrs	r3, PRIMASK
    1ad2:	9301      	str	r3, [sp, #4]
    1ad4:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1ad6:	4904      	ldr	r1, [pc, #16]	; (1ae8 <am_hal_ctimer_int_enable+0x1c>)
    1ad8:	680a      	ldr	r2, [r1, #0]
    1ada:	4310      	orrs	r0, r2
    1adc:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ade:	9801      	ldr	r0, [sp, #4]
    1ae0:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    1ae4:	b002      	add	sp, #8
    1ae6:	4770      	bx	lr
    1ae8:	40008200 	.word	0x40008200

00001aec <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1aec:	4b01      	ldr	r3, [pc, #4]	; (1af4 <am_hal_ctimer_int_clear+0x8>)
    1aee:	6018      	str	r0, [r3, #0]
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	40008208 	.word	0x40008208

00001af8 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1af8:	e7fe      	b.n	1af8 <am_hal_debug_error>
    1afa:	bf00      	nop

00001afc <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1afc:	4b01      	ldr	r3, [pc, #4]	; (1b04 <am_hal_flash_delay+0x8>)
    1afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b00:	4708      	bx	r1
    1b02:	bf00      	nop
    1b04:	10001034 	.word	0x10001034

00001b08 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1b08:	280f      	cmp	r0, #15
    1b0a:	d80b      	bhi.n	1b24 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1b0c:	2805      	cmp	r0, #5
    1b0e:	d013      	beq.n	1b38 <am_hal_interrupt_enable+0x30>
    1b10:	2806      	cmp	r0, #6
    1b12:	d017      	beq.n	1b44 <am_hal_interrupt_enable+0x3c>
    1b14:	2804      	cmp	r0, #4
    1b16:	d104      	bne.n	1b22 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1b18:	4a0d      	ldr	r2, [pc, #52]	; (1b50 <am_hal_interrupt_enable+0x48>)
    1b1a:	6813      	ldr	r3, [r2, #0]
    1b1c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1b20:	6010      	str	r0, [r2, #0]
    1b22:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1b24:	f1a0 0310 	sub.w	r3, r0, #16
    1b28:	f003 0c1f 	and.w	ip, r3, #31
    1b2c:	2001      	movs	r0, #1
    1b2e:	4909      	ldr	r1, [pc, #36]	; (1b54 <am_hal_interrupt_enable+0x4c>)
    1b30:	fa00 f20c 	lsl.w	r2, r0, ip
    1b34:	600a      	str	r2, [r1, #0]
    1b36:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1b38:	4805      	ldr	r0, [pc, #20]	; (1b50 <am_hal_interrupt_enable+0x48>)
    1b3a:	6801      	ldr	r1, [r0, #0]
    1b3c:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b40:	6002      	str	r2, [r0, #0]
            break;
    1b42:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1b44:	4902      	ldr	r1, [pc, #8]	; (1b50 <am_hal_interrupt_enable+0x48>)
    1b46:	680a      	ldr	r2, [r1, #0]
    1b48:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1b4c:	600b      	str	r3, [r1, #0]
            break;
    1b4e:	4770      	bx	lr
    1b50:	e000ed24 	.word	0xe000ed24
    1b54:	e000e100 	.word	0xe000e100

00001b58 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b58:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1b5c:	b662      	cpsie	i
    __asm("    bx lr");
    1b5e:	4770      	bx	lr

00001b60 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b60:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1b64:	b672      	cpsid	i
    __asm("    bx lr");
    1b66:	4770      	bx	lr

00001b68 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1b68:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop

00001b70 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1b70:	4b0d      	ldr	r3, [pc, #52]	; (1ba8 <am_hal_itm_enable+0x38>)
    1b72:	6818      	ldr	r0, [r3, #0]
    1b74:	07c2      	lsls	r2, r0, #31
    1b76:	d416      	bmi.n	1ba6 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1b78:	4a0c      	ldr	r2, [pc, #48]	; (1bac <am_hal_itm_enable+0x3c>)
    1b7a:	6811      	ldr	r1, [r2, #0]
    1b7c:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1b80:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1b82:	6810      	ldr	r0, [r2, #0]
    1b84:	01c3      	lsls	r3, r0, #7
    1b86:	d5fc      	bpl.n	1b82 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1b88:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b8a:	4809      	ldr	r0, [pc, #36]	; (1bb0 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b8c:	4c09      	ldr	r4, [pc, #36]	; (1bb4 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b8e:	4d0a      	ldr	r5, [pc, #40]	; (1bb8 <am_hal_itm_enable+0x48>)
    1b90:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b92:	250f      	movs	r5, #15
    1b94:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1b96:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b98:	4908      	ldr	r1, [pc, #32]	; (1bbc <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1b9a:	4b09      	ldr	r3, [pc, #36]	; (1bc0 <am_hal_itm_enable+0x50>)
    1b9c:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b9e:	f04f 30ff 	mov.w	r0, #4294967295
    1ba2:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1ba4:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1ba6:	4770      	bx	lr
    1ba8:	1000118c 	.word	0x1000118c
    1bac:	e000edfc 	.word	0xe000edfc
    1bb0:	e0000fb0 	.word	0xe0000fb0
    1bb4:	e0000e40 	.word	0xe0000e40
    1bb8:	c5acce55 	.word	0xc5acce55
    1bbc:	e0000e00 	.word	0xe0000e00
    1bc0:	e0000e80 	.word	0xe0000e80
    1bc4:	00150511 	.word	0x00150511

00001bc8 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1bc8:	4a03      	ldr	r2, [pc, #12]	; (1bd8 <am_hal_itm_not_busy+0x10>)
    1bca:	6813      	ldr	r3, [r2, #0]
    1bcc:	021b      	lsls	r3, r3, #8
    1bce:	d4fc      	bmi.n	1bca <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1bd0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1bd4:	f7ff bf92 	b.w	1afc <am_hal_flash_delay>
    1bd8:	e0000e80 	.word	0xe0000e80

00001bdc <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1bdc:	7803      	ldrb	r3, [r0, #0]
    1bde:	b1ab      	cbz	r3, 1c0c <am_hal_itm_print+0x30>
    1be0:	4602      	mov	r2, r0
    1be2:	2300      	movs	r3, #0
    1be4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1be8:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1bea:	2900      	cmp	r1, #0
    1bec:	d1fa      	bne.n	1be4 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1bee:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1bf2:	b430      	push	{r4, r5}
    1bf4:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1bf6:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1bf8:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1bfc:	f8dc 3000 	ldr.w	r3, [ip]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d0fb      	beq.n	1bfc <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1c04:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1c06:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1c08:	d1f6      	bne.n	1bf8 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1c0a:	bc30      	pop	{r4, r5}
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop

00001c10 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c10:	4a0d      	ldr	r2, [pc, #52]	; (1c48 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c12:	4b0e      	ldr	r3, [pc, #56]	; (1c4c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c14:	490e      	ldr	r1, [pc, #56]	; (1c50 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c16:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1c18:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c1a:	6814      	ldr	r4, [r2, #0]
    1c1c:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c1e:	6809      	ldr	r1, [r1, #0]
    1c20:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c22:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c24:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c26:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c28:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c2a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c2c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c30:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c32:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c34:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c38:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c3c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c3e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c40:	6142      	str	r2, [r0, #20]
}
    1c42:	bc70      	pop	{r4, r5, r6}
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	400201c4 	.word	0x400201c4
    1c4c:	400201cc 	.word	0x400201cc
    1c50:	400201c0 	.word	0x400201c0

00001c54 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c54:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c58:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c5a:	d03a      	beq.n	1cd2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1c5c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1c60:	f000 809d 	beq.w	1d9e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1c64:	2801      	cmp	r0, #1
    1c66:	f000 809d 	beq.w	1da4 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1c6a:	2803      	cmp	r0, #3
    1c6c:	f000 80a6 	beq.w	1dbc <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1c70:	2807      	cmp	r0, #7
    1c72:	f000 809c 	beq.w	1dae <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1c76:	280f      	cmp	r0, #15
    1c78:	f000 80a5 	beq.w	1dc6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1c7c:	281f      	cmp	r0, #31
    1c7e:	f000 80b1 	beq.w	1de4 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1c82:	283f      	cmp	r0, #63	; 0x3f
    1c84:	f000 80b5 	beq.w	1df2 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1c88:	287f      	cmp	r0, #127	; 0x7f
    1c8a:	f000 80b9 	beq.w	1e00 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1c8e:	28ff      	cmp	r0, #255	; 0xff
    1c90:	f000 80a0 	beq.w	1dd4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1c94:	f240 13ff 	movw	r3, #511	; 0x1ff
    1c98:	4298      	cmp	r0, r3
    1c9a:	f000 80b8 	beq.w	1e0e <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1c9e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1ca2:	4288      	cmp	r0, r1
    1ca4:	f000 80b9 	beq.w	1e1a <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1ca8:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1cac:	4290      	cmp	r0, r2
    1cae:	d00e      	beq.n	1cce <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1cb0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1cb4:	f000 80b7 	beq.w	1e26 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1cb8:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1cbc:	42a0      	cmp	r0, r4
    1cbe:	f000 80b5 	beq.w	1e2c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1cc2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1cc6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1cca:	4560      	cmp	r0, ip
    1ccc:	d132      	bne.n	1d34 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1cce:	495c      	ldr	r1, [pc, #368]	; (1e40 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1cd0:	e066      	b.n	1da0 <am_hal_pwrctrl_memory_enable+0x14c>
    1cd2:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1cd6:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1cd8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1cda:	4c5a      	ldr	r4, [pc, #360]	; (1e44 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1cdc:	6822      	ldr	r2, [r4, #0]
    1cde:	402a      	ands	r2, r5
    1ce0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1ce2:	4d58      	ldr	r5, [pc, #352]	; (1e44 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1ce4:	682c      	ldr	r4, [r5, #0]
    1ce6:	4320      	orrs	r0, r4
    1ce8:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1cea:	2b00      	cmp	r3, #0
    1cec:	d029      	beq.n	1d42 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cee:	4a56      	ldr	r2, [pc, #344]	; (1e48 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1cf0:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1cf2:	4203      	tst	r3, r0
    1cf4:	bf18      	it	ne
    1cf6:	20c6      	movne	r0, #198	; 0xc6
    1cf8:	d01f      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cfa:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1cfc:	422b      	tst	r3, r5
    1cfe:	d01c      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d00:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d02:	4223      	tst	r3, r4
    1d04:	d019      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d06:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d08:	422b      	tst	r3, r5
    1d0a:	d016      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d0c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d0e:	4223      	tst	r3, r4
    1d10:	d013      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d12:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d14:	422b      	tst	r3, r5
    1d16:	d010      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d18:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d1a:	4223      	tst	r3, r4
    1d1c:	d00d      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d1e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d20:	422b      	tst	r3, r5
    1d22:	d00a      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d24:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d26:	4223      	tst	r3, r4
    1d28:	d007      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d2a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d2c:	422b      	tst	r3, r5
    1d2e:	d004      	beq.n	1d3a <am_hal_pwrctrl_memory_enable+0xe6>
    1d30:	3809      	subs	r0, #9
    1d32:	d1e2      	bne.n	1cfa <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1d34:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1d36:	bc30      	pop	{r4, r5}
    1d38:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1d3a:	b911      	cbnz	r1, 1d42 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1d3c:	2001      	movs	r0, #1
}
    1d3e:	bc30      	pop	{r4, r5}
    1d40:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d42:	4b41      	ldr	r3, [pc, #260]	; (1e48 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1d44:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d46:	ea31 0402 	bics.w	r4, r1, r2
    1d4a:	bf18      	it	ne
    1d4c:	24c6      	movne	r4, #198	; 0xc6
    1d4e:	d0f5      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d50:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d52:	ea31 0000 	bics.w	r0, r1, r0
    1d56:	d0f1      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d58:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d5a:	ea31 0005 	bics.w	r0, r1, r5
    1d5e:	d0ed      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d60:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d62:	ea31 0002 	bics.w	r0, r1, r2
    1d66:	d0e9      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d68:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d6a:	ea31 0000 	bics.w	r0, r1, r0
    1d6e:	d0e5      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d70:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d72:	ea31 0005 	bics.w	r0, r1, r5
    1d76:	d0e1      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d78:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d7a:	ea31 0002 	bics.w	r0, r1, r2
    1d7e:	d0dd      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d80:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d82:	ea31 0000 	bics.w	r0, r1, r0
    1d86:	d0d9      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d88:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d8a:	ea31 0005 	bics.w	r0, r1, r5
    1d8e:	d0d5      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d90:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d92:	ea31 0002 	bics.w	r0, r1, r2
    1d96:	d0d1      	beq.n	1d3c <am_hal_pwrctrl_memory_enable+0xe8>
    1d98:	3c09      	subs	r4, #9
    1d9a:	d1d9      	bne.n	1d50 <am_hal_pwrctrl_memory_enable+0xfc>
    1d9c:	e7ca      	b.n	1d34 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1d9e:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1da0:	2300      	movs	r3, #0
    1da2:	e79e      	b.n	1ce2 <am_hal_pwrctrl_memory_enable+0x8e>
    1da4:	4d29      	ldr	r5, [pc, #164]	; (1e4c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1da6:	4b2a      	ldr	r3, [pc, #168]	; (1e50 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1da8:	f44f 7180 	mov.w	r1, #256	; 0x100
    1dac:	e795      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1dae:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1db2:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1db6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1dba:	e78e      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1dbc:	4d25      	ldr	r5, [pc, #148]	; (1e54 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dbe:	4b26      	ldr	r3, [pc, #152]	; (1e58 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1dc0:	f44f 7140 	mov.w	r1, #768	; 0x300
    1dc4:	e789      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1dc6:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dca:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1dce:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1dd2:	e782      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1dd4:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dd8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1ddc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1de0:	20ff      	movs	r0, #255	; 0xff
    1de2:	e77a      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1de4:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1de8:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1dec:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1df0:	e773      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1df2:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1df6:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1dfa:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1dfe:	e76c      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1e00:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e04:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1e08:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e0c:	e765      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    1e0e:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e12:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1e16:	4911      	ldr	r1, [pc, #68]	; (1e5c <am_hal_pwrctrl_memory_enable+0x208>)
    1e18:	e75f      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1e1a:	4911      	ldr	r1, [pc, #68]	; (1e60 <am_hal_pwrctrl_memory_enable+0x20c>)
    1e1c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1e24:	e759      	b.n	1cda <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e26:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e2a:	e7b9      	b.n	1da0 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1e2c:	4805      	ldr	r0, [pc, #20]	; (1e44 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e2e:	6803      	ldr	r3, [r0, #0]
    1e30:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1e34:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e36:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1e3a:	2100      	movs	r1, #0
    1e3c:	e757      	b.n	1cee <am_hal_pwrctrl_memory_enable+0x9a>
    1e3e:	bf00      	nop
    1e40:	0007ff00 	.word	0x0007ff00
    1e44:	40021010 	.word	0x40021010
    1e48:	40021014 	.word	0x40021014
    1e4c:	fffff801 	.word	0xfffff801
    1e50:	0007fe00 	.word	0x0007fe00
    1e54:	fffff803 	.word	0xfffff803
    1e58:	0007fc00 	.word	0x0007fc00
    1e5c:	0001ff00 	.word	0x0001ff00
    1e60:	0003ff00 	.word	0x0003ff00

00001e64 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e64:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <am_hal_pwrctrl_bucks_init+0x40>)
    1e66:	681a      	ldr	r2, [r3, #0]
    1e68:	0792      	lsls	r2, r2, #30
    1e6a:	d502      	bpl.n	1e72 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1e6c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e6e:	07c3      	lsls	r3, r0, #31
    1e70:	d40e      	bmi.n	1e90 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e72:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e74:	4a0b      	ldr	r2, [pc, #44]	; (1ea4 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e76:	6819      	ldr	r1, [r3, #0]
    1e78:	f041 0002 	orr.w	r0, r1, #2
    1e7c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1e7e:	6819      	ldr	r1, [r3, #0]
    1e80:	f041 0001 	orr.w	r0, r1, #1
    1e84:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e86:	6813      	ldr	r3, [r2, #0]
    1e88:	f003 0103 	and.w	r1, r3, #3
    1e8c:	2903      	cmp	r1, #3
    1e8e:	d1fa      	bne.n	1e86 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1e90:	4a04      	ldr	r2, [pc, #16]	; (1ea4 <am_hal_pwrctrl_bucks_init+0x40>)
    1e92:	6810      	ldr	r0, [r2, #0]
    1e94:	f000 0303 	and.w	r3, r0, #3
    1e98:	2b03      	cmp	r3, #3
    1e9a:	d1fa      	bne.n	1e92 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1e9c:	2042      	movs	r0, #66	; 0x42
    1e9e:	f7ff be2d 	b.w	1afc <am_hal_flash_delay>
    1ea2:	bf00      	nop
    1ea4:	40021004 	.word	0x40021004
    1ea8:	40021000 	.word	0x40021000

00001eac <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1eac:	4b0b      	ldr	r3, [pc, #44]	; (1edc <am_hal_pwrctrl_bucks_enable+0x30>)
    1eae:	681a      	ldr	r2, [r3, #0]
    1eb0:	0792      	lsls	r2, r2, #30
    1eb2:	d502      	bpl.n	1eba <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1eb4:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1eb6:	07c3      	lsls	r3, r0, #31
    1eb8:	d40e      	bmi.n	1ed8 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1eba:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ebc:	4a07      	ldr	r2, [pc, #28]	; (1edc <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ebe:	6819      	ldr	r1, [r3, #0]
    1ec0:	f041 0002 	orr.w	r0, r1, #2
    1ec4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1ec6:	6819      	ldr	r1, [r3, #0]
    1ec8:	f041 0001 	orr.w	r0, r1, #1
    1ecc:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ece:	6813      	ldr	r3, [r2, #0]
    1ed0:	f003 0103 	and.w	r1, r3, #3
    1ed4:	2903      	cmp	r1, #3
    1ed6:	d1fa      	bne.n	1ece <am_hal_pwrctrl_bucks_enable+0x22>
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	40021004 	.word	0x40021004
    1ee0:	40021000 	.word	0x40021000

00001ee4 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1ee4:	4b12      	ldr	r3, [pc, #72]	; (1f30 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1ee6:	681a      	ldr	r2, [r3, #0]
    1ee8:	0792      	lsls	r2, r2, #30
    1eea:	d402      	bmi.n	1ef2 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1eec:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1eee:	07c3      	lsls	r3, r0, #31
    1ef0:	d51c      	bpl.n	1f2c <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ef2:	4910      	ldr	r1, [pc, #64]	; (1f34 <am_hal_pwrctrl_bucks_disable+0x50>)
    1ef4:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1ef6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1efa:	2a20      	cmp	r2, #32
    1efc:	d00b      	beq.n	1f16 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f00:	681a      	ldr	r2, [r3, #0]
    1f02:	f022 0002 	bic.w	r0, r2, #2
    1f06:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1f08:	6819      	ldr	r1, [r3, #0]
    1f0a:	f021 0201 	bic.w	r2, r1, #1
    1f0e:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1f10:	200a      	movs	r0, #10
    1f12:	f7ff bdf3 	b.w	1afc <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1f16:	4809      	ldr	r0, [pc, #36]	; (1f3c <am_hal_pwrctrl_bucks_disable+0x58>)
    1f18:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1f1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1f1e:	d1ee      	bne.n	1efe <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f20:	4805      	ldr	r0, [pc, #20]	; (1f38 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f22:	6803      	ldr	r3, [r0, #0]
    1f24:	f003 0105 	and.w	r1, r3, #5
    1f28:	6001      	str	r1, [r0, #0]
    1f2a:	e7f1      	b.n	1f10 <am_hal_pwrctrl_bucks_disable+0x2c>
    1f2c:	4770      	bx	lr
    1f2e:	bf00      	nop
    1f30:	40021004 	.word	0x40021004
    1f34:	4002000c 	.word	0x4002000c
    1f38:	40021000 	.word	0x40021000
    1f3c:	40021008 	.word	0x40021008

00001f40 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1f40:	4905      	ldr	r1, [pc, #20]	; (1f58 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f42:	4a06      	ldr	r2, [pc, #24]	; (1f5c <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1f44:	680b      	ldr	r3, [r1, #0]
    1f46:	f043 0006 	orr.w	r0, r3, #6
    1f4a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f4c:	6811      	ldr	r1, [r2, #0]
    1f4e:	f021 0304 	bic.w	r3, r1, #4
    1f52:	6013      	str	r3, [r2, #0]
    1f54:	4770      	bx	lr
    1f56:	bf00      	nop
    1f58:	40021018 	.word	0x40021018
    1f5c:	40021000 	.word	0x40021000

00001f60 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f60:	4a05      	ldr	r2, [pc, #20]	; (1f78 <am_hal_rtc_osc_select+0x18>)
    1f62:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1f64:	b918      	cbnz	r0, 1f6e <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f66:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1f6a:	6010      	str	r0, [r2, #0]
    1f6c:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f6e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1f72:	6011      	str	r1, [r2, #0]
    1f74:	4770      	bx	lr
    1f76:	bf00      	nop
    1f78:	4000400c 	.word	0x4000400c

00001f7c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1f7c:	4a02      	ldr	r2, [pc, #8]	; (1f88 <am_hal_rtc_osc_disable+0xc>)
    1f7e:	6813      	ldr	r3, [r2, #0]
    1f80:	f043 0010 	orr.w	r0, r3, #16
    1f84:	6010      	str	r0, [r2, #0]
    1f86:	4770      	bx	lr
    1f88:	40004050 	.word	0x40004050

00001f8c <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8e:	b083      	sub	sp, #12
    1f90:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1f92:	f7ff fde5 	bl	1b60 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1f96:	4a41      	ldr	r2, [pc, #260]	; (209c <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1f98:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1f9a:	b11d      	cbz	r5, 1fa4 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1f9c:	4b40      	ldr	r3, [pc, #256]	; (20a0 <am_hal_sysctrl_sleep+0x114>)
    1f9e:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1fa0:	07c3      	lsls	r3, r0, #31
    1fa2:	d509      	bpl.n	1fb8 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1fa4:	6811      	ldr	r1, [r2, #0]
    1fa6:	f021 0604 	bic.w	r6, r1, #4
    1faa:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1fac:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1fae:	4620      	mov	r0, r4
    1fb0:	f7ff fdda 	bl	1b68 <am_hal_interrupt_master_set>
}
    1fb4:	b003      	add	sp, #12
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1fb8:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1fba:	493a      	ldr	r1, [pc, #232]	; (20a4 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1fbc:	4f3a      	ldr	r7, [pc, #232]	; (20a8 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1fbe:	4d3b      	ldr	r5, [pc, #236]	; (20ac <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1fc0:	483b      	ldr	r0, [pc, #236]	; (20b0 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1fc2:	f043 0604 	orr.w	r6, r3, #4
    1fc6:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1fc8:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1fca:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1fcc:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1fce:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1fd0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1fd4:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1fd6:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1fda:	bf14      	ite	ne
    1fdc:	2500      	movne	r5, #0
    1fde:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1fe0:	2e03      	cmp	r6, #3
    1fe2:	bf8c      	ite	hi
    1fe4:	2100      	movhi	r1, #0
    1fe6:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1fe8:	f012 0303 	ands.w	r3, r2, #3
    1fec:	bf18      	it	ne
    1fee:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1ff0:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1ff4:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1ff6:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1ff8:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1ffc:	b91e      	cbnz	r6, 2006 <am_hal_sysctrl_sleep+0x7a>
    1ffe:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    2002:	2d0f      	cmp	r5, #15
    2004:	d00a      	beq.n	201c <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    2006:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    2008:	2d0f      	cmp	r5, #15
    200a:	d01a      	beq.n	2042 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    200c:	4f29      	ldr	r7, [pc, #164]	; (20b4 <am_hal_sysctrl_sleep+0x128>)
    200e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2010:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    2012:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2014:	f7ff fda8 	bl	1b68 <am_hal_interrupt_master_set>
}
    2018:	b003      	add	sp, #12
    201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    201c:	683a      	ldr	r2, [r7, #0]
    201e:	1e50      	subs	r0, r2, #1
    2020:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2022:	9800      	ldr	r0, [sp, #0]
    2024:	f04f 31ff 	mov.w	r1, #4294967295
    2028:	f7ff fcf8 	bl	1a1c <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    202c:	9800      	ldr	r0, [sp, #0]
    202e:	4633      	mov	r3, r6
    2030:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2034:	f04f 31ff 	mov.w	r1, #4294967295
    2038:	f7ff fd04 	bl	1a44 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    203c:	f7ff ff52 	bl	1ee4 <am_hal_pwrctrl_bucks_disable>
    2040:	e7e1      	b.n	2006 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2042:	f3ef 8310 	mrs	r3, PRIMASK
    2046:	9301      	str	r3, [sp, #4]
    2048:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    204a:	4e1b      	ldr	r6, [pc, #108]	; (20b8 <am_hal_sysctrl_sleep+0x12c>)
    204c:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    204e:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2050:	6835      	ldr	r5, [r6, #0]
    2052:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    2056:	f04c 021c 	orr.w	r2, ip, #28
    205a:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    205c:	6830      	ldr	r0, [r6, #0]
    205e:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    2062:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    2066:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2068:	9e01      	ldr	r6, [sp, #4]
    206a:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    206e:	201c      	movs	r0, #28
    2070:	f7ff fd44 	bl	1afc <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2074:	f7ff ff1a 	bl	1eac <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2078:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    207a:	4910      	ldr	r1, [pc, #64]	; (20bc <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    207c:	4d0d      	ldr	r5, [pc, #52]	; (20b4 <am_hal_sysctrl_sleep+0x128>)
    207e:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2080:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2082:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2084:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2086:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2088:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    208a:	f7ff fd37 	bl	1afc <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    208e:	9800      	ldr	r0, [sp, #0]
    2090:	f04f 31ff 	mov.w	r1, #4294967295
    2094:	f7ff fca8 	bl	19e8 <am_hal_ctimer_start>
    2098:	e789      	b.n	1fae <am_hal_sysctrl_sleep+0x22>
    209a:	bf00      	nop
    209c:	e000ed10 	.word	0xe000ed10
    20a0:	40020250 	.word	0x40020250
    20a4:	4002000c 	.word	0x4002000c
    20a8:	10001198 	.word	0x10001198
    20ac:	40021000 	.word	0x40021000
    20b0:	40021008 	.word	0x40021008
    20b4:	10001190 	.word	0x10001190
    20b8:	40020068 	.word	0x40020068
    20bc:	10001194 	.word	0x10001194

000020c0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    20c0:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    20c2:	4a22      	ldr	r2, [pc, #136]	; (214c <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    20c4:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    20c6:	2100      	movs	r1, #0
    20c8:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    20ca:	b333      	cbz	r3, 211a <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    20cc:	4d20      	ldr	r5, [pc, #128]	; (2150 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    20ce:	4921      	ldr	r1, [pc, #132]	; (2154 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    20d0:	4a21      	ldr	r2, [pc, #132]	; (2158 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    20d2:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    20d4:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    20d8:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    20da:	458c      	cmp	ip, r1
    20dc:	bf94      	ite	ls
    20de:	461d      	movls	r5, r3
    20e0:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    20e2:	f7ff fbed 	bl	18c0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    20e6:	1c43      	adds	r3, r0, #1
    20e8:	d02e      	beq.n	2148 <am_hal_tpiu_enable+0x88>
    20ea:	08c3      	lsrs	r3, r0, #3
    20ec:	fbb3 fef5 	udiv	lr, r3, r5
    20f0:	f10e 31ff 	add.w	r1, lr, #4294967295
    20f4:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    20f6:	4a19      	ldr	r2, [pc, #100]	; (215c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    20f8:	4c19      	ldr	r4, [pc, #100]	; (2160 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    20fa:	4b1a      	ldr	r3, [pc, #104]	; (2164 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    20fc:	491a      	ldr	r1, [pc, #104]	; (2168 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    20fe:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2100:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2102:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2104:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2108:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    210a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    210c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    210e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2116:	f7ff bcf1 	b.w	1afc <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    211a:	4c10      	ldr	r4, [pc, #64]	; (215c <am_hal_tpiu_enable+0x9c>)
    211c:	6905      	ldr	r5, [r0, #16]
    211e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2120:	6882      	ldr	r2, [r0, #8]
    2122:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2126:	68c3      	ldr	r3, [r0, #12]
    2128:	4c09      	ldr	r4, [pc, #36]	; (2150 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    212a:	490e      	ldr	r1, [pc, #56]	; (2164 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    212c:	1e5d      	subs	r5, r3, #1
    212e:	2201      	movs	r2, #1
    2130:	40aa      	lsls	r2, r5
    2132:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2134:	680b      	ldr	r3, [r1, #0]
    2136:	6840      	ldr	r0, [r0, #4]
    2138:	4318      	orrs	r0, r3
    213a:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    213c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2140:	f44f 7047 	mov.w	r0, #796	; 0x31c
    2144:	f7ff bcda 	b.w	1afc <am_hal_flash_delay>
    2148:	2005      	movs	r0, #5
    214a:	e7d4      	b.n	20f6 <am_hal_tpiu_enable+0x36>
    214c:	e0040304 	.word	0xe0040304
    2150:	e0040004 	.word	0xe0040004
    2154:	001da380 	.word	0x001da380
    2158:	000f4240 	.word	0x000f4240
    215c:	e0040010 	.word	0xe0040010
    2160:	e00400f0 	.word	0xe00400f0
    2164:	40020250 	.word	0x40020250
    2168:	e0040f00 	.word	0xe0040f00

0000216c <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    216c:	4b01      	ldr	r3, [pc, #4]	; (2174 <am_hal_tpiu_disable+0x8>)
    216e:	2200      	movs	r2, #0
    2170:	601a      	str	r2, [r3, #0]
    2172:	4770      	bx	lr
    2174:	40020250 	.word	0x40020250

00002178 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2178:	4b01      	ldr	r3, [pc, #4]	; (2180 <am_hal_vcomp_disable+0x8>)
    217a:	2237      	movs	r2, #55	; 0x37
    217c:	601a      	str	r2, [r3, #0]
    217e:	4770      	bx	lr
    2180:	4000c008 	.word	0x4000c008
    2184:	616e6942 	.word	0x616e6942
    2188:	43207972 	.word	0x43207972
    218c:	746e756f 	.word	0x746e756f
    2190:	45207265 	.word	0x45207265
    2194:	706d6178 	.word	0x706d6178
    2198:	000a656c 	.word	0x000a656c
    219c:	0a0a0a0a 	.word	0x0a0a0a0a
    21a0:	0a0a0a0a 	.word	0x0a0a0a0a
    21a4:	0a0a0a0a 	.word	0x0a0a0a0a
    21a8:	0a0a0a0a 	.word	0x0a0a0a0a
    21ac:	00000a0a 	.word	0x00000a0a

000021b0 <am_hal_cachectrl_defaults>:
    21b0:	50000001 00010300 00010101 685f6d61     ...P........am_h
    21c0:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    21d0:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    21e0:	63206469 6b636f6c 74657320 676e6974     id clock setting
    21f0:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2200:	6b6c635f 2e6e6567 00000063              _clkgen.c...
