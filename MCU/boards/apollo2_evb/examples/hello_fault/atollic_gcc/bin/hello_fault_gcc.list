
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\hello_fault\atollic_gcc\bin\hello_fault_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021bc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000050  10001000  000021bc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  10001050  0000220c  00021050  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021050  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000643b  00000000  00000000  00021087  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001af0  00000000  00000000  000274c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000808  00000000  00000000  00028fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e58  00000000  00000000  000297ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004050  00000000  00000000  0002a612  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b67  00000000  00000000  0002e662  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  000311c9  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001658  00000000  00000000  00031248  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003837  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 49 02 00 00 b1 02 00 00 f1 02 00 00     ....I...........
      10:	f1 02 00 00 f1 02 00 00 f1 02 00 00 00 00 00 00     ................
	...
      2c:	b9 02 00 00 b9 02 00 00 00 00 00 00 b9 02 00 00     ................
      3c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      4c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      5c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      6c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      7c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      8c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      9c:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      ac:	b9 02 00 00 b9 02 00 00 b9 02 00 00 b9 02 00 00     ................
      bc:	b9 02 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <force_fault>:
//! @return None.
//
//*****************************************************************************
void
force_fault(void)
{
     160:	b480      	push	{r7}
     162:	b083      	sub	sp, #12
     164:	af00      	add	r7, sp, #0
    uint32_t *pCauseFault;
    volatile uint32_t uVal;

    pCauseFault = (uint32_t*)ILLEGAL_SRAM_ADDR;
     166:	4b06      	ldr	r3, [pc, #24]	; (180 <force_fault+0x20>)
     168:	607b      	str	r3, [r7, #4]
    uVal = *pCauseFault;
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	603b      	str	r3, [r7, #0]

    //
    // Use the variable uVal in order to avoid a warning from some compilers.
    // However, the fault will prevent us from getting here.
    //
    pCauseFault = (uint32_t*)uVal;
     170:	683b      	ldr	r3, [r7, #0]
     172:	607b      	str	r3, [r7, #4]
}
     174:	bf00      	nop
     176:	370c      	adds	r7, #12
     178:	46bd      	mov	sp, r7
     17a:	f85d 7b04 	ldr.w	r7, [sp], #4
     17e:	4770      	bx	lr
     180:	10100000 	.word	0x10100000

00000184 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     18a:	2000      	movs	r0, #0
     18c:	f001 f9ce 	bl	152c <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     190:	4823      	ldr	r0, [pc, #140]	; (220 <main+0x9c>)
     192:	f001 f935 	bl	1400 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     196:	f001 f8a9 	bl	12ec <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     19a:	4822      	ldr	r0, [pc, #136]	; (224 <main+0xa0>)
     19c:	f000 fa0c 	bl	5b8 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     1a0:	f3ef 8310 	mrs	r3, PRIMASK
     1a4:	607b      	str	r3, [r7, #4]
     1a6:	b672      	cpsid	i
     1a8:	4b1f      	ldr	r3, [pc, #124]	; (228 <main+0xa4>)
     1aa:	2273      	movs	r2, #115	; 0x73
     1ac:	601a      	str	r2, [r3, #0]
     1ae:	4a1f      	ldr	r2, [pc, #124]	; (22c <main+0xa8>)
     1b0:	4b1e      	ldr	r3, [pc, #120]	; (22c <main+0xa8>)
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1b8:	6013      	str	r3, [r2, #0]
     1ba:	4a1d      	ldr	r2, [pc, #116]	; (230 <main+0xac>)
     1bc:	4b1c      	ldr	r3, [pc, #112]	; (230 <main+0xac>)
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1c8:	6013      	str	r3, [r2, #0]
     1ca:	4a1a      	ldr	r2, [pc, #104]	; (234 <main+0xb0>)
     1cc:	4b19      	ldr	r3, [pc, #100]	; (234 <main+0xb0>)
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1d4:	6013      	str	r3, [r2, #0]
     1d6:	4b14      	ldr	r3, [pc, #80]	; (228 <main+0xa4>)
     1d8:	2200      	movs	r2, #0
     1da:	601a      	str	r2, [r3, #0]
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1e2:	f001 f9dd 	bl	15a0 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1e6:	f001 f893 	bl	1310 <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     1ea:	f001 f875 	bl	12d8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello Fault.\n\n");
     1ee:	4812      	ldr	r0, [pc, #72]	; (238 <main+0xb4>)
     1f0:	f001 f854 	bl	129c <am_util_stdio_printf>

    //
    // Print a message about the forthcoming hard fault.
    //
    am_util_stdio_printf(""
     1f4:	4811      	ldr	r0, [pc, #68]	; (23c <main+0xb8>)
     1f6:	f001 f851 	bl	129c <am_util_stdio_printf>
        "An illegal memory access will occur next, which will execute the\n"
        "extended fault handler to assist in decoding the fault.\n");
    am_util_stdio_printf("\n"
     1fa:	4811      	ldr	r0, [pc, #68]	; (240 <main+0xbc>)
     1fc:	f001 f84e 	bl	129c <am_util_stdio_printf>
        "In order to print out the fault information for this example\n"
        "a macro, AM_UTIL_FAULTISR_PRINT, has been defined in the build\n"
        "environment.  Otherwise the fault data can only be examined\n"
        "directly in the ISR from a debugger.\n"
        "\n");
    am_util_stdio_printf(""
     200:	4810      	ldr	r0, [pc, #64]	; (244 <main+0xc0>)
     202:	f001 f84b 	bl	129c <am_util_stdio_printf>
        "\n");

    //
    // Give the above print statements time to complete.
    //
    am_util_delay_ms(10);
     206:	200a      	movs	r0, #10
     208:	f000 f85a 	bl	2c0 <am_util_delay_ms>

    //
    // Enable the Apollo2 Fault detection.
    //
    am_hal_mcuctrl_fault_capture_enable();
     20c:	f001 fa18 	bl	1640 <am_hal_mcuctrl_fault_capture_enable>
    //
    // Force an invalid memory address fault.
    // This function will not return, so anything after it
    //  will not be executed.
    //
    force_fault();
     210:	f7ff ffa6 	bl	160 <force_fault>

    //
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     214:	f001 f8bc 	bl	1390 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     218:	2001      	movs	r0, #1
     21a:	f001 fbd7 	bl	19cc <am_hal_sysctrl_sleep>
    }
     21e:	e7fb      	b.n	218 <main+0x94>
     220:	00002160 	.word	0x00002160
     224:	000013fd 	.word	0x000013fd
     228:	40010060 	.word	0x40010060
     22c:	40010054 	.word	0x40010054
     230:	40010028 	.word	0x40010028
     234:	40010108 	.word	0x40010108
     238:	00001cb8 	.word	0x00001cb8
     23c:	00001cc8 	.word	0x00001cc8
     240:	00001d44 	.word	0x00001d44
     244:	00001e24 	.word	0x00001e24

00000248 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     248:	4811      	ldr	r0, [pc, #68]	; (290 <zero_loop+0x12>)
     24a:	4912      	ldr	r1, [pc, #72]	; (294 <zero_loop+0x16>)
     24c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     24e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     252:	4811      	ldr	r0, [pc, #68]	; (298 <zero_loop+0x1a>)
     254:	6801      	ldr	r1, [r0, #0]
     256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     25a:	6001      	str	r1, [r0, #0]
     25c:	f3bf 8f4f 	dsb	sy
     260:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     264:	480d      	ldr	r0, [pc, #52]	; (29c <zero_loop+0x1e>)
     266:	490e      	ldr	r1, [pc, #56]	; (2a0 <zero_loop+0x22>)
     268:	4a0e      	ldr	r2, [pc, #56]	; (2a4 <zero_loop+0x26>)

0000026a <copy_loop>:
     26a:	f850 3b04 	ldr.w	r3, [r0], #4
     26e:	f841 3b04 	str.w	r3, [r1], #4
     272:	4291      	cmp	r1, r2
     274:	dbf9      	blt.n	26a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     276:	480c      	ldr	r0, [pc, #48]	; (2a8 <zero_loop+0x2a>)
     278:	490c      	ldr	r1, [pc, #48]	; (2ac <zero_loop+0x2e>)
     27a:	f04f 0200 	mov.w	r2, #0

0000027e <zero_loop>:
     27e:	4288      	cmp	r0, r1
     280:	bfb8      	it	lt
     282:	f840 2b04 	strlt.w	r2, [r0], #4
     286:	dbfa      	blt.n	27e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     288:	f7ff ff7c 	bl	184 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     28c:	be00      	bkpt	0x0000
}
     28e:	bf00      	nop
     290:	e000ed08 	.word	0xe000ed08
     294:	00000000 	.word	0x00000000
     298:	e000ed88 	.word	0xe000ed88
     29c:	000021bc 	.word	0x000021bc
     2a0:	10001000 	.word	0x10001000
     2a4:	10001050 	.word	0x10001050
     2a8:	10001050 	.word	0x10001050
     2ac:	10001168 	.word	0x10001168

000002b0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     2b0:	b480      	push	{r7}
     2b2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     2b4:	e7fe      	b.n	2b4 <am_nmi_isr+0x4>
     2b6:	bf00      	nop

000002b8 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     2b8:	b480      	push	{r7}
     2ba:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     2bc:	e7fe      	b.n	2bc <am_adc_isr+0x4>
     2be:	bf00      	nop

000002c0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     2c0:	b580      	push	{r7, lr}
     2c2:	b084      	sub	sp, #16
     2c4:	af00      	add	r7, sp, #0
     2c6:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     2c8:	f001 f948 	bl	155c <am_hal_clkgen_sysclk_get>
     2cc:	4602      	mov	r2, r0
     2ce:	4b07      	ldr	r3, [pc, #28]	; (2ec <am_util_delay_ms+0x2c>)
     2d0:	fba3 2302 	umull	r2, r3, r3, r2
     2d4:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     2d6:	687a      	ldr	r2, [r7, #4]
     2d8:	fb02 f303 	mul.w	r3, r2, r3
     2dc:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     2de:	68f8      	ldr	r0, [r7, #12]
     2e0:	f001 f958 	bl	1594 <am_hal_flash_delay>
}
     2e4:	bf00      	nop
     2e6:	3710      	adds	r7, #16
     2e8:	46bd      	mov	sp, r7
     2ea:	bd80      	pop	{r7, pc}
     2ec:	057619f1 	.word	0x057619f1

000002f0 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     2f0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     2f2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     2f4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     2f6:	f000 f809 	bl	30c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     2fa:	bd01      	pop	{r0, pc}
}
     2fc:	bf00      	nop
     2fe:	4618      	mov	r0, r3

00000300 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     300:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     302:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     304:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     306:	4770      	bx	lr
}
     308:	bf00      	nop
     30a:	4618      	mov	r0, r3

0000030c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     30c:	b580      	push	{r7, lr}
     30e:	b096      	sub	sp, #88	; 0x58
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     314:	f107 030c 	add.w	r3, r7, #12
     318:	2200      	movs	r2, #0
     31a:	601a      	str	r2, [r3, #0]
     31c:	605a      	str	r2, [r3, #4]
     31e:	609a      	str	r2, [r3, #8]
     320:	60da      	str	r2, [r3, #12]
     322:	611a      	str	r2, [r3, #16]
     324:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     326:	2300      	movs	r3, #0
     328:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     32a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     32c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     32e:	4b85      	ldr	r3, [pc, #532]	; (544 <am_util_faultisr_collect_data+0x238>)
     330:	681b      	ldr	r3, [r3, #0]
     332:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     336:	b2db      	uxtb	r3, r3
     338:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     33e:	0a1b      	lsrs	r3, r3, #8
     340:	b2db      	uxtb	r3, r3
     342:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     348:	0c1b      	lsrs	r3, r3, #16
     34a:	b29b      	uxth	r3, r3
     34c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     350:	4b7d      	ldr	r3, [pc, #500]	; (548 <am_util_faultisr_collect_data+0x23c>)
     352:	681b      	ldr	r3, [r3, #0]
     354:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     356:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     35a:	b2db      	uxtb	r3, r3
     35c:	f003 0302 	and.w	r3, r3, #2
     360:	2b00      	cmp	r3, #0
     362:	d005      	beq.n	370 <am_util_faultisr_collect_data+0x64>
     364:	6879      	ldr	r1, [r7, #4]
     366:	2006      	movs	r0, #6
     368:	f7ff ffca 	bl	300 <getStackedReg>
     36c:	4603      	mov	r3, r0
     36e:	e001      	b.n	374 <am_util_faultisr_collect_data+0x68>
     370:	f04f 33ff 	mov.w	r3, #4294967295
     374:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     376:	6879      	ldr	r1, [r7, #4]
     378:	2000      	movs	r0, #0
     37a:	f7ff ffc1 	bl	300 <getStackedReg>
     37e:	4603      	mov	r3, r0
     380:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     382:	6879      	ldr	r1, [r7, #4]
     384:	2001      	movs	r0, #1
     386:	f7ff ffbb 	bl	300 <getStackedReg>
     38a:	4603      	mov	r3, r0
     38c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     38e:	6879      	ldr	r1, [r7, #4]
     390:	2002      	movs	r0, #2
     392:	f7ff ffb5 	bl	300 <getStackedReg>
     396:	4603      	mov	r3, r0
     398:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     39a:	6879      	ldr	r1, [r7, #4]
     39c:	2003      	movs	r0, #3
     39e:	f7ff ffaf 	bl	300 <getStackedReg>
     3a2:	4603      	mov	r3, r0
     3a4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     3a6:	6879      	ldr	r1, [r7, #4]
     3a8:	2004      	movs	r0, #4
     3aa:	f7ff ffa9 	bl	300 <getStackedReg>
     3ae:	4603      	mov	r3, r0
     3b0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3b2:	6879      	ldr	r1, [r7, #4]
     3b4:	2005      	movs	r0, #5
     3b6:	f7ff ffa3 	bl	300 <getStackedReg>
     3ba:	4603      	mov	r3, r0
     3bc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3be:	6879      	ldr	r1, [r7, #4]
     3c0:	2006      	movs	r0, #6
     3c2:	f7ff ff9d 	bl	300 <getStackedReg>
     3c6:	4603      	mov	r3, r0
     3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     3ca:	6879      	ldr	r1, [r7, #4]
     3cc:	2007      	movs	r0, #7
     3ce:	f7ff ff97 	bl	300 <getStackedReg>
     3d2:	4603      	mov	r3, r0
     3d4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     3d6:	f107 030c 	add.w	r3, r7, #12
     3da:	4618      	mov	r0, r3
     3dc:	f001 f938 	bl	1650 <am_hal_mcuctrl_fault_status>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
     3e0:	485a      	ldr	r0, [pc, #360]	; (54c <am_util_faultisr_collect_data+0x240>)
     3e2:	f000 ff5b 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
     3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     3e8:	4619      	mov	r1, r3
     3ea:	4859      	ldr	r0, [pc, #356]	; (550 <am_util_faultisr_collect_data+0x244>)
     3ec:	f000 ff56 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
     3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     3f2:	4619      	mov	r1, r3
     3f4:	4857      	ldr	r0, [pc, #348]	; (554 <am_util_faultisr_collect_data+0x248>)
     3f6:	f000 ff51 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
     3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3fc:	4619      	mov	r1, r3
     3fe:	4856      	ldr	r0, [pc, #344]	; (558 <am_util_faultisr_collect_data+0x24c>)
     400:	f000 ff4c 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
     404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     406:	4619      	mov	r1, r3
     408:	4854      	ldr	r0, [pc, #336]	; (55c <am_util_faultisr_collect_data+0x250>)
     40a:	f000 ff47 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
     40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     410:	4619      	mov	r1, r3
     412:	4853      	ldr	r0, [pc, #332]	; (560 <am_util_faultisr_collect_data+0x254>)
     414:	f000 ff42 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
     418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     41a:	4619      	mov	r1, r3
     41c:	4851      	ldr	r0, [pc, #324]	; (564 <am_util_faultisr_collect_data+0x258>)
     41e:	f000 ff3d 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
     422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     424:	4619      	mov	r1, r3
     426:	4850      	ldr	r0, [pc, #320]	; (568 <am_util_faultisr_collect_data+0x25c>)
     428:	f000 ff38 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
     42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     42e:	4619      	mov	r1, r3
     430:	484e      	ldr	r0, [pc, #312]	; (56c <am_util_faultisr_collect_data+0x260>)
     432:	f000 ff33 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
     436:	484e      	ldr	r0, [pc, #312]	; (570 <am_util_faultisr_collect_data+0x264>)
     438:	f000 ff30 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
     43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     43e:	4619      	mov	r1, r3
     440:	484c      	ldr	r0, [pc, #304]	; (574 <am_util_faultisr_collect_data+0x268>)
     442:	f000 ff2b 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
     446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     448:	4619      	mov	r1, r3
     44a:	484b      	ldr	r0, [pc, #300]	; (578 <am_util_faultisr_collect_data+0x26c>)
     44c:	f000 ff26 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
     450:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
     454:	b2db      	uxtb	r3, r3
     456:	4619      	mov	r1, r3
     458:	4848      	ldr	r0, [pc, #288]	; (57c <am_util_faultisr_collect_data+0x270>)
     45a:	f000 ff1f 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
     45e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     462:	b2db      	uxtb	r3, r3
     464:	4619      	mov	r1, r3
     466:	4846      	ldr	r0, [pc, #280]	; (580 <am_util_faultisr_collect_data+0x274>)
     468:	f000 ff18 	bl	129c <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
     46c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
     470:	b29b      	uxth	r3, r3
     472:	4619      	mov	r1, r3
     474:	4843      	ldr	r0, [pc, #268]	; (584 <am_util_faultisr_collect_data+0x278>)
     476:	f000 ff11 	bl	129c <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
     47e:	e03f      	b.n	500 <am_util_faultisr_collect_data+0x1f4>
    {
        switch (sFaultData.u8BFSR & u32Mask)
     480:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     484:	b2db      	uxtb	r3, r3
     486:	461a      	mov	r2, r3
     488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     48a:	4013      	ands	r3, r2
     48c:	2b08      	cmp	r3, #8
     48e:	d024      	beq.n	4da <am_util_faultisr_collect_data+0x1ce>
     490:	2b08      	cmp	r3, #8
     492:	d806      	bhi.n	4a2 <am_util_faultisr_collect_data+0x196>
     494:	2b02      	cmp	r3, #2
     496:	d028      	beq.n	4ea <am_util_faultisr_collect_data+0x1de>
     498:	2b04      	cmp	r3, #4
     49a:	d022      	beq.n	4e2 <am_util_faultisr_collect_data+0x1d6>
     49c:	2b01      	cmp	r3, #1
     49e:	d028      	beq.n	4f2 <am_util_faultisr_collect_data+0x1e6>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
     4a0:	e02b      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
     4a2:	2b20      	cmp	r3, #32
     4a4:	d011      	beq.n	4ca <am_util_faultisr_collect_data+0x1be>
     4a6:	2b20      	cmp	r3, #32
     4a8:	d802      	bhi.n	4b0 <am_util_faultisr_collect_data+0x1a4>
     4aa:	2b10      	cmp	r3, #16
     4ac:	d011      	beq.n	4d2 <am_util_faultisr_collect_data+0x1c6>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
     4ae:	e024      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
     4b0:	2b40      	cmp	r3, #64	; 0x40
     4b2:	d006      	beq.n	4c2 <am_util_faultisr_collect_data+0x1b6>
     4b4:	2b80      	cmp	r3, #128	; 0x80
     4b6:	d000      	beq.n	4ba <am_util_faultisr_collect_data+0x1ae>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
     4b8:	e01f      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
        {
            case 0x80:
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
     4ba:	4833      	ldr	r0, [pc, #204]	; (588 <am_util_faultisr_collect_data+0x27c>)
     4bc:	f000 feee 	bl	129c <am_util_stdio_printf>
                break;
     4c0:	e01b      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x40:
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
     4c2:	4832      	ldr	r0, [pc, #200]	; (58c <am_util_faultisr_collect_data+0x280>)
     4c4:	f000 feea 	bl	129c <am_util_stdio_printf>
                break;
     4c8:	e017      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x20:
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
     4ca:	4831      	ldr	r0, [pc, #196]	; (590 <am_util_faultisr_collect_data+0x284>)
     4cc:	f000 fee6 	bl	129c <am_util_stdio_printf>
                break;
     4d0:	e013      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x10:
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
     4d2:	4830      	ldr	r0, [pc, #192]	; (594 <am_util_faultisr_collect_data+0x288>)
     4d4:	f000 fee2 	bl	129c <am_util_stdio_printf>
                break;
     4d8:	e00f      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x08:
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
     4da:	482f      	ldr	r0, [pc, #188]	; (598 <am_util_faultisr_collect_data+0x28c>)
     4dc:	f000 fede 	bl	129c <am_util_stdio_printf>
                break;
     4e0:	e00b      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x04:
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
     4e2:	482e      	ldr	r0, [pc, #184]	; (59c <am_util_faultisr_collect_data+0x290>)
     4e4:	f000 feda 	bl	129c <am_util_stdio_printf>
                break;
     4e8:	e007      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x02:
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
     4ea:	482d      	ldr	r0, [pc, #180]	; (5a0 <am_util_faultisr_collect_data+0x294>)
     4ec:	f000 fed6 	bl	129c <am_util_stdio_printf>
                break;
     4f0:	e003      	b.n	4fa <am_util_faultisr_collect_data+0x1ee>
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
     4f2:	482c      	ldr	r0, [pc, #176]	; (5a4 <am_util_faultisr_collect_data+0x298>)
     4f4:	f000 fed2 	bl	129c <am_util_stdio_printf>
                break;
     4f8:	bf00      	nop
            default:
                break;
        }
        u32Mask >>= 1;
     4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     4fc:	085b      	lsrs	r3, r3, #1
     4fe:	657b      	str	r3, [r7, #84]	; 0x54

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
     500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     502:	2b00      	cmp	r3, #0
     504:	d1bc      	bne.n	480 <am_util_faultisr_collect_data+0x174>
    }
    
    //
    // Print out any Apollo2 Internal fault information.
    //
    am_util_stdio_printf("Apollo2 Fault data:\n");
     506:	4828      	ldr	r0, [pc, #160]	; (5a8 <am_util_faultisr_collect_data+0x29c>)
     508:	f000 fec8 	bl	129c <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
     50c:	7b3b      	ldrb	r3, [r7, #12]
     50e:	2b00      	cmp	r3, #0
     510:	d004      	beq.n	51c <am_util_faultisr_collect_data+0x210>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
     512:	693b      	ldr	r3, [r7, #16]
     514:	4619      	mov	r1, r3
     516:	4825      	ldr	r0, [pc, #148]	; (5ac <am_util_faultisr_collect_data+0x2a0>)
     518:	f000 fec0 	bl	129c <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
     51c:	7d3b      	ldrb	r3, [r7, #20]
     51e:	2b00      	cmp	r3, #0
     520:	d004      	beq.n	52c <am_util_faultisr_collect_data+0x220>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
     522:	69bb      	ldr	r3, [r7, #24]
     524:	4619      	mov	r1, r3
     526:	4822      	ldr	r0, [pc, #136]	; (5b0 <am_util_faultisr_collect_data+0x2a4>)
     528:	f000 feb8 	bl	129c <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
     52c:	7f3b      	ldrb	r3, [r7, #28]
     52e:	2b00      	cmp	r3, #0
     530:	d004      	beq.n	53c <am_util_faultisr_collect_data+0x230>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
     532:	6a3b      	ldr	r3, [r7, #32]
     534:	4619      	mov	r1, r3
     536:	481f      	ldr	r0, [pc, #124]	; (5b4 <am_util_faultisr_collect_data+0x2a8>)
     538:	f000 feb0 	bl	129c <am_util_stdio_printf>
    }


#endif

    u32Mask = 0;
     53c:	2300      	movs	r3, #0
     53e:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     540:	e7fe      	b.n	540 <am_util_faultisr_collect_data+0x234>
     542:	bf00      	nop
     544:	e000ed28 	.word	0xe000ed28
     548:	e000ed38 	.word	0xe000ed38
     54c:	00001e40 	.word	0x00001e40
     550:	00001e5c 	.word	0x00001e5c
     554:	00001e70 	.word	0x00001e70
     558:	00001e84 	.word	0x00001e84
     55c:	00001e98 	.word	0x00001e98
     560:	00001eac 	.word	0x00001eac
     564:	00001ec0 	.word	0x00001ec0
     568:	00001ed4 	.word	0x00001ed4
     56c:	00001ee8 	.word	0x00001ee8
     570:	00001efc 	.word	0x00001efc
     574:	00001f14 	.word	0x00001f14
     578:	00001f30 	.word	0x00001f30
     57c:	00001f58 	.word	0x00001f58
     580:	00001f88 	.word	0x00001f88
     584:	00001fb4 	.word	0x00001fb4
     588:	00001fe0 	.word	0x00001fe0
     58c:	00002000 	.word	0x00002000
     590:	00002020 	.word	0x00002020
     594:	0000203c 	.word	0x0000203c
     598:	00002058 	.word	0x00002058
     59c:	00002078 	.word	0x00002078
     5a0:	00002098 	.word	0x00002098
     5a4:	000020b8 	.word	0x000020b8
     5a8:	000020d4 	.word	0x000020d4
     5ac:	000020ec 	.word	0x000020ec
     5b0:	0000210c 	.word	0x0000210c
     5b4:	0000212c 	.word	0x0000212c

000005b8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5b8:	b480      	push	{r7}
     5ba:	b083      	sub	sp, #12
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5c0:	4a04      	ldr	r2, [pc, #16]	; (5d4 <am_util_stdio_printf_init+0x1c>)
     5c2:	687b      	ldr	r3, [r7, #4]
     5c4:	6013      	str	r3, [r2, #0]
}
     5c6:	bf00      	nop
     5c8:	370c      	adds	r7, #12
     5ca:	46bd      	mov	sp, r7
     5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5d0:	4770      	bx	lr
     5d2:	bf00      	nop
     5d4:	10001164 	.word	0x10001164

000005d8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     5d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5dc:	b096      	sub	sp, #88	; 0x58
     5de:	af00      	add	r7, sp, #0
     5e0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     5e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5e8:	0025      	movs	r5, r4
     5ea:	2600      	movs	r6, #0
     5ec:	ea55 0306 	orrs.w	r3, r5, r6
     5f0:	f000 809e 	beq.w	730 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     5f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5f8:	0862      	lsrs	r2, r4, #1
     5fa:	ea4f 0133 	mov.w	r1, r3, rrx
     5fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     602:	ea4f 0893 	mov.w	r8, r3, lsr #2
     606:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     60a:	ea4f 0994 	mov.w	r9, r4, lsr #2
     60e:	eb11 0308 	adds.w	r3, r1, r8
     612:	eb42 0409 	adc.w	r4, r2, r9
     616:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     61a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     61e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     622:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     626:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     62a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     62e:	eb13 030a 	adds.w	r3, r3, sl
     632:	eb44 040b 	adc.w	r4, r4, fp
     636:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     63a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     63e:	0a1a      	lsrs	r2, r3, #8
     640:	62ba      	str	r2, [r7, #40]	; 0x28
     642:	6aba      	ldr	r2, [r7, #40]	; 0x28
     644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     648:	62ba      	str	r2, [r7, #40]	; 0x28
     64a:	0a23      	lsrs	r3, r4, #8
     64c:	62fb      	str	r3, [r7, #44]	; 0x2c
     64e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     652:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     656:	18c9      	adds	r1, r1, r3
     658:	eb42 0204 	adc.w	r2, r2, r4
     65c:	460b      	mov	r3, r1
     65e:	4614      	mov	r4, r2
     660:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     664:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     668:	0c1a      	lsrs	r2, r3, #16
     66a:	623a      	str	r2, [r7, #32]
     66c:	6a3a      	ldr	r2, [r7, #32]
     66e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     672:	623a      	str	r2, [r7, #32]
     674:	0c23      	lsrs	r3, r4, #16
     676:	627b      	str	r3, [r7, #36]	; 0x24
     678:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     67c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     680:	18c9      	adds	r1, r1, r3
     682:	eb42 0204 	adc.w	r2, r2, r4
     686:	460b      	mov	r3, r1
     688:	4614      	mov	r4, r2
     68a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     68e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     692:	0023      	movs	r3, r4
     694:	603b      	str	r3, [r7, #0]
     696:	2300      	movs	r3, #0
     698:	607b      	str	r3, [r7, #4]
     69a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     69e:	e897 0006 	ldmia.w	r7, {r1, r2}
     6a2:	18c9      	adds	r1, r1, r3
     6a4:	eb42 0204 	adc.w	r2, r2, r4
     6a8:	460b      	mov	r3, r1
     6aa:	4614      	mov	r4, r2
     6ac:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6b4:	08da      	lsrs	r2, r3, #3
     6b6:	613a      	str	r2, [r7, #16]
     6b8:	693a      	ldr	r2, [r7, #16]
     6ba:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6be:	613a      	str	r2, [r7, #16]
     6c0:	08e3      	lsrs	r3, r4, #3
     6c2:	617b      	str	r3, [r7, #20]
     6c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6c8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     6cc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6d0:	18db      	adds	r3, r3, r3
     6d2:	eb44 0404 	adc.w	r4, r4, r4
     6d6:	00a2      	lsls	r2, r4, #2
     6d8:	60fa      	str	r2, [r7, #12]
     6da:	68fa      	ldr	r2, [r7, #12]
     6dc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     6e0:	60fa      	str	r2, [r7, #12]
     6e2:	009a      	lsls	r2, r3, #2
     6e4:	60ba      	str	r2, [r7, #8]
     6e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     6ea:	18c9      	adds	r1, r1, r3
     6ec:	eb42 0204 	adc.w	r2, r2, r4
     6f0:	460b      	mov	r3, r1
     6f2:	4614      	mov	r4, r2
     6f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     6f8:	1acb      	subs	r3, r1, r3
     6fa:	eb62 0404 	sbc.w	r4, r2, r4
     6fe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     702:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     706:	3306      	adds	r3, #6
     708:	f144 0400 	adc.w	r4, r4, #0
     70c:	091a      	lsrs	r2, r3, #4
     70e:	61ba      	str	r2, [r7, #24]
     710:	69ba      	ldr	r2, [r7, #24]
     712:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     716:	61ba      	str	r2, [r7, #24]
     718:	0923      	lsrs	r3, r4, #4
     71a:	61fb      	str	r3, [r7, #28]
     71c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     720:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     724:	18c9      	adds	r1, r1, r3
     726:	eb42 0204 	adc.w	r2, r2, r4
     72a:	460b      	mov	r3, r1
     72c:	4614      	mov	r4, r2
     72e:	e029      	b.n	784 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     732:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     736:	085a      	lsrs	r2, r3, #1
     738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     73a:	089b      	lsrs	r3, r3, #2
     73c:	4413      	add	r3, r2
     73e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     742:	091b      	lsrs	r3, r3, #4
     744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     746:	4413      	add	r3, r2
     748:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     74c:	0a1b      	lsrs	r3, r3, #8
     74e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     750:	4413      	add	r3, r2
     752:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     756:	0c1b      	lsrs	r3, r3, #16
     758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     75a:	4413      	add	r3, r2
     75c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     760:	08db      	lsrs	r3, r3, #3
     762:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     766:	4613      	mov	r3, r2
     768:	009b      	lsls	r3, r3, #2
     76a:	4413      	add	r3, r2
     76c:	005b      	lsls	r3, r3, #1
     76e:	461a      	mov	r2, r3
     770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     772:	1a9b      	subs	r3, r3, r2
     774:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     778:	3306      	adds	r3, #6
     77a:	091a      	lsrs	r2, r3, #4
     77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     77e:	4413      	add	r3, r2
     780:	f04f 0400 	mov.w	r4, #0
    }
}
     784:	4618      	mov	r0, r3
     786:	4621      	mov	r1, r4
     788:	3758      	adds	r7, #88	; 0x58
     78a:	46bd      	mov	sp, r7
     78c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     790:	4770      	bx	lr
     792:	bf00      	nop

00000794 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     794:	b590      	push	{r4, r7, lr}
     796:	b085      	sub	sp, #20
     798:	af00      	add	r7, sp, #0
     79a:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     79e:	683a      	ldr	r2, [r7, #0]
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	4313      	orrs	r3, r2
     7a4:	2b00      	cmp	r3, #0
     7a6:	bf0c      	ite	eq
     7a8:	2301      	moveq	r3, #1
     7aa:	2300      	movne	r3, #0
     7ac:	b2db      	uxtb	r3, r3
     7ae:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7b0:	e008      	b.n	7c4 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7b2:	e9d7 0100 	ldrd	r0, r1, [r7]
     7b6:	f7ff ff0f 	bl	5d8 <divu64_10>
     7ba:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7be:	68fb      	ldr	r3, [r7, #12]
     7c0:	3301      	adds	r3, #1
     7c2:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     7c4:	e897 0018 	ldmia.w	r7, {r3, r4}
     7c8:	4323      	orrs	r3, r4
     7ca:	d1f2      	bne.n	7b2 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     7cc:	68fb      	ldr	r3, [r7, #12]
}
     7ce:	4618      	mov	r0, r3
     7d0:	3714      	adds	r7, #20
     7d2:	46bd      	mov	sp, r7
     7d4:	bd90      	pop	{r4, r7, pc}
     7d6:	bf00      	nop

000007d8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b083      	sub	sp, #12
     7dc:	af00      	add	r7, sp, #0
     7de:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     7e2:	e897 0018 	ldmia.w	r7, {r3, r4}
     7e6:	2b00      	cmp	r3, #0
     7e8:	f174 0300 	sbcs.w	r3, r4, #0
     7ec:	da06      	bge.n	7fc <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     7ee:	e897 0018 	ldmia.w	r7, {r3, r4}
     7f2:	425b      	negs	r3, r3
     7f4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     7f8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     7fc:	e897 0018 	ldmia.w	r7, {r3, r4}
     800:	4618      	mov	r0, r3
     802:	4621      	mov	r1, r4
     804:	f7ff ffc6 	bl	794 <ndigits_in_u64>
     808:	4603      	mov	r3, r0
}
     80a:	4618      	mov	r0, r3
     80c:	370c      	adds	r7, #12
     80e:	46bd      	mov	sp, r7
     810:	bd90      	pop	{r4, r7, pc}
     812:	bf00      	nop

00000814 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     814:	b490      	push	{r4, r7}
     816:	b084      	sub	sp, #16
     818:	af00      	add	r7, sp, #0
     81a:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     81e:	6839      	ldr	r1, [r7, #0]
     820:	687a      	ldr	r2, [r7, #4]
     822:	430a      	orrs	r2, r1
     824:	2a00      	cmp	r2, #0
     826:	bf0c      	ite	eq
     828:	2201      	moveq	r2, #1
     82a:	2200      	movne	r2, #0
     82c:	b2d2      	uxtb	r2, r2
     82e:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     830:	e00a      	b.n	848 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     832:	e897 0006 	ldmia.w	r7, {r1, r2}
     836:	090b      	lsrs	r3, r1, #4
     838:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     83c:	0914      	lsrs	r4, r2, #4
     83e:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     842:	68fa      	ldr	r2, [r7, #12]
     844:	3201      	adds	r2, #1
     846:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     848:	e897 0006 	ldmia.w	r7, {r1, r2}
     84c:	430a      	orrs	r2, r1
     84e:	d1f0      	bne.n	832 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     850:	68fb      	ldr	r3, [r7, #12]
}
     852:	4618      	mov	r0, r3
     854:	3710      	adds	r7, #16
     856:	46bd      	mov	sp, r7
     858:	bc90      	pop	{r4, r7}
     85a:	4770      	bx	lr

0000085c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     85c:	b480      	push	{r7}
     85e:	b087      	sub	sp, #28
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     866:	2300      	movs	r3, #0
     868:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     86a:	2300      	movs	r3, #0
     86c:	613b      	str	r3, [r7, #16]
     86e:	2300      	movs	r3, #0
     870:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     872:	687b      	ldr	r3, [r7, #4]
     874:	781b      	ldrb	r3, [r3, #0]
     876:	2b2d      	cmp	r3, #45	; 0x2d
     878:	d11b      	bne.n	8b2 <decstr_to_int+0x56>
    {
        bNeg = true;
     87a:	2301      	movs	r3, #1
     87c:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	3301      	adds	r3, #1
     882:	607b      	str	r3, [r7, #4]
        uCnt++;
     884:	68fb      	ldr	r3, [r7, #12]
     886:	3301      	adds	r3, #1
     888:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     88a:	e012      	b.n	8b2 <decstr_to_int+0x56>
    {
        ++uCnt;
     88c:	68fb      	ldr	r3, [r7, #12]
     88e:	3301      	adds	r3, #1
     890:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     892:	693a      	ldr	r2, [r7, #16]
     894:	4613      	mov	r3, r2
     896:	009b      	lsls	r3, r3, #2
     898:	4413      	add	r3, r2
     89a:	005b      	lsls	r3, r3, #1
     89c:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	461a      	mov	r2, r3
     8a4:	693b      	ldr	r3, [r7, #16]
     8a6:	4413      	add	r3, r2
     8a8:	3b30      	subs	r3, #48	; 0x30
     8aa:	613b      	str	r3, [r7, #16]
        pcStr++;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	3301      	adds	r3, #1
     8b0:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	2b2f      	cmp	r3, #47	; 0x2f
     8b8:	d903      	bls.n	8c2 <decstr_to_int+0x66>
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b39      	cmp	r3, #57	; 0x39
     8c0:	d9e4      	bls.n	88c <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     8c2:	683b      	ldr	r3, [r7, #0]
     8c4:	2b00      	cmp	r3, #0
     8c6:	d002      	beq.n	8ce <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     8ce:	7dfb      	ldrb	r3, [r7, #23]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d002      	beq.n	8da <decstr_to_int+0x7e>
     8d4:	693b      	ldr	r3, [r7, #16]
     8d6:	425b      	negs	r3, r3
     8d8:	e000      	b.n	8dc <decstr_to_int+0x80>
     8da:	693b      	ldr	r3, [r7, #16]
}
     8dc:	4618      	mov	r0, r3
     8de:	371c      	adds	r7, #28
     8e0:	46bd      	mov	sp, r7
     8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e6:	4770      	bx	lr

000008e8 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     8e8:	b590      	push	{r4, r7, lr}
     8ea:	b091      	sub	sp, #68	; 0x44
     8ec:	af00      	add	r7, sp, #0
     8ee:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8f2:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     8f4:	2300      	movs	r3, #0
     8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
     8f8:	2300      	movs	r3, #0
     8fa:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     8fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     900:	f7ff fe6a 	bl	5d8 <divu64_10>
     904:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     908:	68b9      	ldr	r1, [r7, #8]
     90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     90c:	4613      	mov	r3, r2
     90e:	009b      	lsls	r3, r3, #2
     910:	4413      	add	r3, r2
     912:	005b      	lsls	r3, r3, #1
     914:	1acb      	subs	r3, r1, r3
     916:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     91a:	1c5a      	adds	r2, r3, #1
     91c:	63fa      	str	r2, [r7, #60]	; 0x3c
     91e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     920:	b2d2      	uxtb	r2, r2
     922:	3230      	adds	r2, #48	; 0x30
     924:	b2d2      	uxtb	r2, r2
     926:	f107 0140 	add.w	r1, r7, #64	; 0x40
     92a:	440b      	add	r3, r1
     92c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     930:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     934:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     938:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     93c:	4323      	orrs	r3, r4
     93e:	d1dd      	bne.n	8fc <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     942:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     944:	687b      	ldr	r3, [r7, #4]
     946:	2b00      	cmp	r3, #0
     948:	d011      	beq.n	96e <uint64_to_str+0x86>
    {
        while ( ix-- )
     94a:	e008      	b.n	95e <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	1c5a      	adds	r2, r3, #1
     950:	607a      	str	r2, [r7, #4]
     952:	f107 0110 	add.w	r1, r7, #16
     956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     958:	440a      	add	r2, r1
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     960:	1e5a      	subs	r2, r3, #1
     962:	63fa      	str	r2, [r7, #60]	; 0x3c
     964:	2b00      	cmp	r3, #0
     966:	d1f1      	bne.n	94c <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     968:	687b      	ldr	r3, [r7, #4]
     96a:	2200      	movs	r2, #0
     96c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     970:	4618      	mov	r0, r3
     972:	3744      	adds	r7, #68	; 0x44
     974:	46bd      	mov	sp, r7
     976:	bd90      	pop	{r4, r7, pc}

00000978 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     978:	b4b0      	push	{r4, r5, r7}
     97a:	b08d      	sub	sp, #52	; 0x34
     97c:	af00      	add	r7, sp, #0
     97e:	e9c7 0102 	strd	r0, r1, [r7, #8]
     982:	607a      	str	r2, [r7, #4]
     984:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     986:	2300      	movs	r3, #0
     988:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     98a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     98e:	4313      	orrs	r3, r2
     990:	d131      	bne.n	9f6 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     994:	1c5a      	adds	r2, r3, #1
     996:	62fa      	str	r2, [r7, #44]	; 0x2c
     998:	f107 0230 	add.w	r2, r7, #48	; 0x30
     99c:	4413      	add	r3, r2
     99e:	2230      	movs	r2, #48	; 0x30
     9a0:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9a4:	e027      	b.n	9f6 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9a6:	7a3b      	ldrb	r3, [r7, #8]
     9a8:	f003 030f 	and.w	r3, r3, #15
     9ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9b4:	2b09      	cmp	r3, #9
     9b6:	d90a      	bls.n	9ce <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9b8:	78fb      	ldrb	r3, [r7, #3]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d001      	beq.n	9c2 <uint64_to_hexstr+0x4a>
     9be:	2227      	movs	r2, #39	; 0x27
     9c0:	e000      	b.n	9c4 <uint64_to_hexstr+0x4c>
     9c2:	2207      	movs	r2, #7
     9c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9c8:	4413      	add	r3, r2
     9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9d0:	1c5a      	adds	r2, r3, #1
     9d2:	62fa      	str	r2, [r7, #44]	; 0x2c
     9d4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     9d8:	3230      	adds	r2, #48	; 0x30
     9da:	b2d2      	uxtb	r2, r2
     9dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
     9e0:	440b      	add	r3, r1
     9e2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     9e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9ea:	0914      	lsrs	r4, r2, #4
     9ec:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     9f0:	091d      	lsrs	r5, r3, #4
     9f2:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     9f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9fa:	4313      	orrs	r3, r2
     9fc:	d1d3      	bne.n	9a6 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a00:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	2b00      	cmp	r3, #0
     a06:	d011      	beq.n	a2c <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a08:	e008      	b.n	a1c <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	607a      	str	r2, [r7, #4]
     a10:	f107 0110 	add.w	r1, r7, #16
     a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a16:	440a      	add	r2, r1
     a18:	7812      	ldrb	r2, [r2, #0]
     a1a:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a1e:	1e5a      	subs	r2, r3, #1
     a20:	62fa      	str	r2, [r7, #44]	; 0x2c
     a22:	2b00      	cmp	r3, #0
     a24:	d1f1      	bne.n	a0a <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	2200      	movs	r2, #0
     a2a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a2e:	4618      	mov	r0, r3
     a30:	3734      	adds	r7, #52	; 0x34
     a32:	46bd      	mov	sp, r7
     a34:	bcb0      	pop	{r4, r5, r7}
     a36:	4770      	bx	lr

00000a38 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a38:	b480      	push	{r7}
     a3a:	b085      	sub	sp, #20
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a40:	2300      	movs	r3, #0
     a42:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	2b00      	cmp	r3, #0
     a48:	d104      	bne.n	a54 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	e009      	b.n	a62 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a4e:	68fb      	ldr	r3, [r7, #12]
     a50:	3301      	adds	r3, #1
     a52:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	1c5a      	adds	r2, r3, #1
     a58:	607a      	str	r2, [r7, #4]
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d1f6      	bne.n	a4e <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     a60:	68fb      	ldr	r3, [r7, #12]
}
     a62:	4618      	mov	r0, r3
     a64:	3714      	adds	r7, #20
     a66:	46bd      	mov	sp, r7
     a68:	f85d 7b04 	ldr.w	r7, [sp], #4
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop

00000a70 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a70:	b480      	push	{r7}
     a72:	b087      	sub	sp, #28
     a74:	af00      	add	r7, sp, #0
     a76:	60f8      	str	r0, [r7, #12]
     a78:	460b      	mov	r3, r1
     a7a:	607a      	str	r2, [r7, #4]
     a7c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     a7e:	2300      	movs	r3, #0
     a80:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	2b00      	cmp	r3, #0
     a86:	dc0c      	bgt.n	aa2 <padbuffer+0x32>
    {
        return i32Cnt;
     a88:	697b      	ldr	r3, [r7, #20]
     a8a:	e010      	b.n	aae <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a8c:	68fb      	ldr	r3, [r7, #12]
     a8e:	2b00      	cmp	r3, #0
     a90:	d004      	beq.n	a9c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	1c5a      	adds	r2, r3, #1
     a96:	60fa      	str	r2, [r7, #12]
     a98:	7afa      	ldrb	r2, [r7, #11]
     a9a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a9c:	697b      	ldr	r3, [r7, #20]
     a9e:	3301      	adds	r3, #1
     aa0:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	1e5a      	subs	r2, r3, #1
     aa6:	607a      	str	r2, [r7, #4]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d1ef      	bne.n	a8c <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     aac:	697b      	ldr	r3, [r7, #20]
}
     aae:	4618      	mov	r0, r3
     ab0:	371c      	adds	r7, #28
     ab2:	46bd      	mov	sp, r7
     ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab8:	4770      	bx	lr
     aba:	bf00      	nop

00000abc <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     abc:	b590      	push	{r4, r7, lr}
     abe:	b08f      	sub	sp, #60	; 0x3c
     ac0:	af00      	add	r7, sp, #0
     ac2:	60f8      	str	r0, [r7, #12]
     ac4:	60b9      	str	r1, [r7, #8]
     ac6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     ac8:	68bb      	ldr	r3, [r7, #8]
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ad0:	2b03      	cmp	r3, #3
     ad2:	dc02      	bgt.n	ada <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     ad4:	f06f 0302 	mvn.w	r3, #2
     ad8:	e0d4      	b.n	c84 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     ada:	edd7 7a03 	vldr	s15, [r7, #12]
     ade:	eef5 7a40 	vcmp.f32	s15, #0.0
     ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ae6:	d104      	bne.n	af2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     ae8:	68bb      	ldr	r3, [r7, #8]
     aea:	4a68      	ldr	r2, [pc, #416]	; (c8c <ftoa+0x1d0>)
     aec:	601a      	str	r2, [r3, #0]
        return 3;
     aee:	2303      	movs	r3, #3
     af0:	e0c8      	b.n	c84 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     af2:	68bb      	ldr	r3, [r7, #8]
     af4:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     afa:	697b      	ldr	r3, [r7, #20]
     afc:	15db      	asrs	r3, r3, #23
     afe:	b2db      	uxtb	r3, r3
     b00:	3b7f      	subs	r3, #127	; 0x7f
     b02:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b04:	697b      	ldr	r3, [r7, #20]
     b06:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b0e:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     b10:	2300      	movs	r3, #0
     b12:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b14:	2300      	movs	r3, #0
     b16:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b18:	6a3b      	ldr	r3, [r7, #32]
     b1a:	2b1e      	cmp	r3, #30
     b1c:	dd02      	ble.n	b24 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b1e:	f06f 0301 	mvn.w	r3, #1
     b22:	e0af      	b.n	c84 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     b24:	6a3b      	ldr	r3, [r7, #32]
     b26:	f113 0f17 	cmn.w	r3, #23
     b2a:	da02      	bge.n	b32 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b2c:	f04f 33ff 	mov.w	r3, #4294967295
     b30:	e0a8      	b.n	c84 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     b32:	6a3b      	ldr	r3, [r7, #32]
     b34:	2b16      	cmp	r3, #22
     b36:	dd06      	ble.n	b46 <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     b38:	6a3b      	ldr	r3, [r7, #32]
     b3a:	3b17      	subs	r3, #23
     b3c:	69fa      	ldr	r2, [r7, #28]
     b3e:	fa02 f303 	lsl.w	r3, r2, r3
     b42:	637b      	str	r3, [r7, #52]	; 0x34
     b44:	e01a      	b.n	b7c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b46:	6a3b      	ldr	r3, [r7, #32]
     b48:	2b00      	cmp	r3, #0
     b4a:	db0f      	blt.n	b6c <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     b4c:	6a3b      	ldr	r3, [r7, #32]
     b4e:	f1c3 0317 	rsb	r3, r3, #23
     b52:	69fa      	ldr	r2, [r7, #28]
     b54:	fa42 f303 	asr.w	r3, r2, r3
     b58:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     b5a:	6a3b      	ldr	r3, [r7, #32]
     b5c:	3301      	adds	r3, #1
     b5e:	69fa      	ldr	r2, [r7, #28]
     b60:	fa02 f303 	lsl.w	r3, r2, r3
     b64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b68:	633b      	str	r3, [r7, #48]	; 0x30
     b6a:	e007      	b.n	b7c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     b6c:	69fb      	ldr	r3, [r7, #28]
     b6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b72:	6a3b      	ldr	r3, [r7, #32]
     b74:	43db      	mvns	r3, r3
     b76:	fa42 f303 	asr.w	r3, r2, r3
     b7a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     b7c:	697b      	ldr	r3, [r7, #20]
     b7e:	2b00      	cmp	r3, #0
     b80:	da04      	bge.n	b8c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     b82:	68bb      	ldr	r3, [r7, #8]
     b84:	1c5a      	adds	r2, r3, #1
     b86:	60ba      	str	r2, [r7, #8]
     b88:	222d      	movs	r2, #45	; 0x2d
     b8a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b8e:	2b00      	cmp	r3, #0
     b90:	d105      	bne.n	b9e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b92:	68bb      	ldr	r3, [r7, #8]
     b94:	1c5a      	adds	r2, r3, #1
     b96:	60ba      	str	r2, [r7, #8]
     b98:	2230      	movs	r2, #48	; 0x30
     b9a:	701a      	strb	r2, [r3, #0]
     b9c:	e021      	b.n	be2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ba0:	2b00      	cmp	r3, #0
     ba2:	dd08      	ble.n	bb6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ba6:	ea4f 74e3 	mov.w	r4, r3, asr #31
     baa:	68ba      	ldr	r2, [r7, #8]
     bac:	4618      	mov	r0, r3
     bae:	4621      	mov	r1, r4
     bb0:	f7ff fe9a 	bl	8e8 <uint64_to_str>
     bb4:	e011      	b.n	bda <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	1c5a      	adds	r2, r3, #1
     bba:	60ba      	str	r2, [r7, #8]
     bbc:	222d      	movs	r2, #45	; 0x2d
     bbe:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc2:	425b      	negs	r3, r3
     bc4:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bc8:	68ba      	ldr	r2, [r7, #8]
     bca:	4618      	mov	r0, r3
     bcc:	4621      	mov	r1, r4
     bce:	f7ff fe8b 	bl	8e8 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     bd2:	e002      	b.n	bda <ftoa+0x11e>
        {
            pcBuf++;
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	3301      	adds	r3, #1
     bd8:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     bda:	68bb      	ldr	r3, [r7, #8]
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	2b00      	cmp	r3, #0
     be0:	d1f8      	bne.n	bd4 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	1c5a      	adds	r2, r3, #1
     be6:	60ba      	str	r2, [r7, #8]
     be8:	222e      	movs	r2, #46	; 0x2e
     bea:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bee:	2b00      	cmp	r3, #0
     bf0:	d105      	bne.n	bfe <ftoa+0x142>
    {
        *pcBuf++ = '0';
     bf2:	68bb      	ldr	r3, [r7, #8]
     bf4:	1c5a      	adds	r2, r3, #1
     bf6:	60ba      	str	r2, [r7, #8]
     bf8:	2230      	movs	r2, #48	; 0x30
     bfa:	701a      	strb	r2, [r3, #0]
     bfc:	e03c      	b.n	c78 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     bfe:	68ba      	ldr	r2, [r7, #8]
     c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c02:	1ad3      	subs	r3, r2, r3
     c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c06:	1ad3      	subs	r3, r2, r3
     c08:	3b01      	subs	r3, #1
     c0a:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c0c:	69ba      	ldr	r2, [r7, #24]
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	4293      	cmp	r3, r2
     c12:	bfa8      	it	ge
     c14:	4613      	movge	r3, r2
     c16:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     c18:	2300      	movs	r3, #0
     c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
     c1c:	e015      	b.n	c4a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c20:	4613      	mov	r3, r2
     c22:	009b      	lsls	r3, r3, #2
     c24:	4413      	add	r3, r2
     c26:	005b      	lsls	r3, r3, #1
     c28:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c2a:	68bb      	ldr	r3, [r7, #8]
     c2c:	1c5a      	adds	r2, r3, #1
     c2e:	60ba      	str	r2, [r7, #8]
     c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c32:	1612      	asrs	r2, r2, #24
     c34:	b2d2      	uxtb	r2, r2
     c36:	3230      	adds	r2, #48	; 0x30
     c38:	b2d2      	uxtb	r2, r2
     c3a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c42:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c46:	3301      	adds	r3, #1
     c48:	62fb      	str	r3, [r7, #44]	; 0x2c
     c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c4c:	69bb      	ldr	r3, [r7, #24]
     c4e:	429a      	cmp	r2, r3
     c50:	dbe5      	blt.n	c1e <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     c52:	68bb      	ldr	r3, [r7, #8]
     c54:	3b01      	subs	r3, #1
     c56:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c58:	e002      	b.n	c60 <ftoa+0x1a4>
        {
            --pcBuf;
     c5a:	68bb      	ldr	r3, [r7, #8]
     c5c:	3b01      	subs	r3, #1
     c5e:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c60:	68bb      	ldr	r3, [r7, #8]
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	2b30      	cmp	r3, #48	; 0x30
     c66:	d104      	bne.n	c72 <ftoa+0x1b6>
     c68:	68bb      	ldr	r3, [r7, #8]
     c6a:	3b01      	subs	r3, #1
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	2b2e      	cmp	r3, #46	; 0x2e
     c70:	d1f3      	bne.n	c5a <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     c72:	68bb      	ldr	r3, [r7, #8]
     c74:	3301      	adds	r3, #1
     c76:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c78:	68bb      	ldr	r3, [r7, #8]
     c7a:	2200      	movs	r2, #0
     c7c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c7e:	68ba      	ldr	r2, [r7, #8]
     c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c82:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c84:	4618      	mov	r0, r3
     c86:	373c      	adds	r7, #60	; 0x3c
     c88:	46bd      	mov	sp, r7
     c8a:	bd90      	pop	{r4, r7, pc}
     c8c:	00302e30 	.word	0x00302e30

00000c90 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c90:	b590      	push	{r4, r7, lr}
     c92:	b095      	sub	sp, #84	; 0x54
     c94:	af00      	add	r7, sp, #0
     c96:	60f8      	str	r0, [r7, #12]
     c98:	60b9      	str	r1, [r7, #8]
     c9a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c9c:	2300      	movs	r3, #0
     c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     ca0:	2300      	movs	r3, #0
     ca2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     ca4:	e2e3      	b.n	126e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     ca6:	2306      	movs	r3, #6
     ca8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     caa:	68bb      	ldr	r3, [r7, #8]
     cac:	781b      	ldrb	r3, [r3, #0]
     cae:	2b25      	cmp	r3, #37	; 0x25
     cb0:	d01f      	beq.n	cf2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     cb2:	68fb      	ldr	r3, [r7, #12]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d015      	beq.n	ce4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	781b      	ldrb	r3, [r3, #0]
     cbc:	2b0a      	cmp	r3, #10
     cbe:	d10b      	bne.n	cd8 <am_util_stdio_vsprintf+0x48>
     cc0:	4bb1      	ldr	r3, [pc, #708]	; (f88 <am_util_stdio_vsprintf+0x2f8>)
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d007      	beq.n	cd8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     cc8:	68fb      	ldr	r3, [r7, #12]
     cca:	1c5a      	adds	r2, r3, #1
     ccc:	60fa      	str	r2, [r7, #12]
     cce:	220d      	movs	r2, #13
     cd0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cd4:	3301      	adds	r3, #1
     cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     cd8:	68fb      	ldr	r3, [r7, #12]
     cda:	1c5a      	adds	r2, r3, #1
     cdc:	60fa      	str	r2, [r7, #12]
     cde:	68ba      	ldr	r2, [r7, #8]
     ce0:	7812      	ldrb	r2, [r2, #0]
     ce2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     ce4:	68bb      	ldr	r3, [r7, #8]
     ce6:	3301      	adds	r3, #1
     ce8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cec:	3301      	adds	r3, #1
     cee:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     cf0:	e2bd      	b.n	126e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	3301      	adds	r3, #1
     cf6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     cf8:	2300      	movs	r3, #0
     cfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     cfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d06:	2320      	movs	r3, #32
     d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d0c:	68bb      	ldr	r3, [r7, #8]
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b30      	cmp	r3, #48	; 0x30
     d12:	d105      	bne.n	d20 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d14:	2330      	movs	r3, #48	; 0x30
     d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d1a:	68bb      	ldr	r3, [r7, #8]
     d1c:	3301      	adds	r3, #1
     d1e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d20:	f107 0310 	add.w	r3, r7, #16
     d24:	4619      	mov	r1, r3
     d26:	68b8      	ldr	r0, [r7, #8]
     d28:	f7ff fd98 	bl	85c <decstr_to_int>
     d2c:	4603      	mov	r3, r0
     d2e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d30:	693b      	ldr	r3, [r7, #16]
     d32:	68ba      	ldr	r2, [r7, #8]
     d34:	4413      	add	r3, r2
     d36:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d38:	68bb      	ldr	r3, [r7, #8]
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b73      	cmp	r3, #115	; 0x73
     d3e:	d005      	beq.n	d4c <am_util_stdio_vsprintf+0xbc>
     d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d42:	2b00      	cmp	r3, #0
     d44:	da02      	bge.n	d4c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d48:	425b      	negs	r3, r3
     d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d4c:	68bb      	ldr	r3, [r7, #8]
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	2b2e      	cmp	r3, #46	; 0x2e
     d52:	d10e      	bne.n	d72 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d54:	68bb      	ldr	r3, [r7, #8]
     d56:	3301      	adds	r3, #1
     d58:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d5a:	f107 0310 	add.w	r3, r7, #16
     d5e:	4619      	mov	r1, r3
     d60:	68b8      	ldr	r0, [r7, #8]
     d62:	f7ff fd7b 	bl	85c <decstr_to_int>
     d66:	4603      	mov	r3, r0
     d68:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d6a:	693b      	ldr	r3, [r7, #16]
     d6c:	68ba      	ldr	r2, [r7, #8]
     d6e:	4413      	add	r3, r2
     d70:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b6c      	cmp	r3, #108	; 0x6c
     d78:	d10c      	bne.n	d94 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d7a:	68bb      	ldr	r3, [r7, #8]
     d7c:	3301      	adds	r3, #1
     d7e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	2b6c      	cmp	r3, #108	; 0x6c
     d86:	d105      	bne.n	d94 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	3301      	adds	r3, #1
     d8c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d8e:	2301      	movs	r3, #1
     d90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d94:	68bb      	ldr	r3, [r7, #8]
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	3b46      	subs	r3, #70	; 0x46
     d9a:	2b32      	cmp	r3, #50	; 0x32
     d9c:	f200 8254 	bhi.w	1248 <am_util_stdio_vsprintf+0x5b8>
     da0:	a201      	add	r2, pc, #4	; (adr r2, da8 <am_util_stdio_vsprintf+0x118>)
     da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     da6:	bf00      	nop
     da8:	000011d3 	.word	0x000011d3
     dac:	00001249 	.word	0x00001249
     db0:	00001249 	.word	0x00001249
     db4:	00001249 	.word	0x00001249
     db8:	00001249 	.word	0x00001249
     dbc:	00001249 	.word	0x00001249
     dc0:	00001249 	.word	0x00001249
     dc4:	00001249 	.word	0x00001249
     dc8:	00001249 	.word	0x00001249
     dcc:	00001249 	.word	0x00001249
     dd0:	00001249 	.word	0x00001249
     dd4:	00001249 	.word	0x00001249
     dd8:	00001249 	.word	0x00001249
     ddc:	00001249 	.word	0x00001249
     de0:	00001249 	.word	0x00001249
     de4:	00001249 	.word	0x00001249
     de8:	00001249 	.word	0x00001249
     dec:	00001249 	.word	0x00001249
     df0:	00000f6f 	.word	0x00000f6f
     df4:	00001249 	.word	0x00001249
     df8:	00001249 	.word	0x00001249
     dfc:	00001249 	.word	0x00001249
     e00:	00001249 	.word	0x00001249
     e04:	00001249 	.word	0x00001249
     e08:	00001249 	.word	0x00001249
     e0c:	00001249 	.word	0x00001249
     e10:	00001249 	.word	0x00001249
     e14:	00001249 	.word	0x00001249
     e18:	00001249 	.word	0x00001249
     e1c:	00000e75 	.word	0x00000e75
     e20:	0000109b 	.word	0x0000109b
     e24:	00001249 	.word	0x00001249
     e28:	000011d3 	.word	0x000011d3
     e2c:	00001249 	.word	0x00001249
     e30:	00001249 	.word	0x00001249
     e34:	0000109b 	.word	0x0000109b
     e38:	00001249 	.word	0x00001249
     e3c:	00001249 	.word	0x00001249
     e40:	00001249 	.word	0x00001249
     e44:	00001249 	.word	0x00001249
     e48:	00001249 	.word	0x00001249
     e4c:	00001249 	.word	0x00001249
     e50:	00001249 	.word	0x00001249
     e54:	00001249 	.word	0x00001249
     e58:	00001249 	.word	0x00001249
     e5c:	00000e9b 	.word	0x00000e9b
     e60:	00001249 	.word	0x00001249
     e64:	00001009 	.word	0x00001009
     e68:	00001249 	.word	0x00001249
     e6c:	00001249 	.word	0x00001249
     e70:	00000f69 	.word	0x00000f69
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	1d1a      	adds	r2, r3, #4
     e78:	607a      	str	r2, [r7, #4]
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e80:	68fb      	ldr	r3, [r7, #12]
     e82:	2b00      	cmp	r3, #0
     e84:	d005      	beq.n	e92 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	1c5a      	adds	r2, r3, #1
     e8a:	60fa      	str	r2, [r7, #12]
     e8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e90:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e94:	3301      	adds	r3, #1
     e96:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e98:	e1e6      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	1d1a      	adds	r2, r3, #4
     e9e:	607a      	str	r2, [r7, #4]
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ea4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     ea6:	f7ff fdc7 	bl	a38 <simple_strlen>
     eaa:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eae:	2b00      	cmp	r3, #0
     eb0:	dd2e      	ble.n	f10 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     eb6:	429a      	cmp	r2, r3
     eb8:	d22a      	bcs.n	f10 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ebe:	1ad3      	subs	r3, r2, r3
     ec0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ec8:	4619      	mov	r1, r3
     eca:	68f8      	ldr	r0, [r7, #12]
     ecc:	f7ff fdd0 	bl	a70 <padbuffer>
     ed0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d001      	beq.n	edc <am_util_stdio_vsprintf+0x24c>
     ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eda:	e000      	b.n	ede <am_util_stdio_vsprintf+0x24e>
     edc:	2300      	movs	r3, #0
     ede:	68fa      	ldr	r2, [r7, #12]
     ee0:	4413      	add	r3, r2
     ee2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ee8:	4413      	add	r3, r2
     eea:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     eec:	2300      	movs	r3, #0
     eee:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     ef0:	e00e      	b.n	f10 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d005      	beq.n	f04 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     ef8:	68fb      	ldr	r3, [r7, #12]
     efa:	1c5a      	adds	r2, r3, #1
     efc:	60fa      	str	r2, [r7, #12]
     efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f00:	7812      	ldrb	r2, [r2, #0]
     f02:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f06:	3301      	adds	r3, #1
     f08:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f0c:	3301      	adds	r3, #1
     f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	2b00      	cmp	r3, #0
     f16:	d1ec      	bne.n	ef2 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f1a:	2b00      	cmp	r3, #0
     f1c:	f000 81a1 	beq.w	1262 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f22:	425b      	negs	r3, r3
     f24:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f2a:	429a      	cmp	r2, r3
     f2c:	f080 8199 	bcs.w	1262 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f34:	1ad3      	subs	r3, r2, r3
     f36:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f3e:	4619      	mov	r1, r3
     f40:	68f8      	ldr	r0, [r7, #12]
     f42:	f7ff fd95 	bl	a70 <padbuffer>
     f46:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d001      	beq.n	f52 <am_util_stdio_vsprintf+0x2c2>
     f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f50:	e000      	b.n	f54 <am_util_stdio_vsprintf+0x2c4>
     f52:	2300      	movs	r3, #0
     f54:	68fa      	ldr	r2, [r7, #12]
     f56:	4413      	add	r3, r2
     f58:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f5e:	4413      	add	r3, r2
     f60:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f62:	2300      	movs	r3, #0
     f64:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f66:	e17c      	b.n	1262 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f68:	2301      	movs	r3, #1
     f6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f72:	2b00      	cmp	r3, #0
     f74:	d00a      	beq.n	f8c <am_util_stdio_vsprintf+0x2fc>
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	3307      	adds	r3, #7
     f7a:	f023 0307 	bic.w	r3, r3, #7
     f7e:	f103 0208 	add.w	r2, r3, #8
     f82:	607a      	str	r2, [r7, #4]
     f84:	cb18      	ldmia	r3, {r3, r4}
     f86:	e007      	b.n	f98 <am_util_stdio_vsprintf+0x308>
     f88:	10001150 	.word	0x10001150
                                      va_arg(pArgs, uint32_t);
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	1d1a      	adds	r2, r3, #4
     f90:	607a      	str	r2, [r7, #4]
     f92:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f94:	f04f 0400 	mov.w	r4, #0
     f98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9e:	2b00      	cmp	r3, #0
     fa0:	d01e      	beq.n	fe0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     fa2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fa6:	f7ff fc35 	bl	814 <ndigits_in_hex>
     faa:	4602      	mov	r2, r0
     fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fae:	1a9b      	subs	r3, r3, r2
     fb0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fb8:	4619      	mov	r1, r3
     fba:	68f8      	ldr	r0, [r7, #12]
     fbc:	f7ff fd58 	bl	a70 <padbuffer>
     fc0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d001      	beq.n	fcc <am_util_stdio_vsprintf+0x33c>
     fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fca:	e000      	b.n	fce <am_util_stdio_vsprintf+0x33e>
     fcc:	2300      	movs	r3, #0
     fce:	68fa      	ldr	r2, [r7, #12]
     fd0:	4413      	add	r3, r2
     fd2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fd8:	4413      	add	r3, r2
     fda:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fdc:	2300      	movs	r3, #0
     fde:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     fe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     fe4:	68fa      	ldr	r2, [r7, #12]
     fe6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fea:	f7ff fcc5 	bl	978 <uint64_to_hexstr>
     fee:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d003      	beq.n	ffe <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ff8:	68fa      	ldr	r2, [r7, #12]
     ffa:	4413      	add	r3, r2
     ffc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1002:	4413      	add	r3, r2
    1004:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1006:	e12f      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    100c:	2b00      	cmp	r3, #0
    100e:	d008      	beq.n	1022 <am_util_stdio_vsprintf+0x392>
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	3307      	adds	r3, #7
    1014:	f023 0307 	bic.w	r3, r3, #7
    1018:	f103 0208 	add.w	r2, r3, #8
    101c:	607a      	str	r2, [r7, #4]
    101e:	cb18      	ldmia	r3, {r3, r4}
    1020:	e005      	b.n	102e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	1d1a      	adds	r2, r3, #4
    1026:	607a      	str	r2, [r7, #4]
    1028:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    102a:	f04f 0400 	mov.w	r4, #0
    102e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1034:	2b00      	cmp	r3, #0
    1036:	d01e      	beq.n	1076 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1038:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    103c:	f7ff fbaa 	bl	794 <ndigits_in_u64>
    1040:	4602      	mov	r2, r0
    1042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1044:	1a9b      	subs	r3, r3, r2
    1046:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    104c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    104e:	4619      	mov	r1, r3
    1050:	68f8      	ldr	r0, [r7, #12]
    1052:	f7ff fd0d 	bl	a70 <padbuffer>
    1056:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1058:	68fb      	ldr	r3, [r7, #12]
    105a:	2b00      	cmp	r3, #0
    105c:	d001      	beq.n	1062 <am_util_stdio_vsprintf+0x3d2>
    105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1060:	e000      	b.n	1064 <am_util_stdio_vsprintf+0x3d4>
    1062:	2300      	movs	r3, #0
    1064:	68fa      	ldr	r2, [r7, #12]
    1066:	4413      	add	r3, r2
    1068:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    106c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    106e:	4413      	add	r3, r2
    1070:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1072:	2300      	movs	r3, #0
    1074:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1076:	68fa      	ldr	r2, [r7, #12]
    1078:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    107c:	f7ff fc34 	bl	8e8 <uint64_to_str>
    1080:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	2b00      	cmp	r3, #0
    1086:	d003      	beq.n	1090 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    108a:	68fa      	ldr	r2, [r7, #12]
    108c:	4413      	add	r3, r2
    108e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1094:	4413      	add	r3, r2
    1096:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1098:	e0e6      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    109a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    109e:	2b00      	cmp	r3, #0
    10a0:	d008      	beq.n	10b4 <am_util_stdio_vsprintf+0x424>
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	3307      	adds	r3, #7
    10a6:	f023 0307 	bic.w	r3, r3, #7
    10aa:	f103 0208 	add.w	r2, r3, #8
    10ae:	607a      	str	r2, [r7, #4]
    10b0:	cb18      	ldmia	r3, {r3, r4}
    10b2:	e005      	b.n	10c0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	1d1a      	adds	r2, r3, #4
    10b8:	607a      	str	r2, [r7, #4]
    10ba:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10bc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    10c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10c8:	2b00      	cmp	r3, #0
    10ca:	f174 0300 	sbcs.w	r3, r4, #0
    10ce:	da0a      	bge.n	10e6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    10d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10d4:	425b      	negs	r3, r3
    10d6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    10da:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    10de:	2301      	movs	r3, #1
    10e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    10e4:	e006      	b.n	10f4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    10e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10ea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    10ee:	2300      	movs	r3, #0
    10f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    10f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f6:	2b00      	cmp	r3, #0
    10f8:	d04a      	beq.n	1190 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    10fa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    10fe:	4618      	mov	r0, r3
    1100:	4621      	mov	r1, r4
    1102:	f7ff fb69 	bl	7d8 <ndigits_in_i64>
    1106:	4602      	mov	r2, r0
    1108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    110a:	1a9b      	subs	r3, r3, r2
    110c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    110e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1112:	2b00      	cmp	r3, #0
    1114:	d011      	beq.n	113a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1118:	3b01      	subs	r3, #1
    111a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    111c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1120:	2b30      	cmp	r3, #48	; 0x30
    1122:	d10a      	bne.n	113a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	2b00      	cmp	r3, #0
    1128:	d004      	beq.n	1134 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	1c5a      	adds	r2, r3, #1
    112e:	60fa      	str	r2, [r7, #12]
    1130:	222d      	movs	r2, #45	; 0x2d
    1132:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1136:	3301      	adds	r3, #1
    1138:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    113a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    113e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1140:	4619      	mov	r1, r3
    1142:	68f8      	ldr	r0, [r7, #12]
    1144:	f7ff fc94 	bl	a70 <padbuffer>
    1148:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    114a:	68fb      	ldr	r3, [r7, #12]
    114c:	2b00      	cmp	r3, #0
    114e:	d001      	beq.n	1154 <am_util_stdio_vsprintf+0x4c4>
    1150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1152:	e000      	b.n	1156 <am_util_stdio_vsprintf+0x4c6>
    1154:	2300      	movs	r3, #0
    1156:	68fa      	ldr	r2, [r7, #12]
    1158:	4413      	add	r3, r2
    115a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    115e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1160:	4413      	add	r3, r2
    1162:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1164:	2300      	movs	r3, #0
    1166:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1168:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    116c:	2b00      	cmp	r3, #0
    116e:	d01e      	beq.n	11ae <am_util_stdio_vsprintf+0x51e>
    1170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1174:	2b20      	cmp	r3, #32
    1176:	d11a      	bne.n	11ae <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	2b00      	cmp	r3, #0
    117c:	d004      	beq.n	1188 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	1c5a      	adds	r2, r3, #1
    1182:	60fa      	str	r2, [r7, #12]
    1184:	222d      	movs	r2, #45	; 0x2d
    1186:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    118a:	3301      	adds	r3, #1
    118c:	63fb      	str	r3, [r7, #60]	; 0x3c
    118e:	e00e      	b.n	11ae <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1194:	2b00      	cmp	r3, #0
    1196:	d00a      	beq.n	11ae <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1198:	68fb      	ldr	r3, [r7, #12]
    119a:	2b00      	cmp	r3, #0
    119c:	d004      	beq.n	11a8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	1c5a      	adds	r2, r3, #1
    11a2:	60fa      	str	r2, [r7, #12]
    11a4:	222d      	movs	r2, #45	; 0x2d
    11a6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11aa:	3301      	adds	r3, #1
    11ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    11ae:	68fa      	ldr	r2, [r7, #12]
    11b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11b4:	f7ff fb98 	bl	8e8 <uint64_to_str>
    11b8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11ba:	68fb      	ldr	r3, [r7, #12]
    11bc:	2b00      	cmp	r3, #0
    11be:	d003      	beq.n	11c8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    11c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c2:	68fa      	ldr	r2, [r7, #12]
    11c4:	4413      	add	r3, r2
    11c6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11cc:	4413      	add	r3, r2
    11ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11d0:	e04a      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d046      	beq.n	1266 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	3307      	adds	r3, #7
    11dc:	f023 0307 	bic.w	r3, r3, #7
    11e0:	f103 0208 	add.w	r2, r3, #8
    11e4:	607a      	str	r2, [r7, #4]
    11e6:	cb18      	ldmia	r3, {r3, r4}
    11e8:	4618      	mov	r0, r3
    11ea:	4621      	mov	r1, r4
    11ec:	f7fe ff68 	bl	c0 <__aeabi_d2f>
    11f0:	4603      	mov	r3, r0
    11f2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    11f4:	68fb      	ldr	r3, [r7, #12]
    11f6:	2214      	movs	r2, #20
    11f8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    11fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11fc:	68f9      	ldr	r1, [r7, #12]
    11fe:	6978      	ldr	r0, [r7, #20]
    1200:	f7ff fc5c 	bl	abc <ftoa>
    1204:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1208:	2b00      	cmp	r3, #0
    120a:	da14      	bge.n	1236 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    120e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1212:	d102      	bne.n	121a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1214:	4b1e      	ldr	r3, [pc, #120]	; (1290 <am_util_stdio_vsprintf+0x600>)
    1216:	62bb      	str	r3, [r7, #40]	; 0x28
    1218:	e008      	b.n	122c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    121c:	f113 0f02 	cmn.w	r3, #2
    1220:	d102      	bne.n	1228 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1222:	4b1c      	ldr	r3, [pc, #112]	; (1294 <am_util_stdio_vsprintf+0x604>)
    1224:	62bb      	str	r3, [r7, #40]	; 0x28
    1226:	e001      	b.n	122c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1228:	4b1b      	ldr	r3, [pc, #108]	; (1298 <am_util_stdio_vsprintf+0x608>)
    122a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1230:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1232:	2303      	movs	r3, #3
    1234:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    123a:	4413      	add	r3, r2
    123c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    123e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1240:	68fa      	ldr	r2, [r7, #12]
    1242:	4413      	add	r3, r2
    1244:	60fb      	str	r3, [r7, #12]
                }
                break;
    1246:	e00e      	b.n	1266 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	2b00      	cmp	r3, #0
    124c:	d005      	beq.n	125a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    124e:	68fb      	ldr	r3, [r7, #12]
    1250:	1c5a      	adds	r2, r3, #1
    1252:	60fa      	str	r2, [r7, #12]
    1254:	68ba      	ldr	r2, [r7, #8]
    1256:	7812      	ldrb	r2, [r2, #0]
    1258:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    125c:	3301      	adds	r3, #1
    125e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1260:	e002      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1262:	bf00      	nop
    1264:	e000      	b.n	1268 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    1266:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1268:	68bb      	ldr	r3, [r7, #8]
    126a:	3301      	adds	r3, #1
    126c:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	2b00      	cmp	r3, #0
    1274:	f47f ad17 	bne.w	ca6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	2b00      	cmp	r3, #0
    127c:	d002      	beq.n	1284 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	2200      	movs	r2, #0
    1282:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1286:	4618      	mov	r0, r3
    1288:	3754      	adds	r7, #84	; 0x54
    128a:	46bd      	mov	sp, r7
    128c:	bd90      	pop	{r4, r7, pc}
    128e:	bf00      	nop
    1290:	00302e30 	.word	0x00302e30
    1294:	00232e23 	.word	0x00232e23
    1298:	003f2e3f 	.word	0x003f2e3f

0000129c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    129c:	b40f      	push	{r0, r1, r2, r3}
    129e:	b580      	push	{r7, lr}
    12a0:	b082      	sub	sp, #8
    12a2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12a4:	f107 0314 	add.w	r3, r7, #20
    12a8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12aa:	683a      	ldr	r2, [r7, #0]
    12ac:	6939      	ldr	r1, [r7, #16]
    12ae:	4808      	ldr	r0, [pc, #32]	; (12d0 <am_util_stdio_printf+0x34>)
    12b0:	f7ff fcee 	bl	c90 <am_util_stdio_vsprintf>
    12b4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    12b6:	4b07      	ldr	r3, [pc, #28]	; (12d4 <am_util_stdio_printf+0x38>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	4805      	ldr	r0, [pc, #20]	; (12d0 <am_util_stdio_printf+0x34>)
    12bc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12be:	687b      	ldr	r3, [r7, #4]
}
    12c0:	4618      	mov	r0, r3
    12c2:	3708      	adds	r7, #8
    12c4:	46bd      	mov	sp, r7
    12c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12ca:	b004      	add	sp, #16
    12cc:	4770      	bx	lr
    12ce:	bf00      	nop
    12d0:	10001050 	.word	0x10001050
    12d4:	10001164 	.word	0x10001164

000012d8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    12d8:	b580      	push	{r7, lr}
    12da:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    12dc:	4802      	ldr	r0, [pc, #8]	; (12e8 <am_util_stdio_terminal_clear+0x10>)
    12de:	f7ff ffdd 	bl	129c <am_util_stdio_printf>
}
    12e2:	bf00      	nop
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop
    12e8:	0000214c 	.word	0x0000214c

000012ec <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    12ec:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    12ee:	f000 fad9 	bl	18a4 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    12f2:	f000 fb45 	bl	1980 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    12f6:	f000 fc5f 	bl	1bb8 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    12fa:	2001      	movs	r0, #1
    12fc:	f000 fb50 	bl	19a0 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1300:	2001      	movs	r0, #1
    1302:	f000 f93b 	bl	157c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    130a:	f000 bb57 	b.w	19bc <am_hal_rtc_osc_disable>
    130e:	bf00      	nop

00001310 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1310:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1312:	4b17      	ldr	r3, [pc, #92]	; (1370 <am_bsp_debug_printf_enable+0x60>)
    1314:	6818      	ldr	r0, [r3, #0]
    1316:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    131a:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    131c:	d001      	beq.n	1322 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    131e:	b007      	add	sp, #28
    1320:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1322:	4a14      	ldr	r2, [pc, #80]	; (1374 <am_bsp_debug_printf_enable+0x64>)
    1324:	4914      	ldr	r1, [pc, #80]	; (1378 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1326:	4d15      	ldr	r5, [pc, #84]	; (137c <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1328:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    132a:	a806      	add	r0, sp, #24
    132c:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1330:	f000 fbe6 	bl	1b00 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1334:	f3ef 8310 	mrs	r3, PRIMASK
    1338:	9300      	str	r3, [sp, #0]
    133a:	b672      	cpsid	i
    133c:	4a10      	ldr	r2, [pc, #64]	; (1380 <am_bsp_debug_printf_enable+0x70>)
    133e:	4d11      	ldr	r5, [pc, #68]	; (1384 <am_bsp_debug_printf_enable+0x74>)
    1340:	4811      	ldr	r0, [pc, #68]	; (1388 <am_bsp_debug_printf_enable+0x78>)
    1342:	4912      	ldr	r1, [pc, #72]	; (138c <am_bsp_debug_printf_enable+0x7c>)
    1344:	2373      	movs	r3, #115	; 0x73
    1346:	6013      	str	r3, [r2, #0]
    1348:	682b      	ldr	r3, [r5, #0]
    134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    134e:	602b      	str	r3, [r5, #0]
    1350:	6805      	ldr	r5, [r0, #0]
    1352:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1356:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    135a:	6003      	str	r3, [r0, #0]
    135c:	6808      	ldr	r0, [r1, #0]
    135e:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1362:	600d      	str	r5, [r1, #0]
    1364:	6014      	str	r4, [r2, #0]
    1366:	9c00      	ldr	r4, [sp, #0]
    1368:	f384 8810 	msr	PRIMASK, r4
}
    136c:	b007      	add	sp, #28
    136e:	bd30      	pop	{r4, r5, pc}
    1370:	10001154 	.word	0x10001154
    1374:	e0000e80 	.word	0xe0000e80
    1378:	00150511 	.word	0x00150511
    137c:	000f4240 	.word	0x000f4240
    1380:	40010060 	.word	0x40010060
    1384:	40010054 	.word	0x40010054
    1388:	40010028 	.word	0x40010028
    138c:	40010108 	.word	0x40010108

00001390 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1390:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1392:	4b15      	ldr	r3, [pc, #84]	; (13e8 <am_bsp_debug_printf_disable+0x58>)
    1394:	6818      	ldr	r0, [r3, #0]
    1396:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    139a:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    139c:	d121      	bne.n	13e2 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    139e:	f000 f92b 	bl	15f8 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    13a2:	f3ef 8110 	mrs	r1, PRIMASK
    13a6:	9101      	str	r1, [sp, #4]
    13a8:	b672      	cpsid	i
    13aa:	4a10      	ldr	r2, [pc, #64]	; (13ec <am_bsp_debug_printf_disable+0x5c>)
    13ac:	4d10      	ldr	r5, [pc, #64]	; (13f0 <am_bsp_debug_printf_disable+0x60>)
    13ae:	4811      	ldr	r0, [pc, #68]	; (13f4 <am_bsp_debug_printf_disable+0x64>)
    13b0:	4911      	ldr	r1, [pc, #68]	; (13f8 <am_bsp_debug_printf_disable+0x68>)
    13b2:	2373      	movs	r3, #115	; 0x73
    13b4:	6013      	str	r3, [r2, #0]
    13b6:	682b      	ldr	r3, [r5, #0]
    13b8:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    13bc:	f04c 0320 	orr.w	r3, ip, #32
    13c0:	602b      	str	r3, [r5, #0]
    13c2:	6805      	ldr	r5, [r0, #0]
    13c4:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    13c8:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    13cc:	6003      	str	r3, [r0, #0]
    13ce:	6808      	ldr	r0, [r1, #0]
    13d0:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    13d4:	600d      	str	r5, [r1, #0]
    13d6:	6014      	str	r4, [r2, #0]
    13d8:	9c01      	ldr	r4, [sp, #4]
    13da:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    13de:	f000 fbe5 	bl	1bac <am_hal_tpiu_disable>
}
    13e2:	b003      	add	sp, #12
    13e4:	bd30      	pop	{r4, r5, pc}
    13e6:	bf00      	nop
    13e8:	10001154 	.word	0x10001154
    13ec:	40010060 	.word	0x40010060
    13f0:	40010054 	.word	0x40010054
    13f4:	40010028 	.word	0x40010028
    13f8:	40010108 	.word	0x40010108

000013fc <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    13fc:	f000 b906 	b.w	160c <am_hal_itm_print>

00001400 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1402:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1404:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1408:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    140a:	7863      	ldrb	r3, [r4, #1]
    140c:	78e2      	ldrb	r2, [r4, #3]
    140e:	7925      	ldrb	r5, [r4, #4]
    1410:	79a1      	ldrb	r1, [r4, #6]
    1412:	00be      	lsls	r6, r7, #2
    1414:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1418:	f006 0304 	and.w	r3, r6, #4
    141c:	f00e 0602 	and.w	r6, lr, #2
    1420:	431e      	orrs	r6, r3
    1422:	f042 0201 	orr.w	r2, r2, #1
    1426:	79e3      	ldrb	r3, [r4, #7]
    1428:	01ed      	lsls	r5, r5, #7
    142a:	4316      	orrs	r6, r2
    142c:	b2ed      	uxtb	r5, r5
    142e:	7a22      	ldrb	r2, [r4, #8]
    1430:	0289      	lsls	r1, r1, #10
    1432:	432e      	orrs	r6, r5
    1434:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1438:	7a65      	ldrb	r5, [r4, #9]
    143a:	02db      	lsls	r3, r3, #11
    143c:	430e      	orrs	r6, r1
    143e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1442:	0312      	lsls	r2, r2, #12
    1444:	7aa1      	ldrb	r1, [r4, #10]
    1446:	431e      	orrs	r6, r3
    1448:	042d      	lsls	r5, r5, #16
    144a:	b293      	uxth	r3, r2
    144c:	7ae2      	ldrb	r2, [r4, #11]
    144e:	431e      	orrs	r6, r3
    1450:	0509      	lsls	r1, r1, #20
    1452:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    1456:	0612      	lsls	r2, r2, #24
    1458:	4333      	orrs	r3, r6
    145a:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    145e:	00bf      	lsls	r7, r7, #2
    1460:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1464:	4333      	orrs	r3, r6
    1466:	430b      	orrs	r3, r1
    1468:	f007 0508 	and.w	r5, r7, #8
    146c:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    146e:	f000 f911 	bl	1694 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1472:	482c      	ldr	r0, [pc, #176]	; (1524 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1474:	4b2c      	ldr	r3, [pc, #176]	; (1528 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1476:	6005      	str	r5, [r0, #0]
    1478:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    147a:	681e      	ldr	r6, [r3, #0]
    147c:	0777      	lsls	r7, r6, #29
    147e:	d41e      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    1480:	681f      	ldr	r7, [r3, #0]
    1482:	077e      	lsls	r6, r7, #29
    1484:	f102 32ff 	add.w	r2, r2, #4294967295
    1488:	d419      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    148a:	6819      	ldr	r1, [r3, #0]
    148c:	074f      	lsls	r7, r1, #29
    148e:	d416      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    1490:	6818      	ldr	r0, [r3, #0]
    1492:	0746      	lsls	r6, r0, #29
    1494:	d413      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    1496:	681e      	ldr	r6, [r3, #0]
    1498:	0770      	lsls	r0, r6, #29
    149a:	d410      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    149c:	681f      	ldr	r7, [r3, #0]
    149e:	0779      	lsls	r1, r7, #29
    14a0:	d40d      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    14a2:	6819      	ldr	r1, [r3, #0]
    14a4:	074f      	lsls	r7, r1, #29
    14a6:	d40a      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    14a8:	6818      	ldr	r0, [r3, #0]
    14aa:	0746      	lsls	r6, r0, #29
    14ac:	d407      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    14ae:	681e      	ldr	r6, [r3, #0]
    14b0:	0770      	lsls	r0, r6, #29
    14b2:	d404      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    14b4:	681f      	ldr	r7, [r3, #0]
    14b6:	0779      	lsls	r1, r7, #29
    14b8:	d401      	bmi.n	14be <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    14ba:	3a09      	subs	r2, #9
    14bc:	d1dd      	bne.n	147a <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    14be:	4b1a      	ldr	r3, [pc, #104]	; (1528 <am_hal_cachectrl_enable+0x128>)
    14c0:	681a      	ldr	r2, [r3, #0]
    14c2:	f042 0101 	orr.w	r1, r2, #1
    14c6:	6019      	str	r1, [r3, #0]
    14c8:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14ca:	6818      	ldr	r0, [r3, #0]
    14cc:	0740      	lsls	r0, r0, #29
    14ce:	d41e      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14d0:	681e      	ldr	r6, [r3, #0]
    14d2:	0771      	lsls	r1, r6, #29
    14d4:	f102 32ff 	add.w	r2, r2, #4294967295
    14d8:	d419      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14da:	681f      	ldr	r7, [r3, #0]
    14dc:	077f      	lsls	r7, r7, #29
    14de:	d416      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14e0:	6819      	ldr	r1, [r3, #0]
    14e2:	074e      	lsls	r6, r1, #29
    14e4:	d413      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14e6:	6818      	ldr	r0, [r3, #0]
    14e8:	0740      	lsls	r0, r0, #29
    14ea:	d410      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14ec:	681e      	ldr	r6, [r3, #0]
    14ee:	0771      	lsls	r1, r6, #29
    14f0:	d40d      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14f2:	681f      	ldr	r7, [r3, #0]
    14f4:	077f      	lsls	r7, r7, #29
    14f6:	d40a      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14f8:	6819      	ldr	r1, [r3, #0]
    14fa:	074e      	lsls	r6, r1, #29
    14fc:	d407      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    14fe:	6818      	ldr	r0, [r3, #0]
    1500:	0740      	lsls	r0, r0, #29
    1502:	d404      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    1504:	681e      	ldr	r6, [r3, #0]
    1506:	0771      	lsls	r1, r6, #29
    1508:	d401      	bmi.n	150e <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    150a:	3a09      	subs	r2, #9
    150c:	d1dd      	bne.n	14ca <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    150e:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1510:	4f04      	ldr	r7, [pc, #16]	; (1524 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1512:	0223      	lsls	r3, r4, #8
    1514:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1518:	f403 7280 	and.w	r2, r3, #256	; 0x100
    151c:	4311      	orrs	r1, r2
    151e:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1520:	6039      	str	r1, [r7, #0]
    1522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1524:	40018000 	.word	0x40018000
    1528:	40018008 	.word	0x40018008

0000152c <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    152c:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    152e:	4604      	mov	r4, r0
    1530:	b120      	cbz	r0, 153c <am_hal_clkgen_sysclk_select+0x10>
    1532:	4a06      	ldr	r2, [pc, #24]	; (154c <am_hal_clkgen_sysclk_select+0x20>)
    1534:	4806      	ldr	r0, [pc, #24]	; (1550 <am_hal_clkgen_sysclk_select+0x24>)
    1536:	2150      	movs	r1, #80	; 0x50
    1538:	f000 f82a 	bl	1590 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    153c:	4b05      	ldr	r3, [pc, #20]	; (1554 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    153e:	4906      	ldr	r1, [pc, #24]	; (1558 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1540:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1542:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1544:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1546:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1548:	601a      	str	r2, [r3, #0]
    154a:	bd10      	pop	{r4, pc}
    154c:	0000216c 	.word	0x0000216c
    1550:	000021a4 	.word	0x000021a4
    1554:	40004014 	.word	0x40004014
    1558:	40004018 	.word	0x40004018

0000155c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    155c:	4b04      	ldr	r3, [pc, #16]	; (1570 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    155e:	4905      	ldr	r1, [pc, #20]	; (1574 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1560:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1562:	4805      	ldr	r0, [pc, #20]	; (1578 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1564:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1568:	bf08      	it	eq
    156a:	4608      	moveq	r0, r1
    156c:	4770      	bx	lr
    156e:	bf00      	nop
    1570:	40004018 	.word	0x40004018
    1574:	02dc6c00 	.word	0x02dc6c00
    1578:	016e3600 	.word	0x016e3600

0000157c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    157c:	0783      	lsls	r3, r0, #30
    157e:	d003      	beq.n	1588 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1580:	4a02      	ldr	r2, [pc, #8]	; (158c <am_hal_clkgen_osc_stop+0x10>)
    1582:	6813      	ldr	r3, [r2, #0]
    1584:	4318      	orrs	r0, r3
    1586:	6010      	str	r0, [r2, #0]
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	4000400c 	.word	0x4000400c

00001590 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1590:	e7fe      	b.n	1590 <am_hal_debug_error>
    1592:	bf00      	nop

00001594 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1594:	4b01      	ldr	r3, [pc, #4]	; (159c <am_hal_flash_delay+0x8>)
    1596:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1598:	4708      	bx	r1
    159a:	bf00      	nop
    159c:	10001000 	.word	0x10001000

000015a0 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    15a0:	4b0d      	ldr	r3, [pc, #52]	; (15d8 <am_hal_itm_enable+0x38>)
    15a2:	6818      	ldr	r0, [r3, #0]
    15a4:	07c2      	lsls	r2, r0, #31
    15a6:	d416      	bmi.n	15d6 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    15a8:	4a0c      	ldr	r2, [pc, #48]	; (15dc <am_hal_itm_enable+0x3c>)
    15aa:	6811      	ldr	r1, [r2, #0]
    15ac:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    15b0:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    15b2:	6810      	ldr	r0, [r2, #0]
    15b4:	01c3      	lsls	r3, r0, #7
    15b6:	d5fc      	bpl.n	15b2 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    15b8:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    15ba:	4809      	ldr	r0, [pc, #36]	; (15e0 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    15bc:	4c09      	ldr	r4, [pc, #36]	; (15e4 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    15be:	4d0a      	ldr	r5, [pc, #40]	; (15e8 <am_hal_itm_enable+0x48>)
    15c0:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    15c2:	250f      	movs	r5, #15
    15c4:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    15c6:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    15c8:	4908      	ldr	r1, [pc, #32]	; (15ec <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    15ca:	4b09      	ldr	r3, [pc, #36]	; (15f0 <am_hal_itm_enable+0x50>)
    15cc:	4a09      	ldr	r2, [pc, #36]	; (15f4 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    15ce:	f04f 30ff 	mov.w	r0, #4294967295
    15d2:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    15d4:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    15d6:	4770      	bx	lr
    15d8:	10001154 	.word	0x10001154
    15dc:	e000edfc 	.word	0xe000edfc
    15e0:	e0000fb0 	.word	0xe0000fb0
    15e4:	e0000e40 	.word	0xe0000e40
    15e8:	c5acce55 	.word	0xc5acce55
    15ec:	e0000e00 	.word	0xe0000e00
    15f0:	e0000e80 	.word	0xe0000e80
    15f4:	00150511 	.word	0x00150511

000015f8 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    15f8:	4a03      	ldr	r2, [pc, #12]	; (1608 <am_hal_itm_not_busy+0x10>)
    15fa:	6813      	ldr	r3, [r2, #0]
    15fc:	021b      	lsls	r3, r3, #8
    15fe:	d4fc      	bmi.n	15fa <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1600:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1604:	f7ff bfc6 	b.w	1594 <am_hal_flash_delay>
    1608:	e0000e80 	.word	0xe0000e80

0000160c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    160c:	7803      	ldrb	r3, [r0, #0]
    160e:	b1ab      	cbz	r3, 163c <am_hal_itm_print+0x30>
    1610:	4602      	mov	r2, r0
    1612:	2300      	movs	r3, #0
    1614:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1618:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    161a:	2900      	cmp	r1, #0
    161c:	d1fa      	bne.n	1614 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    161e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1622:	b430      	push	{r4, r5}
    1624:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1626:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1628:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    162c:	f8dc 3000 	ldr.w	r3, [ip]
    1630:	2b00      	cmp	r3, #0
    1632:	d0fb      	beq.n	162c <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1634:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1636:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1638:	d1f6      	bne.n	1628 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    163a:	bc30      	pop	{r4, r5}
    163c:	4770      	bx	lr
    163e:	bf00      	nop

00001640 <am_hal_mcuctrl_fault_capture_enable>:
am_hal_mcuctrl_fault_capture_enable(void)
{
    //
    // Enable the Fault Capture registers.
    //
    AM_BFW(MCUCTRL, FAULTCAPTUREEN, ENABLE, 1);
    1640:	4a02      	ldr	r2, [pc, #8]	; (164c <am_hal_mcuctrl_fault_capture_enable+0xc>)
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	f043 0001 	orr.w	r0, r3, #1
    1648:	6010      	str	r0, [r2, #0]
    164a:	4770      	bx	lr
    164c:	400201d0 	.word	0x400201d0

00001650 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1650:	4a0d      	ldr	r2, [pc, #52]	; (1688 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1652:	4b0e      	ldr	r3, [pc, #56]	; (168c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1654:	490e      	ldr	r1, [pc, #56]	; (1690 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1656:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1658:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    165a:	6814      	ldr	r4, [r2, #0]
    165c:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    165e:	6809      	ldr	r1, [r1, #0]
    1660:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1662:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1664:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1666:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1668:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    166a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    166c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1670:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1672:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1674:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1678:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    167c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    167e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1680:	6142      	str	r2, [r0, #20]
}
    1682:	bc70      	pop	{r4, r5, r6}
    1684:	4770      	bx	lr
    1686:	bf00      	nop
    1688:	400201c4 	.word	0x400201c4
    168c:	400201cc 	.word	0x400201cc
    1690:	400201c0 	.word	0x400201c0

00001694 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1694:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1698:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    169a:	d03a      	beq.n	1712 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    169c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    16a0:	f000 809d 	beq.w	17de <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    16a4:	2801      	cmp	r0, #1
    16a6:	f000 809d 	beq.w	17e4 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    16aa:	2803      	cmp	r0, #3
    16ac:	f000 80a6 	beq.w	17fc <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    16b0:	2807      	cmp	r0, #7
    16b2:	f000 809c 	beq.w	17ee <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    16b6:	280f      	cmp	r0, #15
    16b8:	f000 80a5 	beq.w	1806 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    16bc:	281f      	cmp	r0, #31
    16be:	f000 80b1 	beq.w	1824 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    16c2:	283f      	cmp	r0, #63	; 0x3f
    16c4:	f000 80b5 	beq.w	1832 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    16c8:	287f      	cmp	r0, #127	; 0x7f
    16ca:	f000 80b9 	beq.w	1840 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    16ce:	28ff      	cmp	r0, #255	; 0xff
    16d0:	f000 80a0 	beq.w	1814 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    16d4:	f240 13ff 	movw	r3, #511	; 0x1ff
    16d8:	4298      	cmp	r0, r3
    16da:	f000 80b8 	beq.w	184e <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    16de:	f240 31ff 	movw	r1, #1023	; 0x3ff
    16e2:	4288      	cmp	r0, r1
    16e4:	f000 80b9 	beq.w	185a <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    16e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
    16ec:	4290      	cmp	r0, r2
    16ee:	d00e      	beq.n	170e <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    16f0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    16f4:	f000 80b7 	beq.w	1866 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    16f8:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    16fc:	42a0      	cmp	r0, r4
    16fe:	f000 80b5 	beq.w	186c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1702:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1706:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    170a:	4560      	cmp	r0, ip
    170c:	d132      	bne.n	1774 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    170e:	495c      	ldr	r1, [pc, #368]	; (1880 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1710:	e066      	b.n	17e0 <am_hal_pwrctrl_memory_enable+0x14c>
    1712:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1716:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1718:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    171a:	4c5a      	ldr	r4, [pc, #360]	; (1884 <am_hal_pwrctrl_memory_enable+0x1f0>)
    171c:	6822      	ldr	r2, [r4, #0]
    171e:	402a      	ands	r2, r5
    1720:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1722:	4d58      	ldr	r5, [pc, #352]	; (1884 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1724:	682c      	ldr	r4, [r5, #0]
    1726:	4320      	orrs	r0, r4
    1728:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    172a:	2b00      	cmp	r3, #0
    172c:	d029      	beq.n	1782 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    172e:	4a56      	ldr	r2, [pc, #344]	; (1888 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1730:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1732:	4203      	tst	r3, r0
    1734:	bf18      	it	ne
    1736:	20c6      	movne	r0, #198	; 0xc6
    1738:	d01f      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    173a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    173c:	422b      	tst	r3, r5
    173e:	d01c      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1740:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1742:	4223      	tst	r3, r4
    1744:	d019      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1746:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1748:	422b      	tst	r3, r5
    174a:	d016      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    174c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    174e:	4223      	tst	r3, r4
    1750:	d013      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1752:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1754:	422b      	tst	r3, r5
    1756:	d010      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1758:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    175a:	4223      	tst	r3, r4
    175c:	d00d      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    175e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1760:	422b      	tst	r3, r5
    1762:	d00a      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1764:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1766:	4223      	tst	r3, r4
    1768:	d007      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    176a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    176c:	422b      	tst	r3, r5
    176e:	d004      	beq.n	177a <am_hal_pwrctrl_memory_enable+0xe6>
    1770:	3809      	subs	r0, #9
    1772:	d1e2      	bne.n	173a <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1774:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1776:	bc30      	pop	{r4, r5}
    1778:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    177a:	b911      	cbnz	r1, 1782 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    177c:	2001      	movs	r0, #1
}
    177e:	bc30      	pop	{r4, r5}
    1780:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1782:	4b41      	ldr	r3, [pc, #260]	; (1888 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1784:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1786:	ea31 0402 	bics.w	r4, r1, r2
    178a:	bf18      	it	ne
    178c:	24c6      	movne	r4, #198	; 0xc6
    178e:	d0f5      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1790:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1792:	ea31 0000 	bics.w	r0, r1, r0
    1796:	d0f1      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1798:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    179a:	ea31 0005 	bics.w	r0, r1, r5
    179e:	d0ed      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17a0:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17a2:	ea31 0002 	bics.w	r0, r1, r2
    17a6:	d0e9      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17a8:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17aa:	ea31 0000 	bics.w	r0, r1, r0
    17ae:	d0e5      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17b0:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17b2:	ea31 0005 	bics.w	r0, r1, r5
    17b6:	d0e1      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17b8:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17ba:	ea31 0002 	bics.w	r0, r1, r2
    17be:	d0dd      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17c0:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17c2:	ea31 0000 	bics.w	r0, r1, r0
    17c6:	d0d9      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17c8:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17ca:	ea31 0005 	bics.w	r0, r1, r5
    17ce:	d0d5      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17d0:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17d2:	ea31 0002 	bics.w	r0, r1, r2
    17d6:	d0d1      	beq.n	177c <am_hal_pwrctrl_memory_enable+0xe8>
    17d8:	3c09      	subs	r4, #9
    17da:	d1d9      	bne.n	1790 <am_hal_pwrctrl_memory_enable+0xfc>
    17dc:	e7ca      	b.n	1774 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    17de:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    17e0:	2300      	movs	r3, #0
    17e2:	e79e      	b.n	1722 <am_hal_pwrctrl_memory_enable+0x8e>
    17e4:	4d29      	ldr	r5, [pc, #164]	; (188c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17e6:	4b2a      	ldr	r3, [pc, #168]	; (1890 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    17e8:	f44f 7180 	mov.w	r1, #256	; 0x100
    17ec:	e795      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    17ee:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17f2:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    17f6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    17fa:	e78e      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    17fc:	4d25      	ldr	r5, [pc, #148]	; (1894 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17fe:	4b26      	ldr	r3, [pc, #152]	; (1898 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1800:	f44f 7140 	mov.w	r1, #768	; 0x300
    1804:	e789      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    1806:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    180a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    180e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1812:	e782      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    1814:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1818:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    181c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1820:	20ff      	movs	r0, #255	; 0xff
    1822:	e77a      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    1824:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1828:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    182c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1830:	e773      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    1832:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1836:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    183a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    183e:	e76c      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    1840:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1844:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1848:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    184c:	e765      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    184e:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1852:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1856:	4911      	ldr	r1, [pc, #68]	; (189c <am_hal_pwrctrl_memory_enable+0x208>)
    1858:	e75f      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    185a:	4911      	ldr	r1, [pc, #68]	; (18a0 <am_hal_pwrctrl_memory_enable+0x20c>)
    185c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1864:	e759      	b.n	171a <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1866:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    186a:	e7b9      	b.n	17e0 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    186c:	4805      	ldr	r0, [pc, #20]	; (1884 <am_hal_pwrctrl_memory_enable+0x1f0>)
    186e:	6803      	ldr	r3, [r0, #0]
    1870:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1874:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1876:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    187a:	2100      	movs	r1, #0
    187c:	e757      	b.n	172e <am_hal_pwrctrl_memory_enable+0x9a>
    187e:	bf00      	nop
    1880:	0007ff00 	.word	0x0007ff00
    1884:	40021010 	.word	0x40021010
    1888:	40021014 	.word	0x40021014
    188c:	fffff801 	.word	0xfffff801
    1890:	0007fe00 	.word	0x0007fe00
    1894:	fffff803 	.word	0xfffff803
    1898:	0007fc00 	.word	0x0007fc00
    189c:	0001ff00 	.word	0x0001ff00
    18a0:	0003ff00 	.word	0x0003ff00

000018a4 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    18a4:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <am_hal_pwrctrl_bucks_init+0x40>)
    18a6:	681a      	ldr	r2, [r3, #0]
    18a8:	0792      	lsls	r2, r2, #30
    18aa:	d502      	bpl.n	18b2 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    18ac:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    18ae:	07c3      	lsls	r3, r0, #31
    18b0:	d40e      	bmi.n	18d0 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18b2:	4b0d      	ldr	r3, [pc, #52]	; (18e8 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    18b4:	4a0b      	ldr	r2, [pc, #44]	; (18e4 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18b6:	6819      	ldr	r1, [r3, #0]
    18b8:	f041 0002 	orr.w	r0, r1, #2
    18bc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    18be:	6819      	ldr	r1, [r3, #0]
    18c0:	f041 0001 	orr.w	r0, r1, #1
    18c4:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    18c6:	6813      	ldr	r3, [r2, #0]
    18c8:	f003 0103 	and.w	r1, r3, #3
    18cc:	2903      	cmp	r1, #3
    18ce:	d1fa      	bne.n	18c6 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    18d0:	4a04      	ldr	r2, [pc, #16]	; (18e4 <am_hal_pwrctrl_bucks_init+0x40>)
    18d2:	6810      	ldr	r0, [r2, #0]
    18d4:	f000 0303 	and.w	r3, r0, #3
    18d8:	2b03      	cmp	r3, #3
    18da:	d1fa      	bne.n	18d2 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    18dc:	2042      	movs	r0, #66	; 0x42
    18de:	f7ff be59 	b.w	1594 <am_hal_flash_delay>
    18e2:	bf00      	nop
    18e4:	40021004 	.word	0x40021004
    18e8:	40021000 	.word	0x40021000

000018ec <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    18ec:	4b0b      	ldr	r3, [pc, #44]	; (191c <am_hal_pwrctrl_bucks_enable+0x30>)
    18ee:	681a      	ldr	r2, [r3, #0]
    18f0:	0792      	lsls	r2, r2, #30
    18f2:	d502      	bpl.n	18fa <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    18f4:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    18f6:	07c3      	lsls	r3, r0, #31
    18f8:	d40e      	bmi.n	1918 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18fa:	4b09      	ldr	r3, [pc, #36]	; (1920 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    18fc:	4a07      	ldr	r2, [pc, #28]	; (191c <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18fe:	6819      	ldr	r1, [r3, #0]
    1900:	f041 0002 	orr.w	r0, r1, #2
    1904:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1906:	6819      	ldr	r1, [r3, #0]
    1908:	f041 0001 	orr.w	r0, r1, #1
    190c:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    190e:	6813      	ldr	r3, [r2, #0]
    1910:	f003 0103 	and.w	r1, r3, #3
    1914:	2903      	cmp	r1, #3
    1916:	d1fa      	bne.n	190e <am_hal_pwrctrl_bucks_enable+0x22>
    1918:	4770      	bx	lr
    191a:	bf00      	nop
    191c:	40021004 	.word	0x40021004
    1920:	40021000 	.word	0x40021000

00001924 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1924:	4b12      	ldr	r3, [pc, #72]	; (1970 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1926:	681a      	ldr	r2, [r3, #0]
    1928:	0792      	lsls	r2, r2, #30
    192a:	d402      	bmi.n	1932 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    192c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    192e:	07c3      	lsls	r3, r0, #31
    1930:	d51c      	bpl.n	196c <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1932:	4910      	ldr	r1, [pc, #64]	; (1974 <am_hal_pwrctrl_bucks_disable+0x50>)
    1934:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1936:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    193a:	2a20      	cmp	r2, #32
    193c:	d00b      	beq.n	1956 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    193e:	4b0e      	ldr	r3, [pc, #56]	; (1978 <am_hal_pwrctrl_bucks_disable+0x54>)
    1940:	681a      	ldr	r2, [r3, #0]
    1942:	f022 0002 	bic.w	r0, r2, #2
    1946:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1948:	6819      	ldr	r1, [r3, #0]
    194a:	f021 0201 	bic.w	r2, r1, #1
    194e:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1950:	200a      	movs	r0, #10
    1952:	f7ff be1f 	b.w	1594 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1956:	4809      	ldr	r0, [pc, #36]	; (197c <am_hal_pwrctrl_bucks_disable+0x58>)
    1958:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    195a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    195e:	d1ee      	bne.n	193e <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1960:	4805      	ldr	r0, [pc, #20]	; (1978 <am_hal_pwrctrl_bucks_disable+0x54>)
    1962:	6803      	ldr	r3, [r0, #0]
    1964:	f003 0105 	and.w	r1, r3, #5
    1968:	6001      	str	r1, [r0, #0]
    196a:	e7f1      	b.n	1950 <am_hal_pwrctrl_bucks_disable+0x2c>
    196c:	4770      	bx	lr
    196e:	bf00      	nop
    1970:	40021004 	.word	0x40021004
    1974:	4002000c 	.word	0x4002000c
    1978:	40021000 	.word	0x40021000
    197c:	40021008 	.word	0x40021008

00001980 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1980:	4905      	ldr	r1, [pc, #20]	; (1998 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1982:	4a06      	ldr	r2, [pc, #24]	; (199c <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1984:	680b      	ldr	r3, [r1, #0]
    1986:	f043 0006 	orr.w	r0, r3, #6
    198a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    198c:	6811      	ldr	r1, [r2, #0]
    198e:	f021 0304 	bic.w	r3, r1, #4
    1992:	6013      	str	r3, [r2, #0]
    1994:	4770      	bx	lr
    1996:	bf00      	nop
    1998:	40021018 	.word	0x40021018
    199c:	40021000 	.word	0x40021000

000019a0 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    19a0:	4a05      	ldr	r2, [pc, #20]	; (19b8 <am_hal_rtc_osc_select+0x18>)
    19a2:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    19a4:	b918      	cbnz	r0, 19ae <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    19a6:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    19aa:	6010      	str	r0, [r2, #0]
    19ac:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    19ae:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    19b2:	6011      	str	r1, [r2, #0]
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop
    19b8:	4000400c 	.word	0x4000400c

000019bc <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    19bc:	4a02      	ldr	r2, [pc, #8]	; (19c8 <am_hal_rtc_osc_disable+0xc>)
    19be:	6813      	ldr	r3, [r2, #0]
    19c0:	f043 0010 	orr.w	r0, r3, #16
    19c4:	6010      	str	r0, [r2, #0]
    19c6:	4770      	bx	lr
    19c8:	40004050 	.word	0x40004050

000019cc <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    19cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ce:	b083      	sub	sp, #12
    19d0:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    19d2:	f000 f969 	bl	1ca8 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    19d6:	4a41      	ldr	r2, [pc, #260]	; (1adc <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    19d8:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    19da:	b11d      	cbz	r5, 19e4 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    19dc:	4b40      	ldr	r3, [pc, #256]	; (1ae0 <am_hal_sysctrl_sleep+0x114>)
    19de:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    19e0:	07c3      	lsls	r3, r0, #31
    19e2:	d509      	bpl.n	19f8 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    19e4:	6811      	ldr	r1, [r2, #0]
    19e6:	f021 0604 	bic.w	r6, r1, #4
    19ea:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    19ec:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    19ee:	4620      	mov	r0, r4
    19f0:	f000 f95e 	bl	1cb0 <am_hal_interrupt_master_set>
}
    19f4:	b003      	add	sp, #12
    19f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    19f8:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    19fa:	493a      	ldr	r1, [pc, #232]	; (1ae4 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    19fc:	4f3a      	ldr	r7, [pc, #232]	; (1ae8 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    19fe:	4d3b      	ldr	r5, [pc, #236]	; (1aec <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1a00:	483b      	ldr	r0, [pc, #236]	; (1af0 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1a02:	f043 0604 	orr.w	r6, r3, #4
    1a06:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a08:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1a0a:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1a0c:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1a0e:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a10:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1a14:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1a16:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a1a:	bf14      	ite	ne
    1a1c:	2500      	movne	r5, #0
    1a1e:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1a20:	2e03      	cmp	r6, #3
    1a22:	bf8c      	ite	hi
    1a24:	2100      	movhi	r1, #0
    1a26:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a28:	f012 0303 	ands.w	r3, r2, #3
    1a2c:	bf18      	it	ne
    1a2e:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a30:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a34:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a36:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a38:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a3c:	b91e      	cbnz	r6, 1a46 <am_hal_sysctrl_sleep+0x7a>
    1a3e:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1a42:	2d0f      	cmp	r5, #15
    1a44:	d00a      	beq.n	1a5c <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1a46:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1a48:	2d0f      	cmp	r5, #15
    1a4a:	d01a      	beq.n	1a82 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1a4c:	4f29      	ldr	r7, [pc, #164]	; (1af4 <am_hal_sysctrl_sleep+0x128>)
    1a4e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1a50:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1a52:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1a54:	f000 f92c 	bl	1cb0 <am_hal_interrupt_master_set>
}
    1a58:	b003      	add	sp, #12
    1a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1a5c:	683a      	ldr	r2, [r7, #0]
    1a5e:	1e50      	subs	r0, r2, #1
    1a60:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1a62:	9800      	ldr	r0, [sp, #0]
    1a64:	f04f 31ff 	mov.w	r1, #4294967295
    1a68:	f000 f8c6 	bl	1bf8 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1a6c:	9800      	ldr	r0, [sp, #0]
    1a6e:	4633      	mov	r3, r6
    1a70:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1a74:	f04f 31ff 	mov.w	r1, #4294967295
    1a78:	f000 f8d2 	bl	1c20 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1a7c:	f7ff ff52 	bl	1924 <am_hal_pwrctrl_bucks_disable>
    1a80:	e7e1      	b.n	1a46 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a82:	f3ef 8310 	mrs	r3, PRIMASK
    1a86:	9301      	str	r3, [sp, #4]
    1a88:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1a8a:	4e1b      	ldr	r6, [pc, #108]	; (1af8 <am_hal_sysctrl_sleep+0x12c>)
    1a8c:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1a8e:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1a90:	6835      	ldr	r5, [r6, #0]
    1a92:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1a96:	f04c 021c 	orr.w	r2, ip, #28
    1a9a:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1a9c:	6830      	ldr	r0, [r6, #0]
    1a9e:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1aa2:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1aa6:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1aa8:	9e01      	ldr	r6, [sp, #4]
    1aaa:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1aae:	201c      	movs	r0, #28
    1ab0:	f7ff fd70 	bl	1594 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1ab4:	f7ff ff1a 	bl	18ec <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1ab8:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1aba:	4910      	ldr	r1, [pc, #64]	; (1afc <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1abc:	4d0d      	ldr	r5, [pc, #52]	; (1af4 <am_hal_sysctrl_sleep+0x128>)
    1abe:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1ac0:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1ac2:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1ac4:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1ac6:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1ac8:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1aca:	f7ff fd63 	bl	1594 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1ace:	9800      	ldr	r0, [sp, #0]
    1ad0:	f04f 31ff 	mov.w	r1, #4294967295
    1ad4:	f000 f876 	bl	1bc4 <am_hal_ctimer_start>
    1ad8:	e789      	b.n	19ee <am_hal_sysctrl_sleep+0x22>
    1ada:	bf00      	nop
    1adc:	e000ed10 	.word	0xe000ed10
    1ae0:	40020250 	.word	0x40020250
    1ae4:	4002000c 	.word	0x4002000c
    1ae8:	10001160 	.word	0x10001160
    1aec:	40021000 	.word	0x40021000
    1af0:	40021008 	.word	0x40021008
    1af4:	10001158 	.word	0x10001158
    1af8:	40020068 	.word	0x40020068
    1afc:	1000115c 	.word	0x1000115c

00001b00 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1b00:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1b02:	4a22      	ldr	r2, [pc, #136]	; (1b8c <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1b04:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1b06:	2100      	movs	r1, #0
    1b08:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1b0a:	b333      	cbz	r3, 1b5a <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b0c:	4d20      	ldr	r5, [pc, #128]	; (1b90 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1b0e:	4921      	ldr	r1, [pc, #132]	; (1b94 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1b10:	4a21      	ldr	r2, [pc, #132]	; (1b98 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b12:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1b14:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b18:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1b1a:	458c      	cmp	ip, r1
    1b1c:	bf94      	ite	ls
    1b1e:	461d      	movls	r5, r3
    1b20:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1b22:	f7ff fd1b 	bl	155c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1b26:	1c43      	adds	r3, r0, #1
    1b28:	d02e      	beq.n	1b88 <am_hal_tpiu_enable+0x88>
    1b2a:	08c3      	lsrs	r3, r0, #3
    1b2c:	fbb3 fef5 	udiv	lr, r3, r5
    1b30:	f10e 31ff 	add.w	r1, lr, #4294967295
    1b34:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b36:	4a19      	ldr	r2, [pc, #100]	; (1b9c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b38:	4c19      	ldr	r4, [pc, #100]	; (1ba0 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1b3a:	4b1a      	ldr	r3, [pc, #104]	; (1ba4 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b3c:	491a      	ldr	r1, [pc, #104]	; (1ba8 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b3e:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b40:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b42:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1b44:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b48:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b4a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1b4c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b4e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b56:	f7ff bd1d 	b.w	1594 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1b5a:	4c10      	ldr	r4, [pc, #64]	; (1b9c <am_hal_tpiu_enable+0x9c>)
    1b5c:	6905      	ldr	r5, [r0, #16]
    1b5e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1b60:	6882      	ldr	r2, [r0, #8]
    1b62:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1b66:	68c3      	ldr	r3, [r0, #12]
    1b68:	4c09      	ldr	r4, [pc, #36]	; (1b90 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1b6a:	490e      	ldr	r1, [pc, #56]	; (1ba4 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1b6c:	1e5d      	subs	r5, r3, #1
    1b6e:	2201      	movs	r2, #1
    1b70:	40aa      	lsls	r2, r5
    1b72:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1b74:	680b      	ldr	r3, [r1, #0]
    1b76:	6840      	ldr	r0, [r0, #4]
    1b78:	4318      	orrs	r0, r3
    1b7a:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b80:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1b84:	f7ff bd06 	b.w	1594 <am_hal_flash_delay>
    1b88:	2005      	movs	r0, #5
    1b8a:	e7d4      	b.n	1b36 <am_hal_tpiu_enable+0x36>
    1b8c:	e0040304 	.word	0xe0040304
    1b90:	e0040004 	.word	0xe0040004
    1b94:	001da380 	.word	0x001da380
    1b98:	000f4240 	.word	0x000f4240
    1b9c:	e0040010 	.word	0xe0040010
    1ba0:	e00400f0 	.word	0xe00400f0
    1ba4:	40020250 	.word	0x40020250
    1ba8:	e0040f00 	.word	0xe0040f00

00001bac <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1bac:	4b01      	ldr	r3, [pc, #4]	; (1bb4 <am_hal_tpiu_disable+0x8>)
    1bae:	2200      	movs	r2, #0
    1bb0:	601a      	str	r2, [r3, #0]
    1bb2:	4770      	bx	lr
    1bb4:	40020250 	.word	0x40020250

00001bb8 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1bb8:	4b01      	ldr	r3, [pc, #4]	; (1bc0 <am_hal_vcomp_disable+0x8>)
    1bba:	2237      	movs	r2, #55	; 0x37
    1bbc:	601a      	str	r2, [r3, #0]
    1bbe:	4770      	bx	lr
    1bc0:	4000c008 	.word	0x4000c008

00001bc4 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1bc4:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1bc6:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1bca:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1bcc:	0100      	lsls	r0, r0, #4
    1bce:	4a09      	ldr	r2, [pc, #36]	; (1bf4 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1bd0:	9301      	str	r3, [sp, #4]
    1bd2:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1bd4:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1bd6:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1bda:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1bde:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1be2:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1be4:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1be6:	9801      	ldr	r0, [sp, #4]
    1be8:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1bec:	b003      	add	sp, #12
    1bee:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bf2:	4770      	bx	lr
    1bf4:	4000800c 	.word	0x4000800c

00001bf8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1bf8:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1bfa:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1bfe:	0100      	lsls	r0, r0, #4
    1c00:	4a06      	ldr	r2, [pc, #24]	; (1c1c <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c02:	9301      	str	r3, [sp, #4]
    1c04:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1c06:	5883      	ldr	r3, [r0, r2]
    1c08:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1c0c:	4319      	orrs	r1, r3
    1c0e:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1c10:	9801      	ldr	r0, [sp, #4]
    1c12:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1c16:	b002      	add	sp, #8
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop
    1c1c:	4000800c 	.word	0x4000800c

00001c20 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1c20:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c22:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1c26:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1c28:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1c2a:	4d1c      	ldr	r5, [pc, #112]	; (1c9c <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c2c:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1c2e:	4e1c      	ldr	r6, [pc, #112]	; (1ca0 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1c30:	4f1c      	ldr	r7, [pc, #112]	; (1ca4 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c32:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c34:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1c38:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c3a:	d01a      	beq.n	1c72 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c3c:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1c40:	2d80      	cmp	r5, #128	; 0x80
    1c42:	d01b      	beq.n	1c7c <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c48:	2500      	movs	r5, #0
    1c4a:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1c4c:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c4e:	d01c      	beq.n	1c8a <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c50:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1c54:	d01e      	beq.n	1c94 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1c56:	0c21      	lsrs	r1, r4, #16
    1c58:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c5a:	b291      	uxth	r1, r2
    1c5c:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1c5e:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c62:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1c64:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1c66:	9801      	ldr	r0, [sp, #4]
    1c68:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1c6c:	b002      	add	sp, #8
    1c6e:	bcf0      	pop	{r4, r5, r6, r7}
    1c70:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c72:	0c25      	lsrs	r5, r4, #16
    1c74:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1c78:	2c80      	cmp	r4, #128	; 0x80
    1c7a:	d10a      	bne.n	1c92 <am_hal_ctimer_period_set+0x72>
    1c7c:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1c7e:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1c80:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c86:	4299      	cmp	r1, r3
    1c88:	d1e2      	bne.n	1c50 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c8a:	b297      	uxth	r7, r2
    1c8c:	433d      	orrs	r5, r7
    1c8e:	5185      	str	r5, [r0, r6]
    1c90:	e7e9      	b.n	1c66 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c92:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c94:	b296      	uxth	r6, r2
    1c96:	4335      	orrs	r5, r6
    1c98:	51c5      	str	r5, [r0, r7]
    1c9a:	e7e4      	b.n	1c66 <am_hal_ctimer_period_set+0x46>
    1c9c:	4000800c 	.word	0x4000800c
    1ca0:	40008004 	.word	0x40008004
    1ca4:	40008008 	.word	0x40008008

00001ca8 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1ca8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1cac:	b672      	cpsid	i
    __asm("    bx lr");
    1cae:	4770      	bx	lr

00001cb0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1cb0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1cb4:	4770      	bx	lr
    1cb6:	bf00      	nop
    1cb8:	6c6c6548 	.word	0x6c6c6548
    1cbc:	6146206f 	.word	0x6146206f
    1cc0:	2e746c75 	.word	0x2e746c75
    1cc4:	00000a0a 	.word	0x00000a0a
    1cc8:	69206e41 	.word	0x69206e41
    1ccc:	67656c6c 	.word	0x67656c6c
    1cd0:	6d206c61 	.word	0x6d206c61
    1cd4:	726f6d65 	.word	0x726f6d65
    1cd8:	63612079 	.word	0x63612079
    1cdc:	73736563 	.word	0x73736563
    1ce0:	6c697720 	.word	0x6c697720
    1ce4:	636f206c 	.word	0x636f206c
    1ce8:	20727563 	.word	0x20727563
    1cec:	7478656e 	.word	0x7478656e
    1cf0:	6877202c 	.word	0x6877202c
    1cf4:	20686369 	.word	0x20686369
    1cf8:	6c6c6977 	.word	0x6c6c6977
    1cfc:	65786520 	.word	0x65786520
    1d00:	65747563 	.word	0x65747563
    1d04:	65687420 	.word	0x65687420
    1d08:	7478650a 	.word	0x7478650a
    1d0c:	65646e65 	.word	0x65646e65
    1d10:	61662064 	.word	0x61662064
    1d14:	20746c75 	.word	0x20746c75
    1d18:	646e6168 	.word	0x646e6168
    1d1c:	2072656c 	.word	0x2072656c
    1d20:	61206f74 	.word	0x61206f74
    1d24:	73697373 	.word	0x73697373
    1d28:	6e692074 	.word	0x6e692074
    1d2c:	63656420 	.word	0x63656420
    1d30:	6e69646f 	.word	0x6e69646f
    1d34:	68742067 	.word	0x68742067
    1d38:	61662065 	.word	0x61662065
    1d3c:	2e746c75 	.word	0x2e746c75
    1d40:	0000000a 	.word	0x0000000a
    1d44:	206e490a 	.word	0x206e490a
    1d48:	6564726f 	.word	0x6564726f
    1d4c:	6f742072 	.word	0x6f742072
    1d50:	69727020 	.word	0x69727020
    1d54:	6f20746e 	.word	0x6f20746e
    1d58:	74207475 	.word	0x74207475
    1d5c:	66206568 	.word	0x66206568
    1d60:	746c7561 	.word	0x746c7561
    1d64:	666e6920 	.word	0x666e6920
    1d68:	616d726f 	.word	0x616d726f
    1d6c:	6e6f6974 	.word	0x6e6f6974
    1d70:	726f6620 	.word	0x726f6620
    1d74:	69687420 	.word	0x69687420
    1d78:	78652073 	.word	0x78652073
    1d7c:	6c706d61 	.word	0x6c706d61
    1d80:	20610a65 	.word	0x20610a65
    1d84:	7263616d 	.word	0x7263616d
    1d88:	41202c6f 	.word	0x41202c6f
    1d8c:	54555f4d 	.word	0x54555f4d
    1d90:	465f4c49 	.word	0x465f4c49
    1d94:	544c5541 	.word	0x544c5541
    1d98:	5f525349 	.word	0x5f525349
    1d9c:	4e495250 	.word	0x4e495250
    1da0:	68202c54 	.word	0x68202c54
    1da4:	62207361 	.word	0x62207361
    1da8:	206e6565 	.word	0x206e6565
    1dac:	69666564 	.word	0x69666564
    1db0:	2064656e 	.word	0x2064656e
    1db4:	74206e69 	.word	0x74206e69
    1db8:	62206568 	.word	0x62206568
    1dbc:	646c6975 	.word	0x646c6975
    1dc0:	766e650a 	.word	0x766e650a
    1dc4:	6e6f7269 	.word	0x6e6f7269
    1dc8:	746e656d 	.word	0x746e656d
    1dcc:	4f20202e 	.word	0x4f20202e
    1dd0:	72656874 	.word	0x72656874
    1dd4:	65736977 	.word	0x65736977
    1dd8:	65687420 	.word	0x65687420
    1ddc:	75616620 	.word	0x75616620
    1de0:	6420746c 	.word	0x6420746c
    1de4:	20617461 	.word	0x20617461
    1de8:	206e6163 	.word	0x206e6163
    1dec:	796c6e6f 	.word	0x796c6e6f
    1df0:	20656220 	.word	0x20656220
    1df4:	6d617865 	.word	0x6d617865
    1df8:	64656e69 	.word	0x64656e69
    1dfc:	7269640a 	.word	0x7269640a
    1e00:	6c746365 	.word	0x6c746365
    1e04:	6e692079 	.word	0x6e692079
    1e08:	65687420 	.word	0x65687420
    1e0c:	52534920 	.word	0x52534920
    1e10:	6f726620 	.word	0x6f726620
    1e14:	2061206d 	.word	0x2061206d
    1e18:	75626564 	.word	0x75626564
    1e1c:	72656767 	.word	0x72656767
    1e20:	000a0a2e 	.word	0x000a0a2e
    1e24:	63726f46 	.word	0x63726f46
    1e28:	20676e69 	.word	0x20676e69
    1e2c:	20656874 	.word	0x20656874
    1e30:	6c756166 	.word	0x6c756166
    1e34:	6f6e2074 	.word	0x6f6e2074
    1e38:	2e2e2077 	.word	0x2e2e2077
    1e3c:	000a0a2e 	.word	0x000a0a2e
    1e40:	64726148 	.word	0x64726148
    1e44:	75614620 	.word	0x75614620
    1e48:	7320746c 	.word	0x7320746c
    1e4c:	6b636174 	.word	0x6b636174
    1e50:	64206465 	.word	0x64206465
    1e54:	3a617461 	.word	0x3a617461
    1e58:	0000000a 	.word	0x0000000a
    1e5c:	20202020 	.word	0x20202020
    1e60:	20203052 	.word	0x20203052
    1e64:	7830203d 	.word	0x7830203d
    1e68:	58383025 	.word	0x58383025
    1e6c:	0000000a 	.word	0x0000000a
    1e70:	20202020 	.word	0x20202020
    1e74:	20203152 	.word	0x20203152
    1e78:	7830203d 	.word	0x7830203d
    1e7c:	58383025 	.word	0x58383025
    1e80:	0000000a 	.word	0x0000000a
    1e84:	20202020 	.word	0x20202020
    1e88:	20203252 	.word	0x20203252
    1e8c:	7830203d 	.word	0x7830203d
    1e90:	58383025 	.word	0x58383025
    1e94:	0000000a 	.word	0x0000000a
    1e98:	20202020 	.word	0x20202020
    1e9c:	20203352 	.word	0x20203352
    1ea0:	7830203d 	.word	0x7830203d
    1ea4:	58383025 	.word	0x58383025
    1ea8:	0000000a 	.word	0x0000000a
    1eac:	20202020 	.word	0x20202020
    1eb0:	20323152 	.word	0x20323152
    1eb4:	7830203d 	.word	0x7830203d
    1eb8:	58383025 	.word	0x58383025
    1ebc:	0000000a 	.word	0x0000000a
    1ec0:	20202020 	.word	0x20202020
    1ec4:	2020524c 	.word	0x2020524c
    1ec8:	7830203d 	.word	0x7830203d
    1ecc:	58383025 	.word	0x58383025
    1ed0:	0000000a 	.word	0x0000000a
    1ed4:	20202020 	.word	0x20202020
    1ed8:	20204350 	.word	0x20204350
    1edc:	7830203d 	.word	0x7830203d
    1ee0:	58383025 	.word	0x58383025
    1ee4:	0000000a 	.word	0x0000000a
    1ee8:	20202020 	.word	0x20202020
    1eec:	20525350 	.word	0x20525350
    1ef0:	7830203d 	.word	0x7830203d
    1ef4:	58383025 	.word	0x58383025
    1ef8:	0000000a 	.word	0x0000000a
    1efc:	6568744f 	.word	0x6568744f
    1f00:	61482072 	.word	0x61482072
    1f04:	46206472 	.word	0x46206472
    1f08:	746c7561 	.word	0x746c7561
    1f0c:	74616420 	.word	0x74616420
    1f10:	000a3a61 	.word	0x000a3a61
    1f14:	20202020 	.word	0x20202020
    1f18:	6c756146 	.word	0x6c756146
    1f1c:	64612074 	.word	0x64612074
    1f20:	73657264 	.word	0x73657264
    1f24:	203d2073 	.word	0x203d2073
    1f28:	30257830 	.word	0x30257830
    1f2c:	000a5838 	.word	0x000a5838
    1f30:	20202020 	.word	0x20202020
    1f34:	52414642 	.word	0x52414642
    1f38:	75422820 	.word	0x75422820
    1f3c:	61462073 	.word	0x61462073
    1f40:	20746c75 	.word	0x20746c75
    1f44:	72646441 	.word	0x72646441
    1f48:	67655220 	.word	0x67655220
    1f4c:	203d2029 	.word	0x203d2029
    1f50:	30257830 	.word	0x30257830
    1f54:	000a5838 	.word	0x000a5838
    1f58:	20202020 	.word	0x20202020
    1f5c:	52534d4d 	.word	0x52534d4d
    1f60:	654d2820 	.word	0x654d2820
    1f64:	674d206d 	.word	0x674d206d
    1f68:	4620746d 	.word	0x4620746d
    1f6c:	746c7561 	.word	0x746c7561
    1f70:	61745320 	.word	0x61745320
    1f74:	20737574 	.word	0x20737574
    1f78:	29676552 	.word	0x29676552
    1f7c:	30203d20 	.word	0x30203d20
    1f80:	32302578 	.word	0x32302578
    1f84:	00000a58 	.word	0x00000a58
    1f88:	20202020 	.word	0x20202020
    1f8c:	52534642 	.word	0x52534642
    1f90:	75422820 	.word	0x75422820
    1f94:	61462073 	.word	0x61462073
    1f98:	20746c75 	.word	0x20746c75
    1f9c:	74617453 	.word	0x74617453
    1fa0:	52207375 	.word	0x52207375
    1fa4:	20296765 	.word	0x20296765
    1fa8:	7830203d 	.word	0x7830203d
    1fac:	58323025 	.word	0x58323025
    1fb0:	0000000a 	.word	0x0000000a
    1fb4:	20202020 	.word	0x20202020
    1fb8:	52534655 	.word	0x52534655
    1fbc:	73552820 	.word	0x73552820
    1fc0:	20656761 	.word	0x20656761
    1fc4:	6c756146 	.word	0x6c756146
    1fc8:	74532074 	.word	0x74532074
    1fcc:	73757461 	.word	0x73757461
    1fd0:	67655220 	.word	0x67655220
    1fd4:	203d2029 	.word	0x203d2029
    1fd8:	30257830 	.word	0x30257830
    1fdc:	000a5834 	.word	0x000a5834
    1fe0:	20202020 	.word	0x20202020
    1fe4:	20202020 	.word	0x20202020
    1fe8:	52534642 	.word	0x52534642
    1fec:	74696220 	.word	0x74696220
    1ff0:	42203a37 	.word	0x42203a37
    1ff4:	56524146 	.word	0x56524146
    1ff8:	44494c41 	.word	0x44494c41
    1ffc:	0000000a 	.word	0x0000000a
    2000:	20202020 	.word	0x20202020
    2004:	20202020 	.word	0x20202020
    2008:	52534642 	.word	0x52534642
    200c:	74696220 	.word	0x74696220
    2010:	52203a36 	.word	0x52203a36
    2014:	52455345 	.word	0x52455345
    2018:	0a444556 	.word	0x0a444556
    201c:	00000000 	.word	0x00000000
    2020:	20202020 	.word	0x20202020
    2024:	20202020 	.word	0x20202020
    2028:	52534642 	.word	0x52534642
    202c:	74696220 	.word	0x74696220
    2030:	4c203a35 	.word	0x4c203a35
    2034:	52455053 	.word	0x52455053
    2038:	00000a52 	.word	0x00000a52
    203c:	20202020 	.word	0x20202020
    2040:	20202020 	.word	0x20202020
    2044:	52534642 	.word	0x52534642
    2048:	74696220 	.word	0x74696220
    204c:	53203a34 	.word	0x53203a34
    2050:	52454b54 	.word	0x52454b54
    2054:	00000a52 	.word	0x00000a52
    2058:	20202020 	.word	0x20202020
    205c:	20202020 	.word	0x20202020
    2060:	52534642 	.word	0x52534642
    2064:	74696220 	.word	0x74696220
    2068:	55203a33 	.word	0x55203a33
    206c:	4b54534e 	.word	0x4b54534e
    2070:	0a525245 	.word	0x0a525245
    2074:	00000000 	.word	0x00000000
    2078:	20202020 	.word	0x20202020
    207c:	20202020 	.word	0x20202020
    2080:	52534642 	.word	0x52534642
    2084:	74696220 	.word	0x74696220
    2088:	49203a32 	.word	0x49203a32
    208c:	4552504d 	.word	0x4552504d
    2090:	45534943 	.word	0x45534943
    2094:	000a5252 	.word	0x000a5252
    2098:	20202020 	.word	0x20202020
    209c:	20202020 	.word	0x20202020
    20a0:	52534642 	.word	0x52534642
    20a4:	74696220 	.word	0x74696220
    20a8:	50203a31 	.word	0x50203a31
    20ac:	49434552 	.word	0x49434552
    20b0:	52454553 	.word	0x52454553
    20b4:	00000a52 	.word	0x00000a52
    20b8:	20202020 	.word	0x20202020
    20bc:	20202020 	.word	0x20202020
    20c0:	52534642 	.word	0x52534642
    20c4:	74696220 	.word	0x74696220
    20c8:	49203a30 	.word	0x49203a30
    20cc:	45535542 	.word	0x45535542
    20d0:	000a5252 	.word	0x000a5252
    20d4:	6c6f7041 	.word	0x6c6f7041
    20d8:	20326f6c 	.word	0x20326f6c
    20dc:	6c756146 	.word	0x6c756146
    20e0:	61642074 	.word	0x61642074
    20e4:	0a3a6174 	.word	0x0a3a6174
    20e8:	00000000 	.word	0x00000000
    20ec:	49202020 	.word	0x49202020
    20f0:	45444f43 	.word	0x45444f43
    20f4:	75614620 	.word	0x75614620
    20f8:	4120746c 	.word	0x4120746c
    20fc:	65726464 	.word	0x65726464
    2100:	203a7373 	.word	0x203a7373
    2104:	30257830 	.word	0x30257830
    2108:	000a5838 	.word	0x000a5838
    210c:	44202020 	.word	0x44202020
    2110:	45444f43 	.word	0x45444f43
    2114:	75614620 	.word	0x75614620
    2118:	4120746c 	.word	0x4120746c
    211c:	65726464 	.word	0x65726464
    2120:	203a7373 	.word	0x203a7373
    2124:	30257830 	.word	0x30257830
    2128:	000a5838 	.word	0x000a5838
    212c:	53202020 	.word	0x53202020
    2130:	46205359 	.word	0x46205359
    2134:	746c7561 	.word	0x746c7561
    2138:	64644120 	.word	0x64644120
    213c:	73736572 	.word	0x73736572
    2140:	7830203a 	.word	0x7830203a
    2144:	58383025 	.word	0x58383025
    2148:	0000000a 	.word	0x0000000a
    214c:	0a0a0a0a 	.word	0x0a0a0a0a
    2150:	0a0a0a0a 	.word	0x0a0a0a0a
    2154:	0a0a0a0a 	.word	0x0a0a0a0a
    2158:	0a0a0a0a 	.word	0x0a0a0a0a
    215c:	00000a0a 	.word	0x00000a0a

00002160 <am_hal_cachectrl_defaults>:
    2160:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2170:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2180:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2190:	63206469 6b636f6c 74657320 676e6974     id clock setting
    21a0:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    21b0:	6b6c635f 2e6e6567 00000063              _clkgen.c...
