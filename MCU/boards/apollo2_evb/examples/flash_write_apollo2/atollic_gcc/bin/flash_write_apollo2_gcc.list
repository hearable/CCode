
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\flash_write_apollo2\atollic_gcc\bin\flash_write_apollo2_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000054  10001000  00002ad8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000410c  10001054  00002b2c  00021054  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021054  2**0
                  CONTENTS, READONLY
  5 .debug_info   000056f4  00000000  00000000  0002108b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017e2  00000000  00000000  0002677f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000720  00000000  00000000  00027f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000be0  00000000  00000000  00028681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a4a  00000000  00000000  00029261  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025a2  00000000  00000000  0002ccab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0002f24d  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001480  00000000  00000000  0002f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000022ff  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 89 09 00 00 f1 09 00 00 01 0a 00 00     ................
      10:	01 0a 00 00 01 0a 00 00 01 0a 00 00 00 00 00 00     ................
	...
      2c:	f9 09 00 00 f9 09 00 00 00 00 00 00 f9 09 00 00     ................
      3c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      4c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      5c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      6c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      7c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      8c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      9c:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      ac:	f9 09 00 00 f9 09 00 00 f9 09 00 00 f9 09 00 00     ................
      bc:	f9 09 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    int32_t i32ErrorFlag = 0;
     166:	2300      	movs	r3, #0
     168:	607b      	str	r3, [r7, #4]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     16a:	2000      	movs	r0, #0
     16c:	f001 fc74 	bl	1a58 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     170:	4855      	ldr	r0, [pc, #340]	; (2c8 <main+0x168>)
     172:	f001 fbdb 	bl	192c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     176:	f001 fb85 	bl	1884 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     17a:	4854      	ldr	r0, [pc, #336]	; (2cc <main+0x16c>)
     17c:	f000 fcc0 	bl	b00 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     180:	f3ef 8310 	mrs	r3, PRIMASK
     184:	603b      	str	r3, [r7, #0]
     186:	b672      	cpsid	i
     188:	4b51      	ldr	r3, [pc, #324]	; (2d0 <main+0x170>)
     18a:	2273      	movs	r2, #115	; 0x73
     18c:	601a      	str	r2, [r3, #0]
     18e:	4a51      	ldr	r2, [pc, #324]	; (2d4 <main+0x174>)
     190:	4b50      	ldr	r3, [pc, #320]	; (2d4 <main+0x174>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     198:	6013      	str	r3, [r2, #0]
     19a:	4a4f      	ldr	r2, [pc, #316]	; (2d8 <main+0x178>)
     19c:	4b4e      	ldr	r3, [pc, #312]	; (2d8 <main+0x178>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1a8:	6013      	str	r3, [r2, #0]
     1aa:	4a4c      	ldr	r2, [pc, #304]	; (2dc <main+0x17c>)
     1ac:	4b4b      	ldr	r3, [pc, #300]	; (2dc <main+0x17c>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1b4:	6013      	str	r3, [r2, #0]
     1b6:	4b46      	ldr	r3, [pc, #280]	; (2d0 <main+0x170>)
     1b8:	2200      	movs	r2, #0
     1ba:	601a      	str	r2, [r3, #0]
     1bc:	683b      	ldr	r3, [r7, #0]
     1be:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1c2:	f001 fe7b 	bl	1ebc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1c6:	f001 fb6f 	bl	18a8 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     1ca:	f001 fb29 	bl	1820 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Flash Write Example\n");
     1ce:	4844      	ldr	r0, [pc, #272]	; (2e0 <main+0x180>)
     1d0:	f001 fb08 	bl	17e4 <am_util_stdio_printf>

    //
    // Erase the whole block of FLASH instance 1 (512KB to 1MB).
    //
    if ( main_block_erase() )
     1d4:	f000 fad0 	bl	778 <main_block_erase>
     1d8:	4603      	mov	r3, r0
     1da:	2b00      	cmp	r3, #0
     1dc:	d002      	beq.n	1e4 <main+0x84>
    {
        i32ErrorFlag++;
     1de:	687b      	ldr	r3, [r7, #4]
     1e0:	3301      	adds	r3, #1
     1e2:	607b      	str	r3, [r7, #4]

    //
    // Program a few words in a page in the main block of instance 1.
    // We'll arbitrarily pick 0x00041000 = 260*1024 = (256+4)*1024.
    //
    if ( main_block_pattern_write() )
     1e4:	f000 faee 	bl	7c4 <main_block_pattern_write>
     1e8:	4603      	mov	r3, r0
     1ea:	2b00      	cmp	r3, #0
     1ec:	d002      	beq.n	1f4 <main+0x94>
    {
        i32ErrorFlag++;
     1ee:	687b      	ldr	r3, [r7, #4]
     1f0:	3301      	adds	r3, #1
     1f2:	607b      	str	r3, [r7, #4]
    }

    //
    // Erase the page just programmed.
    //
    if ( main_block_page_erase() )
     1f4:	f000 fb68 	bl	8c8 <main_block_page_erase>
     1f8:	4603      	mov	r3, r0
     1fa:	2b00      	cmp	r3, #0
     1fc:	d002      	beq.n	204 <main+0xa4>
    {
        i32ErrorFlag++;
     1fe:	687b      	ldr	r3, [r7, #4]
     200:	3301      	adds	r3, #1
     202:	607b      	str	r3, [r7, #4]
    }

    //
    // Erase the INFO block.
    //
    if ( info_block_erase() )
     204:	f000 f878 	bl	2f8 <info_block_erase>
     208:	4603      	mov	r3, r0
     20a:	2b00      	cmp	r3, #0
     20c:	d002      	beq.n	214 <main+0xb4>
    {
        i32ErrorFlag++;
     20e:	687b      	ldr	r3, [r7, #4]
     210:	3301      	adds	r3, #1
     212:	607b      	str	r3, [r7, #4]
    }

    //
    // Program a few words in the INFO block.
    //
    if ( info_block_pattern_write() )
     214:	f000 f88e 	bl	334 <info_block_pattern_write>
     218:	4603      	mov	r3, r0
     21a:	2b00      	cmp	r3, #0
     21c:	d002      	beq.n	224 <main+0xc4>
    {
        i32ErrorFlag++;
     21e:	687b      	ldr	r3, [r7, #4]
     220:	3301      	adds	r3, #1
     222:	607b      	str	r3, [r7, #4]
    }

    //
    // Erase the INFO block again before the next two steps.
    //
    if ( info_block_erase() )
     224:	f000 f868 	bl	2f8 <info_block_erase>
     228:	4603      	mov	r3, r0
     22a:	2b00      	cmp	r3, #0
     22c:	d002      	beq.n	234 <main+0xd4>
    {
        i32ErrorFlag++;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	3301      	adds	r3, #1
     232:	607b      	str	r3, [r7, #4]
    }

    //
    // Write a board name into the INFO block at 128 bytes before the end.
    //
    if ( info_block_write_board_name("CUSTOMER: MY BOARD") )
     234:	482b      	ldr	r0, [pc, #172]	; (2e4 <main+0x184>)
     236:	f000 f8f7 	bl	428 <info_block_write_board_name>
     23a:	4603      	mov	r3, r0
     23c:	2b00      	cmp	r3, #0
     23e:	d002      	beq.n	246 <main+0xe6>
    {
        i32ErrorFlag++;
     240:	687b      	ldr	r3, [r7, #4]
     242:	3301      	adds	r3, #1
     244:	607b      	str	r3, [r7, #4]
    }

    //
    // Write 6 byte BLE Address into the INFO block at 136 bytes before the end.
    //
    if ( info_block_write_ble_address(0x0000123456ABCDEF) )
     246:	a11e      	add	r1, pc, #120	; (adr r1, 2c0 <main+0x160>)
     248:	e9d1 0100 	ldrd	r0, r1, [r1]
     24c:	f000 f922 	bl	494 <info_block_write_ble_address>
     250:	4603      	mov	r3, r0
     252:	2b00      	cmp	r3, #0
     254:	d002      	beq.n	25c <main+0xfc>
    {
        i32ErrorFlag++;
     256:	687b      	ldr	r3, [r7, #4]
     258:	3301      	adds	r3, #1
     25a:	607b      	str	r3, [r7, #4]
    }

    //
    // Disable Flash INFO space erase operations.
    //
    if ( info_block_disable_erase() )
     25c:	f000 f9b2 	bl	5c4 <info_block_disable_erase>
     260:	4603      	mov	r3, r0
     262:	2b00      	cmp	r3, #0
     264:	d002      	beq.n	26c <main+0x10c>
    {
        i32ErrorFlag++;
     266:	687b      	ldr	r3, [r7, #4]
     268:	3301      	adds	r3, #1
     26a:	607b      	str	r3, [r7, #4]
    }

    //
    // Disable Flash INFO space program operations by quadrant.
    //
    if ( info_block_disable_program(0xA, 0xA) )
     26c:	210a      	movs	r1, #10
     26e:	200a      	movs	r0, #10
     270:	f000 f9f0 	bl	654 <info_block_disable_program>
     274:	4603      	mov	r3, r0
     276:	2b00      	cmp	r3, #0
     278:	d002      	beq.n	280 <main+0x120>
    {
        i32ErrorFlag++;
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	3301      	adds	r3, #1
     27e:	607b      	str	r3, [r7, #4]
    }

    //
    // Enable flash wipe function in Flash INFO space.
    //
    if ( info_block_enable_flash_wipe() )
     280:	f000 fa30 	bl	6e4 <info_block_enable_flash_wipe>
     284:	4603      	mov	r3, r0
     286:	2b00      	cmp	r3, #0
     288:	d002      	beq.n	290 <main+0x130>
    {
        i32ErrorFlag++;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	3301      	adds	r3, #1
     28e:	607b      	str	r3, [r7, #4]
    }

    //
    // Report success or any failures.
    //
    if (i32ErrorFlag)
     290:	687b      	ldr	r3, [r7, #4]
     292:	2b00      	cmp	r3, #0
     294:	d004      	beq.n	2a0 <main+0x140>
    {
        am_util_stdio_printf("ERROR: FLASH Write example failure %d\n",
     296:	6879      	ldr	r1, [r7, #4]
     298:	4813      	ldr	r0, [pc, #76]	; (2e8 <main+0x188>)
     29a:	f001 faa3 	bl	17e4 <am_util_stdio_printf>
     29e:	e002      	b.n	2a6 <main+0x146>
                             i32ErrorFlag);
    }
    else
    {
        am_util_stdio_printf("FLASH Write example successful \n");
     2a0:	4812      	ldr	r0, [pc, #72]	; (2ec <main+0x18c>)
     2a2:	f001 fa9f 	bl	17e4 <am_util_stdio_printf>
    }

    //
    // Verify that ITM has finished printing.
    //
    am_hal_itm_not_busy();
     2a6:	f001 fe35 	bl	1f14 <am_hal_itm_not_busy>


    //
    // Wait at least 20 seconds.
    //
    am_hal_flash_delay(20 * (AM_HAL_CLKGEN_FREQ_MAX_HZ / 3));
     2aa:	4811      	ldr	r0, [pc, #68]	; (2f0 <main+0x190>)
     2ac:	f001 fc34 	bl	1b18 <am_hal_flash_delay>

    //
    // Unconditionally recover a part that could be bricked.
    // We will never return from this call.
    //
    am_hal_flash_recovery(AM_HAL_FLASH_RECOVERY_KEY);
     2b0:	4810      	ldr	r0, [pc, #64]	; (2f4 <main+0x194>)
     2b2:	f001 fc2b 	bl	1b0c <am_hal_flash_recovery>


    //
    // Provide return code back to the system.
    //
    return i32ErrorFlag;
     2b6:	687b      	ldr	r3, [r7, #4]
}
     2b8:	4618      	mov	r0, r3
     2ba:	3708      	adds	r7, #8
     2bc:	46bd      	mov	sp, r7
     2be:	bd80      	pop	{r7, pc}
     2c0:	56abcdef 	.word	0x56abcdef
     2c4:	00001234 	.word	0x00001234
     2c8:	00002a3c 	.word	0x00002a3c
     2cc:	00001929 	.word	0x00001929
     2d0:	40010060 	.word	0x40010060
     2d4:	40010054 	.word	0x40010054
     2d8:	40010028 	.word	0x40010028
     2dc:	40010108 	.word	0x40010108
     2e0:	000023ec 	.word	0x000023ec
     2e4:	00002404 	.word	0x00002404
     2e8:	00002418 	.word	0x00002418
     2ec:	00002440 	.word	0x00002440
     2f0:	1312d000 	.word	0x1312d000
     2f4:	a35c9b6d 	.word	0xa35c9b6d

000002f8 <info_block_erase>:
// Main block erase function.
//
//*****************************************************************************
int
info_block_erase(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;

    //
    // Erase the whole block of FLASH instance 1 (512KB to 1MB).
    //
    am_util_stdio_printf("  ... erasing all of INFO block, flash instance 0.\n");
     2fe:	480a      	ldr	r0, [pc, #40]	; (328 <info_block_erase+0x30>)
     300:	f001 fa70 	bl	17e4 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_erase_info(AM_HAL_FLASH_PROGRAM_KEY, 0);
     304:	2100      	movs	r1, #0
     306:	4809      	ldr	r0, [pc, #36]	; (32c <info_block_erase+0x34>)
     308:	f001 fbfa 	bl	1b00 <am_hal_flash_erase_info>
     30c:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     30e:	687b      	ldr	r3, [r7, #4]
     310:	2b00      	cmp	r3, #0
     312:	d003      	beq.n	31c <info_block_erase+0x24>
    {
        am_util_stdio_printf("ERROR: FLASH_INFO_ERASE i32ReturnCode =  0x%x.\n",
     314:	6879      	ldr	r1, [r7, #4]
     316:	4806      	ldr	r0, [pc, #24]	; (330 <info_block_erase+0x38>)
     318:	f001 fa64 	bl	17e4 <am_util_stdio_printf>
                             i32ReturnCode);
    }

    return i32ReturnCode;
     31c:	687b      	ldr	r3, [r7, #4]

}
     31e:	4618      	mov	r0, r3
     320:	3708      	adds	r7, #8
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	bf00      	nop
     328:	00002464 	.word	0x00002464
     32c:	12344321 	.word	0x12344321
     330:	00002498 	.word	0x00002498

00000334 <info_block_pattern_write>:
// INFO block pattern write function.
//
//*****************************************************************************
int
info_block_pattern_write(void)
{
     334:	b580      	push	{r7, lr}
     336:	b088      	sub	sp, #32
     338:	af02      	add	r7, sp, #8
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     33a:	2300      	movs	r3, #0
     33c:	617b      	str	r3, [r7, #20]
    uint32_t *pui32Src;
    uint32_t *pui32Dst = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;
     33e:	4b32      	ldr	r3, [pc, #200]	; (408 <info_block_pattern_write+0xd4>)
     340:	60bb      	str	r3, [r7, #8]
    int32_t ix;

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming INFO block of flash instance 0.\n");
     342:	4832      	ldr	r0, [pc, #200]	; (40c <info_block_pattern_write+0xd8>)
     344:	f001 fa4e 	bl	17e4 <am_util_stdio_printf>

    pui32Src = g_ui32Source;
     348:	4b31      	ldr	r3, [pc, #196]	; (410 <info_block_pattern_write+0xdc>)
     34a:	613b      	str	r3, [r7, #16]
    for (ix = 0x100; ix < (0x100 +  AM_HAL_FLASH_INFO_SIZE); ix += 4)
     34c:	f44f 7380 	mov.w	r3, #256	; 0x100
     350:	60fb      	str	r3, [r7, #12]
     352:	e007      	b.n	364 <info_block_pattern_write+0x30>
    {
        *pui32Src++ = ix;
     354:	693b      	ldr	r3, [r7, #16]
     356:	1d1a      	adds	r2, r3, #4
     358:	613a      	str	r2, [r7, #16]
     35a:	68fa      	ldr	r2, [r7, #12]
     35c:	601a      	str	r2, [r3, #0]
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming INFO block of flash instance 0.\n");

    pui32Src = g_ui32Source;
    for (ix = 0x100; ix < (0x100 +  AM_HAL_FLASH_INFO_SIZE); ix += 4)
     35e:	68fb      	ldr	r3, [r7, #12]
     360:	3304      	adds	r3, #4
     362:	60fb      	str	r3, [r7, #12]
     364:	68fb      	ldr	r3, [r7, #12]
     366:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
     36a:	dbf3      	blt.n	354 <info_block_pattern_write+0x20>
    }

    //
    // Program a "few" words in a page in the INFO block of instance 0.
    //
    i32ReturnCode = am_hal_flash_program_info(
     36c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     370:	9300      	str	r3, [sp, #0]
     372:	2300      	movs	r3, #0
     374:	4a26      	ldr	r2, [pc, #152]	; (410 <info_block_pattern_write+0xdc>)
     376:	2100      	movs	r1, #0
     378:	4826      	ldr	r0, [pc, #152]	; (414 <info_block_pattern_write+0xe0>)
     37a:	f001 fbb7 	bl	1aec <am_hal_flash_program_info>
     37e:	6078      	str	r0, [r7, #4]
                        0,                                  // we are only supporting INFO on instance 0.
                        g_ui32Source,
                        0,                                  // offset
                        (AM_HAL_FLASH_INFO_SIZE >> 2) );    // num words

    am_util_stdio_printf("\nINFO block size = 0x%x = %d\n",
     380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     388:	4823      	ldr	r0, [pc, #140]	; (418 <info_block_pattern_write+0xe4>)
     38a:	f001 fa2b 	bl	17e4 <am_util_stdio_printf>
                         AM_HAL_FLASH_INFO_SIZE, AM_HAL_FLASH_INFO_SIZE);

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2b00      	cmp	r3, #0
     392:	d007      	beq.n	3a4 <info_block_pattern_write+0x70>
    {
        am_util_stdio_printf("FLASH program page at 0x%08x "
     394:	687a      	ldr	r2, [r7, #4]
     396:	68b9      	ldr	r1, [r7, #8]
     398:	4820      	ldr	r0, [pc, #128]	; (41c <info_block_pattern_write+0xe8>)
     39a:	f001 fa23 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             pui32Dst,
                             i32ReturnCode);
        i32ErrorFlag++;
     39e:	697b      	ldr	r3, [r7, #20]
     3a0:	3301      	adds	r3, #1
     3a2:	617b      	str	r3, [r7, #20]
    }

    //
    // Check the page we just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
     3a4:	481e      	ldr	r0, [pc, #120]	; (420 <info_block_pattern_write+0xec>)
     3a6:	f001 fa1d 	bl	17e4 <am_util_stdio_printf>
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     3aa:	2300      	movs	r3, #0
     3ac:	60fb      	str	r3, [r7, #12]
     3ae:	e022      	b.n	3f6 <info_block_pattern_write+0xc2>
    {
        if ( pui32Dst[ix] != g_ui32Source[ix] )
     3b0:	68fb      	ldr	r3, [r7, #12]
     3b2:	009b      	lsls	r3, r3, #2
     3b4:	68ba      	ldr	r2, [r7, #8]
     3b6:	4413      	add	r3, r2
     3b8:	681a      	ldr	r2, [r3, #0]
     3ba:	4915      	ldr	r1, [pc, #84]	; (410 <info_block_pattern_write+0xdc>)
     3bc:	68fb      	ldr	r3, [r7, #12]
     3be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     3c2:	429a      	cmp	r2, r3
     3c4:	d014      	beq.n	3f0 <info_block_pattern_write+0xbc>
        {
            i32ErrorFlag++;
     3c6:	697b      	ldr	r3, [r7, #20]
     3c8:	3301      	adds	r3, #1
     3ca:	617b      	str	r3, [r7, #20]
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     3cc:	68fb      	ldr	r3, [r7, #12]
     3ce:	011b      	lsls	r3, r3, #4
     3d0:	461a      	mov	r2, r3
     3d2:	68bb      	ldr	r3, [r7, #8]
     3d4:	1899      	adds	r1, r3, r2
     3d6:	4a0e      	ldr	r2, [pc, #56]	; (410 <info_block_pattern_write+0xdc>)
     3d8:	68fb      	ldr	r3, [r7, #12]
     3da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 pui32Dst + (ix * 4),
                                 g_ui32Source[ix],
                                 pui32Dst[ix]);
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	009b      	lsls	r3, r3, #2
     3e2:	68ba      	ldr	r2, [r7, #8]
     3e4:	4413      	add	r3, r2
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
    {
        if ( pui32Dst[ix] != g_ui32Source[ix] )
        {
            i32ErrorFlag++;
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     3e6:	681b      	ldr	r3, [r3, #0]
     3e8:	4602      	mov	r2, r0
     3ea:	480e      	ldr	r0, [pc, #56]	; (424 <info_block_pattern_write+0xf0>)
     3ec:	f001 f9fa 	bl	17e4 <am_util_stdio_printf>

    //
    // Check the page we just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     3f0:	68fb      	ldr	r3, [r7, #12]
     3f2:	3301      	adds	r3, #1
     3f4:	60fb      	str	r3, [r7, #12]
     3f6:	68fb      	ldr	r3, [r7, #12]
     3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     3fc:	dbd8      	blt.n	3b0 <info_block_pattern_write+0x7c>
                                 g_ui32Source[ix],
                                 pui32Dst[ix]);
        }
    }

    return i32ErrorFlag;
     3fe:	697b      	ldr	r3, [r7, #20]

}
     400:	4618      	mov	r0, r3
     402:	3718      	adds	r7, #24
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}
     408:	50020000 	.word	0x50020000
     40c:	000024c8 	.word	0x000024c8
     410:	1000115c 	.word	0x1000115c
     414:	12344321 	.word	0x12344321
     418:	000024fc 	.word	0x000024fc
     41c:	0000251c 	.word	0x0000251c
     420:	00002550 	.word	0x00002550
     424:	0000257c 	.word	0x0000257c

00000428 <info_block_write_board_name>:
// INFO block write board name function.
//
//*****************************************************************************
int
info_block_write_board_name(char *pChar)
{
     428:	b580      	push	{r7, lr}
     42a:	b088      	sub	sp, #32
     42c:	af02      	add	r7, sp, #8
     42e:	6078      	str	r0, [r7, #4]
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     430:	2300      	movs	r3, #0
     432:	617b      	str	r3, [r7, #20]
    char *pcharDst = (char *)( AM_HAL_FLASH_INFO_ADDR +
     434:	4b12      	ldr	r3, [pc, #72]	; (480 <info_block_write_board_name+0x58>)
     436:	613b      	str	r3, [r7, #16]
                               AM_HAL_FLASH_INFO_SIZE - 128 );

    //
    // First copy string to 32-bit aligned buffer.
    //
    am_util_string_strncpy((char *) g_ui32Source, pChar, 127);
     438:	227f      	movs	r2, #127	; 0x7f
     43a:	6879      	ldr	r1, [r7, #4]
     43c:	4811      	ldr	r0, [pc, #68]	; (484 <info_block_write_board_name+0x5c>)
     43e:	f001 f9f9 	bl	1834 <am_util_string_strncpy>

    //
    // Now write the board name to the info block.
    //
    i32ReturnCode = am_hal_flash_program_info(
     442:	2320      	movs	r3, #32
     444:	9300      	str	r3, [sp, #0]
     446:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
     44a:	4a0e      	ldr	r2, [pc, #56]	; (484 <info_block_write_board_name+0x5c>)
     44c:	2100      	movs	r1, #0
     44e:	480e      	ldr	r0, [pc, #56]	; (488 <info_block_write_board_name+0x60>)
     450:	f001 fb4c 	bl	1aec <am_hal_flash_program_info>
     454:	60f8      	str	r0, [r7, #12]
                        (128 / 4) );                            // num words

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     456:	68fb      	ldr	r3, [r7, #12]
     458:	2b00      	cmp	r3, #0
     45a:	d008      	beq.n	46e <info_block_write_board_name+0x46>
    {
        am_util_stdio_printf("ERROR: am_hal_flash_program_info at offset 0x%08x "
     45c:	68fa      	ldr	r2, [r7, #12]
     45e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
     462:	480a      	ldr	r0, [pc, #40]	; (48c <info_block_write_board_name+0x64>)
     464:	f001 f9be 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             ((AM_HAL_FLASH_INFO_SIZE - 128) / 4),  // offset
                             i32ReturnCode);
        i32ErrorFlag++;
     468:	697b      	ldr	r3, [r7, #20]
     46a:	3301      	adds	r3, #1
     46c:	617b      	str	r3, [r7, #20]
    }

    //
    // That's a wrap so print it.
    //
    am_util_stdio_printf("info_block_write_board_name: <%s>\n", pcharDst);
     46e:	6939      	ldr	r1, [r7, #16]
     470:	4807      	ldr	r0, [pc, #28]	; (490 <info_block_write_board_name+0x68>)
     472:	f001 f9b7 	bl	17e4 <am_util_stdio_printf>

    return i32ErrorFlag;
     476:	697b      	ldr	r3, [r7, #20]
}
     478:	4618      	mov	r0, r3
     47a:	3718      	adds	r7, #24
     47c:	46bd      	mov	sp, r7
     47e:	bd80      	pop	{r7, pc}
     480:	50021f80 	.word	0x50021f80
     484:	1000115c 	.word	0x1000115c
     488:	12344321 	.word	0x12344321
     48c:	000025ec 	.word	0x000025ec
     490:	00002638 	.word	0x00002638

00000494 <info_block_write_ble_address>:
#define MAX_WAFER_NUM (25)
// max value = X*Y*WAFER = 113 * 110 * 25 = 310750 --> 19 bits
// this leaves 5 bits of lotid info. So, we throw away most LOTID bits.
int
info_block_write_ble_address(uint64_t ui64BLEAddress)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	b099      	sub	sp, #100	; 0x64
     498:	af02      	add	r7, sp, #8
     49a:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_mcuctrl_device_t  mcu_dev;
    uint64_t ui64WorkingBLEAddress;
    uint32_t ui32Work;
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     49e:	2300      	movs	r3, #0
     4a0:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR +
     4a2:	4b42      	ldr	r3, [pc, #264]	; (5ac <info_block_write_ble_address+0x118>)
     4a4:	653b      	str	r3, [r7, #80]	; 0x50
                                        AM_HAL_FLASH_INFO_SIZE - 128 - 8);

    //
    // Fabricate a unique-ish 24 bit part id from the CHIPID registers.
    //
    am_hal_mcuctrl_device_info_get(&mcu_dev);
     4a6:	f107 030c 	add.w	r3, r7, #12
     4aa:	4618      	mov	r0, r3
     4ac:	f001 fd56 	bl	1f5c <am_hal_mcuctrl_device_info_get>
    ui32Work  = ((mcu_dev.ui32ChipID0 >>  0) & 0x3ff);              // X
     4b0:	693b      	ldr	r3, [r7, #16]
     4b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
     4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    ui32Work += ((mcu_dev.ui32ChipID0 >> 10) & 0x3ff) * MAX_DIE_X;  // Y
     4b8:	693b      	ldr	r3, [r7, #16]
     4ba:	0a9b      	lsrs	r3, r3, #10
     4bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
     4c0:	4613      	mov	r3, r2
     4c2:	00db      	lsls	r3, r3, #3
     4c4:	1a9b      	subs	r3, r3, r2
     4c6:	011b      	lsls	r3, r3, #4
     4c8:	4413      	add	r3, r2
     4ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     4cc:	4413      	add	r3, r2
     4ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    ui32Work += ((mcu_dev.ui32ChipID0 >> 20) & 0x01f) * MAX_DIE_XY; // WAFER
     4d0:	693b      	ldr	r3, [r7, #16]
     4d2:	0d1b      	lsrs	r3, r3, #20
     4d4:	f003 031f 	and.w	r3, r3, #31
     4d8:	f243 028e 	movw	r2, #12430	; 0x308e
     4dc:	fb02 f303 	mul.w	r3, r2, r3
     4e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     4e2:	4413      	add	r3, r2
     4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    ui32Work += ((mcu_dev.ui32ChipID0 >> 28) & 0x00f)               // LOTID
     4e6:	693b      	ldr	r3, [r7, #16]
     4e8:	0f1b      	lsrs	r3, r3, #28
                 * MAX_DIE_XY * MAX_WAFER_NUM;
     4ea:	4a31      	ldr	r2, [pc, #196]	; (5b0 <info_block_write_ble_address+0x11c>)
     4ec:	fb02 f303 	mul.w	r3, r2, r3
    //
    am_hal_mcuctrl_device_info_get(&mcu_dev);
    ui32Work  = ((mcu_dev.ui32ChipID0 >>  0) & 0x3ff);              // X
    ui32Work += ((mcu_dev.ui32ChipID0 >> 10) & 0x3ff) * MAX_DIE_X;  // Y
    ui32Work += ((mcu_dev.ui32ChipID0 >> 20) & 0x01f) * MAX_DIE_XY; // WAFER
    ui32Work += ((mcu_dev.ui32ChipID0 >> 28) & 0x00f)               // LOTID
     4f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     4f2:	4413      	add	r3, r2
     4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
                 * MAX_DIE_XY * MAX_WAFER_NUM;
    ui64WorkingBLEAddress = (ui64BLEAddress & 0xFFFFFFFFFF000000ULL) |
     4f6:	e897 0018 	ldmia.w	r7, {r3, r4}
     4fa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4fe:	f04f 32ff 	mov.w	r2, #4294967295
     502:	ea01 0103 	and.w	r1, r1, r3
     506:	ea02 0204 	and.w	r2, r2, r4
     50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     50c:	f04f 0400 	mov.w	r4, #0
     510:	ea43 0301 	orr.w	r3, r3, r1
     514:	ea44 0402 	orr.w	r4, r4, r2
     518:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    //
    // Add the bluetooth address (lower 6 out of 8 bytes) to a 32-bit
    // aligned source array.
    //
    g_ui32Source[0] = (uint32_t) ui64WorkingBLEAddress ;
     51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     51e:	4a25      	ldr	r2, [pc, #148]	; (5b4 <info_block_write_ble_address+0x120>)
     520:	6013      	str	r3, [r2, #0]
    g_ui32Source[1] = (uint32_t) (ui64WorkingBLEAddress >> 32);
     522:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
     526:	0025      	movs	r5, r4
     528:	2600      	movs	r6, #0
     52a:	462a      	mov	r2, r5
     52c:	4b21      	ldr	r3, [pc, #132]	; (5b4 <info_block_write_ble_address+0x120>)
     52e:	605a      	str	r2, [r3, #4]

    //
    // Now write the bluetooth addres to the info block.
    //
    i32ReturnCode = am_hal_flash_program_info(
     530:	2302      	movs	r3, #2
     532:	9300      	str	r3, [sp, #0]
     534:	f240 73de 	movw	r3, #2014	; 0x7de
     538:	4a1e      	ldr	r2, [pc, #120]	; (5b4 <info_block_write_ble_address+0x120>)
     53a:	2100      	movs	r1, #0
     53c:	481e      	ldr	r0, [pc, #120]	; (5b8 <info_block_write_ble_address+0x124>)
     53e:	f001 fad5 	bl	1aec <am_hal_flash_program_info>
     542:	63f8      	str	r0, [r7, #60]	; 0x3c
                        (8 / 4) );                                  // num words

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     546:	2b00      	cmp	r3, #0
     548:	d008      	beq.n	55c <info_block_write_ble_address+0xc8>
    {
        am_util_stdio_printf("ERROR: am_hal_flash_program_info at offset 0x%08x "
     54a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     54c:	f240 71de 	movw	r1, #2014	; 0x7de
     550:	481a      	ldr	r0, [pc, #104]	; (5bc <info_block_write_ble_address+0x128>)
     552:	f001 f947 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             ((AM_HAL_FLASH_INFO_SIZE - 128 - 8) / 4),  // offset
                             i32ReturnCode);
        i32ErrorFlag++;
     556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     558:	3301      	adds	r3, #1
     55a:	657b      	str	r3, [r7, #84]	; 0x54
    }

    //
    // Check to make sure we wrote it.
    //
    if ( (pui32Dst[0] != g_ui32Source[0]) || (pui32Dst[1] != g_ui32Source[1]) )
     55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     55e:	681a      	ldr	r2, [r3, #0]
     560:	4b14      	ldr	r3, [pc, #80]	; (5b4 <info_block_write_ble_address+0x120>)
     562:	681b      	ldr	r3, [r3, #0]
     564:	429a      	cmp	r2, r3
     566:	d106      	bne.n	576 <info_block_write_ble_address+0xe2>
     568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     56a:	3304      	adds	r3, #4
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	4b11      	ldr	r3, [pc, #68]	; (5b4 <info_block_write_ble_address+0x120>)
     570:	685b      	ldr	r3, [r3, #4]
     572:	429a      	cmp	r2, r3
     574:	d014      	beq.n	5a0 <info_block_write_ble_address+0x10c>
    {
        am_util_stdio_printf("ERROR: bluetooth addres at offset 0x%08x "
                             " not written correctly "
                             "0x%08x%08x != 0x%08x%08x \n",
                             ((AM_HAL_FLASH_INFO_SIZE - 128 - 8) / 4),  // offset
                             pui32Dst[1], pui32Dst[0],
     576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     578:	3304      	adds	r3, #4
    //
    // Check to make sure we wrote it.
    //
    if ( (pui32Dst[0] != g_ui32Source[0]) || (pui32Dst[1] != g_ui32Source[1]) )
    {
        am_util_stdio_printf("ERROR: bluetooth addres at offset 0x%08x "
     57a:	6819      	ldr	r1, [r3, #0]
     57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     57e:	6818      	ldr	r0, [r3, #0]
     580:	4b0c      	ldr	r3, [pc, #48]	; (5b4 <info_block_write_ble_address+0x120>)
     582:	685b      	ldr	r3, [r3, #4]
     584:	4a0b      	ldr	r2, [pc, #44]	; (5b4 <info_block_write_ble_address+0x120>)
     586:	6812      	ldr	r2, [r2, #0]
     588:	9201      	str	r2, [sp, #4]
     58a:	9300      	str	r3, [sp, #0]
     58c:	4603      	mov	r3, r0
     58e:	460a      	mov	r2, r1
     590:	f240 71de 	movw	r1, #2014	; 0x7de
     594:	480a      	ldr	r0, [pc, #40]	; (5c0 <info_block_write_ble_address+0x12c>)
     596:	f001 f925 	bl	17e4 <am_util_stdio_printf>
                             " not written correctly "
                             "0x%08x%08x != 0x%08x%08x \n",
                             ((AM_HAL_FLASH_INFO_SIZE - 128 - 8) / 4),  // offset
                             pui32Dst[1], pui32Dst[0],
                             g_ui32Source[1], g_ui32Source[0] );
        i32ErrorFlag++;
     59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     59c:	3301      	adds	r3, #1
     59e:	657b      	str	r3, [r7, #84]	; 0x54
    }


    return i32ErrorFlag;
     5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
     5a2:	4618      	mov	r0, r3
     5a4:	375c      	adds	r7, #92	; 0x5c
     5a6:	46bd      	mov	sp, r7
     5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5aa:	bf00      	nop
     5ac:	50021f78 	.word	0x50021f78
     5b0:	0004bdde 	.word	0x0004bdde
     5b4:	1000115c 	.word	0x1000115c
     5b8:	12344321 	.word	0x12344321
     5bc:	000025ec 	.word	0x000025ec
     5c0:	0000265c 	.word	0x0000265c

000005c4 <info_block_disable_erase>:
// INFO block testing erase disable functions.
//
//*****************************************************************************
int
info_block_disable_erase(void)
{
     5c4:	b590      	push	{r4, r7, lr}
     5c6:	b085      	sub	sp, #20
     5c8:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     5ca:	2300      	movs	r3, #0
     5cc:	60fb      	str	r3, [r7, #12]
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );
     5ce:	4b1c      	ldr	r3, [pc, #112]	; (640 <info_block_disable_erase+0x7c>)
     5d0:	60bb      	str	r3, [r7, #8]

    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
                 am_hal_flash_info_erase_disable_check(),
     5d2:	f001 fb0d 	bl	1bf0 <am_hal_flash_info_erase_disable_check>
     5d6:	4603      	mov	r3, r0
{
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );

    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     5d8:	461c      	mov	r4, r3
                 am_hal_flash_info_erase_disable_check(),
                 (am_hal_flash_info_erase_disable_check())  ?
     5da:	f001 fb09 	bl	1bf0 <am_hal_flash_info_erase_disable_check>
     5de:	4603      	mov	r3, r0
{
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );

    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     5e0:	2b00      	cmp	r3, #0
     5e2:	d001      	beq.n	5e8 <info_block_disable_erase+0x24>
     5e4:	4b17      	ldr	r3, [pc, #92]	; (644 <info_block_disable_erase+0x80>)
     5e6:	e000      	b.n	5ea <info_block_disable_erase+0x26>
     5e8:	4b17      	ldr	r3, [pc, #92]	; (648 <info_block_disable_erase+0x84>)
     5ea:	461a      	mov	r2, r3
     5ec:	4621      	mov	r1, r4
     5ee:	4817      	ldr	r0, [pc, #92]	; (64c <info_block_disable_erase+0x88>)
     5f0:	f001 f8f8 	bl	17e4 <am_util_stdio_printf>
                 "AS EXPECTED" );

    //
    // Now disable INFO space erases
    //
    i32ReturnCode = am_hal_flash_info_erase_disable();
     5f4:	f001 fa96 	bl	1b24 <am_hal_flash_info_erase_disable>
     5f8:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d006      	beq.n	60e <info_block_disable_erase+0x4a>
    {
        am_util_stdio_printf("ERROR:am_hal_flash_info_erase_disable  "
     600:	6879      	ldr	r1, [r7, #4]
     602:	4813      	ldr	r0, [pc, #76]	; (650 <info_block_disable_erase+0x8c>)
     604:	f001 f8ee 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n", i32ReturnCode);
        i32ErrorFlag++;
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	3301      	adds	r3, #1
     60c:	60fb      	str	r3, [r7, #12]

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
                 am_hal_flash_info_erase_disable_check(),
     60e:	f001 faef 	bl	1bf0 <am_hal_flash_info_erase_disable_check>
     612:	4603      	mov	r3, r0
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     614:	461c      	mov	r4, r3
                 am_hal_flash_info_erase_disable_check(),
                 (!am_hal_flash_info_erase_disable_check()) ?
     616:	f001 faeb 	bl	1bf0 <am_hal_flash_info_erase_disable_check>
     61a:	4603      	mov	r3, r0
     61c:	f083 0301 	eor.w	r3, r3, #1
     620:	b2db      	uxtb	r3, r3
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     622:	2b00      	cmp	r3, #0
     624:	d001      	beq.n	62a <info_block_disable_erase+0x66>
     626:	4b07      	ldr	r3, [pc, #28]	; (644 <info_block_disable_erase+0x80>)
     628:	e000      	b.n	62c <info_block_disable_erase+0x68>
     62a:	4b07      	ldr	r3, [pc, #28]	; (648 <info_block_disable_erase+0x84>)
     62c:	461a      	mov	r2, r3
     62e:	4621      	mov	r1, r4
     630:	4806      	ldr	r0, [pc, #24]	; (64c <info_block_disable_erase+0x88>)
     632:	f001 f8d7 	bl	17e4 <am_util_stdio_printf>
                 am_hal_flash_info_erase_disable_check(),
                 (!am_hal_flash_info_erase_disable_check()) ?
                 "ERROR"                                    :
                 "AS EXPECTED" );

    return i32ErrorFlag;
     636:	68fb      	ldr	r3, [r7, #12]
}
     638:	4618      	mov	r0, r3
     63a:	3714      	adds	r7, #20
     63c:	46bd      	mov	sp, r7
     63e:	bd90      	pop	{r4, r7, pc}
     640:	50020000 	.word	0x50020000
     644:	000026b8 	.word	0x000026b8
     648:	000026c0 	.word	0x000026c0
     64c:	000026cc 	.word	0x000026cc
     650:	000026f4 	.word	0x000026f4

00000654 <info_block_disable_program>:
// INFO block testing program disable functions.
//
//*****************************************************************************
int
info_block_disable_program(uint32_t ui32Mask, uint32_t ui32ExpectMask)
{
     654:	b590      	push	{r4, r7, lr}
     656:	b087      	sub	sp, #28
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
     65c:	6039      	str	r1, [r7, #0]
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     65e:	2300      	movs	r3, #0
     660:	617b      	str	r3, [r7, #20]
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );
     662:	4b1b      	ldr	r3, [pc, #108]	; (6d0 <info_block_disable_program+0x7c>)
     664:	613b      	str	r3, [r7, #16]

    am_util_stdio_printf("Check INFO program disable state 0x%x %s\n",
     666:	f001 fb5f 	bl	1d28 <am_hal_flash_info_program_disable_get>
     66a:	4604      	mov	r4, r0
                 am_hal_flash_info_program_disable_get(),
                 (am_hal_flash_info_program_disable_get() == ui32ExpectMask) ?
     66c:	f001 fb5c 	bl	1d28 <am_hal_flash_info_program_disable_get>
     670:	4602      	mov	r2, r0
{
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );

    am_util_stdio_printf("Check INFO program disable state 0x%x %s\n",
     672:	683b      	ldr	r3, [r7, #0]
     674:	429a      	cmp	r2, r3
     676:	d101      	bne.n	67c <info_block_disable_program+0x28>
     678:	4b16      	ldr	r3, [pc, #88]	; (6d4 <info_block_disable_program+0x80>)
     67a:	e000      	b.n	67e <info_block_disable_program+0x2a>
     67c:	4b16      	ldr	r3, [pc, #88]	; (6d8 <info_block_disable_program+0x84>)
     67e:	461a      	mov	r2, r3
     680:	4621      	mov	r1, r4
     682:	4816      	ldr	r0, [pc, #88]	; (6dc <info_block_disable_program+0x88>)
     684:	f001 f8ae 	bl	17e4 <am_util_stdio_printf>
                 "AS EXPECTED" );

    //
    // Now disable INFO space erases
    //
    i32ReturnCode = am_hal_flash_info_program_disable(ui32Mask);
     688:	6878      	ldr	r0, [r7, #4]
     68a:	f001 fae3 	bl	1c54 <am_hal_flash_info_program_disable>
     68e:	60f8      	str	r0, [r7, #12]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     690:	68fb      	ldr	r3, [r7, #12]
     692:	2b00      	cmp	r3, #0
     694:	d006      	beq.n	6a4 <info_block_disable_program+0x50>
    {
        am_util_stdio_printf("ERROR:am_hal_flash_info_program_disable  "
     696:	68f9      	ldr	r1, [r7, #12]
     698:	4811      	ldr	r0, [pc, #68]	; (6e0 <info_block_disable_program+0x8c>)
     69a:	f001 f8a3 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n", i32ReturnCode);
        i32ErrorFlag++;
     69e:	697b      	ldr	r3, [r7, #20]
     6a0:	3301      	adds	r3, #1
     6a2:	617b      	str	r3, [r7, #20]
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO program disable state 0x%x %s\n",
     6a4:	f001 fb40 	bl	1d28 <am_hal_flash_info_program_disable_get>
     6a8:	4604      	mov	r4, r0
                 am_hal_flash_info_program_disable_get(),
                 (am_hal_flash_info_program_disable_get() != ui32ExpectMask)    ?
     6aa:	f001 fb3d 	bl	1d28 <am_hal_flash_info_program_disable_get>
     6ae:	4602      	mov	r2, r0
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO program disable state 0x%x %s\n",
     6b0:	683b      	ldr	r3, [r7, #0]
     6b2:	429a      	cmp	r2, r3
     6b4:	d001      	beq.n	6ba <info_block_disable_program+0x66>
     6b6:	4b07      	ldr	r3, [pc, #28]	; (6d4 <info_block_disable_program+0x80>)
     6b8:	e000      	b.n	6bc <info_block_disable_program+0x68>
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <info_block_disable_program+0x84>)
     6bc:	461a      	mov	r2, r3
     6be:	4621      	mov	r1, r4
     6c0:	4806      	ldr	r0, [pc, #24]	; (6dc <info_block_disable_program+0x88>)
     6c2:	f001 f88f 	bl	17e4 <am_util_stdio_printf>
                 am_hal_flash_info_program_disable_get(),
                 (am_hal_flash_info_program_disable_get() != ui32ExpectMask)    ?
                 "ERROR"                                                        :
                 "AS EXPECTED" );

    return i32ErrorFlag;
     6c6:	697b      	ldr	r3, [r7, #20]
}
     6c8:	4618      	mov	r0, r3
     6ca:	371c      	adds	r7, #28
     6cc:	46bd      	mov	sp, r7
     6ce:	bd90      	pop	{r4, r7, pc}
     6d0:	50020000 	.word	0x50020000
     6d4:	000026b8 	.word	0x000026b8
     6d8:	000026c0 	.word	0x000026c0
     6dc:	00002734 	.word	0x00002734
     6e0:	00002760 	.word	0x00002760

000006e4 <info_block_enable_flash_wipe>:
// INFO block testing flash wipe enable functions.
//
//*****************************************************************************
int
info_block_enable_flash_wipe(void)
{
     6e4:	b590      	push	{r4, r7, lr}
     6e6:	b085      	sub	sp, #20
     6e8:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     6ea:	2300      	movs	r3, #0
     6ec:	60fb      	str	r3, [r7, #12]
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );
     6ee:	4b1c      	ldr	r3, [pc, #112]	; (760 <info_block_enable_flash_wipe+0x7c>)
     6f0:	60bb      	str	r3, [r7, #8]

    am_util_stdio_printf("Check INFO enable flash wipe state %d %s\n",
                 am_hal_flash_wipe_flash_enable_check(),
     6f2:	f001 fbb1 	bl	1e58 <am_hal_flash_wipe_flash_enable_check>
     6f6:	4603      	mov	r3, r0
{
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );

    am_util_stdio_printf("Check INFO enable flash wipe state %d %s\n",
     6f8:	461c      	mov	r4, r3
                 am_hal_flash_wipe_flash_enable_check(),
                 (am_hal_flash_wipe_flash_enable_check())   ?
     6fa:	f001 fbad 	bl	1e58 <am_hal_flash_wipe_flash_enable_check>
     6fe:	4603      	mov	r3, r0
{
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    uint32_t *pui32Dst = (uint32_t *) ( AM_HAL_FLASH_INFO_ADDR );

    am_util_stdio_printf("Check INFO enable flash wipe state %d %s\n",
     700:	2b00      	cmp	r3, #0
     702:	d001      	beq.n	708 <info_block_enable_flash_wipe+0x24>
     704:	4b17      	ldr	r3, [pc, #92]	; (764 <info_block_enable_flash_wipe+0x80>)
     706:	e000      	b.n	70a <info_block_enable_flash_wipe+0x26>
     708:	4b17      	ldr	r3, [pc, #92]	; (768 <info_block_enable_flash_wipe+0x84>)
     70a:	461a      	mov	r2, r3
     70c:	4621      	mov	r1, r4
     70e:	4817      	ldr	r0, [pc, #92]	; (76c <info_block_enable_flash_wipe+0x88>)
     710:	f001 f868 	bl	17e4 <am_util_stdio_printf>
                 "AS EXPECTED" );

    //
    // Now enable flash wipe function in INFO space.
    //
    i32ReturnCode = am_hal_flash_wipe_flash_enable();
     714:	f001 fb3a 	bl	1d8c <am_hal_flash_wipe_flash_enable>
     718:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	2b00      	cmp	r3, #0
     71e:	d006      	beq.n	72e <info_block_enable_flash_wipe+0x4a>
    {
        am_util_stdio_printf("ERROR:am_hal_flash_info_erase_disable  "
     720:	6879      	ldr	r1, [r7, #4]
     722:	4813      	ldr	r0, [pc, #76]	; (770 <info_block_enable_flash_wipe+0x8c>)
     724:	f001 f85e 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n", i32ReturnCode);
        i32ErrorFlag++;
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	3301      	adds	r3, #1
     72c:	60fb      	str	r3, [r7, #12]

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
                 am_hal_flash_wipe_flash_enable_check(),
     72e:	f001 fb93 	bl	1e58 <am_hal_flash_wipe_flash_enable_check>
     732:	4603      	mov	r3, r0
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     734:	461c      	mov	r4, r3
                 am_hal_flash_wipe_flash_enable_check(),
                 (!am_hal_flash_wipe_flash_enable_check())  ?
     736:	f001 fb8f 	bl	1e58 <am_hal_flash_wipe_flash_enable_check>
     73a:	4603      	mov	r3, r0
     73c:	f083 0301 	eor.w	r3, r3, #1
     740:	b2db      	uxtb	r3, r3
    }

    //
    // Check the results.
    //
    am_util_stdio_printf("Check INFO erase disable state %d %s\n",
     742:	2b00      	cmp	r3, #0
     744:	d001      	beq.n	74a <info_block_enable_flash_wipe+0x66>
     746:	4b07      	ldr	r3, [pc, #28]	; (764 <info_block_enable_flash_wipe+0x80>)
     748:	e000      	b.n	74c <info_block_enable_flash_wipe+0x68>
     74a:	4b07      	ldr	r3, [pc, #28]	; (768 <info_block_enable_flash_wipe+0x84>)
     74c:	461a      	mov	r2, r3
     74e:	4621      	mov	r1, r4
     750:	4808      	ldr	r0, [pc, #32]	; (774 <info_block_enable_flash_wipe+0x90>)
     752:	f001 f847 	bl	17e4 <am_util_stdio_printf>
                 am_hal_flash_wipe_flash_enable_check(),
                 (!am_hal_flash_wipe_flash_enable_check())  ?
                 "ERROR"                                    :
                 "AS EXPECTED" );

    return i32ErrorFlag;
     756:	68fb      	ldr	r3, [r7, #12]
}
     758:	4618      	mov	r0, r3
     75a:	3714      	adds	r7, #20
     75c:	46bd      	mov	sp, r7
     75e:	bd90      	pop	{r4, r7, pc}
     760:	50020000 	.word	0x50020000
     764:	000026b8 	.word	0x000026b8
     768:	000026c0 	.word	0x000026c0
     76c:	000027a0 	.word	0x000027a0
     770:	000026f4 	.word	0x000026f4
     774:	000026cc 	.word	0x000026cc

00000778 <main_block_erase>:
// Main block erase function.
//
//*****************************************************************************
int
main_block_erase(void)
{
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;

    //
    // Erase the whole block of FLASH instance 1 (512KB to 1MB).
    //
    am_util_stdio_printf("  ... erasing all of flash instance %d.\n", AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr) );
     77e:	4b0d      	ldr	r3, [pc, #52]	; (7b4 <main_block_erase+0x3c>)
     780:	681b      	ldr	r3, [r3, #0]
     782:	0cdb      	lsrs	r3, r3, #19
     784:	f003 0301 	and.w	r3, r3, #1
     788:	4619      	mov	r1, r3
     78a:	480b      	ldr	r0, [pc, #44]	; (7b8 <main_block_erase+0x40>)
     78c:	f001 f82a 	bl	17e4 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_mass_erase(AM_HAL_FLASH_PROGRAM_KEY, 1);
     790:	2101      	movs	r1, #1
     792:	480a      	ldr	r0, [pc, #40]	; (7bc <main_block_erase+0x44>)
     794:	f001 f994 	bl	1ac0 <am_hal_flash_mass_erase>
     798:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	2b00      	cmp	r3, #0
     79e:	d003      	beq.n	7a8 <main_block_erase+0x30>
    {
        am_util_stdio_printf("ERROR: FLASH_MAIN_ERASE i32ReturnCode =  0x%x.\n",
     7a0:	6879      	ldr	r1, [r7, #4]
     7a2:	4807      	ldr	r0, [pc, #28]	; (7c0 <main_block_erase+0x48>)
     7a4:	f001 f81e 	bl	17e4 <am_util_stdio_printf>
                             i32ReturnCode);
    }

    return i32ReturnCode;
     7a8:	687b      	ldr	r3, [r7, #4]

}
     7aa:	4618      	mov	r0, r3
     7ac:	3708      	adds	r7, #8
     7ae:	46bd      	mov	sp, r7
     7b0:	bd80      	pop	{r7, pc}
     7b2:	bf00      	nop
     7b4:	10001000 	.word	0x10001000
     7b8:	000027cc 	.word	0x000027cc
     7bc:	12344321 	.word	0x12344321
     7c0:	000027f8 	.word	0x000027f8

000007c4 <main_block_pattern_write>:
// Main block pattern write function.
//
//*****************************************************************************
int
main_block_pattern_write(void)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	b086      	sub	sp, #24
     7c8:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     7ca:	2300      	movs	r3, #0
     7cc:	617b      	str	r3, [r7, #20]

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
     7ce:	4b37      	ldr	r3, [pc, #220]	; (8ac <main_block_pattern_write+0xe8>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	0cdb      	lsrs	r3, r3, #19
    int32_t ix;

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     7d4:	f003 0101 	and.w	r1, r3, #1
                          AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(g_ui32PrgmAddr) );
     7d8:	4b34      	ldr	r3, [pc, #208]	; (8ac <main_block_pattern_write+0xe8>)
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	0b5b      	lsrs	r3, r3, #13
    int32_t ix;

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     7e2:	461a      	mov	r2, r3
     7e4:	4832      	ldr	r0, [pc, #200]	; (8b0 <main_block_pattern_write+0xec>)
     7e6:	f000 fffd 	bl	17e4 <am_util_stdio_printf>
                          AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(g_ui32PrgmAddr) );

    pui32Src = g_ui32Source;
     7ea:	4b32      	ldr	r3, [pc, #200]	; (8b4 <main_block_pattern_write+0xf0>)
     7ec:	613b      	str	r3, [r7, #16]
    for (ix = 0x100; ix < (0x100 +  AM_HAL_FLASH_INFO_SIZE); ix += 4)
     7ee:	f44f 7380 	mov.w	r3, #256	; 0x100
     7f2:	60fb      	str	r3, [r7, #12]
     7f4:	e007      	b.n	806 <main_block_pattern_write+0x42>
    {
        *pui32Src++ = ix;
     7f6:	693b      	ldr	r3, [r7, #16]
     7f8:	1d1a      	adds	r2, r3, #4
     7fa:	613a      	str	r2, [r7, #16]
     7fc:	68fa      	ldr	r2, [r7, #12]
     7fe:	601a      	str	r2, [r3, #0]
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(g_ui32PrgmAddr) );

    pui32Src = g_ui32Source;
    for (ix = 0x100; ix < (0x100 +  AM_HAL_FLASH_INFO_SIZE); ix += 4)
     800:	68fb      	ldr	r3, [r7, #12]
     802:	3304      	adds	r3, #4
     804:	60fb      	str	r3, [r7, #12]
     806:	68fb      	ldr	r3, [r7, #12]
     808:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
     80c:	dbf3      	blt.n	7f6 <main_block_pattern_write+0x32>

    //
    // Program a "few" words in a page in the main block of instance 1.
    // We'll arbitrarily pick 0x00082000 = 520*1024 = (512+8)*1024.
    //
    pui32Dst = (uint32_t *) g_ui32PrgmAddr;
     80e:	4b27      	ldr	r3, [pc, #156]	; (8ac <main_block_pattern_write+0xe8>)
     810:	681b      	ldr	r3, [r3, #0]
     812:	60bb      	str	r3, [r7, #8]
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     814:	f44f 6300 	mov.w	r3, #2048	; 0x800
     818:	68ba      	ldr	r2, [r7, #8]
     81a:	4926      	ldr	r1, [pc, #152]	; (8b4 <main_block_pattern_write+0xf0>)
     81c:	4826      	ldr	r0, [pc, #152]	; (8b8 <main_block_pattern_write+0xf4>)
     81e:	f001 f95b 	bl	1ad8 <am_hal_flash_program_main>
     822:	6078      	str	r0, [r7, #4]
                                              (AM_HAL_FLASH_INFO_SIZE >> 2));

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     824:	687b      	ldr	r3, [r7, #4]
     826:	2b00      	cmp	r3, #0
     828:	d009      	beq.n	83e <main_block_pattern_write+0x7a>
    {
        am_util_stdio_printf("FLASH program page at 0x%08x "
     82a:	4b20      	ldr	r3, [pc, #128]	; (8ac <main_block_pattern_write+0xe8>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	687a      	ldr	r2, [r7, #4]
     830:	4619      	mov	r1, r3
     832:	4822      	ldr	r0, [pc, #136]	; (8bc <main_block_pattern_write+0xf8>)
     834:	f000 ffd6 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             g_ui32PrgmAddr,
                             i32ReturnCode);
        i32ErrorFlag++;
     838:	697b      	ldr	r3, [r7, #20]
     83a:	3301      	adds	r3, #1
     83c:	617b      	str	r3, [r7, #20]
    }

    //
    // Check the page we just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
     83e:	4820      	ldr	r0, [pc, #128]	; (8c0 <main_block_pattern_write+0xfc>)
     840:	f000 ffd0 	bl	17e4 <am_util_stdio_printf>
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     844:	2300      	movs	r3, #0
     846:	60fb      	str	r3, [r7, #12]
     848:	e026      	b.n	898 <main_block_pattern_write+0xd4>
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix*4)) != g_ui32Source[ix] )
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	009b      	lsls	r3, r3, #2
     84e:	461a      	mov	r2, r3
     850:	4b16      	ldr	r3, [pc, #88]	; (8ac <main_block_pattern_write+0xe8>)
     852:	681b      	ldr	r3, [r3, #0]
     854:	4413      	add	r3, r2
     856:	681a      	ldr	r2, [r3, #0]
     858:	4916      	ldr	r1, [pc, #88]	; (8b4 <main_block_pattern_write+0xf0>)
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     860:	429a      	cmp	r2, r3
     862:	d016      	beq.n	892 <main_block_pattern_write+0xce>
        {
            i32ErrorFlag++;
     864:	697b      	ldr	r3, [r7, #20]
     866:	3301      	adds	r3, #1
     868:	617b      	str	r3, [r7, #20]
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 g_ui32PrgmAddr + (ix * 4),
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	009b      	lsls	r3, r3, #2
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix*4)) != g_ui32Source[ix] )
        {
            i32ErrorFlag++;
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     86e:	461a      	mov	r2, r3
     870:	4b0e      	ldr	r3, [pc, #56]	; (8ac <main_block_pattern_write+0xe8>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	18d1      	adds	r1, r2, r3
     876:	4a0f      	ldr	r2, [pc, #60]	; (8b4 <main_block_pattern_write+0xf0>)
     878:	68fb      	ldr	r3, [r7, #12]
     87a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 g_ui32PrgmAddr + (ix * 4),
                                 g_ui32Source[ix],
                                 *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) );
     87e:	68fb      	ldr	r3, [r7, #12]
     880:	009b      	lsls	r3, r3, #2
     882:	4618      	mov	r0, r3
     884:	4b09      	ldr	r3, [pc, #36]	; (8ac <main_block_pattern_write+0xe8>)
     886:	681b      	ldr	r3, [r3, #0]
     888:	4403      	add	r3, r0
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix*4)) != g_ui32Source[ix] )
        {
            i32ErrorFlag++;
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     88a:	681b      	ldr	r3, [r3, #0]
     88c:	480d      	ldr	r0, [pc, #52]	; (8c4 <main_block_pattern_write+0x100>)
     88e:	f000 ffa9 	bl	17e4 <am_util_stdio_printf>

    //
    // Check the page we just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    for ( ix = 0; ix <  (AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     892:	68fb      	ldr	r3, [r7, #12]
     894:	3301      	adds	r3, #1
     896:	60fb      	str	r3, [r7, #12]
     898:	68fb      	ldr	r3, [r7, #12]
     89a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     89e:	dbd4      	blt.n	84a <main_block_pattern_write+0x86>
                                 g_ui32Source[ix],
                                 *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) );
        }
    }

    return i32ErrorFlag;
     8a0:	697b      	ldr	r3, [r7, #20]

}
     8a2:	4618      	mov	r0, r3
     8a4:	3718      	adds	r7, #24
     8a6:	46bd      	mov	sp, r7
     8a8:	bd80      	pop	{r7, pc}
     8aa:	bf00      	nop
     8ac:	10001000 	.word	0x10001000
     8b0:	00002828 	.word	0x00002828
     8b4:	1000115c 	.word	0x1000115c
     8b8:	12344321 	.word	0x12344321
     8bc:	00002858 	.word	0x00002858
     8c0:	0000288c 	.word	0x0000288c
     8c4:	000028b8 	.word	0x000028b8

000008c8 <main_block_page_erase>:
// Main block page erasee function.
//
//*****************************************************************************
int
main_block_page_erase(void)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     8ce:	2300      	movs	r3, #0
     8d0:	60fb      	str	r3, [r7, #12]
    int32_t ix;

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed @ 0x%08x.\n",
     8d2:	4b27      	ldr	r3, [pc, #156]	; (970 <main_block_page_erase+0xa8>)
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	4619      	mov	r1, r3
     8d8:	4826      	ldr	r0, [pc, #152]	; (974 <main_block_page_erase+0xac>)
     8da:	f000 ff83 	bl	17e4 <am_util_stdio_printf>
                             g_ui32PrgmAddr);
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
                                            AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
     8de:	4b24      	ldr	r3, [pc, #144]	; (970 <main_block_page_erase+0xa8>)
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	0cdb      	lsrs	r3, r3, #19
    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed @ 0x%08x.\n",
                             g_ui32PrgmAddr);
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     8e4:	f003 0101 	and.w	r1, r3, #1
                                            AM_HAL_FLASH_ADDR2INST(g_ui32PrgmAddr),
                                            AM_HAL_FLASH_ADDR2PAGE(g_ui32PrgmAddr) );
     8e8:	4b21      	ldr	r3, [pc, #132]	; (970 <main_block_page_erase+0xa8>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	0b5b      	lsrs	r3, r3, #13
    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed @ 0x%08x.\n",
                             g_ui32PrgmAddr);
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     8ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     8f2:	461a      	mov	r2, r3
     8f4:	4820      	ldr	r0, [pc, #128]	; (978 <main_block_page_erase+0xb0>)
     8f6:	f001 f8e9 	bl	1acc <am_hal_flash_page_erase>
     8fa:	6078      	str	r0, [r7, #4]
                                            AM_HAL_FLASH_ADDR2PAGE(g_ui32PrgmAddr) );

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2b00      	cmp	r3, #0
     900:	d009      	beq.n	916 <main_block_page_erase+0x4e>
    {
        am_util_stdio_printf(" FLASH erase page at 0x%08x "
     902:	4b1b      	ldr	r3, [pc, #108]	; (970 <main_block_page_erase+0xa8>)
     904:	681b      	ldr	r3, [r3, #0]
     906:	687a      	ldr	r2, [r7, #4]
     908:	4619      	mov	r1, r3
     90a:	481c      	ldr	r0, [pc, #112]	; (97c <main_block_page_erase+0xb4>)
     90c:	f000 ff6a 	bl	17e4 <am_util_stdio_printf>
                             "i32ReturnCode =  0x%x.\n",
                             g_ui32PrgmAddr,
                             i32ReturnCode);
        i32ErrorFlag++;
     910:	68fb      	ldr	r3, [r7, #12]
     912:	3301      	adds	r3, #1
     914:	60fb      	str	r3, [r7, #12]
    }

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
     916:	481a      	ldr	r0, [pc, #104]	; (980 <main_block_page_erase+0xb8>)
     918:	f000 ff64 	bl	17e4 <am_util_stdio_printf>
    for ( ix = 0; ix < ( AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     91c:	2300      	movs	r3, #0
     91e:	60bb      	str	r3, [r7, #8]
     920:	e01d      	b.n	95e <main_block_page_erase+0x96>
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) != 0xFFFFFFFF )
     922:	68bb      	ldr	r3, [r7, #8]
     924:	009b      	lsls	r3, r3, #2
     926:	461a      	mov	r2, r3
     928:	4b11      	ldr	r3, [pc, #68]	; (970 <main_block_page_erase+0xa8>)
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	4413      	add	r3, r2
     92e:	681b      	ldr	r3, [r3, #0]
     930:	f1b3 3fff 	cmp.w	r3, #4294967295
     934:	d010      	beq.n	958 <main_block_page_erase+0x90>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 g_ui32PrgmAddr + (ix*4),
     936:	68bb      	ldr	r3, [r7, #8]
     938:	009b      	lsls	r3, r3, #2
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < ( AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) != 0xFFFFFFFF )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     93a:	461a      	mov	r2, r3
     93c:	4b0c      	ldr	r3, [pc, #48]	; (970 <main_block_page_erase+0xa8>)
     93e:	681b      	ldr	r3, [r3, #0]
     940:	18d1      	adds	r1, r2, r3
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 g_ui32PrgmAddr + (ix*4),
                                 *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) );
     942:	68bb      	ldr	r3, [r7, #8]
     944:	009b      	lsls	r3, r3, #2
     946:	461a      	mov	r2, r3
     948:	4b09      	ldr	r3, [pc, #36]	; (970 <main_block_page_erase+0xa8>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	4413      	add	r3, r2
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < ( AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
    {
        if ( *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) != 0xFFFFFFFF )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     94e:	681b      	ldr	r3, [r3, #0]
     950:	461a      	mov	r2, r3
     952:	480c      	ldr	r0, [pc, #48]	; (984 <main_block_page_erase+0xbc>)
     954:	f000 ff46 	bl	17e4 <am_util_stdio_printf>

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < ( AM_HAL_FLASH_INFO_SIZE >> 2); ix++ )
     958:	68bb      	ldr	r3, [r7, #8]
     95a:	3301      	adds	r3, #1
     95c:	60bb      	str	r3, [r7, #8]
     95e:	68bb      	ldr	r3, [r7, #8]
     960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     964:	dbdd      	blt.n	922 <main_block_page_erase+0x5a>
                                 g_ui32PrgmAddr + (ix*4),
                                 *(uint32_t*)(g_ui32PrgmAddr + (ix * 4)) );
        }
    }

    return i32ErrorFlag;
     966:	68fb      	ldr	r3, [r7, #12]
}
     968:	4618      	mov	r0, r3
     96a:	3710      	adds	r7, #16
     96c:	46bd      	mov	sp, r7
     96e:	bd80      	pop	{r7, pc}
     970:	10001000 	.word	0x10001000
     974:	00002928 	.word	0x00002928
     978:	12344321 	.word	0x12344321
     97c:	0000295c 	.word	0x0000295c
     980:	00002990 	.word	0x00002990
     984:	000029b8 	.word	0x000029b8

00000988 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     988:	4811      	ldr	r0, [pc, #68]	; (9d0 <zero_loop+0x12>)
     98a:	4912      	ldr	r1, [pc, #72]	; (9d4 <zero_loop+0x16>)
     98c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     98e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     992:	4811      	ldr	r0, [pc, #68]	; (9d8 <zero_loop+0x1a>)
     994:	6801      	ldr	r1, [r0, #0]
     996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     99a:	6001      	str	r1, [r0, #0]
     99c:	f3bf 8f4f 	dsb	sy
     9a0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     9a4:	480d      	ldr	r0, [pc, #52]	; (9dc <zero_loop+0x1e>)
     9a6:	490e      	ldr	r1, [pc, #56]	; (9e0 <zero_loop+0x22>)
     9a8:	4a0e      	ldr	r2, [pc, #56]	; (9e4 <zero_loop+0x26>)

000009aa <copy_loop>:
     9aa:	f850 3b04 	ldr.w	r3, [r0], #4
     9ae:	f841 3b04 	str.w	r3, [r1], #4
     9b2:	4291      	cmp	r1, r2
     9b4:	dbf9      	blt.n	9aa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     9b6:	480c      	ldr	r0, [pc, #48]	; (9e8 <zero_loop+0x2a>)
     9b8:	490c      	ldr	r1, [pc, #48]	; (9ec <zero_loop+0x2e>)
     9ba:	f04f 0200 	mov.w	r2, #0

000009be <zero_loop>:
     9be:	4288      	cmp	r0, r1
     9c0:	bfb8      	it	lt
     9c2:	f840 2b04 	strlt.w	r2, [r0], #4
     9c6:	dbfa      	blt.n	9be <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     9c8:	f7ff fbca 	bl	160 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     9cc:	be00      	bkpt	0x0000
}
     9ce:	bf00      	nop
     9d0:	e000ed08 	.word	0xe000ed08
     9d4:	00000000 	.word	0x00000000
     9d8:	e000ed88 	.word	0xe000ed88
     9dc:	00002ad8 	.word	0x00002ad8
     9e0:	10001000 	.word	0x10001000
     9e4:	10001054 	.word	0x10001054
     9e8:	10001054 	.word	0x10001054
     9ec:	10005160 	.word	0x10005160

000009f0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     9f0:	b480      	push	{r7}
     9f2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     9f4:	e7fe      	b.n	9f4 <am_nmi_isr+0x4>
     9f6:	bf00      	nop

000009f8 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     9f8:	b480      	push	{r7}
     9fa:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     9fc:	e7fe      	b.n	9fc <am_adc_isr+0x4>
     9fe:	bf00      	nop

00000a00 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     a00:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     a02:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     a04:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     a06:	f000 f809 	bl	a1c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     a0a:	bd01      	pop	{r0, pc}
}
     a0c:	bf00      	nop
     a0e:	4618      	mov	r0, r3

00000a10 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     a10:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     a12:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     a14:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     a16:	4770      	bx	lr
}
     a18:	bf00      	nop
     a1a:	4618      	mov	r0, r3

00000a1c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     a1c:	b580      	push	{r7, lr}
     a1e:	b096      	sub	sp, #88	; 0x58
     a20:	af00      	add	r7, sp, #0
     a22:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     a24:	f107 030c 	add.w	r3, r7, #12
     a28:	2200      	movs	r2, #0
     a2a:	601a      	str	r2, [r3, #0]
     a2c:	605a      	str	r2, [r3, #4]
     a2e:	609a      	str	r2, [r3, #8]
     a30:	60da      	str	r2, [r3, #12]
     a32:	611a      	str	r2, [r3, #16]
     a34:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     a36:	2300      	movs	r3, #0
     a38:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     a3e:	4b2e      	ldr	r3, [pc, #184]	; (af8 <am_util_faultisr_collect_data+0xdc>)
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a46:	b2db      	uxtb	r3, r3
     a48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a4e:	0a1b      	lsrs	r3, r3, #8
     a50:	b2db      	uxtb	r3, r3
     a52:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a58:	0c1b      	lsrs	r3, r3, #16
     a5a:	b29b      	uxth	r3, r3
     a5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     a60:	4b26      	ldr	r3, [pc, #152]	; (afc <am_util_faultisr_collect_data+0xe0>)
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     a66:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     a6a:	b2db      	uxtb	r3, r3
     a6c:	f003 0302 	and.w	r3, r3, #2
     a70:	2b00      	cmp	r3, #0
     a72:	d005      	beq.n	a80 <am_util_faultisr_collect_data+0x64>
     a74:	6879      	ldr	r1, [r7, #4]
     a76:	2006      	movs	r0, #6
     a78:	f7ff ffca 	bl	a10 <getStackedReg>
     a7c:	4603      	mov	r3, r0
     a7e:	e001      	b.n	a84 <am_util_faultisr_collect_data+0x68>
     a80:	f04f 33ff 	mov.w	r3, #4294967295
     a84:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     a86:	6879      	ldr	r1, [r7, #4]
     a88:	2000      	movs	r0, #0
     a8a:	f7ff ffc1 	bl	a10 <getStackedReg>
     a8e:	4603      	mov	r3, r0
     a90:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     a92:	6879      	ldr	r1, [r7, #4]
     a94:	2001      	movs	r0, #1
     a96:	f7ff ffbb 	bl	a10 <getStackedReg>
     a9a:	4603      	mov	r3, r0
     a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     a9e:	6879      	ldr	r1, [r7, #4]
     aa0:	2002      	movs	r0, #2
     aa2:	f7ff ffb5 	bl	a10 <getStackedReg>
     aa6:	4603      	mov	r3, r0
     aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     aaa:	6879      	ldr	r1, [r7, #4]
     aac:	2003      	movs	r0, #3
     aae:	f7ff ffaf 	bl	a10 <getStackedReg>
     ab2:	4603      	mov	r3, r0
     ab4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     ab6:	6879      	ldr	r1, [r7, #4]
     ab8:	2004      	movs	r0, #4
     aba:	f7ff ffa9 	bl	a10 <getStackedReg>
     abe:	4603      	mov	r3, r0
     ac0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     ac2:	6879      	ldr	r1, [r7, #4]
     ac4:	2005      	movs	r0, #5
     ac6:	f7ff ffa3 	bl	a10 <getStackedReg>
     aca:	4603      	mov	r3, r0
     acc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     ace:	6879      	ldr	r1, [r7, #4]
     ad0:	2006      	movs	r0, #6
     ad2:	f7ff ff9d 	bl	a10 <getStackedReg>
     ad6:	4603      	mov	r3, r0
     ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     ada:	6879      	ldr	r1, [r7, #4]
     adc:	2007      	movs	r0, #7
     ade:	f7ff ff97 	bl	a10 <getStackedReg>
     ae2:	4603      	mov	r3, r0
     ae4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     ae6:	f107 030c 	add.w	r3, r7, #12
     aea:	4618      	mov	r0, r3
     aec:	f001 faae 	bl	204c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     af0:	2300      	movs	r3, #0
     af2:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     af4:	e7fe      	b.n	af4 <am_util_faultisr_collect_data+0xd8>
     af6:	bf00      	nop
     af8:	e000ed28 	.word	0xe000ed28
     afc:	e000ed38 	.word	0xe000ed38

00000b00 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     b00:	b480      	push	{r7}
     b02:	b083      	sub	sp, #12
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     b08:	4a04      	ldr	r2, [pc, #16]	; (b1c <am_util_stdio_printf_init+0x1c>)
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	6013      	str	r3, [r2, #0]
}
     b0e:	bf00      	nop
     b10:	370c      	adds	r7, #12
     b12:	46bd      	mov	sp, r7
     b14:	f85d 7b04 	ldr.w	r7, [sp], #4
     b18:	4770      	bx	lr
     b1a:	bf00      	nop
     b1c:	1000515c 	.word	0x1000515c

00000b20 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     b20:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     b24:	b096      	sub	sp, #88	; 0x58
     b26:	af00      	add	r7, sp, #0
     b28:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     b2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b30:	0025      	movs	r5, r4
     b32:	2600      	movs	r6, #0
     b34:	ea55 0306 	orrs.w	r3, r5, r6
     b38:	f000 809e 	beq.w	c78 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     b3c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b40:	0862      	lsrs	r2, r4, #1
     b42:	ea4f 0133 	mov.w	r1, r3, rrx
     b46:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b4a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     b4e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     b52:	ea4f 0994 	mov.w	r9, r4, lsr #2
     b56:	eb11 0308 	adds.w	r3, r1, r8
     b5a:	eb42 0409 	adc.w	r4, r2, r9
     b5e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     b62:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b66:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     b6a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     b6e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     b72:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b76:	eb13 030a 	adds.w	r3, r3, sl
     b7a:	eb44 040b 	adc.w	r4, r4, fp
     b7e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     b82:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b86:	0a1a      	lsrs	r2, r3, #8
     b88:	62ba      	str	r2, [r7, #40]	; 0x28
     b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b8c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     b90:	62ba      	str	r2, [r7, #40]	; 0x28
     b92:	0a23      	lsrs	r3, r4, #8
     b94:	62fb      	str	r3, [r7, #44]	; 0x2c
     b96:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     b9e:	18c9      	adds	r1, r1, r3
     ba0:	eb42 0204 	adc.w	r2, r2, r4
     ba4:	460b      	mov	r3, r1
     ba6:	4614      	mov	r4, r2
     ba8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     bac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bb0:	0c1a      	lsrs	r2, r3, #16
     bb2:	623a      	str	r2, [r7, #32]
     bb4:	6a3a      	ldr	r2, [r7, #32]
     bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     bba:	623a      	str	r2, [r7, #32]
     bbc:	0c23      	lsrs	r3, r4, #16
     bbe:	627b      	str	r3, [r7, #36]	; 0x24
     bc0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     bc8:	18c9      	adds	r1, r1, r3
     bca:	eb42 0204 	adc.w	r2, r2, r4
     bce:	460b      	mov	r3, r1
     bd0:	4614      	mov	r4, r2
     bd2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     bd6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bda:	0023      	movs	r3, r4
     bdc:	603b      	str	r3, [r7, #0]
     bde:	2300      	movs	r3, #0
     be0:	607b      	str	r3, [r7, #4]
     be2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     be6:	e897 0006 	ldmia.w	r7, {r1, r2}
     bea:	18c9      	adds	r1, r1, r3
     bec:	eb42 0204 	adc.w	r2, r2, r4
     bf0:	460b      	mov	r3, r1
     bf2:	4614      	mov	r4, r2
     bf4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     bf8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bfc:	08da      	lsrs	r2, r3, #3
     bfe:	613a      	str	r2, [r7, #16]
     c00:	693a      	ldr	r2, [r7, #16]
     c02:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     c06:	613a      	str	r2, [r7, #16]
     c08:	08e3      	lsrs	r3, r4, #3
     c0a:	617b      	str	r3, [r7, #20]
     c0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     c10:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     c14:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c18:	18db      	adds	r3, r3, r3
     c1a:	eb44 0404 	adc.w	r4, r4, r4
     c1e:	00a2      	lsls	r2, r4, #2
     c20:	60fa      	str	r2, [r7, #12]
     c22:	68fa      	ldr	r2, [r7, #12]
     c24:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     c28:	60fa      	str	r2, [r7, #12]
     c2a:	009a      	lsls	r2, r3, #2
     c2c:	60ba      	str	r2, [r7, #8]
     c2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     c32:	18c9      	adds	r1, r1, r3
     c34:	eb42 0204 	adc.w	r2, r2, r4
     c38:	460b      	mov	r3, r1
     c3a:	4614      	mov	r4, r2
     c3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     c40:	1acb      	subs	r3, r1, r3
     c42:	eb62 0404 	sbc.w	r4, r2, r4
     c46:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     c4a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     c4e:	3306      	adds	r3, #6
     c50:	f144 0400 	adc.w	r4, r4, #0
     c54:	091a      	lsrs	r2, r3, #4
     c56:	61ba      	str	r2, [r7, #24]
     c58:	69ba      	ldr	r2, [r7, #24]
     c5a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     c5e:	61ba      	str	r2, [r7, #24]
     c60:	0923      	lsrs	r3, r4, #4
     c62:	61fb      	str	r3, [r7, #28]
     c64:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     c6c:	18c9      	adds	r1, r1, r3
     c6e:	eb42 0204 	adc.w	r2, r2, r4
     c72:	460b      	mov	r3, r1
     c74:	4614      	mov	r4, r2
     c76:	e029      	b.n	ccc <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c7a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c7e:	085a      	lsrs	r2, r3, #1
     c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c82:	089b      	lsrs	r3, r3, #2
     c84:	4413      	add	r3, r2
     c86:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c8a:	091b      	lsrs	r3, r3, #4
     c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c8e:	4413      	add	r3, r2
     c90:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c94:	0a1b      	lsrs	r3, r3, #8
     c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c98:	4413      	add	r3, r2
     c9a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c9e:	0c1b      	lsrs	r3, r3, #16
     ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     ca2:	4413      	add	r3, r2
     ca4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ca8:	08db      	lsrs	r3, r3, #3
     caa:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     cae:	4613      	mov	r3, r2
     cb0:	009b      	lsls	r3, r3, #2
     cb2:	4413      	add	r3, r2
     cb4:	005b      	lsls	r3, r3, #1
     cb6:	461a      	mov	r2, r3
     cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cba:	1a9b      	subs	r3, r3, r2
     cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cc0:	3306      	adds	r3, #6
     cc2:	091a      	lsrs	r2, r3, #4
     cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cc6:	4413      	add	r3, r2
     cc8:	f04f 0400 	mov.w	r4, #0
    }
}
     ccc:	4618      	mov	r0, r3
     cce:	4621      	mov	r1, r4
     cd0:	3758      	adds	r7, #88	; 0x58
     cd2:	46bd      	mov	sp, r7
     cd4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     cd8:	4770      	bx	lr
     cda:	bf00      	nop

00000cdc <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     cdc:	b590      	push	{r4, r7, lr}
     cde:	b085      	sub	sp, #20
     ce0:	af00      	add	r7, sp, #0
     ce2:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     ce6:	683a      	ldr	r2, [r7, #0]
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	4313      	orrs	r3, r2
     cec:	2b00      	cmp	r3, #0
     cee:	bf0c      	ite	eq
     cf0:	2301      	moveq	r3, #1
     cf2:	2300      	movne	r3, #0
     cf4:	b2db      	uxtb	r3, r3
     cf6:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     cf8:	e008      	b.n	d0c <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
     cfe:	f7ff ff0f 	bl	b20 <divu64_10>
     d02:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	3301      	adds	r3, #1
     d0a:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     d0c:	e897 0018 	ldmia.w	r7, {r3, r4}
     d10:	4323      	orrs	r3, r4
     d12:	d1f2      	bne.n	cfa <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     d14:	68fb      	ldr	r3, [r7, #12]
}
     d16:	4618      	mov	r0, r3
     d18:	3714      	adds	r7, #20
     d1a:	46bd      	mov	sp, r7
     d1c:	bd90      	pop	{r4, r7, pc}
     d1e:	bf00      	nop

00000d20 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b083      	sub	sp, #12
     d24:	af00      	add	r7, sp, #0
     d26:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     d2a:	e897 0018 	ldmia.w	r7, {r3, r4}
     d2e:	2b00      	cmp	r3, #0
     d30:	f174 0300 	sbcs.w	r3, r4, #0
     d34:	da06      	bge.n	d44 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     d36:	e897 0018 	ldmia.w	r7, {r3, r4}
     d3a:	425b      	negs	r3, r3
     d3c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     d40:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     d44:	e897 0018 	ldmia.w	r7, {r3, r4}
     d48:	4618      	mov	r0, r3
     d4a:	4621      	mov	r1, r4
     d4c:	f7ff ffc6 	bl	cdc <ndigits_in_u64>
     d50:	4603      	mov	r3, r0
}
     d52:	4618      	mov	r0, r3
     d54:	370c      	adds	r7, #12
     d56:	46bd      	mov	sp, r7
     d58:	bd90      	pop	{r4, r7, pc}
     d5a:	bf00      	nop

00000d5c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     d5c:	b490      	push	{r4, r7}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
     d62:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     d66:	6839      	ldr	r1, [r7, #0]
     d68:	687a      	ldr	r2, [r7, #4]
     d6a:	430a      	orrs	r2, r1
     d6c:	2a00      	cmp	r2, #0
     d6e:	bf0c      	ite	eq
     d70:	2201      	moveq	r2, #1
     d72:	2200      	movne	r2, #0
     d74:	b2d2      	uxtb	r2, r2
     d76:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     d78:	e00a      	b.n	d90 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     d7a:	e897 0006 	ldmia.w	r7, {r1, r2}
     d7e:	090b      	lsrs	r3, r1, #4
     d80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     d84:	0914      	lsrs	r4, r2, #4
     d86:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     d8a:	68fa      	ldr	r2, [r7, #12]
     d8c:	3201      	adds	r2, #1
     d8e:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     d90:	e897 0006 	ldmia.w	r7, {r1, r2}
     d94:	430a      	orrs	r2, r1
     d96:	d1f0      	bne.n	d7a <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     d98:	68fb      	ldr	r3, [r7, #12]
}
     d9a:	4618      	mov	r0, r3
     d9c:	3710      	adds	r7, #16
     d9e:	46bd      	mov	sp, r7
     da0:	bc90      	pop	{r4, r7}
     da2:	4770      	bx	lr

00000da4 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     da4:	b480      	push	{r7}
     da6:	b087      	sub	sp, #28
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
     dac:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     dae:	2300      	movs	r3, #0
     db0:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     db2:	2300      	movs	r3, #0
     db4:	613b      	str	r3, [r7, #16]
     db6:	2300      	movs	r3, #0
     db8:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	2b2d      	cmp	r3, #45	; 0x2d
     dc0:	d11b      	bne.n	dfa <decstr_to_int+0x56>
    {
        bNeg = true;
     dc2:	2301      	movs	r3, #1
     dc4:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	3301      	adds	r3, #1
     dca:	607b      	str	r3, [r7, #4]
        uCnt++;
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	3301      	adds	r3, #1
     dd0:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     dd2:	e012      	b.n	dfa <decstr_to_int+0x56>
    {
        ++uCnt;
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	3301      	adds	r3, #1
     dd8:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     dda:	693a      	ldr	r2, [r7, #16]
     ddc:	4613      	mov	r3, r2
     dde:	009b      	lsls	r3, r3, #2
     de0:	4413      	add	r3, r2
     de2:	005b      	lsls	r3, r3, #1
     de4:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	461a      	mov	r2, r3
     dec:	693b      	ldr	r3, [r7, #16]
     dee:	4413      	add	r3, r2
     df0:	3b30      	subs	r3, #48	; 0x30
     df2:	613b      	str	r3, [r7, #16]
        pcStr++;
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	3301      	adds	r3, #1
     df8:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	2b2f      	cmp	r3, #47	; 0x2f
     e00:	d903      	bls.n	e0a <decstr_to_int+0x66>
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	2b39      	cmp	r3, #57	; 0x39
     e08:	d9e4      	bls.n	dd4 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     e0a:	683b      	ldr	r3, [r7, #0]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d002      	beq.n	e16 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     e10:	683b      	ldr	r3, [r7, #0]
     e12:	68fa      	ldr	r2, [r7, #12]
     e14:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     e16:	7dfb      	ldrb	r3, [r7, #23]
     e18:	2b00      	cmp	r3, #0
     e1a:	d002      	beq.n	e22 <decstr_to_int+0x7e>
     e1c:	693b      	ldr	r3, [r7, #16]
     e1e:	425b      	negs	r3, r3
     e20:	e000      	b.n	e24 <decstr_to_int+0x80>
     e22:	693b      	ldr	r3, [r7, #16]
}
     e24:	4618      	mov	r0, r3
     e26:	371c      	adds	r7, #28
     e28:	46bd      	mov	sp, r7
     e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e2e:	4770      	bx	lr

00000e30 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     e30:	b590      	push	{r4, r7, lr}
     e32:	b091      	sub	sp, #68	; 0x44
     e34:	af00      	add	r7, sp, #0
     e36:	e9c7 0102 	strd	r0, r1, [r7, #8]
     e3a:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     e3c:	2300      	movs	r3, #0
     e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
     e40:	2300      	movs	r3, #0
     e42:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     e48:	f7ff fe6a 	bl	b20 <divu64_10>
     e4c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     e50:	68b9      	ldr	r1, [r7, #8]
     e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e54:	4613      	mov	r3, r2
     e56:	009b      	lsls	r3, r3, #2
     e58:	4413      	add	r3, r2
     e5a:	005b      	lsls	r3, r3, #1
     e5c:	1acb      	subs	r3, r1, r3
     e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e62:	1c5a      	adds	r2, r3, #1
     e64:	63fa      	str	r2, [r7, #60]	; 0x3c
     e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e68:	b2d2      	uxtb	r2, r2
     e6a:	3230      	adds	r2, #48	; 0x30
     e6c:	b2d2      	uxtb	r2, r2
     e6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
     e72:	440b      	add	r3, r1
     e74:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     e78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e7c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     e80:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     e84:	4323      	orrs	r3, r4
     e86:	d1dd      	bne.n	e44 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e8a:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	2b00      	cmp	r3, #0
     e90:	d011      	beq.n	eb6 <uint64_to_str+0x86>
    {
        while ( ix-- )
     e92:	e008      	b.n	ea6 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     e94:	687b      	ldr	r3, [r7, #4]
     e96:	1c5a      	adds	r2, r3, #1
     e98:	607a      	str	r2, [r7, #4]
     e9a:	f107 0110 	add.w	r1, r7, #16
     e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ea0:	440a      	add	r2, r1
     ea2:	7812      	ldrb	r2, [r2, #0]
     ea4:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ea8:	1e5a      	subs	r2, r3, #1
     eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
     eac:	2b00      	cmp	r3, #0
     eae:	d1f1      	bne.n	e94 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     eb0:	687b      	ldr	r3, [r7, #4]
     eb2:	2200      	movs	r2, #0
     eb4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     eb8:	4618      	mov	r0, r3
     eba:	3744      	adds	r7, #68	; 0x44
     ebc:	46bd      	mov	sp, r7
     ebe:	bd90      	pop	{r4, r7, pc}

00000ec0 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     ec0:	b4b0      	push	{r4, r5, r7}
     ec2:	b08d      	sub	sp, #52	; 0x34
     ec4:	af00      	add	r7, sp, #0
     ec6:	e9c7 0102 	strd	r0, r1, [r7, #8]
     eca:	607a      	str	r2, [r7, #4]
     ecc:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     ece:	2300      	movs	r3, #0
     ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ed6:	4313      	orrs	r3, r2
     ed8:	d131      	bne.n	f3e <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     edc:	1c5a      	adds	r2, r3, #1
     ede:	62fa      	str	r2, [r7, #44]	; 0x2c
     ee0:	f107 0230 	add.w	r2, r7, #48	; 0x30
     ee4:	4413      	add	r3, r2
     ee6:	2230      	movs	r2, #48	; 0x30
     ee8:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     eec:	e027      	b.n	f3e <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     eee:	7a3b      	ldrb	r3, [r7, #8]
     ef0:	f003 030f 	and.w	r3, r3, #15
     ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     efc:	2b09      	cmp	r3, #9
     efe:	d90a      	bls.n	f16 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     f00:	78fb      	ldrb	r3, [r7, #3]
     f02:	2b00      	cmp	r3, #0
     f04:	d001      	beq.n	f0a <uint64_to_hexstr+0x4a>
     f06:	2227      	movs	r2, #39	; 0x27
     f08:	e000      	b.n	f0c <uint64_to_hexstr+0x4c>
     f0a:	2207      	movs	r2, #7
     f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     f10:	4413      	add	r3, r2
     f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f18:	1c5a      	adds	r2, r3, #1
     f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
     f1c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     f20:	3230      	adds	r2, #48	; 0x30
     f22:	b2d2      	uxtb	r2, r2
     f24:	f107 0130 	add.w	r1, r7, #48	; 0x30
     f28:	440b      	add	r3, r1
     f2a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f32:	0914      	lsrs	r4, r2, #4
     f34:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     f38:	091d      	lsrs	r5, r3, #4
     f3a:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f42:	4313      	orrs	r3, r2
     f44:	d1d3      	bne.n	eee <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f48:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d011      	beq.n	f74 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     f50:	e008      	b.n	f64 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	1c5a      	adds	r2, r3, #1
     f56:	607a      	str	r2, [r7, #4]
     f58:	f107 0110 	add.w	r1, r7, #16
     f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f5e:	440a      	add	r2, r1
     f60:	7812      	ldrb	r2, [r2, #0]
     f62:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f66:	1e5a      	subs	r2, r3, #1
     f68:	62fa      	str	r2, [r7, #44]	; 0x2c
     f6a:	2b00      	cmp	r3, #0
     f6c:	d1f1      	bne.n	f52 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	2200      	movs	r2, #0
     f72:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     f76:	4618      	mov	r0, r3
     f78:	3734      	adds	r7, #52	; 0x34
     f7a:	46bd      	mov	sp, r7
     f7c:	bcb0      	pop	{r4, r5, r7}
     f7e:	4770      	bx	lr

00000f80 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     f80:	b480      	push	{r7}
     f82:	b085      	sub	sp, #20
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     f88:	2300      	movs	r3, #0
     f8a:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	2b00      	cmp	r3, #0
     f90:	d104      	bne.n	f9c <simple_strlen+0x1c>
    {
        return ui32RetVal;
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	e009      	b.n	faa <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     f96:	68fb      	ldr	r3, [r7, #12]
     f98:	3301      	adds	r3, #1
     f9a:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     f9c:	687b      	ldr	r3, [r7, #4]
     f9e:	1c5a      	adds	r2, r3, #1
     fa0:	607a      	str	r2, [r7, #4]
     fa2:	781b      	ldrb	r3, [r3, #0]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1f6      	bne.n	f96 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     fa8:	68fb      	ldr	r3, [r7, #12]
}
     faa:	4618      	mov	r0, r3
     fac:	3714      	adds	r7, #20
     fae:	46bd      	mov	sp, r7
     fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb4:	4770      	bx	lr
     fb6:	bf00      	nop

00000fb8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     fb8:	b480      	push	{r7}
     fba:	b087      	sub	sp, #28
     fbc:	af00      	add	r7, sp, #0
     fbe:	60f8      	str	r0, [r7, #12]
     fc0:	460b      	mov	r3, r1
     fc2:	607a      	str	r2, [r7, #4]
     fc4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     fc6:	2300      	movs	r3, #0
     fc8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2b00      	cmp	r3, #0
     fce:	dc0c      	bgt.n	fea <padbuffer+0x32>
    {
        return i32Cnt;
     fd0:	697b      	ldr	r3, [r7, #20]
     fd2:	e010      	b.n	ff6 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     fd4:	68fb      	ldr	r3, [r7, #12]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d004      	beq.n	fe4 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	1c5a      	adds	r2, r3, #1
     fde:	60fa      	str	r2, [r7, #12]
     fe0:	7afa      	ldrb	r2, [r7, #11]
     fe2:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     fe4:	697b      	ldr	r3, [r7, #20]
     fe6:	3301      	adds	r3, #1
     fe8:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	1e5a      	subs	r2, r3, #1
     fee:	607a      	str	r2, [r7, #4]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d1ef      	bne.n	fd4 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     ff4:	697b      	ldr	r3, [r7, #20]
}
     ff6:	4618      	mov	r0, r3
     ff8:	371c      	adds	r7, #28
     ffa:	46bd      	mov	sp, r7
     ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1000:	4770      	bx	lr
    1002:	bf00      	nop

00001004 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    1004:	b590      	push	{r4, r7, lr}
    1006:	b08f      	sub	sp, #60	; 0x3c
    1008:	af00      	add	r7, sp, #0
    100a:	60f8      	str	r0, [r7, #12]
    100c:	60b9      	str	r1, [r7, #8]
    100e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
    1010:	68bb      	ldr	r3, [r7, #8]
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
    1016:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1018:	2b03      	cmp	r3, #3
    101a:	dc02      	bgt.n	1022 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    101c:	f06f 0302 	mvn.w	r3, #2
    1020:	e0d4      	b.n	11cc <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
    1022:	edd7 7a03 	vldr	s15, [r7, #12]
    1026:	eef5 7a40 	vcmp.f32	s15, #0.0
    102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    102e:	d104      	bne.n	103a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    1030:	68bb      	ldr	r3, [r7, #8]
    1032:	4a68      	ldr	r2, [pc, #416]	; (11d4 <ftoa+0x1d0>)
    1034:	601a      	str	r2, [r3, #0]
        return 3;
    1036:	2303      	movs	r3, #3
    1038:	e0c8      	b.n	11cc <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
    103a:	68bb      	ldr	r3, [r7, #8]
    103c:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    1042:	697b      	ldr	r3, [r7, #20]
    1044:	15db      	asrs	r3, r3, #23
    1046:	b2db      	uxtb	r3, r3
    1048:	3b7f      	subs	r3, #127	; 0x7f
    104a:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    104c:	697b      	ldr	r3, [r7, #20]
    104e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    1052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1056:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
    1058:	2300      	movs	r3, #0
    105a:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    105c:	2300      	movs	r3, #0
    105e:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    1060:	6a3b      	ldr	r3, [r7, #32]
    1062:	2b1e      	cmp	r3, #30
    1064:	dd02      	ble.n	106c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    1066:	f06f 0301 	mvn.w	r3, #1
    106a:	e0af      	b.n	11cc <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
    106c:	6a3b      	ldr	r3, [r7, #32]
    106e:	f113 0f17 	cmn.w	r3, #23
    1072:	da02      	bge.n	107a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    1074:	f04f 33ff 	mov.w	r3, #4294967295
    1078:	e0a8      	b.n	11cc <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
    107a:	6a3b      	ldr	r3, [r7, #32]
    107c:	2b16      	cmp	r3, #22
    107e:	dd06      	ble.n	108e <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    1080:	6a3b      	ldr	r3, [r7, #32]
    1082:	3b17      	subs	r3, #23
    1084:	69fa      	ldr	r2, [r7, #28]
    1086:	fa02 f303 	lsl.w	r3, r2, r3
    108a:	637b      	str	r3, [r7, #52]	; 0x34
    108c:	e01a      	b.n	10c4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    108e:	6a3b      	ldr	r3, [r7, #32]
    1090:	2b00      	cmp	r3, #0
    1092:	db0f      	blt.n	10b4 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    1094:	6a3b      	ldr	r3, [r7, #32]
    1096:	f1c3 0317 	rsb	r3, r3, #23
    109a:	69fa      	ldr	r2, [r7, #28]
    109c:	fa42 f303 	asr.w	r3, r2, r3
    10a0:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    10a2:	6a3b      	ldr	r3, [r7, #32]
    10a4:	3301      	adds	r3, #1
    10a6:	69fa      	ldr	r2, [r7, #28]
    10a8:	fa02 f303 	lsl.w	r3, r2, r3
    10ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    10b0:	633b      	str	r3, [r7, #48]	; 0x30
    10b2:	e007      	b.n	10c4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    10b4:	69fb      	ldr	r3, [r7, #28]
    10b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    10ba:	6a3b      	ldr	r3, [r7, #32]
    10bc:	43db      	mvns	r3, r3
    10be:	fa42 f303 	asr.w	r3, r2, r3
    10c2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    10c4:	697b      	ldr	r3, [r7, #20]
    10c6:	2b00      	cmp	r3, #0
    10c8:	da04      	bge.n	10d4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    10ca:	68bb      	ldr	r3, [r7, #8]
    10cc:	1c5a      	adds	r2, r3, #1
    10ce:	60ba      	str	r2, [r7, #8]
    10d0:	222d      	movs	r2, #45	; 0x2d
    10d2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    10d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d6:	2b00      	cmp	r3, #0
    10d8:	d105      	bne.n	10e6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    10da:	68bb      	ldr	r3, [r7, #8]
    10dc:	1c5a      	adds	r2, r3, #1
    10de:	60ba      	str	r2, [r7, #8]
    10e0:	2230      	movs	r2, #48	; 0x30
    10e2:	701a      	strb	r2, [r3, #0]
    10e4:	e021      	b.n	112a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    10e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10e8:	2b00      	cmp	r3, #0
    10ea:	dd08      	ble.n	10fe <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    10ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10ee:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10f2:	68ba      	ldr	r2, [r7, #8]
    10f4:	4618      	mov	r0, r3
    10f6:	4621      	mov	r1, r4
    10f8:	f7ff fe9a 	bl	e30 <uint64_to_str>
    10fc:	e011      	b.n	1122 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    10fe:	68bb      	ldr	r3, [r7, #8]
    1100:	1c5a      	adds	r2, r3, #1
    1102:	60ba      	str	r2, [r7, #8]
    1104:	222d      	movs	r2, #45	; 0x2d
    1106:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    1108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110a:	425b      	negs	r3, r3
    110c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1110:	68ba      	ldr	r2, [r7, #8]
    1112:	4618      	mov	r0, r3
    1114:	4621      	mov	r1, r4
    1116:	f7ff fe8b 	bl	e30 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    111a:	e002      	b.n	1122 <ftoa+0x11e>
        {
            pcBuf++;
    111c:	68bb      	ldr	r3, [r7, #8]
    111e:	3301      	adds	r3, #1
    1120:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    1122:	68bb      	ldr	r3, [r7, #8]
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d1f8      	bne.n	111c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    112a:	68bb      	ldr	r3, [r7, #8]
    112c:	1c5a      	adds	r2, r3, #1
    112e:	60ba      	str	r2, [r7, #8]
    1130:	222e      	movs	r2, #46	; 0x2e
    1132:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1136:	2b00      	cmp	r3, #0
    1138:	d105      	bne.n	1146 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    113a:	68bb      	ldr	r3, [r7, #8]
    113c:	1c5a      	adds	r2, r3, #1
    113e:	60ba      	str	r2, [r7, #8]
    1140:	2230      	movs	r2, #48	; 0x30
    1142:	701a      	strb	r2, [r3, #0]
    1144:	e03c      	b.n	11c0 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1146:	68ba      	ldr	r2, [r7, #8]
    1148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    114a:	1ad3      	subs	r3, r2, r3
    114c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    114e:	1ad3      	subs	r3, r2, r3
    1150:	3b01      	subs	r3, #1
    1152:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1154:	69ba      	ldr	r2, [r7, #24]
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	4293      	cmp	r3, r2
    115a:	bfa8      	it	ge
    115c:	4613      	movge	r3, r2
    115e:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    1160:	2300      	movs	r3, #0
    1162:	62fb      	str	r3, [r7, #44]	; 0x2c
    1164:	e015      	b.n	1192 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1168:	4613      	mov	r3, r2
    116a:	009b      	lsls	r3, r3, #2
    116c:	4413      	add	r3, r2
    116e:	005b      	lsls	r3, r3, #1
    1170:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1172:	68bb      	ldr	r3, [r7, #8]
    1174:	1c5a      	adds	r2, r3, #1
    1176:	60ba      	str	r2, [r7, #8]
    1178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    117a:	1612      	asrs	r2, r2, #24
    117c:	b2d2      	uxtb	r2, r2
    117e:	3230      	adds	r2, #48	; 0x30
    1180:	b2d2      	uxtb	r2, r2
    1182:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1186:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    118a:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    118e:	3301      	adds	r3, #1
    1190:	62fb      	str	r3, [r7, #44]	; 0x2c
    1192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1194:	69bb      	ldr	r3, [r7, #24]
    1196:	429a      	cmp	r2, r3
    1198:	dbe5      	blt.n	1166 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    119a:	68bb      	ldr	r3, [r7, #8]
    119c:	3b01      	subs	r3, #1
    119e:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    11a0:	e002      	b.n	11a8 <ftoa+0x1a4>
        {
            --pcBuf;
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	3b01      	subs	r3, #1
    11a6:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    11a8:	68bb      	ldr	r3, [r7, #8]
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	2b30      	cmp	r3, #48	; 0x30
    11ae:	d104      	bne.n	11ba <ftoa+0x1b6>
    11b0:	68bb      	ldr	r3, [r7, #8]
    11b2:	3b01      	subs	r3, #1
    11b4:	781b      	ldrb	r3, [r3, #0]
    11b6:	2b2e      	cmp	r3, #46	; 0x2e
    11b8:	d1f3      	bne.n	11a2 <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    11ba:	68bb      	ldr	r3, [r7, #8]
    11bc:	3301      	adds	r3, #1
    11be:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    11c0:	68bb      	ldr	r3, [r7, #8]
    11c2:	2200      	movs	r2, #0
    11c4:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    11c6:	68ba      	ldr	r2, [r7, #8]
    11c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11ca:	1ad3      	subs	r3, r2, r3
} // ftoa()
    11cc:	4618      	mov	r0, r3
    11ce:	373c      	adds	r7, #60	; 0x3c
    11d0:	46bd      	mov	sp, r7
    11d2:	bd90      	pop	{r4, r7, pc}
    11d4:	00302e30 	.word	0x00302e30

000011d8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    11d8:	b590      	push	{r4, r7, lr}
    11da:	b095      	sub	sp, #84	; 0x54
    11dc:	af00      	add	r7, sp, #0
    11de:	60f8      	str	r0, [r7, #12]
    11e0:	60b9      	str	r1, [r7, #8]
    11e2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    11e4:	2300      	movs	r3, #0
    11e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    11e8:	2300      	movs	r3, #0
    11ea:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    11ec:	e2e3      	b.n	17b6 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    11ee:	2306      	movs	r3, #6
    11f0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    11f2:	68bb      	ldr	r3, [r7, #8]
    11f4:	781b      	ldrb	r3, [r3, #0]
    11f6:	2b25      	cmp	r3, #37	; 0x25
    11f8:	d01f      	beq.n	123a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    11fa:	68fb      	ldr	r3, [r7, #12]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d015      	beq.n	122c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    1200:	68bb      	ldr	r3, [r7, #8]
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	2b0a      	cmp	r3, #10
    1206:	d10b      	bne.n	1220 <am_util_stdio_vsprintf+0x48>
    1208:	4bb1      	ldr	r3, [pc, #708]	; (14d0 <am_util_stdio_vsprintf+0x2f8>)
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d007      	beq.n	1220 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	1c5a      	adds	r2, r3, #1
    1214:	60fa      	str	r2, [r7, #12]
    1216:	220d      	movs	r2, #13
    1218:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    121a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    121c:	3301      	adds	r3, #1
    121e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	1c5a      	adds	r2, r3, #1
    1224:	60fa      	str	r2, [r7, #12]
    1226:	68ba      	ldr	r2, [r7, #8]
    1228:	7812      	ldrb	r2, [r2, #0]
    122a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    122c:	68bb      	ldr	r3, [r7, #8]
    122e:	3301      	adds	r3, #1
    1230:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    1232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1234:	3301      	adds	r3, #1
    1236:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1238:	e2bd      	b.n	17b6 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	3301      	adds	r3, #1
    123e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1240:	2300      	movs	r3, #0
    1242:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    124a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    124e:	2320      	movs	r3, #32
    1250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1254:	68bb      	ldr	r3, [r7, #8]
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	2b30      	cmp	r3, #48	; 0x30
    125a:	d105      	bne.n	1268 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    125c:	2330      	movs	r3, #48	; 0x30
    125e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    1262:	68bb      	ldr	r3, [r7, #8]
    1264:	3301      	adds	r3, #1
    1266:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1268:	f107 0310 	add.w	r3, r7, #16
    126c:	4619      	mov	r1, r3
    126e:	68b8      	ldr	r0, [r7, #8]
    1270:	f7ff fd98 	bl	da4 <decstr_to_int>
    1274:	4603      	mov	r3, r0
    1276:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1278:	693b      	ldr	r3, [r7, #16]
    127a:	68ba      	ldr	r2, [r7, #8]
    127c:	4413      	add	r3, r2
    127e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1280:	68bb      	ldr	r3, [r7, #8]
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	2b73      	cmp	r3, #115	; 0x73
    1286:	d005      	beq.n	1294 <am_util_stdio_vsprintf+0xbc>
    1288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    128a:	2b00      	cmp	r3, #0
    128c:	da02      	bge.n	1294 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    128e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1290:	425b      	negs	r3, r3
    1292:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1294:	68bb      	ldr	r3, [r7, #8]
    1296:	781b      	ldrb	r3, [r3, #0]
    1298:	2b2e      	cmp	r3, #46	; 0x2e
    129a:	d10e      	bne.n	12ba <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    129c:	68bb      	ldr	r3, [r7, #8]
    129e:	3301      	adds	r3, #1
    12a0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    12a2:	f107 0310 	add.w	r3, r7, #16
    12a6:	4619      	mov	r1, r3
    12a8:	68b8      	ldr	r0, [r7, #8]
    12aa:	f7ff fd7b 	bl	da4 <decstr_to_int>
    12ae:	4603      	mov	r3, r0
    12b0:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    12b2:	693b      	ldr	r3, [r7, #16]
    12b4:	68ba      	ldr	r2, [r7, #8]
    12b6:	4413      	add	r3, r2
    12b8:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    12ba:	68bb      	ldr	r3, [r7, #8]
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	2b6c      	cmp	r3, #108	; 0x6c
    12c0:	d10c      	bne.n	12dc <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    12c2:	68bb      	ldr	r3, [r7, #8]
    12c4:	3301      	adds	r3, #1
    12c6:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    12c8:	68bb      	ldr	r3, [r7, #8]
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	2b6c      	cmp	r3, #108	; 0x6c
    12ce:	d105      	bne.n	12dc <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    12d0:	68bb      	ldr	r3, [r7, #8]
    12d2:	3301      	adds	r3, #1
    12d4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    12d6:	2301      	movs	r3, #1
    12d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    12dc:	68bb      	ldr	r3, [r7, #8]
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	3b46      	subs	r3, #70	; 0x46
    12e2:	2b32      	cmp	r3, #50	; 0x32
    12e4:	f200 8254 	bhi.w	1790 <am_util_stdio_vsprintf+0x5b8>
    12e8:	a201      	add	r2, pc, #4	; (adr r2, 12f0 <am_util_stdio_vsprintf+0x118>)
    12ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12ee:	bf00      	nop
    12f0:	0000171b 	.word	0x0000171b
    12f4:	00001791 	.word	0x00001791
    12f8:	00001791 	.word	0x00001791
    12fc:	00001791 	.word	0x00001791
    1300:	00001791 	.word	0x00001791
    1304:	00001791 	.word	0x00001791
    1308:	00001791 	.word	0x00001791
    130c:	00001791 	.word	0x00001791
    1310:	00001791 	.word	0x00001791
    1314:	00001791 	.word	0x00001791
    1318:	00001791 	.word	0x00001791
    131c:	00001791 	.word	0x00001791
    1320:	00001791 	.word	0x00001791
    1324:	00001791 	.word	0x00001791
    1328:	00001791 	.word	0x00001791
    132c:	00001791 	.word	0x00001791
    1330:	00001791 	.word	0x00001791
    1334:	00001791 	.word	0x00001791
    1338:	000014b7 	.word	0x000014b7
    133c:	00001791 	.word	0x00001791
    1340:	00001791 	.word	0x00001791
    1344:	00001791 	.word	0x00001791
    1348:	00001791 	.word	0x00001791
    134c:	00001791 	.word	0x00001791
    1350:	00001791 	.word	0x00001791
    1354:	00001791 	.word	0x00001791
    1358:	00001791 	.word	0x00001791
    135c:	00001791 	.word	0x00001791
    1360:	00001791 	.word	0x00001791
    1364:	000013bd 	.word	0x000013bd
    1368:	000015e3 	.word	0x000015e3
    136c:	00001791 	.word	0x00001791
    1370:	0000171b 	.word	0x0000171b
    1374:	00001791 	.word	0x00001791
    1378:	00001791 	.word	0x00001791
    137c:	000015e3 	.word	0x000015e3
    1380:	00001791 	.word	0x00001791
    1384:	00001791 	.word	0x00001791
    1388:	00001791 	.word	0x00001791
    138c:	00001791 	.word	0x00001791
    1390:	00001791 	.word	0x00001791
    1394:	00001791 	.word	0x00001791
    1398:	00001791 	.word	0x00001791
    139c:	00001791 	.word	0x00001791
    13a0:	00001791 	.word	0x00001791
    13a4:	000013e3 	.word	0x000013e3
    13a8:	00001791 	.word	0x00001791
    13ac:	00001551 	.word	0x00001551
    13b0:	00001791 	.word	0x00001791
    13b4:	00001791 	.word	0x00001791
    13b8:	000014b1 	.word	0x000014b1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	1d1a      	adds	r2, r3, #4
    13c0:	607a      	str	r2, [r7, #4]
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d005      	beq.n	13da <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	1c5a      	adds	r2, r3, #1
    13d2:	60fa      	str	r2, [r7, #12]
    13d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    13d8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    13da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13dc:	3301      	adds	r3, #1
    13de:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13e0:	e1e6      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	1d1a      	adds	r2, r3, #4
    13e6:	607a      	str	r2, [r7, #4]
    13e8:	681b      	ldr	r3, [r3, #0]
    13ea:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    13ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    13ee:	f7ff fdc7 	bl	f80 <simple_strlen>
    13f2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    13f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13f6:	2b00      	cmp	r3, #0
    13f8:	dd2e      	ble.n	1458 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    13fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13fe:	429a      	cmp	r2, r3
    1400:	d22a      	bcs.n	1458 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1402:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1406:	1ad3      	subs	r3, r2, r3
    1408:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    140a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    140e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1410:	4619      	mov	r1, r3
    1412:	68f8      	ldr	r0, [r7, #12]
    1414:	f7ff fdd0 	bl	fb8 <padbuffer>
    1418:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	2b00      	cmp	r3, #0
    141e:	d001      	beq.n	1424 <am_util_stdio_vsprintf+0x24c>
    1420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1422:	e000      	b.n	1426 <am_util_stdio_vsprintf+0x24e>
    1424:	2300      	movs	r3, #0
    1426:	68fa      	ldr	r2, [r7, #12]
    1428:	4413      	add	r3, r2
    142a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    142e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1430:	4413      	add	r3, r2
    1432:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1434:	2300      	movs	r3, #0
    1436:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1438:	e00e      	b.n	1458 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	2b00      	cmp	r3, #0
    143e:	d005      	beq.n	144c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	1c5a      	adds	r2, r3, #1
    1444:	60fa      	str	r2, [r7, #12]
    1446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1448:	7812      	ldrb	r2, [r2, #0]
    144a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    144c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    144e:	3301      	adds	r3, #1
    1450:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1454:	3301      	adds	r3, #1
    1456:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    145a:	781b      	ldrb	r3, [r3, #0]
    145c:	2b00      	cmp	r3, #0
    145e:	d1ec      	bne.n	143a <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    1460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1462:	2b00      	cmp	r3, #0
    1464:	f000 81a1 	beq.w	17aa <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    146a:	425b      	negs	r3, r3
    146c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1472:	429a      	cmp	r2, r3
    1474:	f080 8199 	bcs.w	17aa <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1478:	6bba      	ldr	r2, [r7, #56]	; 0x38
    147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    147c:	1ad3      	subs	r3, r2, r3
    147e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1484:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1486:	4619      	mov	r1, r3
    1488:	68f8      	ldr	r0, [r7, #12]
    148a:	f7ff fd95 	bl	fb8 <padbuffer>
    148e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	2b00      	cmp	r3, #0
    1494:	d001      	beq.n	149a <am_util_stdio_vsprintf+0x2c2>
    1496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1498:	e000      	b.n	149c <am_util_stdio_vsprintf+0x2c4>
    149a:	2300      	movs	r3, #0
    149c:	68fa      	ldr	r2, [r7, #12]
    149e:	4413      	add	r3, r2
    14a0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    14a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14a6:	4413      	add	r3, r2
    14a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    14aa:	2300      	movs	r3, #0
    14ac:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    14ae:	e17c      	b.n	17aa <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    14b0:	2301      	movs	r3, #1
    14b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    14b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    14ba:	2b00      	cmp	r3, #0
    14bc:	d00a      	beq.n	14d4 <am_util_stdio_vsprintf+0x2fc>
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	3307      	adds	r3, #7
    14c2:	f023 0307 	bic.w	r3, r3, #7
    14c6:	f103 0208 	add.w	r2, r3, #8
    14ca:	607a      	str	r2, [r7, #4]
    14cc:	cb18      	ldmia	r3, {r3, r4}
    14ce:	e007      	b.n	14e0 <am_util_stdio_vsprintf+0x308>
    14d0:	10001154 	.word	0x10001154
                                      va_arg(pArgs, uint32_t);
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	1d1a      	adds	r2, r3, #4
    14d8:	607a      	str	r2, [r7, #4]
    14da:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    14dc:	f04f 0400 	mov.w	r4, #0
    14e0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    14e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14e6:	2b00      	cmp	r3, #0
    14e8:	d01e      	beq.n	1528 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    14ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14ee:	f7ff fc35 	bl	d5c <ndigits_in_hex>
    14f2:	4602      	mov	r2, r0
    14f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14f6:	1a9b      	subs	r3, r3, r2
    14f8:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    14fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1500:	4619      	mov	r1, r3
    1502:	68f8      	ldr	r0, [r7, #12]
    1504:	f7ff fd58 	bl	fb8 <padbuffer>
    1508:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	2b00      	cmp	r3, #0
    150e:	d001      	beq.n	1514 <am_util_stdio_vsprintf+0x33c>
    1510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1512:	e000      	b.n	1516 <am_util_stdio_vsprintf+0x33e>
    1514:	2300      	movs	r3, #0
    1516:	68fa      	ldr	r2, [r7, #12]
    1518:	4413      	add	r3, r2
    151a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    151e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1520:	4413      	add	r3, r2
    1522:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1524:	2300      	movs	r3, #0
    1526:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1528:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    152c:	68fa      	ldr	r2, [r7, #12]
    152e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1532:	f7ff fcc5 	bl	ec0 <uint64_to_hexstr>
    1536:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1538:	68fb      	ldr	r3, [r7, #12]
    153a:	2b00      	cmp	r3, #0
    153c:	d003      	beq.n	1546 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1540:	68fa      	ldr	r2, [r7, #12]
    1542:	4413      	add	r3, r2
    1544:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    154a:	4413      	add	r3, r2
    154c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    154e:	e12f      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1550:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1554:	2b00      	cmp	r3, #0
    1556:	d008      	beq.n	156a <am_util_stdio_vsprintf+0x392>
    1558:	687b      	ldr	r3, [r7, #4]
    155a:	3307      	adds	r3, #7
    155c:	f023 0307 	bic.w	r3, r3, #7
    1560:	f103 0208 	add.w	r2, r3, #8
    1564:	607a      	str	r2, [r7, #4]
    1566:	cb18      	ldmia	r3, {r3, r4}
    1568:	e005      	b.n	1576 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	1d1a      	adds	r2, r3, #4
    156e:	607a      	str	r2, [r7, #4]
    1570:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1572:	f04f 0400 	mov.w	r4, #0
    1576:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    157c:	2b00      	cmp	r3, #0
    157e:	d01e      	beq.n	15be <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1580:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1584:	f7ff fbaa 	bl	cdc <ndigits_in_u64>
    1588:	4602      	mov	r2, r0
    158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    158c:	1a9b      	subs	r3, r3, r2
    158e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1594:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1596:	4619      	mov	r1, r3
    1598:	68f8      	ldr	r0, [r7, #12]
    159a:	f7ff fd0d 	bl	fb8 <padbuffer>
    159e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d001      	beq.n	15aa <am_util_stdio_vsprintf+0x3d2>
    15a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15a8:	e000      	b.n	15ac <am_util_stdio_vsprintf+0x3d4>
    15aa:	2300      	movs	r3, #0
    15ac:	68fa      	ldr	r2, [r7, #12]
    15ae:	4413      	add	r3, r2
    15b0:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    15b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15b6:	4413      	add	r3, r2
    15b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    15ba:	2300      	movs	r3, #0
    15bc:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    15be:	68fa      	ldr	r2, [r7, #12]
    15c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    15c4:	f7ff fc34 	bl	e30 <uint64_to_str>
    15c8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d003      	beq.n	15d8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    15d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15d2:	68fa      	ldr	r2, [r7, #12]
    15d4:	4413      	add	r3, r2
    15d6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15dc:	4413      	add	r3, r2
    15de:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15e0:	e0e6      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    15e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    15e6:	2b00      	cmp	r3, #0
    15e8:	d008      	beq.n	15fc <am_util_stdio_vsprintf+0x424>
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	3307      	adds	r3, #7
    15ee:	f023 0307 	bic.w	r3, r3, #7
    15f2:	f103 0208 	add.w	r2, r3, #8
    15f6:	607a      	str	r2, [r7, #4]
    15f8:	cb18      	ldmia	r3, {r3, r4}
    15fa:	e005      	b.n	1608 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	1d1a      	adds	r2, r3, #4
    1600:	607a      	str	r2, [r7, #4]
    1602:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1604:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1608:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    160c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1610:	2b00      	cmp	r3, #0
    1612:	f174 0300 	sbcs.w	r3, r4, #0
    1616:	da0a      	bge.n	162e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1618:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    161c:	425b      	negs	r3, r3
    161e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1622:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1626:	2301      	movs	r3, #1
    1628:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    162c:	e006      	b.n	163c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    162e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1632:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1636:	2300      	movs	r3, #0
    1638:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    163e:	2b00      	cmp	r3, #0
    1640:	d04a      	beq.n	16d8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1642:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1646:	4618      	mov	r0, r3
    1648:	4621      	mov	r1, r4
    164a:	f7ff fb69 	bl	d20 <ndigits_in_i64>
    164e:	4602      	mov	r2, r0
    1650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1652:	1a9b      	subs	r3, r3, r2
    1654:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1656:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    165a:	2b00      	cmp	r3, #0
    165c:	d011      	beq.n	1682 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1660:	3b01      	subs	r3, #1
    1662:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1668:	2b30      	cmp	r3, #48	; 0x30
    166a:	d10a      	bne.n	1682 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    166c:	68fb      	ldr	r3, [r7, #12]
    166e:	2b00      	cmp	r3, #0
    1670:	d004      	beq.n	167c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	1c5a      	adds	r2, r3, #1
    1676:	60fa      	str	r2, [r7, #12]
    1678:	222d      	movs	r2, #45	; 0x2d
    167a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    167e:	3301      	adds	r3, #1
    1680:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1686:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1688:	4619      	mov	r1, r3
    168a:	68f8      	ldr	r0, [r7, #12]
    168c:	f7ff fc94 	bl	fb8 <padbuffer>
    1690:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1692:	68fb      	ldr	r3, [r7, #12]
    1694:	2b00      	cmp	r3, #0
    1696:	d001      	beq.n	169c <am_util_stdio_vsprintf+0x4c4>
    1698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    169a:	e000      	b.n	169e <am_util_stdio_vsprintf+0x4c6>
    169c:	2300      	movs	r3, #0
    169e:	68fa      	ldr	r2, [r7, #12]
    16a0:	4413      	add	r3, r2
    16a2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    16a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16a8:	4413      	add	r3, r2
    16aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    16ac:	2300      	movs	r3, #0
    16ae:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    16b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16b4:	2b00      	cmp	r3, #0
    16b6:	d01e      	beq.n	16f6 <am_util_stdio_vsprintf+0x51e>
    16b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    16bc:	2b20      	cmp	r3, #32
    16be:	d11a      	bne.n	16f6 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    16c0:	68fb      	ldr	r3, [r7, #12]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d004      	beq.n	16d0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    16c6:	68fb      	ldr	r3, [r7, #12]
    16c8:	1c5a      	adds	r2, r3, #1
    16ca:	60fa      	str	r2, [r7, #12]
    16cc:	222d      	movs	r2, #45	; 0x2d
    16ce:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    16d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16d2:	3301      	adds	r3, #1
    16d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    16d6:	e00e      	b.n	16f6 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    16d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16dc:	2b00      	cmp	r3, #0
    16de:	d00a      	beq.n	16f6 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    16e0:	68fb      	ldr	r3, [r7, #12]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d004      	beq.n	16f0 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	1c5a      	adds	r2, r3, #1
    16ea:	60fa      	str	r2, [r7, #12]
    16ec:	222d      	movs	r2, #45	; 0x2d
    16ee:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    16f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16f2:	3301      	adds	r3, #1
    16f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    16f6:	68fa      	ldr	r2, [r7, #12]
    16f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    16fc:	f7ff fb98 	bl	e30 <uint64_to_str>
    1700:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1702:	68fb      	ldr	r3, [r7, #12]
    1704:	2b00      	cmp	r3, #0
    1706:	d003      	beq.n	1710 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    170a:	68fa      	ldr	r2, [r7, #12]
    170c:	4413      	add	r3, r2
    170e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1714:	4413      	add	r3, r2
    1716:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1718:	e04a      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	2b00      	cmp	r3, #0
    171e:	d046      	beq.n	17ae <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	3307      	adds	r3, #7
    1724:	f023 0307 	bic.w	r3, r3, #7
    1728:	f103 0208 	add.w	r2, r3, #8
    172c:	607a      	str	r2, [r7, #4]
    172e:	cb18      	ldmia	r3, {r3, r4}
    1730:	4618      	mov	r0, r3
    1732:	4621      	mov	r1, r4
    1734:	f7fe fcc4 	bl	c0 <__aeabi_d2f>
    1738:	4603      	mov	r3, r0
    173a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    173c:	68fb      	ldr	r3, [r7, #12]
    173e:	2214      	movs	r2, #20
    1740:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1744:	68f9      	ldr	r1, [r7, #12]
    1746:	6978      	ldr	r0, [r7, #20]
    1748:	f7ff fc5c 	bl	1004 <ftoa>
    174c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1750:	2b00      	cmp	r3, #0
    1752:	da14      	bge.n	177e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1756:	f1b3 3fff 	cmp.w	r3, #4294967295
    175a:	d102      	bne.n	1762 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    175c:	4b1e      	ldr	r3, [pc, #120]	; (17d8 <am_util_stdio_vsprintf+0x600>)
    175e:	62bb      	str	r3, [r7, #40]	; 0x28
    1760:	e008      	b.n	1774 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1764:	f113 0f02 	cmn.w	r3, #2
    1768:	d102      	bne.n	1770 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    176a:	4b1c      	ldr	r3, [pc, #112]	; (17dc <am_util_stdio_vsprintf+0x604>)
    176c:	62bb      	str	r3, [r7, #40]	; 0x28
    176e:	e001      	b.n	1774 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1770:	4b1b      	ldr	r3, [pc, #108]	; (17e0 <am_util_stdio_vsprintf+0x608>)
    1772:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1778:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    177a:	2303      	movs	r3, #3
    177c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1782:	4413      	add	r3, r2
    1784:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1788:	68fa      	ldr	r2, [r7, #12]
    178a:	4413      	add	r3, r2
    178c:	60fb      	str	r3, [r7, #12]
                }
                break;
    178e:	e00e      	b.n	17ae <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	2b00      	cmp	r3, #0
    1794:	d005      	beq.n	17a2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	1c5a      	adds	r2, r3, #1
    179a:	60fa      	str	r2, [r7, #12]
    179c:	68ba      	ldr	r2, [r7, #8]
    179e:	7812      	ldrb	r2, [r2, #0]
    17a0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    17a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17a4:	3301      	adds	r3, #1
    17a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    17a8:	e002      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    17aa:	bf00      	nop
    17ac:	e000      	b.n	17b0 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    17ae:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    17b0:	68bb      	ldr	r3, [r7, #8]
    17b2:	3301      	adds	r3, #1
    17b4:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    17b6:	68bb      	ldr	r3, [r7, #8]
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	2b00      	cmp	r3, #0
    17bc:	f47f ad17 	bne.w	11ee <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    17c0:	68fb      	ldr	r3, [r7, #12]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d002      	beq.n	17cc <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    17c6:	68fb      	ldr	r3, [r7, #12]
    17c8:	2200      	movs	r2, #0
    17ca:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    17cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    17ce:	4618      	mov	r0, r3
    17d0:	3754      	adds	r7, #84	; 0x54
    17d2:	46bd      	mov	sp, r7
    17d4:	bd90      	pop	{r4, r7, pc}
    17d6:	bf00      	nop
    17d8:	00302e30 	.word	0x00302e30
    17dc:	00232e23 	.word	0x00232e23
    17e0:	003f2e3f 	.word	0x003f2e3f

000017e4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    17e4:	b40f      	push	{r0, r1, r2, r3}
    17e6:	b580      	push	{r7, lr}
    17e8:	b082      	sub	sp, #8
    17ea:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    17ec:	f107 0314 	add.w	r3, r7, #20
    17f0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    17f2:	683a      	ldr	r2, [r7, #0]
    17f4:	6939      	ldr	r1, [r7, #16]
    17f6:	4808      	ldr	r0, [pc, #32]	; (1818 <am_util_stdio_printf+0x34>)
    17f8:	f7ff fcee 	bl	11d8 <am_util_stdio_vsprintf>
    17fc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    17fe:	4b07      	ldr	r3, [pc, #28]	; (181c <am_util_stdio_printf+0x38>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	4805      	ldr	r0, [pc, #20]	; (1818 <am_util_stdio_printf+0x34>)
    1804:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1806:	687b      	ldr	r3, [r7, #4]
}
    1808:	4618      	mov	r0, r3
    180a:	3708      	adds	r7, #8
    180c:	46bd      	mov	sp, r7
    180e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1812:	b004      	add	sp, #16
    1814:	4770      	bx	lr
    1816:	bf00      	nop
    1818:	10001054 	.word	0x10001054
    181c:	1000515c 	.word	0x1000515c

00001820 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1820:	b580      	push	{r7, lr}
    1822:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1824:	4802      	ldr	r0, [pc, #8]	; (1830 <am_util_stdio_terminal_clear+0x10>)
    1826:	f7ff ffdd 	bl	17e4 <am_util_stdio_printf>
}
    182a:	bf00      	nop
    182c:	bd80      	pop	{r7, pc}
    182e:	bf00      	nop
    1830:	00002a28 	.word	0x00002a28

00001834 <am_util_string_strncpy>:
//! @return pcDst (the location of the destination string).
//
//*****************************************************************************
char *
am_util_string_strncpy(char *pcDst, const char *pcSrc, uint32_t uNum)
{
    1834:	b480      	push	{r7}
    1836:	b087      	sub	sp, #28
    1838:	af00      	add	r7, sp, #0
    183a:	60f8      	str	r0, [r7, #12]
    183c:	60b9      	str	r1, [r7, #8]
    183e:	607a      	str	r2, [r7, #4]
    char *pcRet = pcDst;
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	617b      	str	r3, [r7, #20]

    while (uNum > 0)
    1844:	e014      	b.n	1870 <am_util_string_strncpy+0x3c>
    {
        if ( *pcSrc )
    1846:	68bb      	ldr	r3, [r7, #8]
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	2b00      	cmp	r3, #0
    184c:	d008      	beq.n	1860 <am_util_string_strncpy+0x2c>
        {
            *pcDst++ = *pcSrc++;
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	1c5a      	adds	r2, r3, #1
    1852:	60fa      	str	r2, [r7, #12]
    1854:	68ba      	ldr	r2, [r7, #8]
    1856:	1c51      	adds	r1, r2, #1
    1858:	60b9      	str	r1, [r7, #8]
    185a:	7812      	ldrb	r2, [r2, #0]
    185c:	701a      	strb	r2, [r3, #0]
    185e:	e004      	b.n	186a <am_util_string_strncpy+0x36>
        }
        else
        {
            *pcDst++ = 0x00;
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	1c5a      	adds	r2, r3, #1
    1864:	60fa      	str	r2, [r7, #12]
    1866:	2200      	movs	r2, #0
    1868:	701a      	strb	r2, [r3, #0]
        }
        uNum--;
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	3b01      	subs	r3, #1
    186e:	607b      	str	r3, [r7, #4]
char *
am_util_string_strncpy(char *pcDst, const char *pcSrc, uint32_t uNum)
{
    char *pcRet = pcDst;

    while (uNum > 0)
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	2b00      	cmp	r3, #0
    1874:	d1e7      	bne.n	1846 <am_util_string_strncpy+0x12>
            *pcDst++ = 0x00;
        }
        uNum--;
    }

    return pcRet;
    1876:	697b      	ldr	r3, [r7, #20]
}
    1878:	4618      	mov	r0, r3
    187a:	371c      	adds	r7, #28
    187c:	46bd      	mov	sp, r7
    187e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1882:	4770      	bx	lr

00001884 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1884:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1886:	f000 fd0b 	bl	22a0 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    188a:	f000 fd2d 	bl	22e8 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    188e:	f000 fda7 	bl	23e0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1892:	2001      	movs	r0, #1
    1894:	f000 fd38 	bl	2308 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1898:	2001      	movs	r0, #1
    189a:	f000 f905 	bl	1aa8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    189e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    18a2:	f000 bd3f 	b.w	2324 <am_hal_rtc_osc_disable>
    18a6:	bf00      	nop

000018a8 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    18a8:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    18aa:	4b17      	ldr	r3, [pc, #92]	; (1908 <am_bsp_debug_printf_enable+0x60>)
    18ac:	6818      	ldr	r0, [r3, #0]
    18ae:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    18b2:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    18b4:	d001      	beq.n	18ba <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    18b6:	b007      	add	sp, #28
    18b8:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18ba:	4a14      	ldr	r2, [pc, #80]	; (190c <am_bsp_debug_printf_enable+0x64>)
    18bc:	4914      	ldr	r1, [pc, #80]	; (1910 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    18be:	4d15      	ldr	r5, [pc, #84]	; (1914 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18c0:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    18c2:	a806      	add	r0, sp, #24
    18c4:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    18c8:	f000 fd34 	bl	2334 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    18cc:	f3ef 8310 	mrs	r3, PRIMASK
    18d0:	9300      	str	r3, [sp, #0]
    18d2:	b672      	cpsid	i
    18d4:	4a10      	ldr	r2, [pc, #64]	; (1918 <am_bsp_debug_printf_enable+0x70>)
    18d6:	4d11      	ldr	r5, [pc, #68]	; (191c <am_bsp_debug_printf_enable+0x74>)
    18d8:	4811      	ldr	r0, [pc, #68]	; (1920 <am_bsp_debug_printf_enable+0x78>)
    18da:	4912      	ldr	r1, [pc, #72]	; (1924 <am_bsp_debug_printf_enable+0x7c>)
    18dc:	2373      	movs	r3, #115	; 0x73
    18de:	6013      	str	r3, [r2, #0]
    18e0:	682b      	ldr	r3, [r5, #0]
    18e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    18e6:	602b      	str	r3, [r5, #0]
    18e8:	6805      	ldr	r5, [r0, #0]
    18ea:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    18ee:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    18f2:	6003      	str	r3, [r0, #0]
    18f4:	6808      	ldr	r0, [r1, #0]
    18f6:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    18fa:	600d      	str	r5, [r1, #0]
    18fc:	6014      	str	r4, [r2, #0]
    18fe:	9c00      	ldr	r4, [sp, #0]
    1900:	f384 8810 	msr	PRIMASK, r4
}
    1904:	b007      	add	sp, #28
    1906:	bd30      	pop	{r4, r5, pc}
    1908:	10001158 	.word	0x10001158
    190c:	e0000e80 	.word	0xe0000e80
    1910:	00150511 	.word	0x00150511
    1914:	000f4240 	.word	0x000f4240
    1918:	40010060 	.word	0x40010060
    191c:	40010054 	.word	0x40010054
    1920:	40010028 	.word	0x40010028
    1924:	40010108 	.word	0x40010108

00001928 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1928:	f000 bafe 	b.w	1f28 <am_hal_itm_print>

0000192c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192e:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1930:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1934:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1936:	7863      	ldrb	r3, [r4, #1]
    1938:	78e2      	ldrb	r2, [r4, #3]
    193a:	7925      	ldrb	r5, [r4, #4]
    193c:	79a1      	ldrb	r1, [r4, #6]
    193e:	00be      	lsls	r6, r7, #2
    1940:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1944:	f006 0304 	and.w	r3, r6, #4
    1948:	f00e 0602 	and.w	r6, lr, #2
    194c:	431e      	orrs	r6, r3
    194e:	f042 0201 	orr.w	r2, r2, #1
    1952:	79e3      	ldrb	r3, [r4, #7]
    1954:	01ed      	lsls	r5, r5, #7
    1956:	4316      	orrs	r6, r2
    1958:	b2ed      	uxtb	r5, r5
    195a:	7a22      	ldrb	r2, [r4, #8]
    195c:	0289      	lsls	r1, r1, #10
    195e:	432e      	orrs	r6, r5
    1960:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1964:	7a65      	ldrb	r5, [r4, #9]
    1966:	02db      	lsls	r3, r3, #11
    1968:	430e      	orrs	r6, r1
    196a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    196e:	0312      	lsls	r2, r2, #12
    1970:	7aa1      	ldrb	r1, [r4, #10]
    1972:	431e      	orrs	r6, r3
    1974:	042d      	lsls	r5, r5, #16
    1976:	b293      	uxth	r3, r2
    1978:	7ae2      	ldrb	r2, [r4, #11]
    197a:	431e      	orrs	r6, r3
    197c:	0509      	lsls	r1, r1, #20
    197e:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    1982:	0612      	lsls	r2, r2, #24
    1984:	4333      	orrs	r3, r6
    1986:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    198a:	00bf      	lsls	r7, r7, #2
    198c:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1990:	4333      	orrs	r3, r6
    1992:	430b      	orrs	r3, r1
    1994:	f007 0508 	and.w	r5, r7, #8
    1998:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    199a:	f000 fb79 	bl	2090 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    199e:	482c      	ldr	r0, [pc, #176]	; (1a50 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    19a0:	4b2c      	ldr	r3, [pc, #176]	; (1a54 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    19a2:	6005      	str	r5, [r0, #0]
    19a4:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    19a6:	681e      	ldr	r6, [r3, #0]
    19a8:	0777      	lsls	r7, r6, #29
    19aa:	d41e      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19ac:	681f      	ldr	r7, [r3, #0]
    19ae:	077e      	lsls	r6, r7, #29
    19b0:	f102 32ff 	add.w	r2, r2, #4294967295
    19b4:	d419      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19b6:	6819      	ldr	r1, [r3, #0]
    19b8:	074f      	lsls	r7, r1, #29
    19ba:	d416      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19bc:	6818      	ldr	r0, [r3, #0]
    19be:	0746      	lsls	r6, r0, #29
    19c0:	d413      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19c2:	681e      	ldr	r6, [r3, #0]
    19c4:	0770      	lsls	r0, r6, #29
    19c6:	d410      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19c8:	681f      	ldr	r7, [r3, #0]
    19ca:	0779      	lsls	r1, r7, #29
    19cc:	d40d      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19ce:	6819      	ldr	r1, [r3, #0]
    19d0:	074f      	lsls	r7, r1, #29
    19d2:	d40a      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19d4:	6818      	ldr	r0, [r3, #0]
    19d6:	0746      	lsls	r6, r0, #29
    19d8:	d407      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19da:	681e      	ldr	r6, [r3, #0]
    19dc:	0770      	lsls	r0, r6, #29
    19de:	d404      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    19e0:	681f      	ldr	r7, [r3, #0]
    19e2:	0779      	lsls	r1, r7, #29
    19e4:	d401      	bmi.n	19ea <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    19e6:	3a09      	subs	r2, #9
    19e8:	d1dd      	bne.n	19a6 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    19ea:	4b1a      	ldr	r3, [pc, #104]	; (1a54 <am_hal_cachectrl_enable+0x128>)
    19ec:	681a      	ldr	r2, [r3, #0]
    19ee:	f042 0101 	orr.w	r1, r2, #1
    19f2:	6019      	str	r1, [r3, #0]
    19f4:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    19f6:	6818      	ldr	r0, [r3, #0]
    19f8:	0740      	lsls	r0, r0, #29
    19fa:	d41e      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    19fc:	681e      	ldr	r6, [r3, #0]
    19fe:	0771      	lsls	r1, r6, #29
    1a00:	f102 32ff 	add.w	r2, r2, #4294967295
    1a04:	d419      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a06:	681f      	ldr	r7, [r3, #0]
    1a08:	077f      	lsls	r7, r7, #29
    1a0a:	d416      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a0c:	6819      	ldr	r1, [r3, #0]
    1a0e:	074e      	lsls	r6, r1, #29
    1a10:	d413      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a12:	6818      	ldr	r0, [r3, #0]
    1a14:	0740      	lsls	r0, r0, #29
    1a16:	d410      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a18:	681e      	ldr	r6, [r3, #0]
    1a1a:	0771      	lsls	r1, r6, #29
    1a1c:	d40d      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a1e:	681f      	ldr	r7, [r3, #0]
    1a20:	077f      	lsls	r7, r7, #29
    1a22:	d40a      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a24:	6819      	ldr	r1, [r3, #0]
    1a26:	074e      	lsls	r6, r1, #29
    1a28:	d407      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a2a:	6818      	ldr	r0, [r3, #0]
    1a2c:	0740      	lsls	r0, r0, #29
    1a2e:	d404      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    1a30:	681e      	ldr	r6, [r3, #0]
    1a32:	0771      	lsls	r1, r6, #29
    1a34:	d401      	bmi.n	1a3a <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1a36:	3a09      	subs	r2, #9
    1a38:	d1dd      	bne.n	19f6 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a3a:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a3c:	4f04      	ldr	r7, [pc, #16]	; (1a50 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a3e:	0223      	lsls	r3, r4, #8
    1a40:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1a44:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1a48:	4311      	orrs	r1, r2
    1a4a:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a4c:	6039      	str	r1, [r7, #0]
    1a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a50:	40018000 	.word	0x40018000
    1a54:	40018008 	.word	0x40018008

00001a58 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1a58:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1a5a:	4604      	mov	r4, r0
    1a5c:	b120      	cbz	r0, 1a68 <am_hal_clkgen_sysclk_select+0x10>
    1a5e:	4a06      	ldr	r2, [pc, #24]	; (1a78 <am_hal_clkgen_sysclk_select+0x20>)
    1a60:	4806      	ldr	r0, [pc, #24]	; (1a7c <am_hal_clkgen_sysclk_select+0x24>)
    1a62:	2150      	movs	r1, #80	; 0x50
    1a64:	f000 f82a 	bl	1abc <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a68:	4b05      	ldr	r3, [pc, #20]	; (1a80 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a6a:	4906      	ldr	r1, [pc, #24]	; (1a84 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a6c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a6e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a70:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a72:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a74:	601a      	str	r2, [r3, #0]
    1a76:	bd10      	pop	{r4, pc}
    1a78:	00002a48 	.word	0x00002a48
    1a7c:	00002a80 	.word	0x00002a80
    1a80:	40004014 	.word	0x40004014
    1a84:	40004018 	.word	0x40004018

00001a88 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a88:	4b04      	ldr	r3, [pc, #16]	; (1a9c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1a8a:	4905      	ldr	r1, [pc, #20]	; (1aa0 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a8c:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1a8e:	4805      	ldr	r0, [pc, #20]	; (1aa4 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1a90:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1a94:	bf08      	it	eq
    1a96:	4608      	moveq	r0, r1
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop
    1a9c:	40004018 	.word	0x40004018
    1aa0:	02dc6c00 	.word	0x02dc6c00
    1aa4:	016e3600 	.word	0x016e3600

00001aa8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1aa8:	0783      	lsls	r3, r0, #30
    1aaa:	d003      	beq.n	1ab4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1aac:	4a02      	ldr	r2, [pc, #8]	; (1ab8 <am_hal_clkgen_osc_stop+0x10>)
    1aae:	6813      	ldr	r3, [r2, #0]
    1ab0:	4318      	orrs	r0, r3
    1ab2:	6010      	str	r0, [r2, #0]
    1ab4:	4770      	bx	lr
    1ab6:	bf00      	nop
    1ab8:	4000400c 	.word	0x4000400c

00001abc <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1abc:	e7fe      	b.n	1abc <am_hal_debug_error>
    1abe:	bf00      	nop

00001ac0 <am_hal_flash_mass_erase>:
//
//*****************************************************************************
int
am_hal_flash_mass_erase(uint32_t ui32Value, uint32_t ui32FlashInst)
{
    return g_am_hal_flash.flash_mass_erase(ui32Value, ui32FlashInst);
    1ac0:	4b01      	ldr	r3, [pc, #4]	; (1ac8 <am_hal_flash_mass_erase+0x8>)
    1ac2:	681a      	ldr	r2, [r3, #0]
    1ac4:	4710      	bx	r2
    1ac6:	bf00      	nop
    1ac8:	10001004 	.word	0x10001004

00001acc <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    1acc:	4b01      	ldr	r3, [pc, #4]	; (1ad4 <am_hal_flash_page_erase+0x8>)
    1ace:	685b      	ldr	r3, [r3, #4]
    1ad0:	4718      	bx	r3
    1ad2:	bf00      	nop
    1ad4:	10001004 	.word	0x10001004

00001ad8 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    1ad8:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    1ada:	4c03      	ldr	r4, [pc, #12]	; (1ae8 <am_hal_flash_program_main+0x10>)
    1adc:	68a4      	ldr	r4, [r4, #8]
    1ade:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    1ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    1ae4:	4760      	bx	ip
    1ae6:	bf00      	nop
    1ae8:	10001004 	.word	0x10001004

00001aec <am_hal_flash_program_info>:
//*****************************************************************************
int
am_hal_flash_program_info(uint32_t ui32Value, uint32_t ui32InfoInst,
                          uint32_t *pui32Src, uint32_t ui32Offset,
                          uint32_t ui32NumWords)
{
    1aec:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_info(ui32Value, 0, pui32Src,
    1aee:	4c03      	ldr	r4, [pc, #12]	; (1afc <am_hal_flash_program_info+0x10>)
    1af0:	68e4      	ldr	r4, [r4, #12]
    1af2:	2100      	movs	r1, #0
    1af4:	46a4      	mov	ip, r4
                                             ui32Offset, ui32NumWords);
}
    1af6:	f85d 4b04 	ldr.w	r4, [sp], #4
int
am_hal_flash_program_info(uint32_t ui32Value, uint32_t ui32InfoInst,
                          uint32_t *pui32Src, uint32_t ui32Offset,
                          uint32_t ui32NumWords)
{
    return g_am_hal_flash.flash_program_info(ui32Value, 0, pui32Src,
    1afa:	4760      	bx	ip
    1afc:	10001004 	.word	0x10001004

00001b00 <am_hal_flash_erase_info>:
//*****************************************************************************
int
am_hal_flash_erase_info(uint32_t ui32ProgramKey,
                        uint32_t ui32Inst)
{
    return g_am_hal_flash.flash_erase_info(ui32ProgramKey, ui32Inst);
    1b00:	4b01      	ldr	r3, [pc, #4]	; (1b08 <am_hal_flash_erase_info+0x8>)
    1b02:	69da      	ldr	r2, [r3, #28]
    1b04:	4710      	bx	r2
    1b06:	bf00      	nop
    1b08:	10001004 	.word	0x10001004

00001b0c <am_hal_flash_recovery>:
//
//*****************************************************************************
void
am_hal_flash_recovery(uint32_t ui32RecoveryKey)
{
    g_am_hal_flash.flash_recovery(ui32RecoveryKey);
    1b0c:	4b01      	ldr	r3, [pc, #4]	; (1b14 <am_hal_flash_recovery+0x8>)
    1b0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1b10:	4708      	bx	r1
    1b12:	bf00      	nop
    1b14:	10001004 	.word	0x10001004

00001b18 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1b18:	4b01      	ldr	r3, [pc, #4]	; (1b20 <am_hal_flash_delay+0x8>)
    1b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b1c:	4708      	bx	r1
    1b1e:	bf00      	nop
    1b20:	10001004 	.word	0x10001004

00001b24 <am_hal_flash_info_erase_disable>:
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_info_erase_disable(void)
{
    1b24:	b5f0      	push	{r4, r5, r6, r7, lr}
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1b26:	4b27      	ldr	r3, [pc, #156]	; (1bc4 <am_hal_flash_info_erase_disable+0xa0>)
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1b28:	4a27      	ldr	r2, [pc, #156]	; (1bc8 <am_hal_flash_info_erase_disable+0xa4>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1b2a:	6818      	ldr	r0, [r3, #0]
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1b2c:	4290      	cmp	r0, r2
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_info_erase_disable(void)
{
    1b2e:	b087      	sub	sp, #28
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1b30:	d005      	beq.n	1b3e <am_hal_flash_info_erase_disable+0x1a>
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1b32:	1c43      	adds	r3, r0, #1
    1b34:	d023      	beq.n	1b7e <am_hal_flash_info_erase_disable+0x5a>
    1b36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1b3a:	b007      	add	sp, #28
    1b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1b3e:	4a23      	ldr	r2, [pc, #140]	; (1bcc <am_hal_flash_info_erase_disable+0xa8>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1b40:	4b23      	ldr	r3, [pc, #140]	; (1bd0 <am_hal_flash_info_erase_disable+0xac>)
    1b42:	6814      	ldr	r4, [r2, #0]
    1b44:	429c      	cmp	r4, r3
    1b46:	d1f6      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1b48:	4d22      	ldr	r5, [pc, #136]	; (1bd4 <am_hal_flash_info_erase_disable+0xb0>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1b4a:	4f23      	ldr	r7, [pc, #140]	; (1bd8 <am_hal_flash_info_erase_disable+0xb4>)
    1b4c:	6828      	ldr	r0, [r5, #0]
    1b4e:	42b8      	cmp	r0, r7
    1b50:	d1f1      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1b52:	4922      	ldr	r1, [pc, #136]	; (1bdc <am_hal_flash_info_erase_disable+0xb8>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1b54:	4e22      	ldr	r6, [pc, #136]	; (1be0 <am_hal_flash_info_erase_disable+0xbc>)
    1b56:	680a      	ldr	r2, [r1, #0]
    1b58:	42b2      	cmp	r2, r6
    1b5a:	d1ec      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
    1b5c:	4d21      	ldr	r5, [pc, #132]	; (1be4 <am_hal_flash_info_erase_disable+0xc0>)
    1b5e:	ac02      	add	r4, sp, #8
    }

    //
    // Clear bit in INFO space to disable erasure.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR)  &
    1b60:	4b21      	ldr	r3, [pc, #132]	; (1be8 <am_hal_flash_info_erase_disable+0xc4>)
                        ~AM_HAL_FLASH_INFO_SECURITY_ENINFOERASE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1b62:	68ed      	ldr	r5, [r5, #12]
    }

    //
    // Clear bit in INFO space to disable erasure.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR)  &
    1b64:	681f      	ldr	r7, [r3, #0]
                        ~AM_HAL_FLASH_INFO_SECURITY_ENINFOERASE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1b66:	4821      	ldr	r0, [pc, #132]	; (1bec <am_hal_flash_info_erase_disable+0xc8>)
    }

    //
    // Clear bit in INFO space to disable erasure.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR)  &
    1b68:	f427 7680 	bic.w	r6, r7, #256	; 0x100
                        ~AM_HAL_FLASH_INFO_SECURITY_ENINFOERASE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1b6c:	2101      	movs	r1, #1
    1b6e:	9100      	str	r1, [sp, #0]
    1b70:	4622      	mov	r2, r4
    }

    //
    // Clear bit in INFO space to disable erasure.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR)  &
    1b72:	9602      	str	r6, [sp, #8]
                        ~AM_HAL_FLASH_INFO_SECURITY_ENINFOERASE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1b74:	2304      	movs	r3, #4
    1b76:	2100      	movs	r1, #0
    1b78:	47a8      	blx	r5
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1b7a:	b007      	add	sp, #28
    1b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1b7e:	4913      	ldr	r1, [pc, #76]	; (1bcc <am_hal_flash_info_erase_disable+0xa8>)
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1b80:	680c      	ldr	r4, [r1, #0]
    1b82:	1c63      	adds	r3, r4, #1
    1b84:	d1d7      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
    1b86:	4d13      	ldr	r5, [pc, #76]	; (1bd4 <am_hal_flash_info_erase_disable+0xb0>)
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1b88:	682e      	ldr	r6, [r5, #0]
    1b8a:	1c73      	adds	r3, r6, #1
    1b8c:	d1d3      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1b8e:	4f13      	ldr	r7, [pc, #76]	; (1bdc <am_hal_flash_info_erase_disable+0xb8>)
    1b90:	683b      	ldr	r3, [r7, #0]
    1b92:	3301      	adds	r3, #1
    1b94:	d1cf      	bne.n	1b36 <am_hal_flash_info_erase_disable+0x12>
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;
    1b96:	ac06      	add	r4, sp, #24
    1b98:	4811      	ldr	r0, [pc, #68]	; (1be0 <am_hal_flash_info_erase_disable+0xbc>)
    1b9a:	f844 0d10 	str.w	r0, [r4, #-16]!

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1b9e:	4d11      	ldr	r5, [pc, #68]	; (1be4 <am_hal_flash_info_erase_disable+0xc0>)
    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1ba0:	480d      	ldr	r0, [pc, #52]	; (1bd8 <am_hal_flash_info_erase_disable+0xb4>)

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1ba2:	4f0b      	ldr	r7, [pc, #44]	; (1bd0 <am_hal_flash_info_erase_disable+0xac>)
    }

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    1ba4:	9205      	str	r2, [sp, #20]
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1ba6:	2104      	movs	r1, #4
    1ba8:	2300      	movs	r3, #0
    1baa:	68ee      	ldr	r6, [r5, #12]
    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1bac:	9003      	str	r0, [sp, #12]
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1bae:	9100      	str	r1, [sp, #0]
    1bb0:	4622      	mov	r2, r4

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1bb2:	9704      	str	r7, [sp, #16]
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1bb4:	4619      	mov	r1, r3
    1bb6:	480d      	ldr	r0, [pc, #52]	; (1bec <am_hal_flash_info_erase_disable+0xc8>)
    1bb8:	47b0      	blx	r6
                                            0,         // instance
                                            ui32Valid, // source data
                                            0,         // offset
                                            4);        // number of words
    return iRC | ((iRC) ? (1 << 16) : 0);
    1bba:	2800      	cmp	r0, #0
    1bbc:	d0d0      	beq.n	1b60 <am_hal_flash_info_erase_disable+0x3c>
    1bbe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    1bc2:	e7ba      	b.n	1b3a <am_hal_flash_info_erase_disable+0x16>
    1bc4:	5002000c 	.word	0x5002000c
    1bc8:	e41a9d74 	.word	0xe41a9d74
    1bcc:	50020008 	.word	0x50020008
    1bd0:	0a6b8458 	.word	0x0a6b8458
    1bd4:	50020004 	.word	0x50020004
    1bd8:	c9705737 	.word	0xc9705737
    1bdc:	50020000 	.word	0x50020000
    1be0:	48eaad88 	.word	0x48eaad88
    1be4:	10001004 	.word	0x10001004
    1be8:	50020010 	.word	0x50020010
    1bec:	12344321 	.word	0x12344321

00001bf0 <am_hal_flash_info_erase_disable_check>:
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1bf0:	4b0f      	ldr	r3, [pc, #60]	; (1c30 <am_hal_flash_info_erase_disable_check+0x40>)
    1bf2:	6818      	ldr	r0, [r3, #0]
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1bf4:	1c42      	adds	r2, r0, #1
    1bf6:	d002      	beq.n	1bfe <am_hal_flash_info_erase_disable_check+0xe>
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1bf8:	4a0e      	ldr	r2, [pc, #56]	; (1c34 <am_hal_flash_info_erase_disable_check+0x44>)
    1bfa:	4290      	cmp	r0, r2
    1bfc:	d001      	beq.n	1c02 <am_hal_flash_info_erase_disable_check+0x12>
    //
    // If they are not valid at this point then SRAM wipe can't be enabled.
    //
    if ( !am_hal_flash_customer_info_signature_check() )
    {
        return false;
    1bfe:	2000      	movs	r0, #0
    1c00:	4770      	bx	lr
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1c02:	490d      	ldr	r1, [pc, #52]	; (1c38 <am_hal_flash_info_erase_disable_check+0x48>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1c04:	4b0d      	ldr	r3, [pc, #52]	; (1c3c <am_hal_flash_info_erase_disable_check+0x4c>)
    1c06:	6808      	ldr	r0, [r1, #0]
    1c08:	4298      	cmp	r0, r3
    1c0a:	d1f8      	bne.n	1bfe <am_hal_flash_info_erase_disable_check+0xe>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c0c:	4a0c      	ldr	r2, [pc, #48]	; (1c40 <am_hal_flash_info_erase_disable_check+0x50>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1c0e:	490d      	ldr	r1, [pc, #52]	; (1c44 <am_hal_flash_info_erase_disable_check+0x54>)
    1c10:	6813      	ldr	r3, [r2, #0]
    1c12:	428b      	cmp	r3, r1
    1c14:	d1f3      	bne.n	1bfe <am_hal_flash_info_erase_disable_check+0xe>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1c16:	480c      	ldr	r0, [pc, #48]	; (1c48 <am_hal_flash_info_erase_disable_check+0x58>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c18:	490c      	ldr	r1, [pc, #48]	; (1c4c <am_hal_flash_info_erase_disable_check+0x5c>)
    1c1a:	6802      	ldr	r2, [r0, #0]
    1c1c:	428a      	cmp	r2, r1
    1c1e:	d1ee      	bne.n	1bfe <am_hal_flash_info_erase_disable_check+0xe>
    }

    //
    // Looking good so far, now check the SRAM WIPE bit.
    //
    return AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR)   &
    1c20:	4b0b      	ldr	r3, [pc, #44]	; (1c50 <am_hal_flash_info_erase_disable_check+0x60>)
    1c22:	6818      	ldr	r0, [r3, #0]
    1c24:	f480 7180 	eor.w	r1, r0, #256	; 0x100
    1c28:	f3c1 2000 	ubfx	r0, r1, #8, #1
                     AM_HAL_FLASH_INFO_SECURITY_ENINFOERASE_M  ? false : true;
}
    1c2c:	4770      	bx	lr
    1c2e:	bf00      	nop
    1c30:	5002000c 	.word	0x5002000c
    1c34:	e41a9d74 	.word	0xe41a9d74
    1c38:	50020008 	.word	0x50020008
    1c3c:	0a6b8458 	.word	0x0a6b8458
    1c40:	50020004 	.word	0x50020004
    1c44:	c9705737 	.word	0xc9705737
    1c48:	50020000 	.word	0x50020000
    1c4c:	48eaad88 	.word	0x48eaad88
    1c50:	50020010 	.word	0x50020010

00001c54 <am_hal_flash_info_program_disable>:
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_info_program_disable(uint32_t ui32Mask)
{
    1c54:	b5f0      	push	{r4, r5, r6, r7, lr}
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1c56:	4b29      	ldr	r3, [pc, #164]	; (1cfc <am_hal_flash_info_program_disable+0xa8>)
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c58:	4a29      	ldr	r2, [pc, #164]	; (1d00 <am_hal_flash_info_program_disable+0xac>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1c5a:	6819      	ldr	r1, [r3, #0]
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c5c:	4291      	cmp	r1, r2
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_info_program_disable(uint32_t ui32Mask)
{
    1c5e:	b087      	sub	sp, #28
    1c60:	4604      	mov	r4, r0
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c62:	d005      	beq.n	1c70 <am_hal_flash_info_program_disable+0x1c>
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1c64:	1c4b      	adds	r3, r1, #1
    1c66:	d026      	beq.n	1cb6 <am_hal_flash_info_program_disable+0x62>
    1c68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1c6c:	b007      	add	sp, #28
    1c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1c70:	4a24      	ldr	r2, [pc, #144]	; (1d04 <am_hal_flash_info_program_disable+0xb0>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1c72:	4b25      	ldr	r3, [pc, #148]	; (1d08 <am_hal_flash_info_program_disable+0xb4>)
    1c74:	6815      	ldr	r5, [r2, #0]
    1c76:	429d      	cmp	r5, r3
    1c78:	d1f6      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c7a:	4e24      	ldr	r6, [pc, #144]	; (1d0c <am_hal_flash_info_program_disable+0xb8>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1c7c:	4824      	ldr	r0, [pc, #144]	; (1d10 <am_hal_flash_info_program_disable+0xbc>)
    1c7e:	6831      	ldr	r1, [r6, #0]
    1c80:	4281      	cmp	r1, r0
    1c82:	d1f1      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1c84:	4f23      	ldr	r7, [pc, #140]	; (1d14 <am_hal_flash_info_program_disable+0xc0>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1c86:	4b24      	ldr	r3, [pc, #144]	; (1d18 <am_hal_flash_info_program_disable+0xc4>)
    1c88:	683a      	ldr	r2, [r7, #0]
    1c8a:	429a      	cmp	r2, r3
    1c8c:	d1ec      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
    1c8e:	4e23      	ldr	r6, [pc, #140]	; (1d1c <am_hal_flash_info_program_disable+0xc8>)
    1c90:	ad02      	add	r5, sp, #8
    ui32Mask &= AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M;

    //
    // The security bit set to 1 enables programming, 0 disables programming.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) & ~ui32Mask;
    1c92:	4823      	ldr	r0, [pc, #140]	; (1d20 <am_hal_flash_info_program_disable+0xcc>)

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1c94:	68f6      	ldr	r6, [r6, #12]
    ui32Mask &= AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M;

    //
    // The security bit set to 1 enables programming, 0 disables programming.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) & ~ui32Mask;
    1c96:	6801      	ldr	r1, [r0, #0]

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1c98:	4822      	ldr	r0, [pc, #136]	; (1d24 <am_hal_flash_info_program_disable+0xd0>)
    }

    //
    // Make sure we have a valid mask and get the mask into the correct position.
    //
    ui32Mask <<= AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_S;
    1c9a:	0124      	lsls	r4, r4, #4
    ui32Mask &= AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M;

    //
    // The security bit set to 1 enables programming, 0 disables programming.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) & ~ui32Mask;
    1c9c:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
    1ca0:	ea21 0107 	bic.w	r1, r1, r7

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1ca4:	2301      	movs	r3, #1
    ui32Mask &= AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M;

    //
    // The security bit set to 1 enables programming, 0 disables programming.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) & ~ui32Mask;
    1ca6:	9102      	str	r1, [sp, #8]

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1ca8:	9300      	str	r3, [sp, #0]
    1caa:	462a      	mov	r2, r5
    1cac:	2304      	movs	r3, #4
    1cae:	2100      	movs	r1, #0
    1cb0:	47b0      	blx	r6
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1cb2:	b007      	add	sp, #28
    1cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1cb6:	4813      	ldr	r0, [pc, #76]	; (1d04 <am_hal_flash_info_program_disable+0xb0>)
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1cb8:	6805      	ldr	r5, [r0, #0]
    1cba:	1c6b      	adds	r3, r5, #1
    1cbc:	d1d4      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
    1cbe:	4e13      	ldr	r6, [pc, #76]	; (1d0c <am_hal_flash_info_program_disable+0xb8>)
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1cc0:	6837      	ldr	r7, [r6, #0]
    1cc2:	1c7b      	adds	r3, r7, #1
    1cc4:	d1d0      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1cc6:	4b13      	ldr	r3, [pc, #76]	; (1d14 <am_hal_flash_info_program_disable+0xc0>)
    1cc8:	6819      	ldr	r1, [r3, #0]
    1cca:	1c4b      	adds	r3, r1, #1
    1ccc:	d1cc      	bne.n	1c68 <am_hal_flash_info_program_disable+0x14>
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;
    1cce:	ad06      	add	r5, sp, #24
    1cd0:	4811      	ldr	r0, [pc, #68]	; (1d18 <am_hal_flash_info_program_disable+0xc4>)
    1cd2:	f845 0d10 	str.w	r0, [r5, #-16]!

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1cd6:	2104      	movs	r1, #4
    1cd8:	4e10      	ldr	r6, [pc, #64]	; (1d1c <am_hal_flash_info_program_disable+0xc8>)

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1cda:	4f0b      	ldr	r7, [pc, #44]	; (1d08 <am_hal_flash_info_program_disable+0xb4>)
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1cdc:	480c      	ldr	r0, [pc, #48]	; (1d10 <am_hal_flash_info_program_disable+0xbc>)
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1cde:	9100      	str	r1, [sp, #0]
    1ce0:	2300      	movs	r3, #0
    }

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    1ce2:	9205      	str	r2, [sp, #20]
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1ce4:	9704      	str	r7, [sp, #16]
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1ce6:	9003      	str	r0, [sp, #12]
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1ce8:	462a      	mov	r2, r5
    1cea:	4619      	mov	r1, r3
    1cec:	480d      	ldr	r0, [pc, #52]	; (1d24 <am_hal_flash_info_program_disable+0xd0>)
    1cee:	68f7      	ldr	r7, [r6, #12]
    1cf0:	47b8      	blx	r7
                                            0,         // instance
                                            ui32Valid, // source data
                                            0,         // offset
                                            4);        // number of words
    return iRC | ((iRC) ? (1 << 16) : 0);
    1cf2:	2800      	cmp	r0, #0
    1cf4:	d0cd      	beq.n	1c92 <am_hal_flash_info_program_disable+0x3e>
    1cf6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    1cfa:	e7b7      	b.n	1c6c <am_hal_flash_info_program_disable+0x18>
    1cfc:	5002000c 	.word	0x5002000c
    1d00:	e41a9d74 	.word	0xe41a9d74
    1d04:	50020008 	.word	0x50020008
    1d08:	0a6b8458 	.word	0x0a6b8458
    1d0c:	50020004 	.word	0x50020004
    1d10:	c9705737 	.word	0xc9705737
    1d14:	50020000 	.word	0x50020000
    1d18:	48eaad88 	.word	0x48eaad88
    1d1c:	10001004 	.word	0x10001004
    1d20:	50020010 	.word	0x50020010
    1d24:	12344321 	.word	0x12344321

00001d28 <am_hal_flash_info_program_disable_get>:
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1d28:	4b0f      	ldr	r3, [pc, #60]	; (1d68 <am_hal_flash_info_program_disable_get+0x40>)
    1d2a:	6818      	ldr	r0, [r3, #0]
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1d2c:	1c43      	adds	r3, r0, #1
    1d2e:	d005      	beq.n	1d3c <am_hal_flash_info_program_disable_get+0x14>
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d30:	490e      	ldr	r1, [pc, #56]	; (1d6c <am_hal_flash_info_program_disable_get+0x44>)
    1d32:	4288      	cmp	r0, r1
    1d34:	d003      	beq.n	1d3e <am_hal_flash_info_program_disable_get+0x16>
    //
    // If not valid at this point, then INFO programming can't be enabled.
    //
    if ( !am_hal_flash_customer_info_signature_check() )
    {
        return 0xFFFFFFFF;
    1d36:	f04f 30ff 	mov.w	r0, #4294967295
    1d3a:	4770      	bx	lr
    1d3c:	4770      	bx	lr
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1d3e:	4a0c      	ldr	r2, [pc, #48]	; (1d70 <am_hal_flash_info_program_disable_get+0x48>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1d40:	480c      	ldr	r0, [pc, #48]	; (1d74 <am_hal_flash_info_program_disable_get+0x4c>)
    1d42:	6813      	ldr	r3, [r2, #0]
    1d44:	4283      	cmp	r3, r0
    1d46:	d1f6      	bne.n	1d36 <am_hal_flash_info_program_disable_get+0xe>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d48:	490b      	ldr	r1, [pc, #44]	; (1d78 <am_hal_flash_info_program_disable_get+0x50>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1d4a:	480c      	ldr	r0, [pc, #48]	; (1d7c <am_hal_flash_info_program_disable_get+0x54>)
    1d4c:	680a      	ldr	r2, [r1, #0]
    1d4e:	4282      	cmp	r2, r0
    1d50:	d1f1      	bne.n	1d36 <am_hal_flash_info_program_disable_get+0xe>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1d52:	490b      	ldr	r1, [pc, #44]	; (1d80 <am_hal_flash_info_program_disable_get+0x58>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d54:	4b0b      	ldr	r3, [pc, #44]	; (1d84 <am_hal_flash_info_program_disable_get+0x5c>)
    1d56:	6808      	ldr	r0, [r1, #0]
    1d58:	4298      	cmp	r0, r3
    1d5a:	d1ec      	bne.n	1d36 <am_hal_flash_info_program_disable_get+0xe>
    }

    //
    // Looking good so far, now return a mask of the disabled bits.
    //
    return  ((AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1d5c:	4a0a      	ldr	r2, [pc, #40]	; (1d88 <am_hal_flash_info_program_disable_get+0x60>)
    1d5e:	6811      	ldr	r1, [r2, #0]
    1d60:	43cb      	mvns	r3, r1
    1d62:	f3c3 1003 	ubfx	r0, r3, #4, #4
                AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M) ^
                AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_M) >>
                AM_HAL_FLASH_INFO_SECURITY_ENINFOPRGM_S;
}
    1d66:	4770      	bx	lr
    1d68:	5002000c 	.word	0x5002000c
    1d6c:	e41a9d74 	.word	0xe41a9d74
    1d70:	50020008 	.word	0x50020008
    1d74:	0a6b8458 	.word	0x0a6b8458
    1d78:	50020004 	.word	0x50020004
    1d7c:	c9705737 	.word	0xc9705737
    1d80:	50020000 	.word	0x50020000
    1d84:	48eaad88 	.word	0x48eaad88
    1d88:	50020010 	.word	0x50020010

00001d8c <am_hal_flash_wipe_flash_enable>:
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_wipe_flash_enable(void)
{
    1d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1d8e:	4b27      	ldr	r3, [pc, #156]	; (1e2c <am_hal_flash_wipe_flash_enable+0xa0>)
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d90:	4a27      	ldr	r2, [pc, #156]	; (1e30 <am_hal_flash_wipe_flash_enable+0xa4>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1d92:	6818      	ldr	r0, [r3, #0]
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d94:	4290      	cmp	r0, r2
//! @return Zero for success. Non-Zero for errors.
//
//*****************************************************************************
int32_t
am_hal_flash_wipe_flash_enable(void)
{
    1d96:	b087      	sub	sp, #28
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1d98:	d005      	beq.n	1da6 <am_hal_flash_wipe_flash_enable+0x1a>
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1d9a:	1c43      	adds	r3, r0, #1
    1d9c:	d023      	beq.n	1de6 <am_hal_flash_wipe_flash_enable+0x5a>
    1d9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1da2:	b007      	add	sp, #28
    1da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1da6:	4a23      	ldr	r2, [pc, #140]	; (1e34 <am_hal_flash_wipe_flash_enable+0xa8>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1da8:	4b23      	ldr	r3, [pc, #140]	; (1e38 <am_hal_flash_wipe_flash_enable+0xac>)
    1daa:	6814      	ldr	r4, [r2, #0]
    1dac:	429c      	cmp	r4, r3
    1dae:	d1f6      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1db0:	4d22      	ldr	r5, [pc, #136]	; (1e3c <am_hal_flash_wipe_flash_enable+0xb0>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1db2:	4f23      	ldr	r7, [pc, #140]	; (1e40 <am_hal_flash_wipe_flash_enable+0xb4>)
    1db4:	6828      	ldr	r0, [r5, #0]
    1db6:	42b8      	cmp	r0, r7
    1db8:	d1f1      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1dba:	4922      	ldr	r1, [pc, #136]	; (1e44 <am_hal_flash_wipe_flash_enable+0xb8>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1dbc:	4e22      	ldr	r6, [pc, #136]	; (1e48 <am_hal_flash_wipe_flash_enable+0xbc>)
    1dbe:	680a      	ldr	r2, [r1, #0]
    1dc0:	42b2      	cmp	r2, r6
    1dc2:	d1ec      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
    1dc4:	4d21      	ldr	r5, [pc, #132]	; (1e4c <am_hal_flash_wipe_flash_enable+0xc0>)
    1dc6:	ac02      	add	r4, sp, #8
    }

    //
    // Clear the FLASH Wipe bit.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1dc8:	4b21      	ldr	r3, [pc, #132]	; (1e50 <am_hal_flash_wipe_flash_enable+0xc4>)
                        ~AM_HAL_FLASH_INFO_SECURITY_FLASHWIPE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1dca:	68ed      	ldr	r5, [r5, #12]
    }

    //
    // Clear the FLASH Wipe bit.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1dcc:	681f      	ldr	r7, [r3, #0]
                        ~AM_HAL_FLASH_INFO_SECURITY_FLASHWIPE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1dce:	4821      	ldr	r0, [pc, #132]	; (1e54 <am_hal_flash_wipe_flash_enable+0xc8>)
    }

    //
    // Clear the FLASH Wipe bit.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1dd0:	f027 0608 	bic.w	r6, r7, #8
                        ~AM_HAL_FLASH_INFO_SECURITY_FLASHWIPE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1dd4:	2101      	movs	r1, #1
    1dd6:	9100      	str	r1, [sp, #0]
    1dd8:	4622      	mov	r2, r4
    }

    //
    // Clear the FLASH Wipe bit.
    //
    ui32SecurityValue = AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1dda:	9602      	str	r6, [sp, #8]
                        ~AM_HAL_FLASH_INFO_SECURITY_FLASHWIPE_M;

    //
    // Now write the word to the flash INFO space.
    //
    return g_am_hal_flash.flash_program_info(
    1ddc:	2304      	movs	r3, #4
    1dde:	2100      	movs	r1, #0
    1de0:	47a8      	blx	r5
            AM_HAL_FLASH_PROGRAM_KEY,
            0,                                  // instance
            &ui32SecurityValue,                 // source data
            AM_HAL_FLASH_INFO_SECURITY_O / 4,   // word offset
            1 );                                // number of words
}
    1de2:	b007      	add	sp, #28
    1de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1de6:	4913      	ldr	r1, [pc, #76]	; (1e34 <am_hal_flash_wipe_flash_enable+0xa8>)
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1de8:	680c      	ldr	r4, [r1, #0]
    1dea:	1c63      	adds	r3, r4, #1
    1dec:	d1d7      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
    1dee:	4d13      	ldr	r5, [pc, #76]	; (1e3c <am_hal_flash_wipe_flash_enable+0xb0>)
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
             (pui32Signature[2] == 0xFFFFFFFF)  &&
    1df0:	682e      	ldr	r6, [r5, #0]
    1df2:	1c73      	adds	r3, r6, #1
    1df4:	d1d3      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1df6:	4f13      	ldr	r7, [pc, #76]	; (1e44 <am_hal_flash_wipe_flash_enable+0xb8>)
    1df8:	683b      	ldr	r3, [r7, #0]
    1dfa:	3301      	adds	r3, #1
    1dfc:	d1cf      	bne.n	1d9e <am_hal_flash_wipe_flash_enable+0x12>
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;
    1dfe:	ac06      	add	r4, sp, #24
    1e00:	4811      	ldr	r0, [pc, #68]	; (1e48 <am_hal_flash_wipe_flash_enable+0xbc>)
    1e02:	f844 0d10 	str.w	r0, [r4, #-16]!

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1e06:	4d11      	ldr	r5, [pc, #68]	; (1e4c <am_hal_flash_wipe_flash_enable+0xc0>)
    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1e08:	480d      	ldr	r0, [pc, #52]	; (1e40 <am_hal_flash_wipe_flash_enable+0xb4>)

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1e0a:	4f0b      	ldr	r7, [pc, #44]	; (1e38 <am_hal_flash_wipe_flash_enable+0xac>)
    }

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    1e0c:	9205      	str	r2, [sp, #20]
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1e0e:	2104      	movs	r1, #4
    1e10:	2300      	movs	r3, #0
    1e12:	68ee      	ldr	r6, [r5, #12]
    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    1e14:	9003      	str	r0, [sp, #12]
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1e16:	9100      	str	r1, [sp, #0]
    1e18:	4622      	mov	r2, r4

    //
    // OK they need to be set so do it.
    //
    ui32Valid[3] = AM_HAL_FLASH_INFO_SIGNATURE3;
    ui32Valid[2] = AM_HAL_FLASH_INFO_SIGNATURE2;
    1e1a:	9704      	str	r7, [sp, #16]
    ui32Valid[1] = AM_HAL_FLASH_INFO_SIGNATURE1;
    ui32Valid[0] = AM_HAL_FLASH_INFO_SIGNATURE0;

    iRC = g_am_hal_flash.flash_program_info(AM_HAL_FLASH_PROGRAM_KEY,
    1e1c:	4619      	mov	r1, r3
    1e1e:	480d      	ldr	r0, [pc, #52]	; (1e54 <am_hal_flash_wipe_flash_enable+0xc8>)
    1e20:	47b0      	blx	r6
                                            0,         // instance
                                            ui32Valid, // source data
                                            0,         // offset
                                            4);        // number of words
    return iRC | ((iRC) ? (1 << 16) : 0);
    1e22:	2800      	cmp	r0, #0
    1e24:	d0d0      	beq.n	1dc8 <am_hal_flash_wipe_flash_enable+0x3c>
    1e26:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    1e2a:	e7ba      	b.n	1da2 <am_hal_flash_wipe_flash_enable+0x16>
    1e2c:	5002000c 	.word	0x5002000c
    1e30:	e41a9d74 	.word	0xe41a9d74
    1e34:	50020008 	.word	0x50020008
    1e38:	0a6b8458 	.word	0x0a6b8458
    1e3c:	50020004 	.word	0x50020004
    1e40:	c9705737 	.word	0xc9705737
    1e44:	50020000 	.word	0x50020000
    1e48:	48eaad88 	.word	0x48eaad88
    1e4c:	10001004 	.word	0x10001004
    1e50:	50020010 	.word	0x50020010
    1e54:	12344321 	.word	0x12344321

00001e58 <am_hal_flash_wipe_flash_enable_check>:
static bool
customer_info_signature_erased(void)
{
    uint32_t *pui32Signature = (uint32_t *) AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == 0xFFFFFFFF)  &&
    1e58:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <am_hal_flash_wipe_flash_enable_check+0x40>)
    1e5a:	6818      	ldr	r0, [r3, #0]
             (pui32Signature[2] == 0xFFFFFFFF)  &&
             (pui32Signature[1] == 0xFFFFFFFF)  &&
             (pui32Signature[0] == 0xFFFFFFFF) ) ? true : false;
    1e5c:	1c42      	adds	r2, r0, #1
    1e5e:	d002      	beq.n	1e66 <am_hal_flash_wipe_flash_enable_check+0xe>
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1e60:	4a0e      	ldr	r2, [pc, #56]	; (1e9c <am_hal_flash_wipe_flash_enable_check+0x44>)
    1e62:	4290      	cmp	r0, r2
    1e64:	d001      	beq.n	1e6a <am_hal_flash_wipe_flash_enable_check+0x12>
    //
    // If they are not valid at this point then flash wipe can't be enabled.
    //
    if ( !am_hal_flash_customer_info_signature_check() )
    {
        return false;
    1e66:	2000      	movs	r0, #0
    1e68:	4770      	bx	lr
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1e6a:	490d      	ldr	r1, [pc, #52]	; (1ea0 <am_hal_flash_wipe_flash_enable_check+0x48>)
bool
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
    1e6c:	4b0d      	ldr	r3, [pc, #52]	; (1ea4 <am_hal_flash_wipe_flash_enable_check+0x4c>)
    1e6e:	6808      	ldr	r0, [r1, #0]
    1e70:	4298      	cmp	r0, r3
    1e72:	d1f8      	bne.n	1e66 <am_hal_flash_wipe_flash_enable_check+0xe>
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1e74:	4a0c      	ldr	r2, [pc, #48]	; (1ea8 <am_hal_flash_wipe_flash_enable_check+0x50>)
am_hal_flash_customer_info_signature_check(void)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
    1e76:	490d      	ldr	r1, [pc, #52]	; (1eac <am_hal_flash_wipe_flash_enable_check+0x54>)
    1e78:	6813      	ldr	r3, [r2, #0]
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d1f3      	bne.n	1e66 <am_hal_flash_wipe_flash_enable_check+0xe>
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
             (pui32Signature[0] == AM_HAL_FLASH_INFO_SIGNATURE0) );
    1e7e:	480c      	ldr	r0, [pc, #48]	; (1eb0 <am_hal_flash_wipe_flash_enable_check+0x58>)
{
    uint32_t *pui32Signature = (uint32_t *)AM_HAL_FLASH_INFO_ADDR;

    return ( (pui32Signature[3] == AM_HAL_FLASH_INFO_SIGNATURE3)    &&
             (pui32Signature[2] == AM_HAL_FLASH_INFO_SIGNATURE2)    &&
             (pui32Signature[1] == AM_HAL_FLASH_INFO_SIGNATURE1)    &&
    1e80:	490c      	ldr	r1, [pc, #48]	; (1eb4 <am_hal_flash_wipe_flash_enable_check+0x5c>)
    1e82:	6802      	ldr	r2, [r0, #0]
    1e84:	428a      	cmp	r2, r1
    1e86:	d1ee      	bne.n	1e66 <am_hal_flash_wipe_flash_enable_check+0xe>
    }

    //
    // Looking good so far, now check the Flash WIPE bit.
    //
    return AM_REGVAL(AM_HAL_FLASH_INFO_SECURITY_ADDR) &
    1e88:	4b0b      	ldr	r3, [pc, #44]	; (1eb8 <am_hal_flash_wipe_flash_enable_check+0x60>)
    1e8a:	6818      	ldr	r0, [r3, #0]
    1e8c:	f080 0108 	eor.w	r1, r0, #8
    1e90:	f3c1 00c0 	ubfx	r0, r1, #3, #1
            AM_HAL_FLASH_INFO_SECURITY_FLASHWIPE_M ? false : true;
}
    1e94:	4770      	bx	lr
    1e96:	bf00      	nop
    1e98:	5002000c 	.word	0x5002000c
    1e9c:	e41a9d74 	.word	0xe41a9d74
    1ea0:	50020008 	.word	0x50020008
    1ea4:	0a6b8458 	.word	0x0a6b8458
    1ea8:	50020004 	.word	0x50020004
    1eac:	c9705737 	.word	0xc9705737
    1eb0:	50020000 	.word	0x50020000
    1eb4:	48eaad88 	.word	0x48eaad88
    1eb8:	50020010 	.word	0x50020010

00001ebc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1ebc:	4b0d      	ldr	r3, [pc, #52]	; (1ef4 <am_hal_itm_enable+0x38>)
    1ebe:	6818      	ldr	r0, [r3, #0]
    1ec0:	07c2      	lsls	r2, r0, #31
    1ec2:	d416      	bmi.n	1ef2 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1ec4:	4a0c      	ldr	r2, [pc, #48]	; (1ef8 <am_hal_itm_enable+0x3c>)
    1ec6:	6811      	ldr	r1, [r2, #0]
    1ec8:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1ecc:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1ece:	6810      	ldr	r0, [r2, #0]
    1ed0:	01c3      	lsls	r3, r0, #7
    1ed2:	d5fc      	bpl.n	1ece <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1ed4:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1ed6:	4809      	ldr	r0, [pc, #36]	; (1efc <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1ed8:	4c09      	ldr	r4, [pc, #36]	; (1f00 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1eda:	4d0a      	ldr	r5, [pc, #40]	; (1f04 <am_hal_itm_enable+0x48>)
    1edc:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1ede:	250f      	movs	r5, #15
    1ee0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1ee2:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1ee4:	4908      	ldr	r1, [pc, #32]	; (1f08 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1ee6:	4b09      	ldr	r3, [pc, #36]	; (1f0c <am_hal_itm_enable+0x50>)
    1ee8:	4a09      	ldr	r2, [pc, #36]	; (1f10 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1eea:	f04f 30ff 	mov.w	r0, #4294967295
    1eee:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1ef0:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1ef2:	4770      	bx	lr
    1ef4:	10001158 	.word	0x10001158
    1ef8:	e000edfc 	.word	0xe000edfc
    1efc:	e0000fb0 	.word	0xe0000fb0
    1f00:	e0000e40 	.word	0xe0000e40
    1f04:	c5acce55 	.word	0xc5acce55
    1f08:	e0000e00 	.word	0xe0000e00
    1f0c:	e0000e80 	.word	0xe0000e80
    1f10:	00150511 	.word	0x00150511

00001f14 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1f14:	4a03      	ldr	r2, [pc, #12]	; (1f24 <am_hal_itm_not_busy+0x10>)
    1f16:	6813      	ldr	r3, [r2, #0]
    1f18:	021b      	lsls	r3, r3, #8
    1f1a:	d4fc      	bmi.n	1f16 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1f1c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1f20:	f7ff bdfa 	b.w	1b18 <am_hal_flash_delay>
    1f24:	e0000e80 	.word	0xe0000e80

00001f28 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1f28:	7803      	ldrb	r3, [r0, #0]
    1f2a:	b1ab      	cbz	r3, 1f58 <am_hal_itm_print+0x30>
    1f2c:	4602      	mov	r2, r0
    1f2e:	2300      	movs	r3, #0
    1f30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1f34:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1f36:	2900      	cmp	r1, #0
    1f38:	d1fa      	bne.n	1f30 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1f3a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1f3e:	b430      	push	{r4, r5}
    1f40:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1f42:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1f44:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1f48:	f8dc 3000 	ldr.w	r3, [ip]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d0fb      	beq.n	1f48 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1f50:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1f52:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1f54:	d1f6      	bne.n	1f44 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1f56:	bc30      	pop	{r4, r5}
    1f58:	4770      	bx	lr
    1f5a:	bf00      	nop

00001f5c <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1f5c:	4b2f      	ldr	r3, [pc, #188]	; (201c <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1f5e:	4930      	ldr	r1, [pc, #192]	; (2020 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    1f60:	4a30      	ldr	r2, [pc, #192]	; (2024 <am_hal_mcuctrl_device_info_get+0xc8>)
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    1f62:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1f64:	681f      	ldr	r7, [r3, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1f66:	4d30      	ldr	r5, [pc, #192]	; (2028 <am_hal_mcuctrl_device_info_get+0xcc>)
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1f68:	6007      	str	r7, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1f6a:	682f      	ldr	r7, [r5, #0]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1f6c:	4c2f      	ldr	r4, [pc, #188]	; (202c <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1f6e:	6047      	str	r7, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1f70:	6827      	ldr	r7, [r4, #0]
    1f72:	6087      	str	r7, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1f74:	680f      	ldr	r7, [r1, #0]
    1f76:	60c7      	str	r7, [r0, #12]

    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1f7c:	682d      	ldr	r5, [r5, #0]
    1f7e:	6045      	str	r5, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1f80:	6824      	ldr	r4, [r4, #0]
    1f82:	6084      	str	r4, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1f84:	6809      	ldr	r1, [r1, #0]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1f86:	4e2a      	ldr	r6, [pc, #168]	; (2030 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1f88:	60c1      	str	r1, [r0, #12]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    1f8a:	f3c3 5703 	ubfx	r7, r3, #20, #4

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_flash_size[
    1f8e:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1f92:	6836      	ldr	r6, [r6, #0]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    1f94:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1f98:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1f9c:	4a25      	ldr	r2, [pc, #148]	; (2034 <am_hal_mcuctrl_device_info_get+0xd8>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1f9e:	6106      	str	r6, [r0, #16]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified =
    1fa0:	f003 0301 	and.w	r3, r3, #1
    1fa4:	6143      	str	r3, [r0, #20]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    1fa6:	6185      	str	r5, [r0, #24]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1fa8:	61c4      	str	r4, [r0, #28]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1faa:	6814      	ldr	r4, [r2, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1fac:	4e22      	ldr	r6, [pc, #136]	; (2038 <am_hal_mcuctrl_device_info_get+0xdc>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1fae:	4f23      	ldr	r7, [pc, #140]	; (203c <am_hal_mcuctrl_device_info_get+0xe0>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1fb0:	4923      	ldr	r1, [pc, #140]	; (2040 <am_hal_mcuctrl_device_info_get+0xe4>)
    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1fb2:	4d24      	ldr	r5, [pc, #144]	; (2044 <am_hal_mcuctrl_device_info_get+0xe8>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1fb4:	b2e3      	uxtb	r3, r4
    1fb6:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1fb8:	6834      	ldr	r4, [r6, #0]
    1fba:	0224      	lsls	r4, r4, #8
    1fbc:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    1fc0:	4323      	orrs	r3, r4
    1fc2:	6203      	str	r3, [r0, #32]

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    1fc4:	6833      	ldr	r3, [r6, #0]
    1fc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1fca:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1fcc:	683c      	ldr	r4, [r7, #0]
    1fce:	0124      	lsls	r4, r4, #4
    1fd0:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
    1fd4:	4323      	orrs	r3, r4
    1fd6:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1fd8:	683f      	ldr	r7, [r7, #0]
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    1fda:	4c1b      	ldr	r4, [pc, #108]	; (2048 <am_hal_mcuctrl_device_info_get+0xec>)
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1fdc:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
    1fe0:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1fe2:	6809      	ldr	r1, [r1, #0]
    1fe4:	f3c1 1703 	ubfx	r7, r1, #4, #4
    1fe8:	433b      	orrs	r3, r7

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1fea:	321c      	adds	r2, #28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1fec:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1fee:	6812      	ldr	r2, [r2, #0]
    1ff0:	0611      	lsls	r1, r2, #24
    1ff2:	62c1      	str	r1, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1ff4:	682d      	ldr	r5, [r5, #0]
    1ff6:	042b      	lsls	r3, r5, #16
    1ff8:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    1ffc:	ea47 0201 	orr.w	r2, r7, r1
    2000:	62c2      	str	r2, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    2002:	6931      	ldr	r1, [r6, #16]
    2004:	020e      	lsls	r6, r1, #8
    2006:	f406 457f 	and.w	r5, r6, #65280	; 0xff00
    200a:	4315      	orrs	r5, r2
    200c:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    200e:	6824      	ldr	r4, [r4, #0]
    2010:	b2e3      	uxtb	r3, r4
    2012:	431d      	orrs	r5, r3
    2014:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    2016:	bcf0      	pop	{r4, r5, r6, r7}
    2018:	4770      	bx	lr
    201a:	bf00      	nop
    201c:	40020000 	.word	0x40020000
    2020:	4002000c 	.word	0x4002000c
    2024:	00002a98 	.word	0x00002a98
    2028:	40020004 	.word	0x40020004
    202c:	40020008 	.word	0x40020008
    2030:	40020010 	.word	0x40020010
    2034:	f0000fe0 	.word	0xf0000fe0
    2038:	f0000fe4 	.word	0xf0000fe4
    203c:	f0000fe8 	.word	0xf0000fe8
    2040:	f0000fec 	.word	0xf0000fec
    2044:	f0000ff8 	.word	0xf0000ff8
    2048:	f0000ff0 	.word	0xf0000ff0

0000204c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    204c:	4a0d      	ldr	r2, [pc, #52]	; (2084 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    204e:	4b0e      	ldr	r3, [pc, #56]	; (2088 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2050:	490e      	ldr	r1, [pc, #56]	; (208c <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    2052:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    2054:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    2056:	6814      	ldr	r4, [r2, #0]
    2058:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    205a:	6809      	ldr	r1, [r1, #0]
    205c:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    205e:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2060:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2062:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2064:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2066:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    2068:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    206c:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    206e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2070:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2074:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2078:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    207a:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    207c:	6142      	str	r2, [r0, #20]
}
    207e:	bc70      	pop	{r4, r5, r6}
    2080:	4770      	bx	lr
    2082:	bf00      	nop
    2084:	400201c4 	.word	0x400201c4
    2088:	400201cc 	.word	0x400201cc
    208c:	400201c0 	.word	0x400201c0

00002090 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2090:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    2094:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2096:	d03a      	beq.n	210e <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    2098:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    209c:	f000 809d 	beq.w	21da <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    20a0:	2801      	cmp	r0, #1
    20a2:	f000 809d 	beq.w	21e0 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    20a6:	2803      	cmp	r0, #3
    20a8:	f000 80a6 	beq.w	21f8 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    20ac:	2807      	cmp	r0, #7
    20ae:	f000 809c 	beq.w	21ea <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    20b2:	280f      	cmp	r0, #15
    20b4:	f000 80a5 	beq.w	2202 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    20b8:	281f      	cmp	r0, #31
    20ba:	f000 80b1 	beq.w	2220 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    20be:	283f      	cmp	r0, #63	; 0x3f
    20c0:	f000 80b5 	beq.w	222e <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    20c4:	287f      	cmp	r0, #127	; 0x7f
    20c6:	f000 80b9 	beq.w	223c <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    20ca:	28ff      	cmp	r0, #255	; 0xff
    20cc:	f000 80a0 	beq.w	2210 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    20d0:	f240 13ff 	movw	r3, #511	; 0x1ff
    20d4:	4298      	cmp	r0, r3
    20d6:	f000 80b8 	beq.w	224a <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    20da:	f240 31ff 	movw	r1, #1023	; 0x3ff
    20de:	4288      	cmp	r0, r1
    20e0:	f000 80b9 	beq.w	2256 <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    20e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
    20e8:	4290      	cmp	r0, r2
    20ea:	d00e      	beq.n	210a <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    20ec:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    20f0:	f000 80b7 	beq.w	2262 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    20f4:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    20f8:	42a0      	cmp	r0, r4
    20fa:	f000 80b5 	beq.w	2268 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    20fe:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    2102:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    2106:	4560      	cmp	r0, ip
    2108:	d132      	bne.n	2170 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    210a:	495c      	ldr	r1, [pc, #368]	; (227c <am_hal_pwrctrl_memory_enable+0x1ec>)
    210c:	e066      	b.n	21dc <am_hal_pwrctrl_memory_enable+0x14c>
    210e:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    2112:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    2114:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2116:	4c5a      	ldr	r4, [pc, #360]	; (2280 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2118:	6822      	ldr	r2, [r4, #0]
    211a:	402a      	ands	r2, r5
    211c:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    211e:	4d58      	ldr	r5, [pc, #352]	; (2280 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2120:	682c      	ldr	r4, [r5, #0]
    2122:	4320      	orrs	r0, r4
    2124:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    2126:	2b00      	cmp	r3, #0
    2128:	d029      	beq.n	217e <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    212a:	4a56      	ldr	r2, [pc, #344]	; (2284 <am_hal_pwrctrl_memory_enable+0x1f4>)
    212c:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    212e:	4203      	tst	r3, r0
    2130:	bf18      	it	ne
    2132:	20c6      	movne	r0, #198	; 0xc6
    2134:	d01f      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2136:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2138:	422b      	tst	r3, r5
    213a:	d01c      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    213c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    213e:	4223      	tst	r3, r4
    2140:	d019      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2142:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2144:	422b      	tst	r3, r5
    2146:	d016      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2148:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    214a:	4223      	tst	r3, r4
    214c:	d013      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    214e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2150:	422b      	tst	r3, r5
    2152:	d010      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2154:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2156:	4223      	tst	r3, r4
    2158:	d00d      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    215a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    215c:	422b      	tst	r3, r5
    215e:	d00a      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2160:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2162:	4223      	tst	r3, r4
    2164:	d007      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2166:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2168:	422b      	tst	r3, r5
    216a:	d004      	beq.n	2176 <am_hal_pwrctrl_memory_enable+0xe6>
    216c:	3809      	subs	r0, #9
    216e:	d1e2      	bne.n	2136 <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    2170:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    2172:	bc30      	pop	{r4, r5}
    2174:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    2176:	b911      	cbnz	r1, 217e <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    2178:	2001      	movs	r0, #1
}
    217a:	bc30      	pop	{r4, r5}
    217c:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    217e:	4b41      	ldr	r3, [pc, #260]	; (2284 <am_hal_pwrctrl_memory_enable+0x1f4>)
    2180:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2182:	ea31 0402 	bics.w	r4, r1, r2
    2186:	bf18      	it	ne
    2188:	24c6      	movne	r4, #198	; 0xc6
    218a:	d0f5      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    218c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    218e:	ea31 0000 	bics.w	r0, r1, r0
    2192:	d0f1      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2194:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2196:	ea31 0005 	bics.w	r0, r1, r5
    219a:	d0ed      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    219c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    219e:	ea31 0002 	bics.w	r0, r1, r2
    21a2:	d0e9      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21a4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21a6:	ea31 0000 	bics.w	r0, r1, r0
    21aa:	d0e5      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21ac:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21ae:	ea31 0005 	bics.w	r0, r1, r5
    21b2:	d0e1      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21b4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21b6:	ea31 0002 	bics.w	r0, r1, r2
    21ba:	d0dd      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21bc:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21be:	ea31 0000 	bics.w	r0, r1, r0
    21c2:	d0d9      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21c4:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21c6:	ea31 0005 	bics.w	r0, r1, r5
    21ca:	d0d5      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    21cc:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    21ce:	ea31 0002 	bics.w	r0, r1, r2
    21d2:	d0d1      	beq.n	2178 <am_hal_pwrctrl_memory_enable+0xe8>
    21d4:	3c09      	subs	r4, #9
    21d6:	d1d9      	bne.n	218c <am_hal_pwrctrl_memory_enable+0xfc>
    21d8:	e7ca      	b.n	2170 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    21da:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    21dc:	2300      	movs	r3, #0
    21de:	e79e      	b.n	211e <am_hal_pwrctrl_memory_enable+0x8e>
    21e0:	4d29      	ldr	r5, [pc, #164]	; (2288 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    21e2:	4b2a      	ldr	r3, [pc, #168]	; (228c <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    21e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    21e8:	e795      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    21ea:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    21ee:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    21f2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    21f6:	e78e      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    21f8:	4d25      	ldr	r5, [pc, #148]	; (2290 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    21fa:	4b26      	ldr	r3, [pc, #152]	; (2294 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    21fc:	f44f 7140 	mov.w	r1, #768	; 0x300
    2200:	e789      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    2202:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2206:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    220a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    220e:	e782      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    2210:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2214:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    2218:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    221c:	20ff      	movs	r0, #255	; 0xff
    221e:	e77a      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    2220:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2224:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    2228:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    222c:	e773      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    222e:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2232:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    2236:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    223a:	e76c      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    223c:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2240:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    2244:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    2248:	e765      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    224a:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    224e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    2252:	4911      	ldr	r1, [pc, #68]	; (2298 <am_hal_pwrctrl_memory_enable+0x208>)
    2254:	e75f      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    2256:	4911      	ldr	r1, [pc, #68]	; (229c <am_hal_pwrctrl_memory_enable+0x20c>)
    2258:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    225c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    2260:	e759      	b.n	2116 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2262:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2266:	e7b9      	b.n	21dc <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2268:	4805      	ldr	r0, [pc, #20]	; (2280 <am_hal_pwrctrl_memory_enable+0x1f0>)
    226a:	6803      	ldr	r3, [r0, #0]
    226c:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    2270:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2272:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    2276:	2100      	movs	r1, #0
    2278:	e757      	b.n	212a <am_hal_pwrctrl_memory_enable+0x9a>
    227a:	bf00      	nop
    227c:	0007ff00 	.word	0x0007ff00
    2280:	40021010 	.word	0x40021010
    2284:	40021014 	.word	0x40021014
    2288:	fffff801 	.word	0xfffff801
    228c:	0007fe00 	.word	0x0007fe00
    2290:	fffff803 	.word	0xfffff803
    2294:	0007fc00 	.word	0x0007fc00
    2298:	0001ff00 	.word	0x0001ff00
    229c:	0003ff00 	.word	0x0003ff00

000022a0 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    22a0:	4b0f      	ldr	r3, [pc, #60]	; (22e0 <am_hal_pwrctrl_bucks_init+0x40>)
    22a2:	681a      	ldr	r2, [r3, #0]
    22a4:	0792      	lsls	r2, r2, #30
    22a6:	d502      	bpl.n	22ae <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    22a8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    22aa:	07c3      	lsls	r3, r0, #31
    22ac:	d40e      	bmi.n	22cc <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    22ae:	4b0d      	ldr	r3, [pc, #52]	; (22e4 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    22b0:	4a0b      	ldr	r2, [pc, #44]	; (22e0 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    22b2:	6819      	ldr	r1, [r3, #0]
    22b4:	f041 0002 	orr.w	r0, r1, #2
    22b8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    22ba:	6819      	ldr	r1, [r3, #0]
    22bc:	f041 0001 	orr.w	r0, r1, #1
    22c0:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    22c2:	6813      	ldr	r3, [r2, #0]
    22c4:	f003 0103 	and.w	r1, r3, #3
    22c8:	2903      	cmp	r1, #3
    22ca:	d1fa      	bne.n	22c2 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    22cc:	4a04      	ldr	r2, [pc, #16]	; (22e0 <am_hal_pwrctrl_bucks_init+0x40>)
    22ce:	6810      	ldr	r0, [r2, #0]
    22d0:	f000 0303 	and.w	r3, r0, #3
    22d4:	2b03      	cmp	r3, #3
    22d6:	d1fa      	bne.n	22ce <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    22d8:	2042      	movs	r0, #66	; 0x42
    22da:	f7ff bc1d 	b.w	1b18 <am_hal_flash_delay>
    22de:	bf00      	nop
    22e0:	40021004 	.word	0x40021004
    22e4:	40021000 	.word	0x40021000

000022e8 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    22e8:	4905      	ldr	r1, [pc, #20]	; (2300 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    22ea:	4a06      	ldr	r2, [pc, #24]	; (2304 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    22ec:	680b      	ldr	r3, [r1, #0]
    22ee:	f043 0006 	orr.w	r0, r3, #6
    22f2:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    22f4:	6811      	ldr	r1, [r2, #0]
    22f6:	f021 0304 	bic.w	r3, r1, #4
    22fa:	6013      	str	r3, [r2, #0]
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	40021018 	.word	0x40021018
    2304:	40021000 	.word	0x40021000

00002308 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2308:	4a05      	ldr	r2, [pc, #20]	; (2320 <am_hal_rtc_osc_select+0x18>)
    230a:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    230c:	b918      	cbnz	r0, 2316 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    230e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2312:	6010      	str	r0, [r2, #0]
    2314:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2316:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    231a:	6011      	str	r1, [r2, #0]
    231c:	4770      	bx	lr
    231e:	bf00      	nop
    2320:	4000400c 	.word	0x4000400c

00002324 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2324:	4a02      	ldr	r2, [pc, #8]	; (2330 <am_hal_rtc_osc_disable+0xc>)
    2326:	6813      	ldr	r3, [r2, #0]
    2328:	f043 0010 	orr.w	r0, r3, #16
    232c:	6010      	str	r0, [r2, #0]
    232e:	4770      	bx	lr
    2330:	40004050 	.word	0x40004050

00002334 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2334:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2336:	4a22      	ldr	r2, [pc, #136]	; (23c0 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2338:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    233a:	2100      	movs	r1, #0
    233c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    233e:	b333      	cbz	r3, 238e <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2340:	4d20      	ldr	r5, [pc, #128]	; (23c4 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2342:	4921      	ldr	r1, [pc, #132]	; (23c8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2344:	4a21      	ldr	r2, [pc, #132]	; (23cc <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2346:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2348:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    234c:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    234e:	458c      	cmp	ip, r1
    2350:	bf94      	ite	ls
    2352:	461d      	movls	r5, r3
    2354:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2356:	f7ff fb97 	bl	1a88 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    235a:	1c43      	adds	r3, r0, #1
    235c:	d02e      	beq.n	23bc <am_hal_tpiu_enable+0x88>
    235e:	08c3      	lsrs	r3, r0, #3
    2360:	fbb3 fef5 	udiv	lr, r3, r5
    2364:	f10e 31ff 	add.w	r1, lr, #4294967295
    2368:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    236a:	4a19      	ldr	r2, [pc, #100]	; (23d0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    236c:	4c19      	ldr	r4, [pc, #100]	; (23d4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    236e:	4b1a      	ldr	r3, [pc, #104]	; (23d8 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2370:	491a      	ldr	r1, [pc, #104]	; (23dc <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2372:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2374:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2376:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2378:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    237c:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    237e:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2380:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2382:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    238a:	f7ff bbc5 	b.w	1b18 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    238e:	4c10      	ldr	r4, [pc, #64]	; (23d0 <am_hal_tpiu_enable+0x9c>)
    2390:	6905      	ldr	r5, [r0, #16]
    2392:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2394:	6882      	ldr	r2, [r0, #8]
    2396:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    239a:	68c3      	ldr	r3, [r0, #12]
    239c:	4c09      	ldr	r4, [pc, #36]	; (23c4 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    239e:	490e      	ldr	r1, [pc, #56]	; (23d8 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    23a0:	1e5d      	subs	r5, r3, #1
    23a2:	2201      	movs	r2, #1
    23a4:	40aa      	lsls	r2, r5
    23a6:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    23a8:	680b      	ldr	r3, [r1, #0]
    23aa:	6840      	ldr	r0, [r0, #4]
    23ac:	4318      	orrs	r0, r3
    23ae:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    23b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    23b4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    23b8:	f7ff bbae 	b.w	1b18 <am_hal_flash_delay>
    23bc:	2005      	movs	r0, #5
    23be:	e7d4      	b.n	236a <am_hal_tpiu_enable+0x36>
    23c0:	e0040304 	.word	0xe0040304
    23c4:	e0040004 	.word	0xe0040004
    23c8:	001da380 	.word	0x001da380
    23cc:	000f4240 	.word	0x000f4240
    23d0:	e0040010 	.word	0xe0040010
    23d4:	e00400f0 	.word	0xe00400f0
    23d8:	40020250 	.word	0x40020250
    23dc:	e0040f00 	.word	0xe0040f00

000023e0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    23e0:	4b01      	ldr	r3, [pc, #4]	; (23e8 <am_hal_vcomp_disable+0x8>)
    23e2:	2237      	movs	r2, #55	; 0x37
    23e4:	601a      	str	r2, [r3, #0]
    23e6:	4770      	bx	lr
    23e8:	4000c008 	.word	0x4000c008
    23ec:	73616c46 	.word	0x73616c46
    23f0:	72572068 	.word	0x72572068
    23f4:	20657469 	.word	0x20657469
    23f8:	6d617845 	.word	0x6d617845
    23fc:	0a656c70 	.word	0x0a656c70
    2400:	00000000 	.word	0x00000000
    2404:	54535543 	.word	0x54535543
    2408:	52454d4f 	.word	0x52454d4f
    240c:	594d203a 	.word	0x594d203a
    2410:	414f4220 	.word	0x414f4220
    2414:	00004452 	.word	0x00004452
    2418:	4f525245 	.word	0x4f525245
    241c:	46203a52 	.word	0x46203a52
    2420:	4853414c 	.word	0x4853414c
    2424:	69725720 	.word	0x69725720
    2428:	65206574 	.word	0x65206574
    242c:	706d6178 	.word	0x706d6178
    2430:	6620656c 	.word	0x6620656c
    2434:	756c6961 	.word	0x756c6961
    2438:	25206572 	.word	0x25206572
    243c:	00000a64 	.word	0x00000a64
    2440:	53414c46 	.word	0x53414c46
    2444:	72572048 	.word	0x72572048
    2448:	20657469 	.word	0x20657469
    244c:	6d617865 	.word	0x6d617865
    2450:	20656c70 	.word	0x20656c70
    2454:	63637573 	.word	0x63637573
    2458:	66737365 	.word	0x66737365
    245c:	0a206c75 	.word	0x0a206c75
    2460:	00000000 	.word	0x00000000
    2464:	2e2e2020 	.word	0x2e2e2020
    2468:	7265202e 	.word	0x7265202e
    246c:	6e697361 	.word	0x6e697361
    2470:	6c612067 	.word	0x6c612067
    2474:	666f206c 	.word	0x666f206c
    2478:	464e4920 	.word	0x464e4920
    247c:	6c62204f 	.word	0x6c62204f
    2480:	2c6b636f 	.word	0x2c6b636f
    2484:	616c6620 	.word	0x616c6620
    2488:	69206873 	.word	0x69206873
    248c:	6174736e 	.word	0x6174736e
    2490:	2065636e 	.word	0x2065636e
    2494:	000a2e30 	.word	0x000a2e30
    2498:	4f525245 	.word	0x4f525245
    249c:	46203a52 	.word	0x46203a52
    24a0:	4853414c 	.word	0x4853414c
    24a4:	464e495f 	.word	0x464e495f
    24a8:	52455f4f 	.word	0x52455f4f
    24ac:	20455341 	.word	0x20455341
    24b0:	52323369 	.word	0x52323369
    24b4:	72757465 	.word	0x72757465
    24b8:	646f436e 	.word	0x646f436e
    24bc:	203d2065 	.word	0x203d2065
    24c0:	25783020 	.word	0x25783020
    24c4:	000a2e78 	.word	0x000a2e78
    24c8:	2e2e2020 	.word	0x2e2e2020
    24cc:	7270202e 	.word	0x7270202e
    24d0:	6172676f 	.word	0x6172676f
    24d4:	6e696d6d 	.word	0x6e696d6d
    24d8:	4e492067 	.word	0x4e492067
    24dc:	62204f46 	.word	0x62204f46
    24e0:	6b636f6c 	.word	0x6b636f6c
    24e4:	20666f20 	.word	0x20666f20
    24e8:	73616c66 	.word	0x73616c66
    24ec:	6e692068 	.word	0x6e692068
    24f0:	6e617473 	.word	0x6e617473
    24f4:	30206563 	.word	0x30206563
    24f8:	00000a2e 	.word	0x00000a2e
    24fc:	464e490a 	.word	0x464e490a
    2500:	6c62204f 	.word	0x6c62204f
    2504:	206b636f 	.word	0x206b636f
    2508:	657a6973 	.word	0x657a6973
    250c:	30203d20 	.word	0x30203d20
    2510:	20782578 	.word	0x20782578
    2514:	6425203d 	.word	0x6425203d
    2518:	0000000a 	.word	0x0000000a
    251c:	53414c46 	.word	0x53414c46
    2520:	72702048 	.word	0x72702048
    2524:	6172676f 	.word	0x6172676f
    2528:	6170206d 	.word	0x6170206d
    252c:	61206567 	.word	0x61206567
    2530:	78302074 	.word	0x78302074
    2534:	78383025 	.word	0x78383025
    2538:	32336920 	.word	0x32336920
    253c:	75746552 	.word	0x75746552
    2540:	6f436e72 	.word	0x6f436e72
    2544:	3d206564 	.word	0x3d206564
    2548:	25783020 	.word	0x25783020
    254c:	000a2e78 	.word	0x000a2e78
    2550:	2e2e2020 	.word	0x2e2e2020
    2554:	6576202e 	.word	0x6576202e
    2558:	79666972 	.word	0x79666972
    255c:	20676e69 	.word	0x20676e69
    2560:	20656874 	.word	0x20656874
    2564:	65676170 	.word	0x65676170
    2568:	73756a20 	.word	0x73756a20
    256c:	72702074 	.word	0x72702074
    2570:	6172676f 	.word	0x6172676f
    2574:	64656d6d 	.word	0x64656d6d
    2578:	00000a2e 	.word	0x00000a2e
    257c:	4f525245 	.word	0x4f525245
    2580:	66203a52 	.word	0x66203a52
    2584:	6873616c 	.word	0x6873616c
    2588:	64646120 	.word	0x64646120
    258c:	73736572 	.word	0x73736572
    2590:	25783020 	.word	0x25783020
    2594:	20783830 	.word	0x20783830
    2598:	20646964 	.word	0x20646964
    259c:	20746f6e 	.word	0x20746f6e
    25a0:	676f7270 	.word	0x676f7270
    25a4:	206d6172 	.word	0x206d6172
    25a8:	706f7270 	.word	0x706f7270
    25ac:	796c7265 	.word	0x796c7265
    25b0:	20200a3a 	.word	0x20200a3a
    25b4:	65707845 	.word	0x65707845
    25b8:	64657463 	.word	0x64657463
    25bc:	6c617620 	.word	0x6c617620
    25c0:	3d206575 	.word	0x3d206575
    25c4:	25783020 	.word	0x25783020
    25c8:	2c783830 	.word	0x2c783830
    25cc:	6f727020 	.word	0x6f727020
    25d0:	6d617267 	.word	0x6d617267
    25d4:	2064656d 	.word	0x2064656d
    25d8:	756c6176 	.word	0x756c6176
    25dc:	203d2065 	.word	0x203d2065
    25e0:	30257830 	.word	0x30257830
    25e4:	0a2e7838 	.word	0x0a2e7838
    25e8:	00000000 	.word	0x00000000
    25ec:	4f525245 	.word	0x4f525245
    25f0:	61203a52 	.word	0x61203a52
    25f4:	61685f6d 	.word	0x61685f6d
    25f8:	6c665f6c 	.word	0x6c665f6c
    25fc:	5f687361 	.word	0x5f687361
    2600:	676f7270 	.word	0x676f7270
    2604:	5f6d6172 	.word	0x5f6d6172
    2608:	6f666e69 	.word	0x6f666e69
    260c:	20746120 	.word	0x20746120
    2610:	7366666f 	.word	0x7366666f
    2614:	30207465 	.word	0x30207465
    2618:	38302578 	.word	0x38302578
    261c:	33692078 	.word	0x33692078
    2620:	74655232 	.word	0x74655232
    2624:	436e7275 	.word	0x436e7275
    2628:	2065646f 	.word	0x2065646f
    262c:	7830203d 	.word	0x7830203d
    2630:	0a2e7825 	.word	0x0a2e7825
    2634:	00000000 	.word	0x00000000
    2638:	6f666e69 	.word	0x6f666e69
    263c:	6f6c625f 	.word	0x6f6c625f
    2640:	775f6b63 	.word	0x775f6b63
    2644:	65746972 	.word	0x65746972
    2648:	616f625f 	.word	0x616f625f
    264c:	6e5f6472 	.word	0x6e5f6472
    2650:	3a656d61 	.word	0x3a656d61
    2654:	73253c20 	.word	0x73253c20
    2658:	00000a3e 	.word	0x00000a3e
    265c:	4f525245 	.word	0x4f525245
    2660:	62203a52 	.word	0x62203a52
    2664:	7465756c 	.word	0x7465756c
    2668:	68746f6f 	.word	0x68746f6f
    266c:	64646120 	.word	0x64646120
    2670:	20736572 	.word	0x20736572
    2674:	6f207461 	.word	0x6f207461
    2678:	65736666 	.word	0x65736666
    267c:	78302074 	.word	0x78302074
    2680:	78383025 	.word	0x78383025
    2684:	6f6e2020 	.word	0x6f6e2020
    2688:	72772074 	.word	0x72772074
    268c:	65747469 	.word	0x65747469
    2690:	6f63206e 	.word	0x6f63206e
    2694:	63657272 	.word	0x63657272
    2698:	20796c74 	.word	0x20796c74
    269c:	30257830 	.word	0x30257830
    26a0:	30257838 	.word	0x30257838
    26a4:	21207838 	.word	0x21207838
    26a8:	7830203d 	.word	0x7830203d
    26ac:	78383025 	.word	0x78383025
    26b0:	78383025 	.word	0x78383025
    26b4:	00000a20 	.word	0x00000a20
    26b8:	4f525245 	.word	0x4f525245
    26bc:	00000052 	.word	0x00000052
    26c0:	45205341 	.word	0x45205341
    26c4:	43455058 	.word	0x43455058
    26c8:	00444554 	.word	0x00444554
    26cc:	63656843 	.word	0x63656843
    26d0:	4e49206b 	.word	0x4e49206b
    26d4:	65204f46 	.word	0x65204f46
    26d8:	65736172 	.word	0x65736172
    26dc:	73696420 	.word	0x73696420
    26e0:	656c6261 	.word	0x656c6261
    26e4:	61747320 	.word	0x61747320
    26e8:	25206574 	.word	0x25206574
    26ec:	73252064 	.word	0x73252064
    26f0:	0000000a 	.word	0x0000000a
    26f4:	4f525245 	.word	0x4f525245
    26f8:	6d613a52 	.word	0x6d613a52
    26fc:	6c61685f 	.word	0x6c61685f
    2700:	616c665f 	.word	0x616c665f
    2704:	695f6873 	.word	0x695f6873
    2708:	5f6f666e 	.word	0x5f6f666e
    270c:	73617265 	.word	0x73617265
    2710:	69645f65 	.word	0x69645f65
    2714:	6c626173 	.word	0x6c626173
    2718:	69202065 	.word	0x69202065
    271c:	65523233 	.word	0x65523233
    2720:	6e727574 	.word	0x6e727574
    2724:	65646f43 	.word	0x65646f43
    2728:	30203d20 	.word	0x30203d20
    272c:	2e782578 	.word	0x2e782578
    2730:	0000000a 	.word	0x0000000a
    2734:	63656843 	.word	0x63656843
    2738:	4e49206b 	.word	0x4e49206b
    273c:	70204f46 	.word	0x70204f46
    2740:	72676f72 	.word	0x72676f72
    2744:	64206d61 	.word	0x64206d61
    2748:	62617369 	.word	0x62617369
    274c:	7320656c 	.word	0x7320656c
    2750:	65746174 	.word	0x65746174
    2754:	25783020 	.word	0x25783020
    2758:	73252078 	.word	0x73252078
    275c:	0000000a 	.word	0x0000000a
    2760:	4f525245 	.word	0x4f525245
    2764:	6d613a52 	.word	0x6d613a52
    2768:	6c61685f 	.word	0x6c61685f
    276c:	616c665f 	.word	0x616c665f
    2770:	695f6873 	.word	0x695f6873
    2774:	5f6f666e 	.word	0x5f6f666e
    2778:	676f7270 	.word	0x676f7270
    277c:	5f6d6172 	.word	0x5f6d6172
    2780:	61736964 	.word	0x61736964
    2784:	20656c62 	.word	0x20656c62
    2788:	32336920 	.word	0x32336920
    278c:	75746552 	.word	0x75746552
    2790:	6f436e72 	.word	0x6f436e72
    2794:	3d206564 	.word	0x3d206564
    2798:	25783020 	.word	0x25783020
    279c:	000a2e78 	.word	0x000a2e78
    27a0:	63656843 	.word	0x63656843
    27a4:	4e49206b 	.word	0x4e49206b
    27a8:	65204f46 	.word	0x65204f46
    27ac:	6c62616e 	.word	0x6c62616e
    27b0:	6c662065 	.word	0x6c662065
    27b4:	20687361 	.word	0x20687361
    27b8:	65706977 	.word	0x65706977
    27bc:	61747320 	.word	0x61747320
    27c0:	25206574 	.word	0x25206574
    27c4:	73252064 	.word	0x73252064
    27c8:	0000000a 	.word	0x0000000a
    27cc:	2e2e2020 	.word	0x2e2e2020
    27d0:	7265202e 	.word	0x7265202e
    27d4:	6e697361 	.word	0x6e697361
    27d8:	6c612067 	.word	0x6c612067
    27dc:	666f206c 	.word	0x666f206c
    27e0:	616c6620 	.word	0x616c6620
    27e4:	69206873 	.word	0x69206873
    27e8:	6174736e 	.word	0x6174736e
    27ec:	2065636e 	.word	0x2065636e
    27f0:	0a2e6425 	.word	0x0a2e6425
    27f4:	00000000 	.word	0x00000000
    27f8:	4f525245 	.word	0x4f525245
    27fc:	46203a52 	.word	0x46203a52
    2800:	4853414c 	.word	0x4853414c
    2804:	49414d5f 	.word	0x49414d5f
    2808:	52455f4e 	.word	0x52455f4e
    280c:	20455341 	.word	0x20455341
    2810:	52323369 	.word	0x52323369
    2814:	72757465 	.word	0x72757465
    2818:	646f436e 	.word	0x646f436e
    281c:	203d2065 	.word	0x203d2065
    2820:	25783020 	.word	0x25783020
    2824:	000a2e78 	.word	0x000a2e78
    2828:	2e2e2020 	.word	0x2e2e2020
    282c:	7270202e 	.word	0x7270202e
    2830:	6172676f 	.word	0x6172676f
    2834:	6e696d6d 	.word	0x6e696d6d
    2838:	6c662067 	.word	0x6c662067
    283c:	20687361 	.word	0x20687361
    2840:	74736e69 	.word	0x74736e69
    2844:	65636e61 	.word	0x65636e61
    2848:	2c642520 	.word	0x2c642520
    284c:	67617020 	.word	0x67617020
    2850:	64252065 	.word	0x64252065
    2854:	00000a2e 	.word	0x00000a2e
    2858:	53414c46 	.word	0x53414c46
    285c:	72702048 	.word	0x72702048
    2860:	6172676f 	.word	0x6172676f
    2864:	6170206d 	.word	0x6170206d
    2868:	61206567 	.word	0x61206567
    286c:	78302074 	.word	0x78302074
    2870:	78383025 	.word	0x78383025
    2874:	32336920 	.word	0x32336920
    2878:	75746552 	.word	0x75746552
    287c:	6f436e72 	.word	0x6f436e72
    2880:	3d206564 	.word	0x3d206564
    2884:	25783020 	.word	0x25783020
    2888:	000a2e78 	.word	0x000a2e78
    288c:	2e2e2020 	.word	0x2e2e2020
    2890:	6576202e 	.word	0x6576202e
    2894:	79666972 	.word	0x79666972
    2898:	20676e69 	.word	0x20676e69
    289c:	20656874 	.word	0x20656874
    28a0:	65676170 	.word	0x65676170
    28a4:	73756a20 	.word	0x73756a20
    28a8:	72702074 	.word	0x72702074
    28ac:	6172676f 	.word	0x6172676f
    28b0:	64656d6d 	.word	0x64656d6d
    28b4:	00000a2e 	.word	0x00000a2e
    28b8:	4f525245 	.word	0x4f525245
    28bc:	66203a52 	.word	0x66203a52
    28c0:	6873616c 	.word	0x6873616c
    28c4:	64646120 	.word	0x64646120
    28c8:	73736572 	.word	0x73736572
    28cc:	25783020 	.word	0x25783020
    28d0:	20783830 	.word	0x20783830
    28d4:	20646964 	.word	0x20646964
    28d8:	20746f6e 	.word	0x20746f6e
    28dc:	676f7270 	.word	0x676f7270
    28e0:	206d6172 	.word	0x206d6172
    28e4:	706f7270 	.word	0x706f7270
    28e8:	796c7265 	.word	0x796c7265
    28ec:	20200a3a 	.word	0x20200a3a
    28f0:	65707845 	.word	0x65707845
    28f4:	64657463 	.word	0x64657463
    28f8:	6c617620 	.word	0x6c617620
    28fc:	3d206575 	.word	0x3d206575
    2900:	25783020 	.word	0x25783020
    2904:	2c783830 	.word	0x2c783830
    2908:	6f727020 	.word	0x6f727020
    290c:	6d617267 	.word	0x6d617267
    2910:	2064656d 	.word	0x2064656d
    2914:	756c6176 	.word	0x756c6176
    2918:	203d2065 	.word	0x203d2065
    291c:	30257830 	.word	0x30257830
    2920:	0a2e7838 	.word	0x0a2e7838
    2924:	00000000 	.word	0x00000000
    2928:	2e2e2020 	.word	0x2e2e2020
    292c:	7265202e 	.word	0x7265202e
    2930:	6e697361 	.word	0x6e697361
    2934:	68742067 	.word	0x68742067
    2938:	61702065 	.word	0x61702065
    293c:	6a206567 	.word	0x6a206567
    2940:	20747375 	.word	0x20747375
    2944:	676f7270 	.word	0x676f7270
    2948:	6d6d6172 	.word	0x6d6d6172
    294c:	40206465 	.word	0x40206465
    2950:	25783020 	.word	0x25783020
    2954:	2e783830 	.word	0x2e783830
    2958:	0000000a 	.word	0x0000000a
    295c:	414c4620 	.word	0x414c4620
    2960:	65204853 	.word	0x65204853
    2964:	65736172 	.word	0x65736172
    2968:	67617020 	.word	0x67617020
    296c:	74612065 	.word	0x74612065
    2970:	25783020 	.word	0x25783020
    2974:	20783830 	.word	0x20783830
    2978:	52323369 	.word	0x52323369
    297c:	72757465 	.word	0x72757465
    2980:	646f436e 	.word	0x646f436e
    2984:	203d2065 	.word	0x203d2065
    2988:	25783020 	.word	0x25783020
    298c:	000a2e78 	.word	0x000a2e78
    2990:	2e2e2020 	.word	0x2e2e2020
    2994:	6576202e 	.word	0x6576202e
    2998:	79666972 	.word	0x79666972
    299c:	20676e69 	.word	0x20676e69
    29a0:	20656874 	.word	0x20656874
    29a4:	65676170 	.word	0x65676170
    29a8:	73756a20 	.word	0x73756a20
    29ac:	72652074 	.word	0x72652074
    29b0:	64657361 	.word	0x64657361
    29b4:	00000a2e 	.word	0x00000a2e
    29b8:	4f525245 	.word	0x4f525245
    29bc:	66203a52 	.word	0x66203a52
    29c0:	6873616c 	.word	0x6873616c
    29c4:	64646120 	.word	0x64646120
    29c8:	73736572 	.word	0x73736572
    29cc:	25783020 	.word	0x25783020
    29d0:	20783830 	.word	0x20783830
    29d4:	20646964 	.word	0x20646964
    29d8:	20746f6e 	.word	0x20746f6e
    29dc:	53415245 	.word	0x53415245
    29e0:	72702045 	.word	0x72702045
    29e4:	7265706f 	.word	0x7265706f
    29e8:	0a3a796c 	.word	0x0a3a796c
    29ec:	78452020 	.word	0x78452020
    29f0:	74636570 	.word	0x74636570
    29f4:	76206465 	.word	0x76206465
    29f8:	65756c61 	.word	0x65756c61
    29fc:	30203d20 	.word	0x30203d20
    2a00:	46464678 	.word	0x46464678
    2a04:	46464646 	.word	0x46464646
    2a08:	70202c46 	.word	0x70202c46
    2a0c:	72676f72 	.word	0x72676f72
    2a10:	656d6d61 	.word	0x656d6d61
    2a14:	61762064 	.word	0x61762064
    2a18:	2065756c 	.word	0x2065756c
    2a1c:	7830203d 	.word	0x7830203d
    2a20:	78383025 	.word	0x78383025
    2a24:	00000a2e 	.word	0x00000a2e
    2a28:	0a0a0a0a 	.word	0x0a0a0a0a
    2a2c:	0a0a0a0a 	.word	0x0a0a0a0a
    2a30:	0a0a0a0a 	.word	0x0a0a0a0a
    2a34:	0a0a0a0a 	.word	0x0a0a0a0a
    2a38:	00000a0a 	.word	0x00000a0a

00002a3c <am_hal_cachectrl_defaults>:
    2a3c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2a4c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2a5c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2a6c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2a7c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2a8c:	6b6c635f 2e6e6567 00000063              _clkgen.c...

00002a98 <g_am_hal_mcuctrl_flash_size>:
    2a98:	00004000 00008000 00010000 00020000     .@..............
    2aa8:	00040000 00080000 00100000 00200000     .............. .
    2ab8:	00400000 00800000 01000000 02000000     ..@.............
    2ac8:	04000000 08000000 10000000 20000000     ............... 
