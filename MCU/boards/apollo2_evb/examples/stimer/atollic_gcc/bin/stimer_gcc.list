
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\stimer\atollic_gcc\bin\stimer_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000078  10001000  000020a0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  10001078  00002118  00021078  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006ecb  00000000  00000000  000210af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f51  00000000  00000000  00027f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000978  00000000  00000000  00029ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000fc8  00000000  00000000  0002a843  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004905  00000000  00000000  0002b80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003047  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00033157  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001a18  00000000  00000000  000331d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003f69  00000000  00000000  00034bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 75 06 00 00 dd 06 00 00 1d 07 00 00     ....u...........
      10:	1d 07 00 00 1d 07 00 00 1d 07 00 00 00 00 00 00     ................
	...
      2c:	e5 06 00 00 e5 06 00 00 00 00 00 00 e5 06 00 00     ................
      3c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      4c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      5c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      6c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      7c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      8c:	9d 05 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      9c:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      ac:	e5 06 00 00 e5 06 00 00 e5 06 00 00 e5 06 00 00     ................
      bc:	e5 06 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     478:	b580      	push	{r7, lr}
     47a:	b084      	sub	sp, #16
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     482:	683b      	ldr	r3, [r7, #0]
     484:	00db      	lsls	r3, r3, #3
     486:	687a      	ldr	r2, [r7, #4]
     488:	4413      	add	r3, r2
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	f003 0302 	and.w	r3, r3, #2
     490:	2b00      	cmp	r3, #0
     492:	d029      	beq.n	4e8 <am_devices_led_toggle+0x70>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     494:	f3ef 8310 	mrs	r3, PRIMASK
     498:	60fb      	str	r3, [r7, #12]
     49a:	b672      	cpsid	i
     49c:	683b      	ldr	r3, [r7, #0]
     49e:	00db      	lsls	r3, r3, #3
     4a0:	687a      	ldr	r2, [r7, #4]
     4a2:	4413      	add	r3, r2
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	08db      	lsrs	r3, r3, #3
     4a8:	f003 0204 	and.w	r2, r3, #4
     4ac:	4b2c      	ldr	r3, [pc, #176]	; (560 <am_devices_led_toggle+0xe8>)
     4ae:	4413      	add	r3, r2
     4b0:	4618      	mov	r0, r3
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	00db      	lsls	r3, r3, #3
     4b6:	687a      	ldr	r2, [r7, #4]
     4b8:	4413      	add	r3, r2
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	08db      	lsrs	r3, r3, #3
     4be:	f003 0204 	and.w	r2, r3, #4
     4c2:	4b27      	ldr	r3, [pc, #156]	; (560 <am_devices_led_toggle+0xe8>)
     4c4:	4413      	add	r3, r2
     4c6:	681a      	ldr	r2, [r3, #0]
     4c8:	683b      	ldr	r3, [r7, #0]
     4ca:	00db      	lsls	r3, r3, #3
     4cc:	6879      	ldr	r1, [r7, #4]
     4ce:	440b      	add	r3, r1
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	f003 031f 	and.w	r3, r3, #31
     4d6:	2101      	movs	r1, #1
     4d8:	fa01 f303 	lsl.w	r3, r1, r3
     4dc:	4053      	eors	r3, r2
     4de:	6003      	str	r3, [r0, #0]
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	f383 8810 	msr	PRIMASK, r3
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     4e6:	e037      	b.n	558 <am_devices_led_toggle+0xe0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	00db      	lsls	r3, r3, #3
     4ec:	687a      	ldr	r2, [r7, #4]
     4ee:	4413      	add	r3, r2
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	4618      	mov	r0, r3
     4f4:	f001 f986 	bl	1804 <am_hal_gpio_out_enable_bit_get>
     4f8:	4603      	mov	r3, r0
     4fa:	2b00      	cmp	r3, #0
     4fc:	d016      	beq.n	52c <am_devices_led_toggle+0xb4>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	00db      	lsls	r3, r3, #3
     502:	687a      	ldr	r2, [r7, #4]
     504:	4413      	add	r3, r2
     506:	681b      	ldr	r3, [r3, #0]
     508:	08db      	lsrs	r3, r3, #3
     50a:	f003 0204 	and.w	r2, r3, #4
     50e:	4b15      	ldr	r3, [pc, #84]	; (564 <am_devices_led_toggle+0xec>)
     510:	4413      	add	r3, r2
     512:	4619      	mov	r1, r3
     514:	683b      	ldr	r3, [r7, #0]
     516:	00db      	lsls	r3, r3, #3
     518:	687a      	ldr	r2, [r7, #4]
     51a:	4413      	add	r3, r2
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 031f 	and.w	r3, r3, #31
     522:	2201      	movs	r2, #1
     524:	fa02 f303 	lsl.w	r3, r2, r3
     528:	600b      	str	r3, [r1, #0]
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     52a:	e015      	b.n	558 <am_devices_led_toggle+0xe0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     52c:	683b      	ldr	r3, [r7, #0]
     52e:	00db      	lsls	r3, r3, #3
     530:	687a      	ldr	r2, [r7, #4]
     532:	4413      	add	r3, r2
     534:	681b      	ldr	r3, [r3, #0]
     536:	08db      	lsrs	r3, r3, #3
     538:	f003 0204 	and.w	r2, r3, #4
     53c:	4b0a      	ldr	r3, [pc, #40]	; (568 <am_devices_led_toggle+0xf0>)
     53e:	4413      	add	r3, r2
     540:	4619      	mov	r1, r3
     542:	683b      	ldr	r3, [r7, #0]
     544:	00db      	lsls	r3, r3, #3
     546:	687a      	ldr	r2, [r7, #4]
     548:	4413      	add	r3, r2
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	f003 031f 	and.w	r3, r3, #31
     550:	2201      	movs	r2, #1
     552:	fa02 f303 	lsl.w	r3, r2, r3
     556:	600b      	str	r3, [r1, #0]
        }
    }
}
     558:	bf00      	nop
     55a:	3710      	adds	r7, #16
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}
     560:	40010088 	.word	0x40010088
     564:	400100b4 	.word	0x400100b4
     568:	400100a8 	.word	0x400100a8

0000056c <stimer_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
stimer_init(void)
{
     56c:	b580      	push	{r7, lr}
     56e:	af00      	add	r7, sp, #0
    //
    // Enable compare A interrupt in STIMER
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
     570:	2001      	movs	r0, #1
     572:	f001 fbd9 	bl	1d28 <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
     576:	2023      	movs	r0, #35	; 0x23
     578:	f001 f952 	bl	1820 <am_hal_interrupt_enable>

    //
    // Configure the STIMER and run
    //
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
     57c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     580:	f001 fb90 	bl	1ca4 <am_hal_stimer_config>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
     584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     588:	2000      	movs	r0, #0
     58a:	f001 fba9 	bl	1ce0 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ |
     58e:	f240 1003 	movw	r0, #259	; 0x103
     592:	f001 fb87 	bl	1ca4 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);

}
     596:	bf00      	nop
     598:	bd80      	pop	{r7, pc}
     59a:	bf00      	nop

0000059c <am_stimer_cmpr0_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
     59c:	b580      	push	{r7, lr}
     59e:	af00      	add	r7, sp, #0
    //
    // Check the timer interrupt status.
    //
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
     5a0:	2001      	movs	r0, #1
     5a2:	f001 fbc9 	bl	1d38 <am_hal_stimer_int_clear>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
     5a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     5aa:	2000      	movs	r0, #0
     5ac:	f001 fb98 	bl	1ce0 <am_hal_stimer_compare_delta_set>

    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     5b0:	2100      	movs	r1, #0
     5b2:	4802      	ldr	r0, [pc, #8]	; (5bc <am_stimer_cmpr0_isr+0x20>)
     5b4:	f7ff ff60 	bl	478 <am_devices_led_toggle>
}
     5b8:	bf00      	nop
     5ba:	bd80      	pop	{r7, pc}
     5bc:	10001000 	.word	0x10001000

000005c0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     5c6:	2000      	movs	r0, #0
     5c8:	f001 f8e2 	bl	1790 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     5cc:	4821      	ldr	r0, [pc, #132]	; (654 <main+0x94>)
     5ce:	f001 f849 	bl	1664 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     5d2:	f000 ffbd 	bl	1550 <am_bsp_low_power_init>

    //
    // Configure the pins for this board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     5d6:	2105      	movs	r1, #5
     5d8:	481f      	ldr	r0, [pc, #124]	; (658 <main+0x98>)
     5da:	f7ff ff33 	bl	444 <am_devices_led_array_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     5de:	481f      	ldr	r0, [pc, #124]	; (65c <main+0x9c>)
     5e0:	f000 f91c 	bl	81c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     5e4:	f3ef 8310 	mrs	r3, PRIMASK
     5e8:	607b      	str	r3, [r7, #4]
     5ea:	b672      	cpsid	i
     5ec:	4b1c      	ldr	r3, [pc, #112]	; (660 <main+0xa0>)
     5ee:	2273      	movs	r2, #115	; 0x73
     5f0:	601a      	str	r2, [r3, #0]
     5f2:	4a1c      	ldr	r2, [pc, #112]	; (664 <main+0xa4>)
     5f4:	4b1b      	ldr	r3, [pc, #108]	; (664 <main+0xa4>)
     5f6:	681b      	ldr	r3, [r3, #0]
     5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     5fc:	6013      	str	r3, [r2, #0]
     5fe:	4a1a      	ldr	r2, [pc, #104]	; (668 <main+0xa8>)
     600:	4b19      	ldr	r3, [pc, #100]	; (668 <main+0xa8>)
     602:	681b      	ldr	r3, [r3, #0]
     604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     60c:	6013      	str	r3, [r2, #0]
     60e:	4a17      	ldr	r2, [pc, #92]	; (66c <main+0xac>)
     610:	4b16      	ldr	r3, [pc, #88]	; (66c <main+0xac>)
     612:	681b      	ldr	r3, [r3, #0]
     614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     618:	6013      	str	r3, [r2, #0]
     61a:	4b11      	ldr	r3, [pc, #68]	; (660 <main+0xa0>)
     61c:	2200      	movs	r2, #0
     61e:	601a      	str	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     626:	f001 f92f 	bl	1888 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     62a:	f000 ffa3 	bl	1574 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     62e:	f000 ff85 	bl	153c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("STimer Example\n");
     632:	480f      	ldr	r0, [pc, #60]	; (670 <main+0xb0>)
     634:	f000 ff64 	bl	1500 <am_util_stdio_printf>
    am_util_delay_ms(10);
     638:	200a      	movs	r0, #10
     63a:	f000 f857 	bl	6ec <am_util_delay_ms>

    //
    // STIMER init.
    //
    stimer_init();
     63e:	f7ff ff95 	bl	56c <stimer_init>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_master_enable();
     642:	f001 f915 	bl	1870 <am_hal_interrupt_master_enable>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     646:	f000 ffd5 	bl	15f4 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     64a:	2001      	movs	r0, #1
     64c:	f001 fb7a 	bl	1d44 <am_hal_sysctrl_sleep>
    }
     650:	e7fb      	b.n	64a <main+0x8a>
     652:	bf00      	nop
     654:	00002044 	.word	0x00002044
     658:	10001000 	.word	0x10001000
     65c:	00001661 	.word	0x00001661
     660:	40010060 	.word	0x40010060
     664:	40010054 	.word	0x40010054
     668:	40010028 	.word	0x40010028
     66c:	40010108 	.word	0x40010108
     670:	00002020 	.word	0x00002020

00000674 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     674:	4811      	ldr	r0, [pc, #68]	; (6bc <zero_loop+0x12>)
     676:	4912      	ldr	r1, [pc, #72]	; (6c0 <zero_loop+0x16>)
     678:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     67a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     67e:	4811      	ldr	r0, [pc, #68]	; (6c4 <zero_loop+0x1a>)
     680:	6801      	ldr	r1, [r0, #0]
     682:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     686:	6001      	str	r1, [r0, #0]
     688:	f3bf 8f4f 	dsb	sy
     68c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     690:	480d      	ldr	r0, [pc, #52]	; (6c8 <zero_loop+0x1e>)
     692:	490e      	ldr	r1, [pc, #56]	; (6cc <zero_loop+0x22>)
     694:	4a0e      	ldr	r2, [pc, #56]	; (6d0 <zero_loop+0x26>)

00000696 <copy_loop>:
     696:	f850 3b04 	ldr.w	r3, [r0], #4
     69a:	f841 3b04 	str.w	r3, [r1], #4
     69e:	4291      	cmp	r1, r2
     6a0:	dbf9      	blt.n	696 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     6a2:	480c      	ldr	r0, [pc, #48]	; (6d4 <zero_loop+0x2a>)
     6a4:	490c      	ldr	r1, [pc, #48]	; (6d8 <zero_loop+0x2e>)
     6a6:	f04f 0200 	mov.w	r2, #0

000006aa <zero_loop>:
     6aa:	4288      	cmp	r0, r1
     6ac:	bfb8      	it	lt
     6ae:	f840 2b04 	strlt.w	r2, [r0], #4
     6b2:	dbfa      	blt.n	6aa <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     6b4:	f7ff ff84 	bl	5c0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     6b8:	be00      	bkpt	0x0000
}
     6ba:	bf00      	nop
     6bc:	e000ed08 	.word	0xe000ed08
     6c0:	00000000 	.word	0x00000000
     6c4:	e000ed88 	.word	0xe000ed88
     6c8:	000020a0 	.word	0x000020a0
     6cc:	10001000 	.word	0x10001000
     6d0:	10001078 	.word	0x10001078
     6d4:	10001078 	.word	0x10001078
     6d8:	10001190 	.word	0x10001190

000006dc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     6dc:	b480      	push	{r7}
     6de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     6e0:	e7fe      	b.n	6e0 <am_nmi_isr+0x4>
     6e2:	bf00      	nop

000006e4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     6e4:	b480      	push	{r7}
     6e6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     6e8:	e7fe      	b.n	6e8 <am_adc_isr+0x4>
     6ea:	bf00      	nop

000006ec <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     6ec:	b580      	push	{r7, lr}
     6ee:	b084      	sub	sp, #16
     6f0:	af00      	add	r7, sp, #0
     6f2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     6f4:	f001 f864 	bl	17c0 <am_hal_clkgen_sysclk_get>
     6f8:	4602      	mov	r2, r0
     6fa:	4b07      	ldr	r3, [pc, #28]	; (718 <am_util_delay_ms+0x2c>)
     6fc:	fba3 2302 	umull	r2, r3, r3, r2
     700:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     702:	687a      	ldr	r2, [r7, #4]
     704:	fb02 f303 	mul.w	r3, r2, r3
     708:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     70a:	68f8      	ldr	r0, [r7, #12]
     70c:	f001 f874 	bl	17f8 <am_hal_flash_delay>
}
     710:	bf00      	nop
     712:	3710      	adds	r7, #16
     714:	46bd      	mov	sp, r7
     716:	bd80      	pop	{r7, pc}
     718:	057619f1 	.word	0x057619f1

0000071c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     71c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     71e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     720:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     722:	f000 f809 	bl	738 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     726:	bd01      	pop	{r0, pc}
}
     728:	bf00      	nop
     72a:	4618      	mov	r0, r3

0000072c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     72c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     72e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     730:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     732:	4770      	bx	lr
}
     734:	bf00      	nop
     736:	4618      	mov	r0, r3

00000738 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     738:	b580      	push	{r7, lr}
     73a:	b096      	sub	sp, #88	; 0x58
     73c:	af00      	add	r7, sp, #0
     73e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     740:	f107 030c 	add.w	r3, r7, #12
     744:	2200      	movs	r2, #0
     746:	601a      	str	r2, [r3, #0]
     748:	605a      	str	r2, [r3, #4]
     74a:	609a      	str	r2, [r3, #8]
     74c:	60da      	str	r2, [r3, #12]
     74e:	611a      	str	r2, [r3, #16]
     750:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     752:	2300      	movs	r3, #0
     754:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     758:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     75a:	4b2e      	ldr	r3, [pc, #184]	; (814 <am_util_faultisr_collect_data+0xdc>)
     75c:	681b      	ldr	r3, [r3, #0]
     75e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     762:	b2db      	uxtb	r3, r3
     764:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     76a:	0a1b      	lsrs	r3, r3, #8
     76c:	b2db      	uxtb	r3, r3
     76e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     774:	0c1b      	lsrs	r3, r3, #16
     776:	b29b      	uxth	r3, r3
     778:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     77c:	4b26      	ldr	r3, [pc, #152]	; (818 <am_util_faultisr_collect_data+0xe0>)
     77e:	681b      	ldr	r3, [r3, #0]
     780:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     782:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     786:	b2db      	uxtb	r3, r3
     788:	f003 0302 	and.w	r3, r3, #2
     78c:	2b00      	cmp	r3, #0
     78e:	d005      	beq.n	79c <am_util_faultisr_collect_data+0x64>
     790:	6879      	ldr	r1, [r7, #4]
     792:	2006      	movs	r0, #6
     794:	f7ff ffca 	bl	72c <getStackedReg>
     798:	4603      	mov	r3, r0
     79a:	e001      	b.n	7a0 <am_util_faultisr_collect_data+0x68>
     79c:	f04f 33ff 	mov.w	r3, #4294967295
     7a0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     7a2:	6879      	ldr	r1, [r7, #4]
     7a4:	2000      	movs	r0, #0
     7a6:	f7ff ffc1 	bl	72c <getStackedReg>
     7aa:	4603      	mov	r3, r0
     7ac:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     7ae:	6879      	ldr	r1, [r7, #4]
     7b0:	2001      	movs	r0, #1
     7b2:	f7ff ffbb 	bl	72c <getStackedReg>
     7b6:	4603      	mov	r3, r0
     7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     7ba:	6879      	ldr	r1, [r7, #4]
     7bc:	2002      	movs	r0, #2
     7be:	f7ff ffb5 	bl	72c <getStackedReg>
     7c2:	4603      	mov	r3, r0
     7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     7c6:	6879      	ldr	r1, [r7, #4]
     7c8:	2003      	movs	r0, #3
     7ca:	f7ff ffaf 	bl	72c <getStackedReg>
     7ce:	4603      	mov	r3, r0
     7d0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     7d2:	6879      	ldr	r1, [r7, #4]
     7d4:	2004      	movs	r0, #4
     7d6:	f7ff ffa9 	bl	72c <getStackedReg>
     7da:	4603      	mov	r3, r0
     7dc:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     7de:	6879      	ldr	r1, [r7, #4]
     7e0:	2005      	movs	r0, #5
     7e2:	f7ff ffa3 	bl	72c <getStackedReg>
     7e6:	4603      	mov	r3, r0
     7e8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     7ea:	6879      	ldr	r1, [r7, #4]
     7ec:	2006      	movs	r0, #6
     7ee:	f7ff ff9d 	bl	72c <getStackedReg>
     7f2:	4603      	mov	r3, r0
     7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     7f6:	6879      	ldr	r1, [r7, #4]
     7f8:	2007      	movs	r0, #7
     7fa:	f7ff ff97 	bl	72c <getStackedReg>
     7fe:	4603      	mov	r3, r0
     800:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     802:	f107 030c 	add.w	r3, r7, #12
     806:	4618      	mov	r0, r3
     808:	f001 f88e 	bl	1928 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     80c:	2300      	movs	r3, #0
     80e:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     810:	e7fe      	b.n	810 <am_util_faultisr_collect_data+0xd8>
     812:	bf00      	nop
     814:	e000ed28 	.word	0xe000ed28
     818:	e000ed38 	.word	0xe000ed38

0000081c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     81c:	b480      	push	{r7}
     81e:	b083      	sub	sp, #12
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     824:	4a04      	ldr	r2, [pc, #16]	; (838 <am_util_stdio_printf_init+0x1c>)
     826:	687b      	ldr	r3, [r7, #4]
     828:	6013      	str	r3, [r2, #0]
}
     82a:	bf00      	nop
     82c:	370c      	adds	r7, #12
     82e:	46bd      	mov	sp, r7
     830:	f85d 7b04 	ldr.w	r7, [sp], #4
     834:	4770      	bx	lr
     836:	bf00      	nop
     838:	1000118c 	.word	0x1000118c

0000083c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     83c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     840:	b096      	sub	sp, #88	; 0x58
     842:	af00      	add	r7, sp, #0
     844:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     848:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     84c:	0025      	movs	r5, r4
     84e:	2600      	movs	r6, #0
     850:	ea55 0306 	orrs.w	r3, r5, r6
     854:	f000 809e 	beq.w	994 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     858:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     85c:	0862      	lsrs	r2, r4, #1
     85e:	ea4f 0133 	mov.w	r1, r3, rrx
     862:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     866:	ea4f 0893 	mov.w	r8, r3, lsr #2
     86a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     86e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     872:	eb11 0308 	adds.w	r3, r1, r8
     876:	eb42 0409 	adc.w	r4, r2, r9
     87a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     87e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     882:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     886:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     88a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     88e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     892:	eb13 030a 	adds.w	r3, r3, sl
     896:	eb44 040b 	adc.w	r4, r4, fp
     89a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     89e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8a2:	0a1a      	lsrs	r2, r3, #8
     8a4:	62ba      	str	r2, [r7, #40]	; 0x28
     8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     8a8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     8ac:	62ba      	str	r2, [r7, #40]	; 0x28
     8ae:	0a23      	lsrs	r3, r4, #8
     8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
     8b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     8ba:	18c9      	adds	r1, r1, r3
     8bc:	eb42 0204 	adc.w	r2, r2, r4
     8c0:	460b      	mov	r3, r1
     8c2:	4614      	mov	r4, r2
     8c4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     8c8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8cc:	0c1a      	lsrs	r2, r3, #16
     8ce:	623a      	str	r2, [r7, #32]
     8d0:	6a3a      	ldr	r2, [r7, #32]
     8d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     8d6:	623a      	str	r2, [r7, #32]
     8d8:	0c23      	lsrs	r3, r4, #16
     8da:	627b      	str	r3, [r7, #36]	; 0x24
     8dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     8e4:	18c9      	adds	r1, r1, r3
     8e6:	eb42 0204 	adc.w	r2, r2, r4
     8ea:	460b      	mov	r3, r1
     8ec:	4614      	mov	r4, r2
     8ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     8f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8f6:	0023      	movs	r3, r4
     8f8:	603b      	str	r3, [r7, #0]
     8fa:	2300      	movs	r3, #0
     8fc:	607b      	str	r3, [r7, #4]
     8fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     902:	e897 0006 	ldmia.w	r7, {r1, r2}
     906:	18c9      	adds	r1, r1, r3
     908:	eb42 0204 	adc.w	r2, r2, r4
     90c:	460b      	mov	r3, r1
     90e:	4614      	mov	r4, r2
     910:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     914:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     918:	08da      	lsrs	r2, r3, #3
     91a:	613a      	str	r2, [r7, #16]
     91c:	693a      	ldr	r2, [r7, #16]
     91e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     922:	613a      	str	r2, [r7, #16]
     924:	08e3      	lsrs	r3, r4, #3
     926:	617b      	str	r3, [r7, #20]
     928:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     92c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     930:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     934:	18db      	adds	r3, r3, r3
     936:	eb44 0404 	adc.w	r4, r4, r4
     93a:	00a2      	lsls	r2, r4, #2
     93c:	60fa      	str	r2, [r7, #12]
     93e:	68fa      	ldr	r2, [r7, #12]
     940:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     944:	60fa      	str	r2, [r7, #12]
     946:	009a      	lsls	r2, r3, #2
     948:	60ba      	str	r2, [r7, #8]
     94a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     94e:	18c9      	adds	r1, r1, r3
     950:	eb42 0204 	adc.w	r2, r2, r4
     954:	460b      	mov	r3, r1
     956:	4614      	mov	r4, r2
     958:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     95c:	1acb      	subs	r3, r1, r3
     95e:	eb62 0404 	sbc.w	r4, r2, r4
     962:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     966:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     96a:	3306      	adds	r3, #6
     96c:	f144 0400 	adc.w	r4, r4, #0
     970:	091a      	lsrs	r2, r3, #4
     972:	61ba      	str	r2, [r7, #24]
     974:	69ba      	ldr	r2, [r7, #24]
     976:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     97a:	61ba      	str	r2, [r7, #24]
     97c:	0923      	lsrs	r3, r4, #4
     97e:	61fb      	str	r3, [r7, #28]
     980:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     984:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     988:	18c9      	adds	r1, r1, r3
     98a:	eb42 0204 	adc.w	r2, r2, r4
     98e:	460b      	mov	r3, r1
     990:	4614      	mov	r4, r2
     992:	e029      	b.n	9e8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     996:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     99a:	085a      	lsrs	r2, r3, #1
     99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     99e:	089b      	lsrs	r3, r3, #2
     9a0:	4413      	add	r3, r2
     9a2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9a6:	091b      	lsrs	r3, r3, #4
     9a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9aa:	4413      	add	r3, r2
     9ac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9b0:	0a1b      	lsrs	r3, r3, #8
     9b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9b4:	4413      	add	r3, r2
     9b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9ba:	0c1b      	lsrs	r3, r3, #16
     9bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9be:	4413      	add	r3, r2
     9c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9c4:	08db      	lsrs	r3, r3, #3
     9c6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     9c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9ca:	4613      	mov	r3, r2
     9cc:	009b      	lsls	r3, r3, #2
     9ce:	4413      	add	r3, r2
     9d0:	005b      	lsls	r3, r3, #1
     9d2:	461a      	mov	r2, r3
     9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9d6:	1a9b      	subs	r3, r3, r2
     9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9dc:	3306      	adds	r3, #6
     9de:	091a      	lsrs	r2, r3, #4
     9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9e2:	4413      	add	r3, r2
     9e4:	f04f 0400 	mov.w	r4, #0
    }
}
     9e8:	4618      	mov	r0, r3
     9ea:	4621      	mov	r1, r4
     9ec:	3758      	adds	r7, #88	; 0x58
     9ee:	46bd      	mov	sp, r7
     9f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop

000009f8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     9f8:	b590      	push	{r4, r7, lr}
     9fa:	b085      	sub	sp, #20
     9fc:	af00      	add	r7, sp, #0
     9fe:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     a02:	683a      	ldr	r2, [r7, #0]
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	4313      	orrs	r3, r2
     a08:	2b00      	cmp	r3, #0
     a0a:	bf0c      	ite	eq
     a0c:	2301      	moveq	r3, #1
     a0e:	2300      	movne	r3, #0
     a10:	b2db      	uxtb	r3, r3
     a12:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     a14:	e008      	b.n	a28 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     a16:	e9d7 0100 	ldrd	r0, r1, [r7]
     a1a:	f7ff ff0f 	bl	83c <divu64_10>
     a1e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	3301      	adds	r3, #1
     a26:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     a28:	e897 0018 	ldmia.w	r7, {r3, r4}
     a2c:	4323      	orrs	r3, r4
     a2e:	d1f2      	bne.n	a16 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     a30:	68fb      	ldr	r3, [r7, #12]
}
     a32:	4618      	mov	r0, r3
     a34:	3714      	adds	r7, #20
     a36:	46bd      	mov	sp, r7
     a38:	bd90      	pop	{r4, r7, pc}
     a3a:	bf00      	nop

00000a3c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     a3c:	b590      	push	{r4, r7, lr}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     a46:	e897 0018 	ldmia.w	r7, {r3, r4}
     a4a:	2b00      	cmp	r3, #0
     a4c:	f174 0300 	sbcs.w	r3, r4, #0
     a50:	da06      	bge.n	a60 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     a52:	e897 0018 	ldmia.w	r7, {r3, r4}
     a56:	425b      	negs	r3, r3
     a58:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     a5c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     a60:	e897 0018 	ldmia.w	r7, {r3, r4}
     a64:	4618      	mov	r0, r3
     a66:	4621      	mov	r1, r4
     a68:	f7ff ffc6 	bl	9f8 <ndigits_in_u64>
     a6c:	4603      	mov	r3, r0
}
     a6e:	4618      	mov	r0, r3
     a70:	370c      	adds	r7, #12
     a72:	46bd      	mov	sp, r7
     a74:	bd90      	pop	{r4, r7, pc}
     a76:	bf00      	nop

00000a78 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     a78:	b490      	push	{r4, r7}
     a7a:	b084      	sub	sp, #16
     a7c:	af00      	add	r7, sp, #0
     a7e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     a82:	6839      	ldr	r1, [r7, #0]
     a84:	687a      	ldr	r2, [r7, #4]
     a86:	430a      	orrs	r2, r1
     a88:	2a00      	cmp	r2, #0
     a8a:	bf0c      	ite	eq
     a8c:	2201      	moveq	r2, #1
     a8e:	2200      	movne	r2, #0
     a90:	b2d2      	uxtb	r2, r2
     a92:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     a94:	e00a      	b.n	aac <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     a96:	e897 0006 	ldmia.w	r7, {r1, r2}
     a9a:	090b      	lsrs	r3, r1, #4
     a9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     aa0:	0914      	lsrs	r4, r2, #4
     aa2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     aa6:	68fa      	ldr	r2, [r7, #12]
     aa8:	3201      	adds	r2, #1
     aaa:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     aac:	e897 0006 	ldmia.w	r7, {r1, r2}
     ab0:	430a      	orrs	r2, r1
     ab2:	d1f0      	bne.n	a96 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     ab4:	68fb      	ldr	r3, [r7, #12]
}
     ab6:	4618      	mov	r0, r3
     ab8:	3710      	adds	r7, #16
     aba:	46bd      	mov	sp, r7
     abc:	bc90      	pop	{r4, r7}
     abe:	4770      	bx	lr

00000ac0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     ac0:	b480      	push	{r7}
     ac2:	b087      	sub	sp, #28
     ac4:	af00      	add	r7, sp, #0
     ac6:	6078      	str	r0, [r7, #4]
     ac8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     aca:	2300      	movs	r3, #0
     acc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     ace:	2300      	movs	r3, #0
     ad0:	613b      	str	r3, [r7, #16]
     ad2:	2300      	movs	r3, #0
     ad4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	781b      	ldrb	r3, [r3, #0]
     ada:	2b2d      	cmp	r3, #45	; 0x2d
     adc:	d11b      	bne.n	b16 <decstr_to_int+0x56>
    {
        bNeg = true;
     ade:	2301      	movs	r3, #1
     ae0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	3301      	adds	r3, #1
     ae6:	607b      	str	r3, [r7, #4]
        uCnt++;
     ae8:	68fb      	ldr	r3, [r7, #12]
     aea:	3301      	adds	r3, #1
     aec:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     aee:	e012      	b.n	b16 <decstr_to_int+0x56>
    {
        ++uCnt;
     af0:	68fb      	ldr	r3, [r7, #12]
     af2:	3301      	adds	r3, #1
     af4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     af6:	693a      	ldr	r2, [r7, #16]
     af8:	4613      	mov	r3, r2
     afa:	009b      	lsls	r3, r3, #2
     afc:	4413      	add	r3, r2
     afe:	005b      	lsls	r3, r3, #1
     b00:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	461a      	mov	r2, r3
     b08:	693b      	ldr	r3, [r7, #16]
     b0a:	4413      	add	r3, r2
     b0c:	3b30      	subs	r3, #48	; 0x30
     b0e:	613b      	str	r3, [r7, #16]
        pcStr++;
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	3301      	adds	r3, #1
     b14:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b2f      	cmp	r3, #47	; 0x2f
     b1c:	d903      	bls.n	b26 <decstr_to_int+0x66>
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b39      	cmp	r3, #57	; 0x39
     b24:	d9e4      	bls.n	af0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	2b00      	cmp	r3, #0
     b2a:	d002      	beq.n	b32 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     b2c:	683b      	ldr	r3, [r7, #0]
     b2e:	68fa      	ldr	r2, [r7, #12]
     b30:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     b32:	7dfb      	ldrb	r3, [r7, #23]
     b34:	2b00      	cmp	r3, #0
     b36:	d002      	beq.n	b3e <decstr_to_int+0x7e>
     b38:	693b      	ldr	r3, [r7, #16]
     b3a:	425b      	negs	r3, r3
     b3c:	e000      	b.n	b40 <decstr_to_int+0x80>
     b3e:	693b      	ldr	r3, [r7, #16]
}
     b40:	4618      	mov	r0, r3
     b42:	371c      	adds	r7, #28
     b44:	46bd      	mov	sp, r7
     b46:	f85d 7b04 	ldr.w	r7, [sp], #4
     b4a:	4770      	bx	lr

00000b4c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     b4c:	b590      	push	{r4, r7, lr}
     b4e:	b091      	sub	sp, #68	; 0x44
     b50:	af00      	add	r7, sp, #0
     b52:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b56:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     b58:	2300      	movs	r3, #0
     b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
     b5c:	2300      	movs	r3, #0
     b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     b64:	f7ff fe6a 	bl	83c <divu64_10>
     b68:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     b6c:	68b9      	ldr	r1, [r7, #8]
     b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b70:	4613      	mov	r3, r2
     b72:	009b      	lsls	r3, r3, #2
     b74:	4413      	add	r3, r2
     b76:	005b      	lsls	r3, r3, #1
     b78:	1acb      	subs	r3, r1, r3
     b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b7e:	1c5a      	adds	r2, r3, #1
     b80:	63fa      	str	r2, [r7, #60]	; 0x3c
     b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b84:	b2d2      	uxtb	r2, r2
     b86:	3230      	adds	r2, #48	; 0x30
     b88:	b2d2      	uxtb	r2, r2
     b8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     b8e:	440b      	add	r3, r1
     b90:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     b94:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b98:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     b9c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     ba0:	4323      	orrs	r3, r4
     ba2:	d1dd      	bne.n	b60 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ba6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	2b00      	cmp	r3, #0
     bac:	d011      	beq.n	bd2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     bae:	e008      	b.n	bc2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	1c5a      	adds	r2, r3, #1
     bb4:	607a      	str	r2, [r7, #4]
     bb6:	f107 0110 	add.w	r1, r7, #16
     bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     bbc:	440a      	add	r2, r1
     bbe:	7812      	ldrb	r2, [r2, #0]
     bc0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bc4:	1e5a      	subs	r2, r3, #1
     bc6:	63fa      	str	r2, [r7, #60]	; 0x3c
     bc8:	2b00      	cmp	r3, #0
     bca:	d1f1      	bne.n	bb0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	2200      	movs	r2, #0
     bd0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     bd4:	4618      	mov	r0, r3
     bd6:	3744      	adds	r7, #68	; 0x44
     bd8:	46bd      	mov	sp, r7
     bda:	bd90      	pop	{r4, r7, pc}

00000bdc <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     bdc:	b4b0      	push	{r4, r5, r7}
     bde:	b08d      	sub	sp, #52	; 0x34
     be0:	af00      	add	r7, sp, #0
     be2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     be6:	607a      	str	r2, [r7, #4]
     be8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     bea:	2300      	movs	r3, #0
     bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bf2:	4313      	orrs	r3, r2
     bf4:	d131      	bne.n	c5a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf8:	1c5a      	adds	r2, r3, #1
     bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
     bfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     c00:	4413      	add	r3, r2
     c02:	2230      	movs	r2, #48	; 0x30
     c04:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     c08:	e027      	b.n	c5a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     c0a:	7a3b      	ldrb	r3, [r7, #8]
     c0c:	f003 030f 	and.w	r3, r3, #15
     c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     c14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c18:	2b09      	cmp	r3, #9
     c1a:	d90a      	bls.n	c32 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     c1c:	78fb      	ldrb	r3, [r7, #3]
     c1e:	2b00      	cmp	r3, #0
     c20:	d001      	beq.n	c26 <uint64_to_hexstr+0x4a>
     c22:	2227      	movs	r2, #39	; 0x27
     c24:	e000      	b.n	c28 <uint64_to_hexstr+0x4c>
     c26:	2207      	movs	r2, #7
     c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c2c:	4413      	add	r3, r2
     c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c34:	1c5a      	adds	r2, r3, #1
     c36:	62fa      	str	r2, [r7, #44]	; 0x2c
     c38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     c3c:	3230      	adds	r2, #48	; 0x30
     c3e:	b2d2      	uxtb	r2, r2
     c40:	f107 0130 	add.w	r1, r7, #48	; 0x30
     c44:	440b      	add	r3, r1
     c46:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c4e:	0914      	lsrs	r4, r2, #4
     c50:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     c54:	091d      	lsrs	r5, r3, #4
     c56:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c5e:	4313      	orrs	r3, r2
     c60:	d1d3      	bne.n	c0a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c64:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	2b00      	cmp	r3, #0
     c6a:	d011      	beq.n	c90 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     c6c:	e008      	b.n	c80 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	1c5a      	adds	r2, r3, #1
     c72:	607a      	str	r2, [r7, #4]
     c74:	f107 0110 	add.w	r1, r7, #16
     c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c7a:	440a      	add	r2, r1
     c7c:	7812      	ldrb	r2, [r2, #0]
     c7e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c82:	1e5a      	subs	r2, r3, #1
     c84:	62fa      	str	r2, [r7, #44]	; 0x2c
     c86:	2b00      	cmp	r3, #0
     c88:	d1f1      	bne.n	c6e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	2200      	movs	r2, #0
     c8e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     c92:	4618      	mov	r0, r3
     c94:	3734      	adds	r7, #52	; 0x34
     c96:	46bd      	mov	sp, r7
     c98:	bcb0      	pop	{r4, r5, r7}
     c9a:	4770      	bx	lr

00000c9c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     c9c:	b480      	push	{r7}
     c9e:	b085      	sub	sp, #20
     ca0:	af00      	add	r7, sp, #0
     ca2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     ca4:	2300      	movs	r3, #0
     ca6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	2b00      	cmp	r3, #0
     cac:	d104      	bne.n	cb8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	e009      	b.n	cc6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     cb2:	68fb      	ldr	r3, [r7, #12]
     cb4:	3301      	adds	r3, #1
     cb6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	1c5a      	adds	r2, r3, #1
     cbc:	607a      	str	r2, [r7, #4]
     cbe:	781b      	ldrb	r3, [r3, #0]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d1f6      	bne.n	cb2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     cc4:	68fb      	ldr	r3, [r7, #12]
}
     cc6:	4618      	mov	r0, r3
     cc8:	3714      	adds	r7, #20
     cca:	46bd      	mov	sp, r7
     ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop

00000cd4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     cd4:	b480      	push	{r7}
     cd6:	b087      	sub	sp, #28
     cd8:	af00      	add	r7, sp, #0
     cda:	60f8      	str	r0, [r7, #12]
     cdc:	460b      	mov	r3, r1
     cde:	607a      	str	r2, [r7, #4]
     ce0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     ce2:	2300      	movs	r3, #0
     ce4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	2b00      	cmp	r3, #0
     cea:	dc0c      	bgt.n	d06 <padbuffer+0x32>
    {
        return i32Cnt;
     cec:	697b      	ldr	r3, [r7, #20]
     cee:	e010      	b.n	d12 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     cf0:	68fb      	ldr	r3, [r7, #12]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d004      	beq.n	d00 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	1c5a      	adds	r2, r3, #1
     cfa:	60fa      	str	r2, [r7, #12]
     cfc:	7afa      	ldrb	r2, [r7, #11]
     cfe:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     d00:	697b      	ldr	r3, [r7, #20]
     d02:	3301      	adds	r3, #1
     d04:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	1e5a      	subs	r2, r3, #1
     d0a:	607a      	str	r2, [r7, #4]
     d0c:	2b00      	cmp	r3, #0
     d0e:	d1ef      	bne.n	cf0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     d10:	697b      	ldr	r3, [r7, #20]
}
     d12:	4618      	mov	r0, r3
     d14:	371c      	adds	r7, #28
     d16:	46bd      	mov	sp, r7
     d18:	f85d 7b04 	ldr.w	r7, [sp], #4
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop

00000d20 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b08f      	sub	sp, #60	; 0x3c
     d24:	af00      	add	r7, sp, #0
     d26:	60f8      	str	r0, [r7, #12]
     d28:	60b9      	str	r1, [r7, #8]
     d2a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     d2c:	68bb      	ldr	r3, [r7, #8]
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d34:	2b03      	cmp	r3, #3
     d36:	dc02      	bgt.n	d3e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     d38:	f06f 0302 	mvn.w	r3, #2
     d3c:	e0d4      	b.n	ee8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     d3e:	edd7 7a03 	vldr	s15, [r7, #12]
     d42:	eef5 7a40 	vcmp.f32	s15, #0.0
     d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d4a:	d104      	bne.n	d56 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     d4c:	68bb      	ldr	r3, [r7, #8]
     d4e:	4a68      	ldr	r2, [pc, #416]	; (ef0 <ftoa+0x1d0>)
     d50:	601a      	str	r2, [r3, #0]
        return 3;
     d52:	2303      	movs	r3, #3
     d54:	e0c8      	b.n	ee8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     d56:	68bb      	ldr	r3, [r7, #8]
     d58:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     d5a:	68fb      	ldr	r3, [r7, #12]
     d5c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     d5e:	697b      	ldr	r3, [r7, #20]
     d60:	15db      	asrs	r3, r3, #23
     d62:	b2db      	uxtb	r3, r3
     d64:	3b7f      	subs	r3, #127	; 0x7f
     d66:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     d68:	697b      	ldr	r3, [r7, #20]
     d6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d72:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     d74:	2300      	movs	r3, #0
     d76:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     d78:	2300      	movs	r3, #0
     d7a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     d7c:	6a3b      	ldr	r3, [r7, #32]
     d7e:	2b1e      	cmp	r3, #30
     d80:	dd02      	ble.n	d88 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     d82:	f06f 0301 	mvn.w	r3, #1
     d86:	e0af      	b.n	ee8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     d88:	6a3b      	ldr	r3, [r7, #32]
     d8a:	f113 0f17 	cmn.w	r3, #23
     d8e:	da02      	bge.n	d96 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     d90:	f04f 33ff 	mov.w	r3, #4294967295
     d94:	e0a8      	b.n	ee8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     d96:	6a3b      	ldr	r3, [r7, #32]
     d98:	2b16      	cmp	r3, #22
     d9a:	dd06      	ble.n	daa <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     d9c:	6a3b      	ldr	r3, [r7, #32]
     d9e:	3b17      	subs	r3, #23
     da0:	69fa      	ldr	r2, [r7, #28]
     da2:	fa02 f303 	lsl.w	r3, r2, r3
     da6:	637b      	str	r3, [r7, #52]	; 0x34
     da8:	e01a      	b.n	de0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     daa:	6a3b      	ldr	r3, [r7, #32]
     dac:	2b00      	cmp	r3, #0
     dae:	db0f      	blt.n	dd0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     db0:	6a3b      	ldr	r3, [r7, #32]
     db2:	f1c3 0317 	rsb	r3, r3, #23
     db6:	69fa      	ldr	r2, [r7, #28]
     db8:	fa42 f303 	asr.w	r3, r2, r3
     dbc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     dbe:	6a3b      	ldr	r3, [r7, #32]
     dc0:	3301      	adds	r3, #1
     dc2:	69fa      	ldr	r2, [r7, #28]
     dc4:	fa02 f303 	lsl.w	r3, r2, r3
     dc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     dcc:	633b      	str	r3, [r7, #48]	; 0x30
     dce:	e007      	b.n	de0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     dd0:	69fb      	ldr	r3, [r7, #28]
     dd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     dd6:	6a3b      	ldr	r3, [r7, #32]
     dd8:	43db      	mvns	r3, r3
     dda:	fa42 f303 	asr.w	r3, r2, r3
     dde:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     de0:	697b      	ldr	r3, [r7, #20]
     de2:	2b00      	cmp	r3, #0
     de4:	da04      	bge.n	df0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     de6:	68bb      	ldr	r3, [r7, #8]
     de8:	1c5a      	adds	r2, r3, #1
     dea:	60ba      	str	r2, [r7, #8]
     dec:	222d      	movs	r2, #45	; 0x2d
     dee:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     df2:	2b00      	cmp	r3, #0
     df4:	d105      	bne.n	e02 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     df6:	68bb      	ldr	r3, [r7, #8]
     df8:	1c5a      	adds	r2, r3, #1
     dfa:	60ba      	str	r2, [r7, #8]
     dfc:	2230      	movs	r2, #48	; 0x30
     dfe:	701a      	strb	r2, [r3, #0]
     e00:	e021      	b.n	e46 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e04:	2b00      	cmp	r3, #0
     e06:	dd08      	ble.n	e1a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e0e:	68ba      	ldr	r2, [r7, #8]
     e10:	4618      	mov	r0, r3
     e12:	4621      	mov	r1, r4
     e14:	f7ff fe9a 	bl	b4c <uint64_to_str>
     e18:	e011      	b.n	e3e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	60ba      	str	r2, [r7, #8]
     e20:	222d      	movs	r2, #45	; 0x2d
     e22:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e26:	425b      	negs	r3, r3
     e28:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e2c:	68ba      	ldr	r2, [r7, #8]
     e2e:	4618      	mov	r0, r3
     e30:	4621      	mov	r1, r4
     e32:	f7ff fe8b 	bl	b4c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     e36:	e002      	b.n	e3e <ftoa+0x11e>
        {
            pcBuf++;
     e38:	68bb      	ldr	r3, [r7, #8]
     e3a:	3301      	adds	r3, #1
     e3c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     e3e:	68bb      	ldr	r3, [r7, #8]
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	2b00      	cmp	r3, #0
     e44:	d1f8      	bne.n	e38 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     e46:	68bb      	ldr	r3, [r7, #8]
     e48:	1c5a      	adds	r2, r3, #1
     e4a:	60ba      	str	r2, [r7, #8]
     e4c:	222e      	movs	r2, #46	; 0x2e
     e4e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e52:	2b00      	cmp	r3, #0
     e54:	d105      	bne.n	e62 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     e56:	68bb      	ldr	r3, [r7, #8]
     e58:	1c5a      	adds	r2, r3, #1
     e5a:	60ba      	str	r2, [r7, #8]
     e5c:	2230      	movs	r2, #48	; 0x30
     e5e:	701a      	strb	r2, [r3, #0]
     e60:	e03c      	b.n	edc <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     e62:	68ba      	ldr	r2, [r7, #8]
     e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e66:	1ad3      	subs	r3, r2, r3
     e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e6a:	1ad3      	subs	r3, r2, r3
     e6c:	3b01      	subs	r3, #1
     e6e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     e70:	69ba      	ldr	r2, [r7, #24]
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	4293      	cmp	r3, r2
     e76:	bfa8      	it	ge
     e78:	4613      	movge	r3, r2
     e7a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     e7c:	2300      	movs	r3, #0
     e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
     e80:	e015      	b.n	eae <ftoa+0x18e>
        {
            i32FracPart *= 10;
     e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e84:	4613      	mov	r3, r2
     e86:	009b      	lsls	r3, r3, #2
     e88:	4413      	add	r3, r2
     e8a:	005b      	lsls	r3, r3, #1
     e8c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     e8e:	68bb      	ldr	r3, [r7, #8]
     e90:	1c5a      	adds	r2, r3, #1
     e92:	60ba      	str	r2, [r7, #8]
     e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e96:	1612      	asrs	r2, r2, #24
     e98:	b2d2      	uxtb	r2, r2
     e9a:	3230      	adds	r2, #48	; 0x30
     e9c:	b2d2      	uxtb	r2, r2
     e9e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ea2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ea6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eaa:	3301      	adds	r3, #1
     eac:	62fb      	str	r3, [r7, #44]	; 0x2c
     eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     eb0:	69bb      	ldr	r3, [r7, #24]
     eb2:	429a      	cmp	r2, r3
     eb4:	dbe5      	blt.n	e82 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     eb6:	68bb      	ldr	r3, [r7, #8]
     eb8:	3b01      	subs	r3, #1
     eba:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     ebc:	e002      	b.n	ec4 <ftoa+0x1a4>
        {
            --pcBuf;
     ebe:	68bb      	ldr	r3, [r7, #8]
     ec0:	3b01      	subs	r3, #1
     ec2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     ec4:	68bb      	ldr	r3, [r7, #8]
     ec6:	781b      	ldrb	r3, [r3, #0]
     ec8:	2b30      	cmp	r3, #48	; 0x30
     eca:	d104      	bne.n	ed6 <ftoa+0x1b6>
     ecc:	68bb      	ldr	r3, [r7, #8]
     ece:	3b01      	subs	r3, #1
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b2e      	cmp	r3, #46	; 0x2e
     ed4:	d1f3      	bne.n	ebe <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     ed6:	68bb      	ldr	r3, [r7, #8]
     ed8:	3301      	adds	r3, #1
     eda:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	2200      	movs	r2, #0
     ee0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     ee2:	68ba      	ldr	r2, [r7, #8]
     ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ee6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     ee8:	4618      	mov	r0, r3
     eea:	373c      	adds	r7, #60	; 0x3c
     eec:	46bd      	mov	sp, r7
     eee:	bd90      	pop	{r4, r7, pc}
     ef0:	00302e30 	.word	0x00302e30

00000ef4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ef4:	b590      	push	{r4, r7, lr}
     ef6:	b095      	sub	sp, #84	; 0x54
     ef8:	af00      	add	r7, sp, #0
     efa:	60f8      	str	r0, [r7, #12]
     efc:	60b9      	str	r1, [r7, #8]
     efe:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     f00:	2300      	movs	r3, #0
     f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     f04:	2300      	movs	r3, #0
     f06:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     f08:	e2e3      	b.n	14d2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     f0a:	2306      	movs	r3, #6
     f0c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     f0e:	68bb      	ldr	r3, [r7, #8]
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	2b25      	cmp	r3, #37	; 0x25
     f14:	d01f      	beq.n	f56 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	2b00      	cmp	r3, #0
     f1a:	d015      	beq.n	f48 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     f1c:	68bb      	ldr	r3, [r7, #8]
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2b0a      	cmp	r3, #10
     f22:	d10b      	bne.n	f3c <am_util_stdio_vsprintf+0x48>
     f24:	4bb1      	ldr	r3, [pc, #708]	; (11ec <am_util_stdio_vsprintf+0x2f8>)
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	2b00      	cmp	r3, #0
     f2a:	d007      	beq.n	f3c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	60fa      	str	r2, [r7, #12]
     f32:	220d      	movs	r2, #13
     f34:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f38:	3301      	adds	r3, #1
     f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	1c5a      	adds	r2, r3, #1
     f40:	60fa      	str	r2, [r7, #12]
     f42:	68ba      	ldr	r2, [r7, #8]
     f44:	7812      	ldrb	r2, [r2, #0]
     f46:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	3301      	adds	r3, #1
     f4c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f50:	3301      	adds	r3, #1
     f52:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     f54:	e2bd      	b.n	14d2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     f56:	68bb      	ldr	r3, [r7, #8]
     f58:	3301      	adds	r3, #1
     f5a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     f5c:	2300      	movs	r3, #0
     f5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     f62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     f6a:	2320      	movs	r3, #32
     f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     f70:	68bb      	ldr	r3, [r7, #8]
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	2b30      	cmp	r3, #48	; 0x30
     f76:	d105      	bne.n	f84 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     f78:	2330      	movs	r3, #48	; 0x30
     f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     f7e:	68bb      	ldr	r3, [r7, #8]
     f80:	3301      	adds	r3, #1
     f82:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     f84:	f107 0310 	add.w	r3, r7, #16
     f88:	4619      	mov	r1, r3
     f8a:	68b8      	ldr	r0, [r7, #8]
     f8c:	f7ff fd98 	bl	ac0 <decstr_to_int>
     f90:	4603      	mov	r3, r0
     f92:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     f94:	693b      	ldr	r3, [r7, #16]
     f96:	68ba      	ldr	r2, [r7, #8]
     f98:	4413      	add	r3, r2
     f9a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     f9c:	68bb      	ldr	r3, [r7, #8]
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b73      	cmp	r3, #115	; 0x73
     fa2:	d005      	beq.n	fb0 <am_util_stdio_vsprintf+0xbc>
     fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa6:	2b00      	cmp	r3, #0
     fa8:	da02      	bge.n	fb0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fac:	425b      	negs	r3, r3
     fae:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     fb0:	68bb      	ldr	r3, [r7, #8]
     fb2:	781b      	ldrb	r3, [r3, #0]
     fb4:	2b2e      	cmp	r3, #46	; 0x2e
     fb6:	d10e      	bne.n	fd6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     fb8:	68bb      	ldr	r3, [r7, #8]
     fba:	3301      	adds	r3, #1
     fbc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     fbe:	f107 0310 	add.w	r3, r7, #16
     fc2:	4619      	mov	r1, r3
     fc4:	68b8      	ldr	r0, [r7, #8]
     fc6:	f7ff fd7b 	bl	ac0 <decstr_to_int>
     fca:	4603      	mov	r3, r0
     fcc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     fce:	693b      	ldr	r3, [r7, #16]
     fd0:	68ba      	ldr	r2, [r7, #8]
     fd2:	4413      	add	r3, r2
     fd4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     fd6:	68bb      	ldr	r3, [r7, #8]
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	2b6c      	cmp	r3, #108	; 0x6c
     fdc:	d10c      	bne.n	ff8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     fde:	68bb      	ldr	r3, [r7, #8]
     fe0:	3301      	adds	r3, #1
     fe2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     fe4:	68bb      	ldr	r3, [r7, #8]
     fe6:	781b      	ldrb	r3, [r3, #0]
     fe8:	2b6c      	cmp	r3, #108	; 0x6c
     fea:	d105      	bne.n	ff8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     fec:	68bb      	ldr	r3, [r7, #8]
     fee:	3301      	adds	r3, #1
     ff0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     ff2:	2301      	movs	r3, #1
     ff4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     ff8:	68bb      	ldr	r3, [r7, #8]
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	3b46      	subs	r3, #70	; 0x46
     ffe:	2b32      	cmp	r3, #50	; 0x32
    1000:	f200 8254 	bhi.w	14ac <am_util_stdio_vsprintf+0x5b8>
    1004:	a201      	add	r2, pc, #4	; (adr r2, 100c <am_util_stdio_vsprintf+0x118>)
    1006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    100a:	bf00      	nop
    100c:	00001437 	.word	0x00001437
    1010:	000014ad 	.word	0x000014ad
    1014:	000014ad 	.word	0x000014ad
    1018:	000014ad 	.word	0x000014ad
    101c:	000014ad 	.word	0x000014ad
    1020:	000014ad 	.word	0x000014ad
    1024:	000014ad 	.word	0x000014ad
    1028:	000014ad 	.word	0x000014ad
    102c:	000014ad 	.word	0x000014ad
    1030:	000014ad 	.word	0x000014ad
    1034:	000014ad 	.word	0x000014ad
    1038:	000014ad 	.word	0x000014ad
    103c:	000014ad 	.word	0x000014ad
    1040:	000014ad 	.word	0x000014ad
    1044:	000014ad 	.word	0x000014ad
    1048:	000014ad 	.word	0x000014ad
    104c:	000014ad 	.word	0x000014ad
    1050:	000014ad 	.word	0x000014ad
    1054:	000011d3 	.word	0x000011d3
    1058:	000014ad 	.word	0x000014ad
    105c:	000014ad 	.word	0x000014ad
    1060:	000014ad 	.word	0x000014ad
    1064:	000014ad 	.word	0x000014ad
    1068:	000014ad 	.word	0x000014ad
    106c:	000014ad 	.word	0x000014ad
    1070:	000014ad 	.word	0x000014ad
    1074:	000014ad 	.word	0x000014ad
    1078:	000014ad 	.word	0x000014ad
    107c:	000014ad 	.word	0x000014ad
    1080:	000010d9 	.word	0x000010d9
    1084:	000012ff 	.word	0x000012ff
    1088:	000014ad 	.word	0x000014ad
    108c:	00001437 	.word	0x00001437
    1090:	000014ad 	.word	0x000014ad
    1094:	000014ad 	.word	0x000014ad
    1098:	000012ff 	.word	0x000012ff
    109c:	000014ad 	.word	0x000014ad
    10a0:	000014ad 	.word	0x000014ad
    10a4:	000014ad 	.word	0x000014ad
    10a8:	000014ad 	.word	0x000014ad
    10ac:	000014ad 	.word	0x000014ad
    10b0:	000014ad 	.word	0x000014ad
    10b4:	000014ad 	.word	0x000014ad
    10b8:	000014ad 	.word	0x000014ad
    10bc:	000014ad 	.word	0x000014ad
    10c0:	000010ff 	.word	0x000010ff
    10c4:	000014ad 	.word	0x000014ad
    10c8:	0000126d 	.word	0x0000126d
    10cc:	000014ad 	.word	0x000014ad
    10d0:	000014ad 	.word	0x000014ad
    10d4:	000011cd 	.word	0x000011cd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	1d1a      	adds	r2, r3, #4
    10dc:	607a      	str	r2, [r7, #4]
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d005      	beq.n	10f6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	1c5a      	adds	r2, r3, #1
    10ee:	60fa      	str	r2, [r7, #12]
    10f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    10f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10f8:	3301      	adds	r3, #1
    10fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10fc:	e1e6      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	1d1a      	adds	r2, r3, #4
    1102:	607a      	str	r2, [r7, #4]
    1104:	681b      	ldr	r3, [r3, #0]
    1106:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1108:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    110a:	f7ff fdc7 	bl	c9c <simple_strlen>
    110e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1112:	2b00      	cmp	r3, #0
    1114:	dd2e      	ble.n	1174 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    111a:	429a      	cmp	r2, r3
    111c:	d22a      	bcs.n	1174 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    111e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1122:	1ad3      	subs	r3, r2, r3
    1124:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    112a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    112c:	4619      	mov	r1, r3
    112e:	68f8      	ldr	r0, [r7, #12]
    1130:	f7ff fdd0 	bl	cd4 <padbuffer>
    1134:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1136:	68fb      	ldr	r3, [r7, #12]
    1138:	2b00      	cmp	r3, #0
    113a:	d001      	beq.n	1140 <am_util_stdio_vsprintf+0x24c>
    113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113e:	e000      	b.n	1142 <am_util_stdio_vsprintf+0x24e>
    1140:	2300      	movs	r3, #0
    1142:	68fa      	ldr	r2, [r7, #12]
    1144:	4413      	add	r3, r2
    1146:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    114c:	4413      	add	r3, r2
    114e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1150:	2300      	movs	r3, #0
    1152:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1154:	e00e      	b.n	1174 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	2b00      	cmp	r3, #0
    115a:	d005      	beq.n	1168 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    115c:	68fb      	ldr	r3, [r7, #12]
    115e:	1c5a      	adds	r2, r3, #1
    1160:	60fa      	str	r2, [r7, #12]
    1162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1164:	7812      	ldrb	r2, [r2, #0]
    1166:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    116a:	3301      	adds	r3, #1
    116c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1170:	3301      	adds	r3, #1
    1172:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	2b00      	cmp	r3, #0
    117a:	d1ec      	bne.n	1156 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117e:	2b00      	cmp	r3, #0
    1180:	f000 81a1 	beq.w	14c6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1186:	425b      	negs	r3, r3
    1188:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    118c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    118e:	429a      	cmp	r2, r3
    1190:	f080 8199 	bcs.w	14c6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1194:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1198:	1ad3      	subs	r3, r2, r3
    119a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    119c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11a2:	4619      	mov	r1, r3
    11a4:	68f8      	ldr	r0, [r7, #12]
    11a6:	f7ff fd95 	bl	cd4 <padbuffer>
    11aa:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d001      	beq.n	11b6 <am_util_stdio_vsprintf+0x2c2>
    11b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b4:	e000      	b.n	11b8 <am_util_stdio_vsprintf+0x2c4>
    11b6:	2300      	movs	r3, #0
    11b8:	68fa      	ldr	r2, [r7, #12]
    11ba:	4413      	add	r3, r2
    11bc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    11be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11c2:	4413      	add	r3, r2
    11c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    11c6:	2300      	movs	r3, #0
    11c8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    11ca:	e17c      	b.n	14c6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    11cc:	2301      	movs	r3, #1
    11ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    11d6:	2b00      	cmp	r3, #0
    11d8:	d00a      	beq.n	11f0 <am_util_stdio_vsprintf+0x2fc>
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	3307      	adds	r3, #7
    11de:	f023 0307 	bic.w	r3, r3, #7
    11e2:	f103 0208 	add.w	r2, r3, #8
    11e6:	607a      	str	r2, [r7, #4]
    11e8:	cb18      	ldmia	r3, {r3, r4}
    11ea:	e007      	b.n	11fc <am_util_stdio_vsprintf+0x308>
    11ec:	10001178 	.word	0x10001178
                                      va_arg(pArgs, uint32_t);
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	1d1a      	adds	r2, r3, #4
    11f4:	607a      	str	r2, [r7, #4]
    11f6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11f8:	f04f 0400 	mov.w	r4, #0
    11fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1202:	2b00      	cmp	r3, #0
    1204:	d01e      	beq.n	1244 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1206:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    120a:	f7ff fc35 	bl	a78 <ndigits_in_hex>
    120e:	4602      	mov	r2, r0
    1210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1212:	1a9b      	subs	r3, r3, r2
    1214:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    121a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    121c:	4619      	mov	r1, r3
    121e:	68f8      	ldr	r0, [r7, #12]
    1220:	f7ff fd58 	bl	cd4 <padbuffer>
    1224:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	2b00      	cmp	r3, #0
    122a:	d001      	beq.n	1230 <am_util_stdio_vsprintf+0x33c>
    122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    122e:	e000      	b.n	1232 <am_util_stdio_vsprintf+0x33e>
    1230:	2300      	movs	r3, #0
    1232:	68fa      	ldr	r2, [r7, #12]
    1234:	4413      	add	r3, r2
    1236:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    123a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    123c:	4413      	add	r3, r2
    123e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1240:	2300      	movs	r3, #0
    1242:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1244:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1248:	68fa      	ldr	r2, [r7, #12]
    124a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    124e:	f7ff fcc5 	bl	bdc <uint64_to_hexstr>
    1252:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	2b00      	cmp	r3, #0
    1258:	d003      	beq.n	1262 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    125c:	68fa      	ldr	r2, [r7, #12]
    125e:	4413      	add	r3, r2
    1260:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1266:	4413      	add	r3, r2
    1268:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    126a:	e12f      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    126c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1270:	2b00      	cmp	r3, #0
    1272:	d008      	beq.n	1286 <am_util_stdio_vsprintf+0x392>
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	3307      	adds	r3, #7
    1278:	f023 0307 	bic.w	r3, r3, #7
    127c:	f103 0208 	add.w	r2, r3, #8
    1280:	607a      	str	r2, [r7, #4]
    1282:	cb18      	ldmia	r3, {r3, r4}
    1284:	e005      	b.n	1292 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	1d1a      	adds	r2, r3, #4
    128a:	607a      	str	r2, [r7, #4]
    128c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    128e:	f04f 0400 	mov.w	r4, #0
    1292:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1298:	2b00      	cmp	r3, #0
    129a:	d01e      	beq.n	12da <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    129c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12a0:	f7ff fbaa 	bl	9f8 <ndigits_in_u64>
    12a4:	4602      	mov	r2, r0
    12a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12a8:	1a9b      	subs	r3, r3, r2
    12aa:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    12ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12b2:	4619      	mov	r1, r3
    12b4:	68f8      	ldr	r0, [r7, #12]
    12b6:	f7ff fd0d 	bl	cd4 <padbuffer>
    12ba:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	2b00      	cmp	r3, #0
    12c0:	d001      	beq.n	12c6 <am_util_stdio_vsprintf+0x3d2>
    12c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12c4:	e000      	b.n	12c8 <am_util_stdio_vsprintf+0x3d4>
    12c6:	2300      	movs	r3, #0
    12c8:	68fa      	ldr	r2, [r7, #12]
    12ca:	4413      	add	r3, r2
    12cc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    12ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12d2:	4413      	add	r3, r2
    12d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    12d6:	2300      	movs	r3, #0
    12d8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    12da:	68fa      	ldr	r2, [r7, #12]
    12dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12e0:	f7ff fc34 	bl	b4c <uint64_to_str>
    12e4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d003      	beq.n	12f4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    12ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ee:	68fa      	ldr	r2, [r7, #12]
    12f0:	4413      	add	r3, r2
    12f2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12f8:	4413      	add	r3, r2
    12fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12fc:	e0e6      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1302:	2b00      	cmp	r3, #0
    1304:	d008      	beq.n	1318 <am_util_stdio_vsprintf+0x424>
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	3307      	adds	r3, #7
    130a:	f023 0307 	bic.w	r3, r3, #7
    130e:	f103 0208 	add.w	r2, r3, #8
    1312:	607a      	str	r2, [r7, #4]
    1314:	cb18      	ldmia	r3, {r3, r4}
    1316:	e005      	b.n	1324 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	1d1a      	adds	r2, r3, #4
    131c:	607a      	str	r2, [r7, #4]
    131e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1320:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1324:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1328:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    132c:	2b00      	cmp	r3, #0
    132e:	f174 0300 	sbcs.w	r3, r4, #0
    1332:	da0a      	bge.n	134a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1334:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1338:	425b      	negs	r3, r3
    133a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    133e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1342:	2301      	movs	r3, #1
    1344:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1348:	e006      	b.n	1358 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    134a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    134e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1352:	2300      	movs	r3, #0
    1354:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    135a:	2b00      	cmp	r3, #0
    135c:	d04a      	beq.n	13f4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    135e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1362:	4618      	mov	r0, r3
    1364:	4621      	mov	r1, r4
    1366:	f7ff fb69 	bl	a3c <ndigits_in_i64>
    136a:	4602      	mov	r2, r0
    136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    136e:	1a9b      	subs	r3, r3, r2
    1370:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1372:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1376:	2b00      	cmp	r3, #0
    1378:	d011      	beq.n	139e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    137c:	3b01      	subs	r3, #1
    137e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1384:	2b30      	cmp	r3, #48	; 0x30
    1386:	d10a      	bne.n	139e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2b00      	cmp	r3, #0
    138c:	d004      	beq.n	1398 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	1c5a      	adds	r2, r3, #1
    1392:	60fa      	str	r2, [r7, #12]
    1394:	222d      	movs	r2, #45	; 0x2d
    1396:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    139a:	3301      	adds	r3, #1
    139c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13a4:	4619      	mov	r1, r3
    13a6:	68f8      	ldr	r0, [r7, #12]
    13a8:	f7ff fc94 	bl	cd4 <padbuffer>
    13ac:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d001      	beq.n	13b8 <am_util_stdio_vsprintf+0x4c4>
    13b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13b6:	e000      	b.n	13ba <am_util_stdio_vsprintf+0x4c6>
    13b8:	2300      	movs	r3, #0
    13ba:	68fa      	ldr	r2, [r7, #12]
    13bc:	4413      	add	r3, r2
    13be:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    13c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13c4:	4413      	add	r3, r2
    13c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    13c8:	2300      	movs	r3, #0
    13ca:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    13cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13d0:	2b00      	cmp	r3, #0
    13d2:	d01e      	beq.n	1412 <am_util_stdio_vsprintf+0x51e>
    13d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13d8:	2b20      	cmp	r3, #32
    13da:	d11a      	bne.n	1412 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	2b00      	cmp	r3, #0
    13e0:	d004      	beq.n	13ec <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	1c5a      	adds	r2, r3, #1
    13e6:	60fa      	str	r2, [r7, #12]
    13e8:	222d      	movs	r2, #45	; 0x2d
    13ea:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    13ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ee:	3301      	adds	r3, #1
    13f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    13f2:	e00e      	b.n	1412 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    13f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13f8:	2b00      	cmp	r3, #0
    13fa:	d00a      	beq.n	1412 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    13fc:	68fb      	ldr	r3, [r7, #12]
    13fe:	2b00      	cmp	r3, #0
    1400:	d004      	beq.n	140c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	1c5a      	adds	r2, r3, #1
    1406:	60fa      	str	r2, [r7, #12]
    1408:	222d      	movs	r2, #45	; 0x2d
    140a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    140c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    140e:	3301      	adds	r3, #1
    1410:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1412:	68fa      	ldr	r2, [r7, #12]
    1414:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1418:	f7ff fb98 	bl	b4c <uint64_to_str>
    141c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	2b00      	cmp	r3, #0
    1422:	d003      	beq.n	142c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1426:	68fa      	ldr	r2, [r7, #12]
    1428:	4413      	add	r3, r2
    142a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    142e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1430:	4413      	add	r3, r2
    1432:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1434:	e04a      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	2b00      	cmp	r3, #0
    143a:	d046      	beq.n	14ca <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	3307      	adds	r3, #7
    1440:	f023 0307 	bic.w	r3, r3, #7
    1444:	f103 0208 	add.w	r2, r3, #8
    1448:	607a      	str	r2, [r7, #4]
    144a:	cb18      	ldmia	r3, {r3, r4}
    144c:	4618      	mov	r0, r3
    144e:	4621      	mov	r1, r4
    1450:	f7fe fe36 	bl	c0 <__aeabi_d2f>
    1454:	4603      	mov	r3, r0
    1456:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	2214      	movs	r2, #20
    145c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    145e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1460:	68f9      	ldr	r1, [r7, #12]
    1462:	6978      	ldr	r0, [r7, #20]
    1464:	f7ff fc5c 	bl	d20 <ftoa>
    1468:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    146c:	2b00      	cmp	r3, #0
    146e:	da14      	bge.n	149a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1472:	f1b3 3fff 	cmp.w	r3, #4294967295
    1476:	d102      	bne.n	147e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1478:	4b1e      	ldr	r3, [pc, #120]	; (14f4 <am_util_stdio_vsprintf+0x600>)
    147a:	62bb      	str	r3, [r7, #40]	; 0x28
    147c:	e008      	b.n	1490 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1480:	f113 0f02 	cmn.w	r3, #2
    1484:	d102      	bne.n	148c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1486:	4b1c      	ldr	r3, [pc, #112]	; (14f8 <am_util_stdio_vsprintf+0x604>)
    1488:	62bb      	str	r3, [r7, #40]	; 0x28
    148a:	e001      	b.n	1490 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    148c:	4b1b      	ldr	r3, [pc, #108]	; (14fc <am_util_stdio_vsprintf+0x608>)
    148e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1494:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1496:	2303      	movs	r3, #3
    1498:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    149c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    149e:	4413      	add	r3, r2
    14a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    14a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14a4:	68fa      	ldr	r2, [r7, #12]
    14a6:	4413      	add	r3, r2
    14a8:	60fb      	str	r3, [r7, #12]
                }
                break;
    14aa:	e00e      	b.n	14ca <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    14ac:	68fb      	ldr	r3, [r7, #12]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d005      	beq.n	14be <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	1c5a      	adds	r2, r3, #1
    14b6:	60fa      	str	r2, [r7, #12]
    14b8:	68ba      	ldr	r2, [r7, #8]
    14ba:	7812      	ldrb	r2, [r2, #0]
    14bc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    14be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14c0:	3301      	adds	r3, #1
    14c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14c4:	e002      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    14c6:	bf00      	nop
    14c8:	e000      	b.n	14cc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    14ca:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    14cc:	68bb      	ldr	r3, [r7, #8]
    14ce:	3301      	adds	r3, #1
    14d0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    14d2:	68bb      	ldr	r3, [r7, #8]
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	2b00      	cmp	r3, #0
    14d8:	f47f ad17 	bne.w	f0a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	2b00      	cmp	r3, #0
    14e0:	d002      	beq.n	14e8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	2200      	movs	r2, #0
    14e6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    14e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    14ea:	4618      	mov	r0, r3
    14ec:	3754      	adds	r7, #84	; 0x54
    14ee:	46bd      	mov	sp, r7
    14f0:	bd90      	pop	{r4, r7, pc}
    14f2:	bf00      	nop
    14f4:	00302e30 	.word	0x00302e30
    14f8:	00232e23 	.word	0x00232e23
    14fc:	003f2e3f 	.word	0x003f2e3f

00001500 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1500:	b40f      	push	{r0, r1, r2, r3}
    1502:	b580      	push	{r7, lr}
    1504:	b082      	sub	sp, #8
    1506:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1508:	f107 0314 	add.w	r3, r7, #20
    150c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    150e:	683a      	ldr	r2, [r7, #0]
    1510:	6939      	ldr	r1, [r7, #16]
    1512:	4808      	ldr	r0, [pc, #32]	; (1534 <am_util_stdio_printf+0x34>)
    1514:	f7ff fcee 	bl	ef4 <am_util_stdio_vsprintf>
    1518:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    151a:	4b07      	ldr	r3, [pc, #28]	; (1538 <am_util_stdio_printf+0x38>)
    151c:	681b      	ldr	r3, [r3, #0]
    151e:	4805      	ldr	r0, [pc, #20]	; (1534 <am_util_stdio_printf+0x34>)
    1520:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1522:	687b      	ldr	r3, [r7, #4]
}
    1524:	4618      	mov	r0, r3
    1526:	3708      	adds	r7, #8
    1528:	46bd      	mov	sp, r7
    152a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    152e:	b004      	add	sp, #16
    1530:	4770      	bx	lr
    1532:	bf00      	nop
    1534:	10001078 	.word	0x10001078
    1538:	1000118c 	.word	0x1000118c

0000153c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    153c:	b580      	push	{r7, lr}
    153e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1540:	4802      	ldr	r0, [pc, #8]	; (154c <am_util_stdio_terminal_clear+0x10>)
    1542:	f7ff ffdd 	bl	1500 <am_util_stdio_printf>
}
    1546:	bf00      	nop
    1548:	bd80      	pop	{r7, pc}
    154a:	bf00      	nop
    154c:	00002030 	.word	0x00002030

00001550 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1550:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1552:	f000 fb13 	bl	1b7c <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1556:	f000 fb7f 	bl	1c58 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    155a:	f000 fce9 	bl	1f30 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    155e:	2001      	movs	r0, #1
    1560:	f000 fb8a 	bl	1c78 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1564:	2001      	movs	r0, #1
    1566:	f000 f93b 	bl	17e0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    156e:	f000 bb91 	b.w	1c94 <am_hal_rtc_osc_disable>
    1572:	bf00      	nop

00001574 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1574:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1576:	4b17      	ldr	r3, [pc, #92]	; (15d4 <am_bsp_debug_printf_enable+0x60>)
    1578:	6818      	ldr	r0, [r3, #0]
    157a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    157e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1580:	d001      	beq.n	1586 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1582:	b007      	add	sp, #28
    1584:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1586:	4a14      	ldr	r2, [pc, #80]	; (15d8 <am_bsp_debug_printf_enable+0x64>)
    1588:	4914      	ldr	r1, [pc, #80]	; (15dc <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    158a:	4d15      	ldr	r5, [pc, #84]	; (15e0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    158c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    158e:	a806      	add	r0, sp, #24
    1590:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1594:	f000 fc70 	bl	1e78 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1598:	f3ef 8310 	mrs	r3, PRIMASK
    159c:	9300      	str	r3, [sp, #0]
    159e:	b672      	cpsid	i
    15a0:	4a10      	ldr	r2, [pc, #64]	; (15e4 <am_bsp_debug_printf_enable+0x70>)
    15a2:	4d11      	ldr	r5, [pc, #68]	; (15e8 <am_bsp_debug_printf_enable+0x74>)
    15a4:	4811      	ldr	r0, [pc, #68]	; (15ec <am_bsp_debug_printf_enable+0x78>)
    15a6:	4912      	ldr	r1, [pc, #72]	; (15f0 <am_bsp_debug_printf_enable+0x7c>)
    15a8:	2373      	movs	r3, #115	; 0x73
    15aa:	6013      	str	r3, [r2, #0]
    15ac:	682b      	ldr	r3, [r5, #0]
    15ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    15b2:	602b      	str	r3, [r5, #0]
    15b4:	6805      	ldr	r5, [r0, #0]
    15b6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    15ba:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    15be:	6003      	str	r3, [r0, #0]
    15c0:	6808      	ldr	r0, [r1, #0]
    15c2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    15c6:	600d      	str	r5, [r1, #0]
    15c8:	6014      	str	r4, [r2, #0]
    15ca:	9c00      	ldr	r4, [sp, #0]
    15cc:	f384 8810 	msr	PRIMASK, r4
}
    15d0:	b007      	add	sp, #28
    15d2:	bd30      	pop	{r4, r5, pc}
    15d4:	1000117c 	.word	0x1000117c
    15d8:	e0000e80 	.word	0xe0000e80
    15dc:	00150511 	.word	0x00150511
    15e0:	000f4240 	.word	0x000f4240
    15e4:	40010060 	.word	0x40010060
    15e8:	40010054 	.word	0x40010054
    15ec:	40010028 	.word	0x40010028
    15f0:	40010108 	.word	0x40010108

000015f4 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    15f4:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15f6:	4b15      	ldr	r3, [pc, #84]	; (164c <am_bsp_debug_printf_disable+0x58>)
    15f8:	6818      	ldr	r0, [r3, #0]
    15fa:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    15fe:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1600:	d121      	bne.n	1646 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1602:	f000 f96d 	bl	18e0 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1606:	f3ef 8110 	mrs	r1, PRIMASK
    160a:	9101      	str	r1, [sp, #4]
    160c:	b672      	cpsid	i
    160e:	4a10      	ldr	r2, [pc, #64]	; (1650 <am_bsp_debug_printf_disable+0x5c>)
    1610:	4d10      	ldr	r5, [pc, #64]	; (1654 <am_bsp_debug_printf_disable+0x60>)
    1612:	4811      	ldr	r0, [pc, #68]	; (1658 <am_bsp_debug_printf_disable+0x64>)
    1614:	4911      	ldr	r1, [pc, #68]	; (165c <am_bsp_debug_printf_disable+0x68>)
    1616:	2373      	movs	r3, #115	; 0x73
    1618:	6013      	str	r3, [r2, #0]
    161a:	682b      	ldr	r3, [r5, #0]
    161c:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1620:	f04c 0320 	orr.w	r3, ip, #32
    1624:	602b      	str	r3, [r5, #0]
    1626:	6805      	ldr	r5, [r0, #0]
    1628:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    162c:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1630:	6003      	str	r3, [r0, #0]
    1632:	6808      	ldr	r0, [r1, #0]
    1634:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1638:	600d      	str	r5, [r1, #0]
    163a:	6014      	str	r4, [r2, #0]
    163c:	9c01      	ldr	r4, [sp, #4]
    163e:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1642:	f000 fc6f 	bl	1f24 <am_hal_tpiu_disable>
}
    1646:	b003      	add	sp, #12
    1648:	bd30      	pop	{r4, r5, pc}
    164a:	bf00      	nop
    164c:	1000117c 	.word	0x1000117c
    1650:	40010060 	.word	0x40010060
    1654:	40010054 	.word	0x40010054
    1658:	40010028 	.word	0x40010028
    165c:	40010108 	.word	0x40010108

00001660 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1660:	f000 b948 	b.w	18f4 <am_hal_itm_print>

00001664 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1666:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1668:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    166c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    166e:	7863      	ldrb	r3, [r4, #1]
    1670:	78e2      	ldrb	r2, [r4, #3]
    1672:	7925      	ldrb	r5, [r4, #4]
    1674:	79a1      	ldrb	r1, [r4, #6]
    1676:	00be      	lsls	r6, r7, #2
    1678:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    167c:	f006 0304 	and.w	r3, r6, #4
    1680:	f00e 0602 	and.w	r6, lr, #2
    1684:	431e      	orrs	r6, r3
    1686:	f042 0201 	orr.w	r2, r2, #1
    168a:	79e3      	ldrb	r3, [r4, #7]
    168c:	01ed      	lsls	r5, r5, #7
    168e:	4316      	orrs	r6, r2
    1690:	b2ed      	uxtb	r5, r5
    1692:	7a22      	ldrb	r2, [r4, #8]
    1694:	0289      	lsls	r1, r1, #10
    1696:	432e      	orrs	r6, r5
    1698:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    169c:	7a65      	ldrb	r5, [r4, #9]
    169e:	02db      	lsls	r3, r3, #11
    16a0:	430e      	orrs	r6, r1
    16a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    16a6:	0312      	lsls	r2, r2, #12
    16a8:	7aa1      	ldrb	r1, [r4, #10]
    16aa:	431e      	orrs	r6, r3
    16ac:	042d      	lsls	r5, r5, #16
    16ae:	b293      	uxth	r3, r2
    16b0:	7ae2      	ldrb	r2, [r4, #11]
    16b2:	431e      	orrs	r6, r3
    16b4:	0509      	lsls	r1, r1, #20
    16b6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    16ba:	0612      	lsls	r2, r2, #24
    16bc:	4333      	orrs	r3, r6
    16be:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    16c2:	00bf      	lsls	r7, r7, #2
    16c4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    16c8:	4333      	orrs	r3, r6
    16ca:	430b      	orrs	r3, r1
    16cc:	f007 0508 	and.w	r5, r7, #8
    16d0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    16d2:	f000 f94b 	bl	196c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    16d6:	482c      	ldr	r0, [pc, #176]	; (1788 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16d8:	4b2c      	ldr	r3, [pc, #176]	; (178c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    16da:	6005      	str	r5, [r0, #0]
    16dc:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16de:	681e      	ldr	r6, [r3, #0]
    16e0:	0777      	lsls	r7, r6, #29
    16e2:	d41e      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    16e4:	681f      	ldr	r7, [r3, #0]
    16e6:	077e      	lsls	r6, r7, #29
    16e8:	f102 32ff 	add.w	r2, r2, #4294967295
    16ec:	d419      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    16ee:	6819      	ldr	r1, [r3, #0]
    16f0:	074f      	lsls	r7, r1, #29
    16f2:	d416      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    16f4:	6818      	ldr	r0, [r3, #0]
    16f6:	0746      	lsls	r6, r0, #29
    16f8:	d413      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    16fa:	681e      	ldr	r6, [r3, #0]
    16fc:	0770      	lsls	r0, r6, #29
    16fe:	d410      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    1700:	681f      	ldr	r7, [r3, #0]
    1702:	0779      	lsls	r1, r7, #29
    1704:	d40d      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    1706:	6819      	ldr	r1, [r3, #0]
    1708:	074f      	lsls	r7, r1, #29
    170a:	d40a      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    170c:	6818      	ldr	r0, [r3, #0]
    170e:	0746      	lsls	r6, r0, #29
    1710:	d407      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    1712:	681e      	ldr	r6, [r3, #0]
    1714:	0770      	lsls	r0, r6, #29
    1716:	d404      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    1718:	681f      	ldr	r7, [r3, #0]
    171a:	0779      	lsls	r1, r7, #29
    171c:	d401      	bmi.n	1722 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    171e:	3a09      	subs	r2, #9
    1720:	d1dd      	bne.n	16de <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1722:	4b1a      	ldr	r3, [pc, #104]	; (178c <am_hal_cachectrl_enable+0x128>)
    1724:	681a      	ldr	r2, [r3, #0]
    1726:	f042 0101 	orr.w	r1, r2, #1
    172a:	6019      	str	r1, [r3, #0]
    172c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    172e:	6818      	ldr	r0, [r3, #0]
    1730:	0740      	lsls	r0, r0, #29
    1732:	d41e      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1734:	681e      	ldr	r6, [r3, #0]
    1736:	0771      	lsls	r1, r6, #29
    1738:	f102 32ff 	add.w	r2, r2, #4294967295
    173c:	d419      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    173e:	681f      	ldr	r7, [r3, #0]
    1740:	077f      	lsls	r7, r7, #29
    1742:	d416      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1744:	6819      	ldr	r1, [r3, #0]
    1746:	074e      	lsls	r6, r1, #29
    1748:	d413      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    174a:	6818      	ldr	r0, [r3, #0]
    174c:	0740      	lsls	r0, r0, #29
    174e:	d410      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1750:	681e      	ldr	r6, [r3, #0]
    1752:	0771      	lsls	r1, r6, #29
    1754:	d40d      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1756:	681f      	ldr	r7, [r3, #0]
    1758:	077f      	lsls	r7, r7, #29
    175a:	d40a      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    175c:	6819      	ldr	r1, [r3, #0]
    175e:	074e      	lsls	r6, r1, #29
    1760:	d407      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1762:	6818      	ldr	r0, [r3, #0]
    1764:	0740      	lsls	r0, r0, #29
    1766:	d404      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    1768:	681e      	ldr	r6, [r3, #0]
    176a:	0771      	lsls	r1, r6, #29
    176c:	d401      	bmi.n	1772 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    176e:	3a09      	subs	r2, #9
    1770:	d1dd      	bne.n	172e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1772:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1774:	4f04      	ldr	r7, [pc, #16]	; (1788 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1776:	0223      	lsls	r3, r4, #8
    1778:	f403 7100 	and.w	r1, r3, #512	; 0x200
    177c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1780:	4311      	orrs	r1, r2
    1782:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1784:	6039      	str	r1, [r7, #0]
    1786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1788:	40018000 	.word	0x40018000
    178c:	40018008 	.word	0x40018008

00001790 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1790:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1792:	4604      	mov	r4, r0
    1794:	b120      	cbz	r0, 17a0 <am_hal_clkgen_sysclk_select+0x10>
    1796:	4a06      	ldr	r2, [pc, #24]	; (17b0 <am_hal_clkgen_sysclk_select+0x20>)
    1798:	4806      	ldr	r0, [pc, #24]	; (17b4 <am_hal_clkgen_sysclk_select+0x24>)
    179a:	2150      	movs	r1, #80	; 0x50
    179c:	f000 f82a 	bl	17f4 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17a0:	4b05      	ldr	r3, [pc, #20]	; (17b8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17a2:	4906      	ldr	r1, [pc, #24]	; (17bc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17a4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    17a6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17a8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17aa:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    17ac:	601a      	str	r2, [r3, #0]
    17ae:	bd10      	pop	{r4, pc}
    17b0:	00002050 	.word	0x00002050
    17b4:	00002088 	.word	0x00002088
    17b8:	40004014 	.word	0x40004014
    17bc:	40004018 	.word	0x40004018

000017c0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    17c0:	4b04      	ldr	r3, [pc, #16]	; (17d4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    17c2:	4905      	ldr	r1, [pc, #20]	; (17d8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    17c4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    17c8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    17cc:	bf08      	it	eq
    17ce:	4608      	moveq	r0, r1
    17d0:	4770      	bx	lr
    17d2:	bf00      	nop
    17d4:	40004018 	.word	0x40004018
    17d8:	02dc6c00 	.word	0x02dc6c00
    17dc:	016e3600 	.word	0x016e3600

000017e0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    17e0:	0783      	lsls	r3, r0, #30
    17e2:	d003      	beq.n	17ec <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    17e4:	4a02      	ldr	r2, [pc, #8]	; (17f0 <am_hal_clkgen_osc_stop+0x10>)
    17e6:	6813      	ldr	r3, [r2, #0]
    17e8:	4318      	orrs	r0, r3
    17ea:	6010      	str	r0, [r2, #0]
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop
    17f0:	4000400c 	.word	0x4000400c

000017f4 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    17f4:	e7fe      	b.n	17f4 <am_hal_debug_error>
    17f6:	bf00      	nop

000017f8 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    17f8:	4b01      	ldr	r3, [pc, #4]	; (1800 <am_hal_flash_delay+0x8>)
    17fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    17fc:	4708      	bx	r1
    17fe:	bf00      	nop
    1800:	10001028 	.word	0x10001028

00001804 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1804:	08c3      	lsrs	r3, r0, #3
    1806:	f003 0104 	and.w	r1, r3, #4
    180a:	4a04      	ldr	r2, [pc, #16]	; (181c <am_hal_gpio_out_enable_bit_get+0x18>)
    180c:	588b      	ldr	r3, [r1, r2]
    180e:	f000 001f 	and.w	r0, r0, #31
    1812:	fa23 f100 	lsr.w	r1, r3, r0
}
    1816:	f001 0001 	and.w	r0, r1, #1
    181a:	4770      	bx	lr
    181c:	400100a0 	.word	0x400100a0

00001820 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1820:	280f      	cmp	r0, #15
    1822:	d80b      	bhi.n	183c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1824:	2805      	cmp	r0, #5
    1826:	d013      	beq.n	1850 <am_hal_interrupt_enable+0x30>
    1828:	2806      	cmp	r0, #6
    182a:	d017      	beq.n	185c <am_hal_interrupt_enable+0x3c>
    182c:	2804      	cmp	r0, #4
    182e:	d104      	bne.n	183a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1830:	4a0d      	ldr	r2, [pc, #52]	; (1868 <am_hal_interrupt_enable+0x48>)
    1832:	6813      	ldr	r3, [r2, #0]
    1834:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1838:	6010      	str	r0, [r2, #0]
    183a:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    183c:	f1a0 0310 	sub.w	r3, r0, #16
    1840:	f003 0c1f 	and.w	ip, r3, #31
    1844:	2001      	movs	r0, #1
    1846:	4909      	ldr	r1, [pc, #36]	; (186c <am_hal_interrupt_enable+0x4c>)
    1848:	fa00 f20c 	lsl.w	r2, r0, ip
    184c:	600a      	str	r2, [r1, #0]
    184e:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1850:	4805      	ldr	r0, [pc, #20]	; (1868 <am_hal_interrupt_enable+0x48>)
    1852:	6801      	ldr	r1, [r0, #0]
    1854:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1858:	6002      	str	r2, [r0, #0]
            break;
    185a:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    185c:	4902      	ldr	r1, [pc, #8]	; (1868 <am_hal_interrupt_enable+0x48>)
    185e:	680a      	ldr	r2, [r1, #0]
    1860:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1864:	600b      	str	r3, [r1, #0]
            break;
    1866:	4770      	bx	lr
    1868:	e000ed24 	.word	0xe000ed24
    186c:	e000e100 	.word	0xe000e100

00001870 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1870:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1874:	b662      	cpsie	i
    __asm("    bx lr");
    1876:	4770      	bx	lr

00001878 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1878:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    187c:	b672      	cpsid	i
    __asm("    bx lr");
    187e:	4770      	bx	lr

00001880 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1880:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1884:	4770      	bx	lr
    1886:	bf00      	nop

00001888 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1888:	4b0d      	ldr	r3, [pc, #52]	; (18c0 <am_hal_itm_enable+0x38>)
    188a:	6818      	ldr	r0, [r3, #0]
    188c:	07c2      	lsls	r2, r0, #31
    188e:	d416      	bmi.n	18be <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1890:	4a0c      	ldr	r2, [pc, #48]	; (18c4 <am_hal_itm_enable+0x3c>)
    1892:	6811      	ldr	r1, [r2, #0]
    1894:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1898:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    189a:	6810      	ldr	r0, [r2, #0]
    189c:	01c3      	lsls	r3, r0, #7
    189e:	d5fc      	bpl.n	189a <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    18a0:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    18a2:	4809      	ldr	r0, [pc, #36]	; (18c8 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    18a4:	4c09      	ldr	r4, [pc, #36]	; (18cc <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    18a6:	4d0a      	ldr	r5, [pc, #40]	; (18d0 <am_hal_itm_enable+0x48>)
    18a8:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    18aa:	250f      	movs	r5, #15
    18ac:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    18ae:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    18b0:	4908      	ldr	r1, [pc, #32]	; (18d4 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18b2:	4b09      	ldr	r3, [pc, #36]	; (18d8 <am_hal_itm_enable+0x50>)
    18b4:	4a09      	ldr	r2, [pc, #36]	; (18dc <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    18b6:	f04f 30ff 	mov.w	r0, #4294967295
    18ba:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18bc:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    18be:	4770      	bx	lr
    18c0:	1000117c 	.word	0x1000117c
    18c4:	e000edfc 	.word	0xe000edfc
    18c8:	e0000fb0 	.word	0xe0000fb0
    18cc:	e0000e40 	.word	0xe0000e40
    18d0:	c5acce55 	.word	0xc5acce55
    18d4:	e0000e00 	.word	0xe0000e00
    18d8:	e0000e80 	.word	0xe0000e80
    18dc:	00150511 	.word	0x00150511

000018e0 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    18e0:	4a03      	ldr	r2, [pc, #12]	; (18f0 <am_hal_itm_not_busy+0x10>)
    18e2:	6813      	ldr	r3, [r2, #0]
    18e4:	021b      	lsls	r3, r3, #8
    18e6:	d4fc      	bmi.n	18e2 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    18e8:	f44f 7047 	mov.w	r0, #796	; 0x31c
    18ec:	f7ff bf84 	b.w	17f8 <am_hal_flash_delay>
    18f0:	e0000e80 	.word	0xe0000e80

000018f4 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    18f4:	7803      	ldrb	r3, [r0, #0]
    18f6:	b1ab      	cbz	r3, 1924 <am_hal_itm_print+0x30>
    18f8:	4602      	mov	r2, r0
    18fa:	2300      	movs	r3, #0
    18fc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1900:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1902:	2900      	cmp	r1, #0
    1904:	d1fa      	bne.n	18fc <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1906:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    190a:	b430      	push	{r4, r5}
    190c:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    190e:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1910:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1914:	f8dc 3000 	ldr.w	r3, [ip]
    1918:	2b00      	cmp	r3, #0
    191a:	d0fb      	beq.n	1914 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    191c:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    191e:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1920:	d1f6      	bne.n	1910 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1922:	bc30      	pop	{r4, r5}
    1924:	4770      	bx	lr
    1926:	bf00      	nop

00001928 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1928:	4a0d      	ldr	r2, [pc, #52]	; (1960 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    192c:	490e      	ldr	r1, [pc, #56]	; (1968 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    192e:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1930:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1932:	6814      	ldr	r4, [r2, #0]
    1934:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1936:	6809      	ldr	r1, [r1, #0]
    1938:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    193a:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    193c:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    193e:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1940:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1942:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1944:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1948:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    194a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    194c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1950:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1954:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1956:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1958:	6142      	str	r2, [r0, #20]
}
    195a:	bc70      	pop	{r4, r5, r6}
    195c:	4770      	bx	lr
    195e:	bf00      	nop
    1960:	400201c4 	.word	0x400201c4
    1964:	400201cc 	.word	0x400201cc
    1968:	400201c0 	.word	0x400201c0

0000196c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    196c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1970:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1972:	d03a      	beq.n	19ea <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1974:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1978:	f000 809d 	beq.w	1ab6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    197c:	2801      	cmp	r0, #1
    197e:	f000 809d 	beq.w	1abc <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1982:	2803      	cmp	r0, #3
    1984:	f000 80a6 	beq.w	1ad4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1988:	2807      	cmp	r0, #7
    198a:	f000 809c 	beq.w	1ac6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    198e:	280f      	cmp	r0, #15
    1990:	f000 80a5 	beq.w	1ade <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1994:	281f      	cmp	r0, #31
    1996:	f000 80b1 	beq.w	1afc <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    199a:	283f      	cmp	r0, #63	; 0x3f
    199c:	f000 80b5 	beq.w	1b0a <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    19a0:	287f      	cmp	r0, #127	; 0x7f
    19a2:	f000 80b9 	beq.w	1b18 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    19a6:	28ff      	cmp	r0, #255	; 0xff
    19a8:	f000 80a0 	beq.w	1aec <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    19ac:	f240 13ff 	movw	r3, #511	; 0x1ff
    19b0:	4298      	cmp	r0, r3
    19b2:	f000 80b8 	beq.w	1b26 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    19b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    19ba:	4288      	cmp	r0, r1
    19bc:	f000 80b9 	beq.w	1b32 <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    19c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    19c4:	4290      	cmp	r0, r2
    19c6:	d00e      	beq.n	19e6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    19c8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    19cc:	f000 80b7 	beq.w	1b3e <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    19d0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    19d4:	42a0      	cmp	r0, r4
    19d6:	f000 80b5 	beq.w	1b44 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    19da:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    19de:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    19e2:	4560      	cmp	r0, ip
    19e4:	d132      	bne.n	1a4c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    19e6:	495c      	ldr	r1, [pc, #368]	; (1b58 <am_hal_pwrctrl_memory_enable+0x1ec>)
    19e8:	e066      	b.n	1ab8 <am_hal_pwrctrl_memory_enable+0x14c>
    19ea:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    19ee:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    19f0:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    19f2:	4c5a      	ldr	r4, [pc, #360]	; (1b5c <am_hal_pwrctrl_memory_enable+0x1f0>)
    19f4:	6822      	ldr	r2, [r4, #0]
    19f6:	402a      	ands	r2, r5
    19f8:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    19fa:	4d58      	ldr	r5, [pc, #352]	; (1b5c <am_hal_pwrctrl_memory_enable+0x1f0>)
    19fc:	682c      	ldr	r4, [r5, #0]
    19fe:	4320      	orrs	r0, r4
    1a00:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1a02:	2b00      	cmp	r3, #0
    1a04:	d029      	beq.n	1a5a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a06:	4a56      	ldr	r2, [pc, #344]	; (1b60 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1a08:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a0a:	4203      	tst	r3, r0
    1a0c:	bf18      	it	ne
    1a0e:	20c6      	movne	r0, #198	; 0xc6
    1a10:	d01f      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a12:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a14:	422b      	tst	r3, r5
    1a16:	d01c      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a18:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a1a:	4223      	tst	r3, r4
    1a1c:	d019      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a1e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a20:	422b      	tst	r3, r5
    1a22:	d016      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a24:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a26:	4223      	tst	r3, r4
    1a28:	d013      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a2a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a2c:	422b      	tst	r3, r5
    1a2e:	d010      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a30:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a32:	4223      	tst	r3, r4
    1a34:	d00d      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a36:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a38:	422b      	tst	r3, r5
    1a3a:	d00a      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a3c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a3e:	4223      	tst	r3, r4
    1a40:	d007      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a42:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1a44:	422b      	tst	r3, r5
    1a46:	d004      	beq.n	1a52 <am_hal_pwrctrl_memory_enable+0xe6>
    1a48:	3809      	subs	r0, #9
    1a4a:	d1e2      	bne.n	1a12 <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1a4c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1a4e:	bc30      	pop	{r4, r5}
    1a50:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1a52:	b911      	cbnz	r1, 1a5a <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1a54:	2001      	movs	r0, #1
}
    1a56:	bc30      	pop	{r4, r5}
    1a58:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a5a:	4b41      	ldr	r3, [pc, #260]	; (1b60 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1a5c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a5e:	ea31 0402 	bics.w	r4, r1, r2
    1a62:	bf18      	it	ne
    1a64:	24c6      	movne	r4, #198	; 0xc6
    1a66:	d0f5      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a68:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a6a:	ea31 0000 	bics.w	r0, r1, r0
    1a6e:	d0f1      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a70:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a72:	ea31 0005 	bics.w	r0, r1, r5
    1a76:	d0ed      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a78:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a7a:	ea31 0002 	bics.w	r0, r1, r2
    1a7e:	d0e9      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a80:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a82:	ea31 0000 	bics.w	r0, r1, r0
    1a86:	d0e5      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a88:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a8a:	ea31 0005 	bics.w	r0, r1, r5
    1a8e:	d0e1      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a90:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a92:	ea31 0002 	bics.w	r0, r1, r2
    1a96:	d0dd      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a98:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1a9a:	ea31 0000 	bics.w	r0, r1, r0
    1a9e:	d0d9      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1aa0:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1aa2:	ea31 0005 	bics.w	r0, r1, r5
    1aa6:	d0d5      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1aa8:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1aaa:	ea31 0002 	bics.w	r0, r1, r2
    1aae:	d0d1      	beq.n	1a54 <am_hal_pwrctrl_memory_enable+0xe8>
    1ab0:	3c09      	subs	r4, #9
    1ab2:	d1d9      	bne.n	1a68 <am_hal_pwrctrl_memory_enable+0xfc>
    1ab4:	e7ca      	b.n	1a4c <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1ab6:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1ab8:	2300      	movs	r3, #0
    1aba:	e79e      	b.n	19fa <am_hal_pwrctrl_memory_enable+0x8e>
    1abc:	4d29      	ldr	r5, [pc, #164]	; (1b64 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1abe:	4b2a      	ldr	r3, [pc, #168]	; (1b68 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
    1ac4:	e795      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1ac6:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1aca:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1ace:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1ad2:	e78e      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1ad4:	4d25      	ldr	r5, [pc, #148]	; (1b6c <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ad6:	4b26      	ldr	r3, [pc, #152]	; (1b70 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1ad8:	f44f 7140 	mov.w	r1, #768	; 0x300
    1adc:	e789      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1ade:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ae2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1ae6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1aea:	e782      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1aec:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1af0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1af4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1af8:	20ff      	movs	r0, #255	; 0xff
    1afa:	e77a      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1afc:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1b00:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1b04:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1b08:	e773      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1b0a:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1b0e:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1b12:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1b16:	e76c      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1b18:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1b1c:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1b20:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1b24:	e765      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    1b26:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1b2a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1b2e:	4911      	ldr	r1, [pc, #68]	; (1b74 <am_hal_pwrctrl_memory_enable+0x208>)
    1b30:	e75f      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1b32:	4911      	ldr	r1, [pc, #68]	; (1b78 <am_hal_pwrctrl_memory_enable+0x20c>)
    1b34:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1b3c:	e759      	b.n	19f2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1b3e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1b42:	e7b9      	b.n	1ab8 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1b44:	4805      	ldr	r0, [pc, #20]	; (1b5c <am_hal_pwrctrl_memory_enable+0x1f0>)
    1b46:	6803      	ldr	r3, [r0, #0]
    1b48:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1b4c:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1b4e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1b52:	2100      	movs	r1, #0
    1b54:	e757      	b.n	1a06 <am_hal_pwrctrl_memory_enable+0x9a>
    1b56:	bf00      	nop
    1b58:	0007ff00 	.word	0x0007ff00
    1b5c:	40021010 	.word	0x40021010
    1b60:	40021014 	.word	0x40021014
    1b64:	fffff801 	.word	0xfffff801
    1b68:	0007fe00 	.word	0x0007fe00
    1b6c:	fffff803 	.word	0xfffff803
    1b70:	0007fc00 	.word	0x0007fc00
    1b74:	0001ff00 	.word	0x0001ff00
    1b78:	0003ff00 	.word	0x0003ff00

00001b7c <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b7c:	4b0f      	ldr	r3, [pc, #60]	; (1bbc <am_hal_pwrctrl_bucks_init+0x40>)
    1b7e:	681a      	ldr	r2, [r3, #0]
    1b80:	0792      	lsls	r2, r2, #30
    1b82:	d502      	bpl.n	1b8a <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1b84:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b86:	07c3      	lsls	r3, r0, #31
    1b88:	d40e      	bmi.n	1ba8 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b8a:	4b0d      	ldr	r3, [pc, #52]	; (1bc0 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b8c:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b8e:	6819      	ldr	r1, [r3, #0]
    1b90:	f041 0002 	orr.w	r0, r1, #2
    1b94:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1b96:	6819      	ldr	r1, [r3, #0]
    1b98:	f041 0001 	orr.w	r0, r1, #1
    1b9c:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b9e:	6813      	ldr	r3, [r2, #0]
    1ba0:	f003 0103 	and.w	r1, r3, #3
    1ba4:	2903      	cmp	r1, #3
    1ba6:	d1fa      	bne.n	1b9e <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1ba8:	4a04      	ldr	r2, [pc, #16]	; (1bbc <am_hal_pwrctrl_bucks_init+0x40>)
    1baa:	6810      	ldr	r0, [r2, #0]
    1bac:	f000 0303 	and.w	r3, r0, #3
    1bb0:	2b03      	cmp	r3, #3
    1bb2:	d1fa      	bne.n	1baa <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1bb4:	2042      	movs	r0, #66	; 0x42
    1bb6:	f7ff be1f 	b.w	17f8 <am_hal_flash_delay>
    1bba:	bf00      	nop
    1bbc:	40021004 	.word	0x40021004
    1bc0:	40021000 	.word	0x40021000

00001bc4 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1bc4:	4b0b      	ldr	r3, [pc, #44]	; (1bf4 <am_hal_pwrctrl_bucks_enable+0x30>)
    1bc6:	681a      	ldr	r2, [r3, #0]
    1bc8:	0792      	lsls	r2, r2, #30
    1bca:	d502      	bpl.n	1bd2 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1bcc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1bce:	07c3      	lsls	r3, r0, #31
    1bd0:	d40e      	bmi.n	1bf0 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1bd2:	4b09      	ldr	r3, [pc, #36]	; (1bf8 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1bd4:	4a07      	ldr	r2, [pc, #28]	; (1bf4 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1bd6:	6819      	ldr	r1, [r3, #0]
    1bd8:	f041 0002 	orr.w	r0, r1, #2
    1bdc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1bde:	6819      	ldr	r1, [r3, #0]
    1be0:	f041 0001 	orr.w	r0, r1, #1
    1be4:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1be6:	6813      	ldr	r3, [r2, #0]
    1be8:	f003 0103 	and.w	r1, r3, #3
    1bec:	2903      	cmp	r1, #3
    1bee:	d1fa      	bne.n	1be6 <am_hal_pwrctrl_bucks_enable+0x22>
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	40021004 	.word	0x40021004
    1bf8:	40021000 	.word	0x40021000

00001bfc <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1bfc:	4b12      	ldr	r3, [pc, #72]	; (1c48 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1bfe:	681a      	ldr	r2, [r3, #0]
    1c00:	0792      	lsls	r2, r2, #30
    1c02:	d402      	bmi.n	1c0a <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1c04:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1c06:	07c3      	lsls	r3, r0, #31
    1c08:	d51c      	bpl.n	1c44 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c0a:	4910      	ldr	r1, [pc, #64]	; (1c4c <am_hal_pwrctrl_bucks_disable+0x50>)
    1c0c:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1c0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1c12:	2a20      	cmp	r2, #32
    1c14:	d00b      	beq.n	1c2e <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1c16:	4b0e      	ldr	r3, [pc, #56]	; (1c50 <am_hal_pwrctrl_bucks_disable+0x54>)
    1c18:	681a      	ldr	r2, [r3, #0]
    1c1a:	f022 0002 	bic.w	r0, r2, #2
    1c1e:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1c20:	6819      	ldr	r1, [r3, #0]
    1c22:	f021 0201 	bic.w	r2, r1, #1
    1c26:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1c28:	200a      	movs	r0, #10
    1c2a:	f7ff bde5 	b.w	17f8 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1c2e:	4809      	ldr	r0, [pc, #36]	; (1c54 <am_hal_pwrctrl_bucks_disable+0x58>)
    1c30:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1c32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1c36:	d1ee      	bne.n	1c16 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1c38:	4805      	ldr	r0, [pc, #20]	; (1c50 <am_hal_pwrctrl_bucks_disable+0x54>)
    1c3a:	6803      	ldr	r3, [r0, #0]
    1c3c:	f003 0105 	and.w	r1, r3, #5
    1c40:	6001      	str	r1, [r0, #0]
    1c42:	e7f1      	b.n	1c28 <am_hal_pwrctrl_bucks_disable+0x2c>
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	40021004 	.word	0x40021004
    1c4c:	4002000c 	.word	0x4002000c
    1c50:	40021000 	.word	0x40021000
    1c54:	40021008 	.word	0x40021008

00001c58 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1c58:	4905      	ldr	r1, [pc, #20]	; (1c70 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1c5a:	4a06      	ldr	r2, [pc, #24]	; (1c74 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1c5c:	680b      	ldr	r3, [r1, #0]
    1c5e:	f043 0006 	orr.w	r0, r3, #6
    1c62:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1c64:	6811      	ldr	r1, [r2, #0]
    1c66:	f021 0304 	bic.w	r3, r1, #4
    1c6a:	6013      	str	r3, [r2, #0]
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	40021018 	.word	0x40021018
    1c74:	40021000 	.word	0x40021000

00001c78 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c78:	4a05      	ldr	r2, [pc, #20]	; (1c90 <am_hal_rtc_osc_select+0x18>)
    1c7a:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1c7c:	b918      	cbnz	r0, 1c86 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c7e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1c82:	6010      	str	r0, [r2, #0]
    1c84:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c86:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1c8a:	6011      	str	r1, [r2, #0]
    1c8c:	4770      	bx	lr
    1c8e:	bf00      	nop
    1c90:	4000400c 	.word	0x4000400c

00001c94 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1c94:	4a02      	ldr	r2, [pc, #8]	; (1ca0 <am_hal_rtc_osc_disable+0xc>)
    1c96:	6813      	ldr	r3, [r2, #0]
    1c98:	f043 0010 	orr.w	r0, r3, #16
    1c9c:	6010      	str	r0, [r2, #0]
    1c9e:	4770      	bx	lr
    1ca0:	40004050 	.word	0x40004050

00001ca4 <am_hal_stimer_config>:
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = AM_REG(CTIMER, STCFG);
    1ca4:	4b0c      	ldr	r3, [pc, #48]	; (1cd8 <am_hal_stimer_config+0x34>)
    1ca6:	6819      	ldr	r1, [r3, #0]

    //
    // Write our configuration value.
    //
    AM_REG(CTIMER, STCFG) = ui32STimerConfig;
    1ca8:	6018      	str	r0, [r3, #0]

    //
    // If all of the clock sources are not HFRC, disable LDO when sleeping if timers are enabled.
    //
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1caa:	681a      	ldr	r2, [r3, #0]
    1cac:	f002 000f 	and.w	r0, r2, #15
    1cb0:	2801      	cmp	r0, #1
         (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV256) )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1cb2:	4a0a      	ldr	r2, [pc, #40]	; (1cdc <am_hal_stimer_config+0x38>)
    AM_REG(CTIMER, STCFG) = ui32STimerConfig;

    //
    // If all of the clock sources are not HFRC, disable LDO when sleeping if timers are enabled.
    //
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1cb4:	d00a      	beq.n	1ccc <am_hal_stimer_config+0x28>
         (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV256) )
    1cb6:	681b      	ldr	r3, [r3, #0]
    AM_REG(CTIMER, STCFG) = ui32STimerConfig;

    //
    // If all of the clock sources are not HFRC, disable LDO when sleeping if timers are enabled.
    //
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1cb8:	f003 000f 	and.w	r0, r3, #15
    1cbc:	2802      	cmp	r0, #2
    1cbe:	d005      	beq.n	1ccc <am_hal_stimer_config+0x28>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    1cc0:	6813      	ldr	r3, [r2, #0]
    1cc2:	f043 0004 	orr.w	r0, r3, #4
    1cc6:	6010      	str	r0, [r2, #0]
    }
    return ui32CurrVal;
}
    1cc8:	4608      	mov	r0, r1
    1cca:	4770      	bx	lr
    // If all of the clock sources are not HFRC, disable LDO when sleeping if timers are enabled.
    //
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
         (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV256) )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1ccc:	6813      	ldr	r3, [r2, #0]
    1cce:	f023 0004 	bic.w	r0, r3, #4
    1cd2:	6010      	str	r0, [r2, #0]
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    }
    return ui32CurrVal;
}
    1cd4:	4608      	mov	r0, r1
    1cd6:	4770      	bx	lr
    1cd8:	40008100 	.word	0x40008100
    1cdc:	40021020 	.word	0x40021020

00001ce0 <am_hal_stimer_compare_delta_set>:
void
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t ui32Critical = 0;
    if ( ui32CmprInstance > 7 )
    1ce0:	2807      	cmp	r0, #7
    1ce2:	d900      	bls.n	1ce6 <am_hal_stimer_compare_delta_set+0x6>
    1ce4:	4770      	bx	lr
//! @return None.
//
//*****************************************************************************
void
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    1ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( ui32CmprInstance > 7 )
    {
        return;
    }

    cfgVal = AM_REG(CTIMER, STCFG);
    1cea:	4d0d      	ldr	r5, [pc, #52]	; (1d20 <am_hal_stimer_compare_delta_set+0x40>)
    // That leaves a corner case where we could miss the trigger if setting a very
    // small delta. To avoid this, we take critical section, and we should ensure
    // that delta value is at least > 1

    // Disable the compare if already enabled, when setting the new value
    AM_REG(CTIMER, STCFG) &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    1cec:	f44f 7780 	mov.w	r7, #256	; 0x100
    if ( ui32CmprInstance > 7 )
    {
        return;
    }

    cfgVal = AM_REG(CTIMER, STCFG);
    1cf0:	f8d5 8000 	ldr.w	r8, [r5]
    // That leaves a corner case where we could miss the trigger if setting a very
    // small delta. To avoid this, we take critical section, and we should ensure
    // that delta value is at least > 1

    // Disable the compare if already enabled, when setting the new value
    AM_REG(CTIMER, STCFG) &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    1cf4:	682b      	ldr	r3, [r5, #0]
    1cf6:	4087      	lsls	r7, r0
    1cf8:	4604      	mov	r4, r0
    1cfa:	ea23 0007 	bic.w	r0, r3, r7
    1cfe:	6028      	str	r0, [r5, #0]
    1d00:	460e      	mov	r6, r1
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1d02:	f7ff fdb9 	bl	1878 <am_hal_interrupt_master_disable>
    AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    1d06:	4907      	ldr	r1, [pc, #28]	; (1d24 <am_hal_stimer_compare_delta_set+0x44>)
    1d08:	4421      	add	r1, r4
    1d0a:	008a      	lsls	r2, r1, #2
    // Restore Compare Enable bit
    AM_REG(CTIMER, STCFG) |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    1d0c:	ea07 0408 	and.w	r4, r7, r8
    AM_REG(CTIMER, STCFG) &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    1d10:	6016      	str	r6, [r2, #0]
    // Restore Compare Enable bit
    AM_REG(CTIMER, STCFG) |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    1d12:	682e      	ldr	r6, [r5, #0]
    1d14:	4334      	orrs	r4, r6
    1d16:	602c      	str	r4, [r5, #0]
    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
}
    1d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // Restore Compare Enable bit
    AM_REG(CTIMER, STCFG) |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1d1c:	f7ff bdb0 	b.w	1880 <am_hal_interrupt_master_set>
    1d20:	40008100 	.word	0x40008100
    1d24:	10002044 	.word	0x10002044

00001d28 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, STMINTEN) |= ui32Interrupt;
    1d28:	4a02      	ldr	r2, [pc, #8]	; (1d34 <am_hal_stimer_int_enable+0xc>)
    1d2a:	6813      	ldr	r3, [r2, #0]
    1d2c:	4318      	orrs	r0, r3
    1d2e:	6010      	str	r0, [r2, #0]
    1d30:	4770      	bx	lr
    1d32:	bf00      	nop
    1d34:	40008300 	.word	0x40008300

00001d38 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, STMINTCLR) = ui32Interrupt;
    1d38:	4b01      	ldr	r3, [pc, #4]	; (1d40 <am_hal_stimer_int_clear+0x8>)
    1d3a:	6018      	str	r0, [r3, #0]
    1d3c:	4770      	bx	lr
    1d3e:	bf00      	nop
    1d40:	40008308 	.word	0x40008308

00001d44 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d46:	b083      	sub	sp, #12
    1d48:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1d4a:	f7ff fd95 	bl	1878 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1d4e:	4a41      	ldr	r2, [pc, #260]	; (1e54 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1d50:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1d52:	b11d      	cbz	r5, 1d5c <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1d54:	4b40      	ldr	r3, [pc, #256]	; (1e58 <am_hal_sysctrl_sleep+0x114>)
    1d56:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1d58:	07c3      	lsls	r3, r0, #31
    1d5a:	d509      	bpl.n	1d70 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1d5c:	6811      	ldr	r1, [r2, #0]
    1d5e:	f021 0604 	bic.w	r6, r1, #4
    1d62:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1d64:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1d66:	4620      	mov	r0, r4
    1d68:	f7ff fd8a 	bl	1880 <am_hal_interrupt_master_set>
}
    1d6c:	b003      	add	sp, #12
    1d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1d70:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d72:	493a      	ldr	r1, [pc, #232]	; (1e5c <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1d74:	4f3a      	ldr	r7, [pc, #232]	; (1e60 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1d76:	4d3b      	ldr	r5, [pc, #236]	; (1e64 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1d78:	483b      	ldr	r0, [pc, #236]	; (1e68 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1d7a:	f043 0604 	orr.w	r6, r3, #4
    1d7e:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d80:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1d82:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1d84:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1d86:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d88:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1d8c:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1d8e:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d92:	bf14      	ite	ne
    1d94:	2500      	movne	r5, #0
    1d96:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1d98:	2e03      	cmp	r6, #3
    1d9a:	bf8c      	ite	hi
    1d9c:	2100      	movhi	r1, #0
    1d9e:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1da0:	f012 0303 	ands.w	r3, r2, #3
    1da4:	bf18      	it	ne
    1da6:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1da8:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1dac:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1dae:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1db0:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1db4:	b91e      	cbnz	r6, 1dbe <am_hal_sysctrl_sleep+0x7a>
    1db6:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1dba:	2d0f      	cmp	r5, #15
    1dbc:	d00a      	beq.n	1dd4 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1dbe:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1dc0:	2d0f      	cmp	r5, #15
    1dc2:	d01a      	beq.n	1dfa <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1dc4:	4f29      	ldr	r7, [pc, #164]	; (1e6c <am_hal_sysctrl_sleep+0x128>)
    1dc6:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1dc8:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1dca:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1dcc:	f7ff fd58 	bl	1880 <am_hal_interrupt_master_set>
}
    1dd0:	b003      	add	sp, #12
    1dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1dd4:	683a      	ldr	r2, [r7, #0]
    1dd6:	1e50      	subs	r0, r2, #1
    1dd8:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1dda:	9800      	ldr	r0, [sp, #0]
    1ddc:	f04f 31ff 	mov.w	r1, #4294967295
    1de0:	f000 f8c6 	bl	1f70 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1de4:	9800      	ldr	r0, [sp, #0]
    1de6:	4633      	mov	r3, r6
    1de8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1dec:	f04f 31ff 	mov.w	r1, #4294967295
    1df0:	f000 f8d2 	bl	1f98 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1df4:	f7ff ff02 	bl	1bfc <am_hal_pwrctrl_bucks_disable>
    1df8:	e7e1      	b.n	1dbe <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1dfa:	f3ef 8310 	mrs	r3, PRIMASK
    1dfe:	9301      	str	r3, [sp, #4]
    1e00:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1e02:	4e1b      	ldr	r6, [pc, #108]	; (1e70 <am_hal_sysctrl_sleep+0x12c>)
    1e04:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1e06:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1e08:	6835      	ldr	r5, [r6, #0]
    1e0a:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1e0e:	f04c 021c 	orr.w	r2, ip, #28
    1e12:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1e14:	6830      	ldr	r0, [r6, #0]
    1e16:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1e1a:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1e1e:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1e20:	9e01      	ldr	r6, [sp, #4]
    1e22:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1e26:	201c      	movs	r0, #28
    1e28:	f7ff fce6 	bl	17f8 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1e2c:	f7ff feca 	bl	1bc4 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1e30:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1e32:	4910      	ldr	r1, [pc, #64]	; (1e74 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1e34:	4d0d      	ldr	r5, [pc, #52]	; (1e6c <am_hal_sysctrl_sleep+0x128>)
    1e36:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1e38:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1e3a:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1e3c:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1e3e:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1e40:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1e42:	f7ff fcd9 	bl	17f8 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1e46:	9800      	ldr	r0, [sp, #0]
    1e48:	f04f 31ff 	mov.w	r1, #4294967295
    1e4c:	f000 f876 	bl	1f3c <am_hal_ctimer_start>
    1e50:	e789      	b.n	1d66 <am_hal_sysctrl_sleep+0x22>
    1e52:	bf00      	nop
    1e54:	e000ed10 	.word	0xe000ed10
    1e58:	40020250 	.word	0x40020250
    1e5c:	4002000c 	.word	0x4002000c
    1e60:	10001188 	.word	0x10001188
    1e64:	40021000 	.word	0x40021000
    1e68:	40021008 	.word	0x40021008
    1e6c:	10001180 	.word	0x10001180
    1e70:	40020068 	.word	0x40020068
    1e74:	10001184 	.word	0x10001184

00001e78 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1e78:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1e7a:	4a22      	ldr	r2, [pc, #136]	; (1f04 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1e7c:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1e7e:	2100      	movs	r1, #0
    1e80:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1e82:	b333      	cbz	r3, 1ed2 <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1e84:	4d20      	ldr	r5, [pc, #128]	; (1f08 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1e86:	4921      	ldr	r1, [pc, #132]	; (1f0c <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1e88:	4a21      	ldr	r2, [pc, #132]	; (1f10 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1e8a:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1e8c:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1e90:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1e92:	458c      	cmp	ip, r1
    1e94:	bf94      	ite	ls
    1e96:	461d      	movls	r5, r3
    1e98:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1e9a:	f7ff fc91 	bl	17c0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1e9e:	1c43      	adds	r3, r0, #1
    1ea0:	d02e      	beq.n	1f00 <am_hal_tpiu_enable+0x88>
    1ea2:	08c3      	lsrs	r3, r0, #3
    1ea4:	fbb3 fef5 	udiv	lr, r3, r5
    1ea8:	f10e 31ff 	add.w	r1, lr, #4294967295
    1eac:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1eae:	4a19      	ldr	r2, [pc, #100]	; (1f14 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1eb0:	4c19      	ldr	r4, [pc, #100]	; (1f18 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1eb2:	4b1a      	ldr	r3, [pc, #104]	; (1f1c <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1eb4:	491a      	ldr	r1, [pc, #104]	; (1f20 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1eb6:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1eb8:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1eba:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ebc:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1ec0:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1ec2:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ec4:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ec6:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ece:	f7ff bc93 	b.w	17f8 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1ed2:	4c10      	ldr	r4, [pc, #64]	; (1f14 <am_hal_tpiu_enable+0x9c>)
    1ed4:	6905      	ldr	r5, [r0, #16]
    1ed6:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1ed8:	6882      	ldr	r2, [r0, #8]
    1eda:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1ede:	68c3      	ldr	r3, [r0, #12]
    1ee0:	4c09      	ldr	r4, [pc, #36]	; (1f08 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1ee2:	490e      	ldr	r1, [pc, #56]	; (1f1c <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1ee4:	1e5d      	subs	r5, r3, #1
    1ee6:	2201      	movs	r2, #1
    1ee8:	40aa      	lsls	r2, r5
    1eea:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1eec:	680b      	ldr	r3, [r1, #0]
    1eee:	6840      	ldr	r0, [r0, #4]
    1ef0:	4318      	orrs	r0, r3
    1ef2:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ef8:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1efc:	f7ff bc7c 	b.w	17f8 <am_hal_flash_delay>
    1f00:	2005      	movs	r0, #5
    1f02:	e7d4      	b.n	1eae <am_hal_tpiu_enable+0x36>
    1f04:	e0040304 	.word	0xe0040304
    1f08:	e0040004 	.word	0xe0040004
    1f0c:	001da380 	.word	0x001da380
    1f10:	000f4240 	.word	0x000f4240
    1f14:	e0040010 	.word	0xe0040010
    1f18:	e00400f0 	.word	0xe00400f0
    1f1c:	40020250 	.word	0x40020250
    1f20:	e0040f00 	.word	0xe0040f00

00001f24 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1f24:	4b01      	ldr	r3, [pc, #4]	; (1f2c <am_hal_tpiu_disable+0x8>)
    1f26:	2200      	movs	r2, #0
    1f28:	601a      	str	r2, [r3, #0]
    1f2a:	4770      	bx	lr
    1f2c:	40020250 	.word	0x40020250

00001f30 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1f30:	4b01      	ldr	r3, [pc, #4]	; (1f38 <am_hal_vcomp_disable+0x8>)
    1f32:	2237      	movs	r2, #55	; 0x37
    1f34:	601a      	str	r2, [r3, #0]
    1f36:	4770      	bx	lr
    1f38:	4000c008 	.word	0x4000c008

00001f3c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f3c:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1f3e:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f42:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f44:	0100      	lsls	r0, r0, #4
    1f46:	4a09      	ldr	r2, [pc, #36]	; (1f6c <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1f48:	9301      	str	r3, [sp, #4]
    1f4a:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1f4c:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1f4e:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1f52:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1f56:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1f5a:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1f5c:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f5e:	9801      	ldr	r0, [sp, #4]
    1f60:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1f64:	b003      	add	sp, #12
    1f66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f6a:	4770      	bx	lr
    1f6c:	4000800c 	.word	0x4000800c

00001f70 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f70:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f72:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f76:	0100      	lsls	r0, r0, #4
    1f78:	4a06      	ldr	r2, [pc, #24]	; (1f94 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f7a:	9301      	str	r3, [sp, #4]
    1f7c:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1f7e:	5883      	ldr	r3, [r0, r2]
    1f80:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1f84:	4319      	orrs	r1, r3
    1f86:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f88:	9801      	ldr	r0, [sp, #4]
    1f8a:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1f8e:	b002      	add	sp, #8
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop
    1f94:	4000800c 	.word	0x4000800c

00001f98 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f98:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f9a:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f9e:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1fa0:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1fa2:	4d1c      	ldr	r5, [pc, #112]	; (2014 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1fa4:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1fa6:	4e1c      	ldr	r6, [pc, #112]	; (2018 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1fa8:	4f1c      	ldr	r7, [pc, #112]	; (201c <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1faa:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1fac:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1fb0:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1fb2:	d01a      	beq.n	1fea <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1fb4:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1fb8:	2d80      	cmp	r5, #128	; 0x80
    1fba:	d01b      	beq.n	1ff4 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1fc0:	2500      	movs	r5, #0
    1fc2:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1fc4:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1fc6:	d01c      	beq.n	2002 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1fc8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1fcc:	d01e      	beq.n	200c <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1fce:	0c21      	lsrs	r1, r4, #16
    1fd0:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1fd2:	b291      	uxth	r1, r2
    1fd4:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1fd6:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1fda:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1fdc:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1fde:	9801      	ldr	r0, [sp, #4]
    1fe0:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1fe4:	b002      	add	sp, #8
    1fe6:	bcf0      	pop	{r4, r5, r6, r7}
    1fe8:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1fea:	0c25      	lsrs	r5, r4, #16
    1fec:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1ff0:	2c80      	cmp	r4, #128	; 0x80
    1ff2:	d10a      	bne.n	200a <am_hal_ctimer_period_set+0x72>
    1ff4:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1ff6:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1ff8:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ffe:	4299      	cmp	r1, r3
    2000:	d1e2      	bne.n	1fc8 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2002:	b297      	uxth	r7, r2
    2004:	433d      	orrs	r5, r7
    2006:	5185      	str	r5, [r0, r6]
    2008:	e7e9      	b.n	1fde <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    200a:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    200c:	b296      	uxth	r6, r2
    200e:	4335      	orrs	r5, r6
    2010:	51c5      	str	r5, [r0, r7]
    2012:	e7e4      	b.n	1fde <am_hal_ctimer_period_set+0x46>
    2014:	4000800c 	.word	0x4000800c
    2018:	40008004 	.word	0x40008004
    201c:	40008008 	.word	0x40008008
    2020:	6d695453 	.word	0x6d695453
    2024:	45207265 	.word	0x45207265
    2028:	706d6178 	.word	0x706d6178
    202c:	000a656c 	.word	0x000a656c
    2030:	0a0a0a0a 	.word	0x0a0a0a0a
    2034:	0a0a0a0a 	.word	0x0a0a0a0a
    2038:	0a0a0a0a 	.word	0x0a0a0a0a
    203c:	0a0a0a0a 	.word	0x0a0a0a0a
    2040:	00000a0a 	.word	0x00000a0a

00002044 <am_hal_cachectrl_defaults>:
    2044:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2054:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2064:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2074:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2084:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2094:	6b6c635f 2e6e6567 00000063              _clkgen.c...
