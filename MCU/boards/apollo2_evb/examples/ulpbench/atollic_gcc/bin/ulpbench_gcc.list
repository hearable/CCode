
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\ulpbench\atollic_gcc\bin\ulpbench_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001474  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         000001e0  10001000  00001474  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000070  100011e0  00001654  000211e0  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006968  00000000  00000000  00021217  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000203c  00000000  00000000  00027b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007b0  00000000  00000000  00029bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001000  00000000  00000000  0002a36b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044da  00000000  00000000  0002b36b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025aa  00000000  00000000  0002f845  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00031def  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000013d8  00000000  00000000  00031e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003743  00000000  00000000  00033248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
#if defined(AM_BSP_GPIO_IOM0_SCK) || defined(AM_BSP_GPIO_IOM1_SCK) || \
    defined(AM_BSP_GPIO_IOM2_SCK) || defined(AM_BSP_GPIO_IOM3_SCK) || \
    defined(AM_BSP_GPIO_IOM4_SCK) || defined(AM_BSP_GPIO_IOM5_SCK)
void
am_bsp_iom_spi_pins_disable(uint32_t ui32Module)
{
       0:	00 10 00 10 69 0f 00 00 61 0f 00 00 f1 0f 00 00     ....i...a.......
    switch(ui32Module)
      10:	f1 0f 00 00 f1 0f 00 00 f1 0f 00 00 00 00 00 00     ................
	...
            break;
#endif

#ifdef AM_BSP_GPIO_IOM5_SCK
        case 5:
            am_bsp_pin_disable(IOM5_SCK);
      2c:	65 0f 00 00 65 0f 00 00 00 00 00 00 65 0f 00 00     e...e.......e...
      3c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 7d 01 00 00     e...e...e...}...
      4c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
            am_bsp_pin_disable(IOM5_MISO);
      5c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
      6c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
      7c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
            am_bsp_pin_disable(IOM5_MOSI);
      8c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
      9c:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
      ac:	65 0f 00 00 65 0f 00 00 65 0f 00 00 65 0f 00 00     e...e...e...e...
            break;
#endif

#ifdef AM_BSP_GPIO_IOM4_SCK
        case 4:
            am_bsp_pin_disable(IOM4_SCK);
      bc:	65 0f 00 00                                         e...

000000c0 <hardware_setup_part1>:
//
// Setup up platform specific hardware part 1.
//
//*****************************************************************************
void hardware_setup_part1(void)
{
      c0:	b510      	push	{r4, lr}
    //
    // Set the system clock to maximum frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
      c2:	2000      	movs	r0, #0
//
// Setup up platform specific hardware part 1.
//
//*****************************************************************************
void hardware_setup_part1(void)
{
      c4:	b082      	sub	sp, #8
    //
    // Set the system clock to maximum frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
      c6:	f000 fffd 	bl	10c4 <am_hal_clkgen_sysclk_select>
void ulp_initialize_pins(void)
{
    //
    // Initialize LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
      ca:	2105      	movs	r1, #5
      cc:	4821      	ldr	r0, [pc, #132]	; (154 <hardware_setup_part1+0x94>)
      ce:	f000 fded 	bl	cac <am_devices_led_array_init>

    //
    // Set up ULP status pin and clear it.
    //
    am_hal_gpio_pin_config(ULP_INDICATOR_PIN, AM_HAL_PIN_OUTPUT);
      d2:	f3ef 8310 	mrs	r3, PRIMASK
      d6:	9301      	str	r3, [sp, #4]
      d8:	b672      	cpsid	i
      da:	4a1f      	ldr	r2, [pc, #124]	; (158 <hardware_setup_part1+0x98>)
      dc:	4c1f      	ldr	r4, [pc, #124]	; (15c <hardware_setup_part1+0x9c>)
      de:	4820      	ldr	r0, [pc, #128]	; (160 <hardware_setup_part1+0xa0>)
      e0:	4920      	ldr	r1, [pc, #128]	; (164 <hardware_setup_part1+0xa4>)
      e2:	2373      	movs	r3, #115	; 0x73
      e4:	6013      	str	r3, [r2, #0]
      e6:	6823      	ldr	r3, [r4, #0]
      e8:	f423 4ce0 	bic.w	ip, r3, #28672	; 0x7000
      ec:	f44c 5300 	orr.w	r3, ip, #8192	; 0x2000
      f0:	6023      	str	r3, [r4, #0]
      f2:	6804      	ldr	r4, [r0, #0]
      f4:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
      f8:	f04c 53c0 	orr.w	r3, ip, #402653184	; 0x18000000
      fc:	6003      	str	r3, [r0, #0]
      fe:	680c      	ldr	r4, [r1, #0]
     100:	2000      	movs	r0, #0
     102:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
     106:	600b      	str	r3, [r1, #0]
     108:	6010      	str	r0, [r2, #0]
     10a:	9a01      	ldr	r2, [sp, #4]
     10c:	f382 8810 	msr	PRIMASK, r2
void ulp_rtc_init(void)
{
	//
	// Wait for XT stable and clocking RTC.
	//
    while(AM_REG(CLKGEN,STATUS) & 0x00000003)
     110:	4c15      	ldr	r4, [pc, #84]	; (168 <hardware_setup_part1+0xa8>)
     112:	6821      	ldr	r1, [r4, #0]
     114:	078a      	lsls	r2, r1, #30
     116:	d009      	beq.n	12c <hardware_setup_part1+0x6c>
    {
        am_devices_led_toggle(am_bsp_psLEDs, 0);
     118:	2100      	movs	r1, #0
     11a:	480e      	ldr	r0, [pc, #56]	; (154 <hardware_setup_part1+0x94>)
     11c:	f000 fee2 	bl	ee4 <am_devices_led_toggle>
        am_util_delay_ms(50);
     120:	2032      	movs	r0, #50	; 0x32
     122:	f000 ff55 	bl	fd0 <am_util_delay_ms>
void ulp_rtc_init(void)
{
	//
	// Wait for XT stable and clocking RTC.
	//
    while(AM_REG(CLKGEN,STATUS) & 0x00000003)
     126:	6820      	ldr	r0, [r4, #0]
     128:	0783      	lsls	r3, r0, #30
     12a:	d1f5      	bne.n	118 <hardware_setup_part1+0x58>
    }

    //
    // Make sure LED is off.
    //
    am_devices_led_off(am_bsp_psLEDs, 0);
     12c:	2100      	movs	r1, #0
     12e:	4809      	ldr	r0, [pc, #36]	; (154 <hardware_setup_part1+0x94>)
     130:	f000 feb6 	bl	ea0 <am_devices_led_off>

    //
    // Clear RTC interrupts.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     134:	2008      	movs	r0, #8
     136:	f001 f865 	bl	1204 <am_hal_rtc_int_clear>
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_OF);
     13a:	2004      	movs	r0, #4
     13c:	f001 f862 	bl	1204 <am_hal_rtc_int_clear>

    //
    // Enable RTC Alarm interrupts
    //
    am_hal_rtc_int_enable(AM_HAL_RTC_INT_ALM);
     140:	2008      	movs	r0, #8
     142:	f001 f857 	bl	11f4 <am_hal_rtc_int_enable>

    //
    // Enale the CLKGEN interupts in the NVIC
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CLKGEN);
     146:	2012      	movs	r0, #18
     148:	f000 fffa 	bl	1140 <am_hal_interrupt_enable>
#endif  // DEBUG

    //
    // Enable interrupts
    //
    am_hal_interrupt_master_enable();
     14c:	f001 f820 	bl	1190 <am_hal_interrupt_master_enable>
}
     150:	b002      	add	sp, #8
     152:	bd10      	pop	{r4, pc}
     154:	10001168 	.word	0x10001168
     158:	40010060 	.word	0x40010060
     15c:	40010044 	.word	0x40010044
     160:	40010008 	.word	0x40010008
     164:	400100e8 	.word	0x400100e8
     168:	4000401c 	.word	0x4000401c

0000016c <hardware_setup_part2>:
//
// Setup up platform specific hardware part 2.
//
//*****************************************************************************
void hardware_setup_part2( void )
{
     16c:	b508      	push	{r3, lr}
void RTC_Start( void )
{
    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     16e:	f001 f839 	bl	11e4 <am_hal_rtc_osc_enable>

    //
    // Enable the RTC 1 sec alarm interval.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
     172:	2007      	movs	r0, #7
//
//*****************************************************************************
void hardware_setup_part2( void )
{
    RTC_Start();
}
     174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_enable();

    //
    // Enable the RTC 1 sec alarm interval.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
     178:	f001 b84a 	b.w	1210 <am_hal_rtc_alarm_interval_set>

0000017c <am_clkgen_isr>:
void am_clkgen_isr(void)
{
    //
    // Clear the RTC Alarm Interrupt.
    //
    AM_REG(RTC, INTCLR) = AM_HAL_RTC_INT_ALM;
     17c:	4b02      	ldr	r3, [pc, #8]	; (188 <am_clkgen_isr+0xc>)
     17e:	2208      	movs	r2, #8
     180:	601a      	str	r2, [r3, #0]

    //
    // Run ULP bench
    //
    tesTimerInterrupt();
     182:	f000 bd25 	b.w	bd0 <tesTimerInterrupt>
     186:	bf00      	nop
     188:	40004108 	.word	0x40004108

0000018c <workload_func_1>:
- Run the <bubblesort> function on the result of the previous step, and test the result.
- Run the <permute> function for 16 permutes
- Indicate end of workload iteration by calling <clear_Indication_Port>
		
*/
void workload_func_1(ulp_u1 repeat, vfacts *facts) {
     18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

   unsigned int i,sid;
   unsigned int innerloop;
   ulp_u4 math_cumu=last_state&0xffff;
     190:	4b89      	ldr	r3, [pc, #548]	; (3b8 <workload_func_1+0x22c>)
- Run the <bubblesort> function on the result of the previous step, and test the result.
- Run the <permute> function for 16 permutes
- Indicate end of workload iteration by calling <clear_Indication_Port>
		
*/
void workload_func_1(ulp_u1 repeat, vfacts *facts) {
     192:	b0a9      	sub	sp, #164	; 0xa4

   unsigned int i,sid;
   unsigned int innerloop;
   ulp_u4 math_cumu=last_state&0xffff;
     194:	681c      	ldr	r4, [r3, #0]
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     196:	2800      	cmp	r0, #0
     198:	f000 810a 	beq.w	3b0 <workload_func_1+0x224>
     19c:	b2a6      	uxth	r6, r4
     19e:	9007      	str	r0, [sp, #28]
     1a0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 3e0 <workload_func_1+0x254>
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1a4:	f8df 923c 	ldr.w	r9, [pc, #572]	; 3e4 <workload_func_1+0x258>
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1a8:	f8df a23c 	ldr.w	sl, [pc, #572]	; 3e8 <workload_func_1+0x25c>
     1ac:	4d83      	ldr	r5, [pc, #524]	; (3bc <workload_func_1+0x230>)
     1ae:	9603      	str	r6, [sp, #12]
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     1b0:	2000      	movs	r0, #0
     1b2:	468b      	mov	fp, r1
     1b4:	9005      	str	r0, [sp, #20]
     1b6:	9004      	str	r0, [sp, #16]
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1b8:	f44f 6700 	mov.w	r7, #2048	; 0x800
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     1bc:	9c03      	ldr	r4, [sp, #12]
     1be:	2614      	movs	r6, #20
   {
     for(i=0;i<20;i++){  
     1c0:	3e0a      	subs	r6, #10
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1c2:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1c6:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1ca:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1ce:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1d2:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1d6:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1da:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1de:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1e2:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1e6:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1ea:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1ee:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1f2:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1f6:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     1fa:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     1fe:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     202:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     206:	f8ca 7000 	str.w	r7, [sl]
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
         PLT_STATUS_PIN_CLEAR;  /* Set on port pin to low. Used to make some peripheral access but can */
     20a:	f8c9 7000 	str.w	r7, [r9]
                                /* also be used to measure the correction repeat frequency and duration of the */
                                /* Workload function */
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     20e:	f8ca 7000 	str.w	r7, [sl]
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
   {
     for(i=0;i<20;i++){  
     212:	d1d5      	bne.n	1c0 <workload_func_1+0x34>
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     }
     /* we end with port high so during the processing of the following part the pin is high. */

     
     for(i=0;i<facts->datasize;i++){  
     214:	f8bb 1000 	ldrh.w	r1, [fp]
     218:	9403      	str	r4, [sp, #12]
     21a:	b3a9      	cbz	r1, 288 <workload_func_1+0xfc>
        /* Math simulating simple PID */
       if (math_cumu >= DATASIZE){
		  ulp_u1 cur_param=(ulp_u1)loop_param;
     21c:	f8d8 3000 	ldr.w	r3, [r8]
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[0], (ulp_u1)ulp_data[i]);
     220:	b2d8      	uxtb	r0, r3
     222:	f000 0107 	and.w	r1, r0, #7
     /* we end with port high so during the processing of the following part the pin is high. */

     
     for(i=0;i<facts->datasize;i++){  
        /* Math simulating simple PID */
       if (math_cumu >= DATASIZE){
     226:	2c17      	cmp	r4, #23
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[0], (ulp_u1)ulp_data[i]);
     228:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
       }else{
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[math_cumu], (ulp_u1)ulp_data[i]);
     22c:	bf94      	ite	ls
     22e:	f835 2014 	ldrhls.w	r2, [r5, r4, lsl #1]
     
     for(i=0;i<facts->datasize;i++){  
        /* Math simulating simple PID */
       if (math_cumu >= DATASIZE){
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[0], (ulp_u1)ulp_data[i]);
     232:	882a      	ldrhhi	r2, [r5, #0]
       }else{
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[math_cumu], (ulp_u1)ulp_data[i]);
     234:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
     238:	fa5f f18c 	uxtb.w	r1, ip
     23c:	fa5f f38e 	uxtb.w	r3, lr
     240:	b2d2      	uxtb	r2, r2
     242:	f000 fa1b 	bl	67c <math_int8>
       }
#if DEBUG>2
		printf("math8,%x\n",math_cumu);
#endif     
       if (math_cumu >= DATASIZE){
		  ulp_u2 cur_param=(ulp_u2)loop_param;
     246:	f8d8 2000 	ldr.w	r2, [r8]
       if (math_cumu >= DATASIZE){
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[0], (ulp_u1)ulp_data[i]);
       }else{
		  ulp_u1 cur_param=(ulp_u1)loop_param;
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[math_cumu], (ulp_u1)ulp_data[i]);
     24a:	4404      	add	r4, r0
#if DEBUG>2
		printf("math8,%x\n",math_cumu);
#endif     
       if (math_cumu >= DATASIZE){
		  ulp_u2 cur_param=(ulp_u2)loop_param;
          math_cumu += math_int16(cur_param, ulp_data[cur_param & 0x07], ulp_data[0], ulp_data[i]);
     24c:	b290      	uxth	r0, r2
     24e:	f000 0307 	and.w	r3, r0, #7
          math_cumu += math_int8(cur_param, (ulp_u1)ulp_data[cur_param & 0x07], (ulp_u1)ulp_data[math_cumu], (ulp_u1)ulp_data[i]);
       }
#if DEBUG>2
		printf("math8,%x\n",math_cumu);
#endif     
       if (math_cumu >= DATASIZE){
     252:	2c17      	cmp	r4, #23
		  ulp_u2 cur_param=(ulp_u2)loop_param;
          math_cumu += math_int16(cur_param, ulp_data[cur_param & 0x07], ulp_data[0], ulp_data[i]);
     254:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
       }else{
		  ulp_u2 cur_param=(ulp_u2)loop_param;
          math_cumu += math_int16(cur_param, ulp_data[cur_param & 0x07], ulp_data[math_cumu], ulp_data[i]);
     258:	bf94      	ite	ls
     25a:	f835 c014 	ldrhls.w	ip, [r5, r4, lsl #1]
#if DEBUG>2
		printf("math8,%x\n",math_cumu);
#endif     
       if (math_cumu >= DATASIZE){
		  ulp_u2 cur_param=(ulp_u2)loop_param;
          math_cumu += math_int16(cur_param, ulp_data[cur_param & 0x07], ulp_data[0], ulp_data[i]);
     25e:	f8b5 c000 	ldrhhi.w	ip, [r5]
       }else{
		  ulp_u2 cur_param=(ulp_u2)loop_param;
          math_cumu += math_int16(cur_param, ulp_data[cur_param & 0x07], ulp_data[math_cumu], ulp_data[i]);
     262:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
     266:	fa1f f28c 	uxth.w	r2, ip
     26a:	b289      	uxth	r1, r1
     26c:	b29b      	uxth	r3, r3
     26e:	f000 f9ef 	bl	650 <math_int16>
     272:	4404      	add	r4, r0
       }
#if DEBUG>2
		printf("math16,%x\n",math_cumu);
#endif     
		/* State change based on PID output */
        state = state_machine(math_cumu);
     274:	4620      	mov	r0, r4
     276:	f000 fb75 	bl	964 <state_machine>
         PLT_STATUS_PIN_SET;    /* Set on port pin to high. */
     }
     /* we end with port high so during the processing of the following part the pin is high. */

     
     for(i=0;i<facts->datasize;i++){  
     27a:	f8bb 2000 	ldrh.w	r2, [fp]
     27e:	3601      	adds	r6, #1
     280:	42b2      	cmp	r2, r6
     282:	d8cb      	bhi.n	21c <workload_func_1+0x90>
     284:	9403      	str	r4, [sp, #12]
     286:	9005      	str	r0, [sp, #20]
       
     } // for
     
     /* prepare the values for the display */
     /* here we have some table processing */
     bin2LCD((ulp_u1 *)display_out, facts->displaysize, ((ulp_u4)state<<16)|loop_param);
     288:	9e05      	ldr	r6, [sp, #20]
     28a:	f8d8 4000 	ldr.w	r4, [r8]
     28e:	f8bb 1002 	ldrh.w	r1, [fp, #2]
     292:	484b      	ldr	r0, [pc, #300]	; (3c0 <workload_func_1+0x234>)
     294:	ea44 4206 	orr.w	r2, r4, r6, lsl #16
     298:	f000 f93a 	bl	510 <bin2LCD>
	 {
		ulp_u4 cur_state=last_state;
		last_state=cur_state+display_out[(innerloop+state)&DISPLAYMASK];
     29c:	9804      	ldr	r0, [sp, #16]
     
     /* prepare the values for the display */
     /* here we have some table processing */
     bin2LCD((ulp_u1 *)display_out, facts->displaysize, ((ulp_u4)state<<16)|loop_param);
	 {
		ulp_u4 cur_state=last_state;
     29e:	4b46      	ldr	r3, [pc, #280]	; (3b8 <workload_func_1+0x22c>)
		last_state=cur_state+display_out[(innerloop+state)&DISPLAYMASK];
     2a0:	4a47      	ldr	r2, [pc, #284]	; (3c0 <workload_func_1+0x234>)
     
     /* prepare the values for the display */
     /* here we have some table processing */
     bin2LCD((ulp_u1 *)display_out, facts->displaysize, ((ulp_u4)state<<16)|loop_param);
	 {
		ulp_u4 cur_state=last_state;
     2a2:	681c      	ldr	r4, [r3, #0]
	 sid=last_state&0x3;
	 string=string_a[sid];     
     
     /* some String operation */
     /* find a sub string in a string - usecase for communications */
     p_str1 = (volatile ulp_u1 *) tesStringSearch((const ulp_u1 *)string, facts->needle);
     2a4:	f8db 1010 	ldr.w	r1, [fp, #16]
     /* prepare the values for the display */
     /* here we have some table processing */
     bin2LCD((ulp_u1 *)display_out, facts->displaysize, ((ulp_u4)state<<16)|loop_param);
	 {
		ulp_u4 cur_state=last_state;
		last_state=cur_state+display_out[(innerloop+state)&DISPLAYMASK];
     2a8:	4430      	add	r0, r6
     2aa:	f000 0c0f 	and.w	ip, r0, #15
     2ae:	4842      	ldr	r0, [pc, #264]	; (3b8 <workload_func_1+0x22c>)
     2b0:	f812 600c 	ldrb.w	r6, [r2, ip]
#if DEBUG>2
		printf("lcd,%x\n",last_state);
#endif     
	 /* setup flow to continue to next step input for verification and to make sure compiler does not optimize call away */
	 sid=last_state&0x3;
	 string=string_a[sid];     
     2b4:	4a43      	ldr	r2, [pc, #268]	; (3c4 <workload_func_1+0x238>)
     /* prepare the values for the display */
     /* here we have some table processing */
     bin2LCD((ulp_u1 *)display_out, facts->displaysize, ((ulp_u4)state<<16)|loop_param);
	 {
		ulp_u4 cur_state=last_state;
		last_state=cur_state+display_out[(innerloop+state)&DISPLAYMASK];
     2b6:	4434      	add	r4, r6
     2b8:	6004      	str	r4, [r0, #0]
	 }
#if DEBUG>2
		printf("lcd,%x\n",last_state);
#endif     
	 /* setup flow to continue to next step input for verification and to make sure compiler does not optimize call away */
	 sid=last_state&0x3;
     2ba:	6803      	ldr	r3, [r0, #0]
	 string=string_a[sid];     
     2bc:	4e42      	ldr	r6, [pc, #264]	; (3c8 <workload_func_1+0x23c>)
	 }
#if DEBUG>2
		printf("lcd,%x\n",last_state);
#endif     
	 /* setup flow to continue to next step input for verification and to make sure compiler does not optimize call away */
	 sid=last_state&0x3;
     2be:	f003 0403 	and.w	r4, r3, #3
	 string=string_a[sid];     
     2c2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
     2c6:	6030      	str	r0, [r6, #0]
     
     /* some String operation */
     /* find a sub string in a string - usecase for communications */
     p_str1 = (volatile ulp_u1 *) tesStringSearch((const ulp_u1 *)string, facts->needle);
     2c8:	f000 fcca 	bl	c60 <tesStringSearch>
#if DEBUG>2
		printf("sidx,%x\n",string + facts->needle_pos[sid] - p_str1,p_str1-string);
#endif     
     if (p_str1 != (string + facts->needle_pos[sid])){
     2cc:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
     2d0:	493d      	ldr	r1, [pc, #244]	; (3c8 <workload_func_1+0x23c>)
     2d2:	f8bc 3004 	ldrh.w	r3, [ip, #4]
     2d6:	680e      	ldr	r6, [r1, #0]
     2d8:	4433      	add	r3, r6
     2da:	4298      	cmp	r0, r3
     2dc:	d00a      	beq.n	2f4 <workload_func_1+0x168>
         PLT_STATUS_PIN_CLEAR;      /* Set on port pin to low. */
     2de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    	 PLT_STATUS_PIN_SET;        /* Set on port pin to high again. */
	   errors++;
     2e2:	493a      	ldr	r1, [pc, #232]	; (3cc <workload_func_1+0x240>)
     p_str1 = (volatile ulp_u1 *) tesStringSearch((const ulp_u1 *)string, facts->needle);
#if DEBUG>2
		printf("sidx,%x\n",string + facts->needle_pos[sid] - p_str1,p_str1-string);
#endif     
     if (p_str1 != (string + facts->needle_pos[sid])){
         PLT_STATUS_PIN_CLEAR;      /* Set on port pin to low. */
     2e4:	f8c9 2000 	str.w	r2, [r9]
    	 PLT_STATUS_PIN_SET;        /* Set on port pin to high again. */
     2e8:	f8ca 2000 	str.w	r2, [sl]
	   errors++;
     2ec:	680b      	ldr	r3, [r1, #0]
     2ee:	4a37      	ldr	r2, [pc, #220]	; (3cc <workload_func_1+0x240>)
     2f0:	3301      	adds	r3, #1
     2f2:	6013      	str	r3, [r2, #0]
#endif
#if GEN_REF
		facts->needle_pos[sid]=p_str1-string;
#endif
     }
	 last_state+= (p_str1==NULL) ? 256 : p_str1-string;
     2f4:	2800      	cmp	r0, #0
     2f6:	d058      	beq.n	3aa <workload_func_1+0x21e>
     2f8:	1b80      	subs	r0, r0, r6
     2fa:	492f      	ldr	r1, [pc, #188]	; (3b8 <workload_func_1+0x22c>)
     tesBytesCopy(s,(void *)string,tesStringLength((ulp_u1 *)string));
     2fc:	9606      	str	r6, [sp, #24]
#endif
#if GEN_REF
		facts->needle_pos[sid]=p_str1-string;
#endif
     }
	 last_state+= (p_str1==NULL) ? 256 : p_str1-string;
     2fe:	680b      	ldr	r3, [r1, #0]
     300:	4403      	add	r3, r0
     tesBytesCopy(s,(void *)string,tesStringLength((ulp_u1 *)string));
     302:	4630      	mov	r0, r6
#endif
#if GEN_REF
		facts->needle_pos[sid]=p_str1-string;
#endif
     }
	 last_state+= (p_str1==NULL) ? 256 : p_str1-string;
     304:	4e2c      	ldr	r6, [pc, #176]	; (3b8 <workload_func_1+0x22c>)
     306:	6033      	str	r3, [r6, #0]
     tesBytesCopy(s,(void *)string,tesStringLength((ulp_u1 *)string));
     308:	f000 fcc4 	bl	c94 <tesStringLength>
     30c:	9906      	ldr	r1, [sp, #24]
     30e:	4602      	mov	r2, r0
     310:	a808      	add	r0, sp, #32
     312:	f000 fc9b 	bl	c4c <tesBytesCopy>
     i = bubblesort(s,(int)facts->sort_max,(unsigned int)facts->sort_idx);
#if DEBUG>2
		printf("sres,%x\n",i);
#endif     
     if (i != facts->sort_res[sid]){
     316:	445c      	add	r4, fp
		facts->needle_pos[sid]=p_str1-string;
#endif
     }
	 last_state+= (p_str1==NULL) ? 256 : p_str1-string;
     tesBytesCopy(s,(void *)string,tesStringLength((ulp_u1 *)string));
     i = bubblesort(s,(int)facts->sort_max,(unsigned int)facts->sort_idx);
     318:	f89b 2018 	ldrb.w	r2, [fp, #24]
     31c:	f8db 1014 	ldr.w	r1, [fp, #20]
     320:	a808      	add	r0, sp, #32
     322:	f000 fa5b 	bl	7dc <bubblesort>
#if DEBUG>2
		printf("sres,%x\n",i);
#endif     
     if (i != facts->sort_res[sid]){
     326:	7b24      	ldrb	r4, [r4, #12]
     328:	42a0      	cmp	r0, r4
     32a:	d00a      	beq.n	342 <workload_func_1+0x1b6>
         PLT_STATUS_PIN_CLEAR;      /* Set on port pin to low. */
     32c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    	 PLT_STATUS_PIN_SET;        /* Set on port pin to high again. */
	   errors++;
     330:	4926      	ldr	r1, [pc, #152]	; (3cc <workload_func_1+0x240>)
     i = bubblesort(s,(int)facts->sort_max,(unsigned int)facts->sort_idx);
#if DEBUG>2
		printf("sres,%x\n",i);
#endif     
     if (i != facts->sort_res[sid]){
         PLT_STATUS_PIN_CLEAR;      /* Set on port pin to low. */
     332:	f8c9 2000 	str.w	r2, [r9]
    	 PLT_STATUS_PIN_SET;        /* Set on port pin to high again. */
     336:	f8ca 2000 	str.w	r2, [sl]
	   errors++;
     33a:	680b      	ldr	r3, [r1, #0]
     33c:	4e23      	ldr	r6, [pc, #140]	; (3cc <workload_func_1+0x240>)
     33e:	3301      	adds	r3, #1
     340:	6033      	str	r3, [r6, #0]
#endif
#if GEN_REF
		facts->sort_res[sid]=i;
#endif
     }
	 last_state+=i;
     342:	4c1d      	ldr	r4, [pc, #116]	; (3b8 <workload_func_1+0x22c>)

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
     344:	f89b 3019 	ldrb.w	r3, [fp, #25]
#endif
#if GEN_REF
		facts->sort_res[sid]=i;
#endif
     }
	 last_state+=i;
     348:	6826      	ldr	r6, [r4, #0]
     34a:	4c1b      	ldr	r4, [pc, #108]	; (3b8 <workload_func_1+0x22c>)

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
     34c:	4a20      	ldr	r2, [pc, #128]	; (3d0 <workload_func_1+0x244>)
     34e:	4921      	ldr	r1, [pc, #132]	; (3d4 <workload_func_1+0x248>)
#endif
#if GEN_REF
		facts->sort_res[sid]=i;
#endif
     }
	 last_state+=i;
     350:	4406      	add	r6, r0

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
     352:	2007      	movs	r0, #7
     354:	9000      	str	r0, [sp, #0]
     356:	4820      	ldr	r0, [pc, #128]	; (3d8 <workload_func_1+0x24c>)
#endif
#if GEN_REF
		facts->sort_res[sid]=i;
#endif
     }
	 last_state+=i;
     358:	6026      	str	r6, [r4, #0]

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
     35a:	f000 f9ad 	bl	6b8 <permute>
	 {
		ulp_u4 cur_state=last_state;
		last_state=cur_state+ipOut[0];				/* Take an output of the permute into the compute chain */
     35e:	4a1e      	ldr	r2, [pc, #120]	; (3d8 <workload_func_1+0x24c>)
     }
	 last_state+=i;

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
	 {
		ulp_u4 cur_state=last_state;
     360:	6821      	ldr	r1, [r4, #0]
		last_state=cur_state+ipOut[0];				/* Take an output of the permute into the compute chain */
     362:	7813      	ldrb	r3, [r2, #0]
	 }
#if DEBUG>2
		printf("slast,%x\n",last_state);
#endif     
     if (errors==0)
     364:	4819      	ldr	r0, [pc, #100]	; (3cc <workload_func_1+0x240>)
	 last_state+=i;

     permute((ulp_u1 *)ipOut, (ulp_u1 *)rxBuffer, ip, facts->permutes, PERMUTE_BUF_MASK);
	 {
		ulp_u4 cur_state=last_state;
		last_state=cur_state+ipOut[0];				/* Take an output of the permute into the compute chain */
     366:	4419      	add	r1, r3
     368:	6021      	str	r1, [r4, #0]
	 }
#if DEBUG>2
		printf("slast,%x\n",last_state);
#endif     
     if (errors==0)
     36a:	6804      	ldr	r4, [r0, #0]
     36c:	b91c      	cbnz	r4, 376 <workload_func_1+0x1ea>
         PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. Used to make some peripheral access but can */
     36e:	f44f 6100 	mov.w	r1, #2048	; 0x800
     372:	f8c9 1000 	str.w	r1, [r9]
                                 /* also be used to measure the correction repeat frequency and duration of the */
                                 /* Workload function */
     
     loop_count++;
     376:	4a19      	ldr	r2, [pc, #100]	; (3dc <workload_func_1+0x250>)
     378:	4e18      	ldr	r6, [pc, #96]	; (3dc <workload_func_1+0x250>)
     37a:	6813      	ldr	r3, [r2, #0]
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     37c:	9a04      	ldr	r2, [sp, #16]
     37e:	9c07      	ldr	r4, [sp, #28]
     if (errors==0)
         PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. Used to make some peripheral access but can */
                                 /* also be used to measure the correction repeat frequency and duration of the */
                                 /* Workload function */
     
     loop_count++;
     380:	3301      	adds	r3, #1
     382:	6033      	str	r3, [r6, #0]
     loop_param++;
     384:	f8d8 0000 	ldr.w	r0, [r8]
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     388:	3201      	adds	r2, #1
         PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. Used to make some peripheral access but can */
                                 /* also be used to measure the correction repeat frequency and duration of the */
                                 /* Workload function */
     
     loop_count++;
     loop_param++;
     38a:	3001      	adds	r0, #1
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     38c:	4294      	cmp	r4, r2
     38e:	9204      	str	r2, [sp, #16]
         PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. Used to make some peripheral access but can */
                                 /* also be used to measure the correction repeat frequency and duration of the */
                                 /* Workload function */
     
     loop_count++;
     loop_param++;
     390:	f8c8 0000 	str.w	r0, [r8]
#else
   ulp_u1 s[128];
#endif
   unsigned int DATASIZE=sizeof(ulp_data)/sizeof(ulp_u2);
   
   for (innerloop=0; innerloop < repeat; innerloop++)
     394:	f47f af12 	bne.w	1bc <workload_func_1+0x30>
     398:	9a05      	ldr	r2, [sp, #20]
                                 /* Workload function */
     
     loop_count++;
     loop_param++;
   } // for innerloop
   last_state+=state;
     39a:	4d07      	ldr	r5, [pc, #28]	; (3b8 <workload_func_1+0x22c>)
     39c:	4906      	ldr	r1, [pc, #24]	; (3b8 <workload_func_1+0x22c>)
     39e:	682f      	ldr	r7, [r5, #0]
     3a0:	4417      	add	r7, r2
     3a2:	600f      	str	r7, [r1, #0]
#if DEBUG>2
		printf("send,%x\n",last_state);
#endif     
}
     3a4:	b029      	add	sp, #164	; 0xa4
     3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
#if GEN_REF
		facts->needle_pos[sid]=p_str1-string;
#endif
     }
	 last_state+= (p_str1==NULL) ? 256 : p_str1-string;
     3aa:	f44f 7080 	mov.w	r0, #256	; 0x100
     3ae:	e7a4      	b.n	2fa <workload_func_1+0x16e>
void workload_func_1(ulp_u1 repeat, vfacts *facts) {

   unsigned int i,sid;
   unsigned int innerloop;
   ulp_u4 math_cumu=last_state&0xffff;
   unsigned int state=0;
     3b0:	9005      	str	r0, [sp, #20]
     3b2:	4602      	mov	r2, r0
     3b4:	e7f1      	b.n	39a <workload_func_1+0x20e>
     3b6:	bf00      	nop
     3b8:	10001200 	.word	0x10001200
     3bc:	10001008 	.word	0x10001008
     3c0:	100011e8 	.word	0x100011e8
     3c4:	10001150 	.word	0x10001150
     3c8:	100011f8 	.word	0x100011f8
     3cc:	100011e0 	.word	0x100011e0
     3d0:	0000069d 	.word	0x0000069d
     3d4:	10001224 	.word	0x10001224
     3d8:	10001210 	.word	0x10001210
     3dc:	100011fc 	.word	0x100011fc
     3e0:	100011e4 	.word	0x100011e4
     3e4:	40010098 	.word	0x40010098
     3e8:	40010090 	.word	0x40010090

000003ec <CoreProfileMain>:
 Function: CoreProfileMain
	Core Profile Workload Function
*/

void CoreProfileMain(void)
{
     3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (CALLGRIND_RUN || DEBUG)
	unsigned int outer_iterations=0;
#endif
	RESTORE_ON_WAKEUP vfacts *facts;
	tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     3f0:	2208      	movs	r2, #8
     3f2:	493a      	ldr	r1, [pc, #232]	; (4dc <CoreProfileMain+0xf0>)
     3f4:	483a      	ldr	r0, [pc, #232]	; (4e0 <CoreProfileMain+0xf4>)
	__asm int 3;
 #else
	__asm volatile("int3");
 #endif
#endif
	facts=&(defaults[work_id]);
     3f6:	4c3b      	ldr	r4, [pc, #236]	; (4e4 <CoreProfileMain+0xf8>)
     3f8:	4e3b      	ldr	r6, [pc, #236]	; (4e8 <CoreProfileMain+0xfc>)
     3fa:	4d3c      	ldr	r5, [pc, #240]	; (4ec <CoreProfileMain+0x100>)
     3fc:	f8df a104 	ldr.w	sl, [pc, #260]	; 504 <CoreProfileMain+0x118>
     400:	f8df 8104 	ldr.w	r8, [pc, #260]	; 508 <CoreProfileMain+0x11c>
     404:	f8df 9104 	ldr.w	r9, [pc, #260]	; 50c <CoreProfileMain+0x120>
{
#if (CALLGRIND_RUN || DEBUG)
	unsigned int outer_iterations=0;
#endif
	RESTORE_ON_WAKEUP vfacts *facts;
	tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     408:	f000 fc20 	bl	c4c <tesBytesCopy>
	tesBytesCopy((void *)ipOut,(void *)ipOut_ini,PERMUTE_BUF_SIZE);
     40c:	2208      	movs	r2, #8
     40e:	4938      	ldr	r1, [pc, #224]	; (4f0 <CoreProfileMain+0x104>)
     410:	4838      	ldr	r0, [pc, #224]	; (4f4 <CoreProfileMain+0x108>)
     412:	f000 fc1b 	bl	c4c <tesBytesCopy>
 Set timers for wakeups
*/
void setTimers(vfacts *facts)
{
	int i;
	tesSlotTimerSet(timers[0], 0 /*slot*/, 0 /*param*/);  /* Always register for slot 0 */
     416:	4b38      	ldr	r3, [pc, #224]	; (4f8 <CoreProfileMain+0x10c>)
     418:	2200      	movs	r2, #0
     41a:	6818      	ldr	r0, [r3, #0]
	__asm int 3;
 #else
	__asm volatile("int3");
 #endif
#endif
	facts=&(defaults[work_id]);
     41c:	6823      	ldr	r3, [r4, #0]
 Set timers for wakeups
*/
void setTimers(vfacts *facts)
{
	int i;
	tesSlotTimerSet(timers[0], 0 /*slot*/, 0 /*param*/);  /* Always register for slot 0 */
     41e:	4611      	mov	r1, r2
     420:	f000 fbb8 	bl	b94 <tesSlotTimerSet>
        TesEvent * event = tesEventWait();
		facts=&(defaults[work_id]);
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
			/* Reset values so next duty cycle is going to be the same. */
			/* Note : slot 0 must be registered for this to work! */
			last_state=0;
     424:	2700      	movs	r7, #0
     426:	e004      	b.n	432 <CoreProfileMain+0x46>
			tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
			tesBytesCopy((void *)ipOut,(void *)ipOut_ini,PERMUTE_BUF_SIZE);
			math_int_init();
			reset_state();
		}
        workload_func_1((ulp_u1)facts->iterations,facts);
     428:	4659      	mov	r1, fp
     42a:	f89b 0020 	ldrb.w	r0, [fp, #32]
     42e:	f7ff fead 	bl	18c <workload_func_1>
	facts=&(defaults[work_id]);
    setTimers(facts);

    // event loop
    for (;;) {
        TesEvent * event = tesEventWait();
     432:	f000 fb29 	bl	a88 <tesEventWait>
		facts=&(defaults[work_id]);
     436:	6821      	ldr	r1, [r4, #0]
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
     438:	4285      	cmp	r5, r0
    setTimers(facts);

    // event loop
    for (;;) {
        TesEvent * event = tesEventWait();
		facts=&(defaults[work_id]);
     43a:	eb01 1201 	add.w	r2, r1, r1, lsl #4
     43e:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
     442:	d016      	beq.n	472 <CoreProfileMain+0x86>
     444:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
     448:	1c42      	adds	r2, r0, #1
     44a:	d1ed      	bne.n	428 <CoreProfileMain+0x3c>
			/* Reset values so next duty cycle is going to be the same. */
			/* Note : slot 0 must be registered for this to work! */
			last_state=0;
			loop_param=0;
			tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     44c:	2208      	movs	r2, #8
     44e:	4923      	ldr	r1, [pc, #140]	; (4dc <CoreProfileMain+0xf0>)
     450:	4823      	ldr	r0, [pc, #140]	; (4e0 <CoreProfileMain+0xf4>)
        TesEvent * event = tesEventWait();
		facts=&(defaults[work_id]);
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
			/* Reset values so next duty cycle is going to be the same. */
			/* Note : slot 0 must be registered for this to work! */
			last_state=0;
     452:	f8c8 7000 	str.w	r7, [r8]
			loop_param=0;
     456:	f8c9 7000 	str.w	r7, [r9]
			tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     45a:	f000 fbf7 	bl	c4c <tesBytesCopy>
			tesBytesCopy((void *)ipOut,(void *)ipOut_ini,PERMUTE_BUF_SIZE);
     45e:	2208      	movs	r2, #8
     460:	4923      	ldr	r1, [pc, #140]	; (4f0 <CoreProfileMain+0x104>)
     462:	4824      	ldr	r0, [pc, #144]	; (4f4 <CoreProfileMain+0x108>)
     464:	f000 fbf2 	bl	c4c <tesBytesCopy>
			math_int_init();
     468:	f000 f912 	bl	690 <math_int_init>
			reset_state();
     46c:	f000 faae 	bl	9cc <reset_state>
     470:	e7da      	b.n	428 <CoreProfileMain+0x3c>
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
			/* Reset values so next duty cycle is going to be the same. */
			/* Note : slot 0 must be registered for this to work! */
			last_state=0;
			loop_param=0;
			tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     472:	2208      	movs	r2, #8
     474:	4919      	ldr	r1, [pc, #100]	; (4dc <CoreProfileMain+0xf0>)
     476:	481a      	ldr	r0, [pc, #104]	; (4e0 <CoreProfileMain+0xf4>)
        TesEvent * event = tesEventWait();
		facts=&(defaults[work_id]);
        if ((event == &tesTimer) || (facts->slots[0]==-1)) {
			/* Reset values so next duty cycle is going to be the same. */
			/* Note : slot 0 must be registered for this to work! */
			last_state=0;
     478:	f8c8 7000 	str.w	r7, [r8]
			loop_param=0;
     47c:	f8c9 7000 	str.w	r7, [r9]
			tesBytesCopy((void *)rxBuffer,(void *)rxBuffer_ini,PERMUTE_BUF_SIZE);
     480:	f000 fbe4 	bl	c4c <tesBytesCopy>
			tesBytesCopy((void *)ipOut,(void *)ipOut_ini,PERMUTE_BUF_SIZE);
     484:	2208      	movs	r2, #8
     486:	491a      	ldr	r1, [pc, #104]	; (4f0 <CoreProfileMain+0x104>)
     488:	481a      	ldr	r0, [pc, #104]	; (4f4 <CoreProfileMain+0x108>)
     48a:	f000 fbdf 	bl	c4c <tesBytesCopy>
			math_int_init();
     48e:	f000 f8ff 	bl	690 <math_int_init>
			reset_state();
     492:	f000 fa9b 	bl	9cc <reset_state>
		}
        workload_func_1((ulp_u1)facts->iterations,facts);
     496:	4659      	mov	r1, fp
     498:	f89b 0020 	ldrb.w	r0, [fp, #32]
     49c:	f7ff fe76 	bl	18c <workload_func_1>
			if (work_id>=(sizeof(defaults)/sizeof(vfacts)))
				exit(0);
            setTimers(facts);      
#else
		/* A0 slot, after workload, verify final result of previous iterations */
		if (last_state!=facts->last_state) {
     4a0:	f8db 101c 	ldr.w	r1, [fp, #28]
     4a4:	f8d8 3000 	ldr.w	r3, [r8]
     4a8:	4299      	cmp	r1, r3
     4aa:	d00a      	beq.n	4c2 <CoreProfileMain+0xd6>
		    PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. */
     4ac:	4813      	ldr	r0, [pc, #76]	; (4fc <CoreProfileMain+0x110>)
			PLT_STATUS_PIN_SET;     /* Set on port pin to high again. */
     4ae:	4a14      	ldr	r2, [pc, #80]	; (500 <CoreProfileMain+0x114>)
				exit(0);
            setTimers(facts);      
#else
		/* A0 slot, after workload, verify final result of previous iterations */
		if (last_state!=facts->last_state) {
		    PLT_STATUS_PIN_CLEAR;   /* Set on port pin to low. */
     4b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     4b4:	6001      	str	r1, [r0, #0]
			PLT_STATUS_PIN_SET;     /* Set on port pin to high again. */
     4b6:	6011      	str	r1, [r2, #0]
			errors++;
     4b8:	f8da 3000 	ldr.w	r3, [sl]
     4bc:	3301      	adds	r3, #1
     4be:	f8ca 3000 	str.w	r3, [sl]
		}
 #if DEBUG
			if (++outer_iterations>16)
				exit(0);
 #endif
			if (work_id>=(sizeof(defaults)/sizeof(vfacts)))
     4c2:	6820      	ldr	r0, [r4, #0]
     4c4:	4a07      	ldr	r2, [pc, #28]	; (4e4 <CoreProfileMain+0xf8>)
 Set timers for wakeups
*/
void setTimers(vfacts *facts)
{
	int i;
	tesSlotTimerSet(timers[0], 0 /*slot*/, 0 /*param*/);  /* Always register for slot 0 */
     4c6:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <CoreProfileMain+0x10c>)
		}
 #if DEBUG
			if (++outer_iterations>16)
				exit(0);
 #endif
			if (work_id>=(sizeof(defaults)/sizeof(vfacts)))
     4c8:	2803      	cmp	r0, #3
				work_id=0;
     4ca:	bf88      	it	hi
     4cc:	6017      	strhi	r7, [r2, #0]
 Set timers for wakeups
*/
void setTimers(vfacts *facts)
{
	int i;
	tesSlotTimerSet(timers[0], 0 /*slot*/, 0 /*param*/);  /* Always register for slot 0 */
     4ce:	2200      	movs	r2, #0
     4d0:	4611      	mov	r1, r2
     4d2:	6818      	ldr	r0, [r3, #0]
     4d4:	f000 fb5e 	bl	b94 <tesSlotTimerSet>
     4d8:	e7ab      	b.n	432 <CoreProfileMain+0x46>
     4da:	bf00      	nop
     4dc:	10001000 	.word	0x10001000
     4e0:	10001224 	.word	0x10001224
     4e4:	10001164 	.word	0x10001164
     4e8:	10001040 	.word	0x10001040
     4ec:	10001218 	.word	0x10001218
     4f0:	10001038 	.word	0x10001038
     4f4:	10001210 	.word	0x10001210
     4f8:	10001160 	.word	0x10001160
     4fc:	40010098 	.word	0x40010098
     500:	40010090 	.word	0x40010090
     504:	100011e0 	.word	0x100011e0
     508:	10001200 	.word	0x10001200
     50c:	100011e4 	.word	0x100011e4

00000510 <bin2LCD>:
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     510:	2900      	cmp	r1, #0
     512:	f000 8097 	beq.w	644 <bin2LCD+0x134>
	The values written are based on the value of the bin parameter, and actual value to write
	is picked from the lcd_7segment_ascii_table.
	
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
     516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     51a:	4d4c      	ldr	r5, [pc, #304]	; (64c <bin2LCD+0x13c>)
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     51c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
     520:	442b      	add	r3, r5
     522:	4604      	mov	r4, r0
     524:	f893 6020 	ldrb.w	r6, [r3, #32]
     528:	f804 6b01 	strb.w	r6, [r4], #1
     52c:	4408      	add	r0, r1
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     52e:	42a0      	cmp	r0, r4
     530:	f101 31ff 	add.w	r1, r1, #4294967295
     534:	f001 0707 	and.w	r7, r1, #7
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
      bin = (bin>>4);
     538:	ea4f 1312 	mov.w	r3, r2, lsr #4
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     53c:	f000 8083 	beq.w	646 <bin2LCD+0x136>
     540:	2f00      	cmp	r7, #0
     542:	d045      	beq.n	5d0 <bin2LCD+0xc0>
     544:	2f01      	cmp	r7, #1
     546:	d039      	beq.n	5bc <bin2LCD+0xac>
     548:	2f02      	cmp	r7, #2
     54a:	d02f      	beq.n	5ac <bin2LCD+0x9c>
     54c:	2f03      	cmp	r7, #3
     54e:	d025      	beq.n	59c <bin2LCD+0x8c>
     550:	2f04      	cmp	r7, #4
     552:	d01b      	beq.n	58c <bin2LCD+0x7c>
     554:	2f05      	cmp	r7, #5
     556:	d011      	beq.n	57c <bin2LCD+0x6c>
     558:	2f06      	cmp	r7, #6
     55a:	d007      	beq.n	56c <bin2LCD+0x5c>
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     560:	18ee      	adds	r6, r5, r3
      bin = (bin>>4);
     562:	0a13      	lsrs	r3, r2, #8
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     564:	f896 2020 	ldrb.w	r2, [r6, #32]
     568:	f804 2b01 	strb.w	r2, [r4], #1
     56c:	f003 087f 	and.w	r8, r3, #127	; 0x7f
     570:	44a8      	add	r8, r5
      bin = (bin>>4);
     572:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     574:	f898 1020 	ldrb.w	r1, [r8, #32]
     578:	f804 1b01 	strb.w	r1, [r4], #1
     57c:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
     580:	44ac      	add	ip, r5
      bin = (bin>>4);
     582:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     584:	f89c 7020 	ldrb.w	r7, [ip, #32]
     588:	f804 7b01 	strb.w	r7, [r4], #1
     58c:	f003 067f 	and.w	r6, r3, #127	; 0x7f
     590:	442e      	add	r6, r5
      bin = (bin>>4);
     592:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     594:	f896 2020 	ldrb.w	r2, [r6, #32]
     598:	f804 2b01 	strb.w	r2, [r4], #1
     59c:	f003 087f 	and.w	r8, r3, #127	; 0x7f
     5a0:	44a8      	add	r8, r5
      bin = (bin>>4);
     5a2:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     5a4:	f898 1020 	ldrb.w	r1, [r8, #32]
     5a8:	f804 1b01 	strb.w	r1, [r4], #1
     5ac:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
     5b0:	44ac      	add	ip, r5
      bin = (bin>>4);
     5b2:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     5b4:	f89c 7020 	ldrb.w	r7, [ip, #32]
     5b8:	f804 7b01 	strb.w	r7, [r4], #1
     5bc:	f003 067f 	and.w	r6, r3, #127	; 0x7f
     5c0:	442e      	add	r6, r5
      bin = (bin>>4);
     5c2:	091b      	lsrs	r3, r3, #4
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     5c4:	f896 2020 	ldrb.w	r2, [r6, #32]
     5c8:	f804 2b01 	strb.w	r2, [r4], #1
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     5cc:	42a0      	cmp	r0, r4
     5ce:	d037      	beq.n	640 <bin2LCD+0x130>
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
     5d0:	f003 087f 	and.w	r8, r3, #127	; 0x7f
     5d4:	44a8      	add	r8, r5
     5d6:	4622      	mov	r2, r4
     5d8:	f898 1020 	ldrb.w	r1, [r8, #32]
     5dc:	f802 1b01 	strb.w	r1, [r2], #1
     5e0:	f3c3 1c06 	ubfx	ip, r3, #4, #7
     5e4:	f3c3 2e06 	ubfx	lr, r3, #8, #7
     5e8:	f3c3 3706 	ubfx	r7, r3, #12, #7
     5ec:	f3c3 4606 	ubfx	r6, r3, #16, #7
     5f0:	44ae      	add	lr, r5
     5f2:	f3c3 5106 	ubfx	r1, r3, #20, #7
     5f6:	44ac      	add	ip, r5
     5f8:	442f      	add	r7, r5
     5fa:	442e      	add	r6, r5
     5fc:	4429      	add	r1, r5
     5fe:	eb05 6313 	add.w	r3, r5, r3, lsr #24
     602:	f89e 8020 	ldrb.w	r8, [lr, #32]
     606:	f89c c020 	ldrb.w	ip, [ip, #32]
     60a:	f884 c001 	strb.w	ip, [r4, #1]
     60e:	f897 e020 	ldrb.w	lr, [r7, #32]
     612:	f882 8001 	strb.w	r8, [r2, #1]
     616:	f896 7020 	ldrb.w	r7, [r6, #32]
     61a:	f895 2020 	ldrb.w	r2, [r5, #32]
     61e:	f891 6020 	ldrb.w	r6, [r1, #32]
     622:	f893 1020 	ldrb.w	r1, [r3, #32]
     626:	f884 e003 	strb.w	lr, [r4, #3]
     62a:	7127      	strb	r7, [r4, #4]
     62c:	7166      	strb	r6, [r4, #5]
     62e:	71a1      	strb	r1, [r4, #6]
     630:	71e2      	strb	r2, [r4, #7]
     632:	3408      	adds	r4, #8
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     634:	42a0      	cmp	r0, r4
      lcd[i] = lcd_7segment_ascii_table[(bin & 0x7F) + 0x20];
      bin = (bin>>4);
     636:	f04f 0300 	mov.w	r3, #0
*/
void bin2LCD(ulp_u1 *lcd, unsigned int size, ulp_u4 bin)
{
    unsigned int i;
    
    for(i=0;i<size;i++){
     63a:	d1c9      	bne.n	5d0 <bin2LCD+0xc0>
     63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     644:	4770      	bx	lr
     646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     64a:	bf00      	nop
     64c:	000013c4 	.word	0x000013c4

00000650 <math_int16>:
ulp_u2 math_int16(ulp_u2 x, ulp_u2 y, ulp_u2 offset, ulp_u2 gain)
{
   ulp_u2 result;
   
   /* Linear Approximation and Scale */
   result = ((ulp_u2)(x - offset + y - offset)>>(ulp_u2)1) * gain;
     650:	1a80      	subs	r0, r0, r2
     652:	4401      	add	r1, r0
     654:	1a89      	subs	r1, r1, r2
   
#if DEBUG>3
		printf("math16.res1,%x\n",result);
#endif     
   
   integrator_sum += ((((int32_t) result << 16) - integrator_sum) >> 14);
     656:	4a08      	ldr	r2, [pc, #32]	; (678 <math_int16+0x28>)
ulp_u2 math_int16(ulp_u2 x, ulp_u2 y, ulp_u2 offset, ulp_u2 gain)
{
   ulp_u2 result;
   
   /* Linear Approximation and Scale */
   result = ((ulp_u2)(x - offset + y - offset)>>(ulp_u2)1) * gain;
     658:	f3c1 0c4e 	ubfx	ip, r1, #1, #15
     65c:	fb1c f003 	smulbb	r0, ip, r3
   
#if DEBUG>3
		printf("math16.res1,%x\n",result);
#endif     
   
   integrator_sum += ((((int32_t) result << 16) - integrator_sum) >> 14);
     660:	6813      	ldr	r3, [r2, #0]
ulp_u2 math_int16(ulp_u2 x, ulp_u2 y, ulp_u2 offset, ulp_u2 gain)
{
   ulp_u2 result;
   
   /* Linear Approximation and Scale */
   result = ((ulp_u2)(x - offset + y - offset)>>(ulp_u2)1) * gain;
     662:	fa1f fc80 	uxth.w	ip, r0
   
#if DEBUG>3
		printf("math16.res1,%x\n",result);
#endif     
   
   integrator_sum += ((((int32_t) result << 16) - integrator_sum) >> 14);
     666:	ebc3 410c 	rsb	r1, r3, ip, lsl #16
     66a:	eb03 33a1 	add.w	r3, r3, r1, asr #14
#endif     
   result -= (ulp_u2)(integrator_sum >> 16);
#if DEBUG>3
		printf("math16.res2,%x\n",result);
#endif     
   return (result);
     66e:	ebac 4013 	sub.w	r0, ip, r3, lsr #16
   
}
     672:	b280      	uxth	r0, r0
   
#if DEBUG>3
		printf("math16.res1,%x\n",result);
#endif     
   
   integrator_sum += ((((int32_t) result << 16) - integrator_sum) >> 14);
     674:	6013      	str	r3, [r2, #0]
#if DEBUG>3
		printf("math16.res2,%x\n",result);
#endif     
   return (result);
   
}
     676:	4770      	bx	lr
     678:	10001204 	.word	0x10001204

0000067c <math_int8>:
   /* Linear Approximation and Scale */
   result = ((ulp_u1)(x - offset + y - offset)>>(ulp_u1)1) * gain;
#if DEBUG>3
		printf("math8.res,%x\n",result);
#endif     
   return (result);
     67c:	1a80      	subs	r0, r0, r2
     67e:	4401      	add	r1, r0
     680:	1a89      	subs	r1, r1, r2
     682:	f3c1 0246 	ubfx	r2, r1, #1, #7
     686:	fb02 f203 	mul.w	r2, r2, r3
  
}
     68a:	b2d0      	uxtb	r0, r2
     68c:	4770      	bx	lr
     68e:	bf00      	nop

00000690 <math_int_init>:

 void math_int_init(void) {
	integrator_sum=0;
     690:	4b01      	ldr	r3, [pc, #4]	; (698 <math_int_init+0x8>)
     692:	2200      	movs	r2, #0
     694:	601a      	str	r2, [r3, #0]
     696:	4770      	bx	lr
     698:	10001204 	.word	0x10001204

0000069c <ip>:
	The function modifies a value using simple 8b math.
	
*/
ulp_u1 ip(ulp_u1 i)
{
	return (ulp_u1)57 - (ulp_u1)((i & (ulp_u1)0x07) << (ulp_u1)(ulp_u1)3) + (ulp_u1)((i >> (ulp_u1)2) & (ulp_u1)0x06) - (ulp_u1)((i >> (ulp_u1)5) & (ulp_u1)0x01);
     69c:	0882      	lsrs	r2, r0, #2
     69e:	00c3      	lsls	r3, r0, #3
     6a0:	f002 0106 	and.w	r1, r2, #6
     6a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
     6a8:	1a8b      	subs	r3, r1, r2
     6aa:	f3c0 1040 	ubfx	r0, r0, #5, #1
     6ae:	1a19      	subs	r1, r3, r0
     6b0:	3139      	adds	r1, #57	; 0x39
}
     6b2:	b2c8      	uxtb	r0, r1
     6b4:	4770      	bx	lr
     6b6:	bf00      	nop

000006b8 <permute>:
ulp_u1 *in,
ulp_u1 (*func)(ulp_u1),
ulp_u1 permutes,
ulp_u1 size_mask
)
{
     6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6bc:	3b01      	subs	r3, #1
	do
	{
		permutes--;
     6be:	b2dc      	uxtb	r4, r3
ulp_u1 *in,
ulp_u1 (*func)(ulp_u1),
ulp_u1 permutes,
ulp_u1 size_mask
)
{
     6c0:	4605      	mov	r5, r0
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
     6c2:	4620      	mov	r0, r4
ulp_u1 *in,
ulp_u1 (*func)(ulp_u1),
ulp_u1 permutes,
ulp_u1 size_mask
)
{
     6c4:	f89d 8020 	ldrb.w	r8, [sp, #32]
     6c8:	460e      	mov	r6, r1
     6ca:	4617      	mov	r7, r2
     6cc:	f003 0a01 	and.w	sl, r3, #1
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
     6d0:	4790      	blx	r2
	This function is used to select a bit from a value in the input table parameter
	
*/
ulp_u1 getBit(ulp_u1 *table, ulp_u1 index, ulp_u1 size_mask)
{
	return (table[index & size_mask] & (0x80 >> (index & 0x07)));
     6d2:	ea00 0108 	and.w	r1, r0, r8
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);
     6d6:	f04f 0980 	mov.w	r9, #128	; 0x80

	*p = (value!=0) ? (m | *p) : (~m & *p);
     6da:	f816 c001 	ldrb.w	ip, [r6, r1]
     6de:	f000 0007 	and.w	r0, r0, #7
     6e2:	fa49 f100 	asr.w	r1, r9, r0
	The bit is set if the value parameter is not 0, unset otherwise.
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
     6e6:	ea04 0208 	and.w	r2, r4, r8
	unsigned char m = 0x80 >> (index & 0x07);
     6ea:	f004 0307 	and.w	r3, r4, #7

	*p = (value!=0) ? (m | *p) : (~m & *p);
     6ee:	ea1c 0f01 	tst.w	ip, r1
	The bit is set if the value parameter is not 0, unset otherwise.
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
     6f2:	442a      	add	r2, r5
	unsigned char m = 0x80 >> (index & 0x07);
     6f4:	fa49 f003 	asr.w	r0, r9, r3

	*p = (value!=0) ? (m | *p) : (~m & *p);
     6f8:	d06a      	beq.n	7d0 <permute+0x118>
     6fa:	7811      	ldrb	r1, [r2, #0]
     6fc:	4308      	orrs	r0, r1
     6fe:	b2c0      	uxtb	r0, r0
     700:	7010      	strb	r0, [r2, #0]
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
	}
	while (permutes);
     702:	2c00      	cmp	r4, #0
     704:	d062      	beq.n	7cc <permute+0x114>
     706:	f1ba 0f00 	cmp.w	sl, #0
     70a:	d023      	beq.n	754 <permute+0x9c>
ulp_u1 size_mask
)
{
	do
	{
		permutes--;
     70c:	3c01      	subs	r4, #1
     70e:	b2e4      	uxtb	r4, r4
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
     710:	4620      	mov	r0, r4
     712:	47b8      	blx	r7
	This function is used to select a bit from a value in the input table parameter
	
*/
ulp_u1 getBit(ulp_u1 *table, ulp_u1 index, ulp_u1 size_mask)
{
	return (table[index & size_mask] & (0x80 >> (index & 0x07)));
     714:	ea00 0208 	and.w	r2, r0, r8
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     718:	f000 0a07 	and.w	sl, r0, #7
     71c:	f816 c002 	ldrb.w	ip, [r6, r2]
	The bit is set if the value parameter is not 0, unset otherwise.
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
     720:	ea04 0208 	and.w	r2, r4, r8
     724:	442a      	add	r2, r5
	unsigned char m = 0x80 >> (index & 0x07);
     726:	f004 0307 	and.w	r3, r4, #7
     72a:	fa49 f003 	asr.w	r0, r9, r3

	*p = (value!=0) ? (m | *p) : (~m & *p);
     72e:	fa49 f10a 	asr.w	r1, r9, sl
     732:	7813      	ldrb	r3, [r2, #0]
     734:	ea1c 0f01 	tst.w	ip, r1
     738:	bf16      	itet	ne
     73a:	4318      	orrne	r0, r3
     73c:	ea23 0000 	biceq.w	r0, r3, r0
     740:	b2c0      	uxtbne	r0, r0
     742:	7010      	strb	r0, [r2, #0]
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
	}
	while (permutes);
     744:	b934      	cbnz	r4, 754 <permute+0x9c>
     746:	e047      	b.n	7d8 <permute+0x120>
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     748:	5ca9      	ldrb	r1, [r5, r2]
     74a:	430b      	orrs	r3, r1
     74c:	b2d8      	uxtb	r0, r3
     74e:	54a8      	strb	r0, [r5, r2]
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
	}
	while (permutes);
     750:	2c00      	cmp	r4, #0
     752:	d039      	beq.n	7c8 <permute+0x110>
ulp_u1 size_mask
)
{
	do
	{
		permutes--;
     754:	f104 3eff 	add.w	lr, r4, #4294967295
     758:	fa5f f48e 	uxtb.w	r4, lr
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
     75c:	4620      	mov	r0, r4
     75e:	47b8      	blx	r7
	This function is used to select a bit from a value in the input table parameter
	
*/
ulp_u1 getBit(ulp_u1 *table, ulp_u1 index, ulp_u1 size_mask)
{
	return (table[index & size_mask] & (0x80 >> (index & 0x07)));
     760:	ea00 0208 	and.w	r2, r0, r8
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);
     764:	f004 0107 	and.w	r1, r4, #7

	*p = (value!=0) ? (m | *p) : (~m & *p);
     768:	f816 c002 	ldrb.w	ip, [r6, r2]
	The bit is set if the value parameter is not 0, unset otherwise.
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
     76c:	ea04 0208 	and.w	r2, r4, r8
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     770:	f000 0a07 	and.w	sl, r0, #7
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);
     774:	fa49 f301 	asr.w	r3, r9, r1

	*p = (value!=0) ? (m | *p) : (~m & *p);
     778:	fa49 f00a 	asr.w	r0, r9, sl
     77c:	5ca9      	ldrb	r1, [r5, r2]
     77e:	ea1c 0f00 	tst.w	ip, r0
     782:	bf18      	it	ne
     784:	430b      	orrne	r3, r1
ulp_u1 size_mask
)
{
	do
	{
		permutes--;
     786:	f104 34ff 	add.w	r4, r4, #4294967295
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     78a:	bf0c      	ite	eq
     78c:	ea21 0303 	biceq.w	r3, r1, r3
     790:	b2db      	uxtbne	r3, r3
ulp_u1 size_mask
)
{
	do
	{
		permutes--;
     792:	b2e4      	uxtb	r4, r4
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     794:	54ab      	strb	r3, [r5, r2]
)
{
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
     796:	4620      	mov	r0, r4
     798:	47b8      	blx	r7
	This function is used to select a bit from a value in the input table parameter
	
*/
ulp_u1 getBit(ulp_u1 *table, ulp_u1 index, ulp_u1 size_mask)
{
	return (table[index & size_mask] & (0x80 >> (index & 0x07)));
     79a:	ea00 0a08 	and.w	sl, r0, r8
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     79e:	f000 0c07 	and.w	ip, r0, #7
     7a2:	f816 100a 	ldrb.w	r1, [r6, sl]
     7a6:	fa49 f00c 	asr.w	r0, r9, ip
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);
     7aa:	f004 0307 	and.w	r3, r4, #7

	*p = (value!=0) ? (m | *p) : (~m & *p);
     7ae:	4201      	tst	r1, r0
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);
     7b0:	fa49 f303 	asr.w	r3, r9, r3
	The bit is set if the value parameter is not 0, unset otherwise.
	
*/
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
     7b4:	ea04 0208 	and.w	r2, r4, r8
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     7b8:	d1c6      	bne.n	748 <permute+0x90>
     7ba:	f815 e002 	ldrb.w	lr, [r5, r2]
     7be:	ea2e 0003 	bic.w	r0, lr, r3
     7c2:	54a8      	strb	r0, [r5, r2]
	do
	{
		permutes--;
		putBit(out, permutes, getBit(in, func(permutes),size_mask),size_mask);
	}
	while (permutes);
     7c4:	2c00      	cmp	r4, #0
     7c6:	d1c5      	bne.n	754 <permute+0x9c>
     7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
void putBit(ulp_u1 *table, ulp_u1 index, ulp_u1 value, ulp_u1 size_mask)
{
	unsigned char *p = &table[index & size_mask];
	unsigned char m = 0x80 >> (index & 0x07);

	*p = (value!=0) ? (m | *p) : (~m & *p);
     7d0:	7813      	ldrb	r3, [r2, #0]
     7d2:	ea23 0000 	bic.w	r0, r3, r0
     7d6:	e793      	b.n	700 <permute+0x48>
     7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000007dc <bubblesort>:
	
	Implements a simple bubble sort for 8b data.
	
*/
ulp_u1 bubblesort(ulp_u1 * ptr, int n, unsigned int resultindex)
{
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
     7de:	f1b1 0e01 	subs.w	lr, r1, #1
     7e2:	f000 80bd 	beq.w	960 <bubblesort+0x184>
     7e6:	4676      	mov	r6, lr
     7e8:	2701      	movs	r7, #1
      for ( j = 0; j < n-i; ++j)
     7ea:	2e00      	cmp	r6, #0
     7ec:	f000 80b2 	beq.w	954 <bubblesort+0x178>
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     7f0:	4603      	mov	r3, r0
     7f2:	1e74      	subs	r4, r6, #1
     7f4:	f813 1b01 	ldrb.w	r1, [r3], #1
     7f8:	f004 0407 	and.w	r4, r4, #7
     7fc:	2501      	movs	r5, #1
     7fe:	b131      	cbz	r1, 80e <bubblesort+0x32>
     800:	f890 c001 	ldrb.w	ip, [r0, #1]
     804:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     806:	bf84      	itt	hi
     808:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     80c:	7041      	strbhi	r1, [r0, #1]
{
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
     80e:	42b5      	cmp	r5, r6
     810:	f080 80a0 	bcs.w	954 <bubblesort+0x178>
     814:	2c00      	cmp	r4, #0
     816:	d056      	beq.n	8c6 <bubblesort+0xea>
     818:	2c01      	cmp	r4, #1
     81a:	d048      	beq.n	8ae <bubblesort+0xd2>
     81c:	2c02      	cmp	r4, #2
     81e:	d03b      	beq.n	898 <bubblesort+0xbc>
     820:	2c03      	cmp	r4, #3
     822:	d02f      	beq.n	884 <bubblesort+0xa8>
     824:	2c04      	cmp	r4, #4
     826:	d022      	beq.n	86e <bubblesort+0x92>
     828:	2c05      	cmp	r4, #5
     82a:	d016      	beq.n	85a <bubblesort+0x7e>
     82c:	2c06      	cmp	r4, #6
     82e:	d009      	beq.n	844 <bubblesort+0x68>
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     830:	7841      	ldrb	r1, [r0, #1]
     832:	3301      	adds	r3, #1
     834:	2502      	movs	r5, #2
     836:	b129      	cbz	r1, 844 <bubblesort+0x68>
     838:	781c      	ldrb	r4, [r3, #0]
     83a:	42a1      	cmp	r1, r4
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     83c:	bf84      	itt	hi
     83e:	f803 4c01 	strbhi.w	r4, [r3, #-1]
             ptr[j+1] = temp;
     842:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     844:	f813 1b01 	ldrb.w	r1, [r3], #1
     848:	3501      	adds	r5, #1
     84a:	b131      	cbz	r1, 85a <bubblesort+0x7e>
     84c:	f893 c000 	ldrb.w	ip, [r3]
     850:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     852:	bf84      	itt	hi
     854:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     858:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     85a:	f813 1b01 	ldrb.w	r1, [r3], #1
     85e:	3501      	adds	r5, #1
     860:	b129      	cbz	r1, 86e <bubblesort+0x92>
     862:	781c      	ldrb	r4, [r3, #0]
     864:	42a1      	cmp	r1, r4
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     866:	bf84      	itt	hi
     868:	f803 4c01 	strbhi.w	r4, [r3, #-1]
             ptr[j+1] = temp;
     86c:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     86e:	f813 1b01 	ldrb.w	r1, [r3], #1
     872:	3501      	adds	r5, #1
     874:	b131      	cbz	r1, 884 <bubblesort+0xa8>
     876:	f893 c000 	ldrb.w	ip, [r3]
     87a:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     87c:	bf84      	itt	hi
     87e:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     882:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     884:	f813 1b01 	ldrb.w	r1, [r3], #1
     888:	3501      	adds	r5, #1
     88a:	b129      	cbz	r1, 898 <bubblesort+0xbc>
     88c:	781c      	ldrb	r4, [r3, #0]
     88e:	42a1      	cmp	r1, r4
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     890:	bf84      	itt	hi
     892:	f803 4c01 	strbhi.w	r4, [r3, #-1]
             ptr[j+1] = temp;
     896:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     898:	f813 1b01 	ldrb.w	r1, [r3], #1
     89c:	3501      	adds	r5, #1
     89e:	b131      	cbz	r1, 8ae <bubblesort+0xd2>
     8a0:	f893 c000 	ldrb.w	ip, [r3]
     8a4:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     8a6:	bf84      	itt	hi
     8a8:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     8ac:	7019      	strbhi	r1, [r3, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     8ae:	f813 1b01 	ldrb.w	r1, [r3], #1
     8b2:	3501      	adds	r5, #1
     8b4:	b129      	cbz	r1, 8c2 <bubblesort+0xe6>
     8b6:	781c      	ldrb	r4, [r3, #0]
     8b8:	42a1      	cmp	r1, r4
     8ba:	d902      	bls.n	8c2 <bubblesort+0xe6>
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     8bc:	f803 4c01 	strb.w	r4, [r3, #-1]
             ptr[j+1] = temp;
     8c0:	7019      	strb	r1, [r3, #0]
{
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
     8c2:	42b5      	cmp	r5, r6
     8c4:	d246      	bcs.n	954 <bubblesort+0x178>
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     8c6:	461c      	mov	r4, r3
     8c8:	3501      	adds	r5, #1
     8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
     8ce:	b129      	cbz	r1, 8dc <bubblesort+0x100>
     8d0:	785b      	ldrb	r3, [r3, #1]
     8d2:	4299      	cmp	r1, r3
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     8d4:	bf84      	itt	hi
     8d6:	f804 3c01 	strbhi.w	r3, [r4, #-1]
             ptr[j+1] = temp;
     8da:	7021      	strbhi	r1, [r4, #0]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     8dc:	4623      	mov	r3, r4
     8de:	f813 1b01 	ldrb.w	r1, [r3], #1
     8e2:	b131      	cbz	r1, 8f2 <bubblesort+0x116>
     8e4:	f894 c001 	ldrb.w	ip, [r4, #1]
     8e8:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     8ea:	bf84      	itt	hi
     8ec:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     8f0:	7061      	strbhi	r1, [r4, #1]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     8f2:	7863      	ldrb	r3, [r4, #1]
     8f4:	b123      	cbz	r3, 900 <bubblesort+0x124>
     8f6:	78a1      	ldrb	r1, [r4, #2]
     8f8:	428b      	cmp	r3, r1
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     8fa:	bf84      	itt	hi
     8fc:	7061      	strbhi	r1, [r4, #1]
             ptr[j+1] = temp;
     8fe:	70a3      	strbhi	r3, [r4, #2]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     900:	78a3      	ldrb	r3, [r4, #2]
     902:	b123      	cbz	r3, 90e <bubblesort+0x132>
     904:	78e1      	ldrb	r1, [r4, #3]
     906:	428b      	cmp	r3, r1
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     908:	bf84      	itt	hi
     90a:	70a1      	strbhi	r1, [r4, #2]
             ptr[j+1] = temp;
     90c:	70e3      	strbhi	r3, [r4, #3]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     90e:	78e3      	ldrb	r3, [r4, #3]
     910:	b123      	cbz	r3, 91c <bubblesort+0x140>
     912:	7921      	ldrb	r1, [r4, #4]
     914:	428b      	cmp	r3, r1
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     916:	bf84      	itt	hi
     918:	70e1      	strbhi	r1, [r4, #3]
             ptr[j+1] = temp;
     91a:	7123      	strbhi	r3, [r4, #4]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     91c:	7923      	ldrb	r3, [r4, #4]
     91e:	b123      	cbz	r3, 92a <bubblesort+0x14e>
     920:	7961      	ldrb	r1, [r4, #5]
     922:	428b      	cmp	r3, r1
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     924:	bf84      	itt	hi
     926:	7121      	strbhi	r1, [r4, #4]
             ptr[j+1] = temp;
     928:	7163      	strbhi	r3, [r4, #5]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     92a:	7963      	ldrb	r3, [r4, #5]
     92c:	b123      	cbz	r3, 938 <bubblesort+0x15c>
     92e:	79a1      	ldrb	r1, [r4, #6]
     930:	428b      	cmp	r3, r1
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     932:	bf84      	itt	hi
     934:	7161      	strbhi	r1, [r4, #5]
             ptr[j+1] = temp;
     936:	71a3      	strbhi	r3, [r4, #6]
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
         if ((ptr[j]!=0) && (ptr[j] > ptr[j+1]))
     938:	79a1      	ldrb	r1, [r4, #6]
     93a:	3507      	adds	r5, #7
     93c:	1de3      	adds	r3, r4, #7
     93e:	2900      	cmp	r1, #0
     940:	d0bf      	beq.n	8c2 <bubblesort+0xe6>
     942:	f894 c007 	ldrb.w	ip, [r4, #7]
     946:	4561      	cmp	r1, ip
         {
             temp = ptr[j];
             ptr[j]   = ptr[j+1];
     948:	bf84      	itt	hi
     94a:	f803 cc01 	strbhi.w	ip, [r3, #-1]
             ptr[j+1] = temp;
     94e:	71e1      	strbhi	r1, [r4, #7]
{
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
      for ( j = 0; j < n-i; ++j)
     950:	42b5      	cmp	r5, r6
     952:	d3b8      	bcc.n	8c6 <bubblesort+0xea>
ulp_u1 bubblesort(ulp_u1 * ptr, int n, unsigned int resultindex)
{
   unsigned int i, j;
   ulp_u1 temp;

   for (i = 1; i <= n-1; ++i)
     954:	3701      	adds	r7, #1
     956:	4577      	cmp	r7, lr
     958:	f106 36ff 	add.w	r6, r6, #4294967295
     95c:	f67f af45 	bls.w	7ea <bubblesort+0xe>
             ptr[j]   = ptr[j+1];
             ptr[j+1] = temp;
         }

   return ptr[resultindex];
}
     960:	5c80      	ldrb	r0, [r0, r2]
     962:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000964 <state_machine>:
{
  unsigned int state = 0;
   
   /* do some state machine processing */
   /* we have a state machine of 8 states (3 Bits) and wake through different states depending of the new and old state */
   state = next_state ^ (new_state & 0x01);
     964:	4a18      	ldr	r2, [pc, #96]	; (9c8 <state_machine+0x64>)
     966:	6813      	ldr	r3, [r2, #0]
                              
   switch (state & 0x07){
     968:	f000 0001 	and.w	r0, r0, #1
     96c:	4058      	eors	r0, r3
     96e:	f000 0107 	and.w	r1, r0, #7
     972:	f101 3cff 	add.w	ip, r1, #4294967295
     976:	f1bc 0f06 	cmp.w	ip, #6
     97a:	d809      	bhi.n	990 <state_machine+0x2c>
     97c:	e8df f00c 	tbb	[pc, ip]
     980:	1814100c 	.word	0x1814100c
     984:	041c      	.short	0x041c
     986:	20          	.byte	0x20
     987:	00          	.byte	0x00
       break;
     case 5:
       next_state = 0;
       break;
     case 6:
       next_state = 7;
     988:	2307      	movs	r3, #7
     98a:	6013      	str	r3, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     98c:	6810      	ldr	r0, [r2, #0]
}
     98e:	4770      	bx	lr
   /* we have a state machine of 8 states (3 Bits) and wake through different states depending of the new and old state */
   state = next_state ^ (new_state & 0x01);
                              
   switch (state & 0x07){
     case 0:
       next_state = 1;
     990:	2301      	movs	r3, #1
     992:	6013      	str	r3, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     994:	6810      	ldr	r0, [r2, #0]
}
     996:	4770      	bx	lr
   switch (state & 0x07){
     case 0:
       next_state = 1;
       break;
     case 1:
       next_state = 6;
     998:	2106      	movs	r1, #6
     99a:	6011      	str	r1, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     99c:	6810      	ldr	r0, [r2, #0]
}
     99e:	4770      	bx	lr
       break;
     case 1:
       next_state = 6;
       break;
     case 2:
       next_state = 3;
     9a0:	2003      	movs	r0, #3
     9a2:	6010      	str	r0, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     9a4:	6810      	ldr	r0, [r2, #0]
}
     9a6:	4770      	bx	lr
       break;
     case 2:
       next_state = 3;
       break;
     case 3:
       next_state = 4;
     9a8:	2304      	movs	r3, #4
     9aa:	6013      	str	r3, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     9ac:	6810      	ldr	r0, [r2, #0]
}
     9ae:	4770      	bx	lr
       break;
     case 3:
       next_state = 4;
       break;
     case 4:
       next_state = 5;
     9b0:	2105      	movs	r1, #5
     9b2:	6011      	str	r1, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     9b4:	6810      	ldr	r0, [r2, #0]
}
     9b6:	4770      	bx	lr
       break;
     case 4:
       next_state = 5;
       break;
     case 5:
       next_state = 0;
     9b8:	2000      	movs	r0, #0
     9ba:	6010      	str	r0, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     9bc:	6810      	ldr	r0, [r2, #0]
}
     9be:	4770      	bx	lr
       break;
     case 6:
       next_state = 7;
       break;
     case 7:
       next_state = 2;
     9c0:	2002      	movs	r0, #2
     9c2:	6010      	str	r0, [r2, #0]
       break;   
     default:
       next_state = 0;
       break;
   }
   return (next_state);
     9c4:	6810      	ldr	r0, [r2, #0]
}
     9c6:	4770      	bx	lr
     9c8:	10001208 	.word	0x10001208

000009cc <reset_state>:

void reset_state(void) {
	next_state=0;
     9cc:	4b01      	ldr	r3, [pc, #4]	; (9d4 <reset_state+0x8>)
     9ce:	2200      	movs	r2, #0
     9d0:	601a      	str	r2, [r3, #0]
     9d2:	4770      	bx	lr
     9d4:	10001208 	.word	0x10001208

000009d8 <pltStatusPinFlash>:
}

//=============================================================================
// Platform IO Pin Flash - See note above for PLT_FLASH_COUNT
void pltStatusPinFlash(ulp_u1 numFlashes)
{
     9d8:	b470      	push	{r4, r5, r6}
//=============================================================================
// Platform Flash Spin - See note above for PLT_FLASH_COUNT
void pltFlashSpin(void)
{
    volatile ulp_u4 i;        // use volatile to avoid optimizing away
    for (i = 0; i < PLT_FLASH_COUNT; i++);
     9da:	4a14      	ldr	r2, [pc, #80]	; (a2c <pltStatusPinFlash+0x54>)
//=============================================================================
// Platform IO Pin Flash - See note above for PLT_FLASH_COUNT
void pltStatusPinFlash(ulp_u1 numFlashes)
{
    while (numFlashes--) {
        PLT_STATUS_PIN_SET;
     9dc:	4e14      	ldr	r6, [pc, #80]	; (a30 <pltStatusPinFlash+0x58>)
        pltFlashSpin();         // spin while pin = 1
        PLT_STATUS_PIN_CLEAR;
     9de:	4d15      	ldr	r5, [pc, #84]	; (a34 <pltStatusPinFlash+0x5c>)
}

//=============================================================================
// Platform IO Pin Flash - See note above for PLT_FLASH_COUNT
void pltStatusPinFlash(ulp_u1 numFlashes)
{
     9e0:	b083      	sub	sp, #12
    while (numFlashes--) {
        PLT_STATUS_PIN_SET;
     9e2:	f44f 6400 	mov.w	r4, #2048	; 0x800
//=============================================================================
// Platform Flash Spin - See note above for PLT_FLASH_COUNT
void pltFlashSpin(void)
{
    volatile ulp_u4 i;        // use volatile to avoid optimizing away
    for (i = 0; i < PLT_FLASH_COUNT; i++);
     9e6:	2100      	movs	r1, #0

//=============================================================================
// Platform IO Pin Flash - See note above for PLT_FLASH_COUNT
void pltStatusPinFlash(ulp_u1 numFlashes)
{
    while (numFlashes--) {
     9e8:	3801      	subs	r0, #1
     9ea:	b2c0      	uxtb	r0, r0
     9ec:	28ff      	cmp	r0, #255	; 0xff
     9ee:	d019      	beq.n	a24 <pltStatusPinFlash+0x4c>
        PLT_STATUS_PIN_SET;
     9f0:	6034      	str	r4, [r6, #0]
//=============================================================================
// Platform Flash Spin - See note above for PLT_FLASH_COUNT
void pltFlashSpin(void)
{
    volatile ulp_u4 i;        // use volatile to avoid optimizing away
    for (i = 0; i < PLT_FLASH_COUNT; i++);
     9f2:	9101      	str	r1, [sp, #4]
     9f4:	9b01      	ldr	r3, [sp, #4]
     9f6:	4293      	cmp	r3, r2
     9f8:	d805      	bhi.n	a06 <pltStatusPinFlash+0x2e>
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	3301      	adds	r3, #1
     9fe:	9301      	str	r3, [sp, #4]
     a00:	9b01      	ldr	r3, [sp, #4]
     a02:	4293      	cmp	r3, r2
     a04:	d9f9      	bls.n	9fa <pltStatusPinFlash+0x22>
void pltStatusPinFlash(ulp_u1 numFlashes)
{
    while (numFlashes--) {
        PLT_STATUS_PIN_SET;
        pltFlashSpin();         // spin while pin = 1
        PLT_STATUS_PIN_CLEAR;
     a06:	602c      	str	r4, [r5, #0]
//=============================================================================
// Platform Flash Spin - See note above for PLT_FLASH_COUNT
void pltFlashSpin(void)
{
    volatile ulp_u4 i;        // use volatile to avoid optimizing away
    for (i = 0; i < PLT_FLASH_COUNT; i++);
     a08:	9100      	str	r1, [sp, #0]
     a0a:	9b00      	ldr	r3, [sp, #0]
     a0c:	4293      	cmp	r3, r2
     a0e:	d8eb      	bhi.n	9e8 <pltStatusPinFlash+0x10>
     a10:	9b00      	ldr	r3, [sp, #0]
     a12:	3301      	adds	r3, #1
     a14:	9300      	str	r3, [sp, #0]
     a16:	9b00      	ldr	r3, [sp, #0]
     a18:	4293      	cmp	r3, r2
     a1a:	d9f9      	bls.n	a10 <pltStatusPinFlash+0x38>

//=============================================================================
// Platform IO Pin Flash - See note above for PLT_FLASH_COUNT
void pltStatusPinFlash(ulp_u1 numFlashes)
{
    while (numFlashes--) {
     a1c:	3801      	subs	r0, #1
     a1e:	b2c0      	uxtb	r0, r0
     a20:	28ff      	cmp	r0, #255	; 0xff
     a22:	d1e5      	bne.n	9f0 <pltStatusPinFlash+0x18>
        PLT_STATUS_PIN_SET;
        pltFlashSpin();         // spin while pin = 1
        PLT_STATUS_PIN_CLEAR;
        pltFlashSpin();         // spin while pin = 0
    }
}
     a24:	b003      	add	sp, #12
     a26:	bc70      	pop	{r4, r5, r6}
     a28:	4770      	bx	lr
     a2a:	bf00      	nop
     a2c:	000249ef 	.word	0x000249ef
     a30:	40010090 	.word	0x40010090
     a34:	40010098 	.word	0x40010098

00000a38 <pltSleep>:
void pltSleep( void )
{
    //
    // Enter deep sleep.
    //
    AM_REG(SYSCTRL, SCR) = AM_REG_SYSCTRL_SCR_SLEEPDEEP_M; 
     a38:	4b02      	ldr	r3, [pc, #8]	; (a44 <pltSleep+0xc>)
     a3a:	2204      	movs	r2, #4
     a3c:	601a      	str	r2, [r3, #0]
    // WFI
    //
    #if defined(__ARMCC_VERSION)
        __wfi();            // ARM/Keil intrinsic
    #else
        __asm("    wfi");   // GCC version
     a3e:	bf30      	wfi
     a40:	4770      	bx	lr
     a42:	bf00      	nop
     a44:	e000ed10 	.word	0xe000ed10

00000a48 <main>:
}

//=============================================================================
// Main function. Initialize and call Primary Thread's main function.
int main( void )
{	
     a48:	b510      	push	{r4, lr}
    //   Unused MCU peripherals turned off.
    //   Set StatusPin to output mode.
    //   Select clock source/mode when benchmark is executing.
    //   Select sleep mode when benchmark is not executing.
    //   Start 1-second timer interrupt.   
    hardware_setup_part1();
     a4a:	f7ff fb39 	bl	c0 <hardware_setup_part1>

    // $$$ If desired, do a single flash of the StatusPin to indicate MCU is alive.
    pltStatusPinFlash(1);
     a4e:	2001      	movs	r0, #1
     a50:	f7ff ffc2 	bl	9d8 <pltStatusPinFlash>

    //
    // Initialize TES
    //
    threadMainFunction = tesInitialize();
     a54:	f000 f882 	bl	b5c <tesInitialize>
     a58:	4604      	mov	r4, r0

    //   Select clock source/mode when benchmark is executing.
    //   Select sleep mode when benchmark is not executing.
    //   Start 1-second timer interrupt.
    hardware_setup_part2();
     a5a:	f7ff fb87 	bl	16c <hardware_setup_part2>

    threadMainFunction();       // run the Primary Thread's Main function, no return
     a5e:	47a0      	blx	r4

    return 0;
}
     a60:	2000      	movs	r0, #0
     a62:	bd10      	pop	{r4, pc}

00000a64 <tesEventPrepare>:

//=============================================================================
// Verify Event is free, init Event values
// If thread == 0, then use current tesActiveThread
ulp_u1 tesEventPrepare( TesEvent * event, ulp_u1 type, ulp_u1 param, TesThread * thread )
{
     a64:	b410      	push	{r4}
    if (event->next != TES_LIST_FREE) {
     a66:	6804      	ldr	r4, [r0, #0]
     a68:	b11c      	cbz	r4, a72 <tesEventPrepare+0xe>
        return TES_ERROR_EVENT_ON_LIST;
     a6a:	2002      	movs	r0, #2
    event->type = type;
    event->param = param;
    event->thread = (thread) ? thread : tesActiveThread;

    return TES_ERROR_OK;
}
     a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a70:	4770      	bx	lr
{
    if (event->next != TES_LIST_FREE) {
        return TES_ERROR_EVENT_ON_LIST;
    }

    event->type = type;
     a72:	7101      	strb	r1, [r0, #4]
    event->param = param;
     a74:	7142      	strb	r2, [r0, #5]
    event->thread = (thread) ? thread : tesActiveThread;
     a76:	b113      	cbz	r3, a7e <tesEventPrepare+0x1a>
     a78:	6083      	str	r3, [r0, #8]

    return TES_ERROR_OK;
     a7a:	2000      	movs	r0, #0
     a7c:	e7f6      	b.n	a6c <tesEventPrepare+0x8>
        return TES_ERROR_EVENT_ON_LIST;
    }

    event->type = type;
    event->param = param;
    event->thread = (thread) ? thread : tesActiveThread;
     a7e:	4b01      	ldr	r3, [pc, #4]	; (a84 <tesEventPrepare+0x20>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	e7f9      	b.n	a78 <tesEventPrepare+0x14>
     a84:	10001240 	.word	0x10001240

00000a88 <tesEventWait>:
}

//=============================================================================
// Threads call this to wait for the next event
TesEvent * tesEventWait( void )
{
     a88:	b538      	push	{r3, r4, r5, lr}
// Dispatch queued ready Events to owning Thread.
// Sleep when no events are queued.
void tesEventDispatchReady( void )
{
    for (;;) {
        if (tesEventReadyQueue.first != TES_LIST_END) {
     a8a:	4c10      	ldr	r4, [pc, #64]	; (acc <tesEventWait+0x44>)
     a8c:	6823      	ldr	r3, [r4, #0]
     a8e:	2b01      	cmp	r3, #1
     a90:	d104      	bne.n	a9c <tesEventWait+0x14>
            TesEvent * event = (TesEvent*)tesEventReadyQueue.first;
            tesThreadRun(event->thread);
            return;
        }
        pltSleep();
     a92:	f7ff ffd1 	bl	a38 <pltSleep>
// Dispatch queued ready Events to owning Thread.
// Sleep when no events are queued.
void tesEventDispatchReady( void )
{
    for (;;) {
        if (tesEventReadyQueue.first != TES_LIST_END) {
     a96:	6820      	ldr	r0, [r4, #0]
     a98:	2801      	cmp	r0, #1
     a9a:	d0fa      	beq.n	a92 <tesEventWait+0xa>
            TesEvent * event = (TesEvent*)tesEventReadyQueue.first;
     a9c:	6821      	ldr	r1, [r4, #0]
     a9e:	4d0b      	ldr	r5, [pc, #44]	; (acc <tesEventWait+0x44>)
            tesThreadRun(event->thread);
     aa0:	6888      	ldr	r0, [r1, #8]
     aa2:	f000 f853 	bl	b4c <tesThreadRun>

//=============================================================================
// Removes first ready event and returns it
TesEvent * tesEventRemoveReady( void )
{
    TesEvent * event = (TesEvent*)tesEventReadyQueue.first;
     aa6:	6824      	ldr	r4, [r4, #0]

    PLT_INTERRUPTS_OFF;     // synchronize with interrupt handlers
     aa8:	f000 fb76 	bl	1198 <am_hal_interrupt_master_disable>
    if ((event->next) != TES_LIST_END) {
     aac:	6822      	ldr	r2, [r4, #0]
     aae:	2a01      	cmp	r2, #1
        tesEventReadyQueue.first = (TesListElement*)event->next;
     ab0:	bf18      	it	ne
     ab2:	602a      	strne	r2, [r5, #0]
TesEvent * tesEventRemoveReady( void )
{
    TesEvent * event = (TesEvent*)tesEventReadyQueue.first;

    PLT_INTERRUPTS_OFF;     // synchronize with interrupt handlers
    if ((event->next) != TES_LIST_END) {
     ab4:	d005      	beq.n	ac2 <tesEventWait+0x3a>
        tesEventReadyQueue.first = (TesListElement*)event->next;
    } else {
        tesQueueSetEmpty(&tesEventReadyQueue);
    }
    PLT_INTERRUPTS_ON;
     ab6:	f000 fb6b 	bl	1190 <am_hal_interrupt_master_enable>

    event->next = TES_LIST_FREE;
     aba:	2300      	movs	r3, #0
     abc:	6023      	str	r3, [r4, #0]
TesEvent * tesEventWait( void )
{
    tesEventDispatchReady();
    // returns here only when there is an event for this thread
    return tesEventRemoveReady();
}
     abe:	4620      	mov	r0, r4
     ac0:	bd38      	pop	{r3, r4, r5, pc}

    PLT_INTERRUPTS_OFF;     // synchronize with interrupt handlers
    if ((event->next) != TES_LIST_END) {
        tesEventReadyQueue.first = (TesListElement*)event->next;
    } else {
        tesQueueSetEmpty(&tesEventReadyQueue);
     ac2:	4628      	mov	r0, r5
     ac4:	f000 f83e 	bl	b44 <tesQueueSetEmpty>
     ac8:	e7f5      	b.n	ab6 <tesEventWait+0x2e>
     aca:	bf00      	nop
     acc:	1000122c 	.word	0x1000122c

00000ad0 <tesEventQueuesInit>:

//=============================================================================
// Initialize all Event lists (to empty)
void tesEventQueuesInit(void)
{
    tesQueueSetEmpty(&tesEventReadyQueue);
     ad0:	4801      	ldr	r0, [pc, #4]	; (ad8 <tesEventQueuesInit+0x8>)
     ad2:	f000 b837 	b.w	b44 <tesQueueSetEmpty>
     ad6:	bf00      	nop
     ad8:	1000122c 	.word	0x1000122c

00000adc <tesEventToReady>:
// Put the ready Event on the tesEventReadyQueue
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF !
// Usually only called from interrupt handler environment
void tesEventToReady( TesEvent * event )
{
    tesQueueAppend(&tesEventReadyQueue, (TesListElement*)event);
     adc:	4601      	mov	r1, r0
     ade:	4801      	ldr	r0, [pc, #4]	; (ae4 <tesEventToReady+0x8>)
     ae0:	f000 b818 	b.w	b14 <tesQueueAppend>
     ae4:	1000122c 	.word	0x1000122c

00000ae8 <tesEventQueueToReady>:
// Move an entire list of ready Events to the tesEventReadyQueue
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF !
// Should only be called from interrupt handler environment
void tesEventQueueToReady( TesQueueHeader * queueHeader )
{
    if (tesEventReadyQueue.first == TES_LIST_END) {
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <tesEventQueueToReady+0x28>)
     aea:	681a      	ldr	r2, [r3, #0]
     aec:	2a01      	cmp	r2, #1
     aee:	d009      	beq.n	b04 <tesEventQueueToReady+0x1c>
        tesEventReadyQueue.first = queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
    } else {
        TesEvent * last = (TesEvent*)tesEventReadyQueue.last;
     af0:	6859      	ldr	r1, [r3, #4]
//=============================================================================
// Move an entire list of ready Events to the tesEventReadyQueue
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF !
// Should only be called from interrupt handler environment
void tesEventQueueToReady( TesQueueHeader * queueHeader )
{
     af2:	b410      	push	{r4}
    if (tesEventReadyQueue.first == TES_LIST_END) {
        tesEventReadyQueue.first = queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
    } else {
        TesEvent * last = (TesEvent*)tesEventReadyQueue.last;
        last->next = (TesEvent*)queueHeader->first;
     af4:	6804      	ldr	r4, [r0, #0]
        tesEventReadyQueue.last = queueHeader->last;
     af6:	6842      	ldr	r2, [r0, #4]
    if (tesEventReadyQueue.first == TES_LIST_END) {
        tesEventReadyQueue.first = queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
    } else {
        TesEvent * last = (TesEvent*)tesEventReadyQueue.last;
        last->next = (TesEvent*)queueHeader->first;
     af8:	600c      	str	r4, [r1, #0]
        tesEventReadyQueue.last = queueHeader->last;
    }
    tesQueueSetEmpty(queueHeader);
}
     afa:	f85d 4b04 	ldr.w	r4, [sp], #4
        tesEventReadyQueue.first = queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
    } else {
        TesEvent * last = (TesEvent*)tesEventReadyQueue.last;
        last->next = (TesEvent*)queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
     afe:	605a      	str	r2, [r3, #4]
    }
    tesQueueSetEmpty(queueHeader);
     b00:	f000 b820 	b.w	b44 <tesQueueSetEmpty>
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF !
// Should only be called from interrupt handler environment
void tesEventQueueToReady( TesQueueHeader * queueHeader )
{
    if (tesEventReadyQueue.first == TES_LIST_END) {
        tesEventReadyQueue.first = queueHeader->first;
     b04:	6801      	ldr	r1, [r0, #0]
     b06:	6019      	str	r1, [r3, #0]
        tesEventReadyQueue.last = queueHeader->last;
     b08:	6842      	ldr	r2, [r0, #4]
     b0a:	605a      	str	r2, [r3, #4]
    } else {
        TesEvent * last = (TesEvent*)tesEventReadyQueue.last;
        last->next = (TesEvent*)queueHeader->first;
        tesEventReadyQueue.last = queueHeader->last;
    }
    tesQueueSetEmpty(queueHeader);
     b0c:	f000 b81a 	b.w	b44 <tesQueueSetEmpty>
     b10:	1000122c 	.word	0x1000122c

00000b14 <tesQueueAppend>:
}

//=============================================================================
// Append Event to the end of the list
void tesQueueAppend( TesQueueHeader * queueHeader, TesListElement * element )
{
     b14:	b538      	push	{r3, r4, r5, lr}
     b16:	4604      	mov	r4, r0
     b18:	460d      	mov	r5, r1
    PLT_INTERRUPTS_OFF;     // synchronize with interrupt handlers
     b1a:	f000 fb3d 	bl	1198 <am_hal_interrupt_master_disable>
    if (queueHeader->first == TES_LIST_END) {
     b1e:	6823      	ldr	r3, [r4, #0]
     b20:	2b01      	cmp	r3, #1
     b22:	d008      	beq.n	b36 <tesQueueAppend+0x22>
        queueHeader->first = queueHeader->last = element;
        element->next = TES_LIST_END;
    } else {
        tesListInsertAfter(queueHeader->last, element);
     b24:	6860      	ldr	r0, [r4, #4]
//=============================================================================
// Insert Event in list after prev Event
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF !
void tesListInsertAfter( TesListElement * prev, TesListElement * element )
{
    element->next = prev->next;
     b26:	6802      	ldr	r2, [r0, #0]
     b28:	602a      	str	r2, [r5, #0]
    prev->next = element;
     b2a:	6005      	str	r5, [r0, #0]
    if (queueHeader->first == TES_LIST_END) {
        queueHeader->first = queueHeader->last = element;
        element->next = TES_LIST_END;
    } else {
        tesListInsertAfter(queueHeader->last, element);
        queueHeader->last = element;
     b2c:	6065      	str	r5, [r4, #4]
    }
    PLT_INTERRUPTS_ON;
}
     b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        element->next = TES_LIST_END;
    } else {
        tesListInsertAfter(queueHeader->last, element);
        queueHeader->last = element;
    }
    PLT_INTERRUPTS_ON;
     b32:	f000 bb2d 	b.w	1190 <am_hal_interrupt_master_enable>
// Append Event to the end of the list
void tesQueueAppend( TesQueueHeader * queueHeader, TesListElement * element )
{
    PLT_INTERRUPTS_OFF;     // synchronize with interrupt handlers
    if (queueHeader->first == TES_LIST_END) {
        queueHeader->first = queueHeader->last = element;
     b36:	6065      	str	r5, [r4, #4]
     b38:	6025      	str	r5, [r4, #0]
        element->next = TES_LIST_END;
     b3a:	602b      	str	r3, [r5, #0]
    } else {
        tesListInsertAfter(queueHeader->last, element);
        queueHeader->last = element;
    }
    PLT_INTERRUPTS_ON;
}
     b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        element->next = TES_LIST_END;
    } else {
        tesListInsertAfter(queueHeader->last, element);
        queueHeader->last = element;
    }
    PLT_INTERRUPTS_ON;
     b40:	f000 bb26 	b.w	1190 <am_hal_interrupt_master_enable>

00000b44 <tesQueueSetEmpty>:
//=============================================================================
// Initialize an Event list to empty
// NOTE: Caller must ensure PLT_INTERRUPTS_OFF ! (if necessary)
void tesQueueSetEmpty( TesQueueHeader * queueHeader )
{
    queueHeader->first = queueHeader->last = TES_LIST_END;
     b44:	2301      	movs	r3, #1
     b46:	6043      	str	r3, [r0, #4]
     b48:	6003      	str	r3, [r0, #0]
     b4a:	4770      	bx	lr

00000b4c <tesThreadRun>:
}
//=============================================================================
// Run a Thread. The triggering Event is at the front of the tesEventReadyQueue
void tesThreadRun( TesThread * thread )
{
    if (thread != tesActiveThread) {
     b4c:	4b02      	ldr	r3, [pc, #8]	; (b58 <tesThreadRun+0xc>)
     b4e:	6819      	ldr	r1, [r3, #0]
     b50:	4281      	cmp	r1, r0
     b52:	d000      	beq.n	b56 <tesThreadRun+0xa>
     b54:	e7fe      	b.n	b54 <tesThreadRun+0x8>
     b56:	4770      	bx	lr
     b58:	10001240 	.word	0x10001240

00000b5c <tesInitialize>:
    }
}

//=============================================================================
// Initialize TES for the Main and other Threads
VoidFunctionPtr tesInitialize( void ) {
     b5c:	b508      	push	{r3, lr}
    tesTimerQueuesInit();
     b5e:	f000 f80d 	bl	b7c <tesTimerQueuesInit>

    tesEventQueuesInit();
     b62:	f7ff ffb5 	bl	ad0 <tesEventQueuesInit>
    // prepare to run multiple threads (if any)
    tesThreadMultipleStart();
#endif  // TES_MULTIPLE_THREAD_STARTS

    // initialize main thread
    tesActiveThread = &tesPrimaryThread;
     b66:	4b02      	ldr	r3, [pc, #8]	; (b70 <tesInitialize+0x14>)
     b68:	4a02      	ldr	r2, [pc, #8]	; (b74 <tesInitialize+0x18>)
     b6a:	601a      	str	r2, [r3, #0]

    return TES_PRIMARY_THREAD_MAIN;    // return main function
}
     b6c:	4802      	ldr	r0, [pc, #8]	; (b78 <tesInitialize+0x1c>)
     b6e:	bd08      	pop	{r3, pc}
     b70:	10001240 	.word	0x10001240
     b74:	10001234 	.word	0x10001234
     b78:	000003ed 	.word	0x000003ed

00000b7c <tesTimerQueuesInit>:
TesTimeSlot tesNextSlot = 0;            // next TimeSlot value, up counter

//=============================================================================
// Initialize all Timer lists to empty
void tesTimerQueuesInit(void)
{
     b7c:	b508      	push	{r3, lr}
    ulp_u1 i;
    for (i = 0; i < TES_NUM_TIME_SLOTS; i++) {
        tesQueueSetEmpty(&tesSlotTimerQueues[i]);
     b7e:	4803      	ldr	r0, [pc, #12]	; (b8c <tesTimerQueuesInit+0x10>)
     b80:	f7ff ffe0 	bl	b44 <tesQueueSetEmpty>
    }
    tesPeriodTimerList = (TesPeriodTimer*)TES_LIST_END;
     b84:	4b02      	ldr	r3, [pc, #8]	; (b90 <tesTimerQueuesInit+0x14>)
     b86:	2201      	movs	r2, #1
     b88:	601a      	str	r2, [r3, #0]
     b8a:	bd08      	pop	{r3, pc}
     b8c:	10001248 	.word	0x10001248
     b90:	10001244 	.word	0x10001244

00000b94 <tesSlotTimerSet>:
// Add a SlotTimer to the list
ulp_u1 tesSlotTimerSet(TesEvent * timer, TesTimeSlot slot, ulp_u1 param)
{
    ulp_u1 error;

    if (slot == TES_NEXT_SLOT) {
     b94:	29ff      	cmp	r1, #255	; 0xff
}

//=============================================================================
// Add a SlotTimer to the list
ulp_u1 tesSlotTimerSet(TesEvent * timer, TesTimeSlot slot, ulp_u1 param)
{
     b96:	b570      	push	{r4, r5, r6, lr}
     b98:	4606      	mov	r6, r0
    ulp_u1 error;

    if (slot == TES_NEXT_SLOT) {
     b9a:	d003      	beq.n	ba4 <tesSlotTimerSet+0x10>
     b9c:	460d      	mov	r5, r1
        slot = tesNextSlot;
    } else if (slot >= TES_NUM_TIME_SLOTS) {
     b9e:	b119      	cbz	r1, ba8 <tesSlotTimerSet+0x14>
        return TES_ERROR_NO_TIME_SLOT;  // no such time slot
     ba0:	2004      	movs	r0, #4
     ba2:	bd70      	pop	{r4, r5, r6, pc}
ulp_u1 tesSlotTimerSet(TesEvent * timer, TesTimeSlot slot, ulp_u1 param)
{
    ulp_u1 error;

    if (slot == TES_NEXT_SLOT) {
        slot = tesNextSlot;
     ba4:	4b08      	ldr	r3, [pc, #32]	; (bc8 <tesSlotTimerSet+0x34>)
     ba6:	781d      	ldrb	r5, [r3, #0]
    } else if (slot >= TES_NUM_TIME_SLOTS) {
        return TES_ERROR_NO_TIME_SLOT;  // no such time slot
    }
    error = tesEventPrepare(timer, TES_TIMER_SLOT, param, 0/*thread*/);
     ba8:	2300      	movs	r3, #0
     baa:	2101      	movs	r1, #1
     bac:	4630      	mov	r0, r6
     bae:	f7ff ff59 	bl	a64 <tesEventPrepare>
    if (!error) {
     bb2:	4604      	mov	r4, r0
     bb4:	b100      	cbz	r0, bb8 <tesSlotTimerSet+0x24>
        tesQueueAppend(&tesSlotTimerQueues[slot], (TesListElement*)timer);
    }
    return error;
}
     bb6:	bd70      	pop	{r4, r5, r6, pc}
    } else if (slot >= TES_NUM_TIME_SLOTS) {
        return TES_ERROR_NO_TIME_SLOT;  // no such time slot
    }
    error = tesEventPrepare(timer, TES_TIMER_SLOT, param, 0/*thread*/);
    if (!error) {
        tesQueueAppend(&tesSlotTimerQueues[slot], (TesListElement*)timer);
     bb8:	4804      	ldr	r0, [pc, #16]	; (bcc <tesSlotTimerSet+0x38>)
     bba:	4631      	mov	r1, r6
     bbc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
     bc0:	f7ff ffa8 	bl	b14 <tesQueueAppend>
     bc4:	4620      	mov	r0, r4
     bc6:	bd70      	pop	{r4, r5, r6, pc}
     bc8:	1000120e 	.word	0x1000120e
     bcc:	10001248 	.word	0x10001248

00000bd0 <tesTimerInterrupt>:

//=============================================================================
// A Timer Interrupt has occurred, update systemTime and check for Timers
// Should only be called from interrupt handler environment
void tesTimerInterrupt( void )
{
     bd0:	b538      	push	{r3, r4, r5, lr}
    TesQueueHeader * queueHeader;

    if (tesNextSlot == 0) {
     bd2:	4d1a      	ldr	r5, [pc, #104]	; (c3c <tesTimerInterrupt+0x6c>)
     bd4:	782a      	ldrb	r2, [r5, #0]
     bd6:	b982      	cbnz	r2, bfa <tesTimerInterrupt+0x2a>
        // all periodTimers with numPeriods = 0 are ready
        for (;;) {
            TesPeriodTimer * timer;
            ulp_u2 numPeriods;
            if ( (timer = tesPeriodTimerList) == (TesPeriodTimer*)TES_LIST_END) {
     bd8:	4c19      	ldr	r4, [pc, #100]	; (c40 <tesTimerInterrupt+0x70>)
     bda:	6820      	ldr	r0, [r4, #0]
     bdc:	2801      	cmp	r0, #1
     bde:	d028      	beq.n	c32 <tesTimerInterrupt+0x62>
                 break;     // no entries on PeriodTimer list
            }
            if ( (numPeriods = timer->numPeriods) != 0) {
     be0:	8981      	ldrh	r1, [r0, #12]
     be2:	b111      	cbz	r1, bea <tesTimerInterrupt+0x1a>
     be4:	e020      	b.n	c28 <tesTimerInterrupt+0x58>
     be6:	8981      	ldrh	r1, [r0, #12]
     be8:	b9e9      	cbnz	r1, c26 <tesTimerInterrupt+0x56>
                timer->numPeriods = numPeriods - 1;   // decrement wait time
                break;      // next entry is not ready yet
            }
            // else this PeriodTimer is ready
            tesPeriodTimerList = (TesPeriodTimer*)timer->event.next;
     bea:	6803      	ldr	r3, [r0, #0]
     bec:	6023      	str	r3, [r4, #0]
            tesEventToReady(&timer->event);
     bee:	f7ff ff75 	bl	adc <tesEventToReady>
    if (tesNextSlot == 0) {
        // all periodTimers with numPeriods = 0 are ready
        for (;;) {
            TesPeriodTimer * timer;
            ulp_u2 numPeriods;
            if ( (timer = tesPeriodTimerList) == (TesPeriodTimer*)TES_LIST_END) {
     bf2:	6820      	ldr	r0, [r4, #0]
     bf4:	2801      	cmp	r0, #1
     bf6:	d1f6      	bne.n	be6 <tesTimerInterrupt+0x16>
     bf8:	782a      	ldrb	r2, [r5, #0]
            tesEventToReady(&timer->event);
        }
    }

    queueHeader = &tesSlotTimerQueues[tesNextSlot];
    if (queueHeader->first != TES_LIST_END) {
     bfa:	4812      	ldr	r0, [pc, #72]	; (c44 <tesTimerInterrupt+0x74>)
     bfc:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
     c00:	2b01      	cmp	r3, #1
     c02:	d004      	beq.n	c0e <tesTimerInterrupt+0x3e>
            tesPeriodTimerList = (TesPeriodTimer*)timer->event.next;
            tesEventToReady(&timer->event);
        }
    }

    queueHeader = &tesSlotTimerQueues[tesNextSlot];
     c04:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    if (queueHeader->first != TES_LIST_END) {
        tesEventQueueToReady(queueHeader);      // all Timers for this slot are ready
     c08:	f7ff ff6e 	bl	ae8 <tesEventQueueToReady>
     c0c:	782a      	ldrb	r2, [r5, #0]
    }

    // compute next slot and period
    if (++tesNextSlot >= TES_NUM_TIME_SLOTS) {
     c0e:	3201      	adds	r2, #1
     c10:	b2d4      	uxtb	r4, r2
     c12:	702c      	strb	r4, [r5, #0]
     c14:	b134      	cbz	r4, c24 <tesTimerInterrupt+0x54>
        tesNextSlot = 0;    // roll over slot number
        ++tesNextPeriod;
     c16:	480c      	ldr	r0, [pc, #48]	; (c48 <tesTimerInterrupt+0x78>)
     c18:	8803      	ldrh	r3, [r0, #0]
        tesEventQueueToReady(queueHeader);      // all Timers for this slot are ready
    }

    // compute next slot and period
    if (++tesNextSlot >= TES_NUM_TIME_SLOTS) {
        tesNextSlot = 0;    // roll over slot number
     c1a:	2100      	movs	r1, #0
        ++tesNextPeriod;
     c1c:	3301      	adds	r3, #1
        tesEventQueueToReady(queueHeader);      // all Timers for this slot are ready
    }

    // compute next slot and period
    if (++tesNextSlot >= TES_NUM_TIME_SLOTS) {
        tesNextSlot = 0;    // roll over slot number
     c1e:	7029      	strb	r1, [r5, #0]
        ++tesNextPeriod;
     c20:	8003      	strh	r3, [r0, #0]
    }
}
     c22:	bd38      	pop	{r3, r4, r5, pc}
     c24:	bd38      	pop	{r3, r4, r5, pc}
     c26:	782a      	ldrb	r2, [r5, #0]
            ulp_u2 numPeriods;
            if ( (timer = tesPeriodTimerList) == (TesPeriodTimer*)TES_LIST_END) {
                 break;     // no entries on PeriodTimer list
            }
            if ( (numPeriods = timer->numPeriods) != 0) {
                timer->numPeriods = numPeriods - 1;   // decrement wait time
     c28:	f101 3cff 	add.w	ip, r1, #4294967295
     c2c:	f8a0 c00c 	strh.w	ip, [r0, #12]
                break;      // next entry is not ready yet
     c30:	e7e3      	b.n	bfa <tesTimerInterrupt+0x2a>
            tesEventToReady(&timer->event);
        }
    }

    queueHeader = &tesSlotTimerQueues[tesNextSlot];
    if (queueHeader->first != TES_LIST_END) {
     c32:	4804      	ldr	r0, [pc, #16]	; (c44 <tesTimerInterrupt+0x74>)
     c34:	6802      	ldr	r2, [r0, #0]
     c36:	2a01      	cmp	r2, #1
     c38:	d1e6      	bne.n	c08 <tesTimerInterrupt+0x38>
     c3a:	e7ec      	b.n	c16 <tesTimerInterrupt+0x46>
     c3c:	1000120e 	.word	0x1000120e
     c40:	10001244 	.word	0x10001244
     c44:	10001248 	.word	0x10001248
     c48:	1000120c 	.word	0x1000120c

00000c4c <tesBytesCopy>:
      len   -   Number of bytes to copy
    Returns:
      dest
*/

void * tesBytesCopy(void * RESTRICT dest, const void * RESTRICT src, ulp_u2 len) {
     c4c:	b510      	push	{r4, lr}
     c4e:	4604      	mov	r4, r0
     ulp_u2 i;
     ulp_u1 * RESTRICT d = dest;
     const ulp_u1 * RESTRICT s = src;
     for (i = 0; i < len; i++) {
     c50:	b122      	cbz	r2, c5c <tesBytesCopy+0x10>
     c52:	3a01      	subs	r2, #1
     c54:	b292      	uxth	r2, r2
     c56:	3201      	adds	r2, #1
     c58:	f000 fb02 	bl	1260 <memcpy>
         d[i] = s[i];
     }
     return d;
}
     c5c:	4620      	mov	r0, r4
     c5e:	bd10      	pop	{r4, pc}

00000c60 <tesStringSearch>:
      hay       - String to search in
      needle    - String pattern to search for
    Returns:
      Null if not found, otherwise pointer to the first byte of the pattern in hay
*/
const ulp_u1 *tesStringSearch(const ulp_u1 *hay, const ulp_u1 *needle) {
     c60:	b430      	push	{r4, r5}
    if (*needle == 0) {
     c62:	780d      	ldrb	r5, [r1, #0]
     c64:	b175      	cbz	r5, c84 <tesStringSearch+0x24>
        /* special case: empty pattern string */
        return (ulp_u1 *)hay;
    }
    while (*hay) {
     c66:	7803      	ldrb	r3, [r0, #0]
     c68:	b193      	cbz	r3, c90 <tesStringSearch+0x30>
        ulp_u1 i = 0;
        while (1) {
            if (needle[i] == 0) {
                return (ulp_u1 *)hay;
            }
            if (hay[i] != needle[i]) {
     c6a:	7803      	ldrb	r3, [r0, #0]
     c6c:	42ab      	cmp	r3, r5
     c6e:	d10b      	bne.n	c88 <tesStringSearch+0x28>
     c70:	2300      	movs	r3, #0
     c72:	e002      	b.n	c7a <tesStringSearch+0x1a>
     c74:	5cc4      	ldrb	r4, [r0, r3]
     c76:	4294      	cmp	r4, r2
     c78:	d106      	bne.n	c88 <tesStringSearch+0x28>
                break;
            }
            i++;
     c7a:	3301      	adds	r3, #1
     c7c:	b2db      	uxtb	r3, r3
        return (ulp_u1 *)hay;
    }
    while (*hay) {
        ulp_u1 i = 0;
        while (1) {
            if (needle[i] == 0) {
     c7e:	5cca      	ldrb	r2, [r1, r3]
     c80:	2a00      	cmp	r2, #0
     c82:	d1f7      	bne.n	c74 <tesStringSearch+0x14>
            i++;
        }
        hay++;
    }
    return 0;   // not found
}
     c84:	bc30      	pop	{r4, r5}
     c86:	4770      	bx	lr
const ulp_u1 *tesStringSearch(const ulp_u1 *hay, const ulp_u1 *needle) {
    if (*needle == 0) {
        /* special case: empty pattern string */
        return (ulp_u1 *)hay;
    }
    while (*hay) {
     c88:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1ec      	bne.n	c6a <tesStringSearch+0xa>
            }
            i++;
        }
        hay++;
    }
    return 0;   // not found
     c90:	4618      	mov	r0, r3
     c92:	e7f7      	b.n	c84 <tesStringSearch+0x24>

00000c94 <tesStringLength>:
    Returns:
      Number of bytes in the array until terminating 0 byte.
*/
ulp_u2 tesStringLength(const ulp_u1 *s) {
     const ulp_u1 *start = s;
     while (*s) {
     c94:	7802      	ldrb	r2, [r0, #0]
     c96:	b13a      	cbz	r2, ca8 <tesStringLength+0x14>
     c98:	4603      	mov	r3, r0
     c9a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     c9e:	2900      	cmp	r1, #0
     ca0:	d1fb      	bne.n	c9a <tesStringLength+0x6>
     ca2:	1a18      	subs	r0, r3, r0
     ca4:	b280      	uxth	r0, r0
     ca6:	4770      	bx	lr
     ca8:	4610      	mov	r0, r2
         s++;
     }
     return (ulp_u2)(s - start);
}
     caa:	4770      	bx	lr

00000cac <am_devices_led_array_init>:
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     cac:	2900      	cmp	r1, #0
     cae:	f000 80e8 	beq.w	e82 <am_devices_led_array_init+0x1d6>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     cb2:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cba:	b085      	sub	sp, #20
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     cbc:	461a      	mov	r2, r3
     cbe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
     cc2:	9300      	str	r3, [sp, #0]
     cc4:	f8df e1d4 	ldr.w	lr, [pc, #468]	; e9c <am_devices_led_array_init+0x1f0>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     cc8:	9201      	str	r2, [sp, #4]
     cca:	4603      	mov	r3, r0

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     ccc:	2601      	movs	r6, #1
     cce:	3004      	adds	r0, #4
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     cd0:	f04f 0c07 	mov.w	ip, #7
     cd4:	27ff      	movs	r7, #255	; 0xff
     cd6:	f04f 0818 	mov.w	r8, #24
     cda:	4689      	mov	r9, r1
     cdc:	e06a      	b.n	db4 <am_devices_led_array_init+0x108>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     cde:	f850 2c04 	ldr.w	r2, [r0, #-4]
     ce2:	2a31      	cmp	r2, #49	; 0x31
     ce4:	d847      	bhi.n	d76 <am_devices_led_array_init+0xca>
     ce6:	9c01      	ldr	r4, [sp, #4]
     ce8:	9402      	str	r4, [sp, #8]
     cea:	b672      	cpsid	i
     cec:	2173      	movs	r1, #115	; 0x73
     cee:	f8ce 1000 	str.w	r1, [lr]
     cf2:	f850 2c04 	ldr.w	r2, [r0, #-4]
     cf6:	4d63      	ldr	r5, [pc, #396]	; (e84 <am_devices_led_array_init+0x1d8>)
     cf8:	4c63      	ldr	r4, [pc, #396]	; (e88 <am_devices_led_array_init+0x1dc>)
     cfa:	0851      	lsrs	r1, r2, #1
     cfc:	f001 0a7c 	and.w	sl, r1, #124	; 0x7c
     d00:	4455      	add	r5, sl
     d02:	0092      	lsls	r2, r2, #2
     d04:	6829      	ldr	r1, [r5, #0]
     d06:	f002 0b1c 	and.w	fp, r2, #28
     d0a:	fa0c f20b 	lsl.w	r2, ip, fp
     d0e:	ea21 0a02 	bic.w	sl, r1, r2
     d12:	2102      	movs	r1, #2
     d14:	fa01 fb0b 	lsl.w	fp, r1, fp
     d18:	ea4a 020b 	orr.w	r2, sl, fp
     d1c:	602a      	str	r2, [r5, #0]
     d1e:	f850 5c04 	ldr.w	r5, [r0, #-4]
     d22:	f005 0afc 	and.w	sl, r5, #252	; 0xfc
     d26:	f10a 4180 	add.w	r1, sl, #1073741824	; 0x40000000
     d2a:	f501 3b80 	add.w	fp, r1, #65536	; 0x10000
     d2e:	00ea      	lsls	r2, r5, #3
     d30:	f002 0118 	and.w	r1, r2, #24
     d34:	f8db 5000 	ldr.w	r5, [fp]
     d38:	fa07 f201 	lsl.w	r2, r7, r1
     d3c:	ea25 0502 	bic.w	r5, r5, r2
     d40:	fa08 f101 	lsl.w	r1, r8, r1
     d44:	430d      	orrs	r5, r1
     d46:	f8cb 5000 	str.w	r5, [fp]
     d4a:	f850 2c04 	ldr.w	r2, [r0, #-4]
     d4e:	f002 0afc 	and.w	sl, r2, #252	; 0xfc
     d52:	4454      	add	r4, sl
     d54:	00d5      	lsls	r5, r2, #3
     d56:	6821      	ldr	r1, [r4, #0]
     d58:	f005 0b18 	and.w	fp, r5, #24
     d5c:	fa07 f20b 	lsl.w	r2, r7, fp
     d60:	ea21 0502 	bic.w	r5, r1, r2
     d64:	2100      	movs	r1, #0
     d66:	6025      	str	r5, [r4, #0]
     d68:	f8ce 1000 	str.w	r1, [lr]
     d6c:	9c02      	ldr	r4, [sp, #8]
     d6e:	f384 8810 	msr	PRIMASK, r4
     d72:	f850 2c04 	ldr.w	r2, [r0, #-4]

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     d76:	4d45      	ldr	r5, [pc, #276]	; (e8c <am_devices_led_array_init+0x1e0>)
     d78:	08d1      	lsrs	r1, r2, #3
     d7a:	f001 0a04 	and.w	sl, r1, #4
     d7e:	4455      	add	r5, sl
     d80:	f002 041f 	and.w	r4, r2, #31
     d84:	fa06 f204 	lsl.w	r2, r6, r4
     d88:	602a      	str	r2, [r5, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     d8a:	685d      	ldr	r5, [r3, #4]
     d8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     d90:	f015 0f01 	tst.w	r5, #1
     d94:	d070      	beq.n	e78 <am_devices_led_array_init+0x1cc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     d96:	493e      	ldr	r1, [pc, #248]	; (e90 <am_devices_led_array_init+0x1e4>)
     d98:	08d4      	lsrs	r4, r2, #3
     d9a:	f004 0b04 	and.w	fp, r4, #4
     d9e:	f002 0a1f 	and.w	sl, r2, #31
     da2:	4459      	add	r1, fp
     da4:	3308      	adds	r3, #8
     da6:	fa06 f20a 	lsl.w	r2, r6, sl
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     daa:	4599      	cmp	r9, r3
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     dac:	600a      	str	r2, [r1, #0]
     dae:	f100 0008 	add.w	r0, r0, #8
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     db2:	d063      	beq.n	e7c <am_devices_led_array_init+0x1d0>
am_devices_led_init(am_devices_led_t *psLED)
{
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     db4:	685c      	ldr	r4, [r3, #4]
     db6:	f014 0202 	ands.w	r2, r4, #2
     dba:	d190      	bne.n	cde <am_devices_led_array_init+0x32>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     dbc:	f850 1c04 	ldr.w	r1, [r0, #-4]
     dc0:	2931      	cmp	r1, #49	; 0x31
     dc2:	d849      	bhi.n	e58 <am_devices_led_array_init+0x1ac>
     dc4:	9d00      	ldr	r5, [sp, #0]
     dc6:	9503      	str	r5, [sp, #12]
     dc8:	b672      	cpsid	i
     dca:	2173      	movs	r1, #115	; 0x73
     dcc:	f8ce 1000 	str.w	r1, [lr]
     dd0:	f850 4c04 	ldr.w	r4, [r0, #-4]
     dd4:	4d2b      	ldr	r5, [pc, #172]	; (e84 <am_devices_led_array_init+0x1d8>)
     dd6:	492c      	ldr	r1, [pc, #176]	; (e88 <am_devices_led_array_init+0x1dc>)
     dd8:	ea4f 0a54 	mov.w	sl, r4, lsr #1
     ddc:	f00a 0b7c 	and.w	fp, sl, #124	; 0x7c
     de0:	445d      	add	r5, fp
     de2:	00a4      	lsls	r4, r4, #2
     de4:	f8d5 a000 	ldr.w	sl, [r5]
     de8:	f004 041c 	and.w	r4, r4, #28
     dec:	fa0c fb04 	lsl.w	fp, ip, r4
     df0:	ea2a 0a0b 	bic.w	sl, sl, fp
     df4:	f04f 0b06 	mov.w	fp, #6
     df8:	fa0b f404 	lsl.w	r4, fp, r4
     dfc:	ea4a 0404 	orr.w	r4, sl, r4
     e00:	602c      	str	r4, [r5, #0]
     e02:	f850 4c04 	ldr.w	r4, [r0, #-4]
     e06:	f004 05fc 	and.w	r5, r4, #252	; 0xfc
     e0a:	f105 4a80 	add.w	sl, r5, #1073741824	; 0x40000000
     e0e:	f50a 3580 	add.w	r5, sl, #65536	; 0x10000
     e12:	00e4      	lsls	r4, r4, #3
     e14:	f8d5 a000 	ldr.w	sl, [r5]
     e18:	f004 0418 	and.w	r4, r4, #24
     e1c:	fa07 fb04 	lsl.w	fp, r7, r4
     e20:	ea2a 0a0b 	bic.w	sl, sl, fp
     e24:	fa08 f404 	lsl.w	r4, r8, r4
     e28:	ea4a 0404 	orr.w	r4, sl, r4
     e2c:	602c      	str	r4, [r5, #0]
     e2e:	f850 4c04 	ldr.w	r4, [r0, #-4]
     e32:	f004 05fc 	and.w	r5, r4, #252	; 0xfc
     e36:	4429      	add	r1, r5
     e38:	00e4      	lsls	r4, r4, #3
     e3a:	680d      	ldr	r5, [r1, #0]
     e3c:	f004 0b18 	and.w	fp, r4, #24
     e40:	fa07 fa0b 	lsl.w	sl, r7, fp
     e44:	ea25 040a 	bic.w	r4, r5, sl
     e48:	600c      	str	r4, [r1, #0]
     e4a:	f8ce 2000 	str.w	r2, [lr]
     e4e:	9a03      	ldr	r2, [sp, #12]
     e50:	f382 8810 	msr	PRIMASK, r2
     e54:	f850 1c04 	ldr.w	r1, [r0, #-4]

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     e58:	4d0e      	ldr	r5, [pc, #56]	; (e94 <am_devices_led_array_init+0x1e8>)
     e5a:	08cc      	lsrs	r4, r1, #3
     e5c:	f004 0b04 	and.w	fp, r4, #4
     e60:	f001 021f 	and.w	r2, r1, #31
     e64:	445d      	add	r5, fp
     e66:	fa06 f102 	lsl.w	r1, r6, r2
     e6a:	6029      	str	r1, [r5, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     e6c:	685d      	ldr	r5, [r3, #4]
     e6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
     e72:	f015 0f01 	tst.w	r5, #1
     e76:	d18e      	bne.n	d96 <am_devices_led_array_init+0xea>
     e78:	4907      	ldr	r1, [pc, #28]	; (e98 <am_devices_led_array_init+0x1ec>)
     e7a:	e78d      	b.n	d98 <am_devices_led_array_init+0xec>
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    {
        am_devices_led_init(psLEDs + i);
    }
}
     e7c:	b005      	add	sp, #20
     e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e82:	4770      	bx	lr
     e84:	40010040 	.word	0x40010040
     e88:	400100e0 	.word	0x400100e0
     e8c:	400100a8 	.word	0x400100a8
     e90:	40010090 	.word	0x40010090
     e94:	400100b4 	.word	0x400100b4
     e98:	40010098 	.word	0x40010098
     e9c:	40010060 	.word	0x40010060

00000ea0 <am_devices_led_off>:
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     ea0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
     ea4:	685b      	ldr	r3, [r3, #4]
     ea6:	079a      	lsls	r2, r3, #30
     ea8:	d511      	bpl.n	ece <am_devices_led_off+0x2e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     eaa:	f013 0f01 	tst.w	r3, #1
     eae:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
     eb2:	bf0c      	ite	eq
     eb4:	4808      	ldreq	r0, [pc, #32]	; (ed8 <am_devices_led_off+0x38>)
     eb6:	4809      	ldrne	r0, [pc, #36]	; (edc <am_devices_led_off+0x3c>)
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     eb8:	08ca      	lsrs	r2, r1, #3
     eba:	f002 0c04 	and.w	ip, r2, #4
     ebe:	f001 031f 	and.w	r3, r1, #31
     ec2:	2101      	movs	r1, #1
     ec4:	fa01 f203 	lsl.w	r2, r1, r3
     ec8:	f84c 2000 	str.w	r2, [ip, r0]
     ecc:	4770      	bx	lr
     ece:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
     ed2:	4803      	ldr	r0, [pc, #12]	; (ee0 <am_devices_led_off+0x40>)
     ed4:	e7f0      	b.n	eb8 <am_devices_led_off+0x18>
     ed6:	bf00      	nop
     ed8:	40010090 	.word	0x40010090
     edc:	40010098 	.word	0x40010098
     ee0:	400100b4 	.word	0x400100b4

00000ee4 <am_devices_led_toggle>:
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     ee4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     ee8:	b530      	push	{r4, r5, lr}
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     eea:	685a      	ldr	r2, [r3, #4]
     eec:	0793      	lsls	r3, r2, #30
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     eee:	b083      	sub	sp, #12
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     ef0:	d518      	bpl.n	f24 <am_devices_led_toggle+0x40>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     ef2:	f3ef 8310 	mrs	r3, PRIMASK
     ef6:	9301      	str	r3, [sp, #4]
     ef8:	b672      	cpsid	i
     efa:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
     efe:	4d15      	ldr	r5, [pc, #84]	; (f54 <am_devices_led_toggle+0x70>)
     f00:	08c8      	lsrs	r0, r1, #3
     f02:	f000 0c04 	and.w	ip, r0, #4
     f06:	f001 021f 	and.w	r2, r1, #31
     f0a:	f85c 3005 	ldr.w	r3, [ip, r5]
     f0e:	2401      	movs	r4, #1
     f10:	fa04 f102 	lsl.w	r1, r4, r2
     f14:	4059      	eors	r1, r3
     f16:	f84c 1005 	str.w	r1, [ip, r5]
     f1a:	9d01      	ldr	r5, [sp, #4]
     f1c:	f385 8810 	msr	PRIMASK, r5
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     f20:	b003      	add	sp, #12
     f22:	bd30      	pop	{r4, r5, pc}
     f24:	4604      	mov	r4, r0
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     f26:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
     f2a:	460d      	mov	r5, r1
     f2c:	f000 f8fa 	bl	1124 <am_hal_gpio_out_enable_bit_get>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     f30:	f854 1035 	ldr.w	r1, [r4, r5, lsl #3]
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     f34:	b960      	cbnz	r0, f50 <am_devices_led_toggle+0x6c>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     f36:	4808      	ldr	r0, [pc, #32]	; (f58 <am_devices_led_toggle+0x74>)
     f38:	08cb      	lsrs	r3, r1, #3
     f3a:	f003 0c04 	and.w	ip, r3, #4
     f3e:	f001 021f 	and.w	r2, r1, #31
     f42:	2501      	movs	r5, #1
     f44:	fa05 f402 	lsl.w	r4, r5, r2
     f48:	f84c 4000 	str.w	r4, [ip, r0]
        }
    }
}
     f4c:	b003      	add	sp, #12
     f4e:	bd30      	pop	{r4, r5, pc}
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     f50:	4802      	ldr	r0, [pc, #8]	; (f5c <am_devices_led_toggle+0x78>)
     f52:	e7f1      	b.n	f38 <am_devices_led_toggle+0x54>
     f54:	40010088 	.word	0x40010088
     f58:	400100a8 	.word	0x400100a8
     f5c:	400100b4 	.word	0x400100b4

00000f60 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     f60:	e7fe      	b.n	f60 <am_nmi_isr>
     f62:	bf00      	nop

00000f64 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     f64:	e7fe      	b.n	f64 <am_adc_isr>
     f66:	bf00      	nop

00000f68 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     f68:	4811      	ldr	r0, [pc, #68]	; (fb0 <zero_loop+0x12>)
     f6a:	4912      	ldr	r1, [pc, #72]	; (fb4 <zero_loop+0x16>)
     f6c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     f6e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     f72:	4811      	ldr	r0, [pc, #68]	; (fb8 <zero_loop+0x1a>)
     f74:	6801      	ldr	r1, [r0, #0]
     f76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     f7a:	6001      	str	r1, [r0, #0]
     f7c:	f3bf 8f4f 	dsb	sy
     f80:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     f84:	480d      	ldr	r0, [pc, #52]	; (fbc <zero_loop+0x1e>)
     f86:	490e      	ldr	r1, [pc, #56]	; (fc0 <zero_loop+0x22>)
     f88:	4a0e      	ldr	r2, [pc, #56]	; (fc4 <zero_loop+0x26>)

00000f8a <copy_loop>:
     f8a:	f850 3b04 	ldr.w	r3, [r0], #4
     f8e:	f841 3b04 	str.w	r3, [r1], #4
     f92:	4291      	cmp	r1, r2
     f94:	dbf9      	blt.n	f8a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     f96:	480c      	ldr	r0, [pc, #48]	; (fc8 <zero_loop+0x2a>)
     f98:	490c      	ldr	r1, [pc, #48]	; (fcc <zero_loop+0x2e>)
     f9a:	f04f 0200 	mov.w	r2, #0

00000f9e <zero_loop>:
     f9e:	4288      	cmp	r0, r1
     fa0:	bfb8      	it	lt
     fa2:	f840 2b04 	strlt.w	r2, [r0], #4
     fa6:	dbfa      	blt.n	f9e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     fa8:	f7ff fd4e 	bl	a48 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     fac:	be00      	bkpt	0x0000
     fae:	0000      	.short	0x0000
     fb0:	e000ed08 	.word	0xe000ed08
     fb4:	00000000 	.word	0x00000000
     fb8:	e000ed88 	.word	0xe000ed88
     fbc:	00001474 	.word	0x00001474
     fc0:	10001000 	.word	0x10001000
     fc4:	100011e0 	.word	0x100011e0
     fc8:	100011e0 	.word	0x100011e0
     fcc:	10001250 	.word	0x10001250

00000fd0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     fd0:	b510      	push	{r4, lr}
     fd2:	4604      	mov	r4, r0
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     fd4:	f000 f88e 	bl	10f4 <am_hal_clkgen_sysclk_get>

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     fd8:	4b04      	ldr	r3, [pc, #16]	; (fec <am_util_delay_ms+0x1c>)
     fda:	fba3 3000 	umull	r3, r0, r3, r0
     fde:	0980      	lsrs	r0, r0, #6
     fe0:	fb04 f000 	mul.w	r0, r4, r0
}
     fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     fe8:	f000 b896 	b.w	1118 <am_hal_flash_delay>
     fec:	057619f1 	.word	0x057619f1

00000ff0 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     ff0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     ff2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     ff4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     ff6:	f000 f805 	bl	1004 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     ffa:	bd01      	pop	{r0, pc}

00000ffc <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     ffc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     ffe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    1000:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    1002:	4770      	bx	lr

00001004 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    1004:	b500      	push	{lr}
    1006:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    1008:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    100a:	4a2d      	ldr	r2, [pc, #180]	; (10c0 <am_util_faultisr_collect_data+0xbc>)
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    100c:	9310      	str	r3, [sp, #64]	; 0x40
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    100e:	9301      	str	r3, [sp, #4]
    1010:	9300      	str	r3, [sp, #0]
    1012:	9302      	str	r3, [sp, #8]
    1014:	9303      	str	r3, [sp, #12]
    1016:	9304      	str	r3, [sp, #16]
    1018:	9305      	str	r3, [sp, #20]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    101a:	6811      	ldr	r1, [r2, #0]
    101c:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    101e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1020:	b2d9      	uxtb	r1, r3
    1022:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    1026:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1028:	f3c3 2107 	ubfx	r1, r3, #8, #8
    102c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    1030:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1032:	0c19      	lsrs	r1, r3, #16
    1034:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    1038:	6912      	ldr	r2, [r2, #16]
    103a:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    103c:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    1040:	078a      	lsls	r2, r1, #30
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    1042:	4603      	mov	r3, r0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    1044:	d436      	bmi.n	10b4 <am_util_faultisr_collect_data+0xb0>
    1046:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    104a:	4619      	mov	r1, r3
    104c:	2000      	movs	r0, #0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    104e:	920e      	str	r2, [sp, #56]	; 0x38

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    1050:	f7ff ffd4 	bl	ffc <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    1054:	4619      	mov	r1, r3

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    1056:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    1058:	2001      	movs	r0, #1

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    105a:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    105c:	f7ff ffce 	bl	ffc <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    1060:	4619      	mov	r1, r3
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    1062:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    1064:	2002      	movs	r0, #2
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    1066:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    1068:	f7ff ffc8 	bl	ffc <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    106c:	4619      	mov	r1, r3
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    106e:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    1070:	2003      	movs	r0, #3
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    1072:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    1074:	f7ff ffc2 	bl	ffc <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    1078:	4619      	mov	r1, r3
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    107a:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    107c:	2004      	movs	r0, #4
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    107e:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    1080:	f7ff ffbc 	bl	ffc <getStackedReg>
    1084:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    1086:	4619      	mov	r1, r3
    1088:	2005      	movs	r0, #5
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    108a:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    108c:	f7ff ffb6 	bl	ffc <getStackedReg>
    1090:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    1092:	4619      	mov	r1, r3
    1094:	2006      	movs	r0, #6
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    1096:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    1098:	f7ff ffb0 	bl	ffc <getStackedReg>
    109c:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    109e:	4619      	mov	r1, r3
    10a0:	2007      	movs	r0, #7
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    10a2:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    10a4:	f7ff ffaa 	bl	ffc <getStackedReg>
    10a8:	4601      	mov	r1, r0

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    10aa:	4668      	mov	r0, sp
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    10ac:	910d      	str	r1, [sp, #52]	; 0x34

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    10ae:	f000 f877 	bl	11a0 <am_hal_mcuctrl_fault_status>
    10b2:	e7fe      	b.n	10b2 <am_util_faultisr_collect_data+0xae>

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    10b4:	4601      	mov	r1, r0
    10b6:	2006      	movs	r0, #6
    10b8:	f7ff ffa0 	bl	ffc <getStackedReg>
    10bc:	4602      	mov	r2, r0
    10be:	e7c4      	b.n	104a <am_util_faultisr_collect_data+0x46>
    10c0:	e000ed28 	.word	0xe000ed28

000010c4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    10c4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    10c6:	4604      	mov	r4, r0
    10c8:	b120      	cbz	r0, 10d4 <am_hal_clkgen_sysclk_select+0x10>
    10ca:	4a06      	ldr	r2, [pc, #24]	; (10e4 <am_hal_clkgen_sysclk_select+0x20>)
    10cc:	4806      	ldr	r0, [pc, #24]	; (10e8 <am_hal_clkgen_sysclk_select+0x24>)
    10ce:	2150      	movs	r1, #80	; 0x50
    10d0:	f000 f820 	bl	1114 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    10d4:	4b05      	ldr	r3, [pc, #20]	; (10ec <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    10d6:	4906      	ldr	r1, [pc, #24]	; (10f0 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    10d8:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    10da:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    10dc:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    10de:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    10e0:	601a      	str	r2, [r3, #0]
    10e2:	bd10      	pop	{r4, pc}
    10e4:	00001424 	.word	0x00001424
    10e8:	0000145c 	.word	0x0000145c
    10ec:	40004014 	.word	0x40004014
    10f0:	40004018 	.word	0x40004018

000010f4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    10f4:	4b04      	ldr	r3, [pc, #16]	; (1108 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    10f6:	4905      	ldr	r1, [pc, #20]	; (110c <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    10f8:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    10fa:	4805      	ldr	r0, [pc, #20]	; (1110 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    10fc:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1100:	bf08      	it	eq
    1102:	4608      	moveq	r0, r1
    1104:	4770      	bx	lr
    1106:	bf00      	nop
    1108:	40004018 	.word	0x40004018
    110c:	02dc6c00 	.word	0x02dc6c00
    1110:	016e3600 	.word	0x016e3600

00001114 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1114:	e7fe      	b.n	1114 <am_hal_debug_error>
    1116:	bf00      	nop

00001118 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1118:	4b01      	ldr	r3, [pc, #4]	; (1120 <am_hal_flash_delay+0x8>)
    111a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    111c:	4708      	bx	r1
    111e:	bf00      	nop
    1120:	10001190 	.word	0x10001190

00001124 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1124:	08c3      	lsrs	r3, r0, #3
    1126:	f003 0104 	and.w	r1, r3, #4
    112a:	4a04      	ldr	r2, [pc, #16]	; (113c <am_hal_gpio_out_enable_bit_get+0x18>)
    112c:	588b      	ldr	r3, [r1, r2]
    112e:	f000 001f 	and.w	r0, r0, #31
    1132:	fa23 f100 	lsr.w	r1, r3, r0
}
    1136:	f001 0001 	and.w	r0, r1, #1
    113a:	4770      	bx	lr
    113c:	400100a0 	.word	0x400100a0

00001140 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1140:	280f      	cmp	r0, #15
    1142:	d80b      	bhi.n	115c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1144:	2805      	cmp	r0, #5
    1146:	d013      	beq.n	1170 <am_hal_interrupt_enable+0x30>
    1148:	2806      	cmp	r0, #6
    114a:	d017      	beq.n	117c <am_hal_interrupt_enable+0x3c>
    114c:	2804      	cmp	r0, #4
    114e:	d104      	bne.n	115a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1150:	4a0d      	ldr	r2, [pc, #52]	; (1188 <am_hal_interrupt_enable+0x48>)
    1152:	6813      	ldr	r3, [r2, #0]
    1154:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1158:	6010      	str	r0, [r2, #0]
    115a:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    115c:	f1a0 0310 	sub.w	r3, r0, #16
    1160:	f003 0c1f 	and.w	ip, r3, #31
    1164:	2001      	movs	r0, #1
    1166:	4909      	ldr	r1, [pc, #36]	; (118c <am_hal_interrupt_enable+0x4c>)
    1168:	fa00 f20c 	lsl.w	r2, r0, ip
    116c:	600a      	str	r2, [r1, #0]
    116e:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1170:	4805      	ldr	r0, [pc, #20]	; (1188 <am_hal_interrupt_enable+0x48>)
    1172:	6801      	ldr	r1, [r0, #0]
    1174:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1178:	6002      	str	r2, [r0, #0]
            break;
    117a:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    117c:	4902      	ldr	r1, [pc, #8]	; (1188 <am_hal_interrupt_enable+0x48>)
    117e:	680a      	ldr	r2, [r1, #0]
    1180:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1184:	600b      	str	r3, [r1, #0]
            break;
    1186:	4770      	bx	lr
    1188:	e000ed24 	.word	0xe000ed24
    118c:	e000e100 	.word	0xe000e100

00001190 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1190:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1194:	b662      	cpsie	i
    __asm("    bx lr");
    1196:	4770      	bx	lr

00001198 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1198:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    119c:	b672      	cpsid	i
    __asm("    bx lr");
    119e:	4770      	bx	lr

000011a0 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    11a0:	4a0d      	ldr	r2, [pc, #52]	; (11d8 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    11a2:	4b0e      	ldr	r3, [pc, #56]	; (11dc <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    11a4:	490e      	ldr	r1, [pc, #56]	; (11e0 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    11a6:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    11a8:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    11aa:	6814      	ldr	r4, [r2, #0]
    11ac:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    11ae:	6809      	ldr	r1, [r1, #0]
    11b0:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    11b2:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    11b4:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    11b6:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    11b8:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    11ba:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    11bc:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    11c0:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    11c2:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    11c4:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    11c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    11cc:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    11ce:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    11d0:	6142      	str	r2, [r0, #20]
}
    11d2:	bc70      	pop	{r4, r5, r6}
    11d4:	4770      	bx	lr
    11d6:	bf00      	nop
    11d8:	400201c4 	.word	0x400201c4
    11dc:	400201cc 	.word	0x400201cc
    11e0:	400201c0 	.word	0x400201c0

000011e4 <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    11e4:	4a02      	ldr	r2, [pc, #8]	; (11f0 <am_hal_rtc_osc_enable+0xc>)
    11e6:	6813      	ldr	r3, [r2, #0]
    11e8:	f023 0010 	bic.w	r0, r3, #16
    11ec:	6010      	str	r0, [r2, #0]
    11ee:	4770      	bx	lr
    11f0:	40004050 	.word	0x40004050

000011f4 <am_hal_rtc_int_enable>:
am_hal_rtc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(RTC, INTEN) |= ui32Interrupt;
    11f4:	4a02      	ldr	r2, [pc, #8]	; (1200 <am_hal_rtc_int_enable+0xc>)
    11f6:	6813      	ldr	r3, [r2, #0]
    11f8:	4318      	orrs	r0, r3
    11fa:	6010      	str	r0, [r2, #0]
    11fc:	4770      	bx	lr
    11fe:	bf00      	nop
    1200:	40004100 	.word	0x40004100

00001204 <am_hal_rtc_int_clear>:
am_hal_rtc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(RTC, INTCLR) = ui32Interrupt;
    1204:	4b01      	ldr	r3, [pc, #4]	; (120c <am_hal_rtc_int_clear+0x8>)
    1206:	6018      	str	r0, [r3, #0]
    1208:	4770      	bx	lr
    120a:	bf00      	nop
    120c:	40004108 	.word	0x40004108

00001210 <am_hal_rtc_alarm_interval_set>:
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1210:	2808      	cmp	r0, #8
//! @return None.
//
//*****************************************************************************
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    1212:	b410      	push	{r4}
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1214:	d01c      	beq.n	1250 <am_hal_rtc_alarm_interval_set+0x40>
    1216:	2809      	cmp	r0, #9
    1218:	d110      	bne.n	123c <am_hal_rtc_alarm_interval_set+0x2c>
    121a:	230e      	movs	r3, #14
        //
        // If repeat every 100th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_100TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_100TH;
    121c:	22ff      	movs	r2, #255	; 0xff
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    121e:	4c0e      	ldr	r4, [pc, #56]	; (1258 <am_hal_rtc_alarm_interval_set+0x48>)

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    1220:	490e      	ldr	r1, [pc, #56]	; (125c <am_hal_rtc_alarm_interval_set+0x4c>)
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    1222:	6820      	ldr	r0, [r4, #0]
    1224:	f020 000e 	bic.w	r0, r0, #14
    1228:	4318      	orrs	r0, r3
    122a:	6020      	str	r0, [r4, #0]

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    122c:	680b      	ldr	r3, [r1, #0]
    122e:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    1232:	4322      	orrs	r2, r4
    1234:	600a      	str	r2, [r1, #0]
}
    1236:	f85d 4b04 	ldr.w	r4, [sp], #4
    123a:	4770      	bx	lr
        //
        default:
            //
            // Get the current value of the ALM100 field.
            //
            ui32Value = AM_BFR(RTC, ALMLOW, ALM100);
    123c:	4b07      	ldr	r3, [pc, #28]	; (125c <am_hal_rtc_alarm_interval_set+0x4c>)
    123e:	681a      	ldr	r2, [r3, #0]
    1240:	b2d2      	uxtb	r2, r2
    1242:	0040      	lsls	r0, r0, #1

            //
            // If ALM100 was previous EVERY_10TH or EVERY_100TH reset to zero
            // otherwise keep previous setting.
            //
            ui32Alm100 = ui32Value >= 0xF0 ? 0 : ui32Value;
    1244:	2aef      	cmp	r2, #239	; 0xef
    1246:	f000 030e 	and.w	r3, r0, #14
    124a:	d9e8      	bls.n	121e <am_hal_rtc_alarm_interval_set+0xe>
    124c:	2200      	movs	r2, #0
    124e:	e7e6      	b.n	121e <am_hal_rtc_alarm_interval_set+0xe>
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1250:	230e      	movs	r3, #14
        //
        // If repeat every 10th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_10TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_10TH;
    1252:	22f0      	movs	r2, #240	; 0xf0
    1254:	e7e3      	b.n	121e <am_hal_rtc_alarm_interval_set+0xe>
    1256:	bf00      	nop
    1258:	40004050 	.word	0x40004050
    125c:	40004048 	.word	0x40004048

00001260 <memcpy>:
    1260:	b510      	push	{r4, lr}
    1262:	1e43      	subs	r3, r0, #1
    1264:	440a      	add	r2, r1
    1266:	4291      	cmp	r1, r2
    1268:	d004      	beq.n	1274 <memcpy+0x14>
    126a:	f811 4b01 	ldrb.w	r4, [r1], #1
    126e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1272:	e7f8      	b.n	1266 <memcpy+0x6>
    1274:	bd10      	pop	{r4, pc}
    1276:	0000      	movs	r0, r0
    1278:	00474f44 	.word	0x00474f44
    127c:	00656854 	.word	0x00656854
    1280:	00454854 	.word	0x00454854
    1284:	20454854 	.word	0x20454854
    1288:	574f5242 	.word	0x574f5242
    128c:	4f46204e 	.word	0x4f46204e
    1290:	554a2058 	.word	0x554a2058
    1294:	2053504d 	.word	0x2053504d
    1298:	5245564f 	.word	0x5245564f
    129c:	45485420 	.word	0x45485420
    12a0:	5a414c20 	.word	0x5a414c20
    12a4:	4f442059 	.word	0x4f442059
    12a8:	54202147 	.word	0x54202147
    12ac:	42206568 	.word	0x42206568
    12b0:	6e776f72 	.word	0x6e776f72
    12b4:	786f4620 	.word	0x786f4620
    12b8:	6d756a20 	.word	0x6d756a20
    12bc:	4f207370 	.word	0x4f207370
    12c0:	20726576 	.word	0x20726576
    12c4:	20656854 	.word	0x20656854
    12c8:	7a7a614c 	.word	0x7a7a614c
    12cc:	6f442079 	.word	0x6f442079
    12d0:	00002167 	.word	0x00002167
    12d4:	20454854 	.word	0x20454854
    12d8:	54544557 	.word	0x54544557
    12dc:	41432045 	.word	0x41432045
    12e0:	554a2054 	.word	0x554a2054
    12e4:	2053504d 	.word	0x2053504d
    12e8:	5245564f 	.word	0x5245564f
    12ec:	45485420 	.word	0x45485420
    12f0:	5a414c20 	.word	0x5a414c20
    12f4:	4f442059 	.word	0x4f442059
    12f8:	54202147 	.word	0x54202147
    12fc:	42206568 	.word	0x42206568
    1300:	6e776f72 	.word	0x6e776f72
    1304:	786f4620 	.word	0x786f4620
    1308:	6d756a20 	.word	0x6d756a20
    130c:	4f207370 	.word	0x4f207370
    1310:	20726576 	.word	0x20726576
    1314:	20656854 	.word	0x20656854
    1318:	7a7a614c 	.word	0x7a7a614c
    131c:	6f442079 	.word	0x6f442079
    1320:	00002167 	.word	0x00002167
    1324:	20454854 	.word	0x20454854
    1328:	54494857 	.word	0x54494857
    132c:	4f462045 	.word	0x4f462045
    1330:	554a2058 	.word	0x554a2058
    1334:	2053504d 	.word	0x2053504d
    1338:	5245564f 	.word	0x5245564f
    133c:	45485420 	.word	0x45485420
    1340:	5a414c20 	.word	0x5a414c20
    1344:	4f442059 	.word	0x4f442059
    1348:	54202147 	.word	0x54202147
    134c:	42206568 	.word	0x42206568
    1350:	6e776f72 	.word	0x6e776f72
    1354:	786f4620 	.word	0x786f4620
    1358:	6d756a20 	.word	0x6d756a20
    135c:	4f207370 	.word	0x4f207370
    1360:	20726576 	.word	0x20726576
    1364:	20656854 	.word	0x20656854
    1368:	7a7a614c 	.word	0x7a7a614c
    136c:	6f442079 	.word	0x6f442079
    1370:	00002167 	.word	0x00002167
    1374:	20454854 	.word	0x20454854
    1378:	4d415453 	.word	0x4d415453
    137c:	41432050 	.word	0x41432050
    1380:	554a2054 	.word	0x554a2054
    1384:	2053504d 	.word	0x2053504d
    1388:	5245564f 	.word	0x5245564f
    138c:	45485420 	.word	0x45485420
    1390:	5a414c20 	.word	0x5a414c20
    1394:	4f442059 	.word	0x4f442059
    1398:	54202147 	.word	0x54202147
    139c:	42206568 	.word	0x42206568
    13a0:	6e776f72 	.word	0x6e776f72
    13a4:	786f4620 	.word	0x786f4620
    13a8:	6d756a20 	.word	0x6d756a20
    13ac:	4f207370 	.word	0x4f207370
    13b0:	20726576 	.word	0x20726576
    13b4:	20656854 	.word	0x20656854
    13b8:	7a7a614c 	.word	0x7a7a614c
    13bc:	6f442079 	.word	0x6f442079
    13c0:	00002167 	.word	0x00002167

000013c4 <lcd_7segment_ascii_table>:
    13c4:	00210000 0100006d 00000f39 06004000     ..!.m...9....@..
    13d4:	4f5b063f 077d6d66 00006f7f 53004800     ?.[Ofm}..o...H.S
    13e4:	397c7700 3d71795e 7c1f0676 3f3e3e38     .w|9^yq=v..|8>>?
    13f4:	6d776773 3e3e1c78 395b6e76 08010f30     sgwmx.>>vn[90...
    1404:	587c5f02 6f717b5e 7c1f0474 5c545406     ._|X^{qot..|.TT\
    1414:	6d506773 1c1c1c78 395b6e76 00000f30     sgPmx...vn[90...
    1424:	685f6d61 635f6c61 65676b6c 79735f6e     am_hal_clkgen_sy
    1434:	6b6c6373 6c65735f 28746365 69203a29     sclk_select(): i
    1444:	6c61766e 63206469 6b636f6c 74657320     nvalid clock set
    1454:	676e6974 0000002e 2e5c2e2e 6d615c2e     ting......\..\am
    1464:	6c61685f 6b6c635f 2e6e6567 00000063     _hal_clkgen.c...
