
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\multi_boot\atollic_gcc\bin\multi_boot_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003004  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         000000d4  10001000  00003004  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002284  100010d4  000030d8  000210d4  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  000210d4  2**0
                  CONTENTS, READONLY
  5 .debug_info   00008dee  00000000  00000000  0002110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021a3  00000000  00000000  00029ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000ae0  00000000  00000000  0002c09c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001320  00000000  00000000  0002cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004f49  00000000  00000000  0002de9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bba  00000000  00000000  00032de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0003699f  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001f00  00000000  00000000  00036a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004f82  00000000  00000000  00038920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 19 20 00 00 81 20 00 00 89 20 00 00     ..... ... ... ..
      10:	89 20 00 00 89 20 00 00 89 20 00 00 00 00 00 00     . ... ... ......
	...
      2c:	91 20 00 00 91 20 00 00 00 00 00 00 91 20 00 00     . ... ....... ..
      3c:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      4c:	91 20 00 00 91 20 00 00 49 1c 00 00 91 20 00 00     . ... ..I.... ..
      5c:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      6c:	91 20 00 00 61 1c 00 00 91 20 00 00 91 1c 00 00     . ..a.... ......
      7c:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      8c:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      9c:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      ac:	91 20 00 00 91 20 00 00 91 20 00 00 91 20 00 00     . ... ... ... ..
      bc:	91 20 00 00                                         . ..

000000c0 <am_bootloader_fast_crc32>:
//! @return 32-bit CRC value.
//
//*****************************************************************************
uint32_t
am_bootloader_fast_crc32(const void *pvData, uint32_t ui32NumBytes)
{
      c0:	b480      	push	{r7}
      c2:	b087      	sub	sp, #28
      c4:	af00      	add	r7, sp, #0
      c6:	6078      	str	r0, [r7, #4]
      c8:	6039      	str	r1, [r7, #0]
    uint32_t ui32CRC, ui32CRCIndex, i;
    uint8_t *pui8Data;

    ui32CRC = 0;
      ca:	2300      	movs	r3, #0
      cc:	617b      	str	r3, [r7, #20]
    pui8Data = (uint8_t *) pvData;
      ce:	687b      	ldr	r3, [r7, #4]
      d0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < ui32NumBytes; i++ )
      d2:	2300      	movs	r3, #0
      d4:	613b      	str	r3, [r7, #16]
      d6:	e013      	b.n	100 <am_bootloader_fast_crc32+0x40>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
      d8:	68fa      	ldr	r2, [r7, #12]
      da:	693b      	ldr	r3, [r7, #16]
      dc:	4413      	add	r3, r2
      de:	781b      	ldrb	r3, [r3, #0]
      e0:	461a      	mov	r2, r3
      e2:	697b      	ldr	r3, [r7, #20]
      e4:	0e1b      	lsrs	r3, r3, #24
      e6:	4053      	eors	r3, r2
      e8:	60bb      	str	r3, [r7, #8]
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
      ea:	697b      	ldr	r3, [r7, #20]
      ec:	021a      	lsls	r2, r3, #8
      ee:	490a      	ldr	r1, [pc, #40]	; (118 <am_bootloader_fast_crc32+0x58>)
      f0:	68bb      	ldr	r3, [r7, #8]
      f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      f6:	4053      	eors	r3, r2
      f8:	617b      	str	r3, [r7, #20]
    uint8_t *pui8Data;

    ui32CRC = 0;
    pui8Data = (uint8_t *) pvData;

    for (i = 0; i < ui32NumBytes; i++ )
      fa:	693b      	ldr	r3, [r7, #16]
      fc:	3301      	adds	r3, #1
      fe:	613b      	str	r3, [r7, #16]
     100:	693a      	ldr	r2, [r7, #16]
     102:	683b      	ldr	r3, [r7, #0]
     104:	429a      	cmp	r2, r3
     106:	d3e7      	bcc.n	d8 <am_bootloader_fast_crc32+0x18>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
    }

    return ui32CRC;
     108:	697b      	ldr	r3, [r7, #20]
}
     10a:	4618      	mov	r0, r3
     10c:	371c      	adds	r7, #28
     10e:	46bd      	mov	sp, r7
     110:	f85d 7b04 	ldr.w	r7, [sp], #4
     114:	4770      	bx	lr
     116:	bf00      	nop
     118:	00002a74 	.word	0x00002a74

0000011c <am_bootloader_partial_crc32>:
//
//*****************************************************************************
void
am_bootloader_partial_crc32(const void *pvData, uint32_t ui32NumBytes,
                            uint32_t *pui32CRC)
{
     11c:	b480      	push	{r7}
     11e:	b089      	sub	sp, #36	; 0x24
     120:	af00      	add	r7, sp, #0
     122:	60f8      	str	r0, [r7, #12]
     124:	60b9      	str	r1, [r7, #8]
     126:	607a      	str	r2, [r7, #4]
    uint32_t ui32CRCIndex, i;
    uint8_t *pui8Data;

    uint32_t ui32TempCRC = *pui32CRC;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	61bb      	str	r3, [r7, #24]

    pui8Data = (uint8_t *) pvData;
     12e:	68fb      	ldr	r3, [r7, #12]
     130:	617b      	str	r3, [r7, #20]

    for ( i = 0; i < ui32NumBytes; i++ )
     132:	2300      	movs	r3, #0
     134:	61fb      	str	r3, [r7, #28]
     136:	e013      	b.n	160 <am_bootloader_partial_crc32+0x44>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
     138:	697a      	ldr	r2, [r7, #20]
     13a:	69fb      	ldr	r3, [r7, #28]
     13c:	4413      	add	r3, r2
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	461a      	mov	r2, r3
     142:	69bb      	ldr	r3, [r7, #24]
     144:	0e1b      	lsrs	r3, r3, #24
     146:	4053      	eors	r3, r2
     148:	613b      	str	r3, [r7, #16]
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
     14a:	69bb      	ldr	r3, [r7, #24]
     14c:	021a      	lsls	r2, r3, #8
     14e:	490b      	ldr	r1, [pc, #44]	; (17c <am_bootloader_partial_crc32+0x60>)
     150:	693b      	ldr	r3, [r7, #16]
     152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     156:	4053      	eors	r3, r2
     158:	61bb      	str	r3, [r7, #24]

    uint32_t ui32TempCRC = *pui32CRC;

    pui8Data = (uint8_t *) pvData;

    for ( i = 0; i < ui32NumBytes; i++ )
     15a:	69fb      	ldr	r3, [r7, #28]
     15c:	3301      	adds	r3, #1
     15e:	61fb      	str	r3, [r7, #28]
     160:	69fa      	ldr	r2, [r7, #28]
     162:	68bb      	ldr	r3, [r7, #8]
     164:	429a      	cmp	r2, r3
     166:	d3e7      	bcc.n	138 <am_bootloader_partial_crc32+0x1c>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
    }

    *pui32CRC = ui32TempCRC;
     168:	687b      	ldr	r3, [r7, #4]
     16a:	69ba      	ldr	r2, [r7, #24]
     16c:	601a      	str	r2, [r3, #0]
}
     16e:	bf00      	nop
     170:	3724      	adds	r7, #36	; 0x24
     172:	46bd      	mov	sp, r7
     174:	f85d 7b04 	ldr.w	r7, [sp], #4
     178:	4770      	bx	lr
     17a:	bf00      	nop
     17c:	00002a74 	.word	0x00002a74

00000180 <am_bootloader_flash_check>:
//! @return true if the image is safe to run.
//
//*****************************************************************************
bool
am_bootloader_flash_check(am_bootloader_image_t *psImage)
{
     180:	b580      	push	{r7, lr}
     182:	b092      	sub	sp, #72	; 0x48
     184:	af00      	add	r7, sp, #0
     186:	6078      	str	r0, [r7, #4]
    am_hal_mcuctrl_device_t sDevice;
    uint32_t ui32ResetVector, ui32StackPointer, ui32LinkAddress;

    ui32LinkAddress = (uint32_t) psImage->pui32LinkAddress;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	63fb      	str	r3, [r7, #60]	; 0x3c
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));

    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     18e:	f107 030c 	add.w	r3, r7, #12
     192:	4618      	mov	r0, r3
     194:	f002 f92c 	bl	23f0 <am_hal_mcuctrl_device_info_get>

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
     198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    am_hal_mcuctrl_device_info_get(&sDevice);

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
     19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     19c:	429a      	cmp	r2, r3
     19e:	d801      	bhi.n	1a4 <am_bootloader_flash_check+0x24>
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
    {
        DPRINTF(("Link address outside of flash. 0x%08x\r\n", ui32LinkAddress));
        return false;
     1a0:	2300      	movs	r3, #0
     1a2:	e03f      	b.n	224 <am_bootloader_flash_check+0xa4>

    //
    // Check to see if the image was encrypted. If it was, these tests won't
    // work. We'll need to just skip them.
    //
    if ( psImage->bEncrypted == false )
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	69db      	ldr	r3, [r3, #28]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d108      	bne.n	1be <am_bootloader_flash_check+0x3e>
    {
        ui32StackPointer = psImage->pui32LinkAddress[0];
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = psImage->pui32LinkAddress[1];
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	681b      	ldr	r3, [r3, #0]
     1b8:	685b      	ldr	r3, [r3, #4]
     1ba:	647b      	str	r3, [r7, #68]	; 0x44
     1bc:	e005      	b.n	1ca <am_bootloader_flash_check+0x4a>
    }
    else
    {
        ui32StackPointer = (uint32_t) psImage->pui32StackPointer;
     1be:	687b      	ldr	r3, [r7, #4]
     1c0:	695b      	ldr	r3, [r3, #20]
     1c2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = (uint32_t) psImage->pui32ResetVector;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	699b      	ldr	r3, [r3, #24]
     1c8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //
    // Make sure the stack is in SRAM.
    //
    if (((SRAM_BASEADDR != 0) && (ui32StackPointer < SRAM_BASEADDR))
     1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     1d0:	d305      	bcc.n	1de <am_bootloader_flash_check+0x5e>
        || (ui32StackPointer >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)))
     1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     1d4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
     1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1da:	429a      	cmp	r2, r3
     1dc:	d801      	bhi.n	1e2 <am_bootloader_flash_check+0x62>
    {
        DPRINTF(("Stack not in SRAM 0x%08x\r\n", ui32StackPointer));
        return false;
     1de:	2300      	movs	r3, #0
     1e0:	e020      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1e6:	429a      	cmp	r2, r3
     1e8:	d306      	bcc.n	1f8 <am_bootloader_flash_check+0x78>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	685a      	ldr	r2, [r3, #4]
     1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1f0:	441a      	add	r2, r3
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     1f4:	429a      	cmp	r2, r3
     1f6:	d801      	bhi.n	1fc <am_bootloader_flash_check+0x7c>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
    {
        DPRINTF(("Reset Vector not in image 0x%08x\r\n", ui32ResetVector));
        return false;
     1f8:	2300      	movs	r3, #0
     1fa:	e013      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If the image isn't encrypted, run a CRC32.
    //
    if ( psImage->bEncrypted == false )
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	69db      	ldr	r3, [r3, #28]
     200:	2b00      	cmp	r3, #0
     202:	d10e      	bne.n	222 <am_bootloader_flash_check+0xa2>
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     204:	687b      	ldr	r3, [r7, #4]
     206:	681a      	ldr	r2, [r3, #0]
     208:	687b      	ldr	r3, [r7, #4]
     20a:	685b      	ldr	r3, [r3, #4]
     20c:	4619      	mov	r1, r3
     20e:	4610      	mov	r0, r2
     210:	f7ff ff56 	bl	c0 <am_bootloader_fast_crc32>
     214:	4602      	mov	r2, r0
             psImage->ui32CRC )
     216:	687b      	ldr	r3, [r7, #4]
     218:	689b      	ldr	r3, [r3, #8]
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     21a:	429a      	cmp	r2, r3
     21c:	d001      	beq.n	222 <am_bootloader_flash_check+0xa2>
             psImage->ui32CRC )
        {
            DPRINTF(("Bad CRC 0x%08x\r\n", psImage->ui32CRC));
            return false;
     21e:	2300      	movs	r3, #0
     220:	e000      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If those tests pass, we're probably safe to run.
    //
    return true;
     222:	2301      	movs	r3, #1
}
     224:	4618      	mov	r0, r3
     226:	3748      	adds	r7, #72	; 0x48
     228:	46bd      	mov	sp, r7
     22a:	bd80      	pop	{r7, pc}

0000022c <am_hal_bootloader_override_check>:
//! @return true if override is asserted
//
//*****************************************************************************
bool
am_hal_bootloader_override_check(am_bootloader_image_t *psImage)
{
     22c:	b490      	push	{r4, r7}
     22e:	b086      	sub	sp, #24
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));
    //
    // Check the override GPIO
    //
    if ( psImage->ui32OverrideGPIO != 0xFFFFFFFF )
     234:	687b      	ldr	r3, [r7, #4]
     236:	68db      	ldr	r3, [r3, #12]
     238:	f1b3 3fff 	cmp.w	r3, #4294967295
     23c:	f000 815d 	beq.w	4fa <am_hal_bootloader_override_check+0x2ce>
        }
#endif
        //
        // Temporarily configure the override pin as an input.
        //
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_INPUT);
     240:	687b      	ldr	r3, [r7, #4]
     242:	68db      	ldr	r3, [r3, #12]
     244:	2b31      	cmp	r3, #49	; 0x31
     246:	d865      	bhi.n	314 <am_hal_bootloader_override_check+0xe8>
     248:	f3ef 8310 	mrs	r3, PRIMASK
     24c:	613b      	str	r3, [r7, #16]
     24e:	b672      	cpsid	i
     250:	4bad      	ldr	r3, [pc, #692]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     252:	2273      	movs	r2, #115	; 0x73
     254:	601a      	str	r2, [r3, #0]
     256:	687b      	ldr	r3, [r7, #4]
     258:	68db      	ldr	r3, [r3, #12]
     25a:	085b      	lsrs	r3, r3, #1
     25c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     260:	4baa      	ldr	r3, [pc, #680]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     262:	4413      	add	r3, r2
     264:	4618      	mov	r0, r3
     266:	687b      	ldr	r3, [r7, #4]
     268:	68db      	ldr	r3, [r3, #12]
     26a:	085b      	lsrs	r3, r3, #1
     26c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     270:	4ba6      	ldr	r3, [pc, #664]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     272:	4413      	add	r3, r2
     274:	681a      	ldr	r2, [r3, #0]
     276:	687b      	ldr	r3, [r7, #4]
     278:	68db      	ldr	r3, [r3, #12]
     27a:	009b      	lsls	r3, r3, #2
     27c:	f003 031c 	and.w	r3, r3, #28
     280:	2107      	movs	r1, #7
     282:	fa01 f303 	lsl.w	r3, r1, r3
     286:	43db      	mvns	r3, r3
     288:	4013      	ands	r3, r2
     28a:	6003      	str	r3, [r0, #0]
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	68db      	ldr	r3, [r3, #12]
     290:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     298:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     29c:	461c      	mov	r4, r3
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	68db      	ldr	r3, [r3, #12]
     2a2:	00db      	lsls	r3, r3, #3
     2a4:	f003 0318 	and.w	r3, r3, #24
     2a8:	221a      	movs	r2, #26
     2aa:	409a      	lsls	r2, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	68db      	ldr	r3, [r3, #12]
     2b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2bc:	6819      	ldr	r1, [r3, #0]
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	68db      	ldr	r3, [r3, #12]
     2c2:	00db      	lsls	r3, r3, #3
     2c4:	f003 0318 	and.w	r3, r3, #24
     2c8:	20ff      	movs	r0, #255	; 0xff
     2ca:	fa00 f303 	lsl.w	r3, r0, r3
     2ce:	43db      	mvns	r3, r3
     2d0:	400b      	ands	r3, r1
     2d2:	4313      	orrs	r3, r2
     2d4:	6023      	str	r3, [r4, #0]
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	68db      	ldr	r3, [r3, #12]
     2da:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2de:	4b8c      	ldr	r3, [pc, #560]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     2e0:	4413      	add	r3, r2
     2e2:	4618      	mov	r0, r3
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	68db      	ldr	r3, [r3, #12]
     2e8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2ec:	4b88      	ldr	r3, [pc, #544]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     2ee:	4413      	add	r3, r2
     2f0:	681a      	ldr	r2, [r3, #0]
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	68db      	ldr	r3, [r3, #12]
     2f6:	00db      	lsls	r3, r3, #3
     2f8:	f003 0318 	and.w	r3, r3, #24
     2fc:	21ff      	movs	r1, #255	; 0xff
     2fe:	fa01 f303 	lsl.w	r3, r1, r3
     302:	43db      	mvns	r3, r3
     304:	4013      	ands	r3, r2
     306:	6003      	str	r3, [r0, #0]
     308:	4b7f      	ldr	r3, [pc, #508]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	693b      	ldr	r3, [r7, #16]
     310:	f383 8810 	msr	PRIMASK, r3

        //
        // If the override pin matches the specified polarity, force a failure.
        //
        uint32_t ui32OverridePin = am_hal_gpio_input_bit_read(psImage->ui32OverrideGPIO);
     314:	687b      	ldr	r3, [r7, #4]
     316:	68db      	ldr	r3, [r3, #12]
     318:	08db      	lsrs	r3, r3, #3
     31a:	f003 0204 	and.w	r2, r3, #4
     31e:	4b7d      	ldr	r3, [pc, #500]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     320:	4413      	add	r3, r2
     322:	681a      	ldr	r2, [r3, #0]
     324:	687b      	ldr	r3, [r7, #4]
     326:	68db      	ldr	r3, [r3, #12]
     328:	f003 031f 	and.w	r3, r3, #31
     32c:	fa22 f303 	lsr.w	r3, r2, r3
     330:	f003 0301 	and.w	r3, r3, #1
     334:	2b00      	cmp	r3, #0
     336:	bf14      	ite	ne
     338:	2301      	movne	r3, #1
     33a:	2300      	moveq	r3, #0
     33c:	b2db      	uxtb	r3, r3
     33e:	617b      	str	r3, [r7, #20]
        if ( ui32OverridePin == (psImage->ui32OverridePolarity & 0x1) )
     340:	687b      	ldr	r3, [r7, #4]
     342:	691b      	ldr	r3, [r3, #16]
     344:	f003 0201 	and.w	r2, r3, #1
     348:	697b      	ldr	r3, [r7, #20]
     34a:	429a      	cmp	r2, r3
     34c:	d16b      	bne.n	426 <am_hal_bootloader_override_check+0x1fa>
        {
            DPRINTF(("Override Pin %d matches Polarity, force failure. %d, %d\r\n", psImage->ui32OverrideGPIO,  ui32OverridePin, psImage->ui32OverridePolarity));
            //
            // Make sure to disable the pin before continuing.
            //
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     34e:	687b      	ldr	r3, [r7, #4]
     350:	68db      	ldr	r3, [r3, #12]
     352:	2b31      	cmp	r3, #49	; 0x31
     354:	d865      	bhi.n	422 <am_hal_bootloader_override_check+0x1f6>
     356:	f3ef 8310 	mrs	r3, PRIMASK
     35a:	60fb      	str	r3, [r7, #12]
     35c:	b672      	cpsid	i
     35e:	4b6a      	ldr	r3, [pc, #424]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     360:	2273      	movs	r2, #115	; 0x73
     362:	601a      	str	r2, [r3, #0]
     364:	687b      	ldr	r3, [r7, #4]
     366:	68db      	ldr	r3, [r3, #12]
     368:	085b      	lsrs	r3, r3, #1
     36a:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     36e:	4b67      	ldr	r3, [pc, #412]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     370:	4413      	add	r3, r2
     372:	4618      	mov	r0, r3
     374:	687b      	ldr	r3, [r7, #4]
     376:	68db      	ldr	r3, [r3, #12]
     378:	085b      	lsrs	r3, r3, #1
     37a:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     37e:	4b63      	ldr	r3, [pc, #396]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     380:	4413      	add	r3, r2
     382:	681a      	ldr	r2, [r3, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	68db      	ldr	r3, [r3, #12]
     388:	009b      	lsls	r3, r3, #2
     38a:	f003 031c 	and.w	r3, r3, #28
     38e:	2107      	movs	r1, #7
     390:	fa01 f303 	lsl.w	r3, r1, r3
     394:	43db      	mvns	r3, r3
     396:	4013      	ands	r3, r2
     398:	6003      	str	r3, [r0, #0]
     39a:	687b      	ldr	r3, [r7, #4]
     39c:	68db      	ldr	r3, [r3, #12]
     39e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3aa:	461c      	mov	r4, r3
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	68db      	ldr	r3, [r3, #12]
     3b0:	00db      	lsls	r3, r3, #3
     3b2:	f003 0318 	and.w	r3, r3, #24
     3b6:	2218      	movs	r2, #24
     3b8:	409a      	lsls	r2, r3
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	68db      	ldr	r3, [r3, #12]
     3be:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3ca:	6819      	ldr	r1, [r3, #0]
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	68db      	ldr	r3, [r3, #12]
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0318 	and.w	r3, r3, #24
     3d6:	20ff      	movs	r0, #255	; 0xff
     3d8:	fa00 f303 	lsl.w	r3, r0, r3
     3dc:	43db      	mvns	r3, r3
     3de:	400b      	ands	r3, r1
     3e0:	4313      	orrs	r3, r2
     3e2:	6023      	str	r3, [r4, #0]
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	68db      	ldr	r3, [r3, #12]
     3e8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3ec:	4b48      	ldr	r3, [pc, #288]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     3ee:	4413      	add	r3, r2
     3f0:	4618      	mov	r0, r3
     3f2:	687b      	ldr	r3, [r7, #4]
     3f4:	68db      	ldr	r3, [r3, #12]
     3f6:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3fa:	4b45      	ldr	r3, [pc, #276]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     3fc:	4413      	add	r3, r2
     3fe:	681a      	ldr	r2, [r3, #0]
     400:	687b      	ldr	r3, [r7, #4]
     402:	68db      	ldr	r3, [r3, #12]
     404:	00db      	lsls	r3, r3, #3
     406:	f003 0318 	and.w	r3, r3, #24
     40a:	21ff      	movs	r1, #255	; 0xff
     40c:	fa01 f303 	lsl.w	r3, r1, r3
     410:	43db      	mvns	r3, r3
     412:	4013      	ands	r3, r2
     414:	6003      	str	r3, [r0, #0]
     416:	4b3c      	ldr	r3, [pc, #240]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     418:	2200      	movs	r2, #0
     41a:	601a      	str	r2, [r3, #0]
     41c:	68fb      	ldr	r3, [r7, #12]
     41e:	f383 8810 	msr	PRIMASK, r3
            return true;
     422:	2301      	movs	r3, #1
     424:	e06a      	b.n	4fc <am_hal_bootloader_override_check+0x2d0>
        //
        // If the test passed, we still need to make sure the GPIO is disabled,
        // as it might interfere with the program we are (presumably) about to
        // boot.
        //
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     426:	687b      	ldr	r3, [r7, #4]
     428:	68db      	ldr	r3, [r3, #12]
     42a:	2b31      	cmp	r3, #49	; 0x31
     42c:	d865      	bhi.n	4fa <am_hal_bootloader_override_check+0x2ce>
     42e:	f3ef 8310 	mrs	r3, PRIMASK
     432:	60bb      	str	r3, [r7, #8]
     434:	b672      	cpsid	i
     436:	4b34      	ldr	r3, [pc, #208]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     438:	2273      	movs	r2, #115	; 0x73
     43a:	601a      	str	r2, [r3, #0]
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	68db      	ldr	r3, [r3, #12]
     440:	085b      	lsrs	r3, r3, #1
     442:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     446:	4b31      	ldr	r3, [pc, #196]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     448:	4413      	add	r3, r2
     44a:	4618      	mov	r0, r3
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	68db      	ldr	r3, [r3, #12]
     450:	085b      	lsrs	r3, r3, #1
     452:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     456:	4b2d      	ldr	r3, [pc, #180]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     458:	4413      	add	r3, r2
     45a:	681a      	ldr	r2, [r3, #0]
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	68db      	ldr	r3, [r3, #12]
     460:	009b      	lsls	r3, r3, #2
     462:	f003 031c 	and.w	r3, r3, #28
     466:	2107      	movs	r1, #7
     468:	fa01 f303 	lsl.w	r3, r1, r3
     46c:	43db      	mvns	r3, r3
     46e:	4013      	ands	r3, r2
     470:	6003      	str	r3, [r0, #0]
     472:	687b      	ldr	r3, [r7, #4]
     474:	68db      	ldr	r3, [r3, #12]
     476:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     47a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     47e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     482:	461c      	mov	r4, r3
     484:	687b      	ldr	r3, [r7, #4]
     486:	68db      	ldr	r3, [r3, #12]
     488:	00db      	lsls	r3, r3, #3
     48a:	f003 0318 	and.w	r3, r3, #24
     48e:	2218      	movs	r2, #24
     490:	409a      	lsls	r2, r3
     492:	687b      	ldr	r3, [r7, #4]
     494:	68db      	ldr	r3, [r3, #12]
     496:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     49a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     49e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     4a2:	6819      	ldr	r1, [r3, #0]
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	68db      	ldr	r3, [r3, #12]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	f003 0318 	and.w	r3, r3, #24
     4ae:	20ff      	movs	r0, #255	; 0xff
     4b0:	fa00 f303 	lsl.w	r3, r0, r3
     4b4:	43db      	mvns	r3, r3
     4b6:	400b      	ands	r3, r1
     4b8:	4313      	orrs	r3, r2
     4ba:	6023      	str	r3, [r4, #0]
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	68db      	ldr	r3, [r3, #12]
     4c0:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     4c6:	4413      	add	r3, r2
     4c8:	4618      	mov	r0, r3
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	68db      	ldr	r3, [r3, #12]
     4ce:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4d2:	4b0f      	ldr	r3, [pc, #60]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     4d4:	4413      	add	r3, r2
     4d6:	681a      	ldr	r2, [r3, #0]
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	68db      	ldr	r3, [r3, #12]
     4dc:	00db      	lsls	r3, r3, #3
     4de:	f003 0318 	and.w	r3, r3, #24
     4e2:	21ff      	movs	r1, #255	; 0xff
     4e4:	fa01 f303 	lsl.w	r3, r1, r3
     4e8:	43db      	mvns	r3, r3
     4ea:	4013      	ands	r3, r2
     4ec:	6003      	str	r3, [r0, #0]
     4ee:	4b06      	ldr	r3, [pc, #24]	; (508 <am_hal_bootloader_override_check+0x2dc>)
     4f0:	2200      	movs	r2, #0
     4f2:	601a      	str	r2, [r3, #0]
     4f4:	68bb      	ldr	r3, [r7, #8]
     4f6:	f383 8810 	msr	PRIMASK, r3
    }

    return false;
     4fa:	2300      	movs	r3, #0
}
     4fc:	4618      	mov	r0, r3
     4fe:	3718      	adds	r7, #24
     500:	46bd      	mov	sp, r7
     502:	bc90      	pop	{r4, r7}
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	40010060 	.word	0x40010060
     50c:	40010040 	.word	0x40010040
     510:	400100e0 	.word	0x400100e0
     514:	40010080 	.word	0x40010080

00000518 <am_bootloader_validate_structure>:
//! @return true if the check passes.
//
//*****************************************************************************
bool
am_bootloader_validate_structure(uint32_t *pInfo, uint32_t size)
{
     518:	b580      	push	{r7, lr}
     51a:	b084      	sub	sp, #16
     51c:	af00      	add	r7, sp, #0
     51e:	6078      	str	r0, [r7, #4]
     520:	6039      	str	r1, [r7, #0]
    uint32_t ui32Crc = 0;
     522:	2300      	movs	r3, #0
     524:	60bb      	str	r3, [r7, #8]
    // CRC value is the last 4 bytes of the structure
    uint32_t *pCrc = pInfo + size/4 - 1;
     526:	683b      	ldr	r3, [r7, #0]
     528:	089b      	lsrs	r3, r3, #2
     52a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     52e:	3b01      	subs	r3, #1
     530:	009b      	lsls	r3, r3, #2
     532:	687a      	ldr	r2, [r7, #4]
     534:	4413      	add	r3, r2
     536:	60fb      	str	r3, [r7, #12]
    // Compute and validate CRC of the structure
    am_bootloader_partial_crc32(pInfo, size - 4, &ui32Crc);
     538:	683b      	ldr	r3, [r7, #0]
     53a:	3b04      	subs	r3, #4
     53c:	f107 0208 	add.w	r2, r7, #8
     540:	4619      	mov	r1, r3
     542:	6878      	ldr	r0, [r7, #4]
     544:	f7ff fdea 	bl	11c <am_bootloader_partial_crc32>
    if (*pCrc != ui32Crc)
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	681a      	ldr	r2, [r3, #0]
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	429a      	cmp	r2, r3
     550:	d001      	beq.n	556 <am_bootloader_validate_structure+0x3e>
    {
        return false;
     552:	2300      	movs	r3, #0
     554:	e000      	b.n	558 <am_bootloader_validate_structure+0x40>
    }
    else
    {
        return true;
     556:	2301      	movs	r3, #1
    }
}
     558:	4618      	mov	r0, r3
     55a:	3710      	adds	r7, #16
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}

00000560 <am_bootloader_flag_page_update>:
//
//*****************************************************************************
int
am_bootloader_flag_page_update(am_bootloader_image_t *psImage,
                               uint32_t *pui32FlagPage)
{
     560:	b580      	push	{r7, lr}
     562:	b086      	sub	sp, #24
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
    uint32_t ui32Block, ui32Page;
    uint32_t ui32Critical;
    psImage->ui32Checksum = 0;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	2200      	movs	r2, #0
     56e:	621a      	str	r2, [r3, #32]
    DPRINTF(("Image to use: 0x%08x\r\n", (uintptr_t)psImage));
    DPRINTF(("Flag page address: 0x%08x\r\n", (uintptr_t)pui32FlagPage));
    //
    // Calculate the correct flag page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)pui32FlagPage);
     570:	683b      	ldr	r3, [r7, #0]
     572:	0b5b      	lsrs	r3, r3, #13
     574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     578:	617b      	str	r3, [r7, #20]
    DPRINTF(("Flag page %d\r\n", ui32Page));
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)pui32FlagPage);
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	0cdb      	lsrs	r3, r3, #19
     57e:	f003 0301 	and.w	r3, r3, #1
     582:	613b      	str	r3, [r7, #16]
    DPRINTF(("Flag page in block %d\r\n", ui32Block));

    // Compute CRC of the structure
    am_bootloader_partial_crc32(psImage, sizeof(*psImage) - 4, &psImage->ui32Checksum);
     584:	687b      	ldr	r3, [r7, #4]
     586:	3320      	adds	r3, #32
     588:	461a      	mov	r2, r3
     58a:	2120      	movs	r1, #32
     58c:	6878      	ldr	r0, [r7, #4]
     58e:	f7ff fdc5 	bl	11c <am_bootloader_partial_crc32>
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     592:	f001 fea9 	bl	22e8 <am_hal_interrupt_master_disable>
     596:	60f8      	str	r0, [r7, #12]
    //
    // Erase the page.
    //
    int rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
     598:	697a      	ldr	r2, [r7, #20]
     59a:	6939      	ldr	r1, [r7, #16]
     59c:	4809      	ldr	r0, [pc, #36]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     59e:	f001 fdfb 	bl	2198 <am_hal_flash_page_erase>
     5a2:	60b8      	str	r0, [r7, #8]
    DPRINTF(("Flash Erased %d\r\n", rc));

    //
    // Write the psImage structure directly to the flag page.
    //
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     5a4:	2309      	movs	r3, #9
     5a6:	683a      	ldr	r2, [r7, #0]
     5a8:	6879      	ldr	r1, [r7, #4]
     5aa:	4806      	ldr	r0, [pc, #24]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     5ac:	f001 fdfa 	bl	21a4 <am_hal_flash_program_main>
     5b0:	60b8      	str	r0, [r7, #8]
                              pui32FlagPage,
                              sizeof(am_bootloader_image_t) / 4);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     5b2:	68f8      	ldr	r0, [r7, #12]
     5b4:	f001 fe9c 	bl	22f0 <am_hal_interrupt_master_set>
    DPRINTF(("Done. %d\r\n", rc));
    return rc;
     5b8:	68bb      	ldr	r3, [r7, #8]
}
     5ba:	4618      	mov	r0, r3
     5bc:	3718      	adds	r7, #24
     5be:	46bd      	mov	sp, r7
     5c0:	bd80      	pop	{r7, pc}
     5c2:	bf00      	nop
     5c4:	12344321 	.word	0x12344321

000005c8 <am_bootloader_erase_flash_page>:
//! @return none
//
//*****************************************************************************
void
am_bootloader_erase_flash_page(uint32_t ui32Addr)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b086      	sub	sp, #24
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32CurrentPage, ui32CurrentBlock;
    //
    // Figure out what page and block we're working on.
    //
    ui32CurrentPage =  AM_HAL_FLASH_ADDR2PAGE(ui32Addr);
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	0b5b      	lsrs	r3, r3, #13
     5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     5d8:	617b      	str	r3, [r7, #20]
    ui32CurrentBlock = AM_HAL_FLASH_ADDR2INST(ui32Addr);
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	0cdb      	lsrs	r3, r3, #19
     5de:	f003 0301 	and.w	r3, r3, #1
     5e2:	613b      	str	r3, [r7, #16]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     5e4:	f001 fe80 	bl	22e8 <am_hal_interrupt_master_disable>
     5e8:	60f8      	str	r0, [r7, #12]
    am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     5ea:	697a      	ldr	r2, [r7, #20]
     5ec:	6939      	ldr	r1, [r7, #16]
     5ee:	4805      	ldr	r0, [pc, #20]	; (604 <am_bootloader_erase_flash_page+0x3c>)
     5f0:	f001 fdd2 	bl	2198 <am_hal_flash_page_erase>
                                ui32CurrentBlock, ui32CurrentPage);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     5f4:	68f8      	ldr	r0, [r7, #12]
     5f6:	f001 fe7b 	bl	22f0 <am_hal_interrupt_master_set>
}
     5fa:	bf00      	nop
     5fc:	3718      	adds	r7, #24
     5fe:	46bd      	mov	sp, r7
     600:	bd80      	pop	{r7, pc}
     602:	bf00      	nop
     604:	12344321 	.word	0x12344321

00000608 <am_bootloader_write_flash_within_page>:
//
//*****************************************************************************
void
am_bootloader_write_flash_within_page(uint32_t ui32WriteAddr,
    uint32_t *pui32ReadAddr, uint32_t ui32NumWords)
{
     608:	b580      	push	{r7, lr}
     60a:	b086      	sub	sp, #24
     60c:	af00      	add	r7, sp, #0
     60e:	60f8      	str	r0, [r7, #12]
     610:	60b9      	str	r1, [r7, #8]
     612:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     614:	f001 fe68 	bl	22e8 <am_hal_interrupt_master_disable>
     618:	6178      	str	r0, [r7, #20]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     61a:	68fa      	ldr	r2, [r7, #12]
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	68b9      	ldr	r1, [r7, #8]
     620:	4804      	ldr	r0, [pc, #16]	; (634 <am_bootloader_write_flash_within_page+0x2c>)
     622:	f001 fdbf 	bl	21a4 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32NumWords);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     626:	6978      	ldr	r0, [r7, #20]
     628:	f001 fe62 	bl	22f0 <am_hal_interrupt_master_set>
}
     62c:	bf00      	nop
     62e:	3718      	adds	r7, #24
     630:	46bd      	mov	sp, r7
     632:	bd80      	pop	{r7, pc}
     634:	12344321 	.word	0x12344321

00000638 <am_bootloader_program_flash_page>:
//
//*****************************************************************************
void
am_bootloader_program_flash_page(uint32_t ui32WriteAddr,
    uint32_t *pui32ReadAddr, uint32_t numBytes)
{
     638:	b580      	push	{r7, lr}
     63a:	b086      	sub	sp, #24
     63c:	af00      	add	r7, sp, #0
     63e:	60f8      	str	r0, [r7, #12]
     640:	60b9      	str	r1, [r7, #8]
     642:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32WordsInBuffer;

    am_bootloader_erase_flash_page(ui32WriteAddr);
     644:	68f8      	ldr	r0, [r7, #12]
     646:	f7ff ffbf 	bl	5c8 <am_bootloader_erase_flash_page>
    
    ui32WordsInBuffer = (numBytes + 3)/ 4;
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	3303      	adds	r3, #3
     64e:	089b      	lsrs	r3, r3, #2
     650:	617b      	str	r3, [r7, #20]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     652:	f001 fe49 	bl	22e8 <am_hal_interrupt_master_disable>
     656:	6138      	str	r0, [r7, #16]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     658:	68fa      	ldr	r2, [r7, #12]
     65a:	697b      	ldr	r3, [r7, #20]
     65c:	68b9      	ldr	r1, [r7, #8]
     65e:	4805      	ldr	r0, [pc, #20]	; (674 <am_bootloader_program_flash_page+0x3c>)
     660:	f001 fda0 	bl	21a4 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32WordsInBuffer);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     664:	6938      	ldr	r0, [r7, #16]
     666:	f001 fe43 	bl	22f0 <am_hal_interrupt_master_set>
}
     66a:	bf00      	nop
     66c:	3718      	adds	r7, #24
     66e:	46bd      	mov	sp, r7
     670:	bd80      	pop	{r7, pc}
     672:	bf00      	nop
     674:	12344321 	.word	0x12344321

00000678 <am_bootloader_image_run>:
//! @return The function does not return.
//
//*****************************************************************************
void
am_bootloader_image_run(am_bootloader_image_t *psImage)
{
     678:	b580      	push	{r7, lr}
     67a:	b082      	sub	sp, #8
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
    // The underlying boot sequence is a little different depeding on whether
    // the image was delivered as an encrypted image or as a cleartext image.
    // We will call the correct assembly routine based on what the image
    // structure tells us.
    //
    if(psImage->bEncrypted)
     680:	687b      	ldr	r3, [r7, #4]
     682:	69db      	ldr	r3, [r3, #28]
     684:	2b00      	cmp	r3, #0
     686:	d003      	beq.n	690 <am_bootloader_image_run+0x18>
    {
        am_bootloader_encrypted_image_run(psImage);
     688:	6878      	ldr	r0, [r7, #4]
     68a:	f000 f809 	bl	6a0 <am_bootloader_encrypted_image_run>
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
    }
}
     68e:	e002      	b.n	696 <am_bootloader_image_run+0x1e>
    {
        am_bootloader_encrypted_image_run(psImage);
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
     690:	6878      	ldr	r0, [r7, #4]
     692:	f000 f811 	bl	6b8 <am_bootloader_clear_image_run>
    }
}
     696:	bf00      	nop
     698:	3708      	adds	r7, #8
     69a:	46bd      	mov	sp, r7
     69c:	bd80      	pop	{r7, pc}
     69e:	bf00      	nop

000006a0 <am_bootloader_encrypted_image_run>:
am_bootloader_encrypted_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #20]");
     6a0:	6941      	ldr	r1, [r0, #20]
    __asm("    ldr     r2, [r0, #24]");
     6a2:	6982      	ldr	r2, [r0, #24]

    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6a4:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6a6:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6ae:	6018      	str	r0, [r3, #0]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6b0:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6b2:	4710      	bx	r2
}
     6b4:	bf00      	nop
     6b6:	bf00      	nop

000006b8 <am_bootloader_clear_image_run>:
am_bootloader_clear_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6b8:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6ba:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6c2:	6018      	str	r0, [r3, #0]

    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #0]");
     6c4:	6801      	ldr	r1, [r0, #0]
    __asm("    ldr     r2, [r0, #4]");
     6c6:	6842      	ldr	r2, [r0, #4]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6c8:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6ca:	4710      	bx	r2
}
     6cc:	bf00      	nop
     6ce:	bf00      	nop

000006d0 <am_multiboot_ios_acc_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_ios_acc_isr_handler(void)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_access_int_status_get(false);
     6d6:	2000      	movs	r0, #0
     6d8:	f001 fe6e 	bl	23b8 <am_hal_ios_access_int_status_get>
     6dc:	6078      	str	r0, [r7, #4]
    am_hal_ios_access_int_clear(ui32Status);
     6de:	6878      	ldr	r0, [r7, #4]
     6e0:	f001 fe64 	bl	23ac <am_hal_ios_access_int_clear>

    //
    // Set up a pointer for writing 32-bit aligned packets through the IO slave
    // interface.
    //
    pui32Packet = (uint32_t *) am_hal_ios_pui8LRAM;
     6e4:	4b90      	ldr	r3, [pc, #576]	; (928 <am_multiboot_ios_acc_isr_handler+0x258>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	603b      	str	r3, [r7, #0]

    if ( ui32Status & AM_HAL_IOS_ACCESS_INT_03 )
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     6f0:	2b00      	cmp	r3, #0
     6f2:	f000 8114 	beq.w	91e <am_multiboot_ios_acc_isr_handler+0x24e>
    {
        am_hal_gpio_out_bit_set(g_iosIntPin);
     6f6:	4b8d      	ldr	r3, [pc, #564]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     6f8:	681b      	ldr	r3, [r3, #0]
     6fa:	08db      	lsrs	r3, r3, #3
     6fc:	f003 0204 	and.w	r2, r3, #4
     700:	4b8b      	ldr	r3, [pc, #556]	; (930 <am_multiboot_ios_acc_isr_handler+0x260>)
     702:	4413      	add	r3, r2
     704:	4619      	mov	r1, r3
     706:	4b89      	ldr	r3, [pc, #548]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     708:	681b      	ldr	r3, [r3, #0]
     70a:	f003 031f 	and.w	r3, r3, #31
     70e:	2201      	movs	r2, #1
     710:	fa02 f303 	lsl.w	r3, r2, r3
     714:	600b      	str	r3, [r1, #0]

        //
        // Figure out what to do next based on the packet header.
        //
        switch(pui32Packet[0])
     716:	683b      	ldr	r3, [r7, #0]
     718:	681b      	ldr	r3, [r3, #0]
     71a:	2b09      	cmp	r3, #9
     71c:	f200 80ea 	bhi.w	8f4 <am_multiboot_ios_acc_isr_handler+0x224>
     720:	a201      	add	r2, pc, #4	; (adr r2, 728 <am_multiboot_ios_acc_isr_handler+0x58>)
     722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     726:	bf00      	nop
     728:	0000091d 	.word	0x0000091d
     72c:	0000091d 	.word	0x0000091d
     730:	00000751 	.word	0x00000751
     734:	000007f7 	.word	0x000007f7
     738:	000008b5 	.word	0x000008b5
     73c:	000007bf 	.word	0x000007bf
     740:	000008c5 	.word	0x000008c5
     744:	000008f5 	.word	0x000008f5
     748:	000008f5 	.word	0x000008f5
     74c:	000008bf 	.word	0x000008bf

                //
                // Parse the image packet, and store the result to the global
                // image structure.
                //
                g_bIosImageValid = image_start_packet_read(&g_sImage,
     750:	4b75      	ldr	r3, [pc, #468]	; (928 <am_multiboot_ios_acc_isr_handler+0x258>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	4619      	mov	r1, r3
     756:	4877      	ldr	r0, [pc, #476]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     758:	f000 fc3a 	bl	fd0 <image_start_packet_read>
     75c:	4603      	mov	r3, r0
     75e:	461a      	mov	r2, r3
     760:	4b75      	ldr	r3, [pc, #468]	; (938 <am_multiboot_ios_acc_isr_handler+0x268>)
     762:	701a      	strb	r2, [r3, #0]

                //
                // Make sure the image packet had reasonable contents. If it
                // didn't, we need to let the host know.
                //
                if ( g_bIosImageValid )
     764:	4b74      	ldr	r3, [pc, #464]	; (938 <am_multiboot_ios_acc_isr_handler+0x268>)
     766:	781b      	ldrb	r3, [r3, #0]
     768:	b2db      	uxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	d013      	beq.n	796 <am_multiboot_ios_acc_isr_handler+0xc6>
                {
                    //
                    // Good image; Send back a "READY" packet.
                    //
                    pui32Packet[0] = AM_BOOTLOADER_READY;
     76e:	683b      	ldr	r3, [r7, #0]
     770:	2202      	movs	r2, #2
     772:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     774:	4b6d      	ldr	r3, [pc, #436]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     776:	681b      	ldr	r3, [r3, #0]
     778:	08db      	lsrs	r3, r3, #3
     77a:	f003 0204 	and.w	r2, r3, #4
     77e:	4b6f      	ldr	r3, [pc, #444]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     780:	4413      	add	r3, r2
     782:	4619      	mov	r1, r3
     784:	4b69      	ldr	r3, [pc, #420]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     786:	681b      	ldr	r3, [r3, #0]
     788:	f003 031f 	and.w	r3, r3, #31
     78c:	2201      	movs	r2, #1
     78e:	fa02 f303 	lsl.w	r3, r2, r3
     792:	600b      	str	r3, [r1, #0]
                    //
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
                }

                break;
     794:	e0c3      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
                else
                {
                    //
                    // Bad image; Send back an error.
                    //
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
     796:	683b      	ldr	r3, [r7, #0]
     798:	2205      	movs	r2, #5
     79a:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     79c:	4b63      	ldr	r3, [pc, #396]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     79e:	681b      	ldr	r3, [r3, #0]
     7a0:	08db      	lsrs	r3, r3, #3
     7a2:	f003 0204 	and.w	r2, r3, #4
     7a6:	4b65      	ldr	r3, [pc, #404]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     7a8:	4413      	add	r3, r2
     7aa:	4619      	mov	r1, r3
     7ac:	4b5f      	ldr	r3, [pc, #380]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	f003 031f 	and.w	r3, r3, #31
     7b4:	2201      	movs	r2, #1
     7b6:	fa02 f303 	lsl.w	r3, r2, r3
     7ba:	600b      	str	r3, [r1, #0]
                }

                break;
     7bc:	e0af      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
            case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                //
                // Set the override GPIO settings based on the packet
                // information.
                //
                g_sImage.ui32OverrideGPIO = pui32Packet[1];
     7be:	683b      	ldr	r3, [r7, #0]
     7c0:	685b      	ldr	r3, [r3, #4]
     7c2:	4a5c      	ldr	r2, [pc, #368]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     7c4:	60d3      	str	r3, [r2, #12]
                g_sImage.ui32OverridePolarity = pui32Packet[2];
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	689b      	ldr	r3, [r3, #8]
     7ca:	4a5a      	ldr	r2, [pc, #360]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     7cc:	6113      	str	r3, [r2, #16]

                //
                // Send back a "READY" packet.
                //
                pui32Packet[0] = AM_BOOTLOADER_READY;
     7ce:	683b      	ldr	r3, [r7, #0]
     7d0:	2202      	movs	r2, #2
     7d2:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     7d4:	4b55      	ldr	r3, [pc, #340]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7d6:	681b      	ldr	r3, [r3, #0]
     7d8:	08db      	lsrs	r3, r3, #3
     7da:	f003 0204 	and.w	r2, r3, #4
     7de:	4b57      	ldr	r3, [pc, #348]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     7e0:	4413      	add	r3, r2
     7e2:	4619      	mov	r1, r3
     7e4:	4b51      	ldr	r3, [pc, #324]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	f003 031f 	and.w	r3, r3, #31
     7ec:	2201      	movs	r2, #1
     7ee:	fa02 f303 	lsl.w	r3, r2, r3
     7f2:	600b      	str	r3, [r1, #0]
                break;
     7f4:	e093      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>

            case AM_BOOTLOADER_NEW_PACKET:
                //
                // Only take new packets if our image structure is valid.
                //
                if ( !g_bIosImageValid )
     7f6:	4b50      	ldr	r3, [pc, #320]	; (938 <am_multiboot_ios_acc_isr_handler+0x268>)
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	b2db      	uxtb	r3, r3
     7fc:	f083 0301 	eor.w	r3, r3, #1
     800:	b2db      	uxtb	r3, r3
     802:	2b00      	cmp	r3, #0
     804:	d013      	beq.n	82e <am_multiboot_ios_acc_isr_handler+0x15e>
                {
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
     806:	683b      	ldr	r3, [r7, #0]
     808:	2205      	movs	r2, #5
     80a:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     80c:	4b47      	ldr	r3, [pc, #284]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     80e:	681b      	ldr	r3, [r3, #0]
     810:	08db      	lsrs	r3, r3, #3
     812:	f003 0204 	and.w	r2, r3, #4
     816:	4b49      	ldr	r3, [pc, #292]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     818:	4413      	add	r3, r2
     81a:	4619      	mov	r1, r3
     81c:	4b43      	ldr	r3, [pc, #268]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     81e:	681b      	ldr	r3, [r3, #0]
     820:	f003 031f 	and.w	r3, r3, #31
     824:	2201      	movs	r2, #1
     826:	fa02 f303 	lsl.w	r3, r2, r3
     82a:	600b      	str	r3, [r1, #0]
                    break;
     82c:	e077      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
                // to the beginning of the actual data.
                //
                //
                // Parse the reset of the packet sitting in the IOS LRAM.
                //
                image_data_packet_read((uint8_t *)(am_hal_ios_pui8LRAM + 8),
     82e:	4b3e      	ldr	r3, [pc, #248]	; (928 <am_multiboot_ios_acc_isr_handler+0x258>)
     830:	681b      	ldr	r3, [r3, #0]
     832:	f103 0208 	add.w	r2, r3, #8
                    *((uint32_t *) (am_hal_ios_pui8LRAM + 4)));
     836:	4b3c      	ldr	r3, [pc, #240]	; (928 <am_multiboot_ios_acc_isr_handler+0x258>)
     838:	681b      	ldr	r3, [r3, #0]
     83a:	3304      	adds	r3, #4
                // to the beginning of the actual data.
                //
                //
                // Parse the reset of the packet sitting in the IOS LRAM.
                //
                image_data_packet_read((uint8_t *)(am_hal_ios_pui8LRAM + 8),
     83c:	681b      	ldr	r3, [r3, #0]
     83e:	4619      	mov	r1, r3
     840:	4610      	mov	r0, r2
     842:	f000 fc33 	bl	10ac <image_data_packet_read>
                    *((uint32_t *) (am_hal_ios_pui8LRAM + 4)));

                //
                // If this packet completed the image...
                //
                if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
     846:	4b3b      	ldr	r3, [pc, #236]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     848:	685a      	ldr	r2, [r3, #4]
     84a:	4b3d      	ldr	r3, [pc, #244]	; (940 <am_multiboot_ios_acc_isr_handler+0x270>)
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	429a      	cmp	r2, r3
     850:	d11c      	bne.n	88c <am_multiboot_ios_acc_isr_handler+0x1bc>
                {
#ifdef MULTIBOOT_SECURE
                    if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
#else
                    if ( g_ui32CRC != g_sImage.ui32CRC )
     852:	4b38      	ldr	r3, [pc, #224]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     854:	689a      	ldr	r2, [r3, #8]
     856:	4b3b      	ldr	r3, [pc, #236]	; (944 <am_multiboot_ios_acc_isr_handler+0x274>)
     858:	681b      	ldr	r3, [r3, #0]
     85a:	429a      	cmp	r2, r3
     85c:	d003      	beq.n	866 <am_multiboot_ios_acc_isr_handler+0x196>
#endif
                    {
                        pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
     85e:	683b      	ldr	r3, [r7, #0]
     860:	2204      	movs	r2, #4
     862:	601a      	str	r2, [r3, #0]
     864:	e015      	b.n	892 <am_multiboot_ios_acc_isr_handler+0x1c2>
                    }
                    else
                    {
                        // Protect (and optionally write if stored in SRAM)
                        // image in flash now as it has been validated now
                        program_image(g_sImage.bEncrypted);
     866:	4b33      	ldr	r3, [pc, #204]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     868:	69db      	ldr	r3, [r3, #28]
     86a:	4618      	mov	r0, r3
     86c:	f000 fb5c 	bl	f28 <program_image>
                        // Validate the flash contents of a boot image to make
                        // sure it's safe to run
                        if ( am_bootloader_flash_check(&g_sImage) )
     870:	4830      	ldr	r0, [pc, #192]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     872:	f7ff fc85 	bl	180 <am_bootloader_flash_check>
     876:	4603      	mov	r3, r0
     878:	2b00      	cmp	r3, #0
     87a:	d003      	beq.n	884 <am_multiboot_ios_acc_isr_handler+0x1b4>
                        {
                            pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	2203      	movs	r2, #3
     880:	601a      	str	r2, [r3, #0]
     882:	e006      	b.n	892 <am_multiboot_ios_acc_isr_handler+0x1c2>
                        }
                        else
                        {
                            pui32Packet[0] = AM_BOOTLOADER_ERROR;
     884:	683b      	ldr	r3, [r7, #0]
     886:	2205      	movs	r2, #5
     888:	601a      	str	r2, [r3, #0]
     88a:	e002      	b.n	892 <am_multiboot_ios_acc_isr_handler+0x1c2>
                {
                    //
                    // If this wasn't the end of the image, just send back a
                    // "READY" packet.
                    //
                    pui32Packet[0] = AM_BOOTLOADER_READY;
     88c:	683b      	ldr	r3, [r7, #0]
     88e:	2202      	movs	r2, #2
     890:	601a      	str	r2, [r3, #0]
                }
                //
                // Assert the interrupt line so the host knows we have a
                // message.
                //
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     892:	4b26      	ldr	r3, [pc, #152]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     894:	681b      	ldr	r3, [r3, #0]
     896:	08db      	lsrs	r3, r3, #3
     898:	f003 0204 	and.w	r2, r3, #4
     89c:	4b27      	ldr	r3, [pc, #156]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     89e:	4413      	add	r3, r2
     8a0:	4619      	mov	r1, r3
     8a2:	4b22      	ldr	r3, [pc, #136]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	f003 031f 	and.w	r3, r3, #31
     8aa:	2201      	movs	r2, #1
     8ac:	fa02 f303 	lsl.w	r3, r2, r3
     8b0:	600b      	str	r3, [r1, #0]

                break;
     8b2:	e034      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
                if ( USE_FLAG_PAGE )
                {
                    //
                    // Write the flag page.
                    //
                    am_bootloader_flag_page_update(&g_sImage, (uint32_t *)FLAG_PAGE_LOCATION);
     8b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     8b8:	481e      	ldr	r0, [pc, #120]	; (934 <am_multiboot_ios_acc_isr_handler+0x264>)
     8ba:	f7ff fe51 	bl	560 <am_bootloader_flag_page_update>

            case AM_BOOTLOADER_RESTART:
                //
                // Perform a software reset.
                //
                am_hal_reset_poi();
     8be:	f001 fed1 	bl	2664 <am_hal_reset_poi>

                //
                // Wait for the reset to take effect.
                //
                while (1);
     8c2:	e7fe      	b.n	8c2 <am_multiboot_ios_acc_isr_handler+0x1f2>

            case AM_BOOTLOADER_BL_VERSION_CMD:
                //
                // Respond with the version number.
                //
                pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
     8c4:	683b      	ldr	r3, [r7, #0]
     8c6:	2206      	movs	r2, #6
     8c8:	601a      	str	r2, [r3, #0]
                pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	3304      	adds	r3, #4
     8ce:	2201      	movs	r2, #1
     8d0:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     8d2:	4b16      	ldr	r3, [pc, #88]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	08db      	lsrs	r3, r3, #3
     8d8:	f003 0204 	and.w	r2, r3, #4
     8dc:	4b17      	ldr	r3, [pc, #92]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     8de:	4413      	add	r3, r2
     8e0:	4619      	mov	r1, r3
     8e2:	4b12      	ldr	r3, [pc, #72]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     8e4:	681b      	ldr	r3, [r3, #0]
     8e6:	f003 031f 	and.w	r3, r3, #31
     8ea:	2201      	movs	r2, #1
     8ec:	fa02 f303 	lsl.w	r3, r2, r3
     8f0:	600b      	str	r3, [r1, #0]
                break;
     8f2:	e014      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
            case AM_BOOTLOADER_NAK_CMD:
                break;

            default:
                // Error
                pui32Packet[0] = AM_BOOTLOADER_ERROR;
     8f4:	683b      	ldr	r3, [r7, #0]
     8f6:	2205      	movs	r2, #5
     8f8:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     8fa:	4b0c      	ldr	r3, [pc, #48]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     8fc:	681b      	ldr	r3, [r3, #0]
     8fe:	08db      	lsrs	r3, r3, #3
     900:	f003 0204 	and.w	r2, r3, #4
     904:	4b0d      	ldr	r3, [pc, #52]	; (93c <am_multiboot_ios_acc_isr_handler+0x26c>)
     906:	4413      	add	r3, r2
     908:	4619      	mov	r1, r3
     90a:	4b08      	ldr	r3, [pc, #32]	; (92c <am_multiboot_ios_acc_isr_handler+0x25c>)
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	f003 031f 	and.w	r3, r3, #31
     912:	2201      	movs	r2, #1
     914:	fa02 f303 	lsl.w	r3, r2, r3
     918:	600b      	str	r3, [r1, #0]
                break;
     91a:	e000      	b.n	91e <am_multiboot_ios_acc_isr_handler+0x24e>
                am_hal_gpio_out_bit_clear(g_iosIntPin);
                break;

            case AM_BOOTLOADER_ACK_CMD:
            case AM_BOOTLOADER_NAK_CMD:
                break;
     91c:	bf00      	nop
                pui32Packet[0] = AM_BOOTLOADER_ERROR;
                am_hal_gpio_out_bit_clear(g_iosIntPin);
                break;
        }
    }
}
     91e:	bf00      	nop
     920:	3708      	adds	r7, #8
     922:	46bd      	mov	sp, r7
     924:	bd80      	pop	{r7, pc}
     926:	bf00      	nop
     928:	00002ec4 	.word	0x00002ec4
     92c:	100010d4 	.word	0x100010d4
     930:	40010090 	.word	0x40010090
     934:	10001018 	.word	0x10001018
     938:	100010d8 	.word	0x100010d8
     93c:	40010098 	.word	0x40010098
     940:	100010f0 	.word	0x100010f0
     944:	100010f4 	.word	0x100010f4

00000948 <am_multiboot_setup_ios_interface>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_ios_interface(uint32_t interruptPin)
{
     948:	b590      	push	{r4, r7, lr}
     94a:	b08b      	sub	sp, #44	; 0x2c
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
    //
    // Check pin 0 to see if we should be using SPI or I2C
    //
    am_hal_gpio_pin_config(0, AM_HAL_GPIO_INPUT);
     950:	f3ef 8310 	mrs	r3, PRIMASK
     954:	627b      	str	r3, [r7, #36]	; 0x24
     956:	b672      	cpsid	i
     958:	4b35      	ldr	r3, [pc, #212]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     95a:	2273      	movs	r2, #115	; 0x73
     95c:	601a      	str	r2, [r3, #0]
     95e:	4a35      	ldr	r2, [pc, #212]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     960:	4b34      	ldr	r3, [pc, #208]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     962:	681b      	ldr	r3, [r3, #0]
     964:	f023 0307 	bic.w	r3, r3, #7
     968:	6013      	str	r3, [r2, #0]
     96a:	4a33      	ldr	r2, [pc, #204]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     96c:	4b32      	ldr	r3, [pc, #200]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     96e:	681b      	ldr	r3, [r3, #0]
     970:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     974:	f043 031a 	orr.w	r3, r3, #26
     978:	6013      	str	r3, [r2, #0]
     97a:	4a30      	ldr	r2, [pc, #192]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     97c:	4b2f      	ldr	r3, [pc, #188]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     97e:	681b      	ldr	r3, [r3, #0]
     980:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     984:	6013      	str	r3, [r2, #0]
     986:	4b2a      	ldr	r3, [pc, #168]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     988:	2200      	movs	r2, #0
     98a:	601a      	str	r2, [r3, #0]
     98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     98e:	f383 8810 	msr	PRIMASK, r3
    if ( am_hal_gpio_input_bit_read(0) )
     992:	4b2b      	ldr	r3, [pc, #172]	; (a40 <am_multiboot_setup_ios_interface+0xf8>)
     994:	681b      	ldr	r3, [r3, #0]
     996:	f003 0301 	and.w	r3, r3, #1
     99a:	2b00      	cmp	r3, #0
     99c:	d054      	beq.n	a48 <am_multiboot_setup_ios_interface+0x100>
    {
        //
        // If the clock line is high, we'll assume I2C.
        //
        am_hal_gpio_pin_config(0, AM_HAL_PIN_0_SLSCL);
     99e:	f3ef 8310 	mrs	r3, PRIMASK
     9a2:	623b      	str	r3, [r7, #32]
     9a4:	b672      	cpsid	i
     9a6:	4b22      	ldr	r3, [pc, #136]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     9a8:	2273      	movs	r2, #115	; 0x73
     9aa:	601a      	str	r2, [r3, #0]
     9ac:	4a21      	ldr	r2, [pc, #132]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     9ae:	4b21      	ldr	r3, [pc, #132]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	f023 0307 	bic.w	r3, r3, #7
     9b6:	6013      	str	r3, [r2, #0]
     9b8:	4a1f      	ldr	r2, [pc, #124]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     9ba:	4b1f      	ldr	r3, [pc, #124]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     9bc:	681b      	ldr	r3, [r3, #0]
     9be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     9c2:	f043 0302 	orr.w	r3, r3, #2
     9c6:	6013      	str	r3, [r2, #0]
     9c8:	4a1c      	ldr	r2, [pc, #112]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     9ca:	4b1c      	ldr	r3, [pc, #112]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     9d2:	6013      	str	r3, [r2, #0]
     9d4:	4b16      	ldr	r3, [pc, #88]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     9d6:	2200      	movs	r2, #0
     9d8:	601a      	str	r2, [r3, #0]
     9da:	6a3b      	ldr	r3, [r7, #32]
     9dc:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(1, AM_HAL_PIN_1_SLSDA);
     9e0:	f3ef 8310 	mrs	r3, PRIMASK
     9e4:	61fb      	str	r3, [r7, #28]
     9e6:	b672      	cpsid	i
     9e8:	4b11      	ldr	r3, [pc, #68]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     9ea:	2273      	movs	r2, #115	; 0x73
     9ec:	601a      	str	r2, [r3, #0]
     9ee:	4a11      	ldr	r2, [pc, #68]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     9f0:	4b10      	ldr	r3, [pc, #64]	; (a34 <am_multiboot_setup_ios_interface+0xec>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9fc:	6013      	str	r3, [r2, #0]
     9fe:	4a0e      	ldr	r2, [pc, #56]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     a00:	4b0d      	ldr	r3, [pc, #52]	; (a38 <am_multiboot_setup_ios_interface+0xf0>)
     a02:	681b      	ldr	r3, [r3, #0]
     a04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     a0c:	6013      	str	r3, [r2, #0]
     a0e:	4a0b      	ldr	r2, [pc, #44]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     a10:	4b0a      	ldr	r3, [pc, #40]	; (a3c <am_multiboot_setup_ios_interface+0xf4>)
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     a18:	6013      	str	r3, [r2, #0]
     a1a:	4b05      	ldr	r3, [pc, #20]	; (a30 <am_multiboot_setup_ios_interface+0xe8>)
     a1c:	2200      	movs	r2, #0
     a1e:	601a      	str	r2, [r3, #0]
     a20:	69fb      	ldr	r3, [r7, #28]
     a22:	f383 8810 	msr	PRIMASK, r3

        g_sIOSConfig.ui32InterfaceSelect = (AM_HAL_IOS_USE_I2C |
     a26:	4b07      	ldr	r3, [pc, #28]	; (a44 <am_multiboot_setup_ios_interface+0xfc>)
     a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     a2c:	601a      	str	r2, [r3, #0]
     a2e:	e092      	b.n	b56 <am_multiboot_setup_ios_interface+0x20e>
     a30:	40010060 	.word	0x40010060
     a34:	40010040 	.word	0x40010040
     a38:	40010000 	.word	0x40010000
     a3c:	400100e0 	.word	0x400100e0
     a40:	40010080 	.word	0x40010080
     a44:	10001000 	.word	0x10001000
    else
    {
        //
        // If the clock line is low, we'll assume SPI.
        //
        am_hal_gpio_pin_config(0, AM_HAL_PIN_0_SLSCK);
     a48:	f3ef 8310 	mrs	r3, PRIMASK
     a4c:	61bb      	str	r3, [r7, #24]
     a4e:	b672      	cpsid	i
     a50:	4b9a      	ldr	r3, [pc, #616]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     a52:	2273      	movs	r2, #115	; 0x73
     a54:	601a      	str	r2, [r3, #0]
     a56:	4a9a      	ldr	r2, [pc, #616]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     a58:	4b99      	ldr	r3, [pc, #612]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	f023 0307 	bic.w	r3, r3, #7
     a60:	6013      	str	r3, [r2, #0]
     a62:	4a98      	ldr	r2, [pc, #608]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     a64:	4b97      	ldr	r3, [pc, #604]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     a6c:	f043 030a 	orr.w	r3, r3, #10
     a70:	6013      	str	r3, [r2, #0]
     a72:	4a95      	ldr	r2, [pc, #596]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     a74:	4b94      	ldr	r3, [pc, #592]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     a76:	681b      	ldr	r3, [r3, #0]
     a78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     a7c:	6013      	str	r3, [r2, #0]
     a7e:	4b8f      	ldr	r3, [pc, #572]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     a80:	2200      	movs	r2, #0
     a82:	601a      	str	r2, [r3, #0]
     a84:	69bb      	ldr	r3, [r7, #24]
     a86:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(1, AM_HAL_PIN_1_SLMISO);
     a8a:	f3ef 8310 	mrs	r3, PRIMASK
     a8e:	617b      	str	r3, [r7, #20]
     a90:	b672      	cpsid	i
     a92:	4b8a      	ldr	r3, [pc, #552]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     a94:	2273      	movs	r2, #115	; 0x73
     a96:	601a      	str	r2, [r3, #0]
     a98:	4a89      	ldr	r2, [pc, #548]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     a9a:	4b89      	ldr	r3, [pc, #548]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     aa2:	6013      	str	r3, [r2, #0]
     aa4:	4a87      	ldr	r2, [pc, #540]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     aa6:	4b87      	ldr	r3, [pc, #540]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     ab2:	6013      	str	r3, [r2, #0]
     ab4:	4a84      	ldr	r2, [pc, #528]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     ab6:	4b84      	ldr	r3, [pc, #528]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     abe:	6013      	str	r3, [r2, #0]
     ac0:	4b7e      	ldr	r3, [pc, #504]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     ac2:	2200      	movs	r2, #0
     ac4:	601a      	str	r2, [r3, #0]
     ac6:	697b      	ldr	r3, [r7, #20]
     ac8:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(2, AM_HAL_PIN_2_SLMOSI);
     acc:	f3ef 8310 	mrs	r3, PRIMASK
     ad0:	613b      	str	r3, [r7, #16]
     ad2:	b672      	cpsid	i
     ad4:	4b79      	ldr	r3, [pc, #484]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     ad6:	2273      	movs	r2, #115	; 0x73
     ad8:	601a      	str	r2, [r3, #0]
     ada:	4a79      	ldr	r2, [pc, #484]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     adc:	4b78      	ldr	r3, [pc, #480]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     ade:	681b      	ldr	r3, [r3, #0]
     ae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     ae4:	6013      	str	r3, [r2, #0]
     ae6:	4a77      	ldr	r2, [pc, #476]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     ae8:	4b76      	ldr	r3, [pc, #472]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     af0:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     af4:	6013      	str	r3, [r2, #0]
     af6:	4a74      	ldr	r2, [pc, #464]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     af8:	4b73      	ldr	r3, [pc, #460]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     afa:	681b      	ldr	r3, [r3, #0]
     afc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     b00:	6013      	str	r3, [r2, #0]
     b02:	4b6e      	ldr	r3, [pc, #440]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     b04:	2200      	movs	r2, #0
     b06:	601a      	str	r2, [r3, #0]
     b08:	693b      	ldr	r3, [r7, #16]
     b0a:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(3, AM_HAL_PIN_3_SLnCE);
     b0e:	f3ef 8310 	mrs	r3, PRIMASK
     b12:	60fb      	str	r3, [r7, #12]
     b14:	b672      	cpsid	i
     b16:	4b69      	ldr	r3, [pc, #420]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     b18:	2273      	movs	r2, #115	; 0x73
     b1a:	601a      	str	r2, [r3, #0]
     b1c:	4a68      	ldr	r2, [pc, #416]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     b1e:	4b68      	ldr	r3, [pc, #416]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     b20:	681b      	ldr	r3, [r3, #0]
     b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     b26:	6013      	str	r3, [r2, #0]
     b28:	4a66      	ldr	r2, [pc, #408]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     b2a:	4b66      	ldr	r3, [pc, #408]	; (cc4 <am_multiboot_setup_ios_interface+0x37c>)
     b2c:	681b      	ldr	r3, [r3, #0]
     b2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b32:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
     b36:	6013      	str	r3, [r2, #0]
     b38:	4a63      	ldr	r2, [pc, #396]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     b3a:	4b63      	ldr	r3, [pc, #396]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b42:	6013      	str	r3, [r2, #0]
     b44:	4b5d      	ldr	r3, [pc, #372]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     b46:	2200      	movs	r2, #0
     b48:	601a      	str	r2, [r3, #0]
     b4a:	68fb      	ldr	r3, [r7, #12]
     b4c:	f383 8810 	msr	PRIMASK, r3

        g_sIOSConfig.ui32InterfaceSelect = AM_HAL_IOS_USE_SPI;
     b50:	4b5e      	ldr	r3, [pc, #376]	; (ccc <am_multiboot_setup_ios_interface+0x384>)
     b52:	2201      	movs	r2, #1
     b54:	601a      	str	r2, [r3, #0]
    }

    //
    // Configure the IOS interface and LRAM structure.
    //
    am_hal_ios_config(&g_sIOSConfig);
     b56:	485d      	ldr	r0, [pc, #372]	; (ccc <am_multiboot_setup_ios_interface+0x384>)
     b58:	f001 fbce 	bl	22f8 <am_hal_ios_config>
    g_iosIntPin = interruptPin;
     b5c:	4a5c      	ldr	r2, [pc, #368]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	6013      	str	r3, [r2, #0]

    //
    // Make sure the interrupt pin is set up correctly
    //
    am_hal_gpio_out_bit_set(g_iosIntPin);
     b62:	4b5b      	ldr	r3, [pc, #364]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	08db      	lsrs	r3, r3, #3
     b68:	f003 0204 	and.w	r2, r3, #4
     b6c:	4b59      	ldr	r3, [pc, #356]	; (cd4 <am_multiboot_setup_ios_interface+0x38c>)
     b6e:	4413      	add	r3, r2
     b70:	4619      	mov	r1, r3
     b72:	4b57      	ldr	r3, [pc, #348]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     b74:	681b      	ldr	r3, [r3, #0]
     b76:	f003 031f 	and.w	r3, r3, #31
     b7a:	2201      	movs	r2, #1
     b7c:	fa02 f303 	lsl.w	r3, r2, r3
     b80:	600b      	str	r3, [r1, #0]
    am_hal_gpio_pin_config(g_iosIntPin, AM_HAL_PIN_OUTPUT);
     b82:	4b53      	ldr	r3, [pc, #332]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	2b31      	cmp	r3, #49	; 0x31
     b88:	d86d      	bhi.n	c66 <am_multiboot_setup_ios_interface+0x31e>
     b8a:	f3ef 8310 	mrs	r3, PRIMASK
     b8e:	60bb      	str	r3, [r7, #8]
     b90:	b672      	cpsid	i
     b92:	4b4a      	ldr	r3, [pc, #296]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     b94:	2273      	movs	r2, #115	; 0x73
     b96:	601a      	str	r2, [r3, #0]
     b98:	4b4d      	ldr	r3, [pc, #308]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	085b      	lsrs	r3, r3, #1
     b9e:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     ba2:	4b47      	ldr	r3, [pc, #284]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     ba4:	4413      	add	r3, r2
     ba6:	461c      	mov	r4, r3
     ba8:	4b49      	ldr	r3, [pc, #292]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	009b      	lsls	r3, r3, #2
     bae:	f003 031c 	and.w	r3, r3, #28
     bb2:	2202      	movs	r2, #2
     bb4:	409a      	lsls	r2, r3
     bb6:	4b46      	ldr	r3, [pc, #280]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	085b      	lsrs	r3, r3, #1
     bbc:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     bc0:	4b3f      	ldr	r3, [pc, #252]	; (cc0 <am_multiboot_setup_ios_interface+0x378>)
     bc2:	440b      	add	r3, r1
     bc4:	6819      	ldr	r1, [r3, #0]
     bc6:	4b42      	ldr	r3, [pc, #264]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	009b      	lsls	r3, r3, #2
     bcc:	f003 031c 	and.w	r3, r3, #28
     bd0:	2007      	movs	r0, #7
     bd2:	fa00 f303 	lsl.w	r3, r0, r3
     bd6:	43db      	mvns	r3, r3
     bd8:	400b      	ands	r3, r1
     bda:	4313      	orrs	r3, r2
     bdc:	6023      	str	r3, [r4, #0]
     bde:	4b3c      	ldr	r3, [pc, #240]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     be6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     bea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     bee:	461c      	mov	r4, r3
     bf0:	4b37      	ldr	r3, [pc, #220]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	00db      	lsls	r3, r3, #3
     bf6:	f003 0318 	and.w	r3, r3, #24
     bfa:	2218      	movs	r2, #24
     bfc:	409a      	lsls	r2, r3
     bfe:	4b34      	ldr	r3, [pc, #208]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     c06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     c0a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     c0e:	6819      	ldr	r1, [r3, #0]
     c10:	4b2f      	ldr	r3, [pc, #188]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	00db      	lsls	r3, r3, #3
     c16:	f003 0318 	and.w	r3, r3, #24
     c1a:	20ff      	movs	r0, #255	; 0xff
     c1c:	fa00 f303 	lsl.w	r3, r0, r3
     c20:	43db      	mvns	r3, r3
     c22:	400b      	ands	r3, r1
     c24:	4313      	orrs	r3, r2
     c26:	6023      	str	r3, [r4, #0]
     c28:	4b29      	ldr	r3, [pc, #164]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     c30:	4b25      	ldr	r3, [pc, #148]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     c32:	4413      	add	r3, r2
     c34:	4618      	mov	r0, r3
     c36:	4b26      	ldr	r3, [pc, #152]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     c3e:	4b22      	ldr	r3, [pc, #136]	; (cc8 <am_multiboot_setup_ios_interface+0x380>)
     c40:	4413      	add	r3, r2
     c42:	681a      	ldr	r2, [r3, #0]
     c44:	4b22      	ldr	r3, [pc, #136]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	00db      	lsls	r3, r3, #3
     c4a:	f003 0318 	and.w	r3, r3, #24
     c4e:	21ff      	movs	r1, #255	; 0xff
     c50:	fa01 f303 	lsl.w	r3, r1, r3
     c54:	43db      	mvns	r3, r3
     c56:	4013      	ands	r3, r2
     c58:	6003      	str	r3, [r0, #0]
     c5a:	4b18      	ldr	r3, [pc, #96]	; (cbc <am_multiboot_setup_ios_interface+0x374>)
     c5c:	2200      	movs	r2, #0
     c5e:	601a      	str	r2, [r3, #0]
     c60:	68bb      	ldr	r3, [r7, #8]
     c62:	f383 8810 	msr	PRIMASK, r3

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     c66:	f04f 30ff 	mov.w	r0, #4294967295
     c6a:	f001 fb9f 	bl	23ac <am_hal_ios_access_int_clear>
    am_hal_ios_access_int_enable(AM_HAL_IOS_ACCESS_INT_03);
     c6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     c72:	f001 fb93 	bl	239c <am_hal_ios_access_int_enable>

    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     c76:	f04f 30ff 	mov.w	r0, #4294967295
     c7a:	f001 fbb3 	bl	23e4 <am_hal_ios_int_clear>
    am_hal_ios_int_enable(AM_HAL_IOS_INT_FSIZE);
     c7e:	2001      	movs	r0, #1
     c80:	f001 fba8 	bl	23d4 <am_hal_ios_int_enable>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     c84:	2015      	movs	r0, #21
     c86:	f001 fadb 	bl	2240 <am_hal_interrupt_enable>
//    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);

    //
    // Notify the host that we're ready to receive data.
    //
    *((uint32_t *) am_hal_ios_pui8LRAM) = AM_BOOTLOADER_READY;
     c8a:	4b13      	ldr	r3, [pc, #76]	; (cd8 <am_multiboot_setup_ios_interface+0x390>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	2202      	movs	r2, #2
     c90:	601a      	str	r2, [r3, #0]
    am_hal_gpio_out_bit_clear(g_iosIntPin);
     c92:	4b0f      	ldr	r3, [pc, #60]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	08db      	lsrs	r3, r3, #3
     c98:	f003 0204 	and.w	r2, r3, #4
     c9c:	4b0f      	ldr	r3, [pc, #60]	; (cdc <am_multiboot_setup_ios_interface+0x394>)
     c9e:	4413      	add	r3, r2
     ca0:	4619      	mov	r1, r3
     ca2:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <am_multiboot_setup_ios_interface+0x388>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	f003 031f 	and.w	r3, r3, #31
     caa:	2201      	movs	r2, #1
     cac:	fa02 f303 	lsl.w	r3, r2, r3
     cb0:	600b      	str	r3, [r1, #0]
}
     cb2:	bf00      	nop
     cb4:	372c      	adds	r7, #44	; 0x2c
     cb6:	46bd      	mov	sp, r7
     cb8:	bd90      	pop	{r4, r7, pc}
     cba:	bf00      	nop
     cbc:	40010060 	.word	0x40010060
     cc0:	40010040 	.word	0x40010040
     cc4:	40010000 	.word	0x40010000
     cc8:	400100e0 	.word	0x400100e0
     ccc:	10001000 	.word	0x10001000
     cd0:	100010d4 	.word	0x100010d4
     cd4:	40010090 	.word	0x40010090
     cd8:	00002ec4 	.word	0x00002ec4
     cdc:	40010098 	.word	0x40010098

00000ce0 <am_multiboot_cleanup_ios_interface>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_cleanup_ios_interface(void)
{
     ce0:	b480      	push	{r7}
     ce2:	b085      	sub	sp, #20
     ce4:	af00      	add	r7, sp, #0
    am_hal_gpio_pin_config(0, AM_HAL_PIN_DISABLE);
     ce6:	f3ef 8310 	mrs	r3, PRIMASK
     cea:	60fb      	str	r3, [r7, #12]
     cec:	b672      	cpsid	i
     cee:	4b43      	ldr	r3, [pc, #268]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     cf0:	2273      	movs	r2, #115	; 0x73
     cf2:	601a      	str	r2, [r3, #0]
     cf4:	4a42      	ldr	r2, [pc, #264]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     cf6:	4b42      	ldr	r3, [pc, #264]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	f023 0307 	bic.w	r3, r3, #7
     cfe:	6013      	str	r3, [r2, #0]
     d00:	4a40      	ldr	r2, [pc, #256]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d02:	4b40      	ldr	r3, [pc, #256]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     d0a:	f043 0318 	orr.w	r3, r3, #24
     d0e:	6013      	str	r3, [r2, #0]
     d10:	4a3d      	ldr	r2, [pc, #244]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d12:	4b3d      	ldr	r3, [pc, #244]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     d1a:	6013      	str	r3, [r2, #0]
     d1c:	4b37      	ldr	r3, [pc, #220]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     d1e:	2200      	movs	r2, #0
     d20:	601a      	str	r2, [r3, #0]
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(1, AM_HAL_PIN_DISABLE);
     d28:	f3ef 8310 	mrs	r3, PRIMASK
     d2c:	60bb      	str	r3, [r7, #8]
     d2e:	b672      	cpsid	i
     d30:	4b32      	ldr	r3, [pc, #200]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     d32:	2273      	movs	r2, #115	; 0x73
     d34:	601a      	str	r2, [r3, #0]
     d36:	4a32      	ldr	r2, [pc, #200]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     d38:	4b31      	ldr	r3, [pc, #196]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     d40:	6013      	str	r3, [r2, #0]
     d42:	4a30      	ldr	r2, [pc, #192]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d44:	4b2f      	ldr	r3, [pc, #188]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     d4c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     d50:	6013      	str	r3, [r2, #0]
     d52:	4a2d      	ldr	r2, [pc, #180]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d54:	4b2c      	ldr	r3, [pc, #176]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     d5c:	6013      	str	r3, [r2, #0]
     d5e:	4b27      	ldr	r3, [pc, #156]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     d60:	2200      	movs	r2, #0
     d62:	601a      	str	r2, [r3, #0]
     d64:	68bb      	ldr	r3, [r7, #8]
     d66:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(2, AM_HAL_PIN_DISABLE);
     d6a:	f3ef 8310 	mrs	r3, PRIMASK
     d6e:	607b      	str	r3, [r7, #4]
     d70:	b672      	cpsid	i
     d72:	4b22      	ldr	r3, [pc, #136]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     d74:	2273      	movs	r2, #115	; 0x73
     d76:	601a      	str	r2, [r3, #0]
     d78:	4a21      	ldr	r2, [pc, #132]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     d7a:	4b21      	ldr	r3, [pc, #132]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     d82:	6013      	str	r3, [r2, #0]
     d84:	4a1f      	ldr	r2, [pc, #124]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d86:	4b1f      	ldr	r3, [pc, #124]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     d8e:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     d92:	6013      	str	r3, [r2, #0]
     d94:	4a1c      	ldr	r2, [pc, #112]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d96:	4b1c      	ldr	r3, [pc, #112]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     d9e:	6013      	str	r3, [r2, #0]
     da0:	4b16      	ldr	r3, [pc, #88]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     da2:	2200      	movs	r2, #0
     da4:	601a      	str	r2, [r3, #0]
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(3, AM_HAL_PIN_DISABLE);
     dac:	f3ef 8310 	mrs	r3, PRIMASK
     db0:	603b      	str	r3, [r7, #0]
     db2:	b672      	cpsid	i
     db4:	4b11      	ldr	r3, [pc, #68]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     db6:	2273      	movs	r2, #115	; 0x73
     db8:	601a      	str	r2, [r3, #0]
     dba:	4a11      	ldr	r2, [pc, #68]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     dbc:	4b10      	ldr	r3, [pc, #64]	; (e00 <am_multiboot_cleanup_ios_interface+0x120>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     dc4:	6013      	str	r3, [r2, #0]
     dc6:	4a0f      	ldr	r2, [pc, #60]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     dc8:	4b0e      	ldr	r3, [pc, #56]	; (e04 <am_multiboot_cleanup_ios_interface+0x124>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     dd0:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     dd4:	6013      	str	r3, [r2, #0]
     dd6:	4a0c      	ldr	r2, [pc, #48]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     dd8:	4b0b      	ldr	r3, [pc, #44]	; (e08 <am_multiboot_cleanup_ios_interface+0x128>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     de0:	6013      	str	r3, [r2, #0]
     de2:	4b06      	ldr	r3, [pc, #24]	; (dfc <am_multiboot_cleanup_ios_interface+0x11c>)
     de4:	2200      	movs	r2, #0
     de6:	601a      	str	r2, [r3, #0]
     de8:	683b      	ldr	r3, [r7, #0]
     dea:	f383 8810 	msr	PRIMASK, r3
}
     dee:	bf00      	nop
     df0:	3714      	adds	r7, #20
     df2:	46bd      	mov	sp, r7
     df4:	f85d 7b04 	ldr.w	r7, [sp], #4
     df8:	4770      	bx	lr
     dfa:	bf00      	nop
     dfc:	40010060 	.word	0x40010060
     e00:	40010040 	.word	0x40010040
     e04:	40010000 	.word	0x40010000
     e08:	400100e0 	.word	0x400100e0

00000e0c <check_flash_address_range>:

// Checks that the address does not overlap with bootloader or flag page
// It also checks that the address is inside the internal flash
static bool
check_flash_address_range(uint32_t address, uint32_t size)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b090      	sub	sp, #64	; 0x40
     e10:	af00      	add	r7, sp, #0
     e12:	6078      	str	r0, [r7, #4]
     e14:	6039      	str	r1, [r7, #0]
    static uint32_t g_intFlashSize = 0;
    am_hal_mcuctrl_device_t sDevice;

    uint32_t ui32Start = address;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t ui32End = address + size - 1 ;
     e1a:	687a      	ldr	r2, [r7, #4]
     e1c:	683b      	ldr	r3, [r7, #0]
     e1e:	4413      	add	r3, r2
     e20:	3b01      	subs	r3, #1
     e22:	63bb      	str	r3, [r7, #56]	; 0x38

    if (g_intFlashSize == 0) // First call
     e24:	4b19      	ldr	r3, [pc, #100]	; (e8c <check_flash_address_range+0x80>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	2b00      	cmp	r3, #0
     e2a:	d107      	bne.n	e3c <check_flash_address_range+0x30>
    {
        // Get chip specific info
        am_hal_mcuctrl_device_info_get(&sDevice);
     e2c:	f107 0308 	add.w	r3, r7, #8
     e30:	4618      	mov	r0, r3
     e32:	f001 fadd 	bl	23f0 <am_hal_mcuctrl_device_info_get>
        g_intFlashSize = sDevice.ui32FlashSize;
     e36:	6a3b      	ldr	r3, [r7, #32]
     e38:	4a14      	ldr	r2, [pc, #80]	; (e8c <check_flash_address_range+0x80>)
     e3a:	6013      	str	r3, [r2, #0]
    // Make sure the address is within flash.
    //
    //
    // Check to make sure address is not within bootloader program
    //
    if ( ui32Start < MAX_BOOTLOADER_SIZE )
     e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
     e42:	d201      	bcs.n	e48 <check_flash_address_range+0x3c>
    {
        return false;
     e44:	2300      	movs	r3, #0
     e46:	e01d      	b.n	e84 <check_flash_address_range+0x78>
    }
    // Check to make sure the address is not beyond the flash
    if (ui32End >= g_intFlashSize)
     e48:	4b10      	ldr	r3, [pc, #64]	; (e8c <check_flash_address_range+0x80>)
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e4e:	429a      	cmp	r2, r3
     e50:	d301      	bcc.n	e56 <check_flash_address_range+0x4a>
    {
        return false;
     e52:	2300      	movs	r3, #0
     e54:	e016      	b.n	e84 <check_flash_address_range+0x78>
    if ( USE_FLAG_PAGE )
    {
        //
        // Check to make sure address is not in the flag page
        //
        if ( (FLAG_PAGE_LOCATION == ui32Start) ||
     e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     e5c:	d00f      	beq.n	e7e <check_flash_address_range+0x72>
     e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     e64:	d903      	bls.n	e6e <check_flash_address_range+0x62>
             ((FLAG_PAGE_LOCATION < ui32Start) &&
     e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     e6c:	d307      	bcc.n	e7e <check_flash_address_range+0x72>
                ((FLAG_PAGE_LOCATION + AM_HAL_FLASH_PAGE_SIZE) > ui32Start)) ||
     e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     e74:	d205      	bcs.n	e82 <check_flash_address_range+0x76>
            ((FLAG_PAGE_LOCATION > ui32Start) &&
     e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     e7c:	d301      	bcc.n	e82 <check_flash_address_range+0x76>
                (FLAG_PAGE_LOCATION <= ui32End))
           )
        {
            return false;
     e7e:	2300      	movs	r3, #0
     e80:	e000      	b.n	e84 <check_flash_address_range+0x78>
        }
    }
    return true;
     e82:	2301      	movs	r3, #1
}
     e84:	4618      	mov	r0, r3
     e86:	3740      	adds	r7, #64	; 0x40
     e88:	46bd      	mov	sp, r7
     e8a:	bd80      	pop	{r7, pc}
     e8c:	100010f8 	.word	0x100010f8

00000e90 <am_multiboot_flash_read_page>:
// Internal Flash handler wrapper
//
//*****************************************************************************
static int
am_multiboot_flash_read_page(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length)
{
     e90:	b580      	push	{r7, lr}
     e92:	b084      	sub	sp, #16
     e94:	af00      	add	r7, sp, #0
     e96:	60f8      	str	r0, [r7, #12]
     e98:	60b9      	str	r1, [r7, #8]
     e9a:	607a      	str	r2, [r7, #4]
    if (check_flash_address_range((uint32_t)pSrc, ui32Length))
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	6879      	ldr	r1, [r7, #4]
     ea0:	4618      	mov	r0, r3
     ea2:	f7ff ffb3 	bl	e0c <check_flash_address_range>
     ea6:	4603      	mov	r3, r0
     ea8:	2b00      	cmp	r3, #0
     eaa:	d007      	beq.n	ebc <am_multiboot_flash_read_page+0x2c>
    {
        memcpy((uint8_t *)ui32DestAddr, (uint8_t *)pSrc, ui32Length);
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	687a      	ldr	r2, [r7, #4]
     eb0:	68b9      	ldr	r1, [r7, #8]
     eb2:	4618      	mov	r0, r3
     eb4:	f001 fdd2 	bl	2a5c <memcpy>
        return 0;
     eb8:	2300      	movs	r3, #0
     eba:	e001      	b.n	ec0 <am_multiboot_flash_read_page+0x30>
    }
    else
    {
        return -1;
     ebc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     ec0:	4618      	mov	r0, r3
     ec2:	3710      	adds	r7, #16
     ec4:	46bd      	mov	sp, r7
     ec6:	bd80      	pop	{r7, pc}

00000ec8 <am_multiboot_flash_write_page>:

static int
am_multiboot_flash_write_page(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length)
{
     ec8:	b580      	push	{r7, lr}
     eca:	b084      	sub	sp, #16
     ecc:	af00      	add	r7, sp, #0
     ece:	60f8      	str	r0, [r7, #12]
     ed0:	60b9      	str	r1, [r7, #8]
     ed2:	607a      	str	r2, [r7, #4]
    if (check_flash_address_range(ui32DestAddr, ui32Length))
     ed4:	6879      	ldr	r1, [r7, #4]
     ed6:	68f8      	ldr	r0, [r7, #12]
     ed8:	f7ff ff98 	bl	e0c <check_flash_address_range>
     edc:	4603      	mov	r3, r0
     ede:	2b00      	cmp	r3, #0
     ee0:	d006      	beq.n	ef0 <am_multiboot_flash_write_page+0x28>
    {
        am_bootloader_program_flash_page(ui32DestAddr, pSrc, ui32Length);
     ee2:	687a      	ldr	r2, [r7, #4]
     ee4:	68b9      	ldr	r1, [r7, #8]
     ee6:	68f8      	ldr	r0, [r7, #12]
     ee8:	f7ff fba6 	bl	638 <am_bootloader_program_flash_page>
        return 0;
     eec:	2300      	movs	r3, #0
     eee:	e001      	b.n	ef4 <am_multiboot_flash_write_page+0x2c>
    }
    else
    {
        return -1;
     ef0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     ef4:	4618      	mov	r0, r3
     ef6:	3710      	adds	r7, #16
     ef8:	46bd      	mov	sp, r7
     efa:	bd80      	pop	{r7, pc}

00000efc <am_multiboot_flash_erase_page>:


static int am_multiboot_flash_erase_page(uint32_t ui32DestAddr)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
    if (check_flash_address_range(ui32DestAddr, 4))
     f04:	2104      	movs	r1, #4
     f06:	6878      	ldr	r0, [r7, #4]
     f08:	f7ff ff80 	bl	e0c <check_flash_address_range>
     f0c:	4603      	mov	r3, r0
     f0e:	2b00      	cmp	r3, #0
     f10:	d004      	beq.n	f1c <am_multiboot_flash_erase_page+0x20>
    {
        am_bootloader_erase_flash_page(ui32DestAddr);
     f12:	6878      	ldr	r0, [r7, #4]
     f14:	f7ff fb58 	bl	5c8 <am_bootloader_erase_flash_page>
        return 0;
     f18:	2300      	movs	r3, #0
     f1a:	e001      	b.n	f20 <am_multiboot_flash_erase_page+0x24>
    }
    else
    {
        return -1;
     f1c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     f20:	4618      	mov	r0, r3
     f22:	3708      	adds	r7, #8
     f24:	46bd      	mov	sp, r7
     f26:	bd80      	pop	{r7, pc}

00000f28 <program_image>:
#endif

// Programs the flash based on g_am_multiboot.pui32WriteAddress, g_am_multiboot.pui8RxBuffer & g_am_multiboot.ui32BytesInBuffer
void
program_image(uint32_t bEncrypted)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b086      	sub	sp, #24
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
    uint32_t ui32WriteAddr = (uint32_t)g_am_multiboot.pui32WriteAddress;
     f30:	4b18      	ldr	r3, [pc, #96]	; (f94 <program_image+0x6c>)
     f32:	691b      	ldr	r3, [r3, #16]
     f34:	617b      	str	r3, [r7, #20]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
     f36:	4b17      	ldr	r3, [pc, #92]	; (f94 <program_image+0x6c>)
     f38:	685b      	ldr	r3, [r3, #4]
     f3a:	613b      	str	r3, [r7, #16]
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;
     f3c:	4b15      	ldr	r3, [pc, #84]	; (f94 <program_image+0x6c>)
     f3e:	689b      	ldr	r3, [r3, #8]
     f40:	60fb      	str	r3, [r7, #12]

    if ( g_am_multiboot.bStoreInSRAM )
     f42:	4b14      	ldr	r3, [pc, #80]	; (f94 <program_image+0x6c>)
     f44:	7b1b      	ldrb	r3, [r3, #12]
     f46:	2b00      	cmp	r3, #0
     f48:	d020      	beq.n	f8c <program_image+0x64>
    {
        while ( ui32NumBytes )
     f4a:	e01a      	b.n	f82 <program_image+0x5a>
        {
            am_bootloader_program_flash_page(ui32WriteAddr, pui32ReadAddr,
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     f52:	bf28      	it	cs
     f54:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
     f58:	461a      	mov	r2, r3
     f5a:	6939      	ldr	r1, [r7, #16]
     f5c:	6978      	ldr	r0, [r7, #20]
     f5e:	f7ff fb6b 	bl	638 <am_bootloader_program_flash_page>
                (ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE) ? AM_HAL_FLASH_PAGE_SIZE: ui32NumBytes);
            if ( ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE )
     f62:	68fb      	ldr	r3, [r7, #12]
     f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     f68:	d90f      	bls.n	f8a <program_image+0x62>
            {
                ui32NumBytes -= AM_HAL_FLASH_PAGE_SIZE;
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     f70:	60fb      	str	r3, [r7, #12]
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
     f72:	697b      	ldr	r3, [r7, #20]
     f74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     f78:	617b      	str	r3, [r7, #20]
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
     f7a:	693b      	ldr	r3, [r7, #16]
     f7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     f80:	613b      	str	r3, [r7, #16]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;

    if ( g_am_multiboot.bStoreInSRAM )
    {
        while ( ui32NumBytes )
     f82:	68fb      	ldr	r3, [r7, #12]
     f84:	2b00      	cmp	r3, #0
     f86:	d1e1      	bne.n	f4c <program_image+0x24>
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     f88:	e000      	b.n	f8c <program_image+0x64>
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
            }
            else
            {
                break;
     f8a:	bf00      	nop
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     f8c:	bf00      	nop
     f8e:	3718      	adds	r7, #24
     f90:	46bd      	mov	sp, r7
     f92:	bd80      	pop	{r7, pc}
     f94:	100010dc 	.word	0x100010dc

00000f98 <am_multiboot_init>:
//! @return true if the parameters are acceptable.
//
//*****************************************************************************
bool
am_multiboot_init(uint32_t *pBuf, uint32_t bufSize)
{
     f98:	b480      	push	{r7}
     f9a:	b085      	sub	sp, #20
     f9c:	af00      	add	r7, sp, #0
     f9e:	6078      	str	r0, [r7, #4]
     fa0:	6039      	str	r1, [r7, #0]
    bool ret = false;
     fa2:	2300      	movs	r3, #0
     fa4:	73fb      	strb	r3, [r7, #15]
    if (pBuf && (bufSize >= AM_HAL_FLASH_PAGE_SIZE))
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	2b00      	cmp	r3, #0
     faa:	d008      	beq.n	fbe <am_multiboot_init+0x26>
     fac:	683b      	ldr	r3, [r7, #0]
     fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     fb2:	d304      	bcc.n	fbe <am_multiboot_init+0x26>
    {
        g_am_multiboot.pui32UserBuf = pBuf;
     fb4:	4a05      	ldr	r2, [pc, #20]	; (fcc <am_multiboot_init+0x34>)
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	6013      	str	r3, [r2, #0]
        ret = true;
     fba:	2301      	movs	r3, #1
     fbc:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
     fbe:	7bfb      	ldrb	r3, [r7, #15]
}
     fc0:	4618      	mov	r0, r3
     fc2:	3714      	adds	r7, #20
     fc4:	46bd      	mov	sp, r7
     fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     fca:	4770      	bx	lr
     fcc:	100010dc 	.word	0x100010dc

00000fd0 <image_start_packet_read>:
//! @return true if the image parameters are acceptable.
//
//*****************************************************************************
bool
image_start_packet_read(am_bootloader_image_t *psImage, uint32_t *pui32Packet)
{
     fd0:	b580      	push	{r7, lr}
     fd2:	b08e      	sub	sp, #56	; 0x38
     fd4:	af00      	add	r7, sp, #0
     fd6:	6078      	str	r0, [r7, #4]
     fd8:	6039      	str	r1, [r7, #0]
    am_hal_mcuctrl_device_t sDevice;

    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     fda:	f107 0308 	add.w	r3, r7, #8
     fde:	4618      	mov	r0, r3
     fe0:	f001 fa06 	bl	23f0 <am_hal_mcuctrl_device_info_get>

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = (uint32_t *)(pui32Packet[1]);
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	3304      	adds	r3, #4
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	461a      	mov	r2, r3
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pui32Packet[2];
     ff0:	683b      	ldr	r3, [r7, #0]
     ff2:	689a      	ldr	r2, [r3, #8]
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pui32Packet[3];
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	68da      	ldr	r2, [r3, #12]
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	2212      	movs	r2, #18
    1004:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	2200      	movs	r2, #0
    100a:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	2200      	movs	r2, #0
    1010:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	2200      	movs	r2, #0
    1016:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2200      	movs	r2, #0
    101c:	619a      	str	r2, [r3, #24]

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)psImage->pui32LinkAddress,
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	461a      	mov	r2, r3
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	4619      	mov	r1, r3
    102a:	4610      	mov	r0, r2
    102c:	f7ff feee 	bl	e0c <check_flash_address_range>
    1030:	4603      	mov	r3, r0
    1032:	f083 0301 	eor.w	r3, r3, #1
    1036:	b2db      	uxtb	r3, r3
    1038:	2b00      	cmp	r3, #0
    103a:	d001      	beq.n	1040 <image_start_packet_read+0x70>
            psImage->ui32NumBytes))
    {
        return false;
    103c:	2300      	movs	r3, #0
    103e:	e028      	b.n	1092 <image_start_packet_read+0xc2>
    }
    // Determine if we can gather image in SRAM completely before flashing all at once
    // This implementation uses the excess SRAM available in the system
    // CAUTION!!!: For this to work it is essential that the unused SRAM banks are
    // not powered down
    if ((sDevice.ui32SRAMSize - MAX_SRAM_USED) >= psImage->ui32NumBytes)
    1040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1042:	f5a3 42c0 	sub.w	r2, r3, #24576	; 0x6000
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	429a      	cmp	r2, r3
    104c:	d306      	bcc.n	105c <image_start_packet_read+0x8c>
    {
        g_am_multiboot.bStoreInSRAM = 1;
    104e:	4b13      	ldr	r3, [pc, #76]	; (109c <image_start_packet_read+0xcc>)
    1050:	2201      	movs	r2, #1
    1052:	731a      	strb	r2, [r3, #12]
        g_am_multiboot.pui8RxBuffer = (uint8_t *)(SRAM_BASEADDR + MAX_SRAM_USED);
    1054:	4b11      	ldr	r3, [pc, #68]	; (109c <image_start_packet_read+0xcc>)
    1056:	4a12      	ldr	r2, [pc, #72]	; (10a0 <image_start_packet_read+0xd0>)
    1058:	605a      	str	r2, [r3, #4]
    105a:	e00c      	b.n	1076 <image_start_packet_read+0xa6>
        g_am_multiboot.ui32SramBytesUsed = sDevice.ui32SRAMSize;
#endif
    }
    else
    {
        g_am_multiboot.bStoreInSRAM = 0;
    105c:	4b0f      	ldr	r3, [pc, #60]	; (109c <image_start_packet_read+0xcc>)
    105e:	2200      	movs	r2, #0
    1060:	731a      	strb	r2, [r3, #12]
        if (g_am_multiboot.pui32UserBuf == NULL)
    1062:	4b0e      	ldr	r3, [pc, #56]	; (109c <image_start_packet_read+0xcc>)
    1064:	681b      	ldr	r3, [r3, #0]
    1066:	2b00      	cmp	r3, #0
    1068:	d101      	bne.n	106e <image_start_packet_read+0x9e>
        {
            return false;
    106a:	2300      	movs	r3, #0
    106c:	e011      	b.n	1092 <image_start_packet_read+0xc2>
        }
        g_am_multiboot.pui8RxBuffer = (uint8_t *)g_am_multiboot.pui32UserBuf;
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <image_start_packet_read+0xcc>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	4a0a      	ldr	r2, [pc, #40]	; (109c <image_start_packet_read+0xcc>)
    1074:	6053      	str	r3, [r2, #4]
#endif
    //
    // Otherwise, the image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	4a08      	ldr	r2, [pc, #32]	; (109c <image_start_packet_read+0xcc>)
    107c:	6113      	str	r3, [r2, #16]
    g_ui32BytesReceived = 0;
    107e:	4b09      	ldr	r3, [pc, #36]	; (10a4 <image_start_packet_read+0xd4>)
    1080:	2200      	movs	r2, #0
    1082:	601a      	str	r2, [r3, #0]
    g_am_multiboot.ui32BytesInBuffer = 0;
    1084:	4b05      	ldr	r3, [pc, #20]	; (109c <image_start_packet_read+0xcc>)
    1086:	2200      	movs	r2, #0
    1088:	609a      	str	r2, [r3, #8]
    g_ui32CRC = 0;
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <image_start_packet_read+0xd8>)
    108c:	2200      	movs	r2, #0
    108e:	601a      	str	r2, [r3, #0]
    return true;
    1090:	2301      	movs	r3, #1
}
    1092:	4618      	mov	r0, r3
    1094:	3738      	adds	r7, #56	; 0x38
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	bf00      	nop
    109c:	100010dc 	.word	0x100010dc
    10a0:	10006000 	.word	0x10006000
    10a4:	100010f0 	.word	0x100010f0
    10a8:	100010f4 	.word	0x100010f4

000010ac <image_data_packet_read>:
//! @return None.
//
//*****************************************************************************
void
image_data_packet_read(uint8_t *pui8Src, uint32_t ui32Size)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	b084      	sub	sp, #16
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    10b4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
    10b6:	2300      	movs	r3, #0
    10b8:	60fb      	str	r3, [r7, #12]
    10ba:	e063      	b.n	1184 <image_data_packet_read+0xd8>
    {
        g_am_multiboot.pui8RxBuffer[g_am_multiboot.ui32BytesInBuffer] = *pui8Src++;
    10bc:	4b35      	ldr	r3, [pc, #212]	; (1194 <image_data_packet_read+0xe8>)
    10be:	685a      	ldr	r2, [r3, #4]
    10c0:	4b34      	ldr	r3, [pc, #208]	; (1194 <image_data_packet_read+0xe8>)
    10c2:	689b      	ldr	r3, [r3, #8]
    10c4:	441a      	add	r2, r3
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	1c59      	adds	r1, r3, #1
    10ca:	6079      	str	r1, [r7, #4]
    10cc:	781b      	ldrb	r3, [r3, #0]
    10ce:	7013      	strb	r3, [r2, #0]

        //
        // Keep track of how much data we've copied into the SRAM buffer.
        //
        g_am_multiboot.ui32BytesInBuffer++;
    10d0:	4b30      	ldr	r3, [pc, #192]	; (1194 <image_data_packet_read+0xe8>)
    10d2:	689b      	ldr	r3, [r3, #8]
    10d4:	3301      	adds	r3, #1
    10d6:	4a2f      	ldr	r2, [pc, #188]	; (1194 <image_data_packet_read+0xe8>)
    10d8:	6093      	str	r3, [r2, #8]
        g_ui32BytesReceived++;
    10da:	4b2f      	ldr	r3, [pc, #188]	; (1198 <image_data_packet_read+0xec>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	3301      	adds	r3, #1
    10e0:	4a2d      	ldr	r2, [pc, #180]	; (1198 <image_data_packet_read+0xec>)
    10e2:	6013      	str	r3, [r2, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
    10e4:	4b2b      	ldr	r3, [pc, #172]	; (1194 <image_data_packet_read+0xe8>)
    10e6:	7b1b      	ldrb	r3, [r3, #12]
    10e8:	f083 0301 	eor.w	r3, r3, #1
    10ec:	b2db      	uxtb	r3, r3
    10ee:	2b00      	cmp	r3, #0
    10f0:	d004      	beq.n	10fc <image_data_packet_read+0x50>
    10f2:	4b28      	ldr	r3, [pc, #160]	; (1194 <image_data_packet_read+0xe8>)
    10f4:	689b      	ldr	r3, [r3, #8]
    10f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    10fa:	d005      	beq.n	1108 <image_data_packet_read+0x5c>
                 g_ui32BytesReceived == g_sImage.ui32NumBytes )
    10fc:	4b27      	ldr	r3, [pc, #156]	; (119c <image_data_packet_read+0xf0>)
    10fe:	685a      	ldr	r2, [r3, #4]
    1100:	4b25      	ldr	r3, [pc, #148]	; (1198 <image_data_packet_read+0xec>)
    1102:	681b      	ldr	r3, [r3, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
    1104:	429a      	cmp	r2, r3
    1106:	d13a      	bne.n	117e <image_data_packet_read+0xd2>
        {
            //
            // Run a quick CRC on the received bytes, holding on to the result in a
            // global variable, so we can pick up where we left off on the next pass.
            //
            am_bootloader_partial_crc32(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer, &g_ui32CRC);
    1108:	4b22      	ldr	r3, [pc, #136]	; (1194 <image_data_packet_read+0xe8>)
    110a:	6858      	ldr	r0, [r3, #4]
    110c:	4b21      	ldr	r3, [pc, #132]	; (1194 <image_data_packet_read+0xe8>)
    110e:	689b      	ldr	r3, [r3, #8]
    1110:	4a23      	ldr	r2, [pc, #140]	; (11a0 <image_data_packet_read+0xf4>)
    1112:	4619      	mov	r1, r3
    1114:	f7ff f802 	bl	11c <am_bootloader_partial_crc32>
            //
            // If this is the first block of our new image, we need to record
            // the reset vector and stack pointer information for inclusion in
            // the flag page.
            //
            if ( g_am_multiboot.bStoreInSRAM || (g_ui32BytesReceived <= AM_HAL_FLASH_PAGE_SIZE) )
    1118:	4b1e      	ldr	r3, [pc, #120]	; (1194 <image_data_packet_read+0xe8>)
    111a:	7b1b      	ldrb	r3, [r3, #12]
    111c:	2b00      	cmp	r3, #0
    111e:	d104      	bne.n	112a <image_data_packet_read+0x7e>
    1120:	4b1d      	ldr	r3, [pc, #116]	; (1198 <image_data_packet_read+0xec>)
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    1128:	d80c      	bhi.n	1144 <image_data_packet_read+0x98>
            {
                g_sImage.pui32StackPointer = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[0]);
    112a:	4b1a      	ldr	r3, [pc, #104]	; (1194 <image_data_packet_read+0xe8>)
    112c:	685b      	ldr	r3, [r3, #4]
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	461a      	mov	r2, r3
    1132:	4b1a      	ldr	r3, [pc, #104]	; (119c <image_data_packet_read+0xf0>)
    1134:	615a      	str	r2, [r3, #20]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
    1136:	4b17      	ldr	r3, [pc, #92]	; (1194 <image_data_packet_read+0xe8>)
    1138:	685b      	ldr	r3, [r3, #4]
    113a:	3304      	adds	r3, #4
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	461a      	mov	r2, r3
    1140:	4b16      	ldr	r3, [pc, #88]	; (119c <image_data_packet_read+0xf0>)
    1142:	619a      	str	r2, [r3, #24]
            }

            if ( !g_am_multiboot.bStoreInSRAM )
    1144:	4b13      	ldr	r3, [pc, #76]	; (1194 <image_data_packet_read+0xe8>)
    1146:	7b1b      	ldrb	r3, [r3, #12]
    1148:	f083 0301 	eor.w	r3, r3, #1
    114c:	b2db      	uxtb	r3, r3
    114e:	2b00      	cmp	r3, #0
    1150:	d015      	beq.n	117e <image_data_packet_read+0xd2>
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
    1152:	4b10      	ldr	r3, [pc, #64]	; (1194 <image_data_packet_read+0xe8>)
    1154:	691b      	ldr	r3, [r3, #16]
    1156:	4618      	mov	r0, r3
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
    1158:	4b0e      	ldr	r3, [pc, #56]	; (1194 <image_data_packet_read+0xe8>)
    115a:	6859      	ldr	r1, [r3, #4]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
            }

            if ( !g_am_multiboot.bStoreInSRAM )
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
    115c:	4b0d      	ldr	r3, [pc, #52]	; (1194 <image_data_packet_read+0xe8>)
    115e:	689b      	ldr	r3, [r3, #8]
    1160:	461a      	mov	r2, r3
    1162:	f7ff fa69 	bl	638 <am_bootloader_program_flash_page>
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
                //
                // Adjust the global variables.
                //
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
    1166:	4b0b      	ldr	r3, [pc, #44]	; (1194 <image_data_packet_read+0xe8>)
    1168:	691a      	ldr	r2, [r3, #16]
    116a:	4b0a      	ldr	r3, [pc, #40]	; (1194 <image_data_packet_read+0xe8>)
    116c:	689b      	ldr	r3, [r3, #8]
    116e:	089b      	lsrs	r3, r3, #2
    1170:	009b      	lsls	r3, r3, #2
    1172:	4413      	add	r3, r2
    1174:	4a07      	ldr	r2, [pc, #28]	; (1194 <image_data_packet_read+0xe8>)
    1176:	6113      	str	r3, [r2, #16]
                g_am_multiboot.ui32BytesInBuffer = 0;
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <image_data_packet_read+0xe8>)
    117a:	2200      	movs	r2, #0
    117c:	609a      	str	r2, [r3, #8]
{
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	3301      	adds	r3, #1
    1182:	60fb      	str	r3, [r7, #12]
    1184:	68fa      	ldr	r2, [r7, #12]
    1186:	683b      	ldr	r3, [r7, #0]
    1188:	429a      	cmp	r2, r3
    118a:	d397      	bcc.n	10bc <image_data_packet_read+0x10>
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
                g_am_multiboot.ui32BytesInBuffer = 0;
            }
        }
    }
}
    118c:	bf00      	nop
    118e:	3710      	adds	r7, #16
    1190:	46bd      	mov	sp, r7
    1192:	bd80      	pop	{r7, pc}
    1194:	100010dc 	.word	0x100010dc
    1198:	100010f0 	.word	0x100010f0
    119c:	10001018 	.word	0x10001018
    11a0:	100010f4 	.word	0x100010f4

000011a4 <am_multiboot_check_boot_from_flash>:
//! @return true if it's okay to boot from flash (returns the image structure).
//
//*****************************************************************************
bool
am_multiboot_check_boot_from_flash(bool *pbOverride, am_bootloader_image_t **ppsImage)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b084      	sub	sp, #16
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
    bool bValid = false;
    11ae:	2300      	movs	r3, #0
    11b0:	73fb      	strb	r3, [r7, #15]
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
        ( am_bootloader_validate_structure((uint32_t *)g_psBootImage, sizeof(*g_psBootImage)) ))
    11b2:	4b22      	ldr	r3, [pc, #136]	; (123c <am_multiboot_check_boot_from_flash+0x98>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	2124      	movs	r1, #36	; 0x24
    11b8:	4618      	mov	r0, r3
    11ba:	f7ff f9ad 	bl	518 <am_bootloader_validate_structure>
    11be:	4603      	mov	r3, r0
    //
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
    11c0:	2b00      	cmp	r3, #0
    11c2:	d01d      	beq.n	1200 <am_multiboot_check_boot_from_flash+0x5c>
        //
        // Check the flag page (including the stored CRC) and the override pin
        // to make sure we have a valid image and the host isn't requesting an
        // upgrade.
        //
        if (am_hal_bootloader_override_check(g_psBootImage))
    11c4:	4b1d      	ldr	r3, [pc, #116]	; (123c <am_multiboot_check_boot_from_flash+0x98>)
    11c6:	681b      	ldr	r3, [r3, #0]
    11c8:	4618      	mov	r0, r3
    11ca:	f7ff f82f 	bl	22c <am_hal_bootloader_override_check>
    11ce:	4603      	mov	r3, r0
    11d0:	2b00      	cmp	r3, #0
    11d2:	d003      	beq.n	11dc <am_multiboot_check_boot_from_flash+0x38>
        {
            *pbOverride = true;
    11d4:	687b      	ldr	r3, [r7, #4]
    11d6:	2201      	movs	r2, #1
    11d8:	701a      	strb	r2, [r3, #0]
    11da:	e029      	b.n	1230 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
            if ( am_bootloader_flash_check(g_psBootImage) )
    11e2:	4b16      	ldr	r3, [pc, #88]	; (123c <am_multiboot_check_boot_from_flash+0x98>)
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	4618      	mov	r0, r3
    11e8:	f7fe ffca 	bl	180 <am_bootloader_flash_check>
    11ec:	4603      	mov	r3, r0
    11ee:	2b00      	cmp	r3, #0
    11f0:	d01e      	beq.n	1230 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = g_psBootImage;
    11f2:	4b12      	ldr	r3, [pc, #72]	; (123c <am_multiboot_check_boot_from_flash+0x98>)
    11f4:	681a      	ldr	r2, [r3, #0]
    11f6:	683b      	ldr	r3, [r7, #0]
    11f8:	601a      	str	r2, [r3, #0]
                bValid = true;
    11fa:	2301      	movs	r3, #1
    11fc:	73fb      	strb	r3, [r7, #15]
    11fe:	e017      	b.n	1230 <am_multiboot_check_boot_from_flash+0x8c>
        //
        // Check the override pin to make sure the host isn't requesting an
        // upgrade, and do a quick check to make sure an image actually exists
        // at the default application location.
        //
        if (am_hal_bootloader_override_check(&g_sImage))
    1200:	480f      	ldr	r0, [pc, #60]	; (1240 <am_multiboot_check_boot_from_flash+0x9c>)
    1202:	f7ff f813 	bl	22c <am_hal_bootloader_override_check>
    1206:	4603      	mov	r3, r0
    1208:	2b00      	cmp	r3, #0
    120a:	d003      	beq.n	1214 <am_multiboot_check_boot_from_flash+0x70>
        {
            *pbOverride = true;
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	2201      	movs	r2, #1
    1210:	701a      	strb	r2, [r3, #0]
    1212:	e00d      	b.n	1230 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	2200      	movs	r2, #0
    1218:	701a      	strb	r2, [r3, #0]
            if ( *(g_sImage.pui32LinkAddress) != 0xFFFFFFFF)
    121a:	4b09      	ldr	r3, [pc, #36]	; (1240 <am_multiboot_check_boot_from_flash+0x9c>)
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	f1b3 3fff 	cmp.w	r3, #4294967295
    1224:	d004      	beq.n	1230 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = &g_sImage;
    1226:	683b      	ldr	r3, [r7, #0]
    1228:	4a05      	ldr	r2, [pc, #20]	; (1240 <am_multiboot_check_boot_from_flash+0x9c>)
    122a:	601a      	str	r2, [r3, #0]
                bValid = true;
    122c:	2301      	movs	r3, #1
    122e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return bValid;
    1230:	7bfb      	ldrb	r3, [r7, #15]
}
    1232:	4618      	mov	r0, r3
    1234:	3710      	adds	r7, #16
    1236:	46bd      	mov	sp, r7
    1238:	bd80      	pop	{r7, pc}
    123a:	bf00      	nop
    123c:	1000103c 	.word	0x1000103c
    1240:	10001018 	.word	0x10001018

00001244 <write_to_flash>:

// Can write across pages
// The write address should be page aligned & the length in multiple of page size
int
write_to_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
    1244:	b580      	push	{r7, lr}
    1246:	b086      	sub	sp, #24
    1248:	af00      	add	r7, sp, #0
    124a:	60f8      	str	r0, [r7, #12]
    124c:	60b9      	str	r1, [r7, #8]
    124e:	607a      	str	r2, [r7, #4]
    1250:	603b      	str	r3, [r7, #0]
    if (ui32DestAddr & (pFlash->flashPageSize - 1))
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	1e5a      	subs	r2, r3, #1
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	4013      	ands	r3, r2
    125c:	2b00      	cmp	r3, #0
    125e:	d01e      	beq.n	129e <write_to_flash+0x5a>
    {
        return -1 ;
    1260:	f04f 33ff 	mov.w	r3, #4294967295
    1264:	e01f      	b.n	12a6 <write_to_flash+0x62>
    }
    while (ui32Length)
    {
        uint32_t ui32BytesInPage =
            (ui32Length > pFlash->flashPageSize) ? \
                pFlash->flashPageSize : ui32Length;
    1266:	683b      	ldr	r3, [r7, #0]
    1268:	681a      	ldr	r2, [r3, #0]
    {
        return -1 ;
    }
    while (ui32Length)
    {
        uint32_t ui32BytesInPage =
    126a:	687b      	ldr	r3, [r7, #4]
    126c:	4293      	cmp	r3, r2
    126e:	bf28      	it	cs
    1270:	4613      	movcs	r3, r2
    1272:	617b      	str	r3, [r7, #20]
            (ui32Length > pFlash->flashPageSize) ? \
                pFlash->flashPageSize : ui32Length;
        // Writes are always page size
        pFlash->flash_write_page(ui32DestAddr, pSrc, pFlash->flashPageSize);
    1274:	683b      	ldr	r3, [r7, #0]
    1276:	69db      	ldr	r3, [r3, #28]
    1278:	683a      	ldr	r2, [r7, #0]
    127a:	6812      	ldr	r2, [r2, #0]
    127c:	68b9      	ldr	r1, [r7, #8]
    127e:	68f8      	ldr	r0, [r7, #12]
    1280:	4798      	blx	r3
        pSrc += ui32BytesInPage/4;
    1282:	697b      	ldr	r3, [r7, #20]
    1284:	089b      	lsrs	r3, r3, #2
    1286:	009b      	lsls	r3, r3, #2
    1288:	68ba      	ldr	r2, [r7, #8]
    128a:	4413      	add	r3, r2
    128c:	60bb      	str	r3, [r7, #8]
        ui32Length -= ui32BytesInPage;
    128e:	687a      	ldr	r2, [r7, #4]
    1290:	697b      	ldr	r3, [r7, #20]
    1292:	1ad3      	subs	r3, r2, r3
    1294:	607b      	str	r3, [r7, #4]
        ui32DestAddr += ui32BytesInPage;
    1296:	68fa      	ldr	r2, [r7, #12]
    1298:	697b      	ldr	r3, [r7, #20]
    129a:	4413      	add	r3, r2
    129c:	60fb      	str	r3, [r7, #12]
{
    if (ui32DestAddr & (pFlash->flashPageSize - 1))
    {
        return -1 ;
    }
    while (ui32Length)
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d1e0      	bne.n	1266 <write_to_flash+0x22>
        pFlash->flash_write_page(ui32DestAddr, pSrc, pFlash->flashPageSize);
        pSrc += ui32BytesInPage/4;
        ui32Length -= ui32BytesInPage;
        ui32DestAddr += ui32BytesInPage;
    }
    return 0;
    12a4:	2300      	movs	r3, #0
}
    12a6:	4618      	mov	r0, r3
    12a8:	3718      	adds	r7, #24
    12aa:	46bd      	mov	sp, r7
    12ac:	bd80      	pop	{r7, pc}
    12ae:	bf00      	nop

000012b0 <read_from_flash>:

// Can read across pages
int
read_from_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	b086      	sub	sp, #24
    12b4:	af00      	add	r7, sp, #0
    12b6:	60f8      	str	r0, [r7, #12]
    12b8:	60b9      	str	r1, [r7, #8]
    12ba:	607a      	str	r2, [r7, #4]
    12bc:	603b      	str	r3, [r7, #0]
    uint32_t ui32Preceding = (uint32_t)pSrc & (pFlash->flashPageSize - 1);
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	1e5a      	subs	r2, r3, #1
    12c4:	68bb      	ldr	r3, [r7, #8]
    12c6:	4013      	ands	r3, r2
    12c8:	617b      	str	r3, [r7, #20]
    while (ui32Length)
    12ca:	e023      	b.n	1314 <read_from_flash+0x64>
    {
        uint32_t ui32BytesInPage =
            ((ui32Preceding + ui32Length) > pFlash->flashPageSize) ? \
    12cc:	697a      	ldr	r2, [r7, #20]
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	441a      	add	r2, r3
    12d2:	683b      	ldr	r3, [r7, #0]
    12d4:	681b      	ldr	r3, [r3, #0]
                (pFlash->flashPageSize - ui32Preceding) : ui32Length;
    12d6:	429a      	cmp	r2, r3
    12d8:	d904      	bls.n	12e4 <read_from_flash+0x34>
    12da:	683b      	ldr	r3, [r7, #0]
    12dc:	681a      	ldr	r2, [r3, #0]
    12de:	697b      	ldr	r3, [r7, #20]
    12e0:	1ad3      	subs	r3, r2, r3
    12e2:	e000      	b.n	12e6 <read_from_flash+0x36>
    12e4:	687b      	ldr	r3, [r7, #4]
read_from_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
    uint32_t ui32Preceding = (uint32_t)pSrc & (pFlash->flashPageSize - 1);
    while (ui32Length)
    {
        uint32_t ui32BytesInPage =
    12e6:	613b      	str	r3, [r7, #16]
            ((ui32Preceding + ui32Length) > pFlash->flashPageSize) ? \
                (pFlash->flashPageSize - ui32Preceding) : ui32Length;
        pFlash->flash_read_page(ui32DestAddr, pSrc, ui32BytesInPage);
    12e8:	683b      	ldr	r3, [r7, #0]
    12ea:	699b      	ldr	r3, [r3, #24]
    12ec:	693a      	ldr	r2, [r7, #16]
    12ee:	68b9      	ldr	r1, [r7, #8]
    12f0:	68f8      	ldr	r0, [r7, #12]
    12f2:	4798      	blx	r3
        pSrc += ui32BytesInPage/4;
    12f4:	693b      	ldr	r3, [r7, #16]
    12f6:	089b      	lsrs	r3, r3, #2
    12f8:	009b      	lsls	r3, r3, #2
    12fa:	68ba      	ldr	r2, [r7, #8]
    12fc:	4413      	add	r3, r2
    12fe:	60bb      	str	r3, [r7, #8]
        ui32Length -= ui32BytesInPage;
    1300:	687a      	ldr	r2, [r7, #4]
    1302:	693b      	ldr	r3, [r7, #16]
    1304:	1ad3      	subs	r3, r2, r3
    1306:	607b      	str	r3, [r7, #4]
        ui32DestAddr += ui32BytesInPage;
    1308:	68fa      	ldr	r2, [r7, #12]
    130a:	693b      	ldr	r3, [r7, #16]
    130c:	4413      	add	r3, r2
    130e:	60fb      	str	r3, [r7, #12]
        ui32Preceding = 0;
    1310:	2300      	movs	r3, #0
    1312:	617b      	str	r3, [r7, #20]
// Can read across pages
int
read_from_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
    uint32_t ui32Preceding = (uint32_t)pSrc & (pFlash->flashPageSize - 1);
    while (ui32Length)
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	2b00      	cmp	r3, #0
    1318:	d1d8      	bne.n	12cc <read_from_flash+0x1c>
        pSrc += ui32BytesInPage/4;
        ui32Length -= ui32BytesInPage;
        ui32DestAddr += ui32BytesInPage;
        ui32Preceding = 0;
    }
    return 0;
    131a:	2300      	movs	r3, #0
}
    131c:	4618      	mov	r0, r3
    131e:	3718      	adds	r7, #24
    1320:	46bd      	mov	sp, r7
    1322:	bd80      	pop	{r7, pc}

00001324 <program_image_from_flash>:
// We can not read and program the same flash bank
// So - we need to first copy data to SRAM, and then flash...block by block
static void
program_image_from_flash(uint32_t ui32WriteAddr, uint32_t *pui32ReadAddr, uint32_t ui32NumBytes,
    bool bDecrypt, am_multiboot_flash_info_t *pReadFlash, am_multiboot_flash_info_t *pWriteFlash)
{
    1324:	b590      	push	{r4, r7, lr}
    1326:	b089      	sub	sp, #36	; 0x24
    1328:	af00      	add	r7, sp, #0
    132a:	60f8      	str	r0, [r7, #12]
    132c:	60b9      	str	r1, [r7, #8]
    132e:	607a      	str	r2, [r7, #4]
    1330:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32NumBytesInPage;
    uint32_t *pStart = g_pTempBuf;
    1332:	4b3a      	ldr	r3, [pc, #232]	; (141c <program_image_from_flash+0xf8>)
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	617b      	str	r3, [r7, #20]
    // Determine the preceding data bytes at the destination page
    uint32_t ui32PrecedingBytes = ui32WriteAddr & (pWriteFlash->flashSectorSize - 1);
    1338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    133a:	685b      	ldr	r3, [r3, #4]
    133c:	1e5a      	subs	r2, r3, #1
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	4013      	ands	r3, r2
    1342:	61bb      	str	r3, [r7, #24]
    // Flash Write can only happen in terms of pages
    // So, if the image does not start on page boundary - need to take proper precautions
    // to preserve other data in the page
    if (ui32PrecedingBytes)
    1344:	69bb      	ldr	r3, [r7, #24]
    1346:	2b00      	cmp	r3, #0
    1348:	d060      	beq.n	140c <program_image_from_flash+0xe8>
    {
        // Page aligned
        ui32WriteAddr &= ~(pWriteFlash->flashSectorSize - 1);
    134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    134c:	685b      	ldr	r3, [r3, #4]
    134e:	425b      	negs	r3, r3
    1350:	68fa      	ldr	r2, [r7, #12]
    1352:	4013      	ands	r3, r2
    1354:	60fb      	str	r3, [r7, #12]
        // Copy the preceding content at destination page in buffer
        read_from_flash((uint32_t)g_pTempBuf, (uint32_t *)ui32WriteAddr, ui32PrecedingBytes, pWriteFlash);
    1356:	4b31      	ldr	r3, [pc, #196]	; (141c <program_image_from_flash+0xf8>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	4618      	mov	r0, r3
    135c:	68f9      	ldr	r1, [r7, #12]
    135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1360:	69ba      	ldr	r2, [r7, #24]
    1362:	f7ff ffa5 	bl	12b0 <read_from_flash>
    }
    while ( ui32NumBytes )
    1366:	e051      	b.n	140c <program_image_from_flash+0xe8>
    {
        pStart = g_pTempBuf + ui32PrecedingBytes/4;
    1368:	4b2c      	ldr	r3, [pc, #176]	; (141c <program_image_from_flash+0xf8>)
    136a:	681a      	ldr	r2, [r3, #0]
    136c:	69bb      	ldr	r3, [r7, #24]
    136e:	089b      	lsrs	r3, r3, #2
    1370:	009b      	lsls	r3, r3, #2
    1372:	4413      	add	r3, r2
    1374:	617b      	str	r3, [r7, #20]
        if ((ui32PrecedingBytes + ui32NumBytes) > pWriteFlash->flashSectorSize)
    1376:	69ba      	ldr	r2, [r7, #24]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	441a      	add	r2, r3
    137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    137e:	685b      	ldr	r3, [r3, #4]
    1380:	429a      	cmp	r2, r3
    1382:	d905      	bls.n	1390 <program_image_from_flash+0x6c>
        {
            ui32NumBytesInPage = pWriteFlash->flashSectorSize - ui32PrecedingBytes;
    1384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1386:	685a      	ldr	r2, [r3, #4]
    1388:	69bb      	ldr	r3, [r7, #24]
    138a:	1ad3      	subs	r3, r2, r3
    138c:	61fb      	str	r3, [r7, #28]
    138e:	e01a      	b.n	13c6 <program_image_from_flash+0xa2>
        }
        else
        {
            // Last sector to be written
            ui32NumBytesInPage = ui32NumBytes;
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	61fb      	str	r3, [r7, #28]
            if ((ui32NumBytesInPage + ui32PrecedingBytes) != pWriteFlash->flashSectorSize)
    1394:	69fa      	ldr	r2, [r7, #28]
    1396:	69bb      	ldr	r3, [r7, #24]
    1398:	441a      	add	r2, r3
    139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    139c:	685b      	ldr	r3, [r3, #4]
    139e:	429a      	cmp	r2, r3
    13a0:	d011      	beq.n	13c6 <program_image_from_flash+0xa2>
            {
                // Copy the trailing content at destination page in buffer
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    13a2:	697a      	ldr	r2, [r7, #20]
    13a4:	69fb      	ldr	r3, [r7, #28]
    13a6:	18d0      	adds	r0, r2, r3
                                pui32ReadAddr + ui32NumBytesInPage/4,
    13a8:	69fb      	ldr	r3, [r7, #28]
    13aa:	089b      	lsrs	r3, r3, #2
    13ac:	009b      	lsls	r3, r3, #2
            // Last sector to be written
            ui32NumBytesInPage = ui32NumBytes;
            if ((ui32NumBytesInPage + ui32PrecedingBytes) != pWriteFlash->flashSectorSize)
            {
                // Copy the trailing content at destination page in buffer
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    13ae:	68ba      	ldr	r2, [r7, #8]
    13b0:	18d4      	adds	r4, r2, r3
                                pui32ReadAddr + ui32NumBytesInPage/4,
                                pWriteFlash->flashSectorSize - (ui32NumBytesInPage + ui32PrecedingBytes),
    13b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13b4:	685a      	ldr	r2, [r3, #4]
    13b6:	69f9      	ldr	r1, [r7, #28]
    13b8:	69bb      	ldr	r3, [r7, #24]
    13ba:	440b      	add	r3, r1
            // Last sector to be written
            ui32NumBytesInPage = ui32NumBytes;
            if ((ui32NumBytesInPage + ui32PrecedingBytes) != pWriteFlash->flashSectorSize)
            {
                // Copy the trailing content at destination page in buffer
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    13bc:	1ad2      	subs	r2, r2, r3
    13be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13c0:	4621      	mov	r1, r4
    13c2:	f7ff ff75 	bl	12b0 <read_from_flash>
                                pWriteFlash->flashSectorSize - (ui32NumBytesInPage + ui32PrecedingBytes),
                                pWriteFlash);
            }
        }
        // Read the image data from source
        read_from_flash((uint32_t)pStart, pui32ReadAddr, ui32NumBytesInPage, pReadFlash);
    13c6:	6978      	ldr	r0, [r7, #20]
    13c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13ca:	69fa      	ldr	r2, [r7, #28]
    13cc:	68b9      	ldr	r1, [r7, #8]
    13ce:	f7ff ff6f 	bl	12b0 <read_from_flash>
            // Decrypt in place
            multiboot_secure_decrypt(pStart, ui32NumBytesInPage);
        }
#endif
        // erase the sector
        pWriteFlash->flash_erase_sector(ui32WriteAddr);
    13d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d4:	6a1b      	ldr	r3, [r3, #32]
    13d6:	68f8      	ldr	r0, [r7, #12]
    13d8:	4798      	blx	r3
        // Write the flash sector
        write_to_flash(ui32WriteAddr, g_pTempBuf, pWriteFlash->flashSectorSize, pWriteFlash);
    13da:	4b10      	ldr	r3, [pc, #64]	; (141c <program_image_from_flash+0xf8>)
    13dc:	6819      	ldr	r1, [r3, #0]
    13de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e0:	685a      	ldr	r2, [r3, #4]
    13e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e4:	68f8      	ldr	r0, [r7, #12]
    13e6:	f7ff ff2d 	bl	1244 <write_to_flash>

        ui32WriteAddr += pWriteFlash->flashSectorSize;
    13ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13ec:	685b      	ldr	r3, [r3, #4]
    13ee:	68fa      	ldr	r2, [r7, #12]
    13f0:	4413      	add	r3, r2
    13f2:	60fb      	str	r3, [r7, #12]
        pui32ReadAddr += ui32NumBytesInPage/4;
    13f4:	69fb      	ldr	r3, [r7, #28]
    13f6:	089b      	lsrs	r3, r3, #2
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	68ba      	ldr	r2, [r7, #8]
    13fc:	4413      	add	r3, r2
    13fe:	60bb      	str	r3, [r7, #8]
        ui32NumBytes -= ui32NumBytesInPage;
    1400:	687a      	ldr	r2, [r7, #4]
    1402:	69fb      	ldr	r3, [r7, #28]
    1404:	1ad3      	subs	r3, r2, r3
    1406:	607b      	str	r3, [r7, #4]
        ui32PrecedingBytes = 0;
    1408:	2300      	movs	r3, #0
    140a:	61bb      	str	r3, [r7, #24]
        // Page aligned
        ui32WriteAddr &= ~(pWriteFlash->flashSectorSize - 1);
        // Copy the preceding content at destination page in buffer
        read_from_flash((uint32_t)g_pTempBuf, (uint32_t *)ui32WriteAddr, ui32PrecedingBytes, pWriteFlash);
    }
    while ( ui32NumBytes )
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	2b00      	cmp	r3, #0
    1410:	d1aa      	bne.n	1368 <program_image_from_flash+0x44>
        ui32WriteAddr += pWriteFlash->flashSectorSize;
        pui32ReadAddr += ui32NumBytesInPage/4;
        ui32NumBytes -= ui32NumBytesInPage;
        ui32PrecedingBytes = 0;
    }
}
    1412:	bf00      	nop
    1414:	3724      	adds	r7, #36	; 0x24
    1416:	46bd      	mov	sp, r7
    1418:	bd90      	pop	{r4, r7, pc}
    141a:	bf00      	nop
    141c:	10001114 	.word	0x10001114

00001420 <am_multiboot_ota_handler>:
//*****************************************************************************
bool
am_multiboot_ota_handler(am_multiboot_ota_t *pOtaInfo, uint32_t *pTempBuf,
            uint32_t tempBufSize, invalidate_ota_func_t invalidateOtaFunc,
            am_multiboot_flash_info_t *pExtFlash)
{
    1420:	b580      	push	{r7, lr}
    1422:	b088      	sub	sp, #32
    1424:	af02      	add	r7, sp, #8
    1426:	60f8      	str	r0, [r7, #12]
    1428:	60b9      	str	r1, [r7, #8]
    142a:	607a      	str	r2, [r7, #4]
    142c:	603b      	str	r3, [r7, #0]
    am_bootloader_image_t *psImage = &g_sImage;
    142e:	4b6c      	ldr	r3, [pc, #432]	; (15e0 <am_multiboot_ota_handler+0x1c0>)
    1430:	613b      	str	r3, [r7, #16]
    am_multiboot_flash_info_t *pFlash;

    if ((pTempBuf == NULL) || (pOtaInfo == NULL) || (pOtaInfo->magicNum != OTA_INFO_MAGIC_NUM))
    1432:	68bb      	ldr	r3, [r7, #8]
    1434:	2b00      	cmp	r3, #0
    1436:	d007      	beq.n	1448 <am_multiboot_ota_handler+0x28>
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	2b00      	cmp	r3, #0
    143c:	d004      	beq.n	1448 <am_multiboot_ota_handler+0x28>
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	4a68      	ldr	r2, [pc, #416]	; (15e4 <am_multiboot_ota_handler+0x1c4>)
    1444:	4293      	cmp	r3, r2
    1446:	d001      	beq.n	144c <am_multiboot_ota_handler+0x2c>
    {
        return false;
    1448:	2300      	movs	r3, #0
    144a:	e0c4      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
    }

    // Validate the contents
    if ( !am_bootloader_validate_structure((uint32_t *)pOtaInfo, sizeof(*pOtaInfo)) )
    144c:	2124      	movs	r1, #36	; 0x24
    144e:	68f8      	ldr	r0, [r7, #12]
    1450:	f7ff f862 	bl	518 <am_bootloader_validate_structure>
    1454:	4603      	mov	r3, r0
    1456:	f083 0301 	eor.w	r3, r3, #1
    145a:	b2db      	uxtb	r3, r3
    145c:	2b00      	cmp	r3, #0
    145e:	d001      	beq.n	1464 <am_multiboot_ota_handler+0x44>
    {
        return false;
    1460:	2300      	movs	r3, #0
    1462:	e0b8      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
    }

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)pOtaInfo->pui32LinkAddress,
    1464:	68fb      	ldr	r3, [r7, #12]
    1466:	685b      	ldr	r3, [r3, #4]
    1468:	461a      	mov	r2, r3
    146a:	68fb      	ldr	r3, [r7, #12]
    146c:	689b      	ldr	r3, [r3, #8]
    146e:	4619      	mov	r1, r3
    1470:	4610      	mov	r0, r2
    1472:	f7ff fccb 	bl	e0c <check_flash_address_range>
    1476:	4603      	mov	r3, r0
    1478:	f083 0301 	eor.w	r3, r3, #1
    147c:	b2db      	uxtb	r3, r3
    147e:	2b00      	cmp	r3, #0
    1480:	d001      	beq.n	1486 <am_multiboot_ota_handler+0x66>
        pOtaInfo->ui32NumBytes))
    {
        return false;
    1482:	2300      	movs	r3, #0
    1484:	e0a7      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
    }
    // Validate the ext flash info
    if (pOtaInfo->ui32Options & OTA_INFO_OPTIONS_EXT_FLASH)
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	695b      	ldr	r3, [r3, #20]
    148a:	f003 0301 	and.w	r3, r3, #1
    148e:	2b00      	cmp	r3, #0
    1490:	d018      	beq.n	14c4 <am_multiboot_ota_handler+0xa4>
    {
        if (pExtFlash && pExtFlash->flash_read_page &&
    1492:	6a3b      	ldr	r3, [r7, #32]
    1494:	2b00      	cmp	r3, #0
    1496:	d013      	beq.n	14c0 <am_multiboot_ota_handler+0xa0>
    1498:	6a3b      	ldr	r3, [r7, #32]
    149a:	699b      	ldr	r3, [r3, #24]
    149c:	2b00      	cmp	r3, #0
    149e:	d00f      	beq.n	14c0 <am_multiboot_ota_handler+0xa0>
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    14a0:	6a3b      	ldr	r3, [r7, #32]
    14a2:	69db      	ldr	r3, [r3, #28]
        return false;
    }
    // Validate the ext flash info
    if (pOtaInfo->ui32Options & OTA_INFO_OPTIONS_EXT_FLASH)
    {
        if (pExtFlash && pExtFlash->flash_read_page &&
    14a4:	2b00      	cmp	r3, #0
    14a6:	d00b      	beq.n	14c0 <am_multiboot_ota_handler+0xa0>
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    14a8:	6a3b      	ldr	r3, [r7, #32]
    14aa:	6a1b      	ldr	r3, [r3, #32]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d007      	beq.n	14c0 <am_multiboot_ota_handler+0xa0>
            (pExtFlash->flashSectorSize <= tempBufSize))
    14b0:	6a3b      	ldr	r3, [r7, #32]
    14b2:	685a      	ldr	r2, [r3, #4]
    }
    // Validate the ext flash info
    if (pOtaInfo->ui32Options & OTA_INFO_OPTIONS_EXT_FLASH)
    {
        if (pExtFlash && pExtFlash->flash_read_page &&
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    14b4:	687b      	ldr	r3, [r7, #4]
    14b6:	429a      	cmp	r2, r3
    14b8:	d802      	bhi.n	14c0 <am_multiboot_ota_handler+0xa0>
            (pExtFlash->flashSectorSize <= tempBufSize))
        {
            pFlash = pExtFlash;
    14ba:	6a3b      	ldr	r3, [r7, #32]
    14bc:	617b      	str	r3, [r7, #20]
    14be:	e00a      	b.n	14d6 <am_multiboot_ota_handler+0xb6>
        }
        else
        {
            return false;
    14c0:	2300      	movs	r3, #0
    14c2:	e088      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
        }
    }
    else
    {
        // Validate the address and the temp buf size
        if (g_intFlash.flashSectorSize > tempBufSize)
    14c4:	4b48      	ldr	r3, [pc, #288]	; (15e8 <am_multiboot_ota_handler+0x1c8>)
    14c6:	685a      	ldr	r2, [r3, #4]
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	429a      	cmp	r2, r3
    14cc:	d901      	bls.n	14d2 <am_multiboot_ota_handler+0xb2>
        {
            return false;
    14ce:	2300      	movs	r3, #0
    14d0:	e081      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
        }
        pFlash = &g_intFlash;
    14d2:	4b45      	ldr	r3, [pc, #276]	; (15e8 <am_multiboot_ota_handler+0x1c8>)
    14d4:	617b      	str	r3, [r7, #20]
    }

    g_pTempBuf = pTempBuf;
    14d6:	4a45      	ldr	r2, [pc, #276]	; (15ec <am_multiboot_ota_handler+0x1cc>)
    14d8:	68bb      	ldr	r3, [r7, #8]
    14da:	6013      	str	r3, [r2, #0]

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = pOtaInfo->pui32LinkAddress;
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	685a      	ldr	r2, [r3, #4]
    14e0:	693b      	ldr	r3, [r7, #16]
    14e2:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pOtaInfo->ui32NumBytes;
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	689a      	ldr	r2, [r3, #8]
    14e8:	693b      	ldr	r3, [r7, #16]
    14ea:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pOtaInfo->ui32ImageCrc;
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	68da      	ldr	r2, [r3, #12]
    14f0:	693b      	ldr	r3, [r7, #16]
    14f2:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
    14f4:	693b      	ldr	r3, [r7, #16]
    14f6:	2212      	movs	r2, #18
    14f8:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
    14fa:	693b      	ldr	r3, [r7, #16]
    14fc:	2200      	movs	r2, #0
    14fe:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
    1500:	693b      	ldr	r3, [r7, #16]
    1502:	2200      	movs	r2, #0
    1504:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
    1506:	693b      	ldr	r3, [r7, #16]
    1508:	2200      	movs	r2, #0
    150a:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
    150c:	693b      	ldr	r3, [r7, #16]
    150e:	2200      	movs	r2, #0
    1510:	619a      	str	r2, [r3, #24]

    g_am_multiboot.bStoreInSRAM = 0;
    1512:	4b37      	ldr	r3, [pc, #220]	; (15f0 <am_multiboot_ota_handler+0x1d0>)
    1514:	2200      	movs	r2, #0
    1516:	731a      	strb	r2, [r3, #12]

    g_am_multiboot.pui8RxBuffer = (uint8_t *)pOtaInfo->pui32ImageAddr;
    1518:	68fb      	ldr	r3, [r7, #12]
    151a:	69db      	ldr	r3, [r3, #28]
    151c:	4a34      	ldr	r2, [pc, #208]	; (15f0 <am_multiboot_ota_handler+0x1d0>)
    151e:	6053      	str	r3, [r2, #4]
    g_am_multiboot.ui32BytesInBuffer = pOtaInfo->ui32NumBytes;
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	689b      	ldr	r3, [r3, #8]
    1524:	4a32      	ldr	r2, [pc, #200]	; (15f0 <am_multiboot_ota_handler+0x1d0>)
    1526:	6093      	str	r3, [r2, #8]
    
    if (FLASH_OPERATE(pFlash, flash_init) == 0)
    1528:	697b      	ldr	r3, [r7, #20]
    152a:	689b      	ldr	r3, [r3, #8]
    152c:	2b00      	cmp	r3, #0
    152e:	d005      	beq.n	153c <am_multiboot_ota_handler+0x11c>
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	689b      	ldr	r3, [r3, #8]
    1534:	4798      	blx	r3
    1536:	4603      	mov	r3, r0
    1538:	2b00      	cmp	r3, #0
    153a:	d111      	bne.n	1560 <am_multiboot_ota_handler+0x140>
    {
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    153c:	697b      	ldr	r3, [r7, #20]
    153e:	691b      	ldr	r3, [r3, #16]
    1540:	2b00      	cmp	r3, #0
    1542:	d00f      	beq.n	1564 <am_multiboot_ota_handler+0x144>
    1544:	697b      	ldr	r3, [r7, #20]
    1546:	691b      	ldr	r3, [r3, #16]
    1548:	4798      	blx	r3
    154a:	4603      	mov	r3, r0
    154c:	2b00      	cmp	r3, #0
    154e:	d009      	beq.n	1564 <am_multiboot_ota_handler+0x144>
        {
            FLASH_OPERATE(pFlash, flash_deinit);
    1550:	697b      	ldr	r3, [r7, #20]
    1552:	68db      	ldr	r3, [r3, #12]
    1554:	2b00      	cmp	r3, #0
    1556:	d005      	beq.n	1564 <am_multiboot_ota_handler+0x144>
    1558:	697b      	ldr	r3, [r7, #20]
    155a:	68db      	ldr	r3, [r3, #12]
    155c:	4798      	blx	r3
    g_am_multiboot.pui8RxBuffer = (uint8_t *)pOtaInfo->pui32ImageAddr;
    g_am_multiboot.ui32BytesInBuffer = pOtaInfo->ui32NumBytes;
    
    if (FLASH_OPERATE(pFlash, flash_init) == 0)
    {
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    155e:	e001      	b.n	1564 <am_multiboot_ota_handler+0x144>
            FLASH_OPERATE(pFlash, flash_deinit);
        }
    }
    else
    {
        return false;
    1560:	2300      	movs	r3, #0
    1562:	e038      	b.n	15d6 <am_multiboot_ota_handler+0x1b6>
    g_am_multiboot.pui8RxBuffer = (uint8_t *)pOtaInfo->pui32ImageAddr;
    g_am_multiboot.ui32BytesInBuffer = pOtaInfo->ui32NumBytes;
    
    if (FLASH_OPERATE(pFlash, flash_init) == 0)
    {
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    1564:	bf00      	nop
        FLASH_OPERATE(pFlash, flash_disable);
        FLASH_OPERATE(pFlash, flash_deinit);
        return false;
    }
#endif
    psImage->pui32StackPointer = (uint32_t *)(((uint32_t *)pOtaInfo->pui32ImageAddr)[0]);
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	69db      	ldr	r3, [r3, #28]
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	461a      	mov	r2, r3
    156e:	693b      	ldr	r3, [r7, #16]
    1570:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = (uint32_t *)(((uint32_t *)pOtaInfo->pui32ImageAddr)[1]);
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	69db      	ldr	r3, [r3, #28]
    1576:	3304      	adds	r3, #4
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	461a      	mov	r2, r3
    157c:	693b      	ldr	r3, [r7, #16]
    157e:	619a      	str	r2, [r3, #24]

    //
    // The image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
    1580:	693b      	ldr	r3, [r7, #16]
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	4a1a      	ldr	r2, [pc, #104]	; (15f0 <am_multiboot_ota_handler+0x1d0>)
    1586:	6113      	str	r3, [r2, #16]
    
    program_image_from_flash((uint32_t)pOtaInfo->pui32LinkAddress, pOtaInfo->pui32ImageAddr,
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	685b      	ldr	r3, [r3, #4]
    158c:	4618      	mov	r0, r3
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	69d9      	ldr	r1, [r3, #28]
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	689a      	ldr	r2, [r3, #8]
    1596:	4b14      	ldr	r3, [pc, #80]	; (15e8 <am_multiboot_ota_handler+0x1c8>)
    1598:	9301      	str	r3, [sp, #4]
    159a:	697b      	ldr	r3, [r7, #20]
    159c:	9300      	str	r3, [sp, #0]
    159e:	2300      	movs	r3, #0
    15a0:	f7ff fec0 	bl	1324 <program_image_from_flash>
        pOtaInfo->ui32NumBytes, false, pFlash, &g_intFlash);
    // Protect the image if needed
    program_image(psImage->bEncrypted);
    15a4:	693b      	ldr	r3, [r7, #16]
    15a6:	69db      	ldr	r3, [r3, #28]
    15a8:	4618      	mov	r0, r3
    15aa:	f7ff fcbd 	bl	f28 <program_image>
    if ( !(pOtaInfo->ui32Options & OTA_INFO_OPTIONS_DATA) && USE_FLAG_PAGE )
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	695b      	ldr	r3, [r3, #20]
    15b2:	f003 0302 	and.w	r3, r3, #2
    15b6:	2b00      	cmp	r3, #0
    15b8:	d104      	bne.n	15c4 <am_multiboot_ota_handler+0x1a4>
    {
        //
        // Write the flag page.
        //
        am_bootloader_flag_page_update(&g_sImage, (uint32_t *)FLAG_PAGE_LOCATION);
    15ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    15be:	4808      	ldr	r0, [pc, #32]	; (15e0 <am_multiboot_ota_handler+0x1c0>)
    15c0:	f7fe ffce 	bl	560 <am_bootloader_flag_page_update>
    }
    if (invalidateOtaFunc)
    15c4:	683b      	ldr	r3, [r7, #0]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d002      	beq.n	15d0 <am_multiboot_ota_handler+0x1b0>
    {
        invalidateOtaFunc(pOtaInfo);
    15ca:	683b      	ldr	r3, [r7, #0]
    15cc:	68f8      	ldr	r0, [r7, #12]
    15ce:	4798      	blx	r3
    wipe_sram();
#endif
    //
    // Perform a software reset.
    //
    am_hal_reset_poi();
    15d0:	f001 f848 	bl	2664 <am_hal_reset_poi>

    // Should never reach here
    return true;
    15d4:	2301      	movs	r3, #1
}
    15d6:	4618      	mov	r0, r3
    15d8:	3718      	adds	r7, #24
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	bf00      	nop
    15e0:	10001018 	.word	0x10001018
    15e4:	deadcafe 	.word	0xdeadcafe
    15e8:	10001040 	.word	0x10001040
    15ec:	10001114 	.word	0x10001114
    15f0:	100010dc 	.word	0x100010dc

000015f4 <ser_out>:
volatile bool g_bUartImageValid = false;

//
void
ser_out(uint32_t ui32Module, unsigned char data)
{
    15f4:	b480      	push	{r7}
    15f6:	b083      	sub	sp, #12
    15f8:	af00      	add	r7, sp, #0
    15fa:	6078      	str	r0, [r7, #4]
    15fc:	460b      	mov	r3, r1
    15fe:	70fb      	strb	r3, [r7, #3]
    AM_REGn(UART, ui32Module, DR) = data;
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1606:	331c      	adds	r3, #28
    1608:	031b      	lsls	r3, r3, #12
    160a:	461a      	mov	r2, r3
    160c:	78fb      	ldrb	r3, [r7, #3]
    160e:	6013      	str	r3, [r2, #0]
    while ( AM_BFRn(UART, ui32Module, FR, TXFF) );
    1610:	bf00      	nop
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1618:	331c      	adds	r3, #28
    161a:	031b      	lsls	r3, r3, #12
    161c:	3318      	adds	r3, #24
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	f003 0320 	and.w	r3, r3, #32
    1624:	095b      	lsrs	r3, r3, #5
    1626:	2b00      	cmp	r3, #0
    1628:	d1f3      	bne.n	1612 <ser_out+0x1e>
}
    162a:	bf00      	nop
    162c:	370c      	adds	r7, #12
    162e:	46bd      	mov	sp, r7
    1630:	f85d 7b04 	ldr.w	r7, [sp], #4
    1634:	4770      	bx	lr
    1636:	bf00      	nop

00001638 <am_multiboot_setup_serial>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_serial(int32_t i32Module, uint32_t ui32BaudRate)
{
    1638:	b580      	push	{r7, lr}
    163a:	b084      	sub	sp, #16
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
    1640:	6039      	str	r1, [r7, #0]
    uint32_t uartInt = AM_HAL_INTERRUPT_UART;
    1642:	231e      	movs	r3, #30
    1644:	60fb      	str	r3, [r7, #12]
    command = 0;
    1646:	4b23      	ldr	r3, [pc, #140]	; (16d4 <am_multiboot_setup_serial+0x9c>)
    1648:	2200      	movs	r2, #0
    164a:	601a      	str	r2, [r3, #0]
    uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
    164c:	2300      	movs	r3, #0
    164e:	4a22      	ldr	r2, [pc, #136]	; (16d8 <am_multiboot_setup_serial+0xa0>)
    1650:	6013      	str	r3, [r2, #0]
    1652:	4a22      	ldr	r2, [pc, #136]	; (16dc <am_multiboot_setup_serial+0xa4>)
    1654:	6013      	str	r3, [r2, #0]
    1656:	4a22      	ldr	r2, [pc, #136]	; (16e0 <am_multiboot_setup_serial+0xa8>)
    1658:	6013      	str	r3, [r2, #0]
    RX_FIFO_FULL = 0;  // check serial FIFO operation
    165a:	4b22      	ldr	r3, [pc, #136]	; (16e4 <am_multiboot_setup_serial+0xac>)
    165c:	2200      	movs	r2, #0
    165e:	701a      	strb	r2, [r3, #0]
    RX_FIFO_EMPTY = 1;
    1660:	4b21      	ldr	r3, [pc, #132]	; (16e8 <am_multiboot_setup_serial+0xb0>)
    1662:	2201      	movs	r2, #1
    1664:	701a      	strb	r2, [r3, #0]
    packet_cnt = 0xff;
    1666:	4b21      	ldr	r3, [pc, #132]	; (16ec <am_multiboot_setup_serial+0xb4>)
    1668:	22ff      	movs	r2, #255	; 0xff
    166a:	601a      	str	r2, [r3, #0]

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(i32Module);
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	4618      	mov	r0, r3
    1670:	f001 f940 	bl	28f4 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	4618      	mov	r0, r3
    1678:	f001 f950 	bl	291c <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	4618      	mov	r0, r3
    1680:	f001 f924 	bl	28cc <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    g_sUartConfig.ui32BaudRate = ui32BaudRate;
    1684:	4a1a      	ldr	r2, [pc, #104]	; (16f0 <am_multiboot_setup_serial+0xb8>)
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	6013      	str	r3, [r2, #0]
    am_hal_uart_config(i32Module, &g_sUartConfig);
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	4918      	ldr	r1, [pc, #96]	; (16f0 <am_multiboot_setup_serial+0xb8>)
    168e:	4618      	mov	r0, r3
    1690:	f001 f8ba 	bl	2808 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
   am_hal_uart_fifo_config(i32Module,
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	211b      	movs	r1, #27
    1698:	4618      	mov	r0, r3
    169a:	f001 f951 	bl	2940 <am_hal_uart_fifo_config>

//    am_util_delay_ms(100);
    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	4618      	mov	r0, r3
    16a2:	f001 f8ff 	bl	28a4 <am_hal_uart_enable>

    am_hal_uart_int_clear(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	2150      	movs	r1, #80	; 0x50
    16aa:	4618      	mov	r0, r3
    16ac:	f001 f8ec 	bl	2888 <am_hal_uart_int_clear>
    am_hal_uart_int_enable(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	2150      	movs	r1, #80	; 0x50
    16b4:	4618      	mov	r0, r3
    16b6:	f001 f8ed 	bl	2894 <am_hal_uart_int_enable>

#ifndef AM_PART_APOLLO
    if (i32Module == 1)
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	2b01      	cmp	r3, #1
    16be:	d101      	bne.n	16c4 <am_multiboot_setup_serial+0x8c>
    {
        uartInt = AM_HAL_INTERRUPT_UART1;
    16c0:	231f      	movs	r3, #31
    16c2:	60fb      	str	r3, [r7, #12]
    }
#endif
    am_hal_interrupt_enable(uartInt);
    16c4:	68f8      	ldr	r0, [r7, #12]
    16c6:	f000 fdbb 	bl	2240 <am_hal_interrupt_enable>
}
    16ca:	bf00      	nop
    16cc:	3710      	adds	r7, #16
    16ce:	46bd      	mov	sp, r7
    16d0:	bd80      	pop	{r7, pc}
    16d2:	bf00      	nop
    16d4:	10001138 	.word	0x10001138
    16d8:	10001118 	.word	0x10001118
    16dc:	10001130 	.word	0x10001130
    16e0:	10001120 	.word	0x10001120
    16e4:	10001144 	.word	0x10001144
    16e8:	1000112d 	.word	0x1000112d
    16ec:	1000111c 	.word	0x1000111c
    16f0:	10001064 	.word	0x10001064

000016f4 <am_multiboot_uart_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_uart_isr_handler(uint32_t ui32Module)
{
    16f4:	b580      	push	{r7, lr}
    16f6:	b088      	sub	sp, #32
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
    uint32_t *rx_pui32Packet;
    unsigned char send_byte_cnt, flush = 0;
    16fc:	2300      	movs	r3, #0
    16fe:	77bb      	strb	r3, [r7, #30]
    uint32_t cnt = 0;
    1700:	2300      	movs	r3, #0
    1702:	61bb      	str	r3, [r7, #24]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_uart_int_status_get(ui32Module, false);
    1704:	2100      	movs	r1, #0
    1706:	6878      	ldr	r0, [r7, #4]
    1708:	f001 f8b4 	bl	2874 <am_hal_uart_int_status_get>
    170c:	6178      	str	r0, [r7, #20]
    am_hal_uart_int_clear(ui32Module, ui32Status);
    170e:	6979      	ldr	r1, [r7, #20]
    1710:	6878      	ldr	r0, [r7, #4]
    1712:	f001 f8b9 	bl	2888 <am_hal_uart_int_clear>
    //
    // Service the uart FIFO.
    //


    RX_FIFO_EMPTY = 0;
    1716:	4ba6      	ldr	r3, [pc, #664]	; (19b0 <am_multiboot_uart_isr_handler+0x2bc>)
    1718:	2200      	movs	r2, #0
    171a:	701a      	strb	r2, [r3, #0]
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
    171c:	e131      	b.n	1982 <am_multiboot_uart_isr_handler+0x28e>
    {
        if ( uart_RX_head == MAX_BUFFER )
    171e:	4ba5      	ldr	r3, [pc, #660]	; (19b4 <am_multiboot_uart_isr_handler+0x2c0>)
    1720:	681b      	ldr	r3, [r3, #0]
    1722:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
    1726:	d10c      	bne.n	1742 <am_multiboot_uart_isr_handler+0x4e>
        {
            // We should never reach here!
            RX_FIFO_FULL = 1;
    1728:	4ba3      	ldr	r3, [pc, #652]	; (19b8 <am_multiboot_uart_isr_handler+0x2c4>)
    172a:	2201      	movs	r2, #1
    172c:	701a      	strb	r2, [r3, #0]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
    172e:	4ba3      	ldr	r3, [pc, #652]	; (19bc <am_multiboot_uart_isr_handler+0x2c8>)
    1730:	60bb      	str	r3, [r7, #8]
            //
            // Bad packet; Send back an error.
            //
            tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    1732:	68bb      	ldr	r3, [r7, #8]
    1734:	2205      	movs	r2, #5
    1736:	601a      	str	r2, [r3, #0]
            flush = 1;
    1738:	2301      	movs	r3, #1
    173a:	77bb      	strb	r3, [r7, #30]
            send_byte_cnt = 4;
    173c:	2304      	movs	r3, #4
    173e:	77fb      	strb	r3, [r7, #31]
            break;
    1740:	e12c      	b.n	199c <am_multiboot_uart_isr_handler+0x2a8>
        }
        rxData = AM_REGn(UART, ui32Module, DR);
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1748:	331c      	adds	r3, #28
    174a:	031b      	lsls	r3, r3, #12
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	74fb      	strb	r3, [r7, #19]
        uart_RX_buffer[uart_RX_head++] = rxData;
    1750:	4b98      	ldr	r3, [pc, #608]	; (19b4 <am_multiboot_uart_isr_handler+0x2c0>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	1c5a      	adds	r2, r3, #1
    1756:	4997      	ldr	r1, [pc, #604]	; (19b4 <am_multiboot_uart_isr_handler+0x2c0>)
    1758:	600a      	str	r2, [r1, #0]
    175a:	4999      	ldr	r1, [pc, #612]	; (19c0 <am_multiboot_uart_isr_handler+0x2cc>)
    175c:	7cfa      	ldrb	r2, [r7, #19]
    175e:	54ca      	strb	r2, [r1, r3]

        uart_RX_cnt++;
    1760:	4b98      	ldr	r3, [pc, #608]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    1762:	681b      	ldr	r3, [r3, #0]
    1764:	3301      	adds	r3, #1
    1766:	4a97      	ldr	r2, [pc, #604]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    1768:	6013      	str	r3, [r2, #0]
        cnt++;
    176a:	69bb      	ldr	r3, [r7, #24]
    176c:	3301      	adds	r3, #1
    176e:	61bb      	str	r3, [r7, #24]

        if ( uart_RX_cnt == 4 ) // cmd received, wait for parameters
    1770:	4b94      	ldr	r3, [pc, #592]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	2b04      	cmp	r3, #4
    1776:	d142      	bne.n	17fe <am_multiboot_uart_isr_handler+0x10a>
        {
            command = uart_RX_buffer[0];
    1778:	4b91      	ldr	r3, [pc, #580]	; (19c0 <am_multiboot_uart_isr_handler+0x2cc>)
    177a:	781b      	ldrb	r3, [r3, #0]
    177c:	b2db      	uxtb	r3, r3
    177e:	461a      	mov	r2, r3
    1780:	4b91      	ldr	r3, [pc, #580]	; (19c8 <am_multiboot_uart_isr_handler+0x2d4>)
    1782:	601a      	str	r2, [r3, #0]
            switch (command)
    1784:	4b90      	ldr	r3, [pc, #576]	; (19c8 <am_multiboot_uart_isr_handler+0x2d4>)
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	2b09      	cmp	r3, #9
    178a:	d833      	bhi.n	17f4 <am_multiboot_uart_isr_handler+0x100>
    178c:	a201      	add	r2, pc, #4	; (adr r2, 1794 <am_multiboot_uart_isr_handler+0xa0>)
    178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1792:	bf00      	nop
    1794:	000017dd 	.word	0x000017dd
    1798:	000017e5 	.word	0x000017e5
    179c:	000017bd 	.word	0x000017bd
    17a0:	000017fd 	.word	0x000017fd
    17a4:	000017cd 	.word	0x000017cd
    17a8:	000017c5 	.word	0x000017c5
    17ac:	000017d5 	.word	0x000017d5
    17b0:	000017f5 	.word	0x000017f5
    17b4:	000017f5 	.word	0x000017f5
    17b8:	000017ed 	.word	0x000017ed
            {
                case AM_BOOTLOADER_NEW_IMAGE:
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
    17bc:	4b83      	ldr	r3, [pc, #524]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17be:	2210      	movs	r2, #16
    17c0:	601a      	str	r2, [r3, #0]
#endif
                    break;
    17c2:	e01c      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
    17c4:	4b81      	ldr	r3, [pc, #516]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17c6:	220c      	movs	r2, #12
    17c8:	601a      	str	r2, [r3, #0]
                    break;
    17ca:	e018      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
                case AM_BOOTLOADER_RESET:
                    packet_cnt = 4;
    17cc:	4b7f      	ldr	r3, [pc, #508]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17ce:	2204      	movs	r2, #4
    17d0:	601a      	str	r2, [r3, #0]
                    break;
    17d2:	e014      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_BL_VERSION_CMD:
                    packet_cnt = 4;
    17d4:	4b7d      	ldr	r3, [pc, #500]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17d6:	2204      	movs	r2, #4
    17d8:	601a      	str	r2, [r3, #0]
                    break;
    17da:	e010      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_ACK_CMD:
                    packet_cnt = 4;
    17dc:	4b7b      	ldr	r3, [pc, #492]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17de:	2204      	movs	r2, #4
    17e0:	601a      	str	r2, [r3, #0]
                    break;
    17e2:	e00c      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_NAK_CMD:
                    packet_cnt = 4;
    17e4:	4b79      	ldr	r3, [pc, #484]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17e6:	2204      	movs	r2, #4
    17e8:	601a      	str	r2, [r3, #0]
                    break;
    17ea:	e008      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_RESTART:
                    packet_cnt = 4;
    17ec:	4b77      	ldr	r3, [pc, #476]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17ee:	2204      	movs	r2, #4
    17f0:	601a      	str	r2, [r3, #0]
                    break;
    17f2:	e004      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                default:
                    // Unknown command
                    packet_cnt = 4;
    17f4:	4b75      	ldr	r3, [pc, #468]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    17f6:	2204      	movs	r2, #4
    17f8:	601a      	str	r2, [r3, #0]
                    break;
    17fa:	e000      	b.n	17fe <am_multiboot_uart_isr_handler+0x10a>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
                    break;
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
    17fc:	bf00      	nop
                    packet_cnt = 4;
                    break;
            }
        }

        if ( (command == AM_BOOTLOADER_NEW_PACKET) && (uart_RX_cnt == 8) )
    17fe:	4b72      	ldr	r3, [pc, #456]	; (19c8 <am_multiboot_uart_isr_handler+0x2d4>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	2b03      	cmp	r3, #3
    1804:	d10c      	bne.n	1820 <am_multiboot_uart_isr_handler+0x12c>
    1806:	4b6f      	ldr	r3, [pc, #444]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	2b08      	cmp	r3, #8
    180c:	d108      	bne.n	1820 <am_multiboot_uart_isr_handler+0x12c>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[4]);
    180e:	4b70      	ldr	r3, [pc, #448]	; (19d0 <am_multiboot_uart_isr_handler+0x2dc>)
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	4a70      	ldr	r2, [pc, #448]	; (19d4 <am_multiboot_uart_isr_handler+0x2e0>)
    1814:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 8;
    1816:	4b6f      	ldr	r3, [pc, #444]	; (19d4 <am_multiboot_uart_isr_handler+0x2e0>)
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	3308      	adds	r3, #8
    181c:	4a6b      	ldr	r2, [pc, #428]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    181e:	6013      	str	r3, [r2, #0]
            pkt_size = *(uint32_t *) (&uart_RX_buffer[16]);
            packet_cnt = pkt_size + 20;
        }
#endif

        if ( (uart_RX_cnt >= 4) && (uart_RX_cnt == packet_cnt) )
    1820:	4b68      	ldr	r3, [pc, #416]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    1822:	681b      	ldr	r3, [r3, #0]
    1824:	2b03      	cmp	r3, #3
    1826:	f240 80ac 	bls.w	1982 <am_multiboot_uart_isr_handler+0x28e>
    182a:	4b66      	ldr	r3, [pc, #408]	; (19c4 <am_multiboot_uart_isr_handler+0x2d0>)
    182c:	681a      	ldr	r2, [r3, #0]
    182e:	4b67      	ldr	r3, [pc, #412]	; (19cc <am_multiboot_uart_isr_handler+0x2d8>)
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	429a      	cmp	r2, r3
    1834:	f040 80a5 	bne.w	1982 <am_multiboot_uart_isr_handler+0x28e>
        {
            rx_pui32Packet = (uint32_t *) uart_RX_buffer;
    1838:	4b61      	ldr	r3, [pc, #388]	; (19c0 <am_multiboot_uart_isr_handler+0x2cc>)
    183a:	60fb      	str	r3, [r7, #12]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
    183c:	4b5f      	ldr	r3, [pc, #380]	; (19bc <am_multiboot_uart_isr_handler+0x2c8>)
    183e:	60bb      	str	r3, [r7, #8]

            switch (rx_pui32Packet[0])
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	681b      	ldr	r3, [r3, #0]
    1844:	2b09      	cmp	r3, #9
    1846:	f200 8092 	bhi.w	196e <am_multiboot_uart_isr_handler+0x27a>
    184a:	a201      	add	r2, pc, #4	; (adr r2, 1850 <am_multiboot_uart_isr_handler+0x15c>)
    184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1850:	0000197f 	.word	0x0000197f
    1854:	0000197f 	.word	0x0000197f
    1858:	00001879 	.word	0x00001879
    185c:	000018cb 	.word	0x000018cb
    1860:	00001947 	.word	0x00001947
    1864:	000018ab 	.word	0x000018ab
    1868:	00001957 	.word	0x00001957
    186c:	0000196f 	.word	0x0000196f
    1870:	0000196f 	.word	0x0000196f
    1874:	00001951 	.word	0x00001951
                case AM_BOOTLOADER_NEW_IMAGE:
                    //
                    // Parse the image packet, and store the result to the global
                    // image structure.
                    //
                    g_bUartImageValid = image_start_packet_read(&g_sImage,
    1878:	4951      	ldr	r1, [pc, #324]	; (19c0 <am_multiboot_uart_isr_handler+0x2cc>)
    187a:	4857      	ldr	r0, [pc, #348]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    187c:	f7ff fba8 	bl	fd0 <image_start_packet_read>
    1880:	4603      	mov	r3, r0
    1882:	461a      	mov	r2, r3
    1884:	4b55      	ldr	r3, [pc, #340]	; (19dc <am_multiboot_uart_isr_handler+0x2e8>)
    1886:	701a      	strb	r2, [r3, #0]

                    //
                    // Make sure the image packet had reasonable contents. If it
                    // didn't, we need to let the host know.
                    //
                    if ( g_bUartImageValid )
    1888:	4b54      	ldr	r3, [pc, #336]	; (19dc <am_multiboot_uart_isr_handler+0x2e8>)
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	b2db      	uxtb	r3, r3
    188e:	2b00      	cmp	r3, #0
    1890:	d003      	beq.n	189a <am_multiboot_uart_isr_handler+0x1a6>
                    {
                        //
                        // Good image; Send back a "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    1892:	68bb      	ldr	r3, [r7, #8]
    1894:	2202      	movs	r2, #2
    1896:	601a      	str	r2, [r3, #0]
    1898:	e002      	b.n	18a0 <am_multiboot_uart_isr_handler+0x1ac>
                    else
                    {
                        //
                        // Bad image; Send back an error.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    189a:	68bb      	ldr	r3, [r7, #8]
    189c:	2205      	movs	r2, #5
    189e:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
    18a0:	2301      	movs	r3, #1
    18a2:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    18a4:	2304      	movs	r3, #4
    18a6:	77fb      	strb	r3, [r7, #31]
                    break;
    18a8:	e06a      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    //
                    // Set the override GPIO settings based on the packet
                    // information.
                    //
                    g_sImage.ui32OverrideGPIO = rx_pui32Packet[1];
    18aa:	68fb      	ldr	r3, [r7, #12]
    18ac:	685b      	ldr	r3, [r3, #4]
    18ae:	4a4a      	ldr	r2, [pc, #296]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    18b0:	60d3      	str	r3, [r2, #12]
                    g_sImage.ui32OverridePolarity = rx_pui32Packet[2];
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	689b      	ldr	r3, [r3, #8]
    18b6:	4a48      	ldr	r2, [pc, #288]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    18b8:	6113      	str	r3, [r2, #16]

                    //
                    // Send back a "READY" packet.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    18ba:	68bb      	ldr	r3, [r7, #8]
    18bc:	2202      	movs	r2, #2
    18be:	601a      	str	r2, [r3, #0]
                    flush = 1;
    18c0:	2301      	movs	r3, #1
    18c2:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    18c4:	2304      	movs	r3, #4
    18c6:	77fb      	strb	r3, [r7, #31]
                    break;
    18c8:	e05a      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>

                case AM_BOOTLOADER_NEW_PACKET:
                    //
                    // Only take new packets if our image structure is valid.
                    //
                    if ( !g_bUartImageValid )
    18ca:	4b44      	ldr	r3, [pc, #272]	; (19dc <am_multiboot_uart_isr_handler+0x2e8>)
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	b2db      	uxtb	r3, r3
    18d0:	f083 0301 	eor.w	r3, r3, #1
    18d4:	b2db      	uxtb	r3, r3
    18d6:	2b00      	cmp	r3, #0
    18d8:	d003      	beq.n	18e2 <am_multiboot_uart_isr_handler+0x1ee>
                    {
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    18da:	68bb      	ldr	r3, [r7, #8]
    18dc:	2205      	movs	r2, #5
    18de:	601a      	str	r2, [r3, #0]
                        break;
    18e0:	e04e      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
    18e2:	4a3f      	ldr	r2, [pc, #252]	; (19e0 <am_multiboot_uart_isr_handler+0x2ec>)
                        *((uint32_t *)(uart_RX_buffer + 4)));
    18e4:	4b3a      	ldr	r3, [pc, #232]	; (19d0 <am_multiboot_uart_isr_handler+0x2dc>)
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	4619      	mov	r1, r3
    18ea:	4610      	mov	r0, r2
    18ec:	f7ff fbde 	bl	10ac <image_data_packet_read>
                        *((uint32_t *)(uart_RX_buffer + 4)));

                    //
                    // If this packet completed the image...
                    //
                    if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
    18f0:	4b39      	ldr	r3, [pc, #228]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    18f2:	685a      	ldr	r2, [r3, #4]
    18f4:	4b3b      	ldr	r3, [pc, #236]	; (19e4 <am_multiboot_uart_isr_handler+0x2f0>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	429a      	cmp	r2, r3
    18fa:	d11c      	bne.n	1936 <am_multiboot_uart_isr_handler+0x242>
                    {
#ifdef MULTIBOOT_SECURE
                        if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
#else
                        if ( g_ui32CRC != g_sImage.ui32CRC )
    18fc:	4b36      	ldr	r3, [pc, #216]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    18fe:	689a      	ldr	r2, [r3, #8]
    1900:	4b39      	ldr	r3, [pc, #228]	; (19e8 <am_multiboot_uart_isr_handler+0x2f4>)
    1902:	681b      	ldr	r3, [r3, #0]
    1904:	429a      	cmp	r2, r3
    1906:	d003      	beq.n	1910 <am_multiboot_uart_isr_handler+0x21c>
#endif
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
    1908:	68bb      	ldr	r3, [r7, #8]
    190a:	2204      	movs	r2, #4
    190c:	601a      	str	r2, [r3, #0]
    190e:	e015      	b.n	193c <am_multiboot_uart_isr_handler+0x248>
                        }
                        else
                        {
                            // Protect (and optionally write if stored in SRAM)
                            // image in flash now as it has been validated now
                            program_image(g_sImage.bEncrypted);
    1910:	4b31      	ldr	r3, [pc, #196]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    1912:	69db      	ldr	r3, [r3, #28]
    1914:	4618      	mov	r0, r3
    1916:	f7ff fb07 	bl	f28 <program_image>
                            // Validate the flash contents of a boot image to make
                            // sure it's safe to run
                            if ( am_bootloader_flash_check(&g_sImage) )
    191a:	482f      	ldr	r0, [pc, #188]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    191c:	f7fe fc30 	bl	180 <am_bootloader_flash_check>
    1920:	4603      	mov	r3, r0
    1922:	2b00      	cmp	r3, #0
    1924:	d003      	beq.n	192e <am_multiboot_uart_isr_handler+0x23a>
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
    1926:	68bb      	ldr	r3, [r7, #8]
    1928:	2203      	movs	r2, #3
    192a:	601a      	str	r2, [r3, #0]
    192c:	e006      	b.n	193c <am_multiboot_uart_isr_handler+0x248>
                            }
                            else
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    192e:	68bb      	ldr	r3, [r7, #8]
    1930:	2205      	movs	r2, #5
    1932:	601a      	str	r2, [r3, #0]
    1934:	e002      	b.n	193c <am_multiboot_uart_isr_handler+0x248>
                    {
                        //
                        // If this wasn't the end of the image, just send back a
                        // "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    1936:	68bb      	ldr	r3, [r7, #8]
    1938:	2202      	movs	r2, #2
    193a:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
    193c:	2301      	movs	r3, #1
    193e:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    1940:	2304      	movs	r3, #4
    1942:	77fb      	strb	r3, [r7, #31]

                    break;
    1944:	e01c      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>
                    if ( USE_FLAG_PAGE )
                    {
                        //
                        // Write the flag page.
                        //
                        am_bootloader_flag_page_update(&g_sImage,
    1946:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    194a:	4823      	ldr	r0, [pc, #140]	; (19d8 <am_multiboot_uart_isr_handler+0x2e4>)
    194c:	f7fe fe08 	bl	560 <am_bootloader_flag_page_update>

                case AM_BOOTLOADER_RESTART:
                    //
                    // Perform a software reset.
                    //
                    am_hal_reset_poi();
    1950:	f000 fe88 	bl	2664 <am_hal_reset_poi>

                    //
                    // Wait for the reset to take effect.
                    //
                    while (1);
    1954:	e7fe      	b.n	1954 <am_multiboot_uart_isr_handler+0x260>

                case AM_BOOTLOADER_BL_VERSION_CMD:
                    //
                    // Respond with the version number.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
    1956:	68bb      	ldr	r3, [r7, #8]
    1958:	2206      	movs	r2, #6
    195a:	601a      	str	r2, [r3, #0]
                    tx_pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
    195c:	68bb      	ldr	r3, [r7, #8]
    195e:	3304      	adds	r3, #4
    1960:	2201      	movs	r2, #1
    1962:	601a      	str	r2, [r3, #0]

                    flush = 1;
    1964:	2301      	movs	r3, #1
    1966:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 8;
    1968:	2308      	movs	r3, #8
    196a:	77fb      	strb	r3, [r7, #31]
                    break;
    196c:	e008      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>
                case AM_BOOTLOADER_NAK_CMD:
                    break;

                default:
                    // Error
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    196e:	68bb      	ldr	r3, [r7, #8]
    1970:	2205      	movs	r2, #5
    1972:	601a      	str	r2, [r3, #0]
                    flush = 1;
    1974:	2301      	movs	r3, #1
    1976:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    1978:	2304      	movs	r3, #4
    197a:	77fb      	strb	r3, [r7, #31]
                    break;
    197c:	e000      	b.n	1980 <am_multiboot_uart_isr_handler+0x28c>
                    send_byte_cnt = 8;
                    break;

                case AM_BOOTLOADER_ACK_CMD:
                case AM_BOOTLOADER_NAK_CMD:
                    break;
    197e:	bf00      	nop
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
                    flush = 1;
                    send_byte_cnt = 4;
                    break;
            }
            break;
    1980:	e00c      	b.n	199c <am_multiboot_uart_isr_handler+0x2a8>
    //


    RX_FIFO_EMPTY = 0;
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1988:	331c      	adds	r3, #28
    198a:	031b      	lsls	r3, r3, #12
    198c:	3318      	adds	r3, #24
    198e:	681b      	ldr	r3, [r3, #0]
    1990:	f003 0310 	and.w	r3, r3, #16
    1994:	091b      	lsrs	r3, r3, #4
    1996:	2b00      	cmp	r3, #0
    1998:	f43f aec1 	beq.w	171e <am_multiboot_uart_isr_handler+0x2a>
            }
            break;
        }
    }

    if ( flush )
    199c:	7fbb      	ldrb	r3, [r7, #30]
    199e:	2b00      	cmp	r3, #0
    19a0:	d051      	beq.n	1a46 <am_multiboot_uart_isr_handler+0x352>
    {
        uart_TX_tail = 0;
    19a2:	4b12      	ldr	r3, [pc, #72]	; (19ec <am_multiboot_uart_isr_handler+0x2f8>)
    19a4:	2200      	movs	r2, #0
    19a6:	701a      	strb	r2, [r3, #0]

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
    19a8:	2300      	movs	r3, #0
    19aa:	61bb      	str	r3, [r7, #24]
    19ac:	e030      	b.n	1a10 <am_multiboot_uart_isr_handler+0x31c>
    19ae:	bf00      	nop
    19b0:	1000112d 	.word	0x1000112d
    19b4:	10001120 	.word	0x10001120
    19b8:	10001144 	.word	0x10001144
    19bc:	10001124 	.word	0x10001124
    19c0:	10001148 	.word	0x10001148
    19c4:	10001118 	.word	0x10001118
    19c8:	10001138 	.word	0x10001138
    19cc:	1000111c 	.word	0x1000111c
    19d0:	1000114c 	.word	0x1000114c
    19d4:	10001350 	.word	0x10001350
    19d8:	10001018 	.word	0x10001018
    19dc:	100010fc 	.word	0x100010fc
    19e0:	10001150 	.word	0x10001150
    19e4:	100010f0 	.word	0x100010f0
    19e8:	100010f4 	.word	0x100010f4
    19ec:	10001354 	.word	0x10001354
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
    19f0:	4b17      	ldr	r3, [pc, #92]	; (1a50 <am_multiboot_uart_isr_handler+0x35c>)
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	1c5a      	adds	r2, r3, #1
    19f6:	b2d1      	uxtb	r1, r2
    19f8:	4a15      	ldr	r2, [pc, #84]	; (1a50 <am_multiboot_uart_isr_handler+0x35c>)
    19fa:	7011      	strb	r1, [r2, #0]
    19fc:	461a      	mov	r2, r3
    19fe:	4b15      	ldr	r3, [pc, #84]	; (1a54 <am_multiboot_uart_isr_handler+0x360>)
    1a00:	5c9b      	ldrb	r3, [r3, r2]
    1a02:	4619      	mov	r1, r3
    1a04:	6878      	ldr	r0, [r7, #4]
    1a06:	f7ff fdf5 	bl	15f4 <ser_out>

    if ( flush )
    {
        uart_TX_tail = 0;

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
    1a0a:	69bb      	ldr	r3, [r7, #24]
    1a0c:	3301      	adds	r3, #1
    1a0e:	61bb      	str	r3, [r7, #24]
    1a10:	7ffa      	ldrb	r2, [r7, #31]
    1a12:	69bb      	ldr	r3, [r7, #24]
    1a14:	429a      	cmp	r2, r3
    1a16:	d8eb      	bhi.n	19f0 <am_multiboot_uart_isr_handler+0x2fc>
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
        }
        command = 0;
    1a18:	4b0f      	ldr	r3, [pc, #60]	; (1a58 <am_multiboot_uart_isr_handler+0x364>)
    1a1a:	2200      	movs	r2, #0
    1a1c:	601a      	str	r2, [r3, #0]
        uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
    1a1e:	2300      	movs	r3, #0
    1a20:	4a0e      	ldr	r2, [pc, #56]	; (1a5c <am_multiboot_uart_isr_handler+0x368>)
    1a22:	6013      	str	r3, [r2, #0]
    1a24:	4a0e      	ldr	r2, [pc, #56]	; (1a60 <am_multiboot_uart_isr_handler+0x36c>)
    1a26:	6013      	str	r3, [r2, #0]
    1a28:	4a0e      	ldr	r2, [pc, #56]	; (1a64 <am_multiboot_uart_isr_handler+0x370>)
    1a2a:	6013      	str	r3, [r2, #0]
        RX_FIFO_FULL = 0;  // check serial FIFO operation
    1a2c:	4b0e      	ldr	r3, [pc, #56]	; (1a68 <am_multiboot_uart_isr_handler+0x374>)
    1a2e:	2200      	movs	r2, #0
    1a30:	701a      	strb	r2, [r3, #0]
        RX_FIFO_EMPTY = 1;
    1a32:	4b0e      	ldr	r3, [pc, #56]	; (1a6c <am_multiboot_uart_isr_handler+0x378>)
    1a34:	2201      	movs	r2, #1
    1a36:	701a      	strb	r2, [r3, #0]
        flush = 0;
    1a38:	2300      	movs	r3, #0
    1a3a:	77bb      	strb	r3, [r7, #30]
        send_byte_cnt = 0;
    1a3c:	2300      	movs	r3, #0
    1a3e:	77fb      	strb	r3, [r7, #31]
        packet_cnt = 0xff;
    1a40:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <am_multiboot_uart_isr_handler+0x37c>)
    1a42:	22ff      	movs	r2, #255	; 0xff
    1a44:	601a      	str	r2, [r3, #0]
    }

}
    1a46:	bf00      	nop
    1a48:	3720      	adds	r7, #32
    1a4a:	46bd      	mov	sp, r7
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	bf00      	nop
    1a50:	10001354 	.word	0x10001354
    1a54:	10001124 	.word	0x10001124
    1a58:	10001138 	.word	0x10001138
    1a5c:	10001118 	.word	0x10001118
    1a60:	10001130 	.word	0x10001130
    1a64:	10001120 	.word	0x10001120
    1a68:	10001144 	.word	0x10001144
    1a6c:	1000112d 	.word	0x1000112d
    1a70:	1000111c 	.word	0x1000111c

00001a74 <am_multiboot_uart_detect_baudrate>:
//!
//! @return the computed baud rate.
//
//*****************************************************************************
uint32_t am_multiboot_uart_detect_baudrate(uint32_t ui32RxPin)
{
    1a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a78:	b087      	sub	sp, #28
    1a7a:	af00      	add	r7, sp, #0
    1a7c:	6078      	str	r0, [r7, #4]
    // We need to hit this register as early as possible, so we are skipping
    // all of the normal logic that checks to make sure we are responding to
    // the right GPIO. In the interest of time, we will just assume that this
    // interrupt is coming from the UART RX pin.
    //
    ui32Start = am_hal_systick_count();
    1a7e:	f000 febd 	bl	27fc <am_hal_systick_count>
    1a82:	6178      	str	r0, [r7, #20]
    // Wait for exactly 9 edges on the UART RX pin. This corresponds to the
    // number of edges in the byte 0x55 after the start bit. Using a simple
    // polling approach here gives us the best possible chance to catch every
    // single edge.
    //
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1a84:	bf00      	nop
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	08db      	lsrs	r3, r3, #3
    1a8a:	f003 0204 	and.w	r2, r3, #4
    1a8e:	4b6c      	ldr	r3, [pc, #432]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1a90:	4413      	add	r3, r2
    1a92:	681a      	ldr	r2, [r3, #0]
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	f003 031f 	and.w	r3, r3, #31
    1a9a:	fa22 f303 	lsr.w	r3, r2, r3
    1a9e:	f003 0301 	and.w	r3, r3, #1
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d0ef      	beq.n	1a86 <am_multiboot_uart_detect_baudrate+0x12>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1aa6:	bf00      	nop
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	08db      	lsrs	r3, r3, #3
    1aac:	f003 0204 	and.w	r2, r3, #4
    1ab0:	4b63      	ldr	r3, [pc, #396]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1ab2:	4413      	add	r3, r2
    1ab4:	681a      	ldr	r2, [r3, #0]
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	f003 031f 	and.w	r3, r3, #31
    1abc:	fa22 f303 	lsr.w	r3, r2, r3
    1ac0:	f003 0301 	and.w	r3, r3, #1
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d1ef      	bne.n	1aa8 <am_multiboot_uart_detect_baudrate+0x34>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1ac8:	bf00      	nop
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	08db      	lsrs	r3, r3, #3
    1ace:	f003 0204 	and.w	r2, r3, #4
    1ad2:	4b5b      	ldr	r3, [pc, #364]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1ad4:	4413      	add	r3, r2
    1ad6:	681a      	ldr	r2, [r3, #0]
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	f003 031f 	and.w	r3, r3, #31
    1ade:	fa22 f303 	lsr.w	r3, r2, r3
    1ae2:	f003 0301 	and.w	r3, r3, #1
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d0ef      	beq.n	1aca <am_multiboot_uart_detect_baudrate+0x56>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1aea:	bf00      	nop
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	08db      	lsrs	r3, r3, #3
    1af0:	f003 0204 	and.w	r2, r3, #4
    1af4:	4b52      	ldr	r3, [pc, #328]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1af6:	4413      	add	r3, r2
    1af8:	681a      	ldr	r2, [r3, #0]
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	f003 031f 	and.w	r3, r3, #31
    1b00:	fa22 f303 	lsr.w	r3, r2, r3
    1b04:	f003 0301 	and.w	r3, r3, #1
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d1ef      	bne.n	1aec <am_multiboot_uart_detect_baudrate+0x78>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1b0c:	bf00      	nop
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	08db      	lsrs	r3, r3, #3
    1b12:	f003 0204 	and.w	r2, r3, #4
    1b16:	4b4a      	ldr	r3, [pc, #296]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1b18:	4413      	add	r3, r2
    1b1a:	681a      	ldr	r2, [r3, #0]
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	f003 031f 	and.w	r3, r3, #31
    1b22:	fa22 f303 	lsr.w	r3, r2, r3
    1b26:	f003 0301 	and.w	r3, r3, #1
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d0ef      	beq.n	1b0e <am_multiboot_uart_detect_baudrate+0x9a>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1b2e:	bf00      	nop
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	08db      	lsrs	r3, r3, #3
    1b34:	f003 0204 	and.w	r2, r3, #4
    1b38:	4b41      	ldr	r3, [pc, #260]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1b3a:	4413      	add	r3, r2
    1b3c:	681a      	ldr	r2, [r3, #0]
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	f003 031f 	and.w	r3, r3, #31
    1b44:	fa22 f303 	lsr.w	r3, r2, r3
    1b48:	f003 0301 	and.w	r3, r3, #1
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d1ef      	bne.n	1b30 <am_multiboot_uart_detect_baudrate+0xbc>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1b50:	bf00      	nop
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	08db      	lsrs	r3, r3, #3
    1b56:	f003 0204 	and.w	r2, r3, #4
    1b5a:	4b39      	ldr	r3, [pc, #228]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1b5c:	4413      	add	r3, r2
    1b5e:	681a      	ldr	r2, [r3, #0]
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	f003 031f 	and.w	r3, r3, #31
    1b66:	fa22 f303 	lsr.w	r3, r2, r3
    1b6a:	f003 0301 	and.w	r3, r3, #1
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d0ef      	beq.n	1b52 <am_multiboot_uart_detect_baudrate+0xde>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1b72:	bf00      	nop
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	08db      	lsrs	r3, r3, #3
    1b78:	f003 0204 	and.w	r2, r3, #4
    1b7c:	4b30      	ldr	r3, [pc, #192]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1b7e:	4413      	add	r3, r2
    1b80:	681a      	ldr	r2, [r3, #0]
    1b82:	687b      	ldr	r3, [r7, #4]
    1b84:	f003 031f 	and.w	r3, r3, #31
    1b88:	fa22 f303 	lsr.w	r3, r2, r3
    1b8c:	f003 0301 	and.w	r3, r3, #1
    1b90:	2b00      	cmp	r3, #0
    1b92:	d1ef      	bne.n	1b74 <am_multiboot_uart_detect_baudrate+0x100>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1b94:	bf00      	nop
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	08db      	lsrs	r3, r3, #3
    1b9a:	f003 0204 	and.w	r2, r3, #4
    1b9e:	4b28      	ldr	r3, [pc, #160]	; (1c40 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1ba0:	4413      	add	r3, r2
    1ba2:	681a      	ldr	r2, [r3, #0]
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	f003 031f 	and.w	r3, r3, #31
    1baa:	fa22 f303 	lsr.w	r3, r2, r3
    1bae:	f003 0301 	and.w	r3, r3, #1
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d0ef      	beq.n	1b96 <am_multiboot_uart_detect_baudrate+0x122>

    //
    // Record the "end" time.
    //
    ui32End = am_hal_systick_count();
    1bb6:	f000 fe21 	bl	27fc <am_hal_systick_count>
    1bba:	6138      	str	r0, [r7, #16]
    am_hal_systick_stop();
    1bbc:	f000 fe10 	bl	27e0 <am_hal_systick_stop>
    // At this point, the timing-critical portion of the interrupt handler is
    // complete, and we are free to clean up our interrupt status. We only
    // intend to perform the automatic baud-rate detection once, so we will go
    // ahead and disable the interrupt on the UART RX pin now.
    //
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(ui32RxPin));
    1bc0:	f04f 0201 	mov.w	r2, #1
    1bc4:	f04f 0300 	mov.w	r3, #0
    1bc8:	6879      	ldr	r1, [r7, #4]
    1bca:	f1a1 0620 	sub.w	r6, r1, #32
    1bce:	f1c1 0020 	rsb	r0, r1, #32
    1bd2:	fa03 f901 	lsl.w	r9, r3, r1
    1bd6:	fa02 f606 	lsl.w	r6, r2, r6
    1bda:	ea49 0906 	orr.w	r9, r9, r6
    1bde:	fa22 f000 	lsr.w	r0, r2, r0
    1be2:	ea49 0900 	orr.w	r9, r9, r0
    1be6:	fa02 f801 	lsl.w	r8, r2, r1
    1bea:	4640      	mov	r0, r8
    1bec:	4649      	mov	r1, r9
    1bee:	f000 faf9 	bl	21e4 <am_hal_gpio_int_disable>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(ui32RxPin));
    1bf2:	f04f 0201 	mov.w	r2, #1
    1bf6:	f04f 0300 	mov.w	r3, #0
    1bfa:	6879      	ldr	r1, [r7, #4]
    1bfc:	f1a1 0620 	sub.w	r6, r1, #32
    1c00:	f1c1 0020 	rsb	r0, r1, #32
    1c04:	fa03 f501 	lsl.w	r5, r3, r1
    1c08:	fa02 f606 	lsl.w	r6, r2, r6
    1c0c:	4335      	orrs	r5, r6
    1c0e:	fa22 f000 	lsr.w	r0, r2, r0
    1c12:	4305      	orrs	r5, r0
    1c14:	fa02 f401 	lsl.w	r4, r2, r1
    1c18:	4620      	mov	r0, r4
    1c1a:	4629      	mov	r1, r5
    1c1c:	f000 fafe 	bl	221c <am_hal_gpio_int_clear>
    // Check to see how long those nine edges took to arrive. This should
    // correspond to exactly nine bit-times of UART traffic from the host. From
    // there, we can use the speed of the processor (which is known) to
    // calculate the host's baud rate.
    //
    ui32Counts = ui32Start - ui32End;
    1c20:	697a      	ldr	r2, [r7, #20]
    1c22:	693b      	ldr	r3, [r7, #16]
    1c24:	1ad3      	subs	r3, r2, r3
    1c26:	60fb      	str	r3, [r7, #12]
    ui32BaudRate = AM_HAL_CLKGEN_FREQ_MAX_HZ * 9 / ui32Counts;
    1c28:	4a06      	ldr	r2, [pc, #24]	; (1c44 <am_multiboot_uart_detect_baudrate+0x1d0>)
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	fbb2 f3f3 	udiv	r3, r2, r3
    1c30:	60bb      	str	r3, [r7, #8]
    return ui32BaudRate;
    1c32:	68bb      	ldr	r3, [r7, #8]
}
    1c34:	4618      	mov	r0, r3
    1c36:	371c      	adds	r7, #28
    1c38:	46bd      	mov	sp, r7
    1c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c3e:	bf00      	nop
    1c40:	40010080 	.word	0x40010080
    1c44:	19bfcc00 	.word	0x19bfcc00

00001c48 <am_ioslave_acc_isr>:
// IO Slave Register Access ISR.
//
//*****************************************************************************
void
am_ioslave_acc_isr(void)
{
    1c48:	b580      	push	{r7, lr}
    1c4a:	af00      	add	r7, sp, #0
    //
    // Make sure the main loop knows that the IOS is currently in use.
    //
    g_bIOSActive = true;
    1c4c:	4b03      	ldr	r3, [pc, #12]	; (1c5c <am_ioslave_acc_isr+0x14>)
    1c4e:	2201      	movs	r2, #1
    1c50:	701a      	strb	r2, [r3, #0]

    am_multiboot_ios_acc_isr_handler();
    1c52:	f7fe fd3d 	bl	6d0 <am_multiboot_ios_acc_isr_handler>
}
    1c56:	bf00      	nop
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	bf00      	nop
    1c5c:	100010fd 	.word	0x100010fd

00001c60 <am_gpio_isr>:
// Setting up a GPIO ISR for the UART autobaud feature.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	b082      	sub	sp, #8
    1c64:	af00      	add	r7, sp, #0
    uint32_t ui32BaudRate;

    ui32BaudRate = am_multiboot_uart_detect_baudrate(AM_BSP_GPIO_BOOTLOADER_UART_RX);
    1c66:	2017      	movs	r0, #23
    1c68:	f7ff ff04 	bl	1a74 <am_multiboot_uart_detect_baudrate>
    1c6c:	6078      	str	r0, [r7, #4]

    //
    // Now that we have a baud rate, we can configure our UART.
    //
    am_multiboot_setup_serial(AM_BSP_UART_BOOTLOADER_INST, ui32BaudRate);
    1c6e:	6879      	ldr	r1, [r7, #4]
    1c70:	2000      	movs	r0, #0
    1c72:	f7ff fce1 	bl	1638 <am_multiboot_setup_serial>
    //
    // Send a '0x55' to give the boot host some indication that we have the
    // correct baud rate and to let it know that our UART is ready for further
    // traffic.
    //
    am_hal_uart_char_transmit_polled(AM_BSP_UART_BOOTLOADER_INST, 0x55);
    1c76:	2155      	movs	r1, #85	; 0x55
    1c78:	2000      	movs	r0, #0
    1c7a:	f000 fe6b 	bl	2954 <am_hal_uart_char_transmit_polled>
    g_bUartConfigured = true;
    1c7e:	4b03      	ldr	r3, [pc, #12]	; (1c8c <am_gpio_isr+0x2c>)
    1c80:	2201      	movs	r2, #1
    1c82:	701a      	strb	r2, [r3, #0]
}
    1c84:	bf00      	nop
    1c86:	3708      	adds	r7, #8
    1c88:	46bd      	mov	sp, r7
    1c8a:	bd80      	pop	{r7, pc}
    1c8c:	100010fe 	.word	0x100010fe

00001c90 <am_uart_isr>:
#if (AM_BSP_UART_BOOTLOADER_INST == 0)
am_uart_isr(void)
#elif (AM_BSP_UART_BOOTLOADER_INST == 1)
am_uart1_isr(void)
#endif
{
    1c90:	b580      	push	{r7, lr}
    1c92:	af00      	add	r7, sp, #0
    am_multiboot_uart_isr_handler(AM_BSP_UART_BOOTLOADER_INST);
    1c94:	2000      	movs	r0, #0
    1c96:	f7ff fd2d 	bl	16f4 <am_multiboot_uart_isr_handler>
}
    1c9a:	bf00      	nop
    1c9c:	bd80      	pop	{r7, pc}
    1c9e:	bf00      	nop

00001ca0 <invalidate_ota>:
uint32_t sramTempBuf[TEMP_BUFSIZE/4];

#ifdef AM_MULTIBOOT_SUPPORT_OTA
// Invalidate the OTA - so that it is not processed again for next boot
void invalidate_ota(am_multiboot_ota_t *pOtaInfo)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b084      	sub	sp, #16
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
    uint32_t tempZero;
    uint32_t otaPtrVal = *((uint32_t *)OTA_POINTER_LOCATION);
    1ca8:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	60fb      	str	r3, [r7, #12]
    // CAUTION: We can reprogram a bit in flash to 0 only once...so make sure we do not re-clear bits
    tempZero = ~otaPtrVal;
    1cb0:	68fb      	ldr	r3, [r7, #12]
    1cb2:	43db      	mvns	r3, r3
    1cb4:	60bb      	str	r3, [r7, #8]
    // clear the value for subsequent boots
    am_bootloader_write_flash_within_page(OTA_POINTER_LOCATION, &tempZero, 1);
    1cb6:	f107 0308 	add.w	r3, r7, #8
    1cba:	2201      	movs	r2, #1
    1cbc:	4619      	mov	r1, r3
    1cbe:	f44f 40c2 	mov.w	r0, #24832	; 0x6100
    1cc2:	f7fe fca1 	bl	608 <am_bootloader_write_flash_within_page>
}
    1cc6:	bf00      	nop
    1cc8:	3710      	adds	r7, #16
    1cca:	46bd      	mov	sp, r7
    1ccc:	bd80      	pop	{r7, pc}
    1cce:	bf00      	nop

00001cd0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b08e      	sub	sp, #56	; 0x38
    1cd4:	af02      	add	r7, sp, #8
    am_bootloader_image_t *pBootImage;
    bool bOverride = false;
    1cd6:	2300      	movs	r3, #0
    1cd8:	77fb      	strb	r3, [r7, #31]
    bool bBootFromFlash = false;
    1cda:	2300      	movs	r3, #0
    1cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#ifdef AM_MULTIBOOT_SUPPORT_OTA
    uint32_t otaPtrVal = *((uint32_t *)OTA_POINTER_LOCATION);
    1ce0:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef AM_MULTIBOOT_SUPPORT_IOS
    //
    // Set the (active LOW) interrupt pin so the host knows we don't have a
    // message to send yet.
    //
    am_hal_gpio_out_bit_set(MULTIBOOT_IOS_INTERRUPT_PIN);
    1ce8:	4b92      	ldr	r3, [pc, #584]	; (1f34 <main+0x264>)
    1cea:	2210      	movs	r2, #16
    1cec:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_OUTPUT);
    1cee:	f3ef 8310 	mrs	r3, PRIMASK
    1cf2:	61bb      	str	r3, [r7, #24]
    1cf4:	b672      	cpsid	i
    1cf6:	4b90      	ldr	r3, [pc, #576]	; (1f38 <main+0x268>)
    1cf8:	2273      	movs	r2, #115	; 0x73
    1cfa:	601a      	str	r2, [r3, #0]
    1cfc:	4a8f      	ldr	r2, [pc, #572]	; (1f3c <main+0x26c>)
    1cfe:	4b8f      	ldr	r3, [pc, #572]	; (1f3c <main+0x26c>)
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1d0a:	6013      	str	r3, [r2, #0]
    1d0c:	4a8c      	ldr	r2, [pc, #560]	; (1f40 <main+0x270>)
    1d0e:	4b8c      	ldr	r3, [pc, #560]	; (1f40 <main+0x270>)
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1d16:	f043 0318 	orr.w	r3, r3, #24
    1d1a:	6013      	str	r3, [r2, #0]
    1d1c:	4a89      	ldr	r2, [pc, #548]	; (1f44 <main+0x274>)
    1d1e:	4b89      	ldr	r3, [pc, #548]	; (1f44 <main+0x274>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1d26:	6013      	str	r3, [r2, #0]
    1d28:	4b83      	ldr	r3, [pc, #524]	; (1f38 <main+0x268>)
    1d2a:	2200      	movs	r2, #0
    1d2c:	601a      	str	r2, [r3, #0]
    1d2e:	69bb      	ldr	r3, [r7, #24]
    1d30:	f383 8810 	msr	PRIMASK, r3
#endif

    bBootFromFlash = am_multiboot_check_boot_from_flash(&bOverride, &pBootImage);
    1d34:	f107 0220 	add.w	r2, r7, #32
    1d38:	f107 031f 	add.w	r3, r7, #31
    1d3c:	4611      	mov	r1, r2
    1d3e:	4618      	mov	r0, r3
    1d40:	f7ff fa30 	bl	11a4 <am_multiboot_check_boot_from_flash>
    1d44:	4603      	mov	r3, r0
    1d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (!bOverride)
    1d4a:	7ffb      	ldrb	r3, [r7, #31]
    1d4c:	f083 0301 	eor.w	r3, r3, #1
    1d50:	b2db      	uxtb	r3, r3
    1d52:	2b00      	cmp	r3, #0
    1d54:	d049      	beq.n	1dea <main+0x11a>
    {
#ifdef AM_MULTIBOOT_SUPPORT_OTA
        // Check if OTA available
        if ((otaPtrVal != 0xFFFFFFFF) && (otaPtrVal != 0))
    1d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d58:	f1b3 3fff 	cmp.w	r3, #4294967295
    1d5c:	d01c      	beq.n	1d98 <main+0xc8>
    1d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d60:	2b00      	cmp	r3, #0
    1d62:	d019      	beq.n	1d98 <main+0xc8>
        {
            //
            // Configure the board for low power.
            //
            am_bsp_low_power_init();
    1d64:	f000 f9b0 	bl	20c8 <am_bsp_low_power_init>
            //
            // If we get here, we're going to try to download a new image from a host
            // processor. Speed up the clocks and start turning on peripherals.
            //
            am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1d68:	2000      	movs	r0, #0
    1d6a:	f000 f9bf 	bl	20ec <am_hal_clkgen_sysclk_select>
            // function below does not return in case of success

#if USE_EXTERNAL_FLASH == 1
            if (am_multiboot_ota_handler((void *)otaPtrVal, sramTempBuf, sizeof(sramTempBuf), invalidate_ota, &g_extFlash) == false)
#else
            if (am_multiboot_ota_handler((void *)otaPtrVal, sramTempBuf, sizeof(sramTempBuf), invalidate_ota, NULL) == false)
    1d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1d70:	2300      	movs	r3, #0
    1d72:	9300      	str	r3, [sp, #0]
    1d74:	4b74      	ldr	r3, [pc, #464]	; (1f48 <main+0x278>)
    1d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1d7a:	4974      	ldr	r1, [pc, #464]	; (1f4c <main+0x27c>)
    1d7c:	f7ff fb50 	bl	1420 <am_multiboot_ota_handler>
    1d80:	4603      	mov	r3, r0
    1d82:	f083 0301 	eor.w	r3, r3, #1
    1d86:	b2db      	uxtb	r3, r3
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d005      	beq.n	1d98 <main+0xc8>
#endif //USE_EXTERNAL_FLASH == 1
            {
                if (bBootFromFlash)
    1d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1d90:	2b00      	cmp	r3, #0
    1d92:	d001      	beq.n	1d98 <main+0xc8>
                    // We want to run the flash image with clean slate...
                    // So doing a POI here, and the image will be run in the next boot
                    //
                    // Perform a software reset.
                    //
                    am_hal_reset_poi();
    1d94:	f000 fc66 	bl	2664 <am_hal_reset_poi>
                }
            }
        }
#endif
        if (bBootFromFlash)
    1d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d024      	beq.n	1dea <main+0x11a>
        {
#ifdef AM_MULTIBOOT_SUPPORT_IOS
            //
            // If everything looks good, disable the interrupt pin and run.
            //
            am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
    1da0:	f3ef 8310 	mrs	r3, PRIMASK
    1da4:	617b      	str	r3, [r7, #20]
    1da6:	b672      	cpsid	i
    1da8:	4b63      	ldr	r3, [pc, #396]	; (1f38 <main+0x268>)
    1daa:	2273      	movs	r2, #115	; 0x73
    1dac:	601a      	str	r2, [r3, #0]
    1dae:	4a63      	ldr	r2, [pc, #396]	; (1f3c <main+0x26c>)
    1db0:	4b62      	ldr	r3, [pc, #392]	; (1f3c <main+0x26c>)
    1db2:	681b      	ldr	r3, [r3, #0]
    1db4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1db8:	6013      	str	r3, [r2, #0]
    1dba:	4a61      	ldr	r2, [pc, #388]	; (1f40 <main+0x270>)
    1dbc:	4b60      	ldr	r3, [pc, #384]	; (1f40 <main+0x270>)
    1dbe:	681b      	ldr	r3, [r3, #0]
    1dc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1dc4:	f043 0318 	orr.w	r3, r3, #24
    1dc8:	6013      	str	r3, [r2, #0]
    1dca:	4a5e      	ldr	r2, [pc, #376]	; (1f44 <main+0x274>)
    1dcc:	4b5d      	ldr	r3, [pc, #372]	; (1f44 <main+0x274>)
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1dd4:	6013      	str	r3, [r2, #0]
    1dd6:	4b58      	ldr	r3, [pc, #352]	; (1f38 <main+0x268>)
    1dd8:	2200      	movs	r2, #0
    1dda:	601a      	str	r2, [r3, #0]
    1ddc:	697b      	ldr	r3, [r7, #20]
    1dde:	f383 8810 	msr	PRIMASK, r3
#endif
            am_bootloader_image_run(pBootImage);
    1de2:	6a3b      	ldr	r3, [r7, #32]
    1de4:	4618      	mov	r0, r3
    1de6:	f7fe fc47 	bl	678 <am_bootloader_image_run>
    }
    //
    // If we get here, we're going to try to download a new image from a host
    // processor. Speed up the clocks and start turning on peripherals.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1dea:	2000      	movs	r0, #0
    1dec:	f000 f97e 	bl	20ec <am_hal_clkgen_sysclk_select>
    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    1df0:	f000 f96a 	bl	20c8 <am_bsp_low_power_init>

    //
    // Provide temp buffer for multiboot to operate on
    //
    am_multiboot_init(sramTempBuf, sizeof(sramTempBuf));
    1df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1df8:	4854      	ldr	r0, [pc, #336]	; (1f4c <main+0x27c>)
    1dfa:	f7ff f8cd 	bl	f98 <am_multiboot_init>

#ifdef AM_MULTIBOOT_SUPPORT_IOS
    //
    // Start systick to measure time for the IOS timeout.
    //
    am_hal_systick_load(0x00FFFFFF);
    1dfe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1e02:	f000 fcf5 	bl	27f0 <am_hal_systick_load>
    am_hal_systick_start();
    1e06:	f000 fce3 	bl	27d0 <am_hal_systick_start>

    //
    // Enable the IOS. Choose the correct protocol based on the state of pin 0.
    //
    am_multiboot_setup_ios_interface(MULTIBOOT_IOS_INTERRUPT_PIN);
    1e0a:	2004      	movs	r0, #4
    1e0c:	f7fe fd9c 	bl	948 <am_multiboot_setup_ios_interface>

    //
    // Wait for a few milliseconds to see if anyone will send us data.
    //
    while ( g_bIOSActive
    1e10:	e002      	b.n	1e18 <main+0x148>
        )
    {
        //
        // Delay to avoid polling peripheral registers so frequently.
        //
        am_util_delay_ms(1);
    1e12:	2001      	movs	r0, #1
    1e14:	f000 f940 	bl	2098 <am_util_delay_ms>
    am_multiboot_setup_ios_interface(MULTIBOOT_IOS_INTERRUPT_PIN);

    //
    // Wait for a few milliseconds to see if anyone will send us data.
    //
    while ( g_bIOSActive
    1e18:	4b4d      	ldr	r3, [pc, #308]	; (1f50 <main+0x280>)
    1e1a:	781b      	ldrb	r3, [r3, #0]
    1e1c:	b2db      	uxtb	r3, r3
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d1f7      	bne.n	1e12 <main+0x142>
#ifdef AM_MULTIBOOT_SUPPORT_UART
        || am_hal_systick_count() > (0xFFFFFF - WAIT_IOS_BOOT_SYSTICK)
    1e22:	f000 fceb 	bl	27fc <am_hal_systick_count>
    1e26:	4602      	mov	r2, r0
    1e28:	4b4a      	ldr	r3, [pc, #296]	; (1f54 <main+0x284>)
    1e2a:	429a      	cmp	r2, r3
    1e2c:	d8f1      	bhi.n	1e12 <main+0x142>
    }

    //
    // If we didn't get any IOS packets, we'll move on to the UART option.
    //
    am_multiboot_cleanup_ios_interface();
    1e2e:	f7fe ff57 	bl	ce0 <am_multiboot_cleanup_ios_interface>
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
    1e32:	f3ef 8310 	mrs	r3, PRIMASK
    1e36:	613b      	str	r3, [r7, #16]
    1e38:	b672      	cpsid	i
    1e3a:	4b3f      	ldr	r3, [pc, #252]	; (1f38 <main+0x268>)
    1e3c:	2273      	movs	r2, #115	; 0x73
    1e3e:	601a      	str	r2, [r3, #0]
    1e40:	4a3e      	ldr	r2, [pc, #248]	; (1f3c <main+0x26c>)
    1e42:	4b3e      	ldr	r3, [pc, #248]	; (1f3c <main+0x26c>)
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1e4a:	6013      	str	r3, [r2, #0]
    1e4c:	4a3c      	ldr	r2, [pc, #240]	; (1f40 <main+0x270>)
    1e4e:	4b3c      	ldr	r3, [pc, #240]	; (1f40 <main+0x270>)
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1e56:	f043 0318 	orr.w	r3, r3, #24
    1e5a:	6013      	str	r3, [r2, #0]
    1e5c:	4a39      	ldr	r2, [pc, #228]	; (1f44 <main+0x274>)
    1e5e:	4b39      	ldr	r3, [pc, #228]	; (1f44 <main+0x274>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1e66:	6013      	str	r3, [r2, #0]
    1e68:	4b33      	ldr	r3, [pc, #204]	; (1f38 <main+0x268>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	601a      	str	r2, [r3, #0]
    1e6e:	693b      	ldr	r3, [r7, #16]
    1e70:	f383 8810 	msr	PRIMASK, r3
#ifdef AM_MULTIBOOT_SUPPORT_UART
#ifdef MULTIBOOT_DETECT_BAUDRATE
    //
    // Re-Start systick to measure time for autobaud and for the IOS timeout.
    //
    am_hal_systick_stop();
    1e74:	f000 fcb4 	bl	27e0 <am_hal_systick_stop>
    am_hal_systick_load(0x00FFFFFF);
    1e78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1e7c:	f000 fcb8 	bl	27f0 <am_hal_systick_load>
    am_hal_systick_start();
    1e80:	f000 fca6 	bl	27d0 <am_hal_systick_start>

    //
    // Configure our RX pin as a GPIO input with a falling edge interrupt.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_INPUT);
    1e84:	f3ef 8310 	mrs	r3, PRIMASK
    1e88:	60fb      	str	r3, [r7, #12]
    1e8a:	b672      	cpsid	i
    1e8c:	4b2a      	ldr	r3, [pc, #168]	; (1f38 <main+0x268>)
    1e8e:	2273      	movs	r2, #115	; 0x73
    1e90:	601a      	str	r2, [r3, #0]
    1e92:	4a31      	ldr	r2, [pc, #196]	; (1f58 <main+0x288>)
    1e94:	4b30      	ldr	r3, [pc, #192]	; (1f58 <main+0x288>)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    1e9c:	6013      	str	r3, [r2, #0]
    1e9e:	4a2f      	ldr	r2, [pc, #188]	; (1f5c <main+0x28c>)
    1ea0:	4b2e      	ldr	r3, [pc, #184]	; (1f5c <main+0x28c>)
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ea8:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    1eac:	6013      	str	r3, [r2, #0]
    1eae:	4a2c      	ldr	r2, [pc, #176]	; (1f60 <main+0x290>)
    1eb0:	4b2b      	ldr	r3, [pc, #172]	; (1f60 <main+0x290>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1eb8:	6013      	str	r3, [r2, #0]
    1eba:	4b1f      	ldr	r3, [pc, #124]	; (1f38 <main+0x268>)
    1ebc:	2200      	movs	r2, #0
    1ebe:	601a      	str	r2, [r3, #0]
    1ec0:	68fb      	ldr	r3, [r7, #12]
    1ec2:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_FALLING);
    1ec6:	f3ef 8310 	mrs	r3, PRIMASK
    1eca:	60bb      	str	r3, [r7, #8]
    1ecc:	b672      	cpsid	i
    1ece:	4b1a      	ldr	r3, [pc, #104]	; (1f38 <main+0x268>)
    1ed0:	2273      	movs	r2, #115	; 0x73
    1ed2:	601a      	str	r2, [r3, #0]
    1ed4:	4a20      	ldr	r2, [pc, #128]	; (1f58 <main+0x288>)
    1ed6:	4b20      	ldr	r3, [pc, #128]	; (1f58 <main+0x288>)
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1ede:	6013      	str	r3, [r2, #0]
    1ee0:	4b15      	ldr	r3, [pc, #84]	; (1f38 <main+0x268>)
    1ee2:	2200      	movs	r2, #0
    1ee4:	601a      	str	r2, [r3, #0]
    1ee6:	68bb      	ldr	r3, [r7, #8]
    1ee8:	f383 8810 	msr	PRIMASK, r3

    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1eec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    1ef0:	f04f 0100 	mov.w	r1, #0
    1ef4:	f000 f992 	bl	221c <am_hal_gpio_int_clear>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1ef8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    1efc:	f04f 0100 	mov.w	r1, #0
    1f00:	f000 f960 	bl	21c4 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    1f04:	201c      	movs	r0, #28
    1f06:	f000 f99b 	bl	2240 <am_hal_interrupt_enable>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    1f0a:	f000 f9e9 	bl	22e0 <am_hal_interrupt_master_enable>
    while(1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    1f0e:	f000 f9eb 	bl	22e8 <am_hal_interrupt_master_disable>
    1f12:	6278      	str	r0, [r7, #36]	; 0x24

        if (!g_bUartConfigured)
    1f14:	4b13      	ldr	r3, [pc, #76]	; (1f64 <main+0x294>)
    1f16:	781b      	ldrb	r3, [r3, #0]
    1f18:	b2db      	uxtb	r3, r3
    1f1a:	f083 0301 	eor.w	r3, r3, #1
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	2b00      	cmp	r3, #0
    1f22:	d021      	beq.n	1f68 <main+0x298>
        {
            // Wait for Baud rate detection
            am_hal_sysctrl_sleep(false);
    1f24:	2000      	movs	r0, #0
    1f26:	f000 fbb9 	bl	269c <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    1f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1f2c:	f000 f9e0 	bl	22f0 <am_hal_interrupt_master_set>
    1f30:	e7ed      	b.n	1f0e <main+0x23e>
    1f32:	bf00      	nop
    1f34:	40010090 	.word	0x40010090
    1f38:	40010060 	.word	0x40010060
    1f3c:	40010040 	.word	0x40010040
    1f40:	40010004 	.word	0x40010004
    1f44:	400100e4 	.word	0x400100e4
    1f48:	00001ca1 	.word	0x00001ca1
    1f4c:	10001358 	.word	0x10001358
    1f50:	100010fd 	.word	0x100010fd
    1f54:	006d83ff 	.word	0x006d83ff
    1f58:	40010048 	.word	0x40010048
    1f5c:	40010014 	.word	0x40010014
    1f60:	400100f4 	.word	0x400100f4
    1f64:	100010fe 	.word	0x100010fe
        else
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    1f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1f6a:	f000 f9c1 	bl	22f0 <am_hal_interrupt_master_set>
            break;
    1f6e:	bf00      	nop
        }
    }
    // ISR has already configured the UART by now
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1f70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    1f74:	f04f 0100 	mov.w	r1, #0
    1f78:	f000 f934 	bl	21e4 <am_hal_gpio_int_disable>
    am_hal_interrupt_disable(AM_HAL_INTERRUPT_GPIO);
    1f7c:	201c      	movs	r0, #28
    1f7e:	f000 f987 	bl	2290 <am_hal_interrupt_disable>
#endif

    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_TX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_TX);
    1f82:	f3ef 8310 	mrs	r3, PRIMASK
    1f86:	607b      	str	r3, [r7, #4]
    1f88:	b672      	cpsid	i
    1f8a:	4b1f      	ldr	r3, [pc, #124]	; (2008 <main+0x338>)
    1f8c:	2273      	movs	r2, #115	; 0x73
    1f8e:	601a      	str	r2, [r3, #0]
    1f90:	4a1e      	ldr	r2, [pc, #120]	; (200c <main+0x33c>)
    1f92:	4b1e      	ldr	r3, [pc, #120]	; (200c <main+0x33c>)
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    1f9a:	6013      	str	r3, [r2, #0]
    1f9c:	4a1c      	ldr	r2, [pc, #112]	; (2010 <main+0x340>)
    1f9e:	4b1c      	ldr	r3, [pc, #112]	; (2010 <main+0x340>)
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    1fa6:	6013      	str	r3, [r2, #0]
    1fa8:	4a1a      	ldr	r2, [pc, #104]	; (2014 <main+0x344>)
    1faa:	4b1a      	ldr	r3, [pc, #104]	; (2014 <main+0x344>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    1fb2:	6013      	str	r3, [r2, #0]
    1fb4:	4b14      	ldr	r3, [pc, #80]	; (2008 <main+0x338>)
    1fb6:	2200      	movs	r2, #0
    1fb8:	601a      	str	r2, [r3, #0]
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_RX);
    1fc0:	f3ef 8310 	mrs	r3, PRIMASK
    1fc4:	603b      	str	r3, [r7, #0]
    1fc6:	b672      	cpsid	i
    1fc8:	4b0f      	ldr	r3, [pc, #60]	; (2008 <main+0x338>)
    1fca:	2273      	movs	r2, #115	; 0x73
    1fcc:	601a      	str	r2, [r3, #0]
    1fce:	4a0f      	ldr	r2, [pc, #60]	; (200c <main+0x33c>)
    1fd0:	4b0e      	ldr	r3, [pc, #56]	; (200c <main+0x33c>)
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    1fd8:	6013      	str	r3, [r2, #0]
    1fda:	4a0d      	ldr	r2, [pc, #52]	; (2010 <main+0x340>)
    1fdc:	4b0c      	ldr	r3, [pc, #48]	; (2010 <main+0x340>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    1fe8:	6013      	str	r3, [r2, #0]
    1fea:	4a0a      	ldr	r2, [pc, #40]	; (2014 <main+0x344>)
    1fec:	4b09      	ldr	r3, [pc, #36]	; (2014 <main+0x344>)
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ff4:	6013      	str	r3, [r2, #0]
    1ff6:	4b04      	ldr	r3, [pc, #16]	; (2008 <main+0x338>)
    1ff8:	2200      	movs	r2, #0
    1ffa:	601a      	str	r2, [r3, #0]
    1ffc:	683b      	ldr	r3, [r7, #0]
    1ffe:	f383 8810 	msr	PRIMASK, r3
    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    2002:	f000 f96d 	bl	22e0 <am_hal_interrupt_master_enable>
    //
    // Loop forever - should never reach here
    //
    while (1)
    {
    }
    2006:	e7fe      	b.n	2006 <main+0x336>
    2008:	40010060 	.word	0x40010060
    200c:	40010048 	.word	0x40010048
    2010:	40010014 	.word	0x40010014
    2014:	400100f4 	.word	0x400100f4

00002018 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    2018:	4811      	ldr	r0, [pc, #68]	; (2060 <zero_loop+0x12>)
    201a:	4912      	ldr	r1, [pc, #72]	; (2064 <zero_loop+0x16>)
    201c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    201e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    2022:	4811      	ldr	r0, [pc, #68]	; (2068 <zero_loop+0x1a>)
    2024:	6801      	ldr	r1, [r0, #0]
    2026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    202a:	6001      	str	r1, [r0, #0]
    202c:	f3bf 8f4f 	dsb	sy
    2030:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    2034:	480d      	ldr	r0, [pc, #52]	; (206c <zero_loop+0x1e>)
    2036:	490e      	ldr	r1, [pc, #56]	; (2070 <zero_loop+0x22>)
    2038:	4a0e      	ldr	r2, [pc, #56]	; (2074 <zero_loop+0x26>)

0000203a <copy_loop>:
    203a:	f850 3b04 	ldr.w	r3, [r0], #4
    203e:	f841 3b04 	str.w	r3, [r1], #4
    2042:	4291      	cmp	r1, r2
    2044:	dbf9      	blt.n	203a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    2046:	480c      	ldr	r0, [pc, #48]	; (2078 <zero_loop+0x2a>)
    2048:	490c      	ldr	r1, [pc, #48]	; (207c <zero_loop+0x2e>)
    204a:	f04f 0200 	mov.w	r2, #0

0000204e <zero_loop>:
    204e:	4288      	cmp	r0, r1
    2050:	bfb8      	it	lt
    2052:	f840 2b04 	strlt.w	r2, [r0], #4
    2056:	dbfa      	blt.n	204e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    2058:	f7ff fe3a 	bl	1cd0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    205c:	be00      	bkpt	0x0000
}
    205e:	bf00      	nop
    2060:	e000ed08 	.word	0xe000ed08
    2064:	00000000 	.word	0x00000000
    2068:	e000ed88 	.word	0xe000ed88
    206c:	00003004 	.word	0x00003004
    2070:	10001000 	.word	0x10001000
    2074:	100010d4 	.word	0x100010d4
    2078:	100010d4 	.word	0x100010d4
    207c:	10003358 	.word	0x10003358

00002080 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    2080:	b480      	push	{r7}
    2082:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    2084:	e7fe      	b.n	2084 <am_nmi_isr+0x4>
    2086:	bf00      	nop

00002088 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
    2088:	b480      	push	{r7}
    208a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    208c:	e7fe      	b.n	208c <am_busfault_isr+0x4>
    208e:	bf00      	nop

00002090 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    2090:	b480      	push	{r7}
    2092:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    2094:	e7fe      	b.n	2094 <am_adc_isr+0x4>
    2096:	bf00      	nop

00002098 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    2098:	b580      	push	{r7, lr}
    209a:	b084      	sub	sp, #16
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
    20a0:	f000 f83c 	bl	211c <am_hal_clkgen_sysclk_get>
    20a4:	4602      	mov	r2, r0
    20a6:	4b07      	ldr	r3, [pc, #28]	; (20c4 <am_util_delay_ms+0x2c>)
    20a8:	fba3 2302 	umull	r2, r3, r3, r2
    20ac:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
    20ae:	687a      	ldr	r2, [r7, #4]
    20b0:	fb02 f303 	mul.w	r3, r2, r3
    20b4:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    20b6:	68f8      	ldr	r0, [r7, #12]
    20b8:	f000 f87e 	bl	21b8 <am_hal_flash_delay>
}
    20bc:	bf00      	nop
    20be:	3710      	adds	r7, #16
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	057619f1 	.word	0x057619f1

000020c8 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    20c8:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    20ca:	f000 fa4d 	bl	2568 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    20ce:	f000 fab9 	bl	2644 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    20d2:	f000 fc4b 	bl	296c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    20d6:	2001      	movs	r0, #1
    20d8:	f000 faca 	bl	2670 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    20dc:	2001      	movs	r0, #1
    20de:	f000 f82d 	bl	213c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    20e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    20e6:	f000 bad1 	b.w	268c <am_hal_rtc_osc_disable>
    20ea:	bf00      	nop

000020ec <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    20ec:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    20ee:	4604      	mov	r4, r0
    20f0:	b120      	cbz	r0, 20fc <am_hal_clkgen_sysclk_select+0x10>
    20f2:	4a06      	ldr	r2, [pc, #24]	; (210c <am_hal_clkgen_sysclk_select+0x20>)
    20f4:	4806      	ldr	r0, [pc, #24]	; (2110 <am_hal_clkgen_sysclk_select+0x24>)
    20f6:	2150      	movs	r1, #80	; 0x50
    20f8:	f000 f84c 	bl	2194 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    20fe:	4906      	ldr	r1, [pc, #24]	; (2118 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2100:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    2102:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2104:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    2106:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    2108:	601a      	str	r2, [r3, #0]
    210a:	bd10      	pop	{r4, pc}
    210c:	00002e74 	.word	0x00002e74
    2110:	00002eac 	.word	0x00002eac
    2114:	40004014 	.word	0x40004014
    2118:	40004018 	.word	0x40004018

0000211c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    211c:	4b04      	ldr	r3, [pc, #16]	; (2130 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    211e:	4905      	ldr	r1, [pc, #20]	; (2134 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    2120:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    2122:	4805      	ldr	r0, [pc, #20]	; (2138 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    2124:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    2128:	bf08      	it	eq
    212a:	4608      	moveq	r0, r1
    212c:	4770      	bx	lr
    212e:	bf00      	nop
    2130:	40004018 	.word	0x40004018
    2134:	02dc6c00 	.word	0x02dc6c00
    2138:	016e3600 	.word	0x016e3600

0000213c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    213c:	0783      	lsls	r3, r0, #30
    213e:	d003      	beq.n	2148 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    2140:	4a02      	ldr	r2, [pc, #8]	; (214c <am_hal_clkgen_osc_stop+0x10>)
    2142:	6813      	ldr	r3, [r2, #0]
    2144:	4318      	orrs	r0, r3
    2146:	6010      	str	r0, [r2, #0]
    2148:	4770      	bx	lr
    214a:	bf00      	nop
    214c:	4000400c 	.word	0x4000400c

00002150 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    2150:	2801      	cmp	r0, #1
    2152:	d900      	bls.n	2156 <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    2154:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    2156:	2903      	cmp	r1, #3
    2158:	d8fc      	bhi.n	2154 <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    215a:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    215e:	b430      	push	{r4, r5}
    2160:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2162:	9301      	str	r3, [sp, #4]
    2164:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    2166:	4b0a      	ldr	r3, [pc, #40]	; (2190 <am_hal_clkgen_uarten_set+0x40>)
    2168:	00c5      	lsls	r5, r0, #3
    216a:	681c      	ldr	r4, [r3, #0]
    216c:	2203      	movs	r2, #3
    216e:	40aa      	lsls	r2, r5
    2170:	ea24 0502 	bic.w	r5, r4, r2
    2174:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    2176:	fb00 f000 	mul.w	r0, r0, r0
    217a:	681a      	ldr	r2, [r3, #0]
    217c:	00c0      	lsls	r0, r0, #3
    217e:	4081      	lsls	r1, r0
    2180:	4311      	orrs	r1, r2
    2182:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    2184:	9b01      	ldr	r3, [sp, #4]
    2186:	f383 8810 	msr	PRIMASK, r3
}
    218a:	b002      	add	sp, #8
    218c:	bc30      	pop	{r4, r5}
    218e:	4770      	bx	lr
    2190:	40004034 	.word	0x40004034

00002194 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    2194:	e7fe      	b.n	2194 <am_hal_debug_error>
    2196:	bf00      	nop

00002198 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    2198:	4b01      	ldr	r3, [pc, #4]	; (21a0 <am_hal_flash_page_erase+0x8>)
    219a:	685b      	ldr	r3, [r3, #4]
    219c:	4718      	bx	r3
    219e:	bf00      	nop
    21a0:	10001078 	.word	0x10001078

000021a4 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    21a4:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    21a6:	4c03      	ldr	r4, [pc, #12]	; (21b4 <am_hal_flash_program_main+0x10>)
    21a8:	68a4      	ldr	r4, [r4, #8]
    21aa:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    21ac:	f85d 4b04 	ldr.w	r4, [sp], #4
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    21b0:	4760      	bx	ip
    21b2:	bf00      	nop
    21b4:	10001078 	.word	0x10001078

000021b8 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21b8:	4b01      	ldr	r3, [pc, #4]	; (21c0 <am_hal_flash_delay+0x8>)
    21ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    21bc:	4708      	bx	r1
    21be:	bf00      	nop
    21c0:	10001078 	.word	0x10001078

000021c4 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    21c4:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    21c6:	4c05      	ldr	r4, [pc, #20]	; (21dc <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    21c8:	4a05      	ldr	r2, [pc, #20]	; (21e0 <am_hal_gpio_int_enable+0x1c>)
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    21ca:	6823      	ldr	r3, [r4, #0]
    21cc:	4319      	orrs	r1, r3
    21ce:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    21d0:	6811      	ldr	r1, [r2, #0]
}
    21d2:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    21d6:	4308      	orrs	r0, r1
    21d8:	6010      	str	r0, [r2, #0]
}
    21da:	4770      	bx	lr
    21dc:	40010210 	.word	0x40010210
    21e0:	40010200 	.word	0x40010200

000021e4 <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    21e4:	b410      	push	{r4}
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    21e6:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    21ea:	b083      	sub	sp, #12
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    21ec:	9301      	str	r3, [sp, #4]
    21ee:	b672      	cpsid	i
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    21f0:	4c08      	ldr	r4, [pc, #32]	; (2214 <am_hal_gpio_int_disable+0x30>)
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    21f2:	4a09      	ldr	r2, [pc, #36]	; (2218 <am_hal_gpio_int_disable+0x34>)
{
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    21f4:	6823      	ldr	r3, [r4, #0]
    21f6:	ea23 0101 	bic.w	r1, r3, r1
    21fa:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    21fc:	6814      	ldr	r4, [r2, #0]
    21fe:	ea24 0000 	bic.w	r0, r4, r0
    2202:	6010      	str	r0, [r2, #0]
    AM_CRITICAL_END_ASM
    2204:	9a01      	ldr	r2, [sp, #4]
    2206:	f382 8810 	msr	PRIMASK, r2
}
    220a:	b003      	add	sp, #12
    220c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2210:	4770      	bx	lr
    2212:	bf00      	nop
    2214:	40010210 	.word	0x40010210
    2218:	40010200 	.word	0x40010200

0000221c <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    221c:	b082      	sub	sp, #8
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    221e:	f3ef 8310 	mrs	r3, PRIMASK
    2222:	9301      	str	r3, [sp, #4]
    2224:	b672      	cpsid	i
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    2226:	4a04      	ldr	r2, [pc, #16]	; (2238 <am_hal_gpio_int_clear+0x1c>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    2228:	4b04      	ldr	r3, [pc, #16]	; (223c <am_hal_gpio_int_clear+0x20>)
{
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    222a:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    222c:	6018      	str	r0, [r3, #0]
    AM_CRITICAL_END_ASM
    222e:	9801      	ldr	r0, [sp, #4]
    2230:	f380 8810 	msr	PRIMASK, r0
}
    2234:	b002      	add	sp, #8
    2236:	4770      	bx	lr
    2238:	40010218 	.word	0x40010218
    223c:	40010208 	.word	0x40010208

00002240 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    2240:	280f      	cmp	r0, #15
    2242:	d80b      	bhi.n	225c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    2244:	2805      	cmp	r0, #5
    2246:	d013      	beq.n	2270 <am_hal_interrupt_enable+0x30>
    2248:	2806      	cmp	r0, #6
    224a:	d017      	beq.n	227c <am_hal_interrupt_enable+0x3c>
    224c:	2804      	cmp	r0, #4
    224e:	d104      	bne.n	225a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    2250:	4a0d      	ldr	r2, [pc, #52]	; (2288 <am_hal_interrupt_enable+0x48>)
    2252:	6813      	ldr	r3, [r2, #0]
    2254:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    2258:	6010      	str	r0, [r2, #0]
    225a:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    225c:	f1a0 0310 	sub.w	r3, r0, #16
    2260:	f003 0c1f 	and.w	ip, r3, #31
    2264:	2001      	movs	r0, #1
    2266:	4909      	ldr	r1, [pc, #36]	; (228c <am_hal_interrupt_enable+0x4c>)
    2268:	fa00 f20c 	lsl.w	r2, r0, ip
    226c:	600a      	str	r2, [r1, #0]
    226e:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    2270:	4805      	ldr	r0, [pc, #20]	; (2288 <am_hal_interrupt_enable+0x48>)
    2272:	6801      	ldr	r1, [r0, #0]
    2274:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    2278:	6002      	str	r2, [r0, #0]
            break;
    227a:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    227c:	4902      	ldr	r1, [pc, #8]	; (2288 <am_hal_interrupt_enable+0x48>)
    227e:	680a      	ldr	r2, [r1, #0]
    2280:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    2284:	600b      	str	r3, [r1, #0]
            break;
    2286:	4770      	bx	lr
    2288:	e000ed24 	.word	0xe000ed24
    228c:	e000e100 	.word	0xe000e100

00002290 <am_hal_interrupt_disable>:
am_hal_interrupt_disable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    2290:	280f      	cmp	r0, #15
    2292:	d80b      	bhi.n	22ac <am_hal_interrupt_disable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    2294:	2805      	cmp	r0, #5
    2296:	d013      	beq.n	22c0 <am_hal_interrupt_disable+0x30>
    2298:	2806      	cmp	r0, #6
    229a:	d017      	beq.n	22cc <am_hal_interrupt_disable+0x3c>
    229c:	2804      	cmp	r0, #4
    229e:	d104      	bne.n	22aa <am_hal_interrupt_disable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 0);
    22a0:	4a0d      	ldr	r2, [pc, #52]	; (22d8 <am_hal_interrupt_disable+0x48>)
    22a2:	6813      	ldr	r3, [r2, #0]
    22a4:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
    22a8:	6010      	str	r0, [r2, #0]
    22aa:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // disable it using the NVIC register.
        //
        AM_REG(NVIC, ICER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    22ac:	f1a0 0310 	sub.w	r3, r0, #16
    22b0:	f003 0c1f 	and.w	ip, r3, #31
    22b4:	2001      	movs	r0, #1
    22b6:	4909      	ldr	r1, [pc, #36]	; (22dc <am_hal_interrupt_disable+0x4c>)
    22b8:	fa00 f20c 	lsl.w	r2, r0, ip
    22bc:	600a      	str	r2, [r1, #0]
    22be:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 0);
    22c0:	4805      	ldr	r0, [pc, #20]	; (22d8 <am_hal_interrupt_disable+0x48>)
    22c2:	6801      	ldr	r1, [r0, #0]
    22c4:	f421 3200 	bic.w	r2, r1, #131072	; 0x20000
    22c8:	6002      	str	r2, [r0, #0]
            break;
    22ca:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
    22cc:	4902      	ldr	r1, [pc, #8]	; (22d8 <am_hal_interrupt_disable+0x48>)
    22ce:	680a      	ldr	r2, [r1, #0]
    22d0:	f422 2380 	bic.w	r3, r2, #262144	; 0x40000
    22d4:	600b      	str	r3, [r1, #0]
            break;
    22d6:	4770      	bx	lr
    22d8:	e000ed24 	.word	0xe000ed24
    22dc:	e000e180 	.word	0xe000e180

000022e0 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    22e0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    22e4:	b662      	cpsie	i
    __asm("    bx lr");
    22e6:	4770      	bx	lr

000022e8 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    22e8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    22ec:	b672      	cpsid	i
    __asm("    bx lr");
    22ee:	4770      	bx	lr

000022f0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    22f0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    22f4:	4770      	bx	lr
    22f6:	bf00      	nop

000022f8 <am_hal_ios_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_config(am_hal_ios_config_t *psConfig)
{
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fa:	4604      	mov	r4, r0
    uint32_t ui32LRAMConfig;

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);
    22fc:	2001      	movs	r0, #1
    22fe:	f000 f8ef 	bl	24e0 <am_hal_pwrctrl_periph_enable>

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    2302:	68a0      	ldr	r0, [r4, #8]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    2304:	68e3      	ldr	r3, [r4, #12]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    2306:	4a1c      	ldr	r2, [pc, #112]	; (2378 <am_hal_ios_config+0x80>)
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    2308:	491c      	ldr	r1, [pc, #112]	; (237c <am_hal_ios_config+0x84>)
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    230a:	6010      	str	r0, [r2, #0]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    230c:	f103 45a0 	add.w	r5, r3, #1342177280	; 0x50000000
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    2310:	f100 42a0 	add.w	r2, r0, #1342177280	; 0x50000000
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    2314:	4f1a      	ldr	r7, [pc, #104]	; (2380 <am_hal_ios_config+0x88>)
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    2316:	600a      	str	r2, [r1, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    2318:	1aa9      	subs	r1, r5, r2
    231a:	7039      	strb	r1, [r7, #0]
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    231c:	4919      	ldr	r1, [pc, #100]	; (2384 <am_hal_ios_config+0x8c>)
    231e:	6862      	ldr	r2, [r4, #4]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    2320:	4e19      	ldr	r6, [pc, #100]	; (2388 <am_hal_ios_config+0x90>)
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    2322:	680f      	ldr	r7, [r1, #0]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    2324:	6035      	str	r5, [r6, #0]
    2326:	015b      	lsls	r3, r3, #5
    2328:	0555      	lsls	r5, r2, #21
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    232a:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
    232e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    2332:	f005 537c 	and.w	r3, r5, #1056964608	; 0x3f000000
    2336:	600f      	str	r7, [r1, #0]
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    2338:	4e14      	ldr	r6, [pc, #80]	; (238c <am_hal_ios_config+0x94>)

    //
    // Write the configuration register with the user's selected interface
    // characteristics.
    //
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    233a:	6825      	ldr	r5, [r4, #0]
    233c:	600d      	str	r5, [r1, #0]
    //
    // Caluclate the value for the IO Slave FIFO configuration register.
    //
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    233e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
    2342:	4313      	orrs	r3, r2
    2344:	4303      	orrs	r3, r0
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    2346:	6033      	str	r3, [r6, #0]
//
//*****************************************************************************
void
am_hal_ios_enable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    2348:	680a      	ldr	r2, [r1, #0]
    234a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    234e:	600b      	str	r3, [r1, #0]
    am_hal_ios_enable(0);

    //
    // Initialize the FIFO pointer to the beginning of the FIFO section.
    //
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    2350:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    2352:	f7ff ffc9 	bl	22e8 <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    2356:	4b0e      	ldr	r3, [pc, #56]	; (2390 <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2358:	4a0e      	ldr	r2, [pc, #56]	; (2394 <am_hal_ios_config+0x9c>)
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;

    //
    // Clear the FIFO update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x0;
    235a:	2100      	movs	r1, #0
    ui32Primask = am_hal_interrupt_master_disable();

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    235c:	2701      	movs	r7, #1
    235e:	601f      	str	r7, [r3, #0]

    //
    // Change the FIFO offset.
    //
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    2360:	f846 5c04 	str.w	r5, [r6, #-4]

    //
    // Clear the FIFO update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x0;
    2364:	6019      	str	r1, [r3, #0]

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2366:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    236a:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    236c:	f7ff ffc0 	bl	22f0 <am_hal_interrupt_master_set>
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);

    //
    // Write the FIFO threshold register.
    //
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    2370:	4809      	ldr	r0, [pc, #36]	; (2398 <am_hal_ios_config+0xa0>)
    2372:	6924      	ldr	r4, [r4, #16]
    2374:	6004      	str	r4, [r0, #0]
    2376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2378:	10001100 	.word	0x10001100
    237c:	100010d0 	.word	0x100010d0
    2380:	100010ff 	.word	0x100010ff
    2384:	50000118 	.word	0x50000118
    2388:	100010c8 	.word	0x100010c8
    238c:	50000104 	.word	0x50000104
    2390:	5000010c 	.word	0x5000010c
    2394:	100010cc 	.word	0x100010cc
    2398:	50000108 	.word	0x50000108

0000239c <am_hal_ios_access_int_enable>:
am_hal_ios_access_int_enable(uint32_t ui32Interrupt)
{
    //
    // OR the desired interrupt into the enable register.
    //
    AM_REG(IOSLAVE, REGACCINTEN) |= ui32Interrupt;
    239c:	4a02      	ldr	r2, [pc, #8]	; (23a8 <am_hal_ios_access_int_enable+0xc>)
    239e:	6813      	ldr	r3, [r2, #0]
    23a0:	4318      	orrs	r0, r3
    23a2:	6010      	str	r0, [r2, #0]
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop
    23a8:	50000210 	.word	0x50000210

000023ac <am_hal_ios_access_int_clear>:
am_hal_ios_access_int_clear(uint32_t ui32Interrupt)
{
    //
    // Use the interrupt clear register to deactivate the chosen interrupt.
    //
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    23ac:	4b01      	ldr	r3, [pc, #4]	; (23b4 <am_hal_ios_access_int_clear+0x8>)
    23ae:	6018      	str	r0, [r3, #0]
    23b0:	4770      	bx	lr
    23b2:	bf00      	nop
    23b4:	50000218 	.word	0x50000218

000023b8 <am_hal_ios_access_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    23b8:	b910      	cbnz	r0, 23c0 <am_hal_ios_access_int_status_get+0x8>
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);

    }
    else
    {
        return AM_REG(IOSLAVE, REGACCINTSTAT);
    23ba:	4b04      	ldr	r3, [pc, #16]	; (23cc <am_hal_ios_access_int_status_get+0x14>)
    23bc:	6818      	ldr	r0, [r3, #0]
    }
}
    23be:	4770      	bx	lr
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    23c0:	4a02      	ldr	r2, [pc, #8]	; (23cc <am_hal_ios_access_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    23c2:	4903      	ldr	r1, [pc, #12]	; (23d0 <am_hal_ios_access_int_status_get+0x18>)
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    23c4:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    23c6:	680b      	ldr	r3, [r1, #0]
    23c8:	4018      	ands	r0, r3
    23ca:	4770      	bx	lr
    23cc:	50000214 	.word	0x50000214
    23d0:	50000210 	.word	0x50000210

000023d4 <am_hal_ios_int_enable>:
am_hal_ios_int_enable(uint32_t ui32Interrupt)
{
    //
    // OR the desired interrupt into the enable register.
    //
    AM_REG(IOSLAVE, INTEN) |= ui32Interrupt;
    23d4:	4a02      	ldr	r2, [pc, #8]	; (23e0 <am_hal_ios_int_enable+0xc>)
    23d6:	6813      	ldr	r3, [r2, #0]
    23d8:	4318      	orrs	r0, r3
    23da:	6010      	str	r0, [r2, #0]
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	50000200 	.word	0x50000200

000023e4 <am_hal_ios_int_clear>:
am_hal_ios_int_clear(uint32_t ui32Interrupt)
{
    //
    // Use the interrupt clear register to deactivate the chosen interrupt.
    //
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    23e4:	4b01      	ldr	r3, [pc, #4]	; (23ec <am_hal_ios_int_clear+0x8>)
    23e6:	6018      	str	r0, [r3, #0]
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop
    23ec:	50000208 	.word	0x50000208

000023f0 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    23f0:	4b2f      	ldr	r3, [pc, #188]	; (24b0 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    23f2:	4930      	ldr	r1, [pc, #192]	; (24b4 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    23f4:	4a30      	ldr	r2, [pc, #192]	; (24b8 <am_hal_mcuctrl_device_info_get+0xc8>)
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    23f6:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    23f8:	681f      	ldr	r7, [r3, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    23fa:	4d30      	ldr	r5, [pc, #192]	; (24bc <am_hal_mcuctrl_device_info_get+0xcc>)
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    23fc:	6007      	str	r7, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    23fe:	682f      	ldr	r7, [r5, #0]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    2400:	4c2f      	ldr	r4, [pc, #188]	; (24c0 <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    2402:	6047      	str	r7, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    2404:	6827      	ldr	r7, [r4, #0]
    2406:	6087      	str	r7, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    2408:	680f      	ldr	r7, [r1, #0]
    240a:	60c7      	str	r7, [r0, #12]

    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    2410:	682d      	ldr	r5, [r5, #0]
    2412:	6045      	str	r5, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    2414:	6824      	ldr	r4, [r4, #0]
    2416:	6084      	str	r4, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    2418:	6809      	ldr	r1, [r1, #0]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    241a:	4e2a      	ldr	r6, [pc, #168]	; (24c4 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    241c:	60c1      	str	r1, [r0, #12]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    241e:	f3c3 5703 	ubfx	r7, r3, #20, #4

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_flash_size[
    2422:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    2426:	6836      	ldr	r6, [r6, #0]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    2428:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    242c:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    2430:	4a25      	ldr	r2, [pc, #148]	; (24c8 <am_hal_mcuctrl_device_info_get+0xd8>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    2432:	6106      	str	r6, [r0, #16]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified =
    2434:	f003 0301 	and.w	r3, r3, #1
    2438:	6143      	str	r3, [r0, #20]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    243a:	6185      	str	r5, [r0, #24]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    243c:	61c4      	str	r4, [r0, #28]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    243e:	6814      	ldr	r4, [r2, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    2440:	4e22      	ldr	r6, [pc, #136]	; (24cc <am_hal_mcuctrl_device_info_get+0xdc>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    2442:	4f23      	ldr	r7, [pc, #140]	; (24d0 <am_hal_mcuctrl_device_info_get+0xe0>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    2444:	4923      	ldr	r1, [pc, #140]	; (24d4 <am_hal_mcuctrl_device_info_get+0xe4>)
    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    2446:	4d24      	ldr	r5, [pc, #144]	; (24d8 <am_hal_mcuctrl_device_info_get+0xe8>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    2448:	b2e3      	uxtb	r3, r4
    244a:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    244c:	6834      	ldr	r4, [r6, #0]
    244e:	0224      	lsls	r4, r4, #8
    2450:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    2454:	4323      	orrs	r3, r4
    2456:	6203      	str	r3, [r0, #32]

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    2458:	6833      	ldr	r3, [r6, #0]
    245a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    245e:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    2460:	683c      	ldr	r4, [r7, #0]
    2462:	0124      	lsls	r4, r4, #4
    2464:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
    2468:	4323      	orrs	r3, r4
    246a:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    246c:	683f      	ldr	r7, [r7, #0]
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    246e:	4c1b      	ldr	r4, [pc, #108]	; (24dc <am_hal_mcuctrl_device_info_get+0xec>)
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    2470:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
    2474:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    2476:	6809      	ldr	r1, [r1, #0]
    2478:	f3c1 1703 	ubfx	r7, r1, #4, #4
    247c:	433b      	orrs	r3, r7

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    247e:	321c      	adds	r2, #28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    2480:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    2482:	6812      	ldr	r2, [r2, #0]
    2484:	0611      	lsls	r1, r2, #24
    2486:	62c1      	str	r1, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    2488:	682d      	ldr	r5, [r5, #0]
    248a:	042b      	lsls	r3, r5, #16
    248c:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    2490:	ea47 0201 	orr.w	r2, r7, r1
    2494:	62c2      	str	r2, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    2496:	6931      	ldr	r1, [r6, #16]
    2498:	020e      	lsls	r6, r1, #8
    249a:	f406 457f 	and.w	r5, r6, #65280	; 0xff00
    249e:	4315      	orrs	r5, r2
    24a0:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    24a2:	6824      	ldr	r4, [r4, #0]
    24a4:	b2e3      	uxtb	r3, r4
    24a6:	431d      	orrs	r5, r3
    24a8:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    24aa:	bcf0      	pop	{r4, r5, r6, r7}
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop
    24b0:	40020000 	.word	0x40020000
    24b4:	4002000c 	.word	0x4002000c
    24b8:	00002ec8 	.word	0x00002ec8
    24bc:	40020004 	.word	0x40020004
    24c0:	40020008 	.word	0x40020008
    24c4:	40020010 	.word	0x40020010
    24c8:	f0000fe0 	.word	0xf0000fe0
    24cc:	f0000fe4 	.word	0xf0000fe4
    24d0:	f0000fe8 	.word	0xf0000fe8
    24d4:	f0000fec 	.word	0xf0000fec
    24d8:	f0000ff8 	.word	0xf0000ff8
    24dc:	f0000ff0 	.word	0xf0000ff0

000024e0 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    24e0:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    24e2:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    24e4:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    24e6:	b1c0      	cbz	r0, 251a <am_hal_pwrctrl_periph_enable+0x3a>
    24e8:	1e43      	subs	r3, r0, #1
    24ea:	4203      	tst	r3, r0
    24ec:	d115      	bne.n	251a <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    24ee:	f3ef 8010 	mrs	r0, PRIMASK
    24f2:	9001      	str	r0, [sp, #4]
    24f4:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    24f6:	4a18      	ldr	r2, [pc, #96]	; (2558 <am_hal_pwrctrl_periph_enable+0x78>)
    24f8:	6811      	ldr	r1, [r2, #0]
    24fa:	4321      	orrs	r1, r4
    24fc:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    24fe:	9b01      	ldr	r3, [sp, #4]
    2500:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    2504:	200e      	movs	r0, #14
    2506:	f7ff fe57 	bl	21b8 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    250a:	f014 0f0e 	tst.w	r4, #14
    250e:	d10a      	bne.n	2526 <am_hal_pwrctrl_periph_enable+0x46>
    2510:	f014 0f70 	tst.w	r4, #112	; 0x70
    2514:	d00e      	beq.n	2534 <am_hal_pwrctrl_periph_enable+0x54>
    2516:	2408      	movs	r4, #8
    2518:	e006      	b.n	2528 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    251a:	4a10      	ldr	r2, [pc, #64]	; (255c <am_hal_pwrctrl_periph_enable+0x7c>)
    251c:	4810      	ldr	r0, [pc, #64]	; (2560 <am_hal_pwrctrl_periph_enable+0x80>)
    251e:	215d      	movs	r1, #93	; 0x5d
    2520:	f7ff fe38 	bl	2194 <am_hal_debug_error>
    2524:	e7e3      	b.n	24ee <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    2526:	2404      	movs	r4, #4
    2528:	4a0e      	ldr	r2, [pc, #56]	; (2564 <am_hal_pwrctrl_periph_enable+0x84>)
    252a:	6811      	ldr	r1, [r2, #0]
    252c:	420c      	tst	r4, r1
    252e:	d0fc      	beq.n	252a <am_hal_pwrctrl_periph_enable+0x4a>
}
    2530:	b002      	add	sp, #8
    2532:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    2534:	f240 1081 	movw	r0, #385	; 0x181
    2538:	4020      	ands	r0, r4
    253a:	b940      	cbnz	r0, 254e <am_hal_pwrctrl_periph_enable+0x6e>
    253c:	05a3      	lsls	r3, r4, #22
    253e:	d408      	bmi.n	2552 <am_hal_pwrctrl_periph_enable+0x72>
    2540:	f414 6f80 	tst.w	r4, #1024	; 0x400
    2544:	bf14      	ite	ne
    2546:	2410      	movne	r4, #16
    2548:	f04f 34ff 	moveq.w	r4, #4294967295
    254c:	e7ec      	b.n	2528 <am_hal_pwrctrl_periph_enable+0x48>
    254e:	2402      	movs	r4, #2
    2550:	e7ea      	b.n	2528 <am_hal_pwrctrl_periph_enable+0x48>
    2552:	2480      	movs	r4, #128	; 0x80
    2554:	e7e8      	b.n	2528 <am_hal_pwrctrl_periph_enable+0x48>
    2556:	bf00      	nop
    2558:	40021008 	.word	0x40021008
    255c:	00002f08 	.word	0x00002f08
    2560:	00002f3c 	.word	0x00002f3c
    2564:	40021014 	.word	0x40021014

00002568 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2568:	4b0f      	ldr	r3, [pc, #60]	; (25a8 <am_hal_pwrctrl_bucks_init+0x40>)
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	0792      	lsls	r2, r2, #30
    256e:	d502      	bpl.n	2576 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2570:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2572:	07c3      	lsls	r3, r0, #31
    2574:	d40e      	bmi.n	2594 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2576:	4b0d      	ldr	r3, [pc, #52]	; (25ac <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2578:	4a0b      	ldr	r2, [pc, #44]	; (25a8 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    257a:	6819      	ldr	r1, [r3, #0]
    257c:	f041 0002 	orr.w	r0, r1, #2
    2580:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2582:	6819      	ldr	r1, [r3, #0]
    2584:	f041 0001 	orr.w	r0, r1, #1
    2588:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    258a:	6813      	ldr	r3, [r2, #0]
    258c:	f003 0103 	and.w	r1, r3, #3
    2590:	2903      	cmp	r1, #3
    2592:	d1fa      	bne.n	258a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2594:	4a04      	ldr	r2, [pc, #16]	; (25a8 <am_hal_pwrctrl_bucks_init+0x40>)
    2596:	6810      	ldr	r0, [r2, #0]
    2598:	f000 0303 	and.w	r3, r0, #3
    259c:	2b03      	cmp	r3, #3
    259e:	d1fa      	bne.n	2596 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    25a0:	2042      	movs	r0, #66	; 0x42
    25a2:	f7ff be09 	b.w	21b8 <am_hal_flash_delay>
    25a6:	bf00      	nop
    25a8:	40021004 	.word	0x40021004
    25ac:	40021000 	.word	0x40021000

000025b0 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    25b0:	4b0b      	ldr	r3, [pc, #44]	; (25e0 <am_hal_pwrctrl_bucks_enable+0x30>)
    25b2:	681a      	ldr	r2, [r3, #0]
    25b4:	0792      	lsls	r2, r2, #30
    25b6:	d502      	bpl.n	25be <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    25b8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    25ba:	07c3      	lsls	r3, r0, #31
    25bc:	d40e      	bmi.n	25dc <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    25be:	4b09      	ldr	r3, [pc, #36]	; (25e4 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    25c0:	4a07      	ldr	r2, [pc, #28]	; (25e0 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    25c2:	6819      	ldr	r1, [r3, #0]
    25c4:	f041 0002 	orr.w	r0, r1, #2
    25c8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    25ca:	6819      	ldr	r1, [r3, #0]
    25cc:	f041 0001 	orr.w	r0, r1, #1
    25d0:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    25d2:	6813      	ldr	r3, [r2, #0]
    25d4:	f003 0103 	and.w	r1, r3, #3
    25d8:	2903      	cmp	r1, #3
    25da:	d1fa      	bne.n	25d2 <am_hal_pwrctrl_bucks_enable+0x22>
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	40021004 	.word	0x40021004
    25e4:	40021000 	.word	0x40021000

000025e8 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    25e8:	4b12      	ldr	r3, [pc, #72]	; (2634 <am_hal_pwrctrl_bucks_disable+0x4c>)
    25ea:	681a      	ldr	r2, [r3, #0]
    25ec:	0792      	lsls	r2, r2, #30
    25ee:	d402      	bmi.n	25f6 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    25f0:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    25f2:	07c3      	lsls	r3, r0, #31
    25f4:	d51c      	bpl.n	2630 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    25f6:	4910      	ldr	r1, [pc, #64]	; (2638 <am_hal_pwrctrl_bucks_disable+0x50>)
    25f8:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    25fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    25fe:	2a20      	cmp	r2, #32
    2600:	d00b      	beq.n	261a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    2602:	4b0e      	ldr	r3, [pc, #56]	; (263c <am_hal_pwrctrl_bucks_disable+0x54>)
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	f022 0002 	bic.w	r0, r2, #2
    260a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    260c:	6819      	ldr	r1, [r3, #0]
    260e:	f021 0201 	bic.w	r2, r1, #1
    2612:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    2614:	200a      	movs	r0, #10
    2616:	f7ff bdcf 	b.w	21b8 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    261a:	4809      	ldr	r0, [pc, #36]	; (2640 <am_hal_pwrctrl_bucks_disable+0x58>)
    261c:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    261e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2622:	d1ee      	bne.n	2602 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    2624:	4805      	ldr	r0, [pc, #20]	; (263c <am_hal_pwrctrl_bucks_disable+0x54>)
    2626:	6803      	ldr	r3, [r0, #0]
    2628:	f003 0105 	and.w	r1, r3, #5
    262c:	6001      	str	r1, [r0, #0]
    262e:	e7f1      	b.n	2614 <am_hal_pwrctrl_bucks_disable+0x2c>
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	40021004 	.word	0x40021004
    2638:	4002000c 	.word	0x4002000c
    263c:	40021000 	.word	0x40021000
    2640:	40021008 	.word	0x40021008

00002644 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2644:	4905      	ldr	r1, [pc, #20]	; (265c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2646:	4a06      	ldr	r2, [pc, #24]	; (2660 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2648:	680b      	ldr	r3, [r1, #0]
    264a:	f043 0006 	orr.w	r0, r3, #6
    264e:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2650:	6811      	ldr	r1, [r2, #0]
    2652:	f021 0304 	bic.w	r3, r1, #4
    2656:	6013      	str	r3, [r2, #0]
    2658:	4770      	bx	lr
    265a:	bf00      	nop
    265c:	40021018 	.word	0x40021018
    2660:	40021000 	.word	0x40021000

00002664 <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <am_hal_reset_poi+0x8>)
    2666:	221b      	movs	r2, #27
    2668:	601a      	str	r2, [r3, #0]
    266a:	4770      	bx	lr
    266c:	40000004 	.word	0x40000004

00002670 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2670:	4a05      	ldr	r2, [pc, #20]	; (2688 <am_hal_rtc_osc_select+0x18>)
    2672:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    2674:	b918      	cbnz	r0, 267e <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2676:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    267a:	6010      	str	r0, [r2, #0]
    267c:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    267e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2682:	6011      	str	r1, [r2, #0]
    2684:	4770      	bx	lr
    2686:	bf00      	nop
    2688:	4000400c 	.word	0x4000400c

0000268c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    268c:	4a02      	ldr	r2, [pc, #8]	; (2698 <am_hal_rtc_osc_disable+0xc>)
    268e:	6813      	ldr	r3, [r2, #0]
    2690:	f043 0010 	orr.w	r0, r3, #16
    2694:	6010      	str	r0, [r2, #0]
    2696:	4770      	bx	lr
    2698:	40004050 	.word	0x40004050

0000269c <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    269c:	b5f0      	push	{r4, r5, r6, r7, lr}
    269e:	b083      	sub	sp, #12
    26a0:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    26a2:	f7ff fe21 	bl	22e8 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26a6:	4a41      	ldr	r2, [pc, #260]	; (27ac <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    26a8:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    26aa:	b11d      	cbz	r5, 26b4 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    26ac:	4b40      	ldr	r3, [pc, #256]	; (27b0 <am_hal_sysctrl_sleep+0x114>)
    26ae:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    26b0:	07c3      	lsls	r3, r0, #31
    26b2:	d509      	bpl.n	26c8 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    26b4:	6811      	ldr	r1, [r2, #0]
    26b6:	f021 0604 	bic.w	r6, r1, #4
    26ba:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    26bc:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    26be:	4620      	mov	r0, r4
    26c0:	f7ff fe16 	bl	22f0 <am_hal_interrupt_master_set>
}
    26c4:	b003      	add	sp, #12
    26c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26c8:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26ca:	493a      	ldr	r1, [pc, #232]	; (27b4 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    26cc:	4f3a      	ldr	r7, [pc, #232]	; (27b8 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    26ce:	4d3b      	ldr	r5, [pc, #236]	; (27bc <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    26d0:	483b      	ldr	r0, [pc, #236]	; (27c0 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26d2:	f043 0604 	orr.w	r6, r3, #4
    26d6:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26d8:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    26da:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    26dc:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    26de:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26e0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    26e4:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    26e6:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26ea:	bf14      	ite	ne
    26ec:	2500      	movne	r5, #0
    26ee:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    26f0:	2e03      	cmp	r6, #3
    26f2:	bf8c      	ite	hi
    26f4:	2100      	movhi	r1, #0
    26f6:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    26f8:	f012 0303 	ands.w	r3, r2, #3
    26fc:	bf18      	it	ne
    26fe:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2700:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2704:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2706:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2708:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    270c:	b91e      	cbnz	r6, 2716 <am_hal_sysctrl_sleep+0x7a>
    270e:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    2712:	2d0f      	cmp	r5, #15
    2714:	d00a      	beq.n	272c <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    2716:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    2718:	2d0f      	cmp	r5, #15
    271a:	d01a      	beq.n	2752 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    271c:	4f29      	ldr	r7, [pc, #164]	; (27c4 <am_hal_sysctrl_sleep+0x128>)
    271e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2720:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    2722:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2724:	f7ff fde4 	bl	22f0 <am_hal_interrupt_master_set>
}
    2728:	b003      	add	sp, #12
    272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    272c:	683a      	ldr	r2, [r7, #0]
    272e:	1e50      	subs	r0, r2, #1
    2730:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2732:	9800      	ldr	r0, [sp, #0]
    2734:	f04f 31ff 	mov.w	r1, #4294967295
    2738:	f000 f938 	bl	29ac <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    273c:	9800      	ldr	r0, [sp, #0]
    273e:	4633      	mov	r3, r6
    2740:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2744:	f04f 31ff 	mov.w	r1, #4294967295
    2748:	f000 f944 	bl	29d4 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    274c:	f7ff ff4c 	bl	25e8 <am_hal_pwrctrl_bucks_disable>
    2750:	e7e1      	b.n	2716 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2752:	f3ef 8310 	mrs	r3, PRIMASK
    2756:	9301      	str	r3, [sp, #4]
    2758:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    275a:	4e1b      	ldr	r6, [pc, #108]	; (27c8 <am_hal_sysctrl_sleep+0x12c>)
    275c:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    275e:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2760:	6835      	ldr	r5, [r6, #0]
    2762:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    2766:	f04c 021c 	orr.w	r2, ip, #28
    276a:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    276c:	6830      	ldr	r0, [r6, #0]
    276e:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    2772:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    2776:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2778:	9e01      	ldr	r6, [sp, #4]
    277a:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    277e:	201c      	movs	r0, #28
    2780:	f7ff fd1a 	bl	21b8 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2784:	f7ff ff14 	bl	25b0 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2788:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    278a:	4910      	ldr	r1, [pc, #64]	; (27cc <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    278c:	4d0d      	ldr	r5, [pc, #52]	; (27c4 <am_hal_sysctrl_sleep+0x128>)
    278e:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2790:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2792:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2794:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2796:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2798:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    279a:	f7ff fd0d 	bl	21b8 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    279e:	9800      	ldr	r0, [sp, #0]
    27a0:	f04f 31ff 	mov.w	r1, #4294967295
    27a4:	f000 f8e8 	bl	2978 <am_hal_ctimer_start>
    27a8:	e789      	b.n	26be <am_hal_sysctrl_sleep+0x22>
    27aa:	bf00      	nop
    27ac:	e000ed10 	.word	0xe000ed10
    27b0:	40020250 	.word	0x40020250
    27b4:	4002000c 	.word	0x4002000c
    27b8:	1000110c 	.word	0x1000110c
    27bc:	40021000 	.word	0x40021000
    27c0:	40021008 	.word	0x40021008
    27c4:	10001104 	.word	0x10001104
    27c8:	40020068 	.word	0x40020068
    27cc:	10001108 	.word	0x10001108

000027d0 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    27d0:	4a02      	ldr	r2, [pc, #8]	; (27dc <am_hal_systick_start+0xc>)
    27d2:	6813      	ldr	r3, [r2, #0]
    27d4:	f043 0001 	orr.w	r0, r3, #1
    27d8:	6010      	str	r0, [r2, #0]
    27da:	4770      	bx	lr
    27dc:	e000e010 	.word	0xe000e010

000027e0 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    27e0:	4a02      	ldr	r2, [pc, #8]	; (27ec <am_hal_systick_stop+0xc>)
    27e2:	6813      	ldr	r3, [r2, #0]
    27e4:	f023 0001 	bic.w	r0, r3, #1
    27e8:	6010      	str	r0, [r2, #0]
    27ea:	4770      	bx	lr
    27ec:	e000e010 	.word	0xe000e010

000027f0 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    27f0:	4b01      	ldr	r3, [pc, #4]	; (27f8 <am_hal_systick_load+0x8>)
    27f2:	6018      	str	r0, [r3, #0]
    27f4:	4770      	bx	lr
    27f6:	bf00      	nop
    27f8:	e000e014 	.word	0xe000e014

000027fc <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    27fc:	4b01      	ldr	r3, [pc, #4]	; (2804 <am_hal_systick_count+0x8>)
    27fe:	6818      	ldr	r0, [r3, #0]
}
    2800:	4770      	bx	lr
    2802:	bf00      	nop
    2804:	e000e018 	.word	0xe000e018

00002808 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    2808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    280a:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    280c:	460f      	mov	r7, r1
    280e:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    2810:	f7ff fc84 	bl	211c <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    2814:	0169      	lsls	r1, r5, #5
    2816:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    2818:	fbb0 f4f1 	udiv	r4, r0, r1
    281c:	fbb2 f0f1 	udiv	r0, r2, r1
    2820:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    2824:	b924      	cbnz	r4, 2830 <am_hal_uart_config+0x28>
    2826:	4a11      	ldr	r2, [pc, #68]	; (286c <am_hal_uart_config+0x64>)
    2828:	4811      	ldr	r0, [pc, #68]	; (2870 <am_hal_uart_config+0x68>)
    282a:	2161      	movs	r1, #97	; 0x61
    282c:	f7ff fcb2 	bl	2194 <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    2830:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    2834:	331c      	adds	r3, #28
    2836:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2838:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    283a:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    283c:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    283e:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    2840:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2842:	68fa      	ldr	r2, [r7, #12]
    2844:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2846:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2848:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    284a:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    284e:	bf14      	ite	ne
    2850:	2208      	movne	r2, #8
    2852:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2854:	4302      	orrs	r2, r0
    2856:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    2858:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    285a:	693f      	ldr	r7, [r7, #16]
    285c:	432f      	orrs	r7, r5
    285e:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2860:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    2862:	f046 0110 	orr.w	r1, r6, #16
    2866:	6319      	str	r1, [r3, #48]	; 0x30
    2868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    286a:	bf00      	nop
    286c:	00002f54 	.word	0x00002f54
    2870:	00002f88 	.word	0x00002f88

00002874 <am_hal_uart_int_status_get>:
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    2874:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2878:	301c      	adds	r0, #28
    287a:	0302      	lsls	r2, r0, #12
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if (bEnabledOnly)
    287c:	b909      	cbnz	r1, 2882 <am_hal_uart_int_status_get+0xe>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, IES);
    287e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    }
}
    2880:	4770      	bx	lr
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    2882:	6c10      	ldr	r0, [r2, #64]	; 0x40
    2884:	4770      	bx	lr
    2886:	bf00      	nop

00002888 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    2888:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    288c:	301c      	adds	r0, #28
    288e:	0302      	lsls	r2, r0, #12
    2890:	6451      	str	r1, [r2, #68]	; 0x44
    2892:	4770      	bx	lr

00002894 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, ui32Module, IER) |= ui32Interrupt;
    2894:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2898:	301c      	adds	r0, #28
    289a:	0302      	lsls	r2, r0, #12
    289c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    289e:	4319      	orrs	r1, r3
    28a0:	6391      	str	r1, [r2, #56]	; 0x38
    28a2:	4770      	bx	lr

000028a4 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    28a4:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    28a6:	f3ef 8310 	mrs	r3, PRIMASK
    28aa:	9301      	str	r3, [sp, #4]
    28ac:	b672      	cpsid	i
    28ae:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    28b2:	301c      	adds	r0, #28
    28b4:	0301      	lsls	r1, r0, #12
    28b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    28b8:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    28bc:	f04c 0301 	orr.w	r3, ip, #1
    28c0:	630b      	str	r3, [r1, #48]	; 0x30
    28c2:	9801      	ldr	r0, [sp, #4]
    28c4:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    28c8:	b002      	add	sp, #8
    28ca:	4770      	bx	lr

000028cc <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    28cc:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    28ce:	f3ef 8310 	mrs	r3, PRIMASK
    28d2:	9301      	str	r3, [sp, #4]
    28d4:	b672      	cpsid	i
    28d6:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    28da:	301c      	adds	r0, #28
    28dc:	0301      	lsls	r1, r0, #12
    28de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    28e0:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    28e4:	f02c 0301 	bic.w	r3, ip, #1
    28e8:	630b      	str	r3, [r1, #48]	; 0x30
    28ea:	9801      	ldr	r0, [sp, #4]
    28ec:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    28f0:	b002      	add	sp, #8
    28f2:	4770      	bx	lr

000028f4 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    28f4:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    28f6:	b510      	push	{r4, lr}
    28f8:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    28fa:	d905      	bls.n	2908 <am_hal_uart_pwrctrl_enable+0x14>
    28fc:	4a05      	ldr	r2, [pc, #20]	; (2914 <am_hal_uart_pwrctrl_enable+0x20>)
    28fe:	4806      	ldr	r0, [pc, #24]	; (2918 <am_hal_uart_pwrctrl_enable+0x24>)
    2900:	f240 11a3 	movw	r1, #419	; 0x1a3
    2904:	f7ff fc46 	bl	2194 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2908:	2080      	movs	r0, #128	; 0x80
    290a:	40a0      	lsls	r0, r4
}
    290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2910:	f7ff bde6 	b.w	24e0 <am_hal_pwrctrl_periph_enable>
    2914:	00002f9c 	.word	0x00002f9c
    2918:	00002f88 	.word	0x00002f88

0000291c <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    291c:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    291e:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    2920:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    2922:	f7ff fc15 	bl	2150 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    2926:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    292a:	301c      	adds	r0, #28
    292c:	0301      	lsls	r1, r0, #12
    292e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2930:	f043 0208 	orr.w	r2, r3, #8
    2934:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2936:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2938:	f044 0010 	orr.w	r0, r4, #16
    293c:	6308      	str	r0, [r1, #48]	; 0x30
    293e:	bd10      	pop	{r4, pc}

00002940 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2940:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2944:	301c      	adds	r0, #28
    2946:	0302      	lsls	r2, r0, #12
    2948:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    294a:	f043 0010 	orr.w	r0, r3, #16
    294e:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    2950:	6351      	str	r1, [r2, #52]	; 0x34
    2952:	4770      	bx	lr

00002954 <am_hal_uart_char_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_char_transmit_polled(uint32_t ui32Module, char cChar)
{
    2954:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2958:	301c      	adds	r0, #28
    295a:	0300      	lsls	r0, r0, #12
    295c:	f100 0218 	add.w	r2, r0, #24
    //
    // Wait for space, i.e.  TX FIFO EMPTY
    //
    while (AM_BFRn(UART, ui32Module, FR, TXFF));
    2960:	6813      	ldr	r3, [r2, #0]
    2962:	069b      	lsls	r3, r3, #26
    2964:	d4fc      	bmi.n	2960 <am_hal_uart_char_transmit_polled+0xc>

    //
    // Write the char.
    //
    AM_REGn(UART, ui32Module, DR) = cChar;
    2966:	6001      	str	r1, [r0, #0]
    2968:	4770      	bx	lr
    296a:	bf00      	nop

0000296c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    296c:	4b01      	ldr	r3, [pc, #4]	; (2974 <am_hal_vcomp_disable+0x8>)
    296e:	2237      	movs	r2, #55	; 0x37
    2970:	601a      	str	r2, [r3, #0]
    2972:	4770      	bx	lr
    2974:	4000c008 	.word	0x4000c008

00002978 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2978:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    297a:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    297e:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2980:	0100      	lsls	r0, r0, #4
    2982:	4a09      	ldr	r2, [pc, #36]	; (29a8 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    2984:	9301      	str	r3, [sp, #4]
    2986:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    2988:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    298a:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    298e:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    2992:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    2996:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    2998:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    299a:	9801      	ldr	r0, [sp, #4]
    299c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    29a0:	b003      	add	sp, #12
    29a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    29a6:	4770      	bx	lr
    29a8:	4000800c 	.word	0x4000800c

000029ac <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    29ac:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    29ae:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    29b2:	0100      	lsls	r0, r0, #4
    29b4:	4a06      	ldr	r2, [pc, #24]	; (29d0 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    29b6:	9301      	str	r3, [sp, #4]
    29b8:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    29ba:	5883      	ldr	r3, [r0, r2]
    29bc:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    29c0:	4319      	orrs	r1, r3
    29c2:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    29c4:	9801      	ldr	r0, [sp, #4]
    29c6:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    29ca:	b002      	add	sp, #8
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	4000800c 	.word	0x4000800c

000029d4 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    29d4:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    29d6:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    29da:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    29dc:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    29de:	4d1c      	ldr	r5, [pc, #112]	; (2a50 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    29e0:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    29e2:	4e1c      	ldr	r6, [pc, #112]	; (2a54 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    29e4:	4f1c      	ldr	r7, [pc, #112]	; (2a58 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    29e6:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    29e8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    29ec:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    29ee:	d01a      	beq.n	2a26 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    29f0:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    29f4:	2d80      	cmp	r5, #128	; 0x80
    29f6:	d01b      	beq.n	2a30 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    29f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    29fc:	2500      	movs	r5, #0
    29fe:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    2a00:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2a02:	d01c      	beq.n	2a3e <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2a04:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    2a08:	d01e      	beq.n	2a48 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2a0a:	0c21      	lsrs	r1, r4, #16
    2a0c:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2a0e:	b291      	uxth	r1, r2
    2a10:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2a12:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2a16:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2a18:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2a1a:	9801      	ldr	r0, [sp, #4]
    2a1c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    2a20:	b002      	add	sp, #8
    2a22:	bcf0      	pop	{r4, r5, r6, r7}
    2a24:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2a26:	0c25      	lsrs	r5, r4, #16
    2a28:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    2a2c:	2c80      	cmp	r4, #128	; 0x80
    2a2e:	d10a      	bne.n	2a46 <am_hal_ctimer_period_set+0x72>
    2a30:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    2a32:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    2a34:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2a3a:	4299      	cmp	r1, r3
    2a3c:	d1e2      	bne.n	2a04 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2a3e:	b297      	uxth	r7, r2
    2a40:	433d      	orrs	r5, r7
    2a42:	5185      	str	r5, [r0, r6]
    2a44:	e7e9      	b.n	2a1a <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2a46:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2a48:	b296      	uxth	r6, r2
    2a4a:	4335      	orrs	r5, r6
    2a4c:	51c5      	str	r5, [r0, r7]
    2a4e:	e7e4      	b.n	2a1a <am_hal_ctimer_period_set+0x46>
    2a50:	4000800c 	.word	0x4000800c
    2a54:	40008004 	.word	0x40008004
    2a58:	40008008 	.word	0x40008008

00002a5c <memcpy>:
    2a5c:	b510      	push	{r4, lr}
    2a5e:	1e43      	subs	r3, r0, #1
    2a60:	440a      	add	r2, r1
    2a62:	4291      	cmp	r1, r2
    2a64:	d004      	beq.n	2a70 <memcpy+0x14>
    2a66:	f811 4b01 	ldrb.w	r4, [r1], #1
    2a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
    2a6e:	e7f8      	b.n	2a62 <memcpy+0x6>
    2a70:	bd10      	pop	{r4, pc}
	...

00002a74 <g_pui32CRC32Table>:
    2a74:	0000 0000 6f41 1edc de82 3db8 b1c3 2364     ....Ao.....=..d#
    2a84:	bd04 7b71 d245 65ad 6386 46c9 0cc7 5815     ..q{E..e.c.F...X
    2a94:	7a08 f6e3 1549 e83f a48a cb5b cbcb d587     .z..I.?...[.....
    2aa4:	c70c 8d92 a84d 934e 198e b02a 76cf aef6     ....M.N...*..v..
    2ab4:	9b51 f31a f410 edc6 45d3 cea2 2a92 d07e     Q........E...*~.
    2ac4:	2655 886b 4914 96b7 f8d7 b5d3 9796 ab0f     U&k..I..........
    2ad4:	e159 05f9 8e18 1b25 3fdb 3841 509a 269d     Y.....%..?A8.P.&
    2ae4:	5c5d 7e88 331c 6054 82df 4330 ed9e 5dec     ]\.~.3T`..0C...]
    2af4:	59e3 f8e9 36a2 e635 8761 c551 e820 db8d     .Y...65.a.Q. ...
    2b04:	e4e7 8398 8ba6 9d44 3a65 be20 5524 a0fc     ......D.e: .$U..
    2b14:	23eb 0e0a 4caa 10d6 fd69 33b2 9228 2d6e     .#...L..i..3(.n-
    2b24:	9eef 757b f1ae 6ba7 406d 48c3 2f2c 561f     ..{u...km@.H,/.V
    2b34:	c2b2 0bf3 adf3 152f 1c30 364b 7371 2897     ....../.0.K6qs.(
    2b44:	7fb6 7082 10f7 6e5e a134 4d3a ce75 53e6     ...p..^n4.:Mu..S
    2b54:	b8ba fd10 d7fb e3cc 6638 c0a8 0979 de74     ........8f..y.t.
    2b64:	05be 8661 6aff 98bd db3c bbd9 b47d a505     ..a..j..<...}...
    2b74:	dc87 ef0e b3c6 f1d2 0205 d2b6 6d44 cc6a     ............Dmj.
    2b84:	6183 947f 0ec2 8aa3 bf01 a9c7 d040 b71b     .a..........@...
    2b94:	a68f 19ed c9ce 0731 780d 2455 174c 3a89     ......1..xU$L..:
    2ba4:	1b8b 629c 74ca 7c40 c509 5f24 aa48 41f8     ...b.t@|..$_H..A
    2bb4:	47d6 1c14 2897 02c8 9954 21ac f615 3f70     .G...(..T..!..p?
    2bc4:	fad2 6765 9593 79b9 2450 5add 4b11 4401     ..eg...yP$.Z.K.D
    2bd4:	3dde eaf7 529f f42b e35c d74f 8c1d c993     .=...R+.\.O.....
    2be4:	80da 9186 ef9b 8f5a 5e58 ac3e 3119 b2e2     ......Z.X^>..1..
    2bf4:	8564 17e7 ea25 093b 5be6 2a5f 34a7 3483     d...%.;..[_*.4.4
    2c04:	3860 6c96 5721 724a e6e2 512e 89a3 4ff2     `8.l!WJr...Q...O
    2c14:	ff6c e104 902d ffd8 21ee dcbc 4eaf c260     l...-....!...N`.
    2c24:	4268 9a75 2d29 84a9 9cea a7cd f3ab b911     hBu.)-..........
    2c34:	1e35 e4fd 7174 fa21 c0b7 d945 aff6 c799     5...tq!...E.....
    2c44:	a331 9f8c cc70 8150 7db3 a234 12f2 bce8     1...p.P..}4.....
    2c54:	643d 121e 0b7c 0cc2 babf 2fa6 d5fe 317a     =d..|....../..z1
    2c64:	d939 696f b678 77b3 07bb 54d7 68fa 4a0b     9.oix..w...T.h.J
    2c74:	d64f c0c1 b90e de1d 08cd fd79 678c e3a5     O.........y..g..
    2c84:	6b4b bbb0 040a a56c b5c9 8608 da88 98d4     Kk....l.........
    2c94:	ac47 3622 c306 28fe 72c5 0b9a 1d84 1546     G."6...(.r....F.
    2ca4:	1143 4d53 7e02 538f cfc1 70eb a080 6e37     C.SM.~.S...p..7n
    2cb4:	4d1e 33db 225f 2d07 939c 0e63 fcdd 10bf     .M.3_".-..c.....
    2cc4:	f01a 48aa 9f5b 5676 2e98 7512 41d9 6bce     ...H[.vV...u.A.k
    2cd4:	3716 c538 5857 dbe4 e994 f880 86d5 e65c     .78.WX........\.
    2ce4:	8a12 be49 e553 a095 5490 83f1 3bd1 9d2d     ..I.S....T...;-.
    2cf4:	8fac 3828 e0ed 26f4 512e 0590 3e6f 1b4c     ..(8...&.Q..o>L.
    2d04:	32a8 4359 5de9 5d85 ec2a 7ee1 836b 603d     .2YC.].]*..~k.=`
    2d14:	f5a4 cecb 9ae5 d017 2b26 f373 4467 edaf     ........&+s.gD..
    2d24:	48a0 b5ba 27e1 ab66 9622 8802 f963 96de     .H...'f."...c...
    2d34:	14fd cb32 7bbc d5ee ca7f f68a a53e e856     ..2..{......>.V.
    2d44:	a9f9 b043 c6b8 ae9f 777b 8dfb 183a 9327     ..C.....{w..:.'.
    2d54:	6ef5 3dd1 01b4 230d b077 0069 df36 1eb5     .n.=...#w.i.6...
    2d64:	d3f1 46a0 bcb0 587c 0d73 7b18 6232 65c4     ...F..|Xs..{2b.e
    2d74:	0ac8 2fcf 6589 3113 d44a 1277 bb0b 0cab     .../.e.1J.w.....
    2d84:	b7cc 54be d88d 4a62 694e 6906 060f 77da     ...T..bJNi.i...w
    2d94:	70c0 d92c 1f81 c7f0 ae42 e494 c103 fa48     .p,.....B.....H.
    2da4:	cdc4 a25d a285 bc81 1346 9fe5 7c07 8139     ..].....F....|9.
    2db4:	9199 dcd5 fed8 c209 4f1b e16d 205a ffb1     .........Om.Z ..
    2dc4:	2c9d a7a4 43dc b978 f21f 9a1c 9d5e 84c0     .,...Cx.....^...
    2dd4:	eb91 2a36 84d0 34ea 3513 178e 5a52 0952     ..6*...4.5..RZR.
    2de4:	5695 5147 39d4 4f9b 8817 6cff e756 7223     .VGQ.9.O...lV.#r
    2df4:	532b d726 3c6a c9fa 8da9 ea9e e2e8 f442     +S&.j<........B.
    2e04:	ee2f ac57 816e b28b 30ad 91ef 5fec 8f33     /.W.n....0..._3.
    2e14:	2923 21c5 4662 3f19 f7a1 1c7d 98e0 02a1     #).!bF.?..}.....
    2e24:	9427 5ab4 fb66 4468 4aa5 670c 25e4 79d0     '..Zf.hD.J.g.%.y
    2e34:	c87a 243c a73b 3ae0 16f8 1984 79b9 0758     z.<$;..:.....yX.
    2e44:	757e 5f4d 1a3f 4191 abfc 62f5 c4bd 7c29     ~uM_?..A...b..)|
    2e54:	b272 d2df dd33 cc03 6cf0 ef67 03b1 f1bb     r...3....lg.....
    2e64:	0f76 a9ae 6037 b772 d1f4 9416 beb5 8aca     v...7`r.........
    2e74:	6d61 685f 6c61 635f 6b6c 6567 5f6e 7973     am_hal_clkgen_sy
    2e84:	6373 6b6c 735f 6c65 6365 2874 3a29 6920     sclk_select(): i
    2e94:	766e 6c61 6469 6320 6f6c 6b63 7320 7465     nvalid clock set
    2ea4:	6974 676e 002e 0000 2e2e 2e5c 5c2e 6d61     ting......\..\am
    2eb4:	685f 6c61 635f 6b6c 6567 2e6e 0063 0000     _hal_clkgen.c...

00002ec4 <am_hal_ios_pui8LRAM>:
    2ec4:	0000 5000                                   ...P

00002ec8 <g_am_hal_mcuctrl_flash_size>:
    2ec8:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    2ed8:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
    2ee8:	0000 0040 0000 0080 0000 0100 0000 0200     ..@.............
    2ef8:	0000 0400 0000 0800 0000 1000 0000 2000     ............... 
    2f08:	6143 6e6e 746f 6520 616e 6c62 2065 6f6d     Cannot enable mo
    2f18:	6572 7420 6168 206e 6e6f 2065 6570 6972     re than one peri
    2f28:	6870 7265 6c61 6120 2074 2061 6974 656d     pheral at a time
    2f38:	002e 0000 2e2e 2e5c 5c2e 6d61 685f 6c61     ......\..\am_hal
    2f48:	705f 7277 7463 6c72 632e 0000 6e49 6574     _pwrctrl.c..Inte
    2f58:	6567 2072 6964 6976 6f73 2072 554d 5453     ger divisor MUST
    2f68:	6220 2065 7267 6165 6574 2072 6874 6e61      be greater than
    2f78:	6f20 2072 7165 6175 206c 6f74 3120 002e      or equal to 1..
    2f88:	2e2e 2e5c 5c2e 6d61 685f 6c61 755f 7261     ..\..\am_hal_uar
    2f98:	2e74 0063 7254 6979 676e 7420 206f 6964     t.c.Trying to di
    2fa8:	6173 6c62 2065 2061 4155 5452 6d20 646f     sable a UART mod
    2fb8:	6c75 2065 6874 7461 6420 656f 6e73 7427     ule that doesn't
    2fc8:	6520 6978 7473 0000 7254 6979 676e 7420      exist..Trying t
    2fd8:	206f 6e65 6261 656c 6120 5520 5241 2054     o enable a UART 
    2fe8:	6f6d 7564 656c 7420 6168 2074 6f64 7365     module that does
    2ff8:	276e 2074 7865 7369 0074 0000               n't exist...
