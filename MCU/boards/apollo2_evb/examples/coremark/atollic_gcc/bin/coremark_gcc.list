
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\coremark\atollic_gcc\bin\coremark_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006078  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000098  10001000  00006078  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000528  10001098  00006110  00021098  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021098  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a90f  00000000  00000000  000210cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028dd  00000000  00000000  0002b9de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000acc9  00000000  00000000  0002e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000948  00000000  00000000  00038f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001b40  00000000  00000000  000398cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000575c  00000000  00000000  0003b40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033e5  00000000  00000000  00040b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007e  00000000  00000000  00043f4d  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001b1c  00000000  00000000  00043fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 25 3d 00 00 1d 3d 00 00 ad 3d 00 00     ....%=...=...=..
      10:	ad 3d 00 00 ad 3d 00 00 ad 3d 00 00 00 00 00 00     .=...=...=......
	...
      2c:	21 3d 00 00 21 3d 00 00 00 00 00 00 21 3d 00 00     !=..!=......!=..
      3c:	7d 0c 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     }...!=..!=..!=..
      4c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      5c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      6c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      7c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      8c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      9c:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      ac:	21 3d 00 00 21 3d 00 00 21 3d 00 00 21 3d 00 00     !=..!=..!=..!=..
      bc:	21 3d 00 00                                         !=..

000000c0 <__aeabi_drsub>:
      c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      c4:	e002      	b.n	cc <__adddf3>
      c6:	bf00      	nop

000000c8 <__aeabi_dsub>:
      c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000cc <__adddf3>:
      cc:	b530      	push	{r4, r5, lr}
      ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
      d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      d6:	ea94 0f05 	teq	r4, r5
      da:	bf08      	it	eq
      dc:	ea90 0f02 	teqeq	r0, r2
      e0:	bf1f      	itttt	ne
      e2:	ea54 0c00 	orrsne.w	ip, r4, r0
      e6:	ea55 0c02 	orrsne.w	ip, r5, r2
      ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
      ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
      f2:	f000 80e2 	beq.w	2ba <__adddf3+0x1ee>
      f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
      fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
      fe:	bfb8      	it	lt
     100:	426d      	neglt	r5, r5
     102:	dd0c      	ble.n	11e <__adddf3+0x52>
     104:	442c      	add	r4, r5
     106:	ea80 0202 	eor.w	r2, r0, r2
     10a:	ea81 0303 	eor.w	r3, r1, r3
     10e:	ea82 0000 	eor.w	r0, r2, r0
     112:	ea83 0101 	eor.w	r1, r3, r1
     116:	ea80 0202 	eor.w	r2, r0, r2
     11a:	ea81 0303 	eor.w	r3, r1, r3
     11e:	2d36      	cmp	r5, #54	; 0x36
     120:	bf88      	it	hi
     122:	bd30      	pophi	{r4, r5, pc}
     124:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     128:	ea4f 3101 	mov.w	r1, r1, lsl #12
     12c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     130:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     134:	d002      	beq.n	13c <__adddf3+0x70>
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     140:	ea4f 3303 	mov.w	r3, r3, lsl #12
     144:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     148:	d002      	beq.n	150 <__adddf3+0x84>
     14a:	4252      	negs	r2, r2
     14c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     150:	ea94 0f05 	teq	r4, r5
     154:	f000 80a7 	beq.w	2a6 <__adddf3+0x1da>
     158:	f1a4 0401 	sub.w	r4, r4, #1
     15c:	f1d5 0e20 	rsbs	lr, r5, #32
     160:	db0d      	blt.n	17e <__adddf3+0xb2>
     162:	fa02 fc0e 	lsl.w	ip, r2, lr
     166:	fa22 f205 	lsr.w	r2, r2, r5
     16a:	1880      	adds	r0, r0, r2
     16c:	f141 0100 	adc.w	r1, r1, #0
     170:	fa03 f20e 	lsl.w	r2, r3, lr
     174:	1880      	adds	r0, r0, r2
     176:	fa43 f305 	asr.w	r3, r3, r5
     17a:	4159      	adcs	r1, r3
     17c:	e00e      	b.n	19c <__adddf3+0xd0>
     17e:	f1a5 0520 	sub.w	r5, r5, #32
     182:	f10e 0e20 	add.w	lr, lr, #32
     186:	2a01      	cmp	r2, #1
     188:	fa03 fc0e 	lsl.w	ip, r3, lr
     18c:	bf28      	it	cs
     18e:	f04c 0c02 	orrcs.w	ip, ip, #2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	18c0      	adds	r0, r0, r3
     198:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     19c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1a0:	d507      	bpl.n	1b2 <__adddf3+0xe6>
     1a2:	f04f 0e00 	mov.w	lr, #0
     1a6:	f1dc 0c00 	rsbs	ip, ip, #0
     1aa:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ae:	eb6e 0101 	sbc.w	r1, lr, r1
     1b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1b6:	d31b      	bcc.n	1f0 <__adddf3+0x124>
     1b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1bc:	d30c      	bcc.n	1d8 <__adddf3+0x10c>
     1be:	0849      	lsrs	r1, r1, #1
     1c0:	ea5f 0030 	movs.w	r0, r0, rrx
     1c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1c8:	f104 0401 	add.w	r4, r4, #1
     1cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1d4:	f080 809a 	bcs.w	30c <__adddf3+0x240>
     1d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1dc:	bf08      	it	eq
     1de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1e2:	f150 0000 	adcs.w	r0, r0, #0
     1e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     1ea:	ea41 0105 	orr.w	r1, r1, r5
     1ee:	bd30      	pop	{r4, r5, pc}
     1f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     1f4:	4140      	adcs	r0, r0
     1f6:	eb41 0101 	adc.w	r1, r1, r1
     1fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     1fe:	f1a4 0401 	sub.w	r4, r4, #1
     202:	d1e9      	bne.n	1d8 <__adddf3+0x10c>
     204:	f091 0f00 	teq	r1, #0
     208:	bf04      	itt	eq
     20a:	4601      	moveq	r1, r0
     20c:	2000      	moveq	r0, #0
     20e:	fab1 f381 	clz	r3, r1
     212:	bf08      	it	eq
     214:	3320      	addeq	r3, #32
     216:	f1a3 030b 	sub.w	r3, r3, #11
     21a:	f1b3 0220 	subs.w	r2, r3, #32
     21e:	da0c      	bge.n	23a <__adddf3+0x16e>
     220:	320c      	adds	r2, #12
     222:	dd08      	ble.n	236 <__adddf3+0x16a>
     224:	f102 0c14 	add.w	ip, r2, #20
     228:	f1c2 020c 	rsb	r2, r2, #12
     22c:	fa01 f00c 	lsl.w	r0, r1, ip
     230:	fa21 f102 	lsr.w	r1, r1, r2
     234:	e00c      	b.n	250 <__adddf3+0x184>
     236:	f102 0214 	add.w	r2, r2, #20
     23a:	bfd8      	it	le
     23c:	f1c2 0c20 	rsble	ip, r2, #32
     240:	fa01 f102 	lsl.w	r1, r1, r2
     244:	fa20 fc0c 	lsr.w	ip, r0, ip
     248:	bfdc      	itt	le
     24a:	ea41 010c 	orrle.w	r1, r1, ip
     24e:	4090      	lslle	r0, r2
     250:	1ae4      	subs	r4, r4, r3
     252:	bfa2      	ittt	ge
     254:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     258:	4329      	orrge	r1, r5
     25a:	bd30      	popge	{r4, r5, pc}
     25c:	ea6f 0404 	mvn.w	r4, r4
     260:	3c1f      	subs	r4, #31
     262:	da1c      	bge.n	29e <__adddf3+0x1d2>
     264:	340c      	adds	r4, #12
     266:	dc0e      	bgt.n	286 <__adddf3+0x1ba>
     268:	f104 0414 	add.w	r4, r4, #20
     26c:	f1c4 0220 	rsb	r2, r4, #32
     270:	fa20 f004 	lsr.w	r0, r0, r4
     274:	fa01 f302 	lsl.w	r3, r1, r2
     278:	ea40 0003 	orr.w	r0, r0, r3
     27c:	fa21 f304 	lsr.w	r3, r1, r4
     280:	ea45 0103 	orr.w	r1, r5, r3
     284:	bd30      	pop	{r4, r5, pc}
     286:	f1c4 040c 	rsb	r4, r4, #12
     28a:	f1c4 0220 	rsb	r2, r4, #32
     28e:	fa20 f002 	lsr.w	r0, r0, r2
     292:	fa01 f304 	lsl.w	r3, r1, r4
     296:	ea40 0003 	orr.w	r0, r0, r3
     29a:	4629      	mov	r1, r5
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	fa21 f004 	lsr.w	r0, r1, r4
     2a2:	4629      	mov	r1, r5
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f094 0f00 	teq	r4, #0
     2aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ae:	bf06      	itte	eq
     2b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2b4:	3401      	addeq	r4, #1
     2b6:	3d01      	subne	r5, #1
     2b8:	e74e      	b.n	158 <__adddf3+0x8c>
     2ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2be:	bf18      	it	ne
     2c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2c4:	d029      	beq.n	31a <__adddf3+0x24e>
     2c6:	ea94 0f05 	teq	r4, r5
     2ca:	bf08      	it	eq
     2cc:	ea90 0f02 	teqeq	r0, r2
     2d0:	d005      	beq.n	2de <__adddf3+0x212>
     2d2:	ea54 0c00 	orrs.w	ip, r4, r0
     2d6:	bf04      	itt	eq
     2d8:	4619      	moveq	r1, r3
     2da:	4610      	moveq	r0, r2
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	ea91 0f03 	teq	r1, r3
     2e2:	bf1e      	ittt	ne
     2e4:	2100      	movne	r1, #0
     2e6:	2000      	movne	r0, #0
     2e8:	bd30      	popne	{r4, r5, pc}
     2ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     2ee:	d105      	bne.n	2fc <__adddf3+0x230>
     2f0:	0040      	lsls	r0, r0, #1
     2f2:	4149      	adcs	r1, r1
     2f4:	bf28      	it	cs
     2f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     2fa:	bd30      	pop	{r4, r5, pc}
     2fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     300:	bf3c      	itt	cc
     302:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     306:	bd30      	popcc	{r4, r5, pc}
     308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     30c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     310:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     314:	f04f 0000 	mov.w	r0, #0
     318:	bd30      	pop	{r4, r5, pc}
     31a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     31e:	bf1a      	itte	ne
     320:	4619      	movne	r1, r3
     322:	4610      	movne	r0, r2
     324:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     328:	bf1c      	itt	ne
     32a:	460b      	movne	r3, r1
     32c:	4602      	movne	r2, r0
     32e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     332:	bf06      	itte	eq
     334:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     338:	ea91 0f03 	teqeq	r1, r3
     33c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     340:	bd30      	pop	{r4, r5, pc}
     342:	bf00      	nop

00000344 <__aeabi_ui2d>:
     344:	f090 0f00 	teq	r0, #0
     348:	bf04      	itt	eq
     34a:	2100      	moveq	r1, #0
     34c:	4770      	bxeq	lr
     34e:	b530      	push	{r4, r5, lr}
     350:	f44f 6480 	mov.w	r4, #1024	; 0x400
     354:	f104 0432 	add.w	r4, r4, #50	; 0x32
     358:	f04f 0500 	mov.w	r5, #0
     35c:	f04f 0100 	mov.w	r1, #0
     360:	e750      	b.n	204 <__adddf3+0x138>
     362:	bf00      	nop

00000364 <__aeabi_i2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     37c:	bf48      	it	mi
     37e:	4240      	negmi	r0, r0
     380:	f04f 0100 	mov.w	r1, #0
     384:	e73e      	b.n	204 <__adddf3+0x138>
     386:	bf00      	nop

00000388 <__aeabi_f2d>:
     388:	0042      	lsls	r2, r0, #1
     38a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     38e:	ea4f 0131 	mov.w	r1, r1, rrx
     392:	ea4f 7002 	mov.w	r0, r2, lsl #28
     396:	bf1f      	itttt	ne
     398:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     39c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3a4:	4770      	bxne	lr
     3a6:	f092 0f00 	teq	r2, #0
     3aa:	bf14      	ite	ne
     3ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3b0:	4770      	bxeq	lr
     3b2:	b530      	push	{r4, r5, lr}
     3b4:	f44f 7460 	mov.w	r4, #896	; 0x380
     3b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3c0:	e720      	b.n	204 <__adddf3+0x138>
     3c2:	bf00      	nop

000003c4 <__aeabi_ul2d>:
     3c4:	ea50 0201 	orrs.w	r2, r0, r1
     3c8:	bf08      	it	eq
     3ca:	4770      	bxeq	lr
     3cc:	b530      	push	{r4, r5, lr}
     3ce:	f04f 0500 	mov.w	r5, #0
     3d2:	e00a      	b.n	3ea <__aeabi_l2d+0x16>

000003d4 <__aeabi_l2d>:
     3d4:	ea50 0201 	orrs.w	r2, r0, r1
     3d8:	bf08      	it	eq
     3da:	4770      	bxeq	lr
     3dc:	b530      	push	{r4, r5, lr}
     3de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     3e2:	d502      	bpl.n	3ea <__aeabi_l2d+0x16>
     3e4:	4240      	negs	r0, r0
     3e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     3f6:	f43f aedc 	beq.w	1b2 <__adddf3+0xe6>
     3fa:	f04f 0203 	mov.w	r2, #3
     3fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     402:	bf18      	it	ne
     404:	3203      	addne	r2, #3
     406:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     40a:	bf18      	it	ne
     40c:	3203      	addne	r2, #3
     40e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     412:	f1c2 0320 	rsb	r3, r2, #32
     416:	fa00 fc03 	lsl.w	ip, r0, r3
     41a:	fa20 f002 	lsr.w	r0, r0, r2
     41e:	fa01 fe03 	lsl.w	lr, r1, r3
     422:	ea40 000e 	orr.w	r0, r0, lr
     426:	fa21 f102 	lsr.w	r1, r1, r2
     42a:	4414      	add	r4, r2
     42c:	e6c1      	b.n	1b2 <__adddf3+0xe6>
     42e:	bf00      	nop

00000430 <__aeabi_dmul>:
     430:	b570      	push	{r4, r5, r6, lr}
     432:	f04f 0cff 	mov.w	ip, #255	; 0xff
     436:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     43a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     43e:	bf1d      	ittte	ne
     440:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     444:	ea94 0f0c 	teqne	r4, ip
     448:	ea95 0f0c 	teqne	r5, ip
     44c:	f000 f8de 	bleq	60c <__aeabi_dmul+0x1dc>
     450:	442c      	add	r4, r5
     452:	ea81 0603 	eor.w	r6, r1, r3
     456:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     45a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     45e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     462:	bf18      	it	ne
     464:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     470:	d038      	beq.n	4e4 <__aeabi_dmul+0xb4>
     472:	fba0 ce02 	umull	ip, lr, r0, r2
     476:	f04f 0500 	mov.w	r5, #0
     47a:	fbe1 e502 	umlal	lr, r5, r1, r2
     47e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     482:	fbe0 e503 	umlal	lr, r5, r0, r3
     486:	f04f 0600 	mov.w	r6, #0
     48a:	fbe1 5603 	umlal	r5, r6, r1, r3
     48e:	f09c 0f00 	teq	ip, #0
     492:	bf18      	it	ne
     494:	f04e 0e01 	orrne.w	lr, lr, #1
     498:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     49c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4a4:	d204      	bcs.n	4b0 <__aeabi_dmul+0x80>
     4a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4aa:	416d      	adcs	r5, r5
     4ac:	eb46 0606 	adc.w	r6, r6, r6
     4b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4c8:	bf88      	it	hi
     4ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4ce:	d81e      	bhi.n	50e <__aeabi_dmul+0xde>
     4d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4d4:	bf08      	it	eq
     4d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4da:	f150 0000 	adcs.w	r0, r0, #0
     4de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     4e2:	bd70      	pop	{r4, r5, r6, pc}
     4e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     4e8:	ea46 0101 	orr.w	r1, r6, r1
     4ec:	ea40 0002 	orr.w	r0, r0, r2
     4f0:	ea81 0103 	eor.w	r1, r1, r3
     4f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     4f8:	bfc2      	ittt	gt
     4fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     4fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     502:	bd70      	popgt	{r4, r5, r6, pc}
     504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     508:	f04f 0e00 	mov.w	lr, #0
     50c:	3c01      	subs	r4, #1
     50e:	f300 80ab 	bgt.w	668 <__aeabi_dmul+0x238>
     512:	f114 0f36 	cmn.w	r4, #54	; 0x36
     516:	bfde      	ittt	le
     518:	2000      	movle	r0, #0
     51a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     51e:	bd70      	pople	{r4, r5, r6, pc}
     520:	f1c4 0400 	rsb	r4, r4, #0
     524:	3c20      	subs	r4, #32
     526:	da35      	bge.n	594 <__aeabi_dmul+0x164>
     528:	340c      	adds	r4, #12
     52a:	dc1b      	bgt.n	564 <__aeabi_dmul+0x134>
     52c:	f104 0414 	add.w	r4, r4, #20
     530:	f1c4 0520 	rsb	r5, r4, #32
     534:	fa00 f305 	lsl.w	r3, r0, r5
     538:	fa20 f004 	lsr.w	r0, r0, r4
     53c:	fa01 f205 	lsl.w	r2, r1, r5
     540:	ea40 0002 	orr.w	r0, r0, r2
     544:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     54c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     550:	fa21 f604 	lsr.w	r6, r1, r4
     554:	eb42 0106 	adc.w	r1, r2, r6
     558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     55c:	bf08      	it	eq
     55e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	f1c4 040c 	rsb	r4, r4, #12
     568:	f1c4 0520 	rsb	r5, r4, #32
     56c:	fa00 f304 	lsl.w	r3, r0, r4
     570:	fa20 f005 	lsr.w	r0, r0, r5
     574:	fa01 f204 	lsl.w	r2, r1, r4
     578:	ea40 0002 	orr.w	r0, r0, r2
     57c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     580:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     584:	f141 0100 	adc.w	r1, r1, #0
     588:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     58c:	bf08      	it	eq
     58e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	f1c4 0520 	rsb	r5, r4, #32
     598:	fa00 f205 	lsl.w	r2, r0, r5
     59c:	ea4e 0e02 	orr.w	lr, lr, r2
     5a0:	fa20 f304 	lsr.w	r3, r0, r4
     5a4:	fa01 f205 	lsl.w	r2, r1, r5
     5a8:	ea43 0302 	orr.w	r3, r3, r2
     5ac:	fa21 f004 	lsr.w	r0, r1, r4
     5b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5b4:	fa21 f204 	lsr.w	r2, r1, r4
     5b8:	ea20 0002 	bic.w	r0, r0, r2
     5bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5c4:	bf08      	it	eq
     5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f094 0f00 	teq	r4, #0
     5d0:	d10f      	bne.n	5f2 <__aeabi_dmul+0x1c2>
     5d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	eb41 0101 	adc.w	r1, r1, r1
     5dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     5e0:	bf08      	it	eq
     5e2:	3c01      	subeq	r4, #1
     5e4:	d0f7      	beq.n	5d6 <__aeabi_dmul+0x1a6>
     5e6:	ea41 0106 	orr.w	r1, r1, r6
     5ea:	f095 0f00 	teq	r5, #0
     5ee:	bf18      	it	ne
     5f0:	4770      	bxne	lr
     5f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     5f6:	0052      	lsls	r2, r2, #1
     5f8:	eb43 0303 	adc.w	r3, r3, r3
     5fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     600:	bf08      	it	eq
     602:	3d01      	subeq	r5, #1
     604:	d0f7      	beq.n	5f6 <__aeabi_dmul+0x1c6>
     606:	ea43 0306 	orr.w	r3, r3, r6
     60a:	4770      	bx	lr
     60c:	ea94 0f0c 	teq	r4, ip
     610:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     614:	bf18      	it	ne
     616:	ea95 0f0c 	teqne	r5, ip
     61a:	d00c      	beq.n	636 <__aeabi_dmul+0x206>
     61c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     620:	bf18      	it	ne
     622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     626:	d1d1      	bne.n	5cc <__aeabi_dmul+0x19c>
     628:	ea81 0103 	eor.w	r1, r1, r3
     62c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     630:	f04f 0000 	mov.w	r0, #0
     634:	bd70      	pop	{r4, r5, r6, pc}
     636:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     63a:	bf06      	itte	eq
     63c:	4610      	moveq	r0, r2
     63e:	4619      	moveq	r1, r3
     640:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     644:	d019      	beq.n	67a <__aeabi_dmul+0x24a>
     646:	ea94 0f0c 	teq	r4, ip
     64a:	d102      	bne.n	652 <__aeabi_dmul+0x222>
     64c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     650:	d113      	bne.n	67a <__aeabi_dmul+0x24a>
     652:	ea95 0f0c 	teq	r5, ip
     656:	d105      	bne.n	664 <__aeabi_dmul+0x234>
     658:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     65c:	bf1c      	itt	ne
     65e:	4610      	movne	r0, r2
     660:	4619      	movne	r1, r3
     662:	d10a      	bne.n	67a <__aeabi_dmul+0x24a>
     664:	ea81 0103 	eor.w	r1, r1, r3
     668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     66c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     674:	f04f 0000 	mov.w	r0, #0
     678:	bd70      	pop	{r4, r5, r6, pc}
     67a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     67e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     682:	bd70      	pop	{r4, r5, r6, pc}

00000684 <__aeabi_ddiv>:
     684:	b570      	push	{r4, r5, r6, lr}
     686:	f04f 0cff 	mov.w	ip, #255	; 0xff
     68a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     68e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     692:	bf1d      	ittte	ne
     694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     698:	ea94 0f0c 	teqne	r4, ip
     69c:	ea95 0f0c 	teqne	r5, ip
     6a0:	f000 f8a7 	bleq	7f2 <__aeabi_ddiv+0x16e>
     6a4:	eba4 0405 	sub.w	r4, r4, r5
     6a8:	ea81 0e03 	eor.w	lr, r1, r3
     6ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6b4:	f000 8088 	beq.w	7c8 <__aeabi_ddiv+0x144>
     6b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     6dc:	429d      	cmp	r5, r3
     6de:	bf08      	it	eq
     6e0:	4296      	cmpeq	r6, r2
     6e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     6e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
     6ea:	d202      	bcs.n	6f2 <__aeabi_ddiv+0x6e>
     6ec:	085b      	lsrs	r3, r3, #1
     6ee:	ea4f 0232 	mov.w	r2, r2, rrx
     6f2:	1ab6      	subs	r6, r6, r2
     6f4:	eb65 0503 	sbc.w	r5, r5, r3
     6f8:	085b      	lsrs	r3, r3, #1
     6fa:	ea4f 0232 	mov.w	r2, r2, rrx
     6fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     702:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     706:	ebb6 0e02 	subs.w	lr, r6, r2
     70a:	eb75 0e03 	sbcs.w	lr, r5, r3
     70e:	bf22      	ittt	cs
     710:	1ab6      	subcs	r6, r6, r2
     712:	4675      	movcs	r5, lr
     714:	ea40 000c 	orrcs.w	r0, r0, ip
     718:	085b      	lsrs	r3, r3, #1
     71a:	ea4f 0232 	mov.w	r2, r2, rrx
     71e:	ebb6 0e02 	subs.w	lr, r6, r2
     722:	eb75 0e03 	sbcs.w	lr, r5, r3
     726:	bf22      	ittt	cs
     728:	1ab6      	subcs	r6, r6, r2
     72a:	4675      	movcs	r5, lr
     72c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     730:	085b      	lsrs	r3, r3, #1
     732:	ea4f 0232 	mov.w	r2, r2, rrx
     736:	ebb6 0e02 	subs.w	lr, r6, r2
     73a:	eb75 0e03 	sbcs.w	lr, r5, r3
     73e:	bf22      	ittt	cs
     740:	1ab6      	subcs	r6, r6, r2
     742:	4675      	movcs	r5, lr
     744:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     748:	085b      	lsrs	r3, r3, #1
     74a:	ea4f 0232 	mov.w	r2, r2, rrx
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     760:	ea55 0e06 	orrs.w	lr, r5, r6
     764:	d018      	beq.n	798 <__aeabi_ddiv+0x114>
     766:	ea4f 1505 	mov.w	r5, r5, lsl #4
     76a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     76e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     772:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     776:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     77a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     77e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     782:	d1c0      	bne.n	706 <__aeabi_ddiv+0x82>
     784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     788:	d10b      	bne.n	7a2 <__aeabi_ddiv+0x11e>
     78a:	ea41 0100 	orr.w	r1, r1, r0
     78e:	f04f 0000 	mov.w	r0, #0
     792:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     796:	e7b6      	b.n	706 <__aeabi_ddiv+0x82>
     798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     79c:	bf04      	itt	eq
     79e:	4301      	orreq	r1, r0
     7a0:	2000      	moveq	r0, #0
     7a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7a6:	bf88      	it	hi
     7a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7ac:	f63f aeaf 	bhi.w	50e <__aeabi_dmul+0xde>
     7b0:	ebb5 0c03 	subs.w	ip, r5, r3
     7b4:	bf04      	itt	eq
     7b6:	ebb6 0c02 	subseq.w	ip, r6, r2
     7ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7be:	f150 0000 	adcs.w	r0, r0, #0
     7c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7d4:	bfc2      	ittt	gt
     7d6:	ebd4 050c 	rsbsgt	r5, r4, ip
     7da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     7de:	bd70      	popgt	{r4, r5, r6, pc}
     7e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     7e4:	f04f 0e00 	mov.w	lr, #0
     7e8:	3c01      	subs	r4, #1
     7ea:	e690      	b.n	50e <__aeabi_dmul+0xde>
     7ec:	ea45 0e06 	orr.w	lr, r5, r6
     7f0:	e68d      	b.n	50e <__aeabi_dmul+0xde>
     7f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	bf08      	it	eq
     7fc:	ea95 0f0c 	teqeq	r5, ip
     800:	f43f af3b 	beq.w	67a <__aeabi_dmul+0x24a>
     804:	ea94 0f0c 	teq	r4, ip
     808:	d10a      	bne.n	820 <__aeabi_ddiv+0x19c>
     80a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     80e:	f47f af34 	bne.w	67a <__aeabi_dmul+0x24a>
     812:	ea95 0f0c 	teq	r5, ip
     816:	f47f af25 	bne.w	664 <__aeabi_dmul+0x234>
     81a:	4610      	mov	r0, r2
     81c:	4619      	mov	r1, r3
     81e:	e72c      	b.n	67a <__aeabi_dmul+0x24a>
     820:	ea95 0f0c 	teq	r5, ip
     824:	d106      	bne.n	834 <__aeabi_ddiv+0x1b0>
     826:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     82a:	f43f aefd 	beq.w	628 <__aeabi_dmul+0x1f8>
     82e:	4610      	mov	r0, r2
     830:	4619      	mov	r1, r3
     832:	e722      	b.n	67a <__aeabi_dmul+0x24a>
     834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     838:	bf18      	it	ne
     83a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     83e:	f47f aec5 	bne.w	5cc <__aeabi_dmul+0x19c>
     842:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     846:	f47f af0d 	bne.w	664 <__aeabi_dmul+0x234>
     84a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     84e:	f47f aeeb 	bne.w	628 <__aeabi_dmul+0x1f8>
     852:	e712      	b.n	67a <__aeabi_dmul+0x24a>

00000854 <__gedf2>:
     854:	f04f 3cff 	mov.w	ip, #4294967295
     858:	e006      	b.n	868 <__cmpdf2+0x4>
     85a:	bf00      	nop

0000085c <__ledf2>:
     85c:	f04f 0c01 	mov.w	ip, #1
     860:	e002      	b.n	868 <__cmpdf2+0x4>
     862:	bf00      	nop

00000864 <__cmpdf2>:
     864:	f04f 0c01 	mov.w	ip, #1
     868:	f84d cd04 	str.w	ip, [sp, #-4]!
     86c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     874:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     878:	bf18      	it	ne
     87a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     87e:	d01b      	beq.n	8b8 <__cmpdf2+0x54>
     880:	b001      	add	sp, #4
     882:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     886:	bf0c      	ite	eq
     888:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     88c:	ea91 0f03 	teqne	r1, r3
     890:	bf02      	ittt	eq
     892:	ea90 0f02 	teqeq	r0, r2
     896:	2000      	moveq	r0, #0
     898:	4770      	bxeq	lr
     89a:	f110 0f00 	cmn.w	r0, #0
     89e:	ea91 0f03 	teq	r1, r3
     8a2:	bf58      	it	pl
     8a4:	4299      	cmppl	r1, r3
     8a6:	bf08      	it	eq
     8a8:	4290      	cmpeq	r0, r2
     8aa:	bf2c      	ite	cs
     8ac:	17d8      	asrcs	r0, r3, #31
     8ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8b2:	f040 0001 	orr.w	r0, r0, #1
     8b6:	4770      	bx	lr
     8b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8c0:	d102      	bne.n	8c8 <__cmpdf2+0x64>
     8c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8c6:	d107      	bne.n	8d8 <__cmpdf2+0x74>
     8c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8d0:	d1d6      	bne.n	880 <__cmpdf2+0x1c>
     8d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     8d6:	d0d3      	beq.n	880 <__cmpdf2+0x1c>
     8d8:	f85d 0b04 	ldr.w	r0, [sp], #4
     8dc:	4770      	bx	lr
     8de:	bf00      	nop

000008e0 <__aeabi_cdrcmple>:
     8e0:	4684      	mov	ip, r0
     8e2:	4610      	mov	r0, r2
     8e4:	4662      	mov	r2, ip
     8e6:	468c      	mov	ip, r1
     8e8:	4619      	mov	r1, r3
     8ea:	4663      	mov	r3, ip
     8ec:	e000      	b.n	8f0 <__aeabi_cdcmpeq>
     8ee:	bf00      	nop

000008f0 <__aeabi_cdcmpeq>:
     8f0:	b501      	push	{r0, lr}
     8f2:	f7ff ffb7 	bl	864 <__cmpdf2>
     8f6:	2800      	cmp	r0, #0
     8f8:	bf48      	it	mi
     8fa:	f110 0f00 	cmnmi.w	r0, #0
     8fe:	bd01      	pop	{r0, pc}

00000900 <__aeabi_dcmpeq>:
     900:	f84d ed08 	str.w	lr, [sp, #-8]!
     904:	f7ff fff4 	bl	8f0 <__aeabi_cdcmpeq>
     908:	bf0c      	ite	eq
     90a:	2001      	moveq	r0, #1
     90c:	2000      	movne	r0, #0
     90e:	f85d fb08 	ldr.w	pc, [sp], #8
     912:	bf00      	nop

00000914 <__aeabi_dcmplt>:
     914:	f84d ed08 	str.w	lr, [sp, #-8]!
     918:	f7ff ffea 	bl	8f0 <__aeabi_cdcmpeq>
     91c:	bf34      	ite	cc
     91e:	2001      	movcc	r0, #1
     920:	2000      	movcs	r0, #0
     922:	f85d fb08 	ldr.w	pc, [sp], #8
     926:	bf00      	nop

00000928 <__aeabi_dcmple>:
     928:	f84d ed08 	str.w	lr, [sp, #-8]!
     92c:	f7ff ffe0 	bl	8f0 <__aeabi_cdcmpeq>
     930:	bf94      	ite	ls
     932:	2001      	movls	r0, #1
     934:	2000      	movhi	r0, #0
     936:	f85d fb08 	ldr.w	pc, [sp], #8
     93a:	bf00      	nop

0000093c <__aeabi_dcmpge>:
     93c:	f84d ed08 	str.w	lr, [sp, #-8]!
     940:	f7ff ffce 	bl	8e0 <__aeabi_cdrcmple>
     944:	bf94      	ite	ls
     946:	2001      	movls	r0, #1
     948:	2000      	movhi	r0, #0
     94a:	f85d fb08 	ldr.w	pc, [sp], #8
     94e:	bf00      	nop

00000950 <__aeabi_dcmpgt>:
     950:	f84d ed08 	str.w	lr, [sp, #-8]!
     954:	f7ff ffc4 	bl	8e0 <__aeabi_cdrcmple>
     958:	bf34      	ite	cc
     95a:	2001      	movcc	r0, #1
     95c:	2000      	movcs	r0, #0
     95e:	f85d fb08 	ldr.w	pc, [sp], #8
     962:	bf00      	nop

00000964 <__aeabi_d2uiz>:
     964:	004a      	lsls	r2, r1, #1
     966:	d211      	bcs.n	98c <__aeabi_d2uiz+0x28>
     968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     96c:	d211      	bcs.n	992 <__aeabi_d2uiz+0x2e>
     96e:	d50d      	bpl.n	98c <__aeabi_d2uiz+0x28>
     970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     978:	d40e      	bmi.n	998 <__aeabi_d2uiz+0x34>
     97a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     97e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     986:	fa23 f002 	lsr.w	r0, r3, r2
     98a:	4770      	bx	lr
     98c:	f04f 0000 	mov.w	r0, #0
     990:	4770      	bx	lr
     992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     996:	d102      	bne.n	99e <__aeabi_d2uiz+0x3a>
     998:	f04f 30ff 	mov.w	r0, #4294967295
     99c:	4770      	bx	lr
     99e:	f04f 0000 	mov.w	r0, #0
     9a2:	4770      	bx	lr

000009a4 <__aeabi_d2f>:
     9a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9ac:	bf24      	itt	cs
     9ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9b6:	d90d      	bls.n	9d4 <__aeabi_d2f+0x30>
     9b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9cc:	bf08      	it	eq
     9ce:	f020 0001 	biceq.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9d8:	d121      	bne.n	a1e <__aeabi_d2f+0x7a>
     9da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9de:	bfbc      	itt	lt
     9e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9e4:	4770      	bxlt	lr
     9e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9ee:	f1c2 0218 	rsb	r2, r2, #24
     9f2:	f1c2 0c20 	rsb	ip, r2, #32
     9f6:	fa10 f30c 	lsls.w	r3, r0, ip
     9fa:	fa20 f002 	lsr.w	r0, r0, r2
     9fe:	bf18      	it	ne
     a00:	f040 0001 	orrne.w	r0, r0, #1
     a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
     a10:	ea40 000c 	orr.w	r0, r0, ip
     a14:	fa23 f302 	lsr.w	r3, r3, r2
     a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a1c:	e7cc      	b.n	9b8 <__aeabi_d2f+0x14>
     a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a22:	d107      	bne.n	a34 <__aeabi_d2f+0x90>
     a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a28:	bf1e      	ittt	ne
     a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a32:	4770      	bxne	lr
     a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a40:	4770      	bx	lr
     a42:	bf00      	nop

00000a44 <am_devices_led_array_init>:
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     a44:	2900      	cmp	r1, #0
     a46:	f000 80e8 	beq.w	c1a <am_devices_led_array_init+0x1d6>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     a4a:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a52:	b085      	sub	sp, #20
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     a54:	461a      	mov	r2, r3
     a56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
     a5a:	9300      	str	r3, [sp, #0]
     a5c:	f8df e1d4 	ldr.w	lr, [pc, #468]	; c34 <am_devices_led_array_init+0x1f0>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     a60:	9201      	str	r2, [sp, #4]
     a62:	4603      	mov	r3, r0

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     a64:	2601      	movs	r6, #1
     a66:	3004      	adds	r0, #4
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     a68:	f04f 0c07 	mov.w	ip, #7
     a6c:	27ff      	movs	r7, #255	; 0xff
     a6e:	f04f 0818 	mov.w	r8, #24
     a72:	4689      	mov	r9, r1
     a74:	e06a      	b.n	b4c <am_devices_led_array_init+0x108>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     a76:	f850 2c04 	ldr.w	r2, [r0, #-4]
     a7a:	2a31      	cmp	r2, #49	; 0x31
     a7c:	d847      	bhi.n	b0e <am_devices_led_array_init+0xca>
     a7e:	9c01      	ldr	r4, [sp, #4]
     a80:	9402      	str	r4, [sp, #8]
     a82:	b672      	cpsid	i
     a84:	2173      	movs	r1, #115	; 0x73
     a86:	f8ce 1000 	str.w	r1, [lr]
     a8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
     a8e:	4d63      	ldr	r5, [pc, #396]	; (c1c <am_devices_led_array_init+0x1d8>)
     a90:	4c63      	ldr	r4, [pc, #396]	; (c20 <am_devices_led_array_init+0x1dc>)
     a92:	0851      	lsrs	r1, r2, #1
     a94:	f001 0a7c 	and.w	sl, r1, #124	; 0x7c
     a98:	4455      	add	r5, sl
     a9a:	0092      	lsls	r2, r2, #2
     a9c:	6829      	ldr	r1, [r5, #0]
     a9e:	f002 0b1c 	and.w	fp, r2, #28
     aa2:	fa0c f20b 	lsl.w	r2, ip, fp
     aa6:	ea21 0a02 	bic.w	sl, r1, r2
     aaa:	2102      	movs	r1, #2
     aac:	fa01 fb0b 	lsl.w	fp, r1, fp
     ab0:	ea4a 020b 	orr.w	r2, sl, fp
     ab4:	602a      	str	r2, [r5, #0]
     ab6:	f850 5c04 	ldr.w	r5, [r0, #-4]
     aba:	f005 0afc 	and.w	sl, r5, #252	; 0xfc
     abe:	f10a 4180 	add.w	r1, sl, #1073741824	; 0x40000000
     ac2:	f501 3b80 	add.w	fp, r1, #65536	; 0x10000
     ac6:	00ea      	lsls	r2, r5, #3
     ac8:	f002 0118 	and.w	r1, r2, #24
     acc:	f8db 5000 	ldr.w	r5, [fp]
     ad0:	fa07 f201 	lsl.w	r2, r7, r1
     ad4:	ea25 0502 	bic.w	r5, r5, r2
     ad8:	fa08 f101 	lsl.w	r1, r8, r1
     adc:	430d      	orrs	r5, r1
     ade:	f8cb 5000 	str.w	r5, [fp]
     ae2:	f850 2c04 	ldr.w	r2, [r0, #-4]
     ae6:	f002 0afc 	and.w	sl, r2, #252	; 0xfc
     aea:	4454      	add	r4, sl
     aec:	00d5      	lsls	r5, r2, #3
     aee:	6821      	ldr	r1, [r4, #0]
     af0:	f005 0b18 	and.w	fp, r5, #24
     af4:	fa07 f20b 	lsl.w	r2, r7, fp
     af8:	ea21 0502 	bic.w	r5, r1, r2
     afc:	2100      	movs	r1, #0
     afe:	6025      	str	r5, [r4, #0]
     b00:	f8ce 1000 	str.w	r1, [lr]
     b04:	9c02      	ldr	r4, [sp, #8]
     b06:	f384 8810 	msr	PRIMASK, r4
     b0a:	f850 2c04 	ldr.w	r2, [r0, #-4]

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     b0e:	4d45      	ldr	r5, [pc, #276]	; (c24 <am_devices_led_array_init+0x1e0>)
     b10:	08d1      	lsrs	r1, r2, #3
     b12:	f001 0a04 	and.w	sl, r1, #4
     b16:	4455      	add	r5, sl
     b18:	f002 041f 	and.w	r4, r2, #31
     b1c:	fa06 f204 	lsl.w	r2, r6, r4
     b20:	602a      	str	r2, [r5, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     b22:	685d      	ldr	r5, [r3, #4]
     b24:	f850 2c04 	ldr.w	r2, [r0, #-4]
     b28:	f015 0f01 	tst.w	r5, #1
     b2c:	d070      	beq.n	c10 <am_devices_led_array_init+0x1cc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     b2e:	493e      	ldr	r1, [pc, #248]	; (c28 <am_devices_led_array_init+0x1e4>)
     b30:	08d4      	lsrs	r4, r2, #3
     b32:	f004 0b04 	and.w	fp, r4, #4
     b36:	f002 0a1f 	and.w	sl, r2, #31
     b3a:	4459      	add	r1, fp
     b3c:	3308      	adds	r3, #8
     b3e:	fa06 f20a 	lsl.w	r2, r6, sl
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     b42:	4599      	cmp	r9, r3
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     b44:	600a      	str	r2, [r1, #0]
     b46:	f100 0008 	add.w	r0, r0, #8
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     b4a:	d063      	beq.n	c14 <am_devices_led_array_init+0x1d0>
am_devices_led_init(am_devices_led_t *psLED)
{
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     b4c:	685c      	ldr	r4, [r3, #4]
     b4e:	f014 0202 	ands.w	r2, r4, #2
     b52:	d190      	bne.n	a76 <am_devices_led_array_init+0x32>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     b54:	f850 1c04 	ldr.w	r1, [r0, #-4]
     b58:	2931      	cmp	r1, #49	; 0x31
     b5a:	d849      	bhi.n	bf0 <am_devices_led_array_init+0x1ac>
     b5c:	9d00      	ldr	r5, [sp, #0]
     b5e:	9503      	str	r5, [sp, #12]
     b60:	b672      	cpsid	i
     b62:	2173      	movs	r1, #115	; 0x73
     b64:	f8ce 1000 	str.w	r1, [lr]
     b68:	f850 4c04 	ldr.w	r4, [r0, #-4]
     b6c:	4d2b      	ldr	r5, [pc, #172]	; (c1c <am_devices_led_array_init+0x1d8>)
     b6e:	492c      	ldr	r1, [pc, #176]	; (c20 <am_devices_led_array_init+0x1dc>)
     b70:	ea4f 0a54 	mov.w	sl, r4, lsr #1
     b74:	f00a 0b7c 	and.w	fp, sl, #124	; 0x7c
     b78:	445d      	add	r5, fp
     b7a:	00a4      	lsls	r4, r4, #2
     b7c:	f8d5 a000 	ldr.w	sl, [r5]
     b80:	f004 041c 	and.w	r4, r4, #28
     b84:	fa0c fb04 	lsl.w	fp, ip, r4
     b88:	ea2a 0a0b 	bic.w	sl, sl, fp
     b8c:	f04f 0b06 	mov.w	fp, #6
     b90:	fa0b f404 	lsl.w	r4, fp, r4
     b94:	ea4a 0404 	orr.w	r4, sl, r4
     b98:	602c      	str	r4, [r5, #0]
     b9a:	f850 4c04 	ldr.w	r4, [r0, #-4]
     b9e:	f004 05fc 	and.w	r5, r4, #252	; 0xfc
     ba2:	f105 4a80 	add.w	sl, r5, #1073741824	; 0x40000000
     ba6:	f50a 3580 	add.w	r5, sl, #65536	; 0x10000
     baa:	00e4      	lsls	r4, r4, #3
     bac:	f8d5 a000 	ldr.w	sl, [r5]
     bb0:	f004 0418 	and.w	r4, r4, #24
     bb4:	fa07 fb04 	lsl.w	fp, r7, r4
     bb8:	ea2a 0a0b 	bic.w	sl, sl, fp
     bbc:	fa08 f404 	lsl.w	r4, r8, r4
     bc0:	ea4a 0404 	orr.w	r4, sl, r4
     bc4:	602c      	str	r4, [r5, #0]
     bc6:	f850 4c04 	ldr.w	r4, [r0, #-4]
     bca:	f004 05fc 	and.w	r5, r4, #252	; 0xfc
     bce:	4429      	add	r1, r5
     bd0:	00e4      	lsls	r4, r4, #3
     bd2:	680d      	ldr	r5, [r1, #0]
     bd4:	f004 0b18 	and.w	fp, r4, #24
     bd8:	fa07 fa0b 	lsl.w	sl, r7, fp
     bdc:	ea25 040a 	bic.w	r4, r5, sl
     be0:	600c      	str	r4, [r1, #0]
     be2:	f8ce 2000 	str.w	r2, [lr]
     be6:	9a03      	ldr	r2, [sp, #12]
     be8:	f382 8810 	msr	PRIMASK, r2
     bec:	f850 1c04 	ldr.w	r1, [r0, #-4]

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     bf0:	4d0e      	ldr	r5, [pc, #56]	; (c2c <am_devices_led_array_init+0x1e8>)
     bf2:	08cc      	lsrs	r4, r1, #3
     bf4:	f004 0b04 	and.w	fp, r4, #4
     bf8:	f001 021f 	and.w	r2, r1, #31
     bfc:	445d      	add	r5, fp
     bfe:	fa06 f102 	lsl.w	r1, r6, r2
     c02:	6029      	str	r1, [r5, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     c04:	685d      	ldr	r5, [r3, #4]
     c06:	f850 2c04 	ldr.w	r2, [r0, #-4]
     c0a:	f015 0f01 	tst.w	r5, #1
     c0e:	d18e      	bne.n	b2e <am_devices_led_array_init+0xea>
     c10:	4907      	ldr	r1, [pc, #28]	; (c30 <am_devices_led_array_init+0x1ec>)
     c12:	e78d      	b.n	b30 <am_devices_led_array_init+0xec>
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    {
        am_devices_led_init(psLEDs + i);
    }
}
     c14:	b005      	add	sp, #20
     c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c1a:	4770      	bx	lr
     c1c:	40010040 	.word	0x40010040
     c20:	400100e0 	.word	0x400100e0
     c24:	400100a8 	.word	0x400100a8
     c28:	40010090 	.word	0x40010090
     c2c:	400100b4 	.word	0x400100b4
     c30:	40010098 	.word	0x40010098
     c34:	40010060 	.word	0x40010060

00000c38 <am_devices_led_on>:
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     c38:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
     c3c:	685b      	ldr	r3, [r3, #4]
     c3e:	079a      	lsls	r2, r3, #30
     c40:	d511      	bpl.n	c66 <am_devices_led_on+0x2e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     c42:	f013 0f01 	tst.w	r3, #1
     c46:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
     c4a:	bf14      	ite	ne
     c4c:	4808      	ldrne	r0, [pc, #32]	; (c70 <am_devices_led_on+0x38>)
     c4e:	4809      	ldreq	r0, [pc, #36]	; (c74 <am_devices_led_on+0x3c>)
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     c50:	08ca      	lsrs	r2, r1, #3
     c52:	f002 0c04 	and.w	ip, r2, #4
     c56:	f001 031f 	and.w	r3, r1, #31
     c5a:	2101      	movs	r1, #1
     c5c:	fa01 f203 	lsl.w	r2, r1, r3
     c60:	f84c 2000 	str.w	r2, [ip, r0]
     c64:	4770      	bx	lr
     c66:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
     c6a:	4803      	ldr	r0, [pc, #12]	; (c78 <am_devices_led_on+0x40>)
     c6c:	e7f0      	b.n	c50 <am_devices_led_on+0x18>
     c6e:	bf00      	nop
     c70:	40010090 	.word	0x40010090
     c74:	40010098 	.word	0x40010098
     c78:	400100a8 	.word	0x400100a8

00000c7c <am_systick_isr>:
am_systick_isr(void)
{
    //
    // Add enough cycles to account for one full cycle of systick.
    //
    g_ui32SysTickWrappedTime += 0x01000000;
     c7c:	4a02      	ldr	r2, [pc, #8]	; (c88 <am_systick_isr+0xc>)
     c7e:	6813      	ldr	r3, [r2, #0]
     c80:	f103 7080 	add.w	r0, r3, #16777216	; 0x1000000
     c84:	6010      	str	r0, [r2, #0]
     c86:	4770      	bx	lr
     c88:	10001098 	.word	0x10001098

00000c8c <core_list_mergesort.constprop.2>:
    Note:
    We have a special header for the list that will always be first,
    but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
     c8c:	4601      	mov	r1, r0
     c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
     c92:	f04f 0c01 	mov.w	ip, #1
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
     c96:	f04f 0900 	mov.w	r9, #0
     c9a:	2900      	cmp	r1, #0
     c9c:	f000 809a 	beq.w	dd4 <core_list_mergesort.constprop.2+0x148>
     ca0:	f04f 0e00 	mov.w	lr, #0
     ca4:	4672      	mov	r2, lr
     ca6:	46f0      	mov	r8, lr
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     ca8:	680b      	ldr	r3, [r1, #0]
     caa:	f10c 30ff 	add.w	r0, ip, #4294967295
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
            nmerges++;  /* there exists a merge to be done */
     cae:	f108 0801 	add.w	r8, r8, #1
     cb2:	f000 0507 	and.w	r5, r0, #7
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     cb6:	2401      	movs	r4, #1
                q = q->next;
                if (!q) break;
     cb8:	2b00      	cmp	r3, #0
     cba:	d03f      	beq.n	d3c <core_list_mergesort.constprop.2+0xb0>
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
     cbc:	4564      	cmp	r4, ip
     cbe:	d03d      	beq.n	d3c <core_list_mergesort.constprop.2+0xb0>
     cc0:	b315      	cbz	r5, d08 <core_list_mergesort.constprop.2+0x7c>
     cc2:	2d01      	cmp	r5, #1
     cc4:	d01b      	beq.n	cfe <core_list_mergesort.constprop.2+0x72>
     cc6:	2d02      	cmp	r5, #2
     cc8:	d016      	beq.n	cf8 <core_list_mergesort.constprop.2+0x6c>
     cca:	2d03      	cmp	r5, #3
     ccc:	d011      	beq.n	cf2 <core_list_mergesort.constprop.2+0x66>
     cce:	2d04      	cmp	r5, #4
     cd0:	d00c      	beq.n	cec <core_list_mergesort.constprop.2+0x60>
     cd2:	2d05      	cmp	r5, #5
     cd4:	d007      	beq.n	ce6 <core_list_mergesort.constprop.2+0x5a>
     cd6:	2d06      	cmp	r5, #6
     cd8:	d002      	beq.n	ce0 <core_list_mergesort.constprop.2+0x54>
                psize++;
                q = q->next;
     cda:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     cdc:	2402      	movs	r4, #2
                q = q->next;
                if (!q) break;
     cde:	b36b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     ce0:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     ce2:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     ce4:	b353      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     ce6:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     ce8:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     cea:	b33b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     cec:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     cee:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     cf0:	b323      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     cf2:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     cf4:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     cf6:	b30b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     cf8:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     cfa:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     cfc:	b1f3      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     cfe:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d00:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     d02:	b1db      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
     d04:	4564      	cmp	r4, ip
     d06:	d019      	beq.n	d3c <core_list_mergesort.constprop.2+0xb0>
                psize++;
                q = q->next;
     d08:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d0a:	3401      	adds	r4, #1
     d0c:	4626      	mov	r6, r4
                q = q->next;
                if (!q) break;
     d0e:	b1ab      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d10:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d12:	3401      	adds	r4, #1
                q = q->next;
                if (!q) break;
     d14:	b193      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d16:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d18:	1cb4      	adds	r4, r6, #2
                q = q->next;
                if (!q) break;
     d1a:	b17b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d1c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d1e:	1cf4      	adds	r4, r6, #3
                q = q->next;
                if (!q) break;
     d20:	b163      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d22:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d24:	1d34      	adds	r4, r6, #4
                q = q->next;
                if (!q) break;
     d26:	b14b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d28:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d2a:	1d74      	adds	r4, r6, #5
                q = q->next;
                if (!q) break;
     d2c:	b133      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d2e:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d30:	1db4      	adds	r4, r6, #6
                q = q->next;
                if (!q) break;
     d32:	b11b      	cbz	r3, d3c <core_list_mergesort.constprop.2+0xb0>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     d34:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     d36:	1df4      	adds	r4, r6, #7
                q = q->next;
                if (!q) break;
     d38:	2b00      	cmp	r3, #0
     d3a:	d1e3      	bne.n	d04 <core_list_mergesort.constprop.2+0x78>

                /* add the next element to the merged list */
                if (tail) {
                    tail->next = e;
                } else {
                    list = e;
     d3c:	460e      	mov	r6, r1
     d3e:	4665      	mov	r5, ip
     d40:	4619      	mov	r1, r3

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
     d42:	b344      	cbz	r4, d96 <core_list_mergesort.constprop.2+0x10a>

                /* decide whether next element of merge comes from p or q */
                if (psize == 0) {
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
     d44:	b38d      	cbz	r5, daa <core_list_mergesort.constprop.2+0x11e>
     d46:	b381      	cbz	r1, daa <core_list_mergesort.constprop.2+0x11e>
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d48:	f8d6 a004 	ldr.w	sl, [r6, #4]
     d4c:	6848      	ldr	r0, [r1, #4]

    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
    if (res==NULL) {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     d4e:	f9ba 3000 	ldrsh.w	r3, [sl]
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d52:	f9ba 7002 	ldrsh.w	r7, [sl, #2]

    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
    if (res==NULL) {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     d56:	f023 0bff 	bic.w	fp, r3, #255	; 0xff
     d5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
     d5e:	ea4b 0b03 	orr.w	fp, fp, r3
     d62:	f8aa b000 	strh.w	fp, [sl]
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d66:	f9b0 3000 	ldrsh.w	r3, [r0]
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d6a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
    if (res==NULL) {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d6e:	f023 0aff 	bic.w	sl, r3, #255	; 0xff
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d72:	ebcb 0707 	rsb	r7, fp, r7
    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
    if (res==NULL) {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d76:	f3c3 2307 	ubfx	r3, r3, #8, #8
     d7a:	ea4a 0b03 	orr.w	fp, sl, r3
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d7e:	2f00      	cmp	r7, #0
    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
    if (res==NULL) {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d80:	f8a0 b000 	strh.w	fp, [r0]
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     d84:	dd11      	ble.n	daa <core_list_mergesort.constprop.2+0x11e>
                    /* First element of p is lower (or same); e must come from p. */
                    e = p; p = p->next; psize--;
                } else {
                    /* First element of q is lower; e must come from q. */
                    e = q; q = q->next; qsize--;
     d86:	4608      	mov	r0, r1
     d88:	6809      	ldr	r1, [r1, #0]
     d8a:	3d01      	subs	r5, #1
                }

                /* add the next element to the merged list */
                if (tail) {
     d8c:	b152      	cbz	r2, da4 <core_list_mergesort.constprop.2+0x118>
                    tail->next = e;
     d8e:	6010      	str	r0, [r2, #0]
                } else {
                    list = e;
     d90:	4602      	mov	r2, r0

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
     d92:	2c00      	cmp	r4, #0
     d94:	d1d6      	bne.n	d44 <core_list_mergesort.constprop.2+0xb8>
     d96:	b165      	cbz	r5, db2 <core_list_mergesort.constprop.2+0x126>
     d98:	b171      	cbz	r1, db8 <core_list_mergesort.constprop.2+0x12c>

                /* decide whether next element of merge comes from p or q */
                if (psize == 0) {
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
     d9a:	4608      	mov	r0, r1
     d9c:	3d01      	subs	r5, #1
     d9e:	6809      	ldr	r1, [r1, #0]
                    /* First element of q is lower; e must come from q. */
                    e = q; q = q->next; qsize--;
                }

                /* add the next element to the merged list */
                if (tail) {
     da0:	2a00      	cmp	r2, #0
     da2:	d1f4      	bne.n	d8e <core_list_mergesort.constprop.2+0x102>
                    tail->next = e;
                } else {
                    list = e;
     da4:	4686      	mov	lr, r0
     da6:	4602      	mov	r2, r0
     da8:	e7f3      	b.n	d92 <core_list_mergesort.constprop.2+0x106>
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
                    /* First element of p is lower (or same); e must come from p. */
                    e = p; p = p->next; psize--;
     daa:	4630      	mov	r0, r6
     dac:	3c01      	subs	r4, #1
     dae:	6836      	ldr	r6, [r6, #0]
     db0:	e7ec      	b.n	d8c <core_list_mergesort.constprop.2+0x100>
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
     db2:	2900      	cmp	r1, #0
     db4:	f47f af78 	bne.w	ca8 <core_list_mergesort.constprop.2+0x1c>
        }

        tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     db8:	f1b8 0f01 	cmp.w	r8, #1

            /* now p has stepped `insize' places along, and q has too */
            p = q;
        }

        tail->next = NULL;
     dbc:	f8c2 9000 	str.w	r9, [r2]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     dc0:	d102      	bne.n	dc8 <core_list_mergesort.constprop.2+0x13c>
        insize *= 2;
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
     dc2:	4670      	mov	r0, lr
     dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
     dc8:	4671      	mov	r1, lr
     dca:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
     dce:	2900      	cmp	r1, #0
     dd0:	f47f af66 	bne.w	ca0 <core_list_mergesort.constprop.2+0x14>

            /* now p has stepped `insize' places along, and q has too */
            p = q;
        }

        tail->next = NULL;
     dd4:	6009      	str	r1, [r1, #0]
     dd6:	deff      	udf	#255	; 0xff

00000dd8 <core_bench_list>:
    - List sort
    - Operate on data from list (crc)
    - Single remove/reinsert
    * At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee_u16 retval=0;
    ee_u16 found=0,missed=0;
    list_head *list=res->list;
    ee_s16 find_num=res->seed3;
     ddc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
    * At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
    ee_u16 retval=0;
    ee_u16 found=0,missed=0;
    list_head *list=res->list;
     de0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
    - List sort
    - Operate on data from list (crc)
    - Single remove/reinsert
    * At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     de4:	b08d      	sub	sp, #52	; 0x34
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
     de6:	2d00      	cmp	r5, #0
    - List sort
    - Operate on data from list (crc)
    - Single remove/reinsert
    * At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     de8:	9003      	str	r0, [sp, #12]
     dea:	468e      	mov	lr, r1
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
     dec:	f340 8210 	ble.w	1210 <core_bench_list+0x438>
     df0:	2000      	movs	r0, #0
     df2:	4604      	mov	r4, r0
     df4:	4602      	mov	r2, r0
     df6:	460f      	mov	r7, r1
     df8:	4680      	mov	r8, r0
     dfa:	46a9      	mov	r9, r5
     dfc:	465b      	mov	r3, fp
     dfe:	468c      	mov	ip, r1

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
     e00:	2f00      	cmp	r7, #0
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
        info.data16= (i & 0xff) ;
     e02:	fa5f fe80 	uxtb.w	lr, r0

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
     e06:	f2c0 81d5 	blt.w	11b4 <core_bench_list+0x3dc>
        while (list && (list->info->idx != info->idx))
     e0a:	2b00      	cmp	r3, #0
     e0c:	f000 81e2 	beq.w	11d4 <core_bench_list+0x3fc>
     e10:	685d      	ldr	r5, [r3, #4]
     e12:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
     e16:	45ba      	cmp	sl, r7
     e18:	461d      	mov	r5, r3
     e1a:	d105      	bne.n	e28 <core_bench_list+0x50>
     e1c:	e007      	b.n	e2e <core_bench_list+0x56>
     e1e:	6869      	ldr	r1, [r5, #4]
     e20:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
     e24:	42be      	cmp	r6, r7
     e26:	d002      	beq.n	e2e <core_bench_list+0x56>
            list=list->next;
     e28:	682d      	ldr	r5, [r5, #0]
    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
        while (list && (list->info->idx != info->idx))
     e2a:	2d00      	cmp	r5, #0
     e2c:	d1f7      	bne.n	e1e <core_bench_list+0x46>
     e2e:	2600      	movs	r6, #0
     e30:	e000      	b.n	e34 <core_bench_list+0x5c>
    Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
    list_head *next=NULL, *tmp;
    while (list) {
     e32:	460b      	mov	r3, r1
        tmp=list->next;
     e34:	6819      	ldr	r1, [r3, #0]
        list->next=next;
     e36:	601e      	str	r6, [r3, #0]
     e38:	461e      	mov	r6, r3
    Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
    list_head *next=NULL, *tmp;
    while (list) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d1f9      	bne.n	e32 <core_bench_list+0x5a>
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
        info.data16= (i & 0xff) ;
        this_find=core_list_find(list,&info);
        list=core_list_reverse(list);
        if (this_find==NULL) {
     e3e:	2d00      	cmp	r5, #0
     e40:	f000 81c8 	beq.w	11d4 <core_bench_list+0x3fc>
            missed++;
            retval+=(list->next->info->data16 >> 8) & 1;
        }
        else {
            found++;
            if (this_find->info->data16 & 0x1) /* use found value */
     e44:	686e      	ldr	r6, [r5, #4]
     e46:	f9b6 b000 	ldrsh.w	fp, [r6]
        if (this_find==NULL) {
            missed++;
            retval+=(list->next->info->data16 >> 8) & 1;
        }
        else {
            found++;
     e4a:	3401      	adds	r4, #1
            if (this_find->info->data16 & 0x1) /* use found value */
     e4c:	ea5f 76cb 	movs.w	r6, fp, lsl #31
        if (this_find==NULL) {
            missed++;
            retval+=(list->next->info->data16 >> 8) & 1;
        }
        else {
            found++;
     e50:	b2a4      	uxth	r4, r4
            if (this_find->info->data16 & 0x1) /* use found value */
     e52:	d503      	bpl.n	e5c <core_bench_list+0x84>
                retval+=(this_find->info->data16 >> 9) & 1;
     e54:	f3cb 2a40 	ubfx	sl, fp, #9, #1
     e58:	4452      	add	r2, sl
     e5a:	b292      	uxth	r2, r2
            /* and cache next item at the head of the list (if any) */
            if (this_find->next != NULL) {
     e5c:	6829      	ldr	r1, [r5, #0]
     e5e:	b121      	cbz	r1, e6a <core_bench_list+0x92>
                finder = this_find->next;
                this_find->next = finder->next;
     e60:	680e      	ldr	r6, [r1, #0]
     e62:	602e      	str	r6, [r5, #0]
                finder->next=list->next;
     e64:	681d      	ldr	r5, [r3, #0]
     e66:	600d      	str	r5, [r1, #0]
                list->next=finder;
     e68:	6019      	str	r1, [r3, #0]
            }
        }
        if (info.idx>=0)
     e6a:	2f00      	cmp	r7, #0
     e6c:	f100 0001 	add.w	r0, r0, #1
            info.idx++;
     e70:	bfa8      	it	ge
     e72:	3701      	addge	r7, #1
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
     e74:	b206      	sxth	r6, r0
                finder->next=list->next;
                list->next=finder;
            }
        }
        if (info.idx>=0)
            info.idx++;
     e76:	bfa8      	it	ge
     e78:	b23f      	sxthge	r7, r7
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
     e7a:	45b1      	cmp	r9, r6
     e7c:	dcc0      	bgt.n	e00 <core_bench_list+0x28>
     e7e:	970a      	str	r7, [sp, #40]	; 0x28
     e80:	ebc8 0784 	rsb	r7, r8, r4, lsl #2
     e84:	443a      	add	r2, r7
     e86:	469b      	mov	fp, r3
     e88:	b293      	uxth	r3, r2
     e8a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
     e8e:	9309      	str	r3, [sp, #36]	; 0x24
     e90:	46e6      	mov	lr, ip
    ee_printf("List find %d: [%d,%d,%d]\n",i,retval,missed,found);
#endif
    }
    retval+=found*4-missed;
    /* sort the list by data content and remove one item*/
    if (finder_idx>0)
     e92:	f1be 0f00 	cmp.w	lr, #0
     e96:	f340 8146 	ble.w	1126 <core_bench_list+0x34e>
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
                if (res->crcstate==0)
                    res->crcstate=retval;
                break;
            case 1:
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     e9a:	9a03      	ldr	r2, [sp, #12]
     e9c:	f8cd b014 	str.w	fp, [sp, #20]
     ea0:	4615      	mov	r5, r2
     ea2:	3528      	adds	r5, #40	; 0x28
     ea4:	2401      	movs	r4, #1
     ea6:	9507      	str	r5, [sp, #28]
     ea8:	9d05      	ldr	r5, [sp, #20]
     eaa:	9406      	str	r4, [sp, #24]
     eac:	465f      	mov	r7, fp
     eae:	4693      	mov	fp, r2
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
     eb0:	2d00      	cmp	r5, #0
     eb2:	f000 81b1 	beq.w	1218 <core_bench_list+0x440>
     eb6:	2100      	movs	r1, #0
     eb8:	9105      	str	r1, [sp, #20]
     eba:	460e      	mov	r6, r1
     ebc:	9108      	str	r1, [sp, #32]
            nmerges++;  /* there exists a merge to be done */
     ebe:	9a08      	ldr	r2, [sp, #32]
     ec0:	9806      	ldr	r0, [sp, #24]
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     ec2:	683b      	ldr	r3, [r7, #0]
     ec4:	1e44      	subs	r4, r0, #1
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
            nmerges++;  /* there exists a merge to be done */
     ec6:	3201      	adds	r2, #1
     ec8:	9208      	str	r2, [sp, #32]
     eca:	f004 0507 	and.w	r5, r4, #7
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     ece:	f04f 0e01 	mov.w	lr, #1
                q = q->next;
                if (!q) break;
     ed2:	2b00      	cmp	r3, #0
     ed4:	d053      	beq.n	f7e <core_bench_list+0x1a6>
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
     ed6:	9906      	ldr	r1, [sp, #24]
     ed8:	458e      	cmp	lr, r1
     eda:	d050      	beq.n	f7e <core_bench_list+0x1a6>
     edc:	b36d      	cbz	r5, f3a <core_bench_list+0x162>
     ede:	2d01      	cmp	r5, #1
     ee0:	d024      	beq.n	f2c <core_bench_list+0x154>
     ee2:	2d02      	cmp	r5, #2
     ee4:	d01e      	beq.n	f24 <core_bench_list+0x14c>
     ee6:	2d03      	cmp	r5, #3
     ee8:	d018      	beq.n	f1c <core_bench_list+0x144>
     eea:	2d04      	cmp	r5, #4
     eec:	d012      	beq.n	f14 <core_bench_list+0x13c>
     eee:	2d05      	cmp	r5, #5
     ef0:	d00b      	beq.n	f0a <core_bench_list+0x132>
     ef2:	2d06      	cmp	r5, #6
     ef4:	d004      	beq.n	f00 <core_bench_list+0x128>
                psize++;
                q = q->next;
     ef6:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     ef8:	f04f 0e02 	mov.w	lr, #2
                q = q->next;
                if (!q) break;
     efc:	2b00      	cmp	r3, #0
     efe:	d03e      	beq.n	f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f00:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f02:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f06:	2b00      	cmp	r3, #0
     f08:	d039      	beq.n	f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f0a:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f0c:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f10:	2b00      	cmp	r3, #0
     f12:	d034      	beq.n	f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f14:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f16:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f1a:	b383      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f1c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f1e:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f22:	b363      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f24:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f26:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f2a:	b343      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f2c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f2e:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f32:	b323      	cbz	r3, f7e <core_bench_list+0x1a6>
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
     f34:	9806      	ldr	r0, [sp, #24]
     f36:	4586      	cmp	lr, r0
     f38:	d021      	beq.n	f7e <core_bench_list+0x1a6>
                psize++;
                q = q->next;
     f3a:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f3c:	f10e 0e01 	add.w	lr, lr, #1
     f40:	46f4      	mov	ip, lr
                q = q->next;
                if (!q) break;
     f42:	b1e3      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f44:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f46:	f10e 0e01 	add.w	lr, lr, #1
                q = q->next;
                if (!q) break;
     f4a:	b1c3      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f4c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f4e:	f10c 0e02 	add.w	lr, ip, #2
                q = q->next;
                if (!q) break;
     f52:	b1a3      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f54:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f56:	f10c 0e03 	add.w	lr, ip, #3
                q = q->next;
                if (!q) break;
     f5a:	b183      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f5c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f5e:	f10c 0e04 	add.w	lr, ip, #4
                q = q->next;
                if (!q) break;
     f62:	b163      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f64:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f66:	f10c 0e05 	add.w	lr, ip, #5
                q = q->next;
                if (!q) break;
     f6a:	b143      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f6c:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f6e:	f10c 0e06 	add.w	lr, ip, #6
                q = q->next;
                if (!q) break;
     f72:	b123      	cbz	r3, f7e <core_bench_list+0x1a6>
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     f74:	681b      	ldr	r3, [r3, #0]
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
     f76:	f10c 0e07 	add.w	lr, ip, #7
                q = q->next;
                if (!q) break;
     f7a:	2b00      	cmp	r3, #0
     f7c:	d1da      	bne.n	f34 <core_bench_list+0x15c>

                /* add the next element to the merged list */
                if (tail) {
                    tail->next = e;
                } else {
                    list = e;
     f7e:	f8dd 8018 	ldr.w	r8, [sp, #24]
     f82:	4675      	mov	r5, lr
     f84:	46ba      	mov	sl, r7
     f86:	4644      	mov	r4, r8
     f88:	461f      	mov	r7, r3

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
     f8a:	2d00      	cmp	r5, #0
     f8c:	d06b      	beq.n	1066 <core_bench_list+0x28e>

                /* decide whether next element of merge comes from p or q */
                if (psize == 0) {
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
     f8e:	2c00      	cmp	r4, #0
     f90:	d075      	beq.n	107e <core_bench_list+0x2a6>
     f92:	2f00      	cmp	r7, #0
     f94:	d073      	beq.n	107e <core_bench_list+0x2a6>
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     f96:	f8da 9004 	ldr.w	r9, [sl, #4]
     f9a:	6878      	ldr	r0, [r7, #4]
    , list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    ee_s16 data=*pdata;
     f9c:	f9b9 8000 	ldrsh.w	r8, [r9]
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
     fa0:	9003      	str	r0, [sp, #12]

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    ee_s16 data=*pdata;
    ee_s16 retval;
    ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    if (optype) /* if cached, use cache */
     fa2:	f018 0f80 	tst.w	r8, #128	; 0x80
     fa6:	d16f      	bne.n	1088 <core_bench_list+0x2b0>
        return (data & 0x007f);
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
     fa8:	f3c8 02c3 	ubfx	r2, r8, #3, #4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
     fac:	f018 0307 	ands.w	r3, r8, #7
    if (optype) /* if cached, use cache */
        return (data & 0x007f);
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     fb0:	ea42 1102 	orr.w	r1, r2, r2, lsl #4
        switch (flag) {
     fb4:	d074      	beq.n	10a0 <core_bench_list+0x2c8>
     fb6:	2b01      	cmp	r3, #1
     fb8:	d170      	bne.n	109c <core_bench_list+0x2c4>
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
                if (res->crcstate==0)
                    res->crcstate=retval;
                break;
            case 1:
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     fba:	f8bb 2038 	ldrh.w	r2, [fp, #56]	; 0x38
     fbe:	9807      	ldr	r0, [sp, #28]
     fc0:	f001 fe5a 	bl	2c78 <core_bench_matrix>
                if (res->crcmatrix==0)
     fc4:	f8bb 103c 	ldrh.w	r1, [fp, #60]	; 0x3c
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
                if (res->crcstate==0)
                    res->crcstate=retval;
                break;
            case 1:
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     fc8:	b202      	sxth	r2, r0
                if (res->crcmatrix==0)
     fca:	b909      	cbnz	r1, fd0 <core_bench_list+0x1f8>
                    res->crcmatrix=retval;
     fcc:	f8ab 003c 	strh.w	r0, [fp, #60]	; 0x3c
                break;
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
     fd0:	f8bb 1038 	ldrh.w	r1, [fp, #56]	; 0x38
     fd4:	9204      	str	r2, [sp, #16]
     fd6:	b290      	uxth	r0, r2
     fd8:	f002 fc0a 	bl	37f0 <crcu16>
        retval &= 0x007f;
     fdc:	9b04      	ldr	r3, [sp, #16]
                break;
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
     fde:	f8ab 0038 	strh.w	r0, [fp, #56]	; 0x38
        retval &= 0x007f;
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     fe2:	f028 02ff 	bic.w	r2, r8, #255	; 0xff
     fe6:	f042 0180 	orr.w	r1, r2, #128	; 0x80
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
        retval &= 0x007f;
     fea:	f003 087f 	and.w	r8, r3, #127	; 0x7f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     fee:	ea48 0201 	orr.w	r2, r8, r1
     ff2:	9803      	ldr	r0, [sp, #12]
     ff4:	f8a9 2000 	strh.w	r2, [r9]
    , list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    ee_s16 data=*pdata;
     ff8:	f9b0 9000 	ldrsh.w	r9, [r0]
    ee_s16 retval;
    ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    if (optype) /* if cached, use cache */
     ffc:	f019 0f80 	tst.w	r9, #128	; 0x80
    1000:	d149      	bne.n	1096 <core_bench_list+0x2be>
        return (data & 0x007f);
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    1002:	f3c9 0ec3 	ubfx	lr, r9, #3, #4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
    1006:	f019 0307 	ands.w	r3, r9, #7
    if (optype) /* if cached, use cache */
        return (data & 0x007f);
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    100a:	ea4e 110e 	orr.w	r1, lr, lr, lsl #4
        switch (flag) {
    100e:	d065      	beq.n	10dc <core_bench_list+0x304>
    1010:	2b01      	cmp	r3, #1
    1012:	d161      	bne.n	10d8 <core_bench_list+0x300>
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
                if (res->crcstate==0)
                    res->crcstate=retval;
                break;
            case 1:
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    1014:	f8bb 2038 	ldrh.w	r2, [fp, #56]	; 0x38
    1018:	9807      	ldr	r0, [sp, #28]
    101a:	f001 fe2d 	bl	2c78 <core_bench_matrix>
                if (res->crcmatrix==0)
    101e:	f8bb 103c 	ldrh.w	r1, [fp, #60]	; 0x3c
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
                if (res->crcstate==0)
                    res->crcstate=retval;
                break;
            case 1:
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    1022:	b202      	sxth	r2, r0
                if (res->crcmatrix==0)
    1024:	b909      	cbnz	r1, 102a <core_bench_list+0x252>
                    res->crcmatrix=retval;
    1026:	f8ab 003c 	strh.w	r0, [fp, #60]	; 0x3c
                break;
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
    102a:	f8bb 1038 	ldrh.w	r1, [fp, #56]	; 0x38
    102e:	9204      	str	r2, [sp, #16]
    1030:	b290      	uxth	r0, r2
    1032:	f002 fbdd 	bl	37f0 <crcu16>
        retval &= 0x007f;
    1036:	9904      	ldr	r1, [sp, #16]
                break;
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
    1038:	f8ab 0038 	strh.w	r0, [fp, #56]	; 0x38
        retval &= 0x007f;
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    103c:	f029 02ff 	bic.w	r2, r9, #255	; 0xff
    1040:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1044:	9803      	ldr	r0, [sp, #12]
            default:
                retval=data;
                break;
        }
        res->crc=crcu16(retval,res->crc);
        retval &= 0x007f;
    1046:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    104a:	4313      	orrs	r3, r2
    104c:	8003      	strh	r3, [r0, #0]
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
    104e:	ebc2 0308 	rsb	r3, r2, r8
    1052:	2b00      	cmp	r3, #0
    1054:	dd13      	ble.n	107e <core_bench_list+0x2a6>
                    /* First element of p is lower (or same); e must come from p. */
                    e = p; p = p->next; psize--;
                } else {
                    /* First element of q is lower; e must come from q. */
                    e = q; q = q->next; qsize--;
    1056:	4639      	mov	r1, r7
    1058:	683f      	ldr	r7, [r7, #0]
    105a:	3c01      	subs	r4, #1
                }

                /* add the next element to the merged list */
                if (tail) {
    105c:	b166      	cbz	r6, 1078 <core_bench_list+0x2a0>
                    tail->next = e;
    105e:	6031      	str	r1, [r6, #0]
                } else {
                    list = e;
    1060:	460e      	mov	r6, r1

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
    1062:	2d00      	cmp	r5, #0
    1064:	d193      	bne.n	f8e <core_bench_list+0x1b6>
    1066:	2c00      	cmp	r4, #0
    1068:	d053      	beq.n	1112 <core_bench_list+0x33a>
    106a:	2f00      	cmp	r7, #0
    106c:	d054      	beq.n	1118 <core_bench_list+0x340>

                /* decide whether next element of merge comes from p or q */
                if (psize == 0) {
                    /* p is empty; e must come from q. */
                    e = q; q = q->next; qsize--;
    106e:	4639      	mov	r1, r7
    1070:	3c01      	subs	r4, #1
    1072:	683f      	ldr	r7, [r7, #0]
                    /* First element of q is lower; e must come from q. */
                    e = q; q = q->next; qsize--;
                }

                /* add the next element to the merged list */
                if (tail) {
    1074:	2e00      	cmp	r6, #0
    1076:	d1f2      	bne.n	105e <core_bench_list+0x286>
                    tail->next = e;
                } else {
                    list = e;
    1078:	9105      	str	r1, [sp, #20]
    107a:	460e      	mov	r6, r1
    107c:	e7f1      	b.n	1062 <core_bench_list+0x28a>
                } else if (qsize == 0 || !q) {
                    /* q is empty; e must come from p. */
                    e = p; p = p->next; psize--;
                } else if (cmp(p->info,q->info,res) <= 0) {
                    /* First element of p is lower (or same); e must come from p. */
                    e = p; p = p->next; psize--;
    107e:	4651      	mov	r1, sl
    1080:	3d01      	subs	r5, #1
    1082:	f8da a000 	ldr.w	sl, [sl]
    1086:	e7e9      	b.n	105c <core_bench_list+0x284>
    , list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    ee_s16 data=*pdata;
    1088:	f9b0 9000 	ldrsh.w	r9, [r0]
    ee_s16 retval;
    ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    if (optype) /* if cached, use cache */
    108c:	f019 0f80 	tst.w	r9, #128	; 0x80
        return (data & 0x007f);
    1090:	f008 087f 	and.w	r8, r8, #127	; 0x7f

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    ee_s16 data=*pdata;
    ee_s16 retval;
    ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    if (optype) /* if cached, use cache */
    1094:	d0b5      	beq.n	1002 <core_bench_list+0x22a>
        return (data & 0x007f);
    1096:	f009 027f 	and.w	r2, r9, #127	; 0x7f
    109a:	e7d8      	b.n	104e <core_bench_list+0x276>
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
    109c:	4642      	mov	r2, r8
    109e:	e797      	b.n	fd0 <core_bench_list+0x1f8>
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10a0:	f8db e014 	ldr.w	lr, [fp, #20]
    10a4:	f8bb c038 	ldrh.w	ip, [fp, #56]	; 0x38
    10a8:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    10ac:	f9bb 2000 	ldrsh.w	r2, [fp]
    10b0:	f8db 0018 	ldr.w	r0, [fp, #24]
    10b4:	f8cd c004 	str.w	ip, [sp, #4]
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
    10b8:	2922      	cmp	r1, #34	; 0x22
    10ba:	bfb8      	it	lt
    10bc:	2122      	movlt	r1, #34	; 0x22
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10be:	9100      	str	r1, [sp, #0]
    10c0:	4671      	mov	r1, lr
    10c2:	f002 faf3 	bl	36ac <core_bench_state>
                if (res->crcstate==0)
    10c6:	f8bb 303e 	ldrh.w	r3, [fp, #62]	; 0x3e
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10ca:	b202      	sxth	r2, r0
                if (res->crcstate==0)
    10cc:	2b00      	cmp	r3, #0
    10ce:	f47f af7f 	bne.w	fd0 <core_bench_list+0x1f8>
                    res->crcstate=retval;
    10d2:	f8ab 003e 	strh.w	r0, [fp, #62]	; 0x3e
    10d6:	e77b      	b.n	fd0 <core_bench_list+0x1f8>
        return (data & 0x007f);
    else { /* otherwise calculate and cache the result */
        ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
    10d8:	464a      	mov	r2, r9
    10da:	e7a6      	b.n	102a <core_bench_list+0x252>
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10dc:	f8db e014 	ldr.w	lr, [fp, #20]
    10e0:	f8bb c038 	ldrh.w	ip, [fp, #56]	; 0x38
    10e4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    10e8:	f9bb 2000 	ldrsh.w	r2, [fp]
    10ec:	f8db 0018 	ldr.w	r0, [fp, #24]
    10f0:	f8cd c004 	str.w	ip, [sp, #4]
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
    10f4:	2922      	cmp	r1, #34	; 0x22
    10f6:	bfb8      	it	lt
    10f8:	2122      	movlt	r1, #34	; 0x22
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10fa:	9100      	str	r1, [sp, #0]
    10fc:	4671      	mov	r1, lr
    10fe:	f002 fad5 	bl	36ac <core_bench_state>
                if (res->crcstate==0)
    1102:	f8bb 303e 	ldrh.w	r3, [fp, #62]	; 0x3e
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
        switch (flag) {
            case 0:
                if (dtype<0x22) /* set min period for bit corruption */
                    dtype=0x22;
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    1106:	b202      	sxth	r2, r0
                if (res->crcstate==0)
    1108:	2b00      	cmp	r3, #0
    110a:	d18e      	bne.n	102a <core_bench_list+0x252>
                    res->crcstate=retval;
    110c:	f8ab 003e 	strh.w	r0, [fp, #62]	; 0x3e
    1110:	e78b      	b.n	102a <core_bench_list+0x252>
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
    1112:	2f00      	cmp	r7, #0
    1114:	f47f aed3 	bne.w	ebe <core_bench_list+0xe6>

            /* now p has stepped `insize' places along, and q has too */
            p = q;
        }

        tail->next = NULL;
    1118:	2700      	movs	r7, #0
    111a:	6037      	str	r7, [r6, #0]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    111c:	9e08      	ldr	r6, [sp, #32]
    111e:	2e01      	cmp	r6, #1
    1120:	d170      	bne.n	1204 <core_bench_list+0x42c>
    1122:	f8dd b014 	ldr.w	fp, [sp, #20]
    }
    retval+=found*4-missed;
    /* sort the list by data content and remove one item*/
    if (finder_idx>0)
        list=core_list_mergesort(list,cmp_complex,res);
    remover=core_list_remove(list->next);
    1126:	f8db 3000 	ldr.w	r3, [fp]
    Returns:
    Removed item.
*/
list_head *core_list_remove(list_head *item) {
    list_data *tmp;
    list_head *ret=item->next;
    112a:	681d      	ldr	r5, [r3, #0]
    /* swap data pointers */
    tmp=item->info;
    112c:	685a      	ldr	r2, [r3, #4]
    item->info=ret->info;
    ret->info=tmp;
    /* and eliminate item */
    item->next=item->next->next;
    112e:	e895 0003 	ldmia.w	r5, {r0, r1}
list_head *core_list_remove(list_head *item) {
    list_data *tmp;
    list_head *ret=item->next;
    /* swap data pointers */
    tmp=item->info;
    item->info=ret->info;
    1132:	6059      	str	r1, [r3, #4]
    ret->info=tmp;
    1134:	606a      	str	r2, [r5, #4]
    /* and eliminate item */
    item->next=item->next->next;
    1136:	6018      	str	r0, [r3, #0]

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
    1138:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp=item->info;
    item->info=ret->info;
    ret->info=tmp;
    /* and eliminate item */
    item->next=item->next->next;
    ret->next=NULL;
    113a:	2100      	movs	r1, #0

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
    113c:	4288      	cmp	r0, r1
    tmp=item->info;
    item->info=ret->info;
    ret->info=tmp;
    /* and eliminate item */
    item->next=item->next->next;
    ret->next=NULL;
    113e:	6029      	str	r1, [r5, #0]

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
    1140:	db55      	blt.n	11ee <core_bench_list+0x416>
    1142:	4682      	mov	sl, r0
    1144:	465c      	mov	r4, fp
        while (list && (list->info->idx != info->idx))
    1146:	6861      	ldr	r1, [r4, #4]
    1148:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    114c:	4550      	cmp	r0, sl
    114e:	d006      	beq.n	115e <core_bench_list+0x386>
            list=list->next;
    1150:	6824      	ldr	r4, [r4, #0]
    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
        while (list && (list->info->idx != info->idx))
    1152:	2c00      	cmp	r4, #0
    1154:	d1f7      	bne.n	1146 <core_bench_list+0x36e>
        list=core_list_mergesort(list,cmp_complex,res);
    remover=core_list_remove(list->next);
    /* CRC data content of list from location of index N forward, and then undo remove */
    finder=core_list_find(list,&info);
    if (!finder)
        finder=list->next;
    1156:	f8db 6000 	ldr.w	r6, [fp]
    115a:	4634      	mov	r4, r6
    while (finder) {
    115c:	b176      	cbz	r6, 117c <core_bench_list+0x3a4>
    115e:	9909      	ldr	r1, [sp, #36]	; 0x24
        retval=crc16(list->info->data16,retval);
    1160:	f8db 7004 	ldr.w	r7, [fp, #4]
    1164:	f9b7 0000 	ldrsh.w	r0, [r7]
    1168:	f002 fd30 	bl	3bcc <crc16>
        finder=finder->next;
    116c:	6824      	ldr	r4, [r4, #0]
    /* CRC data content of list from location of index N forward, and then undo remove */
    finder=core_list_find(list,&info);
    if (!finder)
        finder=list->next;
    while (finder) {
        retval=crc16(list->info->data16,retval);
    116e:	4601      	mov	r1, r0
    remover=core_list_remove(list->next);
    /* CRC data content of list from location of index N forward, and then undo remove */
    finder=core_list_find(list,&info);
    if (!finder)
        finder=list->next;
    while (finder) {
    1170:	2c00      	cmp	r4, #0
    1172:	d1f5      	bne.n	1160 <core_bench_list+0x388>
    1174:	686a      	ldr	r2, [r5, #4]
    1176:	f8db 6000 	ldr.w	r6, [fp]
    117a:	9009      	str	r0, [sp, #36]	; 0x24
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
    list_data *tmp;
    /* swap data pointers */
    tmp=item_removed->info;
    item_removed->info=item_modified->info;
    117c:	6873      	ldr	r3, [r6, #4]
    item_modified->info=tmp;
    /* and insert item */
    item_removed->next=item_modified->next;
    117e:	6831      	ldr	r1, [r6, #0]
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
    list_data *tmp;
    /* swap data pointers */
    tmp=item_removed->info;
    item_removed->info=item_modified->info;
    1180:	606b      	str	r3, [r5, #4]
#if CORE_DEBUG
    ee_printf("List sort 1: %04x\n",retval);
#endif
    remover=core_list_undo_remove(remover,list->next);
    /* sort the list by index, in effect returning the list to original state */
    list=core_list_mergesort(list,cmp_idx,NULL);
    1182:	4658      	mov	r0, fp
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
    list_data *tmp;
    /* swap data pointers */
    tmp=item_removed->info;
    item_removed->info=item_modified->info;
    item_modified->info=tmp;
    1184:	6072      	str	r2, [r6, #4]
    /* and insert item */
    item_removed->next=item_modified->next;
    1186:	6029      	str	r1, [r5, #0]
    item_modified->next=item_removed;
    1188:	6035      	str	r5, [r6, #0]
#if CORE_DEBUG
    ee_printf("List sort 1: %04x\n",retval);
#endif
    remover=core_list_undo_remove(remover,list->next);
    /* sort the list by index, in effect returning the list to original state */
    list=core_list_mergesort(list,cmp_idx,NULL);
    118a:	f7ff fd7f 	bl	c8c <core_list_mergesort.constprop.2>
    /* CRC data content of list */
    finder=list->next;
    118e:	6805      	ldr	r5, [r0, #0]
#if CORE_DEBUG
    ee_printf("List sort 1: %04x\n",retval);
#endif
    remover=core_list_undo_remove(remover,list->next);
    /* sort the list by index, in effect returning the list to original state */
    list=core_list_mergesort(list,cmp_idx,NULL);
    1190:	4681      	mov	r9, r0
    /* CRC data content of list */
    finder=list->next;
    while (finder) {
    1192:	b15d      	cbz	r5, 11ac <core_bench_list+0x3d4>
    1194:	9909      	ldr	r1, [sp, #36]	; 0x24
        retval=crc16(list->info->data16,retval);
    1196:	f8d9 0004 	ldr.w	r0, [r9, #4]
    119a:	f9b0 0000 	ldrsh.w	r0, [r0]
    119e:	f002 fd15 	bl	3bcc <crc16>
        finder=finder->next;
    11a2:	682d      	ldr	r5, [r5, #0]
    /* sort the list by index, in effect returning the list to original state */
    list=core_list_mergesort(list,cmp_idx,NULL);
    /* CRC data content of list */
    finder=list->next;
    while (finder) {
        retval=crc16(list->info->data16,retval);
    11a4:	4601      	mov	r1, r0
    remover=core_list_undo_remove(remover,list->next);
    /* sort the list by index, in effect returning the list to original state */
    list=core_list_mergesort(list,cmp_idx,NULL);
    /* CRC data content of list */
    finder=list->next;
    while (finder) {
    11a6:	2d00      	cmp	r5, #0
    11a8:	d1f5      	bne.n	1196 <core_bench_list+0x3be>
    11aa:	9009      	str	r0, [sp, #36]	; 0x24
    }
#if CORE_DEBUG
    ee_printf("List sort 2: %04x\n",retval);
#endif
    return retval;
}
    11ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    11ae:	b00d      	add	sp, #52	; 0x34
    11b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (info->idx>=0) {
        while (list && (list->info->idx != info->idx))
            list=list->next;
        return list;
    } else {
        while (list && ((list->info->data16 & 0xff) != info->data16))
    11b4:	b173      	cbz	r3, 11d4 <core_bench_list+0x3fc>
    11b6:	6859      	ldr	r1, [r3, #4]
    11b8:	780e      	ldrb	r6, [r1, #0]
    11ba:	4576      	cmp	r6, lr
    11bc:	461d      	mov	r5, r3
    11be:	d105      	bne.n	11cc <core_bench_list+0x3f4>
    11c0:	e635      	b.n	e2e <core_bench_list+0x56>
    11c2:	6869      	ldr	r1, [r5, #4]
    11c4:	780e      	ldrb	r6, [r1, #0]
    11c6:	4576      	cmp	r6, lr
    11c8:	f43f ae31 	beq.w	e2e <core_bench_list+0x56>
            list=list->next;
    11cc:	682d      	ldr	r5, [r5, #0]
    if (info->idx>=0) {
        while (list && (list->info->idx != info->idx))
            list=list->next;
        return list;
    } else {
        while (list && ((list->info->data16 & 0xff) != info->data16))
    11ce:	2d00      	cmp	r5, #0
    11d0:	d1f7      	bne.n	11c2 <core_bench_list+0x3ea>
    11d2:	e62c      	b.n	e2e <core_bench_list+0x56>
        info.data16= (i & 0xff) ;
        this_find=core_list_find(list,&info);
        list=core_list_reverse(list);
        if (this_find==NULL) {
            missed++;
            retval+=(list->next->info->data16 >> 8) & 1;
    11d4:	6819      	ldr	r1, [r3, #0]
    11d6:	684e      	ldr	r6, [r1, #4]
    11d8:	f996 5001 	ldrsb.w	r5, [r6, #1]
    11dc:	f005 0b01 	and.w	fp, r5, #1
    for (i=0; i<find_num; i++) {
        info.data16= (i & 0xff) ;
        this_find=core_list_find(list,&info);
        list=core_list_reverse(list);
        if (this_find==NULL) {
            missed++;
    11e0:	f108 0101 	add.w	r1, r8, #1
            retval+=(list->next->info->data16 >> 8) & 1;
    11e4:	445a      	add	r2, fp
    for (i=0; i<find_num; i++) {
        info.data16= (i & 0xff) ;
        this_find=core_list_find(list,&info);
        list=core_list_reverse(list);
        if (this_find==NULL) {
            missed++;
    11e6:	fa1f f881 	uxth.w	r8, r1
            retval+=(list->next->info->data16 >> 8) & 1;
    11ea:	b292      	uxth	r2, r2
    11ec:	e63d      	b.n	e6a <core_bench_list+0x92>

    Returns:
    Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
    if (info->idx>=0) {
    11ee:	465c      	mov	r4, fp
    11f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f2:	e002      	b.n	11fa <core_bench_list+0x422>
        while (list && (list->info->idx != info->idx))
            list=list->next;
        return list;
    } else {
        while (list && ((list->info->data16 & 0xff) != info->data16))
            list=list->next;
    11f4:	6824      	ldr	r4, [r4, #0]
    if (info->idx>=0) {
        while (list && (list->info->idx != info->idx))
            list=list->next;
        return list;
    } else {
        while (list && ((list->info->data16 & 0xff) != info->data16))
    11f6:	2c00      	cmp	r4, #0
    11f8:	d0ad      	beq.n	1156 <core_bench_list+0x37e>
    11fa:	6866      	ldr	r6, [r4, #4]
    11fc:	7837      	ldrb	r7, [r6, #0]
    11fe:	429f      	cmp	r7, r3
    1200:	d1f8      	bne.n	11f4 <core_bench_list+0x41c>
    1202:	e7ac      	b.n	115e <core_bench_list+0x386>
        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
    1204:	9c06      	ldr	r4, [sp, #24]
    1206:	9f05      	ldr	r7, [sp, #20]
    1208:	0062      	lsls	r2, r4, #1
    120a:	9206      	str	r2, [sp, #24]
    120c:	463d      	mov	r5, r7
    120e:	e64f      	b.n	eb0 <core_bench_list+0xd8>
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
    1210:	2300      	movs	r3, #0
    list_head *this_find;
    list_head *finder, *remover;
    list_data info;
    ee_s16 i;

    info.idx=finder_idx;
    1212:	910a      	str	r1, [sp, #40]	; 0x28
    /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
    for (i=0; i<find_num; i++) {
    1214:	9309      	str	r3, [sp, #36]	; 0x24
    1216:	e63c      	b.n	e92 <core_bench_list+0xba>
    1218:	46a9      	mov	r9, r5

            /* now p has stepped `insize' places along, and q has too */
            p = q;
        }

        tail->next = NULL;
    121a:	f8c9 5000 	str.w	r5, [r9]
    121e:	deff      	udf	#255	; 0xff

00001220 <core_list_init>:

    Returns:
    Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
    1220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* calculated pointers for the list */
    ee_u32 per_item=16+sizeof(struct list_data_s);
    ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
    1224:	4baf      	ldr	r3, [pc, #700]	; (14e4 <core_list_init+0x2c4>)
    1226:	fba3 3000 	umull	r3, r0, r3, r0
    122a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
    122e:	f1ae 0e02 	sub.w	lr, lr, #2
    list_head *memblock_end=memblock+size;
    1232:	eb01 07ce 	add.w	r7, r1, lr, lsl #3

    Returns:
    Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
    1236:	b085      	sub	sp, #20
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1238:	f101 0a10 	add.w	sl, r1, #16
    ee_u32 i;
    list_head *finder,*list=memblock;
    list_data info;

    /* create a fake items for the list head and tail */
    list->next=NULL;
    123c:	2300      	movs	r3, #0
    list->info=datablock;
    list->info->idx=0x0000;
    list->info->data16=(ee_s16)0x8080;
    123e:	f248 0480 	movw	r4, #32896	; 0x8080
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1242:	4557      	cmp	r7, sl
    ee_u32 i;
    list_head *finder,*list=memblock;
    list_data info;

    /* create a fake items for the list head and tail */
    list->next=NULL;
    1244:	e881 0088 	stmia.w	r1, {r3, r7}

    Returns:
    Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
    1248:	9202      	str	r2, [sp, #8]
    list_data info;

    /* create a fake items for the list head and tail */
    list->next=NULL;
    list->info=datablock;
    list->info->idx=0x0000;
    124a:	807b      	strh	r3, [r7, #2]
    /* calculated pointers for the list */
    ee_u32 per_item=16+sizeof(struct list_data_s);
    ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
    list_head *memblock_end=memblock+size;
    list_data *datablock=(list_data *)(memblock_end);
    list_data *datablock_end=datablock+size;
    124c:	eb07 088e 	add.w	r8, r7, lr, lsl #2

    /* create a fake items for the list head and tail */
    list->next=NULL;
    list->info=datablock;
    list->info->idx=0x0000;
    list->info->data16=(ee_s16)0x8080;
    1250:	f821 403e 	strh.w	r4, [r1, lr, lsl #3]
    memblock++;
    datablock++;
    1254:	f107 0604 	add.w	r6, r7, #4
    /* create a fake items for the list head and tail */
    list->next=NULL;
    list->info=datablock;
    list->info->idx=0x0000;
    list->info->data16=(ee_s16)0x8080;
    memblock++;
    1258:	f101 0408 	add.w	r4, r1, #8
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    125c:	d904      	bls.n	1268 <core_list_init+0x48>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    125e:	f107 0508 	add.w	r5, r7, #8
    1262:	45a8      	cmp	r8, r5
    1264:	f200 8130 	bhi.w	14c8 <core_list_init+0x2a8>
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    1268:	f1be 0f00 	cmp.w	lr, #0
    126c:	f000 80c2 	beq.w	13f4 <core_list_init+0x1d4>
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1270:	f104 0b08 	add.w	fp, r4, #8
    1274:	f10e 35ff 	add.w	r5, lr, #4294967295
    1278:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    127c:	9001      	str	r0, [sp, #4]
    127e:	455f      	cmp	r7, fp
    1280:	f005 0203 	and.w	r2, r5, #3
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1284:	f647 79ff 	movw	r9, #32767	; 0x7fff
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1288:	f200 80d6 	bhi.w	1438 <core_list_init+0x218>
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    128c:	2501      	movs	r5, #1
    128e:	45ae      	cmp	lr, r5
    1290:	f000 80b0 	beq.w	13f4 <core_list_init+0x1d4>
    1294:	b38a      	cbz	r2, 12fa <core_list_init+0xda>
    1296:	42aa      	cmp	r2, r5
    1298:	d00d      	beq.n	12b6 <core_list_init+0x96>
    129a:	2a02      	cmp	r2, #2
    129c:	d005      	beq.n	12aa <core_list_init+0x8a>
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    129e:	f104 0c08 	add.w	ip, r4, #8
    12a2:	4567      	cmp	r7, ip
    12a4:	f200 80f8 	bhi.w	1498 <core_list_init+0x278>
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    12a8:	3501      	adds	r5, #1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    12aa:	f104 0c08 	add.w	ip, r4, #8
    12ae:	4567      	cmp	r7, ip
    12b0:	f200 80d6 	bhi.w	1460 <core_list_init+0x240>
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    12b4:	3501      	adds	r5, #1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    12b6:	f104 0c08 	add.w	ip, r4, #8
    12ba:	4567      	cmp	r7, ip
    12bc:	d91a      	bls.n	12f4 <core_list_init+0xd4>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    12be:	f106 0b04 	add.w	fp, r6, #4
    12c2:	45d8      	cmp	r8, fp
    12c4:	d916      	bls.n	12f4 <core_list_init+0xd4>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    12c6:	9801      	ldr	r0, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    12c8:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    12ca:	b2aa      	uxth	r2, r5
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    12cc:	4050      	eors	r0, r2
    12ce:	00c0      	lsls	r0, r0, #3
    12d0:	f000 0a78 	and.w	sl, r0, #120	; 0x78
    12d4:	f002 0007 	and.w	r0, r2, #7
    12d8:	9203      	str	r2, [sp, #12]
    12da:	ea4a 0200 	orr.w	r2, sl, r0
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    12de:	ea42 2a02 	orr.w	sl, r2, r2, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    12e2:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    12e4:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    12e6:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    12e8:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    12ec:	f8a6 a000 	strh.w	sl, [r6]
    to->idx=from->idx;
    12f0:	4664      	mov	r4, ip
    12f2:	465e      	mov	r6, fp
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    12f4:	3501      	adds	r5, #1
    12f6:	45ae      	cmp	lr, r5
    12f8:	d07c      	beq.n	13f4 <core_list_init+0x1d4>
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    12fa:	f104 0c08 	add.w	ip, r4, #8
    12fe:	4567      	cmp	r7, ip
    1300:	d918      	bls.n	1334 <core_list_init+0x114>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    1302:	f106 0b04 	add.w	fp, r6, #4
    1306:	45d8      	cmp	r8, fp
    1308:	d914      	bls.n	1334 <core_list_init+0x114>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    130a:	9a01      	ldr	r2, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    130c:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    130e:	b2a8      	uxth	r0, r5
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1310:	4042      	eors	r2, r0
    1312:	00d2      	lsls	r2, r2, #3
    1314:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1318:	f000 0a07 	and.w	sl, r0, #7
    131c:	ea42 000a 	orr.w	r0, r2, sl
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    1320:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    1324:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1326:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    1328:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    132a:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    132e:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    1330:	4664      	mov	r4, ip
    1332:	465e      	mov	r6, fp
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1334:	f104 0c08 	add.w	ip, r4, #8
    1338:	4567      	cmp	r7, ip
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    133a:	f105 0501 	add.w	r5, r5, #1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    133e:	d918      	bls.n	1372 <core_list_init+0x152>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    1340:	f106 0b04 	add.w	fp, r6, #4
    1344:	45d8      	cmp	r8, fp
    1346:	d914      	bls.n	1372 <core_list_init+0x152>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1348:	9a01      	ldr	r2, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    134a:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    134c:	b2a8      	uxth	r0, r5
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    134e:	4042      	eors	r2, r0
    1350:	00d2      	lsls	r2, r2, #3
    1352:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1356:	f000 0a07 	and.w	sl, r0, #7
    135a:	ea42 000a 	orr.w	r0, r2, sl
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    135e:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    1362:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1364:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    1366:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1368:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    136c:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    136e:	4664      	mov	r4, ip
    1370:	465e      	mov	r6, fp
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    1372:	f104 0c08 	add.w	ip, r4, #8
    1376:	4567      	cmp	r7, ip
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    1378:	f105 0001 	add.w	r0, r5, #1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    137c:	d918      	bls.n	13b0 <core_list_init+0x190>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    137e:	f106 0b04 	add.w	fp, r6, #4
    1382:	45d8      	cmp	r8, fp
    1384:	d914      	bls.n	13b0 <core_list_init+0x190>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1386:	9a01      	ldr	r2, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    1388:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    138a:	b280      	uxth	r0, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    138c:	4042      	eors	r2, r0
    138e:	00d2      	lsls	r2, r2, #3
    1390:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1394:	f000 0a07 	and.w	sl, r0, #7
    1398:	ea42 000a 	orr.w	r0, r2, sl
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    139c:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    13a0:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    13a2:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    13a4:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    13a6:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    13aa:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    13ac:	4664      	mov	r4, ip
    13ae:	465e      	mov	r6, fp
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    13b0:	f104 0c08 	add.w	ip, r4, #8
    13b4:	4567      	cmp	r7, ip
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    13b6:	f105 0002 	add.w	r0, r5, #2
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
    13ba:	d918      	bls.n	13ee <core_list_init+0x1ce>
        return NULL;
    if ((*datablock+1) >= datablock_end)
    13bc:	f106 0b04 	add.w	fp, r6, #4
    13c0:	45d8      	cmp	r8, fp
    13c2:	d914      	bls.n	13ee <core_list_init+0x1ce>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    13c4:	9a01      	ldr	r2, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    13c6:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    13c8:	b280      	uxth	r0, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    13ca:	4042      	eors	r2, r0
    13cc:	00d2      	lsls	r2, r2, #3
    13ce:	f002 0278 	and.w	r2, r2, #120	; 0x78
    13d2:	f000 0a07 	and.w	sl, r0, #7
    13d6:	ea42 000a 	orr.w	r0, r2, sl
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    13da:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    13de:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    13e0:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    13e2:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    13e4:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    13e8:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    13ea:	4664      	mov	r4, ip
    13ec:	465e      	mov	r6, fp
    info.idx=0x7fff;
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
    13ee:	3503      	adds	r5, #3
    13f0:	45ae      	cmp	lr, r5
    13f2:	d182      	bne.n	12fa <core_list_init+0xda>
    }
    /* and now index the list so we know initial seed order of the list */
    finder=list->next;
    i=1;
    while (finder->next!=NULL) {
        if (i<size/5) /* first 20% of the list in order */
    13f4:	4f3b      	ldr	r7, [pc, #236]	; (14e4 <core_list_init+0x2c4>)
    13f6:	9a02      	ldr	r2, [sp, #8]
    13f8:	fba7 050e 	umull	r0, r5, r7, lr
    13fc:	ea4f 0e95 	mov.w	lr, r5, lsr #2
        core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
    }
    /* and now index the list so we know initial seed order of the list */
    finder=list->next;
    i=1;
    while (finder->next!=NULL) {
    1400:	2602      	movs	r6, #2
    1402:	2501      	movs	r5, #1
    1404:	e00a      	b.n	141c <core_list_init+0x1fc>
        if (i<size/5) /* first 20% of the list in order */
    1406:	45ae      	cmp	lr, r5
            finder->info->idx=i++;
    1408:	685b      	ldr	r3, [r3, #4]
        else {
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    140a:	bf9b      	ittet	ls
    140c:	4320      	orrls	r0, r4
    140e:	f3c0 000d 	ubfxls	r0, r0, #0, #14
    /* and now index the list so we know initial seed order of the list */
    finder=list->next;
    i=1;
    while (finder->next!=NULL) {
        if (i<size/5) /* first 20% of the list in order */
            finder->info->idx=i++;
    1412:	805d      	strhhi	r5, [r3, #2]
        else {
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    1414:	8058      	strhls	r0, [r3, #2]
    1416:	3601      	adds	r6, #1
    1418:	3501      	adds	r5, #1
    141a:	463b      	mov	r3, r7
        core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
    }
    /* and now index the list so we know initial seed order of the list */
    finder=list->next;
    i=1;
    while (finder->next!=NULL) {
    141c:	681f      	ldr	r7, [r3, #0]
        if (i<size/5) /* first 20% of the list in order */
            finder->info->idx=i++;
        else {
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    141e:	0230      	lsls	r0, r6, #8
    1420:	ea85 0402 	eor.w	r4, r5, r2
    1424:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
        core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
    }
    /* and now index the list so we know initial seed order of the list */
    finder=list->next;
    i=1;
    while (finder->next!=NULL) {
    1428:	2f00      	cmp	r7, #0
    142a:	d1ec      	bne.n	1406 <core_list_init+0x1e6>
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
        }
        finder=finder->next;
    }
    list = core_list_mergesort(list,cmp_idx,NULL);
    142c:	4608      	mov	r0, r1
        finder=finder->next;
    }
    ee_printf("\n");
#endif
    return list;
}
    142e:	b005      	add	sp, #20
    1430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
        }
        finder=finder->next;
    }
    list = core_list_mergesort(list,cmp_idx,NULL);
    1434:	f7ff bc2a 	b.w	c8c <core_list_mergesort.constprop.2>
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
        return NULL;
    if ((*datablock+1) >= datablock_end)
    1438:	f106 0a04 	add.w	sl, r6, #4
    143c:	45d0      	cmp	r8, sl
    143e:	f67f af25 	bls.w	128c <core_list_init+0x6c>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1442:	00c5      	lsls	r5, r0, #3
    1444:	f005 0078 	and.w	r0, r5, #120	; 0x78
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    1448:	ea40 2500 	orr.w	r5, r0, r0, lsl #8
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    144c:	6023      	str	r3, [r4, #0]
    insert_point->next=newitem;
    144e:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1450:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    1452:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1454:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    1458:	8035      	strh	r5, [r6, #0]
    to->idx=from->idx;
    145a:	465c      	mov	r4, fp
    145c:	4656      	mov	r6, sl
    145e:	e715      	b.n	128c <core_list_init+0x6c>
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
        return NULL;
    if ((*datablock+1) >= datablock_end)
    1460:	f106 0b04 	add.w	fp, r6, #4
    1464:	45d8      	cmp	r8, fp
    1466:	f67f af25 	bls.w	12b4 <core_list_init+0x94>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    146a:	9801      	ldr	r0, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    146c:	6023      	str	r3, [r4, #0]
    info.data16=(ee_s16)0xffff;
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    146e:	b2aa      	uxth	r2, r5
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1470:	4050      	eors	r0, r2
    1472:	00c0      	lsls	r0, r0, #3
    1474:	9203      	str	r2, [sp, #12]
    1476:	f000 0a78 	and.w	sl, r0, #120	; 0x78
    147a:	f002 0207 	and.w	r2, r2, #7
    147e:	ea4a 0002 	orr.w	r0, sl, r2
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    1482:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    1486:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    1488:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    148a:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    148c:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    1490:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    1492:	4664      	mov	r4, ip
    1494:	465e      	mov	r6, fp
    1496:	e70d      	b.n	12b4 <core_list_init+0x94>
    , list_head *memblock_end, list_data *datablock_end) {
    list_head *newitem;

    if ((*memblock+1) >= memblock_end)
        return NULL;
    if ((*datablock+1) >= datablock_end)
    1498:	f106 0b04 	add.w	fp, r6, #4
    149c:	45d8      	cmp	r8, fp
    149e:	f67f af03 	bls.w	12a8 <core_list_init+0x88>
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    14a2:	9a01      	ldr	r2, [sp, #4]
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    14a4:	6023      	str	r3, [r4, #0]
    core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);

    /* then insert size items */
    for (i=0; i<size; i++) {
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    14a6:	ea85 0002 	eor.w	r0, r5, r2
    14aa:	00c2      	lsls	r2, r0, #3
    14ac:	f002 0078 	and.w	r0, r2, #120	; 0x78
    14b0:	4328      	orrs	r0, r5
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    14b2:	ea40 2200 	orr.w	r2, r0, r0, lsl #8
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;
    14b6:	600c      	str	r4, [r1, #0]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    14b8:	4623      	mov	r3, r4
    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    insert_point->next=newitem;

    newitem->info=*datablock;
    14ba:	6066      	str	r6, [r4, #4]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    14bc:	f8a6 9002 	strh.w	r9, [r6, #2]
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    14c0:	8032      	strh	r2, [r6, #0]
    to->idx=from->idx;
    14c2:	4664      	mov	r4, ip
    14c4:	465e      	mov	r6, fp
    14c6:	e6ef      	b.n	12a8 <core_list_init+0x88>
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    14c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    to->idx=from->idx;
    14cc:	f647 70ff 	movw	r0, #32767	; 0x7fff
    if ((*datablock+1) >= datablock_end)
        return NULL;

    newitem=*memblock;
    (*memblock)++;
    newitem->next=insert_point->next;
    14d0:	608b      	str	r3, [r1, #8]
    insert_point->next=newitem;
    14d2:	600c      	str	r4, [r1, #0]

    newitem->info=*datablock;
    14d4:	60ce      	str	r6, [r1, #12]
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    to->idx=from->idx;
    14d6:	4623      	mov	r3, r4
    14d8:	462e      	mov	r6, r5
    14da:	4654      	mov	r4, sl
    }
    return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
    to->data16=from->data16;
    14dc:	80ba      	strh	r2, [r7, #4]
    to->idx=from->idx;
    14de:	80f8      	strh	r0, [r7, #6]
    14e0:	e6c2      	b.n	1268 <core_list_init+0x48>
    14e2:	bf00      	nop
    14e4:	cccccccd 	.word	0xcccccccd

000014e8 <iterate>:
    NULL.
*/
static ee_u16 list_known_crc[]   =      {(ee_u16)0xd4b0,(ee_u16)0x3340,(ee_u16)0x6a79,(ee_u16)0xe714,(ee_u16)0xe3c1};
static ee_u16 matrix_known_crc[] =      {(ee_u16)0xbe52,(ee_u16)0x1199,(ee_u16)0x5608,(ee_u16)0x1fd7,(ee_u16)0x0747};
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee_u32 i;
    ee_u16 crc;
    core_results *res=(core_results *)pres;
    ee_u32 iterations=res->iterations;
    14ea:	69c7      	ldr	r7, [r0, #28]
    res->crc=0;
    14ec:	2300      	movs	r3, #0
    14ee:	8703      	strh	r3, [r0, #56]	; 0x38
    res->crclist=0;
    14f0:	8743      	strh	r3, [r0, #58]	; 0x3a
    res->crcmatrix=0;
    14f2:	8783      	strh	r3, [r0, #60]	; 0x3c
    res->crcstate=0;
    14f4:	87c3      	strh	r3, [r0, #62]	; 0x3e

    for (i=0; i<iterations; i++) {
    14f6:	2f00      	cmp	r7, #0
    14f8:	d056      	beq.n	15a8 <iterate+0xc0>
    14fa:	4604      	mov	r4, r0
    14fc:	1e7a      	subs	r2, r7, #1
        crc=core_bench_list(res,1);
    14fe:	2101      	movs	r1, #1
    1500:	ea02 0601 	and.w	r6, r2, r1
    1504:	f7ff fc68 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1508:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    150a:	f002 f971 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    150e:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    1512:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1514:	4620      	mov	r0, r4
    1516:	f7ff fc5f 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    151a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    151c:	f002 f968 	bl	37f0 <crcu16>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1520:	2501      	movs	r5, #1
    1522:	42af      	cmp	r7, r5
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1524:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    1526:	8760      	strh	r0, [r4, #58]	; 0x3a
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1528:	d03e      	beq.n	15a8 <iterate+0xc0>
    152a:	b19e      	cbz	r6, 1554 <iterate+0x6c>
        crc=core_bench_list(res,1);
    152c:	4629      	mov	r1, r5
    152e:	4620      	mov	r0, r4
    1530:	f7ff fc52 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1534:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1536:	f002 f95b 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    153a:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    153e:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1540:	4620      	mov	r0, r4
    1542:	f7ff fc49 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1546:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1548:	f002 f952 	bl	37f0 <crcu16>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    154c:	3501      	adds	r5, #1
    154e:	42af      	cmp	r7, r5
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1550:	8720      	strh	r0, [r4, #56]	; 0x38
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1552:	d029      	beq.n	15a8 <iterate+0xc0>
        crc=core_bench_list(res,1);
    1554:	2101      	movs	r1, #1
    1556:	4620      	mov	r0, r4
    1558:	f7ff fc3e 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    155c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    155e:	f002 f947 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    1562:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    1566:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1568:	4620      	mov	r0, r4
    156a:	f7ff fc35 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    156e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1570:	f002 f93e 	bl	37f0 <crcu16>
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
    1574:	2101      	movs	r1, #1
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1576:	4684      	mov	ip, r0
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1578:	186e      	adds	r6, r5, r1
        crc=core_bench_list(res,1);
    157a:	4620      	mov	r0, r4
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    157c:	f8a4 c038 	strh.w	ip, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    1580:	b1a5      	cbz	r5, 15ac <iterate+0xc4>
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
    1582:	f7ff fc29 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1586:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1588:	f002 f932 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    158c:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    1590:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1592:	4620      	mov	r0, r4
    1594:	f7ff fc20 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1598:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    159a:	f002 f929 	bl	37f0 <crcu16>
    159e:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    15a0:	b13e      	cbz	r6, 15b2 <iterate+0xca>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    15a2:	1c75      	adds	r5, r6, #1
    15a4:	42af      	cmp	r7, r5
    15a6:	d1d5      	bne.n	1554 <iterate+0x6c>
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
        if (i==0) res->crclist=res->crc;
    }
    return NULL;
}
    15a8:	2000      	movs	r0, #0
    15aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
        if (i==0) res->crclist=res->crc;
    15ac:	f8a4 c03a 	strh.w	ip, [r4, #58]	; 0x3a
    15b0:	e7e7      	b.n	1582 <iterate+0x9a>
    15b2:	8760      	strh	r0, [r4, #58]	; 0x3a
    15b4:	e7f5      	b.n	15a2 <iterate+0xba>
    15b6:	bf00      	nop

000015b8 <main>:
    4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE main(void) {
    15b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15bc:	f6ad 0d44 	subw	sp, sp, #2116	; 0x844
    int argc=0;
    15c0:	2300      	movs	r3, #0
    core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
    15c2:	a909      	add	r1, sp, #36	; 0x24
    15c4:	aa0a      	add	r2, sp, #40	; 0x28
    15c6:	f10d 006e 	add.w	r0, sp, #110	; 0x6e

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE main(void) {
    int argc=0;
    15ca:	9309      	str	r3, [sp, #36]	; 0x24
    core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
    15cc:	f001 fd68 	bl	30a0 <portable_init>
    /* First some checks to make sure benchmark will run ok */
    if (sizeof(struct list_head_s)>128) {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1=get_seed(1);
    15d0:	2001      	movs	r0, #1
    15d2:	f002 f8e9 	bl	37a8 <get_seed_32>
    15d6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    results[0].seed2=get_seed(2);
    15da:	2002      	movs	r0, #2
    15dc:	f002 f8e4 	bl	37a8 <get_seed_32>
    15e0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    results[0].seed3=get_seed(3);
    15e4:	2003      	movs	r0, #3
    15e6:	f002 f8df 	bl	37a8 <get_seed_32>
    15ea:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    results[0].iterations=get_seed_32(4);
    15ee:	2004      	movs	r0, #4
    15f0:	f002 f8da 	bl	37a8 <get_seed_32>
    15f4:	9012      	str	r0, [sp, #72]	; 0x48
#if CORE_DEBUG
    results[0].iterations=1;
#endif
    results[0].execs=get_seed_32(5);
    15f6:	2005      	movs	r0, #5
    15f8:	f002 f8d6 	bl	37a8 <get_seed_32>
    if (results[0].execs==0) { /* if not supplied, execute all algorithms */
    15fc:	2800      	cmp	r0, #0
    15fe:	f000 8146 	beq.w	188e <main+0x2d6>
    results[0].seed3=get_seed(3);
    results[0].iterations=get_seed_32(4);
#if CORE_DEBUG
    results[0].iterations=1;
#endif
    results[0].execs=get_seed_32(5);
    1602:	9013      	str	r0, [sp, #76]	; 0x4c
    if (results[0].execs==0) { /* if not supplied, execute all algorithms */
        results[0].execs=ALL_ALGORITHMS_MASK;
    }
        /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
    1604:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1606:	2900      	cmp	r1, #0
    1608:	f040 81c1 	bne.w	198e <main+0x3d6>
    160c:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
    1610:	2c00      	cmp	r4, #0
    1612:	f000 81c6 	beq.w	19a2 <main+0x3ea>
        results[i].size=TOTAL_DATA_SIZE;
        results[i].seed1=results[0].seed1;
        results[i].seed2=results[0].seed2;
        results[i].seed3=results[0].seed3;
        results[i].err=0;
        results[i].execs=results[0].execs;
    1616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    }
#elif (MEM_METHOD==MEM_STACK)
    for (i=0 ; i<MULTITHREAD; i++) {
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
        results[i].size=TOTAL_DATA_SIZE;
        results[i].seed1=results[0].seed1;
    1618:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
#error "Please define a way to initialize a memory block."
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        if ((1<<(ee_u32)i) & results[0].execs)
    161c:	f003 0401 	and.w	r4, r3, #1
            num_algorithms++;
    }
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    1620:	f3c3 0740 	ubfx	r7, r3, #1, #1
    1624:	4427      	add	r7, r4
    1626:	f3c3 0880 	ubfx	r8, r3, #2, #1
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
        results[i].size=TOTAL_DATA_SIZE;
        results[i].seed1=results[0].seed1;
        results[i].seed2=results[0].seed2;
        results[i].seed3=results[0].seed3;
        results[i].err=0;
    162a:	2600      	movs	r6, #0
        results[i].err=0;
        results[i].execs=results[0].execs;
    }
#elif (MEM_METHOD==MEM_STACK)
    for (i=0 ; i<MULTITHREAD; i++) {
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
    162c:	a91c      	add	r1, sp, #112	; 0x70
    for (i=0; i<NUM_ALGORITHMS; i++) {
        if ((1<<(ee_u32)i) & results[0].execs)
            num_algorithms++;
    }
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    162e:	4447      	add	r7, r8
    1630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1634:	f003 0502 	and.w	r5, r3, #2
    1638:	fbb0 f0f7 	udiv	r0, r0, r7
        results[i].err=0;
        results[i].execs=results[0].execs;
    }
#elif (MEM_METHOD==MEM_STACK)
    for (i=0 ; i<MULTITHREAD; i++) {
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
    163c:	910d      	str	r1, [sp, #52]	; 0x34
    for (i=0; i<NUM_ALGORITHMS; i++) {
        if ((1<<(ee_u32)i) & results[0].execs)
            num_algorithms++;
    }
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    163e:	f003 0704 	and.w	r7, r3, #4
    1642:	9011      	str	r0, [sp, #68]	; 0x44
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
        results[i].size=TOTAL_DATA_SIZE;
        results[i].seed1=results[0].seed1;
        results[i].seed2=results[0].seed2;
        results[i].seed3=results[0].seed3;
        results[i].err=0;
    1644:	f8ad 606c 	strh.w	r6, [sp, #108]	; 0x6c
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
    1648:	2c00      	cmp	r4, #0
    164a:	f000 811e 	beq.w	188a <main+0x2d2>
            for (ctx=0 ; ctx<MULTITHREAD; ctx++)
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    164e:	910e      	str	r1, [sp, #56]	; 0x38
            j++;
    1650:	2101      	movs	r1, #1
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
    1652:	b135      	cbz	r5, 1662 <main+0xaa>
            for (ctx=0 ; ctx<MULTITHREAD; ctx++)
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    1654:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    1658:	fb00 9601 	mla	r6, r0, r1, r9
            j++;
    165c:	3101      	adds	r1, #1
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
            for (ctx=0 ; ctx<MULTITHREAD; ctx++)
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    165e:	960f      	str	r6, [sp, #60]	; 0x3c
            j++;
    1660:	b289      	uxth	r1, r1
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
    1662:	b11f      	cbz	r7, 166c <main+0xb4>
            for (ctx=0 ; ctx<MULTITHREAD; ctx++)
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    1664:	af1c      	add	r7, sp, #112	; 0x70
    1666:	fb00 7601 	mla	r6, r0, r1, r7
    166a:	9610      	str	r6, [sp, #64]	; 0x40
            j++;
        }
    }
    /* call inits */
    for (i=0 ; i<MULTITHREAD; i++) {
        if (results[i].execs & ID_LIST) {
    166c:	2c00      	cmp	r4, #0
    166e:	f040 80ec 	bne.w	184a <main+0x292>
            results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
        }
        if (results[i].execs & ID_MATRIX) {
    1672:	2d00      	cmp	r5, #0
    1674:	f040 80f3 	bne.w	185e <main+0x2a6>
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
        }
        if (results[i].execs & ID_STATE) {
    1678:	075a      	lsls	r2, r3, #29
    167a:	f100 80ff 	bmi.w	187c <main+0x2c4>
            core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations==0) {
    167e:	9f12      	ldr	r7, [sp, #72]	; 0x48
    1680:	2f00      	cmp	r7, #0
    1682:	f040 809b 	bne.w	17bc <main+0x204>
        secs_ret secs_passed=0;
        ee_u32 divisor;
        results[0].iterations=1;
    1686:	2201      	movs	r2, #1
    1688:	9212      	str	r2, [sp, #72]	; 0x48
        while (secs_passed < (secs_ret)1) {
            results[0].iterations*=10;
    168a:	9c12      	ldr	r4, [sp, #72]	; 0x48
    168c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1690:	0041      	lsls	r1, r0, #1
    1692:	9112      	str	r1, [sp, #72]	; 0x48
            start_time();
    1694:	f001 fc64 	bl	2f60 <start_time>
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
    ee_u32 i;
    ee_u16 crc;
    core_results *res=(core_results *)pres;
    ee_u32 iterations=res->iterations;
    1698:	9e12      	ldr	r6, [sp, #72]	; 0x48
    res->crc=0;
    169a:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    res->crclist=0;
    169e:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
    res->crcmatrix=0;
    16a2:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
    res->crcstate=0;
    16a6:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a

    for (i=0; i<iterations; i++) {
    16aa:	2e00      	cmp	r6, #0
    16ac:	d069      	beq.n	1782 <main+0x1ca>
        crc=core_bench_list(res,1);
    16ae:	2101      	movs	r1, #1
    16b0:	1e75      	subs	r5, r6, #1
    16b2:	a80b      	add	r0, sp, #44	; 0x2c
    16b4:	400d      	ands	r5, r1
    16b6:	f7ff fb8f 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16ba:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16be:	f002 f897 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    16c2:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    16c6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    16ca:	a80b      	add	r0, sp, #44	; 0x2c
    16cc:	f7ff fb84 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16d0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16d4:	f002 f88c 	bl	37f0 <crcu16>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    16d8:	2401      	movs	r4, #1
    16da:	42a6      	cmp	r6, r4
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    16dc:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    16e0:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    16e4:	d04d      	beq.n	1782 <main+0x1ca>
    16e6:	b1bd      	cbz	r5, 1718 <main+0x160>
        crc=core_bench_list(res,1);
    16e8:	4621      	mov	r1, r4
    16ea:	a80b      	add	r0, sp, #44	; 0x2c
    16ec:	f7ff fb74 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16f0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16f4:	f002 f87c 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    16f8:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    16fc:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1700:	a80b      	add	r0, sp, #44	; 0x2c
    1702:	f7ff fb69 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1706:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    170a:	f002 f871 	bl	37f0 <crcu16>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    170e:	3401      	adds	r4, #1
    1710:	42a6      	cmp	r6, r4
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1712:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1716:	d034      	beq.n	1782 <main+0x1ca>
        crc=core_bench_list(res,1);
    1718:	2101      	movs	r1, #1
    171a:	a80b      	add	r0, sp, #44	; 0x2c
    171c:	f7ff fb5c 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1720:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    1724:	f002 f864 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    1728:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    172c:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1730:	a80b      	add	r0, sp, #44	; 0x2c
    1732:	f7ff fb51 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1736:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    173a:	f002 f859 	bl	37f0 <crcu16>
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
    173e:	2101      	movs	r1, #1
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1740:	4684      	mov	ip, r0
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    1742:	1865      	adds	r5, r4, r1
        crc=core_bench_list(res,1);
    1744:	a80b      	add	r0, sp, #44	; 0x2c
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
    1746:	f8ad c064 	strh.w	ip, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    174a:	2c00      	cmp	r4, #0
    174c:	f000 829f 	beq.w	1c8e <main+0x6d6>
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
    1750:	f7ff fb42 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1754:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    1758:	f002 f84a 	bl	37f0 <crcu16>
        crc=core_bench_list(res,-1);
    175c:	f04f 31ff 	mov.w	r1, #4294967295
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
    1760:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1764:	a80b      	add	r0, sp, #44	; 0x2c
    1766:	f7ff fb37 	bl	dd8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    176a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    176e:	f002 f83f 	bl	37f0 <crcu16>
    1772:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    1776:	2d00      	cmp	r5, #0
    1778:	f000 828c 	beq.w	1c94 <main+0x6dc>
    res->crc=0;
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    177c:	1c6c      	adds	r4, r5, #1
    177e:	42a6      	cmp	r6, r4
    1780:	d1ca      	bne.n	1718 <main+0x160>
        results[0].iterations=1;
        while (secs_passed < (secs_ret)1) {
            results[0].iterations*=10;
            start_time();
            iterate(&results[0]);
            stop_time();
    1782:	f001 fc07 	bl	2f94 <stop_time>
            secs_passed=time_in_secs(get_time());
    1786:	f001 fc19 	bl	2fbc <get_time>
    178a:	f001 fc21 	bl	2fd0 <time_in_secs>
    /* automatically determine number of iterations if not set */
    if (results[0].iterations==0) {
        secs_ret secs_passed=0;
        ee_u32 divisor;
        results[0].iterations=1;
        while (secs_passed < (secs_ret)1) {
    178e:	2200      	movs	r2, #0
    1790:	4b88      	ldr	r3, [pc, #544]	; (19b4 <main+0x3fc>)
            results[0].iterations*=10;
            start_time();
            iterate(&results[0]);
            stop_time();
            secs_passed=time_in_secs(get_time());
    1792:	4680      	mov	r8, r0
    1794:	4689      	mov	r9, r1
    /* automatically determine number of iterations if not set */
    if (results[0].iterations==0) {
        secs_ret secs_passed=0;
        ee_u32 divisor;
        results[0].iterations=1;
        while (secs_passed < (secs_ret)1) {
    1796:	f7ff f8bd 	bl	914 <__aeabi_dcmplt>
    179a:	2800      	cmp	r0, #0
    179c:	f47f af75 	bne.w	168a <main+0xd2>
            iterate(&results[0]);
            stop_time();
            secs_passed=time_in_secs(get_time());
        }
        /* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
        divisor=(ee_u32)secs_passed;
    17a0:	4640      	mov	r0, r8
    17a2:	4649      	mov	r1, r9
    17a4:	f7ff f8de 	bl	964 <__aeabi_d2uiz>
        if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
            divisor=1;
        results[0].iterations*=1+10/divisor;
    17a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
            secs_passed=time_in_secs(get_time());
        }
        /* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
        divisor=(ee_u32)secs_passed;
        if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
            divisor=1;
    17aa:	2800      	cmp	r0, #0
    17ac:	bf08      	it	eq
    17ae:	2001      	moveq	r0, #1
        results[0].iterations*=1+10/divisor;
    17b0:	270a      	movs	r7, #10
    17b2:	fbb7 faf0 	udiv	sl, r7, r0
    17b6:	fb0a 3203 	mla	r2, sl, r3, r3
    17ba:	9212      	str	r2, [sp, #72]	; 0x48
    }
    /* perform actual benchmark */
    start_time();
    17bc:	f001 fbd0 	bl	2f60 <start_time>
    }
    for (i=0 ; i<default_num_contexts; i++) {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
    17c0:	a80b      	add	r0, sp, #44	; 0x2c
    17c2:	f7ff fe91 	bl	14e8 <iterate>
#endif
    stop_time();
    17c6:	f001 fbe5 	bl	2f94 <stop_time>
    total_time=get_time();
    17ca:	f001 fbf7 	bl	2fbc <get_time>
    /* get a function of the input to report */
    seedcrc=crc16(results[0].seed1,seedcrc);
    17ce:	2100      	movs	r1, #0
    }
#else
    iterate(&results[0]);
#endif
    stop_time();
    total_time=get_time();
    17d0:	4681      	mov	r9, r0
    /* get a function of the input to report */
    seedcrc=crc16(results[0].seed1,seedcrc);
    17d2:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    17d6:	f002 f9f9 	bl	3bcc <crc16>
    seedcrc=crc16(results[0].seed2,seedcrc);
    17da:	4601      	mov	r1, r0
    17dc:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    17e0:	f002 f9f4 	bl	3bcc <crc16>
    seedcrc=crc16(results[0].seed3,seedcrc);
    17e4:	4601      	mov	r1, r0
    17e6:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    17ea:	f002 f9ef 	bl	3bcc <crc16>
    seedcrc=crc16(results[0].size,seedcrc);
    17ee:	4601      	mov	r1, r0
    17f0:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
    17f4:	f002 f9ea 	bl	3bcc <crc16>

    switch (seedcrc) { /* test known output for common seeds */
    17f8:	f647 3105 	movw	r1, #31493	; 0x7b05
    17fc:	4288      	cmp	r0, r1
    total_time=get_time();
    /* get a function of the input to report */
    seedcrc=crc16(results[0].seed1,seedcrc);
    seedcrc=crc16(results[0].seed2,seedcrc);
    seedcrc=crc16(results[0].seed3,seedcrc);
    seedcrc=crc16(results[0].size,seedcrc);
    17fe:	9005      	str	r0, [sp, #20]

    switch (seedcrc) { /* test known output for common seeds */
    1800:	f000 822b 	beq.w	1c5a <main+0x6a2>
    1804:	d846      	bhi.n	1894 <main+0x2dc>
    1806:	f641 06f2 	movw	r6, #6386	; 0x18f2
    180a:	42b0      	cmp	r0, r6
    180c:	f000 8210 	beq.w	1c30 <main+0x678>
    1810:	f644 65af 	movw	r5, #20143	; 0x4eaf
    1814:	42a8      	cmp	r0, r5
    1816:	f040 80db 	bne.w	19d0 <main+0x418>
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
    181a:	f24e 5ea4 	movw	lr, #58788	; 0xe5a4
    181e:	f245 6c08 	movw	ip, #22024	; 0x5608
    1822:	f646 2879 	movw	r8, #27257	; 0x6a79
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
    1826:	4864      	ldr	r0, [pc, #400]	; (19b8 <main+0x400>)
            break;
    1828:	f8cd e010 	str.w	lr, [sp, #16]
    182c:	4674      	mov	r4, lr
    182e:	4667      	mov	r7, ip
    1830:	f8cd c00c 	str.w	ip, [sp, #12]
    1834:	4646      	mov	r6, r8
    1836:	f8cd 8008 	str.w	r8, [sp, #8]
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
    183a:	f001 fd47 	bl	32cc <am_sprintf>
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
    183e:	2002      	movs	r0, #2
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
    1840:	46a3      	mov	fp, r4
    1842:	46ba      	mov	sl, r7
    1844:	4632      	mov	r2, r6
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
    1846:	9007      	str	r0, [sp, #28]
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
    1848:	e043      	b.n	18d2 <main+0x31a>
        }
    }
    /* call inits */
    for (i=0 ; i<MULTITHREAD; i++) {
        if (results[i].execs & ID_LIST) {
            results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    184a:	990e      	ldr	r1, [sp, #56]	; 0x38
    184c:	f7ff fce8 	bl	1220 <core_list_init>
    1850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1852:	9014      	str	r0, [sp, #80]	; 0x50
    1854:	f003 0502 	and.w	r5, r3, #2
        }
        if (results[i].execs & ID_MATRIX) {
    1858:	2d00      	cmp	r5, #0
    185a:	f43f af0d 	beq.w	1678 <main+0xc0>
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    185e:	f9bd a02e 	ldrsh.w	sl, [sp, #46]	; 0x2e
    1862:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
    1866:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1868:	9811      	ldr	r0, [sp, #68]	; 0x44
    186a:	ea4b 420a 	orr.w	r2, fp, sl, lsl #16
    186e:	ab15      	add	r3, sp, #84	; 0x54
    1870:	f001 fa10 	bl	2c94 <core_init_matrix>
    1874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        }
        if (results[i].execs & ID_STATE) {
    1876:	075a      	lsls	r2, r3, #29
    1878:	f57f af01 	bpl.w	167e <main+0xc6>
            core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
    187c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    187e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    1882:	9811      	ldr	r0, [sp, #68]	; 0x44
    1884:	f001 fd64 	bl	3350 <core_init_state>
    1888:	e6f9      	b.n	167e <main+0xc6>
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
    188a:	4621      	mov	r1, r4
    188c:	e6e1      	b.n	1652 <main+0x9a>
#if CORE_DEBUG
    results[0].iterations=1;
#endif
    results[0].execs=get_seed_32(5);
    if (results[0].execs==0) { /* if not supplied, execute all algorithms */
        results[0].execs=ALL_ALGORITHMS_MASK;
    188e:	2007      	movs	r0, #7
    1890:	9013      	str	r0, [sp, #76]	; 0x4c
    1892:	e6b7      	b.n	1604 <main+0x4c>
    seedcrc=crc16(results[0].seed1,seedcrc);
    seedcrc=crc16(results[0].seed2,seedcrc);
    seedcrc=crc16(results[0].seed3,seedcrc);
    seedcrc=crc16(results[0].size,seedcrc);

    switch (seedcrc) { /* test known output for common seeds */
    1894:	9b05      	ldr	r3, [sp, #20]
    1896:	f648 2e02 	movw	lr, #35330	; 0x8a02
    189a:	4573      	cmp	r3, lr
    189c:	f000 81b2 	beq.w	1c04 <main+0x64c>
    18a0:	f64e 10f5 	movw	r0, #59893	; 0xe9f5
    18a4:	4283      	cmp	r3, r0
    18a6:	f040 8093 	bne.w	19d0 <main+0x418>
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
    18aa:	f641 71d7 	movw	r1, #8151	; 0x1fd7
    18ae:	f24e 7b14 	movw	fp, #59156	; 0xe714
    18b2:	f648 653a 	movw	r5, #36410	; 0x8e3a
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
    18b6:	4841      	ldr	r0, [pc, #260]	; (19bc <main+0x404>)
            break;
    18b8:	f8cd b008 	str.w	fp, [sp, #8]
    18bc:	460c      	mov	r4, r1
    18be:	465e      	mov	r6, fp
    18c0:	9504      	str	r5, [sp, #16]
    18c2:	9103      	str	r1, [sp, #12]
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
    18c4:	f001 fd02 	bl	32cc <am_sprintf>
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
    18c8:	2303      	movs	r3, #3
            ee_printf("2K performance run parameters for coremark.\n");
            break;
    18ca:	46ab      	mov	fp, r5
    18cc:	46a2      	mov	sl, r4
    18ce:	4632      	mov	r2, r6
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
    18d0:	9307      	str	r3, [sp, #28]
        default:
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
    18d2:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19cc <main+0x414>
    18d6:	f8d8 6000 	ldr.w	r6, [r8]
    18da:	2e00      	cmp	r6, #0
    18dc:	d07e      	beq.n	19dc <main+0x424>
    18de:	2600      	movs	r6, #0
    18e0:	f8cd 9018 	str.w	r9, [sp, #24]
    18e4:	4634      	mov	r4, r6
    18e6:	4691      	mov	r9, r2
    18e8:	e017      	b.n	191a <main+0x362>
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
                (results[i].crcstate!=state_known_crc[known_id])) {
    18ea:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
            if ((results[i].execs & ID_MATRIX) &&
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
    18ec:	455a      	cmp	r2, fp
    18ee:	d04b      	beq.n	1988 <main+0x3d0>
                (results[i].crcstate!=state_known_crc[known_id])) {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
    18f0:	9b04      	ldr	r3, [sp, #16]
    18f2:	4833      	ldr	r0, [pc, #204]	; (19c0 <main+0x408>)
    18f4:	4621      	mov	r1, r4
    18f6:	f001 fce9 	bl	32cc <am_sprintf>
                results[i].err++;
    18fa:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    18fe:	3301      	adds	r3, #1
    1900:	fa0f fc83 	sxth.w	ip, r3
    1904:	f8a5 c040 	strh.w	ip, [r5, #64]	; 0x40
        default:
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
    1908:	3401      	adds	r4, #1
    190a:	f8d8 2000 	ldr.w	r2, [r8]
    190e:	b2a4      	uxth	r4, r4
            if ((results[i].execs & ID_STATE) &&
                (results[i].crcstate!=state_known_crc[known_id])) {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
                results[i].err++;
            }
            total_errors+=results[i].err;
    1910:	4466      	add	r6, ip
        default:
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
    1912:	4294      	cmp	r4, r2
            if ((results[i].execs & ID_STATE) &&
                (results[i].crcstate!=state_known_crc[known_id])) {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
                results[i].err++;
            }
            total_errors+=results[i].err;
    1914:	b236      	sxth	r6, r6
        default:
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
    1916:	f080 8143 	bcs.w	1ba0 <main+0x5e8>
            results[i].err=0;
    191a:	0125      	lsls	r5, r4, #4
    191c:	192a      	adds	r2, r5, r4
    191e:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1922:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
    1926:	2000      	movs	r0, #0
            if ((results[i].execs & ID_LIST) &&
    1928:	6a39      	ldr	r1, [r7, #32]
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
            results[i].err=0;
    192a:	f8a7 0040 	strh.w	r0, [r7, #64]	; 0x40
            if ((results[i].execs & ID_LIST) &&
    192e:	07cb      	lsls	r3, r1, #31
    1930:	d50c      	bpl.n	194c <main+0x394>
                (results[i].crclist!=list_known_crc[known_id])) {
    1932:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
            results[i].err=0;
            if ((results[i].execs & ID_LIST) &&
    1934:	454a      	cmp	r2, r9
    1936:	d009      	beq.n	194c <main+0x394>
                (results[i].crclist!=list_known_crc[known_id])) {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
    1938:	9b02      	ldr	r3, [sp, #8]
    193a:	4822      	ldr	r0, [pc, #136]	; (19c4 <main+0x40c>)
    193c:	4621      	mov	r1, r4
    193e:	f001 fcc5 	bl	32cc <am_sprintf>
                results[i].err++;
    1942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    1946:	3301      	adds	r3, #1
    1948:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            }
            if ((results[i].execs & ID_MATRIX) &&
    194c:	192a      	adds	r2, r5, r4
    194e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    1952:	eb0c 0782 	add.w	r7, ip, r2, lsl #2
    1956:	6a39      	ldr	r1, [r7, #32]
    1958:	0788      	lsls	r0, r1, #30
    195a:	d50d      	bpl.n	1978 <main+0x3c0>
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
    195c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
            if ((results[i].execs & ID_LIST) &&
                (results[i].crclist!=list_known_crc[known_id])) {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_MATRIX) &&
    195e:	4552      	cmp	r2, sl
    1960:	d00a      	beq.n	1978 <main+0x3c0>
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
    1962:	4621      	mov	r1, r4
    1964:	9b03      	ldr	r3, [sp, #12]
    1966:	4818      	ldr	r0, [pc, #96]	; (19c8 <main+0x410>)
    1968:	f001 fcb0 	bl	32cc <am_sprintf>
                results[i].err++;
    196c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
    1970:	6a39      	ldr	r1, [r7, #32]
    1972:	3001      	adds	r0, #1
    1974:	f8a7 0040 	strh.w	r0, [r7, #64]	; 0x40
            }
            if ((results[i].execs & ID_STATE) &&
                (results[i].crcstate!=state_known_crc[known_id])) {
    1978:	4425      	add	r5, r4
    197a:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
            if ((results[i].execs & ID_MATRIX) &&
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
    197e:	f011 0f04 	tst.w	r1, #4
                (results[i].crcstate!=state_known_crc[known_id])) {
    1982:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
            if ((results[i].execs & ID_MATRIX) &&
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
    1986:	d1b0      	bne.n	18ea <main+0x332>
    1988:	f9b5 c040 	ldrsh.w	ip, [r5, #64]	; 0x40
    198c:	e7bc      	b.n	1908 <main+0x350>
    if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
        results[0].seed1=0;
        results[0].seed2=0;
        results[0].seed3=0x66;
    }
    if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
    198e:	2901      	cmp	r1, #1
    1990:	f47f ae41 	bne.w	1616 <main+0x5e>
    1994:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    1998:	2a00      	cmp	r2, #0
    199a:	f47f ae3c 	bne.w	1616 <main+0x5e>
        results[0].seed1=0x3415;
    199e:	f243 4415 	movw	r4, #13333	; 0x3415
        results[0].seed2=0x3415;
        results[0].seed3=0x66;
    19a2:	2566      	movs	r5, #102	; 0x66
        results[0].seed1=0;
        results[0].seed2=0;
        results[0].seed3=0x66;
    }
    if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
        results[0].seed1=0x3415;
    19a4:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
        results[0].seed2=0x3415;
    19a8:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        results[0].seed3=0x66;
    19ac:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
    19b0:	e631      	b.n	1616 <main+0x5e>
    19b2:	bf00      	nop
    19b4:	3ff00000 	.word	0x3ff00000
    19b8:	000059a8 	.word	0x000059a8
    19bc:	000059dc 	.word	0x000059dc
    19c0:	00005a9c 	.word	0x00005a9c
    19c4:	00005a38 	.word	0x00005a38
    19c8:	00005a68 	.word	0x00005a68
    19cc:	1000101c 	.word	0x1000101c
    char *argv[1];
#else
MAIN_RETURN_TYPE main(int argc, char *argv[]) {
#endif
    ee_u16 i,j=0,num_algorithms=0;
    ee_s16 known_id=-1,total_errors=0;
    19d0:	f04f 34ff 	mov.w	r4, #4294967295
    19d4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 1cb4 <main+0x6fc>
    19d8:	9407      	str	r4, [sp, #28]
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
            ee_printf("2K validation run parameters for coremark.\n");
            break;
        default:
            total_errors=-1;
    19da:	4626      	mov	r6, r4
                results[i].err++;
            }
            total_errors+=results[i].err;
        }
    }
    total_errors+=check_data_types();
    19dc:	f002 f99c 	bl	3d18 <check_data_types>
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n",(ee_u32)results[0].size);
    19e0:	9911      	ldr	r1, [sp, #68]	; 0x44
                results[i].err++;
            }
            total_errors+=results[i].err;
        }
    }
    total_errors+=check_data_types();
    19e2:	4406      	add	r6, r0
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n",(ee_u32)results[0].size);
    19e4:	48ad      	ldr	r0, [pc, #692]	; (1c9c <main+0x6e4>)
    19e6:	f001 fc71 	bl	32cc <am_sprintf>
    ee_printf("Total ticks      : %lu\n",(ee_u32)total_time);
    19ea:	4649      	mov	r1, r9
    19ec:	48ac      	ldr	r0, [pc, #688]	; (1ca0 <main+0x6e8>)
    19ee:	f001 fc6d 	bl	32cc <am_sprintf>
#if HAS_FLOAT
    ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
    19f2:	4648      	mov	r0, r9
    19f4:	f001 faec 	bl	2fd0 <time_in_secs>
    19f8:	4602      	mov	r2, r0
    19fa:	460b      	mov	r3, r1
    19fc:	48a9      	ldr	r0, [pc, #676]	; (1ca4 <main+0x6ec>)
    19fe:	f001 fc65 	bl	32cc <am_sprintf>
    if (time_in_secs(total_time) > 0)
    1a02:	4648      	mov	r0, r9
    1a04:	f001 fae4 	bl	2fd0 <time_in_secs>
    1a08:	2200      	movs	r2, #0
    1a0a:	2300      	movs	r3, #0
                results[i].err++;
            }
            total_errors+=results[i].err;
        }
    }
    total_errors+=check_data_types();
    1a0c:	b2b6      	uxth	r6, r6
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n",(ee_u32)results[0].size);
    ee_printf("Total ticks      : %lu\n",(ee_u32)total_time);
#if HAS_FLOAT
    ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
    if (time_in_secs(total_time) > 0)
    1a0e:	f7fe ff9f 	bl	950 <__aeabi_dcmpgt>
    1a12:	b1b0      	cbz	r0, 1a42 <main+0x48a>
        ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
    1a14:	9f12      	ldr	r7, [sp, #72]	; 0x48
    1a16:	f8d8 0000 	ldr.w	r0, [r8]
    1a1a:	fb00 f007 	mul.w	r0, r0, r7
    1a1e:	f7fe fc91 	bl	344 <__aeabi_ui2d>
    1a22:	4682      	mov	sl, r0
    1a24:	4648      	mov	r0, r9
    1a26:	468b      	mov	fp, r1
    1a28:	f001 fad2 	bl	2fd0 <time_in_secs>
    1a2c:	4602      	mov	r2, r0
    1a2e:	460b      	mov	r3, r1
    1a30:	4650      	mov	r0, sl
    1a32:	4659      	mov	r1, fp
    1a34:	f7fe fe26 	bl	684 <__aeabi_ddiv>
    1a38:	4602      	mov	r2, r0
    1a3a:	460b      	mov	r3, r1
    1a3c:	489a      	ldr	r0, [pc, #616]	; (1ca8 <main+0x6f0>)
    1a3e:	f001 fc45 	bl	32cc <am_sprintf>
#else
    ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10) {
    1a42:	4648      	mov	r0, r9
    1a44:	f001 fac4 	bl	2fd0 <time_in_secs>
    1a48:	2200      	movs	r2, #0
    1a4a:	4b98      	ldr	r3, [pc, #608]	; (1cac <main+0x6f4>)
    1a4c:	f7fe ff62 	bl	914 <__aeabi_dcmplt>
    1a50:	2800      	cmp	r0, #0
    1a52:	f040 80a8 	bne.w	1ba6 <main+0x5ee>
                results[i].err++;
            }
            total_errors+=results[i].err;
        }
    }
    total_errors+=check_data_types();
    1a56:	b235      	sxth	r5, r6
    if (time_in_secs(total_time) < 10) {
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
    }

    ee_printf("Iterations       : %lu\n",(ee_u32)default_num_contexts*results[0].iterations);
    1a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1a5a:	f8d8 1000 	ldr.w	r1, [r8]
    1a5e:	4894      	ldr	r0, [pc, #592]	; (1cb0 <main+0x6f8>)
    1a60:	4c94      	ldr	r4, [pc, #592]	; (1cb4 <main+0x6fc>)
    1a62:	fb01 f103 	mul.w	r1, r1, r3
    1a66:	f001 fc31 	bl	32cc <am_sprintf>
    ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    1a6a:	4993      	ldr	r1, [pc, #588]	; (1cb8 <main+0x700>)
    1a6c:	4893      	ldr	r0, [pc, #588]	; (1cbc <main+0x704>)
    1a6e:	f001 fc2d 	bl	32cc <am_sprintf>
//  ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
#if (MULTITHREAD>1)
    ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n",MEM_LOCATION);
    1a72:	4993      	ldr	r1, [pc, #588]	; (1cc0 <main+0x708>)
    1a74:	4893      	ldr	r0, [pc, #588]	; (1cc4 <main+0x70c>)
    1a76:	f001 fc29 	bl	32cc <am_sprintf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n",seedcrc);
    1a7a:	9905      	ldr	r1, [sp, #20]
    1a7c:	4892      	ldr	r0, [pc, #584]	; (1cc8 <main+0x710>)
    1a7e:	f001 fc25 	bl	32cc <am_sprintf>
    if (results[0].execs & ID_LIST)
    1a82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a84:	07c9      	lsls	r1, r1, #31
    1a86:	d514      	bpl.n	1ab2 <main+0x4fa>
        for (i=0 ; i<default_num_contexts; i++)
    1a88:	6822      	ldr	r2, [r4, #0]
    1a8a:	b192      	cbz	r2, 1ab2 <main+0x4fa>
    1a8c:	2400      	movs	r4, #0
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    1a8e:	eb04 1604 	add.w	r6, r4, r4, lsl #4
    1a92:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1a96:	eb0e 0c86 	add.w	ip, lr, r6, lsl #2
    1a9a:	4621      	mov	r1, r4
    1a9c:	f8bc 203a 	ldrh.w	r2, [ip, #58]	; 0x3a
    1aa0:	488a      	ldr	r0, [pc, #552]	; (1ccc <main+0x714>)
    1aa2:	f001 fc13 	bl	32cc <am_sprintf>
#endif
    ee_printf("Memory location  : %s\n",MEM_LOCATION);
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n",seedcrc);
    if (results[0].execs & ID_LIST)
        for (i=0 ; i<default_num_contexts; i++)
    1aa6:	3401      	adds	r4, #1
    1aa8:	f8d8 7000 	ldr.w	r7, [r8]
    1aac:	b2a4      	uxth	r4, r4
    1aae:	42bc      	cmp	r4, r7
    1ab0:	d3ed      	bcc.n	1a8e <main+0x4d6>
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    if (results[0].execs & ID_MATRIX)
    1ab2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    1ab4:	07ba      	lsls	r2, r7, #30
    1ab6:	d518      	bpl.n	1aea <main+0x532>
        for (i=0 ; i<default_num_contexts; i++)
    1ab8:	f8d8 1000 	ldr.w	r1, [r8]
    1abc:	2900      	cmp	r1, #0
    1abe:	f000 80e1 	beq.w	1c84 <main+0x6cc>
    1ac2:	2600      	movs	r6, #0
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    1ac4:	eb06 1006 	add.w	r0, r6, r6, lsl #4
    1ac8:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
    1acc:	eb0a 0b80 	add.w	fp, sl, r0, lsl #2
    1ad0:	4631      	mov	r1, r6
    1ad2:	f8bb 203c 	ldrh.w	r2, [fp, #60]	; 0x3c
    1ad6:	487e      	ldr	r0, [pc, #504]	; (1cd0 <main+0x718>)
    1ad8:	f001 fbf8 	bl	32cc <am_sprintf>
    ee_printf("seedcrc          : 0x%04x\n",seedcrc);
    if (results[0].execs & ID_LIST)
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    if (results[0].execs & ID_MATRIX)
        for (i=0 ; i<default_num_contexts; i++)
    1adc:	3601      	adds	r6, #1
    1ade:	f8d8 2000 	ldr.w	r2, [r8]
    1ae2:	b2b6      	uxth	r6, r6
    1ae4:	4296      	cmp	r6, r2
    1ae6:	d3ed      	bcc.n	1ac4 <main+0x50c>
    1ae8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    if (results[0].execs & ID_STATE)
        for (i=0 ; i<default_num_contexts; i++)
    1aea:	f8d8 3000 	ldr.w	r3, [r8]
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    if (results[0].execs & ID_MATRIX)
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    if (results[0].execs & ID_STATE)
    1aee:	f017 0f04 	tst.w	r7, #4
    1af2:	d013      	beq.n	1b1c <main+0x564>
        for (i=0 ; i<default_num_contexts; i++)
    1af4:	2400      	movs	r4, #0
    1af6:	b323      	cbz	r3, 1b42 <main+0x58a>
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    1af8:	eb04 1104 	add.w	r1, r4, r4, lsl #4
    1afc:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1b00:	eb0e 0c81 	add.w	ip, lr, r1, lsl #2
    1b04:	4873      	ldr	r0, [pc, #460]	; (1cd4 <main+0x71c>)
    1b06:	f8bc 203e 	ldrh.w	r2, [ip, #62]	; 0x3e
    1b0a:	4621      	mov	r1, r4
    1b0c:	f001 fbde 	bl	32cc <am_sprintf>
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    if (results[0].execs & ID_MATRIX)
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    if (results[0].execs & ID_STATE)
        for (i=0 ; i<default_num_contexts; i++)
    1b10:	3401      	adds	r4, #1
    1b12:	f8d8 3000 	ldr.w	r3, [r8]
    1b16:	b2a4      	uxth	r4, r4
    1b18:	429c      	cmp	r4, r3
    1b1a:	d3ed      	bcc.n	1af8 <main+0x540>
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    for (i=0 ; i<default_num_contexts; i++)
    1b1c:	2600      	movs	r6, #0
    1b1e:	b183      	cbz	r3, 1b42 <main+0x58a>
        ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    1b20:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    1b24:	a80b      	add	r0, sp, #44	; 0x2c
    1b26:	eb00 0a83 	add.w	sl, r0, r3, lsl #2
    1b2a:	4631      	mov	r1, r6
    1b2c:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
    1b30:	4869      	ldr	r0, [pc, #420]	; (1cd8 <main+0x720>)
    1b32:	f001 fbcb 	bl	32cc <am_sprintf>
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    if (results[0].execs & ID_STATE)
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    for (i=0 ; i<default_num_contexts; i++)
    1b36:	3601      	adds	r6, #1
    1b38:	f8d8 2000 	ldr.w	r2, [r8]
    1b3c:	b2b6      	uxth	r6, r6
    1b3e:	4296      	cmp	r6, r2
    1b40:	d3ee      	bcc.n	1b20 <main+0x568>
        ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    if (total_errors==0) {
    1b42:	2d00      	cmp	r5, #0
    1b44:	d035      	beq.n	1bb2 <main+0x5fa>
            ee_printf("\n");
        }
#endif
    }
    if (total_errors>0)
        ee_printf("Errors detected\n");
    1b46:	bfcc      	ite	gt
    1b48:	4864      	ldrgt	r0, [pc, #400]	; (1cdc <main+0x724>)
    if (total_errors<0)
        ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
    1b4a:	4865      	ldrle	r0, [pc, #404]	; (1ce0 <main+0x728>)
    1b4c:	f001 fbbe 	bl	32cc <am_sprintf>
        portable_free(results[i].memblock[0]);
#endif


#if AM_PRINT_RESULTS
    float CMResult = default_num_contexts*results[0].iterations/time_in_secs(total_time) / (double)AM_CORECLK_MHZ;
    1b50:	9912      	ldr	r1, [sp, #72]	; 0x48
    1b52:	f8d8 0000 	ldr.w	r0, [r8]
    1b56:	fb00 f001 	mul.w	r0, r0, r1
    1b5a:	f7fe fbf3 	bl	344 <__aeabi_ui2d>
    1b5e:	4680      	mov	r8, r0
    1b60:	4648      	mov	r0, r9
    1b62:	468a      	mov	sl, r1
    1b64:	f001 fa34 	bl	2fd0 <time_in_secs>
    ee_printf("CM/MHz=%.3f.\n", CMResult);
    1b68:	4602      	mov	r2, r0
    1b6a:	460b      	mov	r3, r1
    1b6c:	4640      	mov	r0, r8
    1b6e:	4651      	mov	r1, sl
    1b70:	f7fe fd88 	bl	684 <__aeabi_ddiv>
    1b74:	2200      	movs	r2, #0
    1b76:	4b5b      	ldr	r3, [pc, #364]	; (1ce4 <main+0x72c>)
    1b78:	f7fe fd84 	bl	684 <__aeabi_ddiv>
    1b7c:	f7fe ff12 	bl	9a4 <__aeabi_d2f>
    1b80:	f7fe fc02 	bl	388 <__aeabi_f2d>
    1b84:	4602      	mov	r2, r0
    1b86:	460b      	mov	r3, r1
    1b88:	4857      	ldr	r0, [pc, #348]	; (1ce8 <main+0x730>)
    1b8a:	f001 fb9f 	bl	32cc <am_sprintf>

#endif //AM_PRINT_RESULTS

    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
    1b8e:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
    1b92:	f001 fb17 	bl	31c4 <portable_fini>

    return MAIN_RETURN_VAL;
}
    1b96:	2000      	movs	r0, #0
    1b98:	f60d 0d44 	addw	sp, sp, #2116	; 0x844
    1b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ba0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1ba4:	e71a      	b.n	19dc <main+0x424>
    ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10) {
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    1ba6:	4851      	ldr	r0, [pc, #324]	; (1cec <main+0x734>)
    1ba8:	f001 fb90 	bl	32cc <am_sprintf>
        total_errors++;
    1bac:	1c70      	adds	r0, r6, #1
    1bae:	b205      	sxth	r5, r0
    1bb0:	e752      	b.n	1a58 <main+0x4a0>
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    for (i=0 ; i<default_num_contexts; i++)
        ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    if (total_errors==0) {
        ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
    1bb2:	484f      	ldr	r0, [pc, #316]	; (1cf0 <main+0x738>)
    1bb4:	f001 fb8a 	bl	32cc <am_sprintf>
#if HAS_FLOAT
        if (known_id==3) {
    1bb8:	9d07      	ldr	r5, [sp, #28]
    1bba:	2d03      	cmp	r5, #3
    1bbc:	d1c8      	bne.n	1b50 <main+0x598>
            ee_printf("CoreMark 1.0 : %f / %s %s",default_num_contexts*results[0].iterations/time_in_secs(total_time),COMPILER_VERSION,COMPILER_FLAGS);
    1bbe:	9f12      	ldr	r7, [sp, #72]	; 0x48
    1bc0:	f8d8 0000 	ldr.w	r0, [r8]
    1bc4:	4e3c      	ldr	r6, [pc, #240]	; (1cb8 <main+0x700>)
    1bc6:	fb00 f007 	mul.w	r0, r0, r7
    1bca:	f7fe fbbb 	bl	344 <__aeabi_ui2d>
    1bce:	4683      	mov	fp, r0
    1bd0:	4648      	mov	r0, r9
    1bd2:	460c      	mov	r4, r1
    1bd4:	f001 f9fc 	bl	2fd0 <time_in_secs>
    1bd8:	4602      	mov	r2, r0
    1bda:	460b      	mov	r3, r1
    1bdc:	4658      	mov	r0, fp
    1bde:	4621      	mov	r1, r4
    1be0:	f7fe fd50 	bl	684 <__aeabi_ddiv>
    1be4:	4b43      	ldr	r3, [pc, #268]	; (1cf4 <main+0x73c>)
    1be6:	9301      	str	r3, [sp, #4]
    1be8:	4602      	mov	r2, r0
    1bea:	460b      	mov	r3, r1
    1bec:	9600      	str	r6, [sp, #0]
    1bee:	4842      	ldr	r0, [pc, #264]	; (1cf8 <main+0x740>)
    1bf0:	f001 fb6c 	bl	32cc <am_sprintf>
#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
            ee_printf(" / %s",MEM_LOCATION);
    1bf4:	4932      	ldr	r1, [pc, #200]	; (1cc0 <main+0x708>)
    1bf6:	4841      	ldr	r0, [pc, #260]	; (1cfc <main+0x744>)
    1bf8:	f001 fb68 	bl	32cc <am_sprintf>
#endif

#if (MULTITHREAD>1)
            ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
#endif
            ee_printf("\n");
    1bfc:	4840      	ldr	r0, [pc, #256]	; (1d00 <main+0x748>)
    1bfe:	f001 fb65 	bl	32cc <am_sprintf>
    1c02:	e7a5      	b.n	1b50 <main+0x598>

    switch (seedcrc) { /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
            break;
    1c04:	f64b 6252 	movw	r2, #48722	; 0xbe52
    1c08:	f645 6a47 	movw	sl, #24135	; 0x5e47
    1c0c:	f24d 4eb0 	movw	lr, #54448	; 0xd4b0
    seedcrc=crc16(results[0].size,seedcrc);

    switch (seedcrc) { /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
    1c10:	483c      	ldr	r0, [pc, #240]	; (1d04 <main+0x74c>)
            break;
    1c12:	f8cd a010 	str.w	sl, [sp, #16]
    1c16:	4615      	mov	r5, r2
    1c18:	9203      	str	r2, [sp, #12]
    1c1a:	4674      	mov	r4, lr
    1c1c:	f8cd e008 	str.w	lr, [sp, #8]
    seedcrc=crc16(results[0].size,seedcrc);

    switch (seedcrc) { /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
    1c20:	f001 fb54 	bl	32cc <am_sprintf>
    seedcrc=crc16(results[0].seed3,seedcrc);
    seedcrc=crc16(results[0].size,seedcrc);

    switch (seedcrc) { /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
    1c24:	2000      	movs	r0, #0
            ee_printf("6k performance run parameters for coremark.\n");
            break;
    1c26:	46d3      	mov	fp, sl
    1c28:	4622      	mov	r2, r4
    1c2a:	46aa      	mov	sl, r5
    seedcrc=crc16(results[0].seed3,seedcrc);
    seedcrc=crc16(results[0].size,seedcrc);

    switch (seedcrc) { /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
    1c2c:	9007      	str	r0, [sp, #28]
            ee_printf("6k performance run parameters for coremark.\n");
            break;
    1c2e:	e650      	b.n	18d2 <main+0x31a>
            ee_printf("2K performance run parameters for coremark.\n");
            break;
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
            ee_printf("2K validation run parameters for coremark.\n");
            break;
    1c30:	f240 7247 	movw	r2, #1863	; 0x747
    1c34:	f24e 31c1 	movw	r1, #58305	; 0xe3c1
    1c38:	f648 5a84 	movw	sl, #36228	; 0x8d84
    1c3c:	4615      	mov	r5, r2
    1c3e:	460f      	mov	r7, r1
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
            ee_printf("2K validation run parameters for coremark.\n");
    1c40:	4831      	ldr	r0, [pc, #196]	; (1d08 <main+0x750>)
            break;
    1c42:	f8cd a010 	str.w	sl, [sp, #16]
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
    1c46:	2604      	movs	r6, #4
            ee_printf("2K validation run parameters for coremark.\n");
            break;
    1c48:	9203      	str	r2, [sp, #12]
    1c4a:	9102      	str	r1, [sp, #8]
    1c4c:	46d3      	mov	fp, sl
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
            ee_printf("2K validation run parameters for coremark.\n");
    1c4e:	f001 fb3d 	bl	32cc <am_sprintf>
            break;
    1c52:	46aa      	mov	sl, r5
    1c54:	463a      	mov	r2, r7
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
            known_id=4;
    1c56:	9607      	str	r6, [sp, #28]
            ee_printf("2K validation run parameters for coremark.\n");
            break;
    1c58:	e63b      	b.n	18d2 <main+0x31a>
            ee_printf("6k performance run parameters for coremark.\n");
            break;
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
            break;
    1c5a:	f643 11bf 	movw	r1, #14783	; 0x39bf
    1c5e:	f241 1b99 	movw	fp, #4505	; 0x1199
    1c62:	f44f 564d 	mov.w	r6, #13120	; 0x3340
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
            break;
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
    1c66:	4829      	ldr	r0, [pc, #164]	; (1d0c <main+0x754>)
            break;
    1c68:	f8cd b00c 	str.w	fp, [sp, #12]
    1c6c:	460f      	mov	r7, r1
    1c6e:	465d      	mov	r5, fp
    1c70:	9104      	str	r1, [sp, #16]
    1c72:	9602      	str	r6, [sp, #8]
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
            break;
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
            ee_printf("6k validation run parameters for coremark.\n");
    1c74:	f001 fb2a 	bl	32cc <am_sprintf>
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
            break;
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
    1c78:	2301      	movs	r3, #1
            ee_printf("6k validation run parameters for coremark.\n");
            break;
    1c7a:	46bb      	mov	fp, r7
    1c7c:	46aa      	mov	sl, r5
    1c7e:	4632      	mov	r2, r6
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id=0;
            ee_printf("6k performance run parameters for coremark.\n");
            break;
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
            known_id=1;
    1c80:	9307      	str	r3, [sp, #28]
            ee_printf("6k validation run parameters for coremark.\n");
            break;
    1c82:	e626      	b.n	18d2 <main+0x31a>
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    if (results[0].execs & ID_MATRIX)
        for (i=0 ; i<default_num_contexts; i++)
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    if (results[0].execs & ID_STATE)
    1c84:	077b      	lsls	r3, r7, #29
    1c86:	f53f af5c 	bmi.w	1b42 <main+0x58a>
    1c8a:	460b      	mov	r3, r1
    1c8c:	e746      	b.n	1b1c <main+0x564>
    for (i=0; i<iterations; i++) {
        crc=core_bench_list(res,1);
        res->crc=crcu16(crc,res->crc);
        crc=core_bench_list(res,-1);
        res->crc=crcu16(crc,res->crc);
        if (i==0) res->crclist=res->crc;
    1c8e:	f8ad c066 	strh.w	ip, [sp, #102]	; 0x66
    1c92:	e55d      	b.n	1750 <main+0x198>
    1c94:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    1c98:	e570      	b.n	177c <main+0x1c4>
    1c9a:	bf00      	nop
    1c9c:	00005acc 	.word	0x00005acc
    1ca0:	00005ae4 	.word	0x00005ae4
    1ca4:	00005afc 	.word	0x00005afc
    1ca8:	00005b14 	.word	0x00005b14
    1cac:	40240000 	.word	0x40240000
    1cb0:	00005b6c 	.word	0x00005b6c
    1cb4:	1000101c 	.word	0x1000101c
    1cb8:	00005b84 	.word	0x00005b84
    1cbc:	00005bcc 	.word	0x00005bcc
    1cc0:	00005be4 	.word	0x00005be4
    1cc4:	00005bec 	.word	0x00005bec
    1cc8:	00005c04 	.word	0x00005c04
    1ccc:	00005c20 	.word	0x00005c20
    1cd0:	00005c3c 	.word	0x00005c3c
    1cd4:	00005c58 	.word	0x00005c58
    1cd8:	00005c74 	.word	0x00005c74
    1cdc:	00005d0c 	.word	0x00005d0c
    1ce0:	00005d20 	.word	0x00005d20
    1ce4:	40480000 	.word	0x40480000
    1ce8:	00005d84 	.word	0x00005d84
    1cec:	00005b2c 	.word	0x00005b2c
    1cf0:	00005c90 	.word	0x00005c90
    1cf4:	00005cf8 	.word	0x00005cf8
    1cf8:	00005cdc 	.word	0x00005cdc
    1cfc:	00005d04 	.word	0x00005d04
    1d00:	00005df0 	.word	0x00005df0
    1d04:	0000594c 	.word	0x0000594c
    1d08:	00005a0c 	.word	0x00005a0c
    1d0c:	0000597c 	.word	0x0000597c

00001d10 <matrix_test>:
    4 - Multiply a matrix by a matrix.
    5 - Add a constant value to all elements of a matrix.

    After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d14:	b091      	sub	sp, #68	; 0x44
    1d16:	f9bd a068 	ldrsh.w	sl, [sp, #104]	; 0x68
    1d1a:	9305      	str	r3, [sp, #20]
    ee_u16 crc=0;
    MATDAT clipval=matrix_big(val);
    1d1c:	ea6f 540a 	mvn.w	r4, sl, lsl #20
    1d20:	ea6f 5314 	mvn.w	r3, r4, lsr #20
    4 - Multiply a matrix by a matrix.
    5 - Add a constant value to all elements of a matrix.

    After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1d24:	9109      	str	r1, [sp, #36]	; 0x24
    1d26:	920c      	str	r2, [sp, #48]	; 0x30
    ee_u16 crc=0;
    MATDAT clipval=matrix_big(val);
    1d28:	930b      	str	r3, [sp, #44]	; 0x2c
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    1d2a:	9002      	str	r0, [sp, #8]
    1d2c:	2800      	cmp	r0, #0
    1d2e:	f000 878d 	beq.w	2c4c <matrix_test+0xf3c>
    1d32:	4616      	mov	r6, r2
    1d34:	fa1f f18a 	uxth.w	r1, sl
    1d38:	1e44      	subs	r4, r0, #1
    1d3a:	f04f 0e00 	mov.w	lr, #0
    1d3e:	0047      	lsls	r7, r0, #1
    1d40:	940a      	str	r4, [sp, #40]	; 0x28
    1d42:	910d      	str	r1, [sp, #52]	; 0x34
    1d44:	46b1      	mov	r9, r6
    1d46:	960e      	str	r6, [sp, #56]	; 0x38
    1d48:	f8cd e004 	str.w	lr, [sp, #4]
    1d4c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    1d50:	460a      	mov	r2, r1
    1d52:	9707      	str	r7, [sp, #28]
    1d54:	4634      	mov	r4, r6
    1d56:	e0ee      	b.n	1f36 <matrix_test+0x226>
        for (j=0; j<N; j++) {
            A[i*N+j] += val;
    1d58:	f834 801e 	ldrh.w	r8, [r4, lr, lsl #1]
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    1d5c:	4603      	mov	r3, r0
        for (j=0; j<N; j++) {
            A[i*N+j] += val;
    1d5e:	4490      	add	r8, r2
    1d60:	2b01      	cmp	r3, #1
    1d62:	f824 801e 	strh.w	r8, [r4, lr, lsl #1]
    1d66:	f000 80fd 	beq.w	1f64 <matrix_test+0x254>
    1d6a:	f8b9 a002 	ldrh.w	sl, [r9, #2]
    1d6e:	2b02      	cmp	r3, #2
    1d70:	4492      	add	sl, r2
    1d72:	f8a9 a002 	strh.w	sl, [r9, #2]
    1d76:	f000 80f5 	beq.w	1f64 <matrix_test+0x254>
    1d7a:	f8b9 6004 	ldrh.w	r6, [r9, #4]
    1d7e:	2b04      	cmp	r3, #4
    1d80:	4416      	add	r6, r2
    1d82:	f8a9 6004 	strh.w	r6, [r9, #4]
    1d86:	f040 80ef 	bne.w	1f68 <matrix_test+0x258>
    1d8a:	f8b9 c006 	ldrh.w	ip, [r9, #6]
    1d8e:	4494      	add	ip, r2
    1d90:	f8a9 c006 	strh.w	ip, [r9, #6]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1d94:	4619      	mov	r1, r3
    1d96:	4298      	cmp	r0, r3
    1d98:	f000 80c5 	beq.w	1f26 <matrix_test+0x216>
    1d9c:	1ac7      	subs	r7, r0, r3
    1d9e:	1f3d      	subs	r5, r7, #4
    1da0:	08ad      	lsrs	r5, r5, #2
    1da2:	1c6e      	adds	r6, r5, #1
    1da4:	9706      	str	r7, [sp, #24]
    1da6:	4637      	mov	r7, r6
    1da8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    1daa:	9703      	str	r7, [sp, #12]
    1dac:	1af6      	subs	r6, r6, r3
    1dae:	00bf      	lsls	r7, r7, #2
    1db0:	2e02      	cmp	r6, #2
    1db2:	9704      	str	r7, [sp, #16]
    1db4:	f240 809e 	bls.w	1ef4 <matrix_test+0x1e4>
    1db8:	4473      	add	r3, lr
    1dba:	eb04 0643 	add.w	r6, r4, r3, lsl #1
            A[i*N+j] += val;
    1dbe:	f854 7013 	ldr.w	r7, [r4, r3, lsl #1]
    1dc2:	9308      	str	r3, [sp, #32]
    1dc4:	6873      	ldr	r3, [r6, #4]
    1dc6:	eb02 0807 	add.w	r8, r2, r7
    1dca:	f04f 0c00 	mov.w	ip, #0
    1dce:	eb02 0a03 	add.w	sl, r2, r3
    1dd2:	fa1f fb88 	uxth.w	fp, r8
    1dd6:	fa1f fa8a 	uxth.w	sl, sl
    1dda:	46e0      	mov	r8, ip
    1ddc:	f36a 080f 	bfi	r8, sl, #0, #16
    1de0:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    1de4:	eb02 4717 	add.w	r7, r2, r7, lsr #16
    1de8:	b2bf      	uxth	r7, r7
    1dea:	f36b 0c0f 	bfi	ip, fp, #0, #16
    1dee:	f363 481f 	bfi	r8, r3, #16, #16
    1df2:	9b03      	ldr	r3, [sp, #12]
    1df4:	f367 4c1f 	bfi	ip, r7, #16, #16
    1df8:	f04f 0a01 	mov.w	sl, #1
    1dfc:	9f08      	ldr	r7, [sp, #32]
    1dfe:	459a      	cmp	sl, r3
    1e00:	f844 c017 	str.w	ip, [r4, r7, lsl #1]
    1e04:	ea05 050a 	and.w	r5, r5, sl
    1e08:	f106 0b08 	add.w	fp, r6, #8
    1e0c:	f8c6 8004 	str.w	r8, [r6, #4]
    1e10:	d26b      	bcs.n	1eea <matrix_test+0x1da>
    1e12:	b315      	cbz	r5, 1e5a <matrix_test+0x14a>
    1e14:	e89b 1008 	ldmia.w	fp, {r3, ip}
    1e18:	18d6      	adds	r6, r2, r3
    1e1a:	fa1f f886 	uxth.w	r8, r6
    1e1e:	2500      	movs	r5, #0
    1e20:	eb02 4713 	add.w	r7, r2, r3, lsr #16
    1e24:	eb02 030c 	add.w	r3, r2, ip
    1e28:	462e      	mov	r6, r5
    1e2a:	f368 050f 	bfi	r5, r8, #0, #16
    1e2e:	fa1f f883 	uxth.w	r8, r3
    1e32:	fa1f fa87 	uxth.w	sl, r7
    1e36:	f368 060f 	bfi	r6, r8, #0, #16
    1e3a:	eb02 4c1c 	add.w	ip, r2, ip, lsr #16
    1e3e:	f36a 451f 	bfi	r5, sl, #16, #16
    1e42:	f36c 461f 	bfi	r6, ip, #16, #16
    1e46:	e88b 0060 	stmia.w	fp, {r5, r6}
    1e4a:	9d03      	ldr	r5, [sp, #12]
    1e4c:	f04f 0a02 	mov.w	sl, #2
    1e50:	45aa      	cmp	sl, r5
    1e52:	465e      	mov	r6, fp
    1e54:	f10b 0b08 	add.w	fp, fp, #8
    1e58:	d247      	bcs.n	1eea <matrix_test+0x1da>
    1e5a:	f8cd 9020 	str.w	r9, [sp, #32]
    1e5e:	68b3      	ldr	r3, [r6, #8]
    1e60:	f106 0708 	add.w	r7, r6, #8
    1e64:	68f6      	ldr	r6, [r6, #12]
    1e66:	2500      	movs	r5, #0
    1e68:	eb02 0906 	add.w	r9, r2, r6
    1e6c:	eb02 0803 	add.w	r8, r2, r3
    1e70:	fa1f f989 	uxth.w	r9, r9
    1e74:	46ac      	mov	ip, r5
    1e76:	fa1f f888 	uxth.w	r8, r8
    1e7a:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    1e7e:	eb02 4616 	add.w	r6, r2, r6, lsr #16
    1e82:	f369 0c0f 	bfi	ip, r9, #0, #16
    1e86:	f368 050f 	bfi	r5, r8, #0, #16
    1e8a:	fa1f f983 	uxth.w	r9, r3
    1e8e:	f366 4c1f 	bfi	ip, r6, #16, #16
    1e92:	f369 451f 	bfi	r5, r9, #16, #16
    1e96:	e88b 1020 	stmia.w	fp, {r5, ip}
    1e9a:	f107 0608 	add.w	r6, r7, #8
    1e9e:	68bf      	ldr	r7, [r7, #8]
    1ea0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1ea4:	19d3      	adds	r3, r2, r7
    1ea6:	2500      	movs	r5, #0
    1ea8:	fa1f f883 	uxth.w	r8, r3
    1eac:	eb02 4317 	add.w	r3, r2, r7, lsr #16
    1eb0:	b29b      	uxth	r3, r3
    1eb2:	462f      	mov	r7, r5
    1eb4:	f368 050f 	bfi	r5, r8, #0, #16
    1eb8:	eb02 0c09 	add.w	ip, r2, r9
    1ebc:	f363 451f 	bfi	r5, r3, #16, #16
    1ec0:	f8cb 5008 	str.w	r5, [fp, #8]
    1ec4:	fa1f fc8c 	uxth.w	ip, ip
    1ec8:	9d03      	ldr	r5, [sp, #12]
    1eca:	f36c 070f 	bfi	r7, ip, #0, #16
    1ece:	eb02 4919 	add.w	r9, r2, r9, lsr #16
    1ed2:	f10a 0a02 	add.w	sl, sl, #2
    1ed6:	f369 471f 	bfi	r7, r9, #16, #16
    1eda:	45aa      	cmp	sl, r5
    1edc:	f8cb 700c 	str.w	r7, [fp, #12]
    1ee0:	f10b 0b10 	add.w	fp, fp, #16
    1ee4:	d3bb      	bcc.n	1e5e <matrix_test+0x14e>
    1ee6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1eea:	9e04      	ldr	r6, [sp, #16]
    1eec:	9f06      	ldr	r7, [sp, #24]
    1eee:	42be      	cmp	r6, r7
    1ef0:	4431      	add	r1, r6
    1ef2:	d018      	beq.n	1f26 <matrix_test+0x216>
    1ef4:	eb0e 0b01 	add.w	fp, lr, r1
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1ef8:	1c4b      	adds	r3, r1, #1
            A[i*N+j] += val;
    1efa:	f834 801b 	ldrh.w	r8, [r4, fp, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1efe:	4298      	cmp	r0, r3
            A[i*N+j] += val;
    1f00:	4490      	add	r8, r2
    1f02:	f824 801b 	strh.w	r8, [r4, fp, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f06:	d90e      	bls.n	1f26 <matrix_test+0x216>
            A[i*N+j] += val;
    1f08:	4473      	add	r3, lr
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f0a:	3102      	adds	r1, #2
            A[i*N+j] += val;
    1f0c:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f10:	4288      	cmp	r0, r1
            A[i*N+j] += val;
    1f12:	4494      	add	ip, r2
    1f14:	f824 c013 	strh.w	ip, [r4, r3, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f18:	d905      	bls.n	1f26 <matrix_test+0x216>
            A[i*N+j] += val;
    1f1a:	4471      	add	r1, lr
    1f1c:	f834 5011 	ldrh.w	r5, [r4, r1, lsl #1]
    1f20:	4415      	add	r5, r2
    1f22:	f824 5011 	strh.w	r5, [r4, r1, lsl #1]
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    1f26:	9e01      	ldr	r6, [sp, #4]
    1f28:	9907      	ldr	r1, [sp, #28]
    1f2a:	3601      	adds	r6, #1
    1f2c:	42b0      	cmp	r0, r6
    1f2e:	9601      	str	r6, [sp, #4]
    1f30:	4489      	add	r9, r1
    1f32:	4486      	add	lr, r0
    1f34:	d01a      	beq.n	1f6c <matrix_test+0x25c>
    1f36:	ea4f 0359 	mov.w	r3, r9, lsr #1
    1f3a:	425d      	negs	r5, r3
    1f3c:	f005 0303 	and.w	r3, r5, #3
    1f40:	4283      	cmp	r3, r0
    1f42:	bf28      	it	cs
    1f44:	4603      	movcs	r3, r0
    1f46:	2804      	cmp	r0, #4
    1f48:	f67f af06 	bls.w	1d58 <matrix_test+0x48>
        for (j=0; j<N; j++) {
    1f4c:	4619      	mov	r1, r3
    1f4e:	2b00      	cmp	r3, #0
    1f50:	f43f af24 	beq.w	1d9c <matrix_test+0x8c>
            A[i*N+j] += val;
    1f54:	f834 801e 	ldrh.w	r8, [r4, lr, lsl #1]
    1f58:	2b01      	cmp	r3, #1
    1f5a:	4490      	add	r8, r2
    1f5c:	f824 801e 	strh.w	r8, [r4, lr, lsl #1]
    1f60:	f47f af03 	bne.w	1d6a <matrix_test+0x5a>
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f64:	4619      	mov	r1, r3
    1f66:	e716      	b.n	1d96 <matrix_test+0x86>
    1f68:	2103      	movs	r1, #3
    1f6a:	e714      	b.n	1d96 <matrix_test+0x86>
    1f6c:	9a02      	ldr	r2, [sp, #8]
    1f6e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    1f72:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    1f76:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    1f7a:	0094      	lsls	r4, r2, #2
    1f7c:	9403      	str	r4, [sp, #12]
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    1f7e:	f04f 0900 	mov.w	r9, #0
    1f82:	468c      	mov	ip, r1
    1f84:	eb0b 0e0c 	add.w	lr, fp, ip
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1f88:	f93b 7b02 	ldrsh.w	r7, [fp], #2
    1f8c:	4643      	mov	r3, r8
    1f8e:	fb07 f50a 	mul.w	r5, r7, sl
    1f92:	f1ac 0602 	sub.w	r6, ip, #2
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1f96:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1f98:	f843 5b04 	str.w	r5, [r3], #4
    1f9c:	f3c6 0142 	ubfx	r1, r6, #1, #3
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    1fa0:	d069      	beq.n	2076 <matrix_test+0x366>
    1fa2:	b3b9      	cbz	r1, 2014 <matrix_test+0x304>
    1fa4:	2901      	cmp	r1, #1
    1fa6:	d02d      	beq.n	2004 <matrix_test+0x2f4>
    1fa8:	2902      	cmp	r1, #2
    1faa:	d025      	beq.n	1ff8 <matrix_test+0x2e8>
    1fac:	2903      	cmp	r1, #3
    1fae:	d01d      	beq.n	1fec <matrix_test+0x2dc>
    1fb0:	2904      	cmp	r1, #4
    1fb2:	d015      	beq.n	1fe0 <matrix_test+0x2d0>
    1fb4:	2905      	cmp	r1, #5
    1fb6:	d00d      	beq.n	1fd4 <matrix_test+0x2c4>
    1fb8:	2906      	cmp	r1, #6
    1fba:	d005      	beq.n	1fc8 <matrix_test+0x2b8>
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1fbc:	f93b 0b02 	ldrsh.w	r0, [fp], #2
    1fc0:	fb00 f20a 	mul.w	r2, r0, sl
    1fc4:	f843 2b04 	str.w	r2, [r3], #4
    1fc8:	f93b 4b02 	ldrsh.w	r4, [fp], #2
    1fcc:	fb04 f70a 	mul.w	r7, r4, sl
    1fd0:	f843 7b04 	str.w	r7, [r3], #4
    1fd4:	f93b 5b02 	ldrsh.w	r5, [fp], #2
    1fd8:	fb05 f60a 	mul.w	r6, r5, sl
    1fdc:	f843 6b04 	str.w	r6, [r3], #4
    1fe0:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    1fe4:	fb01 f00a 	mul.w	r0, r1, sl
    1fe8:	f843 0b04 	str.w	r0, [r3], #4
    1fec:	f93b 2b02 	ldrsh.w	r2, [fp], #2
    1ff0:	fb02 f40a 	mul.w	r4, r2, sl
    1ff4:	f843 4b04 	str.w	r4, [r3], #4
    1ff8:	f93b 7b02 	ldrsh.w	r7, [fp], #2
    1ffc:	fb07 f50a 	mul.w	r5, r7, sl
    2000:	f843 5b04 	str.w	r5, [r3], #4
    2004:	f93b 6b02 	ldrsh.w	r6, [fp], #2
    2008:	fb06 f10a 	mul.w	r1, r6, sl
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    200c:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    200e:	f843 1b04 	str.w	r1, [r3], #4
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2012:	d030      	beq.n	2076 <matrix_test+0x366>
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    2014:	4658      	mov	r0, fp
    2016:	461a      	mov	r2, r3
    2018:	f930 4b02 	ldrsh.w	r4, [r0], #2
    201c:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
    2020:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
    2024:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    2028:	f9bb 000a 	ldrsh.w	r0, [fp, #10]
    202c:	fb04 f10a 	mul.w	r1, r4, sl
    2030:	f842 1b04 	str.w	r1, [r2], #4
    2034:	fb06 f60a 	mul.w	r6, r6, sl
    2038:	fb07 f70a 	mul.w	r7, r7, sl
    203c:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
    2040:	f9bb 100c 	ldrsh.w	r1, [fp, #12]
    2044:	605f      	str	r7, [r3, #4]
    2046:	6056      	str	r6, [r2, #4]
    2048:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
    204c:	f10b 0b10 	add.w	fp, fp, #16
    2050:	fb05 f50a 	mul.w	r5, r5, sl
    2054:	fb04 f40a 	mul.w	r4, r4, sl
    2058:	fb00 f00a 	mul.w	r0, r0, sl
    205c:	fb01 f10a 	mul.w	r1, r1, sl
    2060:	fb02 f60a 	mul.w	r6, r2, sl
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2064:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    2066:	60dd      	str	r5, [r3, #12]
    2068:	611c      	str	r4, [r3, #16]
    206a:	6158      	str	r0, [r3, #20]
    206c:	6199      	str	r1, [r3, #24]
    206e:	61de      	str	r6, [r3, #28]
    2070:	f103 0320 	add.w	r3, r3, #32
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2074:	d1ce      	bne.n	2014 <matrix_test+0x304>
    Multiply a matrix by a constant.
    This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    2076:	9d02      	ldr	r5, [sp, #8]
    2078:	9b03      	ldr	r3, [sp, #12]
    207a:	f109 0901 	add.w	r9, r9, #1
    207e:	454d      	cmp	r5, r9
    2080:	4498      	add	r8, r3
    2082:	f47f af7f 	bne.w	1f84 <matrix_test+0x274>
    2086:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2088:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    208c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    2090:	4664      	mov	r4, ip
    2092:	f04f 0c00 	mov.w	ip, #0
    2096:	4660      	mov	r0, ip
    2098:	4666      	mov	r6, ip
    209a:	4661      	mov	r1, ip
    209c:	46bb      	mov	fp, r7
    209e:	46aa      	mov	sl, r5
    20a0:	9401      	str	r4, [sp, #4]
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    20a2:	463d      	mov	r5, r7
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    20a4:	46b0      	mov	r8, r6
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    20a6:	f855 6b04 	ldr.w	r6, [r5], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    20aa:	b280      	uxth	r0, r0
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    20ac:	4546      	cmp	r6, r8
    20ae:	bfd4      	ite	le
    20b0:	4602      	movle	r2, r0
    20b2:	1c42      	addgt	r2, r0, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    20b4:	4431      	add	r1, r6
            if (tmp>clipval) {
                ret+=10;
    20b6:	300a      	adds	r0, #10
    20b8:	4571      	cmp	r1, lr
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    20ba:	b214      	sxth	r4, r2
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    20bc:	b203      	sxth	r3, r0
    20be:	444f      	add	r7, r9
    20c0:	bfd8      	it	le
    20c2:	4620      	movle	r0, r4
    20c4:	f1a9 0204 	sub.w	r2, r9, #4
    20c8:	bfc4      	itt	gt
    20ca:	2100      	movgt	r1, #0
    20cc:	4618      	movgt	r0, r3
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    20ce:	42af      	cmp	r7, r5
            cur=C[i*N+j];
    20d0:	46b0      	mov	r8, r6
    20d2:	f3c2 0481 	ubfx	r4, r2, #2, #2
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    20d6:	f000 8085 	beq.w	21e4 <matrix_test+0x4d4>
    20da:	2c00      	cmp	r4, #0
    20dc:	d039      	beq.n	2152 <matrix_test+0x442>
    20de:	2c01      	cmp	r4, #1
    20e0:	d025      	beq.n	212e <matrix_test+0x41e>
    20e2:	2c02      	cmp	r4, #2
    20e4:	d011      	beq.n	210a <matrix_test+0x3fa>
            cur=C[i*N+j];
    20e6:	f855 2b04 	ldr.w	r2, [r5], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    20ea:	b280      	uxth	r0, r0
    20ec:	f100 060a 	add.w	r6, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    20f0:	4411      	add	r1, r2
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    20f2:	4542      	cmp	r2, r8
    20f4:	bfc8      	it	gt
    20f6:	3001      	addgt	r0, #1
    20f8:	b203      	sxth	r3, r0
    20fa:	4571      	cmp	r1, lr
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    20fc:	fa0f f886 	sxth.w	r8, r6
    2100:	bfca      	itet	gt
    2102:	4640      	movgt	r0, r8
    2104:	4618      	movle	r0, r3
    2106:	2100      	movgt	r1, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2108:	4690      	mov	r8, r2
    210a:	f855 4b04 	ldr.w	r4, [r5], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    210e:	b280      	uxth	r0, r0
    2110:	f100 020a 	add.w	r2, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2114:	4421      	add	r1, r4
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2116:	4544      	cmp	r4, r8
    2118:	bfc8      	it	gt
    211a:	3001      	addgt	r0, #1
    211c:	fa0f f880 	sxth.w	r8, r0
    2120:	4571      	cmp	r1, lr
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2122:	b216      	sxth	r6, r2
    2124:	bfd2      	itee	le
    2126:	4640      	movle	r0, r8
    2128:	4630      	movgt	r0, r6
    212a:	2100      	movgt	r1, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    212c:	46a0      	mov	r8, r4
    212e:	f855 6b04 	ldr.w	r6, [r5], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2132:	b280      	uxth	r0, r0
    2134:	f100 030a 	add.w	r3, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2138:	4431      	add	r1, r6
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    213a:	4546      	cmp	r6, r8
    213c:	bfc8      	it	gt
    213e:	3001      	addgt	r0, #1
    2140:	b202      	sxth	r2, r0
    2142:	4571      	cmp	r1, lr
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2144:	b21c      	sxth	r4, r3
    2146:	bfca      	itet	gt
    2148:	4620      	movgt	r0, r4
    214a:	4610      	movle	r0, r2
    214c:	2100      	movgt	r1, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    214e:	42af      	cmp	r7, r5
    2150:	d048      	beq.n	21e4 <matrix_test+0x4d4>
    2152:	4688      	mov	r8, r1
            cur=C[i*N+j];
    2154:	462b      	mov	r3, r5
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2156:	b282      	uxth	r2, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2158:	f853 1b04 	ldr.w	r1, [r3], #4
    215c:	686c      	ldr	r4, [r5, #4]
    215e:	6858      	ldr	r0, [r3, #4]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2160:	42b1      	cmp	r1, r6
    2162:	bfd4      	ite	le
    2164:	4616      	movle	r6, r2
    2166:	1c56      	addgt	r6, r2, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2168:	4488      	add	r8, r1
    216a:	45f0      	cmp	r8, lr
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    216c:	b233      	sxth	r3, r6
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    216e:	f102 020a 	add.w	r2, r2, #10
    2172:	b212      	sxth	r2, r2
    2174:	bfd4      	ite	le
    2176:	461a      	movle	r2, r3
    2178:	f04f 0800 	movgt.w	r8, #0
    217c:	b296      	uxth	r6, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    217e:	44a0      	add	r8, r4
            if (tmp>clipval) {
                ret+=10;
    2180:	f106 030a 	add.w	r3, r6, #10
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2184:	428c      	cmp	r4, r1
    2186:	bfc8      	it	gt
    2188:	3601      	addgt	r6, #1
    218a:	45f0      	cmp	r8, lr
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    218c:	b219      	sxth	r1, r3
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    218e:	b232      	sxth	r2, r6
    2190:	bfc4      	itt	gt
    2192:	460a      	movgt	r2, r1
    2194:	f04f 0800 	movgt.w	r8, #0
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2198:	b296      	uxth	r6, r2
    219a:	f106 020a 	add.w	r2, r6, #10
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    219e:	42a0      	cmp	r0, r4
    21a0:	bfc8      	it	gt
    21a2:	3601      	addgt	r6, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    21a4:	eb08 0400 	add.w	r4, r8, r0
    21a8:	4574      	cmp	r4, lr
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    21aa:	b233      	sxth	r3, r6
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    21ac:	b211      	sxth	r1, r2
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    21ae:	68ee      	ldr	r6, [r5, #12]
    21b0:	bfdc      	itt	le
    21b2:	4619      	movle	r1, r3
    21b4:	46a0      	movle	r8, r4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    21b6:	b28a      	uxth	r2, r1
    21b8:	bfc8      	it	gt
    21ba:	f04f 0800 	movgt.w	r8, #0
    21be:	f102 040a 	add.w	r4, r2, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    21c2:	44b0      	add	r8, r6
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    21c4:	4286      	cmp	r6, r0
    21c6:	bfc8      	it	gt
    21c8:	3201      	addgt	r2, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    21ca:	b223      	sxth	r3, r4
    21cc:	45f0      	cmp	r8, lr
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    21ce:	b211      	sxth	r1, r2
    21d0:	f105 0510 	add.w	r5, r5, #16
    21d4:	bfca      	itet	gt
    21d6:	4618      	movgt	r0, r3
    21d8:	4608      	movle	r0, r1
    21da:	f04f 0800 	movgt.w	r8, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    21de:	42af      	cmp	r7, r5
    21e0:	d1b8      	bne.n	2154 <matrix_test+0x444>
    21e2:	4641      	mov	r1, r8
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    21e4:	f10c 0c01 	add.w	ip, ip, #1
    21e8:	45e2      	cmp	sl, ip
    21ea:	f47f af5a 	bne.w	20a2 <matrix_test+0x392>
    matrix_add_const(N,A,val); /* make sure data changes  */
#if CORE_DEBUG
    printmat(A,N,"matrix_add_const");
#endif
    matrix_mul_const(N,C,A,val);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    21ee:	2100      	movs	r1, #0
    21f0:	9c01      	ldr	r4, [sp, #4]
    21f2:	f001 fceb 	bl	3bcc <crc16>
    21f6:	9d03      	ldr	r5, [sp, #12]
    21f8:	9004      	str	r0, [sp, #16]
    21fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    21fc:	9f05      	ldr	r7, [sp, #20]
    21fe:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    2202:	4428      	add	r0, r5
    2204:	9001      	str	r0, [sp, #4]
    2206:	eb07 0804 	add.w	r8, r7, r4
    220a:	46ba      	mov	sl, r7
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    220c:	46d6      	mov	lr, sl
    220e:	46cc      	mov	ip, r9
    2210:	f93e 3b02 	ldrsh.w	r3, [lr], #2
    2214:	f93c 6b02 	ldrsh.w	r6, [ip], #2
    2218:	ebca 0208 	rsb	r2, sl, r8
    221c:	1e91      	subs	r1, r2, #2
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    221e:	45f0      	cmp	r8, lr
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    2220:	fb06 f303 	mul.w	r3, r6, r3
    2224:	f3c1 0042 	ubfx	r0, r1, #1, #3
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    2228:	d072      	beq.n	2310 <matrix_test+0x600>
    222a:	b3c8      	cbz	r0, 22a0 <matrix_test+0x590>
    222c:	2801      	cmp	r0, #1
    222e:	d02f      	beq.n	2290 <matrix_test+0x580>
    2230:	2802      	cmp	r0, #2
    2232:	d027      	beq.n	2284 <matrix_test+0x574>
    2234:	2803      	cmp	r0, #3
    2236:	d01f      	beq.n	2278 <matrix_test+0x568>
    2238:	2804      	cmp	r0, #4
    223a:	d017      	beq.n	226c <matrix_test+0x55c>
    223c:	2805      	cmp	r0, #5
    223e:	d00f      	beq.n	2260 <matrix_test+0x550>
    2240:	2806      	cmp	r0, #6
    2242:	d007      	beq.n	2254 <matrix_test+0x544>
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    2244:	f93c 5b02 	ldrsh.w	r5, [ip], #2
    2248:	f9ba 7002 	ldrsh.w	r7, [sl, #2]
    224c:	f10e 0e02 	add.w	lr, lr, #2
    2250:	fb05 3307 	mla	r3, r5, r7, r3
    2254:	f93c 6b02 	ldrsh.w	r6, [ip], #2
    2258:	f93e 2b02 	ldrsh.w	r2, [lr], #2
    225c:	fb06 3302 	mla	r3, r6, r2, r3
    2260:	f93c 1b02 	ldrsh.w	r1, [ip], #2
    2264:	f93e 0b02 	ldrsh.w	r0, [lr], #2
    2268:	fb01 3300 	mla	r3, r1, r0, r3
    226c:	f93c 5b02 	ldrsh.w	r5, [ip], #2
    2270:	f93e 7b02 	ldrsh.w	r7, [lr], #2
    2274:	fb05 3307 	mla	r3, r5, r7, r3
    2278:	f93c 6b02 	ldrsh.w	r6, [ip], #2
    227c:	f93e 2b02 	ldrsh.w	r2, [lr], #2
    2280:	fb06 3302 	mla	r3, r6, r2, r3
    2284:	f93c 1b02 	ldrsh.w	r1, [ip], #2
    2288:	f93e 0b02 	ldrsh.w	r0, [lr], #2
    228c:	fb01 3300 	mla	r3, r1, r0, r3
    2290:	f93e 7b02 	ldrsh.w	r7, [lr], #2
    2294:	f93c 5b02 	ldrsh.w	r5, [ip], #2
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    2298:	45f0      	cmp	r8, lr
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    229a:	fb05 3307 	mla	r3, r5, r7, r3
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    229e:	d037      	beq.n	2310 <matrix_test+0x600>
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    22a0:	4665      	mov	r5, ip
    22a2:	4672      	mov	r2, lr
    22a4:	f935 1b02 	ldrsh.w	r1, [r5], #2
    22a8:	f932 6b02 	ldrsh.w	r6, [r2], #2
    22ac:	f9bc 0002 	ldrsh.w	r0, [ip, #2]
    22b0:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
    22b4:	f9be 5002 	ldrsh.w	r5, [lr, #2]
    22b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    22bc:	fb01 3306 	mla	r3, r1, r6, r3
    22c0:	fb00 3105 	mla	r1, r0, r5, r3
    22c4:	f9be 3006 	ldrsh.w	r3, [lr, #6]
    22c8:	f9bc 5006 	ldrsh.w	r5, [ip, #6]
    22cc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
    22d0:	fb07 1002 	mla	r0, r7, r2, r1
    22d4:	f9be 7008 	ldrsh.w	r7, [lr, #8]
    22d8:	f9bc 200a 	ldrsh.w	r2, [ip, #10]
    22dc:	fb05 0103 	mla	r1, r5, r3, r0
    22e0:	f9be 000a 	ldrsh.w	r0, [lr, #10]
    22e4:	f9bc 300c 	ldrsh.w	r3, [ip, #12]
    22e8:	fb06 1507 	mla	r5, r6, r7, r1
    22ec:	f9be 700c 	ldrsh.w	r7, [lr, #12]
    22f0:	f9be 100e 	ldrsh.w	r1, [lr, #14]
    22f4:	f9bc 600e 	ldrsh.w	r6, [ip, #14]
    22f8:	fb02 5200 	mla	r2, r2, r0, r5
    22fc:	f10e 0e10 	add.w	lr, lr, #16
    2300:	fb03 2007 	mla	r0, r3, r7, r2
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    2304:	45f0      	cmp	r8, lr
    2306:	f10c 0c10 	add.w	ip, ip, #16
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    230a:	fb06 0301 	mla	r3, r6, r1, r0
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
    230e:	d1c7      	bne.n	22a0 <matrix_test+0x590>
    2310:	f84b 3b04 	str.w	r3, [fp], #4
    Multiply a matrix by a vector.
    This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    2314:	9b01      	ldr	r3, [sp, #4]
    2316:	459b      	cmp	fp, r3
    2318:	44a1      	add	r9, r4
    231a:	f47f af77 	bne.w	220c <matrix_test+0x4fc>
    231e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2320:	9701      	str	r7, [sp, #4]
    2322:	f04f 0e00 	mov.w	lr, #0
    2326:	463e      	mov	r6, r7
    2328:	f8dd a008 	ldr.w	sl, [sp, #8]
    232c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    232e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    2332:	4675      	mov	r5, lr
    2334:	4670      	mov	r0, lr
    2336:	46f4      	mov	ip, lr
    2338:	46ab      	mov	fp, r5
    233a:	eb09 0806 	add.w	r8, r9, r6
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    233e:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2342:	b280      	uxth	r0, r0
    2344:	f100 020a 	add.w	r2, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2348:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    234a:	455d      	cmp	r5, fp
    234c:	bfc8      	it	gt
    234e:	3001      	addgt	r0, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2350:	b211      	sxth	r1, r2
    2352:	45bc      	cmp	ip, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2354:	fa0f fb80 	sxth.w	fp, r0
    2358:	f1a9 0304 	sub.w	r3, r9, #4
    235c:	bfca      	itet	gt
    235e:	4608      	movgt	r0, r1
    2360:	4658      	movle	r0, fp
    2362:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2366:	4546      	cmp	r6, r8
            cur=C[i*N+j];
    2368:	462a      	mov	r2, r5
    236a:	f3c3 0181 	ubfx	r1, r3, #2, #2
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    236e:	f000 808d 	beq.w	248c <matrix_test+0x77c>
    2372:	2900      	cmp	r1, #0
    2374:	d03d      	beq.n	23f2 <matrix_test+0x6e2>
    2376:	2901      	cmp	r1, #1
    2378:	d027      	beq.n	23ca <matrix_test+0x6ba>
    237a:	2902      	cmp	r1, #2
    237c:	d012      	beq.n	23a4 <matrix_test+0x694>
            cur=C[i*N+j];
    237e:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2382:	b280      	uxth	r0, r0
    2384:	f100 0b0a 	add.w	fp, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2388:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    238a:	4295      	cmp	r5, r2
    238c:	bfc8      	it	gt
    238e:	3001      	addgt	r0, #1
    2390:	b203      	sxth	r3, r0
    2392:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2394:	fa0f f28b 	sxth.w	r2, fp
    2398:	bfca      	itet	gt
    239a:	4610      	movgt	r0, r2
    239c:	4618      	movle	r0, r3
    239e:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    23a2:	462a      	mov	r2, r5
    23a4:	f856 1b04 	ldr.w	r1, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    23a8:	b280      	uxth	r0, r0
    23aa:	f100 050a 	add.w	r5, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    23ae:	448c      	add	ip, r1
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    23b0:	4291      	cmp	r1, r2
    23b2:	bfc8      	it	gt
    23b4:	3001      	addgt	r0, #1
    23b6:	b202      	sxth	r2, r0
    23b8:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    23ba:	fa0f fb85 	sxth.w	fp, r5
    23be:	bfd2      	itee	le
    23c0:	4610      	movle	r0, r2
    23c2:	4658      	movgt	r0, fp
    23c4:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    23c8:	460a      	mov	r2, r1
    23ca:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    23ce:	b280      	uxth	r0, r0
    23d0:	f100 030a 	add.w	r3, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    23d4:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    23d6:	4295      	cmp	r5, r2
    23d8:	bfc8      	it	gt
    23da:	3001      	addgt	r0, #1
    23dc:	fa0f fb80 	sxth.w	fp, r0
    23e0:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    23e2:	b219      	sxth	r1, r3
    23e4:	bfca      	itet	gt
    23e6:	4608      	movgt	r0, r1
    23e8:	4658      	movle	r0, fp
    23ea:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    23ee:	4546      	cmp	r6, r8
    23f0:	d04c      	beq.n	248c <matrix_test+0x77c>
            cur=C[i*N+j];
    23f2:	4633      	mov	r3, r6
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    23f4:	b282      	uxth	r2, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    23f6:	f853 bb04 	ldr.w	fp, [r3], #4
    23fa:	6870      	ldr	r0, [r6, #4]
    23fc:	6859      	ldr	r1, [r3, #4]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    23fe:	45ab      	cmp	fp, r5
    2400:	bfd4      	ite	le
    2402:	4615      	movle	r5, r2
    2404:	1c55      	addgt	r5, r2, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2406:	44dc      	add	ip, fp
    2408:	45bc      	cmp	ip, r7
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    240a:	b22b      	sxth	r3, r5
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    240c:	f102 020a 	add.w	r2, r2, #10
    2410:	b212      	sxth	r2, r2
    2412:	bfd4      	ite	le
    2414:	461a      	movle	r2, r3
    2416:	f04f 0c00 	movgt.w	ip, #0
    241a:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    241c:	4484      	add	ip, r0
            if (tmp>clipval) {
                ret+=10;
    241e:	f105 030a 	add.w	r3, r5, #10
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2422:	4558      	cmp	r0, fp
    2424:	bfc8      	it	gt
    2426:	3501      	addgt	r5, #1
    2428:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    242a:	fa0f fb83 	sxth.w	fp, r3
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    242e:	b22a      	sxth	r2, r5
    2430:	bfc4      	itt	gt
    2432:	465a      	movgt	r2, fp
    2434:	f04f 0c00 	movgt.w	ip, #0
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2438:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    243a:	eb01 030c 	add.w	r3, r1, ip
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    243e:	4281      	cmp	r1, r0
    2440:	bfd4      	ite	le
    2442:	4628      	movle	r0, r5
    2444:	1c68      	addgt	r0, r5, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2446:	f105 0b0a 	add.w	fp, r5, #10
    244a:	42bb      	cmp	r3, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    244c:	b200      	sxth	r0, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    244e:	68f5      	ldr	r5, [r6, #12]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2450:	fa0f f28b 	sxth.w	r2, fp
    2454:	bfdc      	itt	le
    2456:	4602      	movle	r2, r0
    2458:	469c      	movle	ip, r3
    245a:	fa1f fb82 	uxth.w	fp, r2
    245e:	bfc8      	it	gt
    2460:	f04f 0c00 	movgt.w	ip, #0
    2464:	f10b 030a 	add.w	r3, fp, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2468:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    246a:	428d      	cmp	r5, r1
    246c:	bfc8      	it	gt
    246e:	f10b 0b01 	addgt.w	fp, fp, #1
    2472:	fa0f f28b 	sxth.w	r2, fp
    2476:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2478:	b219      	sxth	r1, r3
    247a:	f106 0610 	add.w	r6, r6, #16
    247e:	bfca      	itet	gt
    2480:	4608      	movgt	r0, r1
    2482:	4610      	movle	r0, r2
    2484:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2488:	4546      	cmp	r6, r8
    248a:	d1b2      	bne.n	23f2 <matrix_test+0x6e2>
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    248c:	f10e 0e01 	add.w	lr, lr, #1
    2490:	45f2      	cmp	sl, lr
    2492:	f47f af51 	bne.w	2338 <matrix_test+0x628>
    crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_const");
#endif
    matrix_mul_vect(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2496:	9904      	ldr	r1, [sp, #16]
    2498:	f001 fb98 	bl	3bcc <crc16>
    249c:	9e05      	ldr	r6, [sp, #20]
    249e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    24a2:	9006      	str	r0, [sp, #24]
    24a4:	f04f 0c00 	mov.w	ip, #0
    24a8:	eb06 0804 	add.w	r8, r6, r4
    24ac:	46e1      	mov	r9, ip
    24ae:	9e05      	ldr	r6, [sp, #20]
    24b0:	f8dd c004 	ldr.w	ip, [sp, #4]
    24b4:	eb04 070e 	add.w	r7, r4, lr
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    24b8:	4675      	mov	r5, lr
    24ba:	f9b6 3000 	ldrsh.w	r3, [r6]
    24be:	f935 0b02 	ldrsh.w	r0, [r5], #2
    24c2:	ebce 0a07 	rsb	sl, lr, r7
    24c6:	f1aa 0b02 	sub.w	fp, sl, #2
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    24ca:	42bd      	cmp	r5, r7
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    24cc:	fb00 f303 	mul.w	r3, r0, r3
    24d0:	f3cb 0142 	ubfx	r1, fp, #1, #3
    24d4:	4622      	mov	r2, r4
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    24d6:	d074      	beq.n	25c2 <matrix_test+0x8b2>
    24d8:	b3c1      	cbz	r1, 254c <matrix_test+0x83c>
    24da:	2901      	cmp	r1, #1
    24dc:	d02e      	beq.n	253c <matrix_test+0x82c>
    24de:	2902      	cmp	r1, #2
    24e0:	d026      	beq.n	2530 <matrix_test+0x820>
    24e2:	2903      	cmp	r1, #3
    24e4:	d01e      	beq.n	2524 <matrix_test+0x814>
    24e6:	2904      	cmp	r1, #4
    24e8:	d016      	beq.n	2518 <matrix_test+0x808>
    24ea:	2905      	cmp	r1, #5
    24ec:	d00e      	beq.n	250c <matrix_test+0x7fc>
    24ee:	2906      	cmp	r1, #6
    24f0:	d005      	beq.n	24fe <matrix_test+0x7ee>
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    24f2:	5f32      	ldrsh	r2, [r6, r4]
    24f4:	f935 0b02 	ldrsh.w	r0, [r5], #2
    24f8:	fb00 3302 	mla	r3, r0, r2, r3
    24fc:	0062      	lsls	r2, r4, #1
    24fe:	f936 b002 	ldrsh.w	fp, [r6, r2]
    2502:	f935 ab02 	ldrsh.w	sl, [r5], #2
    2506:	4422      	add	r2, r4
    2508:	fb0a 330b 	mla	r3, sl, fp, r3
    250c:	5eb1      	ldrsh	r1, [r6, r2]
    250e:	f935 0b02 	ldrsh.w	r0, [r5], #2
    2512:	4422      	add	r2, r4
    2514:	fb00 3301 	mla	r3, r0, r1, r3
    2518:	5eb0      	ldrsh	r0, [r6, r2]
    251a:	f935 ab02 	ldrsh.w	sl, [r5], #2
    251e:	4422      	add	r2, r4
    2520:	fb0a 3300 	mla	r3, sl, r0, r3
    2524:	5eb1      	ldrsh	r1, [r6, r2]
    2526:	f935 bb02 	ldrsh.w	fp, [r5], #2
    252a:	4422      	add	r2, r4
    252c:	fb0b 3301 	mla	r3, fp, r1, r3
    2530:	5eb0      	ldrsh	r0, [r6, r2]
    2532:	f935 ab02 	ldrsh.w	sl, [r5], #2
    2536:	4422      	add	r2, r4
    2538:	fb0a 3300 	mla	r3, sl, r0, r3
    253c:	f935 bb02 	ldrsh.w	fp, [r5], #2
    2540:	5eb1      	ldrsh	r1, [r6, r2]
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    2542:	42bd      	cmp	r5, r7
    2544:	4422      	add	r2, r4
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2546:	fb0b 3301 	mla	r3, fp, r1, r3
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    254a:	d03a      	beq.n	25c2 <matrix_test+0x8b2>
    254c:	4611      	mov	r1, r2
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    254e:	46aa      	mov	sl, r5
    2550:	190a      	adds	r2, r1, r4
    2552:	f93a 0b02 	ldrsh.w	r0, [sl], #2
    2556:	5e71      	ldrsh	r1, [r6, r1]
    2558:	f936 b002 	ldrsh.w	fp, [r6, r2]
    255c:	f9ba a002 	ldrsh.w	sl, [sl, #2]
    2560:	4422      	add	r2, r4
    2562:	fb00 3101 	mla	r1, r0, r1, r3
    2566:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    256a:	5eb0      	ldrsh	r0, [r6, r2]
    256c:	4422      	add	r2, r4
    256e:	fb03 130b 	mla	r3, r3, fp, r1
    2572:	1911      	adds	r1, r2, r4
    2574:	f9b5 b006 	ldrsh.w	fp, [r5, #6]
    2578:	5eb2      	ldrsh	r2, [r6, r2]
    257a:	fb0a 3300 	mla	r3, sl, r0, r3
    257e:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
    2582:	eb01 0a04 	add.w	sl, r1, r4
    2586:	5e71      	ldrsh	r1, [r6, r1]
    2588:	fb0b 3302 	mla	r3, fp, r2, r3
    258c:	eb0a 0204 	add.w	r2, sl, r4
    2590:	fb00 3301 	mla	r3, r0, r1, r3
    2594:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
    2598:	f936 a00a 	ldrsh.w	sl, [r6, sl]
    259c:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    25a0:	1910      	adds	r0, r2, r4
    25a2:	5eb2      	ldrsh	r2, [r6, r2]
    25a4:	fb0b 3b0a 	mla	fp, fp, sl, r3
    25a8:	3510      	adds	r5, #16
    25aa:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
    25ae:	f936 a000 	ldrsh.w	sl, [r6, r0]
    25b2:	fb01 b202 	mla	r2, r1, r2, fp
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    25b6:	42bd      	cmp	r5, r7
    25b8:	eb00 0104 	add.w	r1, r0, r4
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    25bc:	fb03 230a 	mla	r3, r3, sl, r2
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    25c0:	d1c5      	bne.n	254e <matrix_test+0x83e>
    25c2:	3602      	adds	r6, #2
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    25c4:	4546      	cmp	r6, r8
    25c6:	f84c 3b04 	str.w	r3, [ip], #4
    25ca:	f47f af75 	bne.w	24b8 <matrix_test+0x7a8>
    25ce:	9e01      	ldr	r6, [sp, #4]
    25d0:	9f03      	ldr	r7, [sp, #12]
    25d2:	46ae      	mov	lr, r5
    Multiply a matrix by a matrix.
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
    25d4:	9d02      	ldr	r5, [sp, #8]
    25d6:	f109 0901 	add.w	r9, r9, #1
    25da:	443e      	add	r6, r7
    25dc:	454d      	cmp	r5, r9
    25de:	9601      	str	r6, [sp, #4]
    25e0:	f47f af65 	bne.w	24ae <matrix_test+0x79e>
    25e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25e6:	9304      	str	r3, [sp, #16]
    25e8:	f04f 0e00 	mov.w	lr, #0
    25ec:	46b9      	mov	r9, r7
    25ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    25f0:	46aa      	mov	sl, r5
    25f2:	4670      	mov	r0, lr
    25f4:	4675      	mov	r5, lr
    25f6:	46f4      	mov	ip, lr
    25f8:	461e      	mov	r6, r3
    25fa:	46ab      	mov	fp, r5
    25fc:	eb09 0806 	add.w	r8, r9, r6
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2600:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2604:	b280      	uxth	r0, r0
    2606:	f100 020a 	add.w	r2, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    260a:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    260c:	455d      	cmp	r5, fp
    260e:	bfc8      	it	gt
    2610:	3001      	addgt	r0, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2612:	b211      	sxth	r1, r2
    2614:	45bc      	cmp	ip, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2616:	fa0f fb80 	sxth.w	fp, r0
    261a:	f1a9 0304 	sub.w	r3, r9, #4
    261e:	bfca      	itet	gt
    2620:	4608      	movgt	r0, r1
    2622:	4658      	movle	r0, fp
    2624:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2628:	4546      	cmp	r6, r8
            cur=C[i*N+j];
    262a:	462a      	mov	r2, r5
    262c:	f3c3 0181 	ubfx	r1, r3, #2, #2
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2630:	f000 808d 	beq.w	274e <matrix_test+0xa3e>
    2634:	2900      	cmp	r1, #0
    2636:	d03d      	beq.n	26b4 <matrix_test+0x9a4>
    2638:	2901      	cmp	r1, #1
    263a:	d027      	beq.n	268c <matrix_test+0x97c>
    263c:	2902      	cmp	r1, #2
    263e:	d012      	beq.n	2666 <matrix_test+0x956>
            cur=C[i*N+j];
    2640:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2644:	b280      	uxth	r0, r0
    2646:	f100 0b0a 	add.w	fp, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    264a:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    264c:	4295      	cmp	r5, r2
    264e:	bfc8      	it	gt
    2650:	3001      	addgt	r0, #1
    2652:	b203      	sxth	r3, r0
    2654:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2656:	fa0f f28b 	sxth.w	r2, fp
    265a:	bfca      	itet	gt
    265c:	4610      	movgt	r0, r2
    265e:	4618      	movle	r0, r3
    2660:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2664:	462a      	mov	r2, r5
    2666:	f856 1b04 	ldr.w	r1, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    266a:	b280      	uxth	r0, r0
    266c:	f100 050a 	add.w	r5, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2670:	448c      	add	ip, r1
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2672:	4291      	cmp	r1, r2
    2674:	bfc8      	it	gt
    2676:	3001      	addgt	r0, #1
    2678:	b202      	sxth	r2, r0
    267a:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    267c:	fa0f fb85 	sxth.w	fp, r5
    2680:	bfd2      	itee	le
    2682:	4610      	movle	r0, r2
    2684:	4658      	movgt	r0, fp
    2686:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    268a:	460a      	mov	r2, r1
    268c:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2690:	b280      	uxth	r0, r0
    2692:	f100 030a 	add.w	r3, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2696:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2698:	4295      	cmp	r5, r2
    269a:	bfc8      	it	gt
    269c:	3001      	addgt	r0, #1
    269e:	fa0f fb80 	sxth.w	fp, r0
    26a2:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    26a4:	b219      	sxth	r1, r3
    26a6:	bfca      	itet	gt
    26a8:	4608      	movgt	r0, r1
    26aa:	4658      	movle	r0, fp
    26ac:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    26b0:	4546      	cmp	r6, r8
    26b2:	d04c      	beq.n	274e <matrix_test+0xa3e>
            cur=C[i*N+j];
    26b4:	4633      	mov	r3, r6
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    26b6:	b282      	uxth	r2, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    26b8:	f853 bb04 	ldr.w	fp, [r3], #4
    26bc:	6870      	ldr	r0, [r6, #4]
    26be:	6859      	ldr	r1, [r3, #4]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    26c0:	45ab      	cmp	fp, r5
    26c2:	bfd4      	ite	le
    26c4:	4615      	movle	r5, r2
    26c6:	1c55      	addgt	r5, r2, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    26c8:	44dc      	add	ip, fp
    26ca:	45bc      	cmp	ip, r7
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    26cc:	b22b      	sxth	r3, r5
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    26ce:	f102 020a 	add.w	r2, r2, #10
    26d2:	b212      	sxth	r2, r2
    26d4:	bfd4      	ite	le
    26d6:	461a      	movle	r2, r3
    26d8:	f04f 0c00 	movgt.w	ip, #0
    26dc:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    26de:	4484      	add	ip, r0
            if (tmp>clipval) {
                ret+=10;
    26e0:	f105 030a 	add.w	r3, r5, #10
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    26e4:	4558      	cmp	r0, fp
    26e6:	bfc8      	it	gt
    26e8:	3501      	addgt	r5, #1
    26ea:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    26ec:	fa0f fb83 	sxth.w	fp, r3
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    26f0:	b22a      	sxth	r2, r5
    26f2:	bfc4      	itt	gt
    26f4:	465a      	movgt	r2, fp
    26f6:	f04f 0c00 	movgt.w	ip, #0
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    26fa:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    26fc:	eb01 030c 	add.w	r3, r1, ip
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2700:	4281      	cmp	r1, r0
    2702:	bfd4      	ite	le
    2704:	4628      	movle	r0, r5
    2706:	1c68      	addgt	r0, r5, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2708:	f105 0b0a 	add.w	fp, r5, #10
    270c:	42bb      	cmp	r3, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    270e:	b200      	sxth	r0, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2710:	68f5      	ldr	r5, [r6, #12]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2712:	fa0f f28b 	sxth.w	r2, fp
    2716:	bfdc      	itt	le
    2718:	4602      	movle	r2, r0
    271a:	469c      	movle	ip, r3
    271c:	fa1f fb82 	uxth.w	fp, r2
    2720:	bfc8      	it	gt
    2722:	f04f 0c00 	movgt.w	ip, #0
    2726:	f10b 030a 	add.w	r3, fp, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    272a:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    272c:	428d      	cmp	r5, r1
    272e:	bfc8      	it	gt
    2730:	f10b 0b01 	addgt.w	fp, fp, #1
    2734:	fa0f f28b 	sxth.w	r2, fp
    2738:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    273a:	b219      	sxth	r1, r3
    273c:	f106 0610 	add.w	r6, r6, #16
    2740:	bfca      	itet	gt
    2742:	4608      	movgt	r0, r1
    2744:	4610      	movle	r0, r2
    2746:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    274a:	4546      	cmp	r6, r8
    274c:	d1b2      	bne.n	26b4 <matrix_test+0x9a4>
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    274e:	f10e 0e01 	add.w	lr, lr, #1
    2752:	45f2      	cmp	sl, lr
    2754:	f47f af51 	bne.w	25fa <matrix_test+0x8ea>
    crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_vect");
#endif
    matrix_mul_matrix(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2758:	9906      	ldr	r1, [sp, #24]
    275a:	f001 fa37 	bl	3bcc <crc16>
    275e:	9e05      	ldr	r6, [sp, #20]
    2760:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2764:	9007      	str	r0, [sp, #28]
    2766:	4426      	add	r6, r4
    2768:	2700      	movs	r7, #0
    276a:	9601      	str	r6, [sp, #4]
    276c:	9706      	str	r7, [sp, #24]
    276e:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2772:	f8dd b010 	ldr.w	fp, [sp, #16]
    2776:	eb04 090a 	add.w	r9, r4, sl
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    277a:	46d4      	mov	ip, sl
    277c:	f9b8 5000 	ldrsh.w	r5, [r8]
    2780:	f93c 0b02 	ldrsh.w	r0, [ip], #2
    2784:	ebca 0e09 	rsb	lr, sl, r9
    2788:	fb00 f505 	mul.w	r5, r0, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    278c:	f3c5 1146 	ubfx	r1, r5, #5, #7
    2790:	f3c5 0383 	ubfx	r3, r5, #2, #4
    2794:	f1ae 0202 	sub.w	r2, lr, #2
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    2798:	45e1      	cmp	r9, ip
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    279a:	fb01 f303 	mul.w	r3, r1, r3
    279e:	f3c2 0641 	ubfx	r6, r2, #1, #2
    27a2:	4621      	mov	r1, r4
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    27a4:	d066      	beq.n	2874 <matrix_test+0xb64>
    27a6:	b366      	cbz	r6, 2802 <matrix_test+0xaf2>
    27a8:	2e01      	cmp	r6, #1
    27aa:	d01b      	beq.n	27e4 <matrix_test+0xad4>
    27ac:	2e02      	cmp	r6, #2
    27ae:	d00c      	beq.n	27ca <matrix_test+0xaba>
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27b0:	f93c 7b02 	ldrsh.w	r7, [ip], #2
    27b4:	f938 5004 	ldrsh.w	r5, [r8, r4]
    27b8:	fb07 f705 	mul.w	r7, r7, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27bc:	f3c7 1146 	ubfx	r1, r7, #5, #7
    27c0:	f3c7 0083 	ubfx	r0, r7, #2, #4
    27c4:	fb01 3300 	mla	r3, r1, r0, r3
    27c8:	0061      	lsls	r1, r4, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27ca:	f938 6001 	ldrsh.w	r6, [r8, r1]
    27ce:	f93c 2b02 	ldrsh.w	r2, [ip], #2
    27d2:	fb02 f206 	mul.w	r2, r2, r6
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27d6:	f3c2 0783 	ubfx	r7, r2, #2, #4
    27da:	f3c2 1546 	ubfx	r5, r2, #5, #7
    27de:	4421      	add	r1, r4
    27e0:	fb05 3307 	mla	r3, r5, r7, r3
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27e4:	f93c 2b02 	ldrsh.w	r2, [ip], #2
    27e8:	f938 0001 	ldrsh.w	r0, [r8, r1]
    27ec:	fb02 f200 	mul.w	r2, r2, r0
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27f0:	f3c2 0683 	ubfx	r6, r2, #2, #4
    27f4:	f3c2 1746 	ubfx	r7, r2, #5, #7
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    27f8:	45e1      	cmp	r9, ip
    27fa:	4421      	add	r1, r4
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27fc:	fb07 3306 	mla	r3, r7, r6, r3
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    2800:	d038      	beq.n	2874 <matrix_test+0xb64>
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2802:	4665      	mov	r5, ip
    2804:	1908      	adds	r0, r1, r4
    2806:	f938 e001 	ldrsh.w	lr, [r8, r1]
    280a:	f935 2b02 	ldrsh.w	r2, [r5], #2
    280e:	f9bc 7002 	ldrsh.w	r7, [ip, #2]
    2812:	f938 6000 	ldrsh.w	r6, [r8, r0]
    2816:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
    281a:	1901      	adds	r1, r0, r4
    281c:	fb02 f20e 	mul.w	r2, r2, lr
    2820:	f938 0001 	ldrsh.w	r0, [r8, r1]
    2824:	4421      	add	r1, r4
    2826:	fb07 f606 	mul.w	r6, r7, r6
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    282a:	f3c2 0e83 	ubfx	lr, r2, #2, #4
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    282e:	fb05 f500 	mul.w	r5, r5, r0
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2832:	f3c2 1246 	ubfx	r2, r2, #5, #7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2836:	f9bc 0006 	ldrsh.w	r0, [ip, #6]
    283a:	f938 7001 	ldrsh.w	r7, [r8, r1]
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    283e:	fb02 330e 	mla	r3, r2, lr, r3
    2842:	f3c6 0283 	ubfx	r2, r6, #2, #4
    2846:	f3c6 1646 	ubfx	r6, r6, #5, #7
    284a:	fb06 3302 	mla	r3, r6, r2, r3
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    284e:	fb00 f707 	mul.w	r7, r0, r7
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2852:	f3c5 0683 	ubfx	r6, r5, #2, #4
    2856:	f10c 0c08 	add.w	ip, ip, #8
    285a:	f3c5 1546 	ubfx	r5, r5, #5, #7
    285e:	fb05 3006 	mla	r0, r5, r6, r3
    2862:	f3c7 0e83 	ubfx	lr, r7, #2, #4
    2866:	f3c7 1246 	ubfx	r2, r7, #5, #7
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    286a:	45e1      	cmp	r9, ip
    286c:	4421      	add	r1, r4
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    286e:	fb02 030e 	mla	r3, r2, lr, r0
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
    2872:	d1c6      	bne.n	2802 <matrix_test+0xaf2>
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2874:	9901      	ldr	r1, [sp, #4]
    2876:	f84b 3b04 	str.w	r3, [fp], #4
    287a:	f108 0802 	add.w	r8, r8, #2
    287e:	4588      	cmp	r8, r1
    2880:	f47f af7b 	bne.w	277a <matrix_test+0xa6a>
    Multiply a matrix by a matrix, and extract some bits from the result.
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j,k;
    for (i=0; i<N; i++) {
    2884:	9b06      	ldr	r3, [sp, #24]
    2886:	9e04      	ldr	r6, [sp, #16]
    2888:	9d03      	ldr	r5, [sp, #12]
    288a:	9f02      	ldr	r7, [sp, #8]
    288c:	3301      	adds	r3, #1
    288e:	442e      	add	r6, r5
    2890:	429f      	cmp	r7, r3
    2892:	9306      	str	r3, [sp, #24]
    2894:	9604      	str	r6, [sp, #16]
    2896:	46ca      	mov	sl, r9
    2898:	f47f af69 	bne.w	276e <matrix_test+0xa5e>
    289c:	f04f 0e00 	mov.w	lr, #0
    28a0:	46ba      	mov	sl, r7
    28a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    28a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    28a6:	46a9      	mov	r9, r5
    28a8:	4670      	mov	r0, lr
    28aa:	4675      	mov	r5, lr
    28ac:	46f4      	mov	ip, lr
    28ae:	46ab      	mov	fp, r5
    28b0:	eb09 0806 	add.w	r8, r9, r6
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    28b4:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    28b8:	b280      	uxth	r0, r0
    28ba:	f100 020a 	add.w	r2, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    28be:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    28c0:	455d      	cmp	r5, fp
    28c2:	bfc8      	it	gt
    28c4:	3001      	addgt	r0, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    28c6:	b211      	sxth	r1, r2
    28c8:	45bc      	cmp	ip, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    28ca:	fa0f fb80 	sxth.w	fp, r0
    28ce:	f1a9 0304 	sub.w	r3, r9, #4
    28d2:	bfca      	itet	gt
    28d4:	4608      	movgt	r0, r1
    28d6:	4658      	movle	r0, fp
    28d8:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    28dc:	4546      	cmp	r6, r8
            cur=C[i*N+j];
    28de:	462a      	mov	r2, r5
    28e0:	f3c3 0181 	ubfx	r1, r3, #2, #2
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    28e4:	f000 808d 	beq.w	2a02 <matrix_test+0xcf2>
    28e8:	2900      	cmp	r1, #0
    28ea:	d03d      	beq.n	2968 <matrix_test+0xc58>
    28ec:	2901      	cmp	r1, #1
    28ee:	d027      	beq.n	2940 <matrix_test+0xc30>
    28f0:	2902      	cmp	r1, #2
    28f2:	d012      	beq.n	291a <matrix_test+0xc0a>
            cur=C[i*N+j];
    28f4:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    28f8:	b280      	uxth	r0, r0
    28fa:	f100 0b0a 	add.w	fp, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    28fe:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2900:	4295      	cmp	r5, r2
    2902:	bfc8      	it	gt
    2904:	3001      	addgt	r0, #1
    2906:	b203      	sxth	r3, r0
    2908:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    290a:	fa0f f28b 	sxth.w	r2, fp
    290e:	bfca      	itet	gt
    2910:	4610      	movgt	r0, r2
    2912:	4618      	movle	r0, r3
    2914:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    2918:	462a      	mov	r2, r5
    291a:	f856 1b04 	ldr.w	r1, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    291e:	b280      	uxth	r0, r0
    2920:	f100 050a 	add.w	r5, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2924:	448c      	add	ip, r1
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2926:	4291      	cmp	r1, r2
    2928:	bfc8      	it	gt
    292a:	3001      	addgt	r0, #1
    292c:	b202      	sxth	r2, r0
    292e:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2930:	fa0f fb85 	sxth.w	fp, r5
    2934:	bfd2      	itee	le
    2936:	4610      	movle	r0, r2
    2938:	4658      	movgt	r0, fp
    293a:	f04f 0c00 	movgt.w	ip, #0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    293e:	460a      	mov	r2, r1
    2940:	f856 5b04 	ldr.w	r5, [r6], #4
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2944:	b280      	uxth	r0, r0
    2946:	f100 030a 	add.w	r3, r0, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    294a:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    294c:	4295      	cmp	r5, r2
    294e:	bfc8      	it	gt
    2950:	3001      	addgt	r0, #1
    2952:	fa0f fb80 	sxth.w	fp, r0
    2956:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2958:	b219      	sxth	r1, r3
    295a:	bfca      	itet	gt
    295c:	4608      	movgt	r0, r1
    295e:	4658      	movle	r0, fp
    2960:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2964:	4546      	cmp	r6, r8
    2966:	d04c      	beq.n	2a02 <matrix_test+0xcf2>
            cur=C[i*N+j];
    2968:	4633      	mov	r3, r6
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    296a:	b282      	uxth	r2, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    296c:	f853 bb04 	ldr.w	fp, [r3], #4
    2970:	6870      	ldr	r0, [r6, #4]
    2972:	6859      	ldr	r1, [r3, #4]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2974:	45ab      	cmp	fp, r5
    2976:	bfd4      	ite	le
    2978:	4615      	movle	r5, r2
    297a:	1c55      	addgt	r5, r2, #1
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    297c:	44dc      	add	ip, fp
    297e:	45bc      	cmp	ip, r7
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2980:	b22b      	sxth	r3, r5
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    2982:	f102 020a 	add.w	r2, r2, #10
    2986:	b212      	sxth	r2, r2
    2988:	bfd4      	ite	le
    298a:	461a      	movle	r2, r3
    298c:	f04f 0c00 	movgt.w	ip, #0
    2990:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    2992:	4484      	add	ip, r0
            if (tmp>clipval) {
                ret+=10;
    2994:	f105 030a 	add.w	r3, r5, #10
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    2998:	4558      	cmp	r0, fp
    299a:	bfc8      	it	gt
    299c:	3501      	addgt	r5, #1
    299e:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    29a0:	fa0f fb83 	sxth.w	fp, r3
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    29a4:	b22a      	sxth	r2, r5
    29a6:	bfc4      	itt	gt
    29a8:	465a      	movgt	r2, fp
    29aa:	f04f 0c00 	movgt.w	ip, #0
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    29ae:	b295      	uxth	r5, r2
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    29b0:	eb01 030c 	add.w	r3, r1, ip
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    29b4:	4281      	cmp	r1, r0
    29b6:	bfd4      	ite	le
    29b8:	4628      	movle	r0, r5
    29ba:	1c68      	addgt	r0, r5, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    29bc:	f105 0b0a 	add.w	fp, r5, #10
    29c0:	42bb      	cmp	r3, r7
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    29c2:	b200      	sxth	r0, r0
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
    29c4:	68f5      	ldr	r5, [r6, #12]
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    29c6:	fa0f f28b 	sxth.w	r2, fp
    29ca:	bfdc      	itt	le
    29cc:	4602      	movle	r2, r0
    29ce:	469c      	movle	ip, r3
    29d0:	fa1f fb82 	uxth.w	fp, r2
    29d4:	bfc8      	it	gt
    29d6:	f04f 0c00 	movgt.w	ip, #0
    29da:	f10b 030a 	add.w	r3, fp, #10
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
    29de:	44ac      	add	ip, r5
            if (tmp>clipval) {
                ret+=10;
                tmp=0;
            } else {
                ret += (cur>prev) ? 1 : 0;
    29e0:	428d      	cmp	r5, r1
    29e2:	bfc8      	it	gt
    29e4:	f10b 0b01 	addgt.w	fp, fp, #1
    29e8:	fa0f f28b 	sxth.w	r2, fp
    29ec:	45bc      	cmp	ip, r7
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            cur=C[i*N+j];
            tmp+=cur;
            if (tmp>clipval) {
                ret+=10;
    29ee:	b219      	sxth	r1, r3
    29f0:	f106 0610 	add.w	r6, r6, #16
    29f4:	bfca      	itet	gt
    29f6:	4608      	movgt	r0, r1
    29f8:	4610      	movle	r0, r2
    29fa:	f04f 0c00 	movgt.w	ip, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    29fe:	4546      	cmp	r6, r8
    2a00:	d1b2      	bne.n	2968 <matrix_test+0xc58>
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    MATRES tmp=0,prev=0,cur=0;
    ee_s16 ret=0;
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    2a02:	f10e 0e01 	add.w	lr, lr, #1
    2a06:	45f2      	cmp	sl, lr
    2a08:	f47f af51 	bne.w	28ae <matrix_test+0xb9e>
    crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_matrix");
#endif
    matrix_mul_matrix_bitextract(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2a0c:	9907      	ldr	r1, [sp, #28]
    2a0e:	f001 f8dd 	bl	3bcc <crc16>
    2a12:	9008      	str	r0, [sp, #32]
    2a14:	9802      	ldr	r0, [sp, #8]
    2a16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    2a18:	9405      	str	r4, [sp, #20]
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

    matrix_add_const(N,A,-val); /* return matrix to initial value */
    2a1a:	f04f 0e00 	mov.w	lr, #0
    2a1e:	1e47      	subs	r7, r0, #1
    2a20:	46b1      	mov	r9, r6
    2a22:	9707      	str	r7, [sp, #28]
    2a24:	f8cd e004 	str.w	lr, [sp, #4]
    2a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2a2a:	4634      	mov	r4, r6
    2a2c:	e0f2      	b.n	2c14 <matrix_test+0xf04>
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            A[i*N+j] += val;
    2a2e:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

    matrix_add_const(N,A,-val); /* return matrix to initial value */
    2a32:	4603      	mov	r3, r0
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            A[i*N+j] += val;
    2a34:	1a8e      	subs	r6, r1, r2
    2a36:	2b01      	cmp	r3, #1
    2a38:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
    2a3c:	f000 8102 	beq.w	2c44 <matrix_test+0xf34>
    2a40:	f8b9 7002 	ldrh.w	r7, [r9, #2]
    2a44:	2b02      	cmp	r3, #2
    2a46:	eba7 0502 	sub.w	r5, r7, r2
    2a4a:	f8a9 5002 	strh.w	r5, [r9, #2]
    2a4e:	f000 80f9 	beq.w	2c44 <matrix_test+0xf34>
    2a52:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    2a56:	2b04      	cmp	r3, #4
    2a58:	eba1 0602 	sub.w	r6, r1, r2
    2a5c:	f8a9 6004 	strh.w	r6, [r9, #4]
    2a60:	f040 80f2 	bne.w	2c48 <matrix_test+0xf38>
    2a64:	f8b9 7006 	ldrh.w	r7, [r9, #6]
    2a68:	1abd      	subs	r5, r7, r2
    2a6a:	f8a9 5006 	strh.w	r5, [r9, #6]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2a6e:	4619      	mov	r1, r3
    2a70:	4298      	cmp	r0, r3
    2a72:	f000 80c7 	beq.w	2c04 <matrix_test+0xef4>
    2a76:	1ac6      	subs	r6, r0, r3
    2a78:	1f37      	subs	r7, r6, #4
    2a7a:	08bd      	lsrs	r5, r7, #2
    2a7c:	9604      	str	r6, [sp, #16]
    2a7e:	1c6e      	adds	r6, r5, #1
    2a80:	4637      	mov	r7, r6
    2a82:	9e07      	ldr	r6, [sp, #28]
    2a84:	9702      	str	r7, [sp, #8]
    2a86:	1af6      	subs	r6, r6, r3
    2a88:	00bf      	lsls	r7, r7, #2
    2a8a:	2e02      	cmp	r6, #2
    2a8c:	9703      	str	r7, [sp, #12]
    2a8e:	f240 809e 	bls.w	2bce <matrix_test+0xebe>
    2a92:	4473      	add	r3, lr
    2a94:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    2a98:	f854 7013 	ldr.w	r7, [r4, r3, lsl #1]
    2a9c:	9306      	str	r3, [sp, #24]
            A[i*N+j] += val;
    2a9e:	6873      	ldr	r3, [r6, #4]
    2aa0:	ebc2 0807 	rsb	r8, r2, r7
    2aa4:	f04f 0c00 	mov.w	ip, #0
    2aa8:	ebc2 0a03 	rsb	sl, r2, r3
    2aac:	fa1f fb88 	uxth.w	fp, r8
    2ab0:	fa1f fa8a 	uxth.w	sl, sl
    2ab4:	46e0      	mov	r8, ip
    2ab6:	f36a 080f 	bfi	r8, sl, #0, #16
    2aba:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
    2abe:	ebc2 4717 	rsb	r7, r2, r7, lsr #16
    2ac2:	b2bf      	uxth	r7, r7
    2ac4:	f36b 0c0f 	bfi	ip, fp, #0, #16
    2ac8:	f363 481f 	bfi	r8, r3, #16, #16
    2acc:	9b02      	ldr	r3, [sp, #8]
    2ace:	f367 4c1f 	bfi	ip, r7, #16, #16
    2ad2:	f04f 0a01 	mov.w	sl, #1
    2ad6:	9f06      	ldr	r7, [sp, #24]
    2ad8:	4553      	cmp	r3, sl
    2ada:	f844 c017 	str.w	ip, [r4, r7, lsl #1]
    2ade:	f005 0501 	and.w	r5, r5, #1
    2ae2:	f106 0b08 	add.w	fp, r6, #8
    2ae6:	f8c6 8004 	str.w	r8, [r6, #4]
    2aea:	d96b      	bls.n	2bc4 <matrix_test+0xeb4>
    2aec:	b315      	cbz	r5, 2b34 <matrix_test+0xe24>
    2aee:	e89b 1008 	ldmia.w	fp, {r3, ip}
    2af2:	1a9e      	subs	r6, r3, r2
    2af4:	fa1f f886 	uxth.w	r8, r6
    2af8:	2500      	movs	r5, #0
    2afa:	ebc2 060c 	rsb	r6, r2, ip
    2afe:	ebc2 4a13 	rsb	sl, r2, r3, lsr #16
    2b02:	462f      	mov	r7, r5
    2b04:	f368 050f 	bfi	r5, r8, #0, #16
    2b08:	fa1f f886 	uxth.w	r8, r6
    2b0c:	fa1f f38a 	uxth.w	r3, sl
    2b10:	f368 070f 	bfi	r7, r8, #0, #16
    2b14:	ebc2 4c1c 	rsb	ip, r2, ip, lsr #16
    2b18:	f363 451f 	bfi	r5, r3, #16, #16
    2b1c:	f36c 471f 	bfi	r7, ip, #16, #16
    2b20:	e88b 00a0 	stmia.w	fp, {r5, r7}
    2b24:	9d02      	ldr	r5, [sp, #8]
    2b26:	f04f 0a02 	mov.w	sl, #2
    2b2a:	4555      	cmp	r5, sl
    2b2c:	465e      	mov	r6, fp
    2b2e:	f10b 0b08 	add.w	fp, fp, #8
    2b32:	d947      	bls.n	2bc4 <matrix_test+0xeb4>
    2b34:	f8cd 9018 	str.w	r9, [sp, #24]
    2b38:	68b3      	ldr	r3, [r6, #8]
    2b3a:	f106 0708 	add.w	r7, r6, #8
    2b3e:	68f6      	ldr	r6, [r6, #12]
    2b40:	2500      	movs	r5, #0
    2b42:	ebc2 0906 	rsb	r9, r2, r6
    2b46:	ebc2 0803 	rsb	r8, r2, r3
    2b4a:	fa1f f989 	uxth.w	r9, r9
    2b4e:	46ac      	mov	ip, r5
    2b50:	fa1f f888 	uxth.w	r8, r8
    2b54:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
    2b58:	ebc2 4616 	rsb	r6, r2, r6, lsr #16
    2b5c:	f369 0c0f 	bfi	ip, r9, #0, #16
    2b60:	f368 050f 	bfi	r5, r8, #0, #16
    2b64:	fa1f f983 	uxth.w	r9, r3
    2b68:	f366 4c1f 	bfi	ip, r6, #16, #16
    2b6c:	f369 451f 	bfi	r5, r9, #16, #16
    2b70:	e88b 1020 	stmia.w	fp, {r5, ip}
    2b74:	f107 0608 	add.w	r6, r7, #8
    2b78:	68bf      	ldr	r7, [r7, #8]
    2b7a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2b7e:	1abb      	subs	r3, r7, r2
    2b80:	2500      	movs	r5, #0
    2b82:	fa1f f883 	uxth.w	r8, r3
    2b86:	ebc2 4317 	rsb	r3, r2, r7, lsr #16
    2b8a:	b29b      	uxth	r3, r3
    2b8c:	462f      	mov	r7, r5
    2b8e:	f368 050f 	bfi	r5, r8, #0, #16
    2b92:	ebc2 0c09 	rsb	ip, r2, r9
    2b96:	f363 451f 	bfi	r5, r3, #16, #16
    2b9a:	f8cb 5008 	str.w	r5, [fp, #8]
    2b9e:	fa1f fc8c 	uxth.w	ip, ip
    2ba2:	9d02      	ldr	r5, [sp, #8]
    2ba4:	f36c 070f 	bfi	r7, ip, #0, #16
    2ba8:	ebc2 4919 	rsb	r9, r2, r9, lsr #16
    2bac:	f10a 0a02 	add.w	sl, sl, #2
    2bb0:	f369 471f 	bfi	r7, r9, #16, #16
    2bb4:	4555      	cmp	r5, sl
    2bb6:	f8cb 700c 	str.w	r7, [fp, #12]
    2bba:	f10b 0b10 	add.w	fp, fp, #16
    2bbe:	d8bb      	bhi.n	2b38 <matrix_test+0xe28>
    2bc0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    2bc4:	9e03      	ldr	r6, [sp, #12]
    2bc6:	9f04      	ldr	r7, [sp, #16]
    2bc8:	42be      	cmp	r6, r7
    2bca:	4431      	add	r1, r6
    2bcc:	d01a      	beq.n	2c04 <matrix_test+0xef4>
    2bce:	eb0e 0b01 	add.w	fp, lr, r1
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2bd2:	1c4b      	adds	r3, r1, #1
            A[i*N+j] += val;
    2bd4:	f834 501b 	ldrh.w	r5, [r4, fp, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2bd8:	4298      	cmp	r0, r3
            A[i*N+j] += val;
    2bda:	eba5 0602 	sub.w	r6, r5, r2
    2bde:	f824 601b 	strh.w	r6, [r4, fp, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2be2:	d90f      	bls.n	2c04 <matrix_test+0xef4>
            A[i*N+j] += val;
    2be4:	4473      	add	r3, lr
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2be6:	3102      	adds	r1, #2
            A[i*N+j] += val;
    2be8:	f834 7013 	ldrh.w	r7, [r4, r3, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2bec:	4288      	cmp	r0, r1
            A[i*N+j] += val;
    2bee:	eba7 0502 	sub.w	r5, r7, r2
    2bf2:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2bf6:	d905      	bls.n	2c04 <matrix_test+0xef4>
            A[i*N+j] += val;
    2bf8:	4471      	add	r1, lr
    2bfa:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
    2bfe:	1a9e      	subs	r6, r3, r2
    2c00:	f824 6011 	strh.w	r6, [r4, r1, lsl #1]
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    2c04:	9f01      	ldr	r7, [sp, #4]
    2c06:	9905      	ldr	r1, [sp, #20]
    2c08:	3701      	adds	r7, #1
    2c0a:	42b8      	cmp	r0, r7
    2c0c:	9701      	str	r7, [sp, #4]
    2c0e:	4489      	add	r9, r1
    2c10:	4486      	add	lr, r0
    2c12:	d02c      	beq.n	2c6e <matrix_test+0xf5e>
    2c14:	ea4f 0559 	mov.w	r5, r9, lsr #1
    2c18:	426b      	negs	r3, r5
    2c1a:	f003 0303 	and.w	r3, r3, #3
    2c1e:	4283      	cmp	r3, r0
    2c20:	bf28      	it	cs
    2c22:	4603      	movcs	r3, r0
    2c24:	2804      	cmp	r0, #4
    2c26:	f67f af02 	bls.w	2a2e <matrix_test+0xd1e>
        for (j=0; j<N; j++) {
    2c2a:	4619      	mov	r1, r3
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	f43f af22 	beq.w	2a76 <matrix_test+0xd66>
            A[i*N+j] += val;
    2c32:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    2c36:	2b01      	cmp	r3, #1
    2c38:	eba1 0602 	sub.w	r6, r1, r2
    2c3c:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
    2c40:	f47f aefe 	bne.w	2a40 <matrix_test+0xd30>
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2c44:	4619      	mov	r1, r3
    2c46:	e713      	b.n	2a70 <matrix_test+0xd60>
    2c48:	2103      	movs	r1, #3
    2c4a:	e711      	b.n	2a70 <matrix_test+0xd60>
    matrix_add_const(N,A,val); /* make sure data changes  */
#if CORE_DEBUG
    printmat(A,N,"matrix_add_const");
#endif
    matrix_mul_const(N,C,A,val);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2c4c:	4601      	mov	r1, r0
    2c4e:	4605      	mov	r5, r0
    2c50:	f000 ffbc 	bl	3bcc <crc16>
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_const");
#endif
    matrix_mul_vect(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2c54:	4601      	mov	r1, r0
    2c56:	4628      	mov	r0, r5
    2c58:	f000 ffb8 	bl	3bcc <crc16>
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_vect");
#endif
    matrix_mul_matrix(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2c5c:	4601      	mov	r1, r0
    2c5e:	4628      	mov	r0, r5
    2c60:	f000 ffb4 	bl	3bcc <crc16>
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_matrix");
#endif
    matrix_mul_matrix_bitextract(N,C,A,B);
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2c64:	4601      	mov	r1, r0
    2c66:	4628      	mov	r0, r5
    2c68:	f000 ffb0 	bl	3bcc <crc16>
    2c6c:	9008      	str	r0, [sp, #32]
#if CORE_DEBUG
    printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

    matrix_add_const(N,A,-val); /* return matrix to initial value */
    return crc;
    2c6e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
}
    2c72:	b011      	add	sp, #68	; 0x44
    2c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002c78 <core_bench_matrix>:
    Benchmark function

    Iterate <matrix_test> N times,
    changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    2c78:	b530      	push	{r4, r5, lr}
    2c7a:	4614      	mov	r4, r2
    MATRES *C=p->C;
    MATDAT *A=p->A;
    MATDAT *B=p->B;
    MATDAT val=(MATDAT)seed;

    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2c7c:	c82d      	ldmia	r0, {r0, r2, r3, r5}
    Benchmark function

    Iterate <matrix_test> N times,
    changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    2c7e:	b083      	sub	sp, #12
    MATRES *C=p->C;
    MATDAT *A=p->A;
    MATDAT *B=p->B;
    MATDAT val=(MATDAT)seed;

    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2c80:	9100      	str	r1, [sp, #0]
    2c82:	4629      	mov	r1, r5
    2c84:	f7ff f844 	bl	1d10 <matrix_test>
    2c88:	4621      	mov	r1, r4

    return crc;
}
    2c8a:	b003      	add	sp, #12
    2c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MATRES *C=p->C;
    MATDAT *A=p->A;
    MATDAT *B=p->B;
    MATDAT val=(MATDAT)seed;

    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2c90:	f000 bf9c 	b.w	3bcc <crc16>

00002c94 <core_init_matrix>:
    Matrix dimensions.

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
    2c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c98:	b085      	sub	sp, #20
    2c9a:	9303      	str	r3, [sp, #12]
    MATDAT *B;
    ee_s32 order=1;
    MATDAT val;
    ee_u32 i=0,j=0;
    if (seed==0)
        seed=1;
    2c9c:	2a00      	cmp	r2, #0
    2c9e:	bf14      	ite	ne
    2ca0:	4613      	movne	r3, r2
    2ca2:	2301      	moveq	r3, #1
    while (j<blksize) {
    2ca4:	2800      	cmp	r0, #0
    2ca6:	f000 814b 	beq.w	2f40 <core_init_matrix+0x2ac>
    2caa:	4682      	mov	sl, r0
    2cac:	2000      	movs	r0, #0
    2cae:	e000      	b.n	2cb2 <core_init_matrix+0x1e>
        i++;
    2cb0:	4630      	mov	r0, r6
    2cb2:	1c46      	adds	r6, r0, #1
        j=i*i*2*4;
    2cb4:	fb06 f706 	mul.w	r7, r6, r6
    ee_s32 order=1;
    MATDAT val;
    ee_u32 i=0,j=0;
    if (seed==0)
        seed=1;
    while (j<blksize) {
    2cb8:	ebba 0fc7 	cmp.w	sl, r7, lsl #3
    2cbc:	d8f8      	bhi.n	2cb0 <core_init_matrix+0x1c>
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    2cbe:	1e4d      	subs	r5, r1, #1
    2cc0:	f025 0803 	bic.w	r8, r5, #3
    B=A+N*N;
    2cc4:	fb00 f200 	mul.w	r2, r0, r0
    2cc8:	0051      	lsls	r1, r2, #1
    while (j<blksize) {
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    2cca:	f108 0a04 	add.w	sl, r8, #4
    B=A+N*N;
    2cce:	eb0a 0401 	add.w	r4, sl, r1
    2cd2:	9101      	str	r1, [sp, #4]
    2cd4:	9400      	str	r4, [sp, #0]
    2cd6:	9002      	str	r0, [sp, #8]

    for (i=0; i<N; i++) {
    2cd8:	2800      	cmp	r0, #0
    2cda:	f000 813f 	beq.w	2f5c <core_init_matrix+0x2c8>
        seed=1;
    while (j<blksize) {
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    2cde:	f04f 0900 	mov.w	r9, #0
    2ce2:	f04f 0801 	mov.w	r8, #1
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2ce6:	fb03 f308 	mul.w	r3, r3, r8
    2cea:	f023 47ff 	bic.w	r7, r3, #2139095040	; 0x7f800000
    2cee:	f427 01fe 	bic.w	r1, r7, #8323072	; 0x7f0000
    2cf2:	fb00 f509 	mul.w	r5, r0, r9
    2cf6:	9c00      	ldr	r4, [sp, #0]
    2cf8:	006d      	lsls	r5, r5, #1
    2cfa:	1e42      	subs	r2, r0, #1
    2cfc:	2900      	cmp	r1, #0
    2cfe:	eb04 0605 	add.w	r6, r4, r5
    2d02:	f002 0703 	and.w	r7, r2, #3
    2d06:	4455      	add	r5, sl
    2d08:	f2c0 80fd 	blt.w	2f06 <core_init_matrix+0x272>
            val = (seed + order);
    2d0c:	fa1f f388 	uxth.w	r3, r8
    2d10:	185a      	adds	r2, r3, r1
    2d12:	fa1f fe82 	uxth.w	lr, r2
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2d16:	4473      	add	r3, lr
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2d18:	2401      	movs	r4, #1
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2d1a:	4632      	mov	r2, r6
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d1c:	46ab      	mov	fp, r5
    2d1e:	fa5f fc83 	uxtb.w	ip, r3
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2d22:	4284      	cmp	r4, r0
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2d24:	f822 eb02 	strh.w	lr, [r2], #2
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2d28:	44a0      	add	r8, r4
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d2a:	f82b cb02 	strh.w	ip, [fp], #2
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2d2e:	460b      	mov	r3, r1
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2d30:	f080 80bc 	bcs.w	2eac <core_init_matrix+0x218>
    2d34:	2f00      	cmp	r7, #0
    2d36:	f000 809f 	beq.w	2e78 <core_init_matrix+0x1e4>
    2d3a:	42a7      	cmp	r7, r4
    2d3c:	d031      	beq.n	2da2 <core_init_matrix+0x10e>
    2d3e:	2f02      	cmp	r7, #2
    2d40:	d018      	beq.n	2d74 <core_init_matrix+0xe0>
            seed = ( ( order * seed ) % 65536 );
    2d42:	fb01 f708 	mul.w	r7, r1, r8
    2d46:	f027 41ff 	bic.w	r1, r7, #2139095040	; 0x7f800000
    2d4a:	f421 03fe 	bic.w	r3, r1, #8323072	; 0x7f0000
    2d4e:	2b00      	cmp	r3, #0
    2d50:	f2c0 80e1 	blt.w	2f16 <core_init_matrix+0x282>
            val = (seed + order);
    2d54:	fa1f f188 	uxth.w	r1, r8
    2d58:	18cf      	adds	r7, r1, r3
    2d5a:	fa1f fc87 	uxth.w	ip, r7
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2d5e:	4461      	add	r1, ip
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d60:	b2c9      	uxtb	r1, r1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2d62:	f8a6 c002 	strh.w	ip, [r6, #2]
    2d66:	3202      	adds	r2, #2
    2d68:	f10b 0b02 	add.w	fp, fp, #2
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2d6c:	3401      	adds	r4, #1
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2d6e:	f108 0801 	add.w	r8, r8, #1
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d72:	8069      	strh	r1, [r5, #2]
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2d74:	fb03 f508 	mul.w	r5, r3, r8
    2d78:	f025 46ff 	bic.w	r6, r5, #2139095040	; 0x7f800000
    2d7c:	f426 03fe 	bic.w	r3, r6, #8323072	; 0x7f0000
    2d80:	2b00      	cmp	r3, #0
    2d82:	f2c0 80d6 	blt.w	2f32 <core_init_matrix+0x29e>
            val = (seed + order);
    2d86:	fa1f f188 	uxth.w	r1, r8
    2d8a:	18cd      	adds	r5, r1, r3
    2d8c:	fa1f fc85 	uxth.w	ip, r5
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2d90:	4461      	add	r1, ip
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d92:	b2ce      	uxtb	r6, r1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2d94:	f822 cb02 	strh.w	ip, [r2], #2
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2d98:	f82b 6b02 	strh.w	r6, [fp], #2
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2d9c:	3401      	adds	r4, #1
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2d9e:	f108 0801 	add.w	r8, r8, #1
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2da2:	fb03 f308 	mul.w	r3, r3, r8
    2da6:	f023 47ff 	bic.w	r7, r3, #2139095040	; 0x7f800000
    2daa:	f427 03fe 	bic.w	r3, r7, #8323072	; 0x7f0000
    2dae:	2b00      	cmp	r3, #0
    2db0:	f2c0 80b8 	blt.w	2f24 <core_init_matrix+0x290>
            val = (seed + order);
    2db4:	fa1f f688 	uxth.w	r6, r8
    2db8:	18f7      	adds	r7, r6, r3
    2dba:	fa1f fc87 	uxth.w	ip, r7
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2dbe:	4466      	add	r6, ip
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2dc0:	3401      	adds	r4, #1
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2dc2:	b2f1      	uxtb	r1, r6
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2dc4:	4284      	cmp	r4, r0
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2dc6:	f822 cb02 	strh.w	ip, [r2], #2
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2dca:	f108 0801 	add.w	r8, r8, #1
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2dce:	f82b 1b02 	strh.w	r1, [fp], #2
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2dd2:	d351      	bcc.n	2e78 <core_init_matrix+0x1e4>
    2dd4:	e06a      	b.n	2eac <core_init_matrix+0x218>
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
    2dd6:	eb05 070b 	add.w	r7, r5, fp
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2dda:	fb0b f20e 	mul.w	r2, fp, lr
            val = (seed + order);
    2dde:	fa1f fc87 	uxth.w	ip, r7
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2de2:	f022 43ff 	bic.w	r3, r2, #2139095040	; 0x7f800000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2de6:	4465      	add	r5, ip
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2de8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2dec:	b2ed      	uxtb	r5, r5
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2dee:	2a00      	cmp	r2, #0
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2df0:	f826 cb02 	strh.w	ip, [r6], #2
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2df4:	f821 5b02 	strh.w	r5, [r1], #2
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2df8:	db7e      	blt.n	2ef8 <core_init_matrix+0x264>
            val = (seed + order);
    2dfa:	fa1f fb8e 	uxth.w	fp, lr
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2dfe:	f10e 0301 	add.w	r3, lr, #1
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
    2e02:	eb0b 0802 	add.w	r8, fp, r2
    2e06:	b29f      	uxth	r7, r3
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e08:	fb02 f303 	mul.w	r3, r2, r3
            val = (seed + order);
    2e0c:	fa1f f888 	uxth.w	r8, r8
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e10:	f023 42ff 	bic.w	r2, r3, #2139095040	; 0x7f800000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2e14:	44c3      	add	fp, r8
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e16:	f422 03fe 	bic.w	r3, r2, #8323072	; 0x7f0000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e1a:	fa5f fb8b 	uxtb.w	fp, fp
            order++;
    2e1e:	f10e 0c02 	add.w	ip, lr, #2
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e22:	2b00      	cmp	r3, #0
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2e24:	f8a6 8000 	strh.w	r8, [r6]
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
    2e28:	fa1f f58c 	uxth.w	r5, ip
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e2c:	f8a1 b000 	strh.w	fp, [r1]
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2e30:	f104 0403 	add.w	r4, r4, #3
    2e34:	f106 0206 	add.w	r2, r6, #6
    2e38:	f101 0b06 	add.w	fp, r1, #6
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2e3c:	f10e 0803 	add.w	r8, lr, #3
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e40:	db52      	blt.n	2ee8 <core_init_matrix+0x254>
            val = (seed + order);
    2e42:	eb07 0e03 	add.w	lr, r7, r3
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e46:	fb03 fc0c 	mul.w	ip, r3, ip
            val = (seed + order);
    2e4a:	fa1f fe8e 	uxth.w	lr, lr
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e4e:	f02c 43ff 	bic.w	r3, ip, #2139095040	; 0x7f800000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2e52:	4477      	add	r7, lr
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e54:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e58:	b2ff      	uxtb	r7, r7
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e5a:	2b00      	cmp	r3, #0
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2e5c:	f8a6 e002 	strh.w	lr, [r6, #2]
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e60:	804f      	strh	r7, [r1, #2]
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e62:	db39      	blt.n	2ed8 <core_init_matrix+0x244>
            val = (seed + order);
    2e64:	18ef      	adds	r7, r5, r3
    2e66:	fa1f fc87 	uxth.w	ip, r7
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
    2e6a:	4465      	add	r5, ip
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e6c:	b2ed      	uxtb	r5, r5
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2e6e:	4284      	cmp	r4, r0
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2e70:	f8a6 c004 	strh.w	ip, [r6, #4]
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e74:	808d      	strh	r5, [r1, #4]
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2e76:	d219      	bcs.n	2eac <core_init_matrix+0x218>
            seed = ( ( order * seed ) % 65536 );
    2e78:	fb03 f308 	mul.w	r3, r3, r8
    2e7c:	f023 47ff 	bic.w	r7, r3, #2139095040	; 0x7f800000
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
    2e80:	4659      	mov	r1, fp
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2e82:	f427 0bfe 	bic.w	fp, r7, #8323072	; 0x7f0000
    2e86:	f1bb 0f00 	cmp.w	fp, #0
            val = (seed + order);
    2e8a:	fa1f f588 	uxth.w	r5, r8
            val=matrix_clip(val,0);
            B[i*N+j] = val;
            val =  (val + order);
            val=matrix_clip(val,1);
            A[i*N+j] = val;
            order++;
    2e8e:	f108 0e01 	add.w	lr, r8, #1
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
            val = (seed + order);
            val=matrix_clip(val,0);
            B[i*N+j] = val;
    2e92:	4616      	mov	r6, r2
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
    2e94:	f104 0401 	add.w	r4, r4, #1
            seed = ( ( order * seed ) % 65536 );
    2e98:	da9d      	bge.n	2dd6 <core_init_matrix+0x142>
    2e9a:	f10b 32ff 	add.w	r2, fp, #4294967295
    2e9e:	ea6f 4302 	mvn.w	r3, r2, lsl #16
    2ea2:	ea6f 4813 	mvn.w	r8, r3, lsr #16
    2ea6:	f108 0b01 	add.w	fp, r8, #1
    2eaa:	e794      	b.n	2dd6 <core_init_matrix+0x142>
    }
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
    2eac:	f109 0901 	add.w	r9, r9, #1
    2eb0:	4581      	cmp	r9, r0
    2eb2:	f4ff af18 	bcc.w	2ce6 <core_init_matrix+0x52>
    2eb6:	9e00      	ldr	r6, [sp, #0]
        }
    }

    p->A=A;
    p->B=B;
    p->C=(MATRES *)align_mem(B+N*N);
    2eb8:	9c01      	ldr	r4, [sp, #4]
    2eba:	9f03      	ldr	r7, [sp, #12]
    p->N=N;
    2ebc:	9d02      	ldr	r5, [sp, #8]
            A[i*N+j] = val;
            order++;
        }
    }

    p->A=A;
    2ebe:	f8c7 a004 	str.w	sl, [r7, #4]
    p->B=B;
    p->C=(MATRES *)align_mem(B+N*N);
    2ec2:	4434      	add	r4, r6
    2ec4:	1e62      	subs	r2, r4, #1
    2ec6:	f022 0303 	bic.w	r3, r2, #3
    2eca:	3304      	adds	r3, #4
    2ecc:	60fb      	str	r3, [r7, #12]
            order++;
        }
    }

    p->A=A;
    p->B=B;
    2ece:	60be      	str	r6, [r7, #8]
    p->C=(MATRES *)align_mem(B+N*N);
    p->N=N;
    2ed0:	603d      	str	r5, [r7, #0]
#if CORE_DEBUG
    printmat(A,N,"A");
    printmat(B,N,"B");
#endif
    return N;
}
    2ed2:	b005      	add	sp, #20
    2ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;

    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            seed = ( ( order * seed ) % 65536 );
    2ed8:	f103 3cff 	add.w	ip, r3, #4294967295
    2edc:	ea6f 430c 	mvn.w	r3, ip, lsl #16
    2ee0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2ee4:	3301      	adds	r3, #1
    2ee6:	e7bd      	b.n	2e64 <core_init_matrix+0x1d0>
    2ee8:	f103 3eff 	add.w	lr, r3, #4294967295
    2eec:	ea6f 430e 	mvn.w	r3, lr, lsl #16
    2ef0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2ef4:	3301      	adds	r3, #1
    2ef6:	e7a4      	b.n	2e42 <core_init_matrix+0x1ae>
    2ef8:	1e57      	subs	r7, r2, #1
    2efa:	ea6f 4807 	mvn.w	r8, r7, lsl #16
    2efe:	ea6f 4218 	mvn.w	r2, r8, lsr #16
    2f02:	3201      	adds	r2, #1
    2f04:	e779      	b.n	2dfa <core_init_matrix+0x166>
    2f06:	f101 3bff 	add.w	fp, r1, #4294967295
    2f0a:	ea6f 4c0b 	mvn.w	ip, fp, lsl #16
    2f0e:	ea6f 411c 	mvn.w	r1, ip, lsr #16
    2f12:	3101      	adds	r1, #1
    2f14:	e6fa      	b.n	2d0c <core_init_matrix+0x78>
    2f16:	3b01      	subs	r3, #1
    2f18:	ea6f 4703 	mvn.w	r7, r3, lsl #16
    2f1c:	ea6f 4317 	mvn.w	r3, r7, lsr #16
    2f20:	4423      	add	r3, r4
    2f22:	e717      	b.n	2d54 <core_init_matrix+0xc0>
    2f24:	1e59      	subs	r1, r3, #1
    2f26:	ea6f 4501 	mvn.w	r5, r1, lsl #16
    2f2a:	ea6f 4315 	mvn.w	r3, r5, lsr #16
    2f2e:	3301      	adds	r3, #1
    2f30:	e740      	b.n	2db4 <core_init_matrix+0x120>
    2f32:	3b01      	subs	r3, #1
    2f34:	ea6f 4703 	mvn.w	r7, r3, lsl #16
    2f38:	ea6f 4317 	mvn.w	r3, r7, lsr #16
    2f3c:	3301      	adds	r3, #1
    2f3e:	e722      	b.n	2d86 <core_init_matrix+0xf2>
    while (j<blksize) {
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    2f40:	1e4a      	subs	r2, r1, #1
    2f42:	f022 0003 	bic.w	r0, r2, #3
    B=A+N*N;
    2f46:	f04f 31ff 	mov.w	r1, #4294967295
    while (j<blksize) {
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    A=(MATDAT *)align_mem(memblk);
    2f4a:	f100 0a04 	add.w	sl, r0, #4
    B=A+N*N;
    2f4e:	2402      	movs	r4, #2
    2f50:	3006      	adds	r0, #6
    2f52:	9000      	str	r0, [sp, #0]
    2f54:	9102      	str	r1, [sp, #8]
        seed=1;
    while (j<blksize) {
        i++;
        j=i*i*2*4;
    }
    N=i-1;
    2f56:	4608      	mov	r0, r1
    A=(MATDAT *)align_mem(memblk);
    B=A+N*N;
    2f58:	9401      	str	r4, [sp, #4]
    2f5a:	e6c0      	b.n	2cde <core_init_matrix+0x4a>
    2f5c:	4626      	mov	r6, r4
    2f5e:	e7ab      	b.n	2eb8 <core_init_matrix+0x224>

00002f60 <start_time>:
    This function will be called right before starting the timed portion of the benchmark.

    Implementation may be capturing a system timer (as implemented in the example code)
    or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
    2f60:	b508      	push	{r3, lr}
    am_hal_systick_load(0x00FFFFFF);
    2f62:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2f66:	f002 fc15 	bl	5794 <am_hal_systick_load>
    am_hal_systick_int_enable();
    2f6a:	f002 fc0b 	bl	5784 <am_hal_systick_int_enable>
    am_hal_systick_start();
    2f6e:	f002 fbf9 	bl	5764 <am_hal_systick_start>
    start_time_val = GETMYTIME;
    2f72:	f002 fc15 	bl	57a0 <am_hal_systick_count>
    2f76:	4b04      	ldr	r3, [pc, #16]	; (2f88 <start_time+0x28>)
    2f78:	4904      	ldr	r1, [pc, #16]	; (2f8c <start_time+0x2c>)
    2f7a:	681b      	ldr	r3, [r3, #0]
    START_PA_DUMP = 0x1;
    2f7c:	4a04      	ldr	r2, [pc, #16]	; (2f90 <start_time+0x30>)
*/
void start_time(void) {
    am_hal_systick_load(0x00FFFFFF);
    am_hal_systick_int_enable();
    am_hal_systick_start();
    start_time_val = GETMYTIME;
    2f7e:	4418      	add	r0, r3
    START_PA_DUMP = 0x1;
    2f80:	2301      	movs	r3, #1
*/
void start_time(void) {
    am_hal_systick_load(0x00FFFFFF);
    am_hal_systick_int_enable();
    am_hal_systick_start();
    start_time_val = GETMYTIME;
    2f82:	6008      	str	r0, [r1, #0]
    START_PA_DUMP = 0x1;
    2f84:	6013      	str	r3, [r2, #0]
    2f86:	bd08      	pop	{r3, pc}
    2f88:	10001098 	.word	0x10001098
    2f8c:	100010ac 	.word	0x100010ac
    2f90:	4ffff014 	.word	0x4ffff014

00002f94 <stop_time>:
    This function will be called right after ending the timed portion of the benchmark.

    Implementation may be capturing a system timer (as implemented in the example code)
    or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
    2f94:	b508      	push	{r3, lr}
    am_hal_systick_stop();
    2f96:	f002 fbed 	bl	5774 <am_hal_systick_stop>
    stop_time_val = GETMYTIME;
    2f9a:	f002 fc01 	bl	57a0 <am_hal_systick_count>
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <stop_time+0x1c>)
    2fa0:	4904      	ldr	r1, [pc, #16]	; (2fb4 <stop_time+0x20>)
    2fa2:	681b      	ldr	r3, [r3, #0]
    START_PA_DUMP = 0x0;
    2fa4:	4a04      	ldr	r2, [pc, #16]	; (2fb8 <stop_time+0x24>)
    Implementation may be capturing a system timer (as implemented in the example code)
    or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
    am_hal_systick_stop();
    stop_time_val = GETMYTIME;
    2fa6:	4418      	add	r0, r3
    START_PA_DUMP = 0x0;
    2fa8:	2300      	movs	r3, #0
    Implementation may be capturing a system timer (as implemented in the example code)
    or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
    am_hal_systick_stop();
    stop_time_val = GETMYTIME;
    2faa:	6008      	str	r0, [r1, #0]
    START_PA_DUMP = 0x0;
    2fac:	6013      	str	r3, [r2, #0]
    2fae:	bd08      	pop	{r3, pc}
    2fb0:	10001098 	.word	0x10001098
    2fb4:	100010a8 	.word	0x100010a8
    2fb8:	4ffff014 	.word	0x4ffff014

00002fbc <get_time>:
    This methodology is taken to accomodate any hardware or simulated platform.
    The sample implementation returns millisecs by default,
    and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
    CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2fbc:	4a02      	ldr	r2, [pc, #8]	; (2fc8 <get_time+0xc>)
    2fbe:	4b03      	ldr	r3, [pc, #12]	; (2fcc <get_time+0x10>)
    return elapsed;
    2fc0:	6810      	ldr	r0, [r2, #0]
    2fc2:	6819      	ldr	r1, [r3, #0]
}
    2fc4:	1a40      	subs	r0, r0, r1
    2fc6:	4770      	bx	lr
    2fc8:	100010a8 	.word	0x100010a8
    2fcc:	100010ac 	.word	0x100010ac

00002fd0 <time_in_secs>:
    Convert the value returned by get_time to seconds.

    The <secs_ret> type is used to accomodate systems with no support for floating point.
    Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
    2fd0:	b508      	push	{r3, lr}
    secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    return retval;
    2fd2:	f7fd f9b7 	bl	344 <__aeabi_ui2d>
    2fd6:	a304      	add	r3, pc, #16	; (adr r3, 2fe8 <time_in_secs+0x18>)
    2fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fdc:	f7fd fb52 	bl	684 <__aeabi_ddiv>
}
    2fe0:	bd08      	pop	{r3, pc}
    2fe2:	bf00      	nop
    2fe4:	f3af 8000 	nop.w
    2fe8:	00000000 	.word	0x00000000
    2fec:	4186e360 	.word	0x4186e360

00002ff0 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
    2ff2:	f3ef 8610 	mrs	r6, PRIMASK
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
    2ff6:	b083      	sub	sp, #12
    2ff8:	4604      	mov	r4, r0
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
    2ffa:	9600      	str	r6, [sp, #0]
    2ffc:	b672      	cpsid	i
    2ffe:	4a23      	ldr	r2, [pc, #140]	; (308c <uart_init+0x9c>)
    3000:	4b23      	ldr	r3, [pc, #140]	; (3090 <uart_init+0xa0>)
    3002:	4d24      	ldr	r5, [pc, #144]	; (3094 <uart_init+0xa4>)
    3004:	4924      	ldr	r1, [pc, #144]	; (3098 <uart_init+0xa8>)
    3006:	f04f 0c73 	mov.w	ip, #115	; 0x73
    300a:	f8c2 c000 	str.w	ip, [r2]
    300e:	681f      	ldr	r7, [r3, #0]
    3010:	f027 67e0 	bic.w	r7, r7, #117440512	; 0x7000000
    3014:	601f      	str	r7, [r3, #0]
    3016:	682f      	ldr	r7, [r5, #0]
    3018:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
    301c:	602f      	str	r7, [r5, #0]
    301e:	f8d1 e000 	ldr.w	lr, [r1]
    3022:	2700      	movs	r7, #0
    3024:	f42e 0e7f 	bic.w	lr, lr, #16711680	; 0xff0000
    3028:	f8c1 e000 	str.w	lr, [r1]
    302c:	6017      	str	r7, [r2, #0]
    302e:	f8dd e000 	ldr.w	lr, [sp]
    3032:	f38e 8810 	msr	PRIMASK, lr
    am_bsp_pin_enable(COM_UART_RX);
    3036:	9601      	str	r6, [sp, #4]
    3038:	b672      	cpsid	i
    303a:	f8c2 c000 	str.w	ip, [r2]
    303e:	681e      	ldr	r6, [r3, #0]
    3040:	f026 46e0 	bic.w	r6, r6, #1879048192	; 0x70000000
    3044:	601e      	str	r6, [r3, #0]
    3046:	682b      	ldr	r3, [r5, #0]
    3048:	f023 467f 	bic.w	r6, r3, #4278190080	; 0xff000000
    304c:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
    3050:	602b      	str	r3, [r5, #0]
    3052:	680d      	ldr	r5, [r1, #0]
    3054:	f025 467f 	bic.w	r6, r5, #4278190080	; 0xff000000
    3058:	600e      	str	r6, [r1, #0]
    305a:	6017      	str	r7, [r2, #0]
    305c:	9a01      	ldr	r2, [sp, #4]
    305e:	f382 8810 	msr	PRIMASK, r2

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
    3062:	f002 fc01 	bl	5868 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
    3066:	4620      	mov	r0, r4
    3068:	f002 fc26 	bl	58b8 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
    306c:	4620      	mov	r0, r4
    306e:	f002 fbe7 	bl	5840 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
    3072:	4620      	mov	r0, r4
    3074:	4909      	ldr	r1, [pc, #36]	; (309c <uart_init+0xac>)
    3076:	f002 fb99 	bl	57ac <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
    307a:	4620      	mov	r0, r4
    307c:	2112      	movs	r1, #18
    307e:	f002 fc39 	bl	58f4 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
    3082:	4620      	mov	r0, r4
    3084:	f002 fbc8 	bl	5818 <am_hal_uart_enable>
}
    3088:	b003      	add	sp, #12
    308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    308c:	40010060 	.word	0x40010060
    3090:	40010048 	.word	0x40010048
    3094:	40010014 	.word	0x40010014
    3098:	400100f4 	.word	0x400100f4
    309c:	10001000 	.word	0x10001000

000030a0 <portable_init>:
    Target specific initialization code
    Test for some common mistakes.
*/

void portable_init(core_portable *p, int *argc, char *argv[])
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	4e3c      	ldr	r6, [pc, #240]	; (3194 <portable_init+0xf4>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);

    //
    // Switch the RTC off of the XTAL
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    30a4:	4f3c      	ldr	r7, [pc, #240]	; (3198 <portable_init+0xf8>)
        ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
    }
    if (sizeof(ee_u32) != 4) {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id=1;
    30a6:	2501      	movs	r5, #1
    Target specific initialization code
    Test for some common mistakes.
*/

void portable_init(core_portable *p, int *argc, char *argv[])
{
    30a8:	b083      	sub	sp, #12
    30aa:	2100      	movs	r1, #0
        ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
    }
    if (sizeof(ee_u32) != 4) {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id=1;
    30ac:	7005      	strb	r5, [r0, #0]
    30ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    30b2:	4630      	mov	r0, r6
    30b4:	f002 fc42 	bl	593c <memset>
    for(i = 0; i < PRTBUFSIZE; i++)
    {
        am_prtbuf[i] = 0x00;
    }
    am_pcBuf = am_prtbuf;
    am_bufcnt = 0;
    30b8:	2400      	movs	r4, #0
    30ba:	4b38      	ldr	r3, [pc, #224]	; (319c <portable_init+0xfc>)
    // Initialize our printf buffer.
    for(i = 0; i < PRTBUFSIZE; i++)
    {
        am_prtbuf[i] = 0x00;
    }
    am_pcBuf = am_prtbuf;
    30bc:	4a38      	ldr	r2, [pc, #224]	; (31a0 <portable_init+0x100>)
    am_bufcnt = 0;
    30be:	601c      	str	r4, [r3, #0]
#endif // AM_PRINT_RESULTS

    //
    // Set the system clock to maximum frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    30c0:	4620      	mov	r0, r4
    // Initialize our printf buffer.
    for(i = 0; i < PRTBUFSIZE; i++)
    {
        am_prtbuf[i] = 0x00;
    }
    am_pcBuf = am_prtbuf;
    30c2:	6016      	str	r6, [r2, #0]
#endif // AM_PRINT_RESULTS

    //
    // Set the system clock to maximum frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    30c4:	f002 f8e4 	bl	5290 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
    30c8:	4836      	ldr	r0, [pc, #216]	; (31a4 <portable_init+0x104>)
    30ca:	f002 f84b 	bl	5164 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    30ce:	f002 fb33 	bl	5738 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    30d2:	4628      	mov	r0, r5
    30d4:	f002 fb38 	bl	5748 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    30d8:	f002 f82e 	bl	5138 <am_bsp_low_power_init>

#ifdef AM_PART_APOLLO2
    //
    // Buck enable
    //
    am_hal_mcuctrl_bucks_enable();
    30dc:	f002 faea 	bl	56b4 <am_hal_pwrctrl_bucks_enable>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    30e0:	f002 fb04 	bl	56ec <am_hal_pwrctrl_low_power_init>

    //
    // Enable only the needed flash and SRAM.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
    30e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    30e8:	f002 f9b8 	bl	545c <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);
    30ec:	4628      	mov	r0, r5
    30ee:	f002 f9b5 	bl	545c <am_hal_pwrctrl_memory_enable>

    //
    // Switch the RTC off of the XTAL
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    30f2:	683e      	ldr	r6, [r7, #0]

    //
    // Turn off the voltage comparator
    //
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    30f4:	492c      	ldr	r1, [pc, #176]	; (31a8 <portable_init+0x108>)

#if !AM_PRINT_SKIP_BANNER
    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    30f6:	482d      	ldr	r0, [pc, #180]	; (31ac <portable_init+0x10c>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);

    //
    // Switch the RTC off of the XTAL
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    30f8:	f046 0280 	orr.w	r2, r6, #128	; 0x80

    //
    // Turn off the voltage comparator
    //
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    30fc:	2537      	movs	r5, #55	; 0x37
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);

    //
    // Switch the RTC off of the XTAL
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    30fe:	603a      	str	r2, [r7, #0]

    //
    // Turn off the voltage comparator
    //
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    3100:	600d      	str	r5, [r1, #0]

#if !AM_PRINT_SKIP_BANNER
    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    3102:	f000 ffc3 	bl	408c <am_util_stdio_printf_init>
    am_hal_uart_clock_disable(ui32UartModule);

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
    3106:	f3ef 8710 	mrs	r7, PRIMASK
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);

    //
    // Initialize the UART
    //
    uart_init(ui32UartModule);
    310a:	4620      	mov	r0, r4
    310c:	f7ff ff70 	bl	2ff0 <uart_init>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    3110:	f002 f80c 	bl	512c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro Coremark test...\n\n");
    3114:	4826      	ldr	r0, [pc, #152]	; (31b0 <portable_init+0x110>)
    3116:	f001 ffef 	bl	50f8 <am_util_stdio_printf>
{
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
    311a:	200a      	movs	r0, #10
    311c:	f000 fe36 	bl	3d8c <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
    3120:	4620      	mov	r0, r4
    3122:	f002 fb8d 	bl	5840 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
    3126:	4620      	mov	r0, r4
    3128:	f002 fbb2 	bl	5890 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
    312c:	4620      	mov	r0, r4
    312e:	f002 fbd5 	bl	58dc <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
    3132:	9700      	str	r7, [sp, #0]
    3134:	b672      	cpsid	i
    3136:	4a1f      	ldr	r2, [pc, #124]	; (31b4 <portable_init+0x114>)
    3138:	4d1f      	ldr	r5, [pc, #124]	; (31b8 <portable_init+0x118>)
    313a:	4820      	ldr	r0, [pc, #128]	; (31bc <portable_init+0x11c>)
    313c:	4920      	ldr	r1, [pc, #128]	; (31c0 <portable_init+0x120>)
    313e:	2673      	movs	r6, #115	; 0x73
    3140:	6016      	str	r6, [r2, #0]
    3142:	682b      	ldr	r3, [r5, #0]
    3144:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3148:	602b      	str	r3, [r5, #0]
    314a:	6803      	ldr	r3, [r0, #0]
    314c:	f423 0c7f 	bic.w	ip, r3, #16711680	; 0xff0000
    3150:	f44c 13c0 	orr.w	r3, ip, #1572864	; 0x180000
    3154:	6003      	str	r3, [r0, #0]
    3156:	680b      	ldr	r3, [r1, #0]
    3158:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    315c:	600b      	str	r3, [r1, #0]
    315e:	6014      	str	r4, [r2, #0]
    3160:	9b00      	ldr	r3, [sp, #0]
    3162:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_disable(COM_UART_RX);
    3166:	9701      	str	r7, [sp, #4]
    3168:	b672      	cpsid	i
    316a:	6016      	str	r6, [r2, #0]
    316c:	682f      	ldr	r7, [r5, #0]
    316e:	f027 46e0 	bic.w	r6, r7, #1879048192	; 0x70000000
    3172:	602e      	str	r6, [r5, #0]
    3174:	6805      	ldr	r5, [r0, #0]
    3176:	f025 4c7f 	bic.w	ip, r5, #4278190080	; 0xff000000
    317a:	f04c 53c0 	orr.w	r3, ip, #402653184	; 0x18000000
    317e:	6003      	str	r3, [r0, #0]
    3180:	6808      	ldr	r0, [r1, #0]
    3182:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    3186:	600f      	str	r7, [r1, #0]
    3188:	6014      	str	r4, [r2, #0]
    318a:	9c01      	ldr	r4, [sp, #4]
    318c:	f384 8810 	msr	PRIMASK, r4
    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(ui32UartModule);
#endif
}
    3190:	b003      	add	sp, #12
    3192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3194:	100011b8 	.word	0x100011b8
    3198:	4000400c 	.word	0x4000400c
    319c:	100010b0 	.word	0x100010b0
    31a0:	100015b8 	.word	0x100015b8
    31a4:	00005f20 	.word	0x00005f20
    31a8:	4000c008 	.word	0x4000c008
    31ac:	0000515d 	.word	0x0000515d
    31b0:	00005dac 	.word	0x00005dac
    31b4:	40010060 	.word	0x40010060
    31b8:	40010048 	.word	0x40010048
    31bc:	40010014 	.word	0x40010014
    31c0:	400100f4 	.word	0x400100f4

000031c4 <portable_fini>:

/* Function : portable_fini
    Target specific final code
*/
void portable_fini(core_portable *p)
{
    31c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    p->portable_id=0;
    31c6:	2600      	movs	r6, #0

/* Function : portable_fini
    Target specific final code
*/
void portable_fini(core_portable *p)
{
    31c8:	b083      	sub	sp, #12
    p->portable_id=0;
    31ca:	7006      	strb	r6, [r0, #0]
    uint32_t ui32UartModule = AM_BSP_UART_PRINT_INST;

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    31cc:	4836      	ldr	r0, [pc, #216]	; (32a8 <portable_fini+0xe4>)
    31ce:	f000 ff5d 	bl	408c <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(ui32UartModule);
    31d2:	4630      	mov	r0, r6
    31d4:	f7ff ff0c 	bl	2ff0 <uart_init>

    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
    31d8:	f001 ffa8 	bl	512c <am_util_stdio_terminal_clear>

    //
    // Print the banner.
    //
    am_util_stdio_printf("\nAmbiq Micro Coremark run finished!\n\n");
    31dc:	4833      	ldr	r0, [pc, #204]	; (32ac <portable_fini+0xe8>)
    31de:	f001 ff8b 	bl	50f8 <am_util_stdio_printf>
    //
    // Now, let's go parse the buffer and print it out!
    //
    pcBuf = am_prtbuf;
    iCnt = 0;
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    31e2:	4a33      	ldr	r2, [pc, #204]	; (32b0 <portable_fini+0xec>)
    31e4:	7813      	ldrb	r3, [r2, #0]
    31e6:	4614      	mov	r4, r2
    31e8:	b19b      	cbz	r3, 3212 <portable_fini+0x4e>
    {
        am_util_stdio_printf(pcBuf);
    31ea:	4620      	mov	r0, r4
    31ec:	f001 ff84 	bl	50f8 <am_util_stdio_printf>
        while ( *pcBuf != 0x00 )
    31f0:	7820      	ldrb	r0, [r4, #0]
    31f2:	b138      	cbz	r0, 3204 <portable_fini+0x40>
    31f4:	1b35      	subs	r5, r6, r4
    31f6:	1c67      	adds	r7, r4, #1
    31f8:	7839      	ldrb	r1, [r7, #0]
        {
            pcBuf++;
    31fa:	463c      	mov	r4, r7
    31fc:	19ee      	adds	r6, r5, r7
    31fe:	3701      	adds	r7, #1
    pcBuf = am_prtbuf;
    iCnt = 0;
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    {
        am_util_stdio_printf(pcBuf);
        while ( *pcBuf != 0x00 )
    3200:	2900      	cmp	r1, #0
    3202:	d1f9      	bne.n	31f8 <portable_fini+0x34>
    //
    // Now, let's go parse the buffer and print it out!
    //
    pcBuf = am_prtbuf;
    iCnt = 0;
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    3204:	7862      	ldrb	r2, [r4, #1]
        while ( *pcBuf != 0x00 )
        {
            pcBuf++;
            iCnt++;
        }
        iCnt++;     // Account for the NULL terminator
    3206:	3601      	adds	r6, #1
        pcBuf++;    // Point after the NULL terminator to the next string
    3208:	3401      	adds	r4, #1
    //
    // Now, let's go parse the buffer and print it out!
    //
    pcBuf = am_prtbuf;
    iCnt = 0;
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    320a:	b112      	cbz	r2, 3212 <portable_fini+0x4e>
    320c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3210:	dbeb      	blt.n	31ea <portable_fini+0x26>
{
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
    3212:	200a      	movs	r0, #10
    3214:	f000 fdba 	bl	3d8c <am_util_delay_ms>
    am_hal_uart_clock_disable(ui32UartModule);

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
    3218:	f3ef 8710 	mrs	r7, PRIMASK
    am_util_delay_ms(10);

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
    321c:	2000      	movs	r0, #0
    321e:	f002 fb0f 	bl	5840 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
    3222:	2000      	movs	r0, #0
    3224:	f002 fb34 	bl	5890 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
    3228:	2000      	movs	r0, #0
    322a:	f002 fb57 	bl	58dc <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
    322e:	9700      	str	r7, [sp, #0]
    3230:	b672      	cpsid	i
    3232:	4a20      	ldr	r2, [pc, #128]	; (32b4 <portable_fini+0xf0>)
    3234:	4c20      	ldr	r4, [pc, #128]	; (32b8 <portable_fini+0xf4>)
    3236:	4821      	ldr	r0, [pc, #132]	; (32bc <portable_fini+0xf8>)
    3238:	4921      	ldr	r1, [pc, #132]	; (32c0 <portable_fini+0xfc>)
    323a:	2673      	movs	r6, #115	; 0x73
    323c:	6016      	str	r6, [r2, #0]
    323e:	6823      	ldr	r3, [r4, #0]
    3240:	f023 65e0 	bic.w	r5, r3, #117440512	; 0x7000000
    3244:	6025      	str	r5, [r4, #0]
    3246:	6803      	ldr	r3, [r0, #0]
    3248:	f423 057f 	bic.w	r5, r3, #16711680	; 0xff0000
    324c:	f445 13c0 	orr.w	r3, r5, #1572864	; 0x180000
    3250:	6003      	str	r3, [r0, #0]
    3252:	680b      	ldr	r3, [r1, #0]
    3254:	2500      	movs	r5, #0
    3256:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    325a:	600b      	str	r3, [r1, #0]
    325c:	6015      	str	r5, [r2, #0]
    325e:	9b00      	ldr	r3, [sp, #0]
    3260:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_disable(COM_UART_RX);
    3264:	9701      	str	r7, [sp, #4]
    3266:	b672      	cpsid	i
    3268:	6016      	str	r6, [r2, #0]
    326a:	6827      	ldr	r7, [r4, #0]
    326c:	f027 46e0 	bic.w	r6, r7, #1879048192	; 0x70000000
    3270:	6026      	str	r6, [r4, #0]
    3272:	6804      	ldr	r4, [r0, #0]
    3274:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
    3278:	f04c 53c0 	orr.w	r3, ip, #402653184	; 0x18000000
    327c:	6003      	str	r3, [r0, #0]
    327e:	6808      	ldr	r0, [r1, #0]
    3280:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    3284:	600f      	str	r7, [r1, #0]
    3286:	6015      	str	r5, [r2, #0]
    3288:	9a01      	ldr	r2, [sp, #4]
    328a:	f382 8810 	msr	PRIMASK, r2
#endif // AM_PRINT_RESULTS

    //
    // Enable the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    328e:	2105      	movs	r1, #5
    3290:	480c      	ldr	r0, [pc, #48]	; (32c4 <portable_fini+0x100>)
    3292:	f7fd fbd7 	bl	a44 <am_devices_led_array_init>

    //
    // Turn on an LED.
    //
    am_devices_led_on(am_bsp_psLEDs, 0);
    3296:	4629      	mov	r1, r5
    3298:	480a      	ldr	r0, [pc, #40]	; (32c4 <portable_fini+0x100>)
    329a:	f7fd fccd 	bl	c38 <am_devices_led_on>

#ifdef AM_PART_APOLLO2
    //
    // Re-enable flash and SRAM.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_ALL);
    329e:	480a      	ldr	r0, [pc, #40]	; (32c8 <portable_fini+0x104>)
    32a0:	f002 f8dc 	bl	545c <am_hal_pwrctrl_memory_enable>
#endif // AM_PART_APOLLO2
}
    32a4:	b003      	add	sp, #12
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a8:	0000515d 	.word	0x0000515d
    32ac:	00005dcc 	.word	0x00005dcc
    32b0:	100011b8 	.word	0x100011b8
    32b4:	40010060 	.word	0x40010060
    32b8:	40010048 	.word	0x40010048
    32bc:	40010014 	.word	0x40010014
    32c0:	400100f4 	.word	0x400100f4
    32c4:	10001020 	.word	0x10001020
    32c8:	a0001fff 	.word	0xa0001fff

000032cc <am_sprintf>:

#if AM_PRINT_RESULTS
int am_sprintf(char *pcFmt, ...)
{
    32cc:	b40f      	push	{r0, r1, r2, r3}
    32ce:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;
    int iRet = 0;

    va_list pArgs;

    if ( am_bufcnt < PRTBUFSIZE )
    32d0:	4c1a      	ldr	r4, [pc, #104]	; (333c <am_sprintf+0x70>)
    32d2:	6823      	ldr	r3, [r4, #0]
    32d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
#endif // AM_PART_APOLLO2
}

#if AM_PRINT_RESULTS
int am_sprintf(char *pcFmt, ...)
{
    32d8:	b083      	sub	sp, #12
    uint32_t ui32NumChars;
    int iRet = 0;

    va_list pArgs;

    if ( am_bufcnt < PRTBUFSIZE )
    32da:	d305      	bcc.n	32e8 <am_sprintf+0x1c>

#if AM_PRINT_RESULTS
int am_sprintf(char *pcFmt, ...)
{
    uint32_t ui32NumChars;
    int iRet = 0;
    32dc:	2000      	movs	r0, #0
        }
    } // if (am_bufcnt)

    return iRet;

} // am_sprintf()
    32de:	b003      	add	sp, #12
    32e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    32e4:	b004      	add	sp, #16
    32e6:	4770      	bx	lr
    va_list pArgs;

    if ( am_bufcnt < PRTBUFSIZE )
    {
        va_start(pArgs, pcFmt);
        ui32NumChars = am_util_stdio_vsprintf(am_pcBuf, pcFmt, pArgs);
    32e8:	4d15      	ldr	r5, [pc, #84]	; (3340 <am_sprintf+0x74>)
    32ea:	9906      	ldr	r1, [sp, #24]
    32ec:	6828      	ldr	r0, [r5, #0]

    va_list pArgs;

    if ( am_bufcnt < PRTBUFSIZE )
    {
        va_start(pArgs, pcFmt);
    32ee:	aa07      	add	r2, sp, #28
    32f0:	9201      	str	r2, [sp, #4]
        ui32NumChars = am_util_stdio_vsprintf(am_pcBuf, pcFmt, pArgs);
    32f2:	f000 fed1 	bl	4098 <am_util_stdio_vsprintf>
        va_end(pArgs);

        if ( (am_bufcnt+ui32NumChars) >= PRTBUFSIZE )
    32f6:	6821      	ldr	r1, [r4, #0]
    32f8:	4401      	add	r1, r0
    32fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    32fe:	d20e      	bcs.n	331e <am_sprintf+0x52>
        }
        else
        {
            am_pcBuf += ui32NumChars;
            am_pcBuf++;                 // Skip NULL terminator
            am_bufcnt += ui32NumChars;
    3300:	6822      	ldr	r2, [r4, #0]
            am_bufcnt = PRTBUFSIZE;             //  "
        }
        else
        {
            am_pcBuf += ui32NumChars;
            am_pcBuf++;                 // Skip NULL terminator
    3302:	6829      	ldr	r1, [r5, #0]
            am_bufcnt += ui32NumChars;
    3304:	4402      	add	r2, r0
    3306:	6022      	str	r2, [r4, #0]
            am_bufcnt++;                // Include NULL terminator
    3308:	6822      	ldr	r2, [r4, #0]
            am_bufcnt = PRTBUFSIZE;             //  "
        }
        else
        {
            am_pcBuf += ui32NumChars;
            am_pcBuf++;                 // Skip NULL terminator
    330a:	1c43      	adds	r3, r0, #1
            am_bufcnt += ui32NumChars;
            am_bufcnt++;                // Include NULL terminator
    330c:	3201      	adds	r2, #1
            am_bufcnt = PRTBUFSIZE;             //  "
        }
        else
        {
            am_pcBuf += ui32NumChars;
            am_pcBuf++;                 // Skip NULL terminator
    330e:	440b      	add	r3, r1
            am_bufcnt += ui32NumChars;
            am_bufcnt++;                // Include NULL terminator
    3310:	6022      	str	r2, [r4, #0]
            am_bufcnt = PRTBUFSIZE;             //  "
        }
        else
        {
            am_pcBuf += ui32NumChars;
            am_pcBuf++;                 // Skip NULL terminator
    3312:	602b      	str	r3, [r5, #0]
        }
    } // if (am_bufcnt)

    return iRet;

} // am_sprintf()
    3314:	b003      	add	sp, #12
    3316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    331a:	b004      	add	sp, #16
    331c:	4770      	bx	lr
        if ( (am_bufcnt+ui32NumChars) >= PRTBUFSIZE )
        {
            //
            // This string is 40 chars (with the NULL terminator)
            //
            am_util_stdio_sprintf(&am_prtbuf[PRTBUFSIZE-(40+1)], "BUFFER OVERFLOWED! Increase PRTBUFSIZE\n");
    331e:	4909      	ldr	r1, [pc, #36]	; (3344 <am_sprintf+0x78>)
    3320:	4809      	ldr	r0, [pc, #36]	; (3348 <am_sprintf+0x7c>)
    3322:	f001 fedb 	bl	50dc <am_util_stdio_sprintf>
            am_prtbuf[PRTBUFSIZE-1] = 0x00;     // Double terminate the buffer
    3326:	4b09      	ldr	r3, [pc, #36]	; (334c <am_sprintf+0x80>)
    3328:	2000      	movs	r0, #0
            am_pcBuf = &am_prtbuf[PRTBUFSIZE];  // Don't allow any further printing
    332a:	f503 6180 	add.w	r1, r3, #1024	; 0x400
            am_bufcnt = PRTBUFSIZE;             //  "
    332e:	f44f 6280 	mov.w	r2, #1024	; 0x400
            //
            // This string is 40 chars (with the NULL terminator)
            //
            am_util_stdio_sprintf(&am_prtbuf[PRTBUFSIZE-(40+1)], "BUFFER OVERFLOWED! Increase PRTBUFSIZE\n");
            am_prtbuf[PRTBUFSIZE-1] = 0x00;     // Double terminate the buffer
            am_pcBuf = &am_prtbuf[PRTBUFSIZE];  // Don't allow any further printing
    3332:	6029      	str	r1, [r5, #0]
        {
            //
            // This string is 40 chars (with the NULL terminator)
            //
            am_util_stdio_sprintf(&am_prtbuf[PRTBUFSIZE-(40+1)], "BUFFER OVERFLOWED! Increase PRTBUFSIZE\n");
            am_prtbuf[PRTBUFSIZE-1] = 0x00;     // Double terminate the buffer
    3334:	f883 03ff 	strb.w	r0, [r3, #1023]	; 0x3ff
            am_pcBuf = &am_prtbuf[PRTBUFSIZE];  // Don't allow any further printing
            am_bufcnt = PRTBUFSIZE;             //  "
    3338:	6022      	str	r2, [r4, #0]
    333a:	e7d0      	b.n	32de <am_sprintf+0x12>
    333c:	100010b0 	.word	0x100010b0
    3340:	100015b8 	.word	0x100015b8
    3344:	00005df4 	.word	0x00005df4
    3348:	1000158f 	.word	0x1000158f
    334c:	100011b8 	.word	0x100011b8

00003350 <core_init_state>:
    Actual patterns chosen depend on the seed parameter.

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    3350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee_u32 total=0,next=0,i;
    ee_u8 *buf=0;
    3354:	2600      	movs	r6, #0
#if CORE_DEBUG
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    next=0;
    3356:	4633      	mov	r3, r6

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    ee_u32 total=0,next=0,i;
    3358:	46b0      	mov	r8, r6
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
    335a:	eb08 0403 	add.w	r4, r8, r3
    ee_u8 *buf=0;
#if CORE_DEBUG
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    335e:	f100 3eff 	add.w	lr, r0, #4294967295
    next=0;
    while ((total+next+1)<size) {
    3362:	1c65      	adds	r5, r4, #1
    3364:	3101      	adds	r1, #1
    3366:	45ae      	cmp	lr, r5
    3368:	b289      	uxth	r1, r1
    Actual patterns chosen depend on the seed parameter.

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    336a:	4617      	mov	r7, r2
    next=0;
    while ((total+next+1)<size) {
        if (next>0) {
            for(i=0;i<next;i++)
                *(p+total+i)=buf[i];
            *(p+total+i)=',';
    336c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
            case 6: /* scientific */
                buf=scipat[(seed>>3) & 0x3];
                next=8;
            break;
            case 7: /* invalid */
                buf=errpat[(seed>>3) & 0x3];
    3370:	f8df a140 	ldr.w	sl, [pc, #320]	; 34b4 <core_init_state+0x164>
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
    3374:	d97d      	bls.n	3472 <core_init_state+0x122>
        if (next>0) {
    3376:	2b00      	cmp	r3, #0
    3378:	d063      	beq.n	3442 <core_init_state+0xf2>
            for(i=0;i<next;i++)
                *(p+total+i)=buf[i];
    337a:	4632      	mov	r2, r6
    337c:	4433      	add	r3, r6
    337e:	f812 9b01 	ldrb.w	r9, [r2], #1
    3382:	f807 9008 	strb.w	r9, [r7, r8]
    3386:	43f6      	mvns	r6, r6
    3388:	441e      	add	r6, r3
    338a:	44b8      	add	r8, r7
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
        if (next>0) {
            for(i=0;i<next;i++)
    338c:	429a      	cmp	r2, r3
    338e:	f006 0607 	and.w	r6, r6, #7
    3392:	f108 0901 	add.w	r9, r8, #1
    3396:	d051      	beq.n	343c <core_init_state+0xec>
    3398:	b35e      	cbz	r6, 33f2 <core_init_state+0xa2>
    339a:	2e01      	cmp	r6, #1
    339c:	d023      	beq.n	33e6 <core_init_state+0x96>
    339e:	2e02      	cmp	r6, #2
    33a0:	d01d      	beq.n	33de <core_init_state+0x8e>
    33a2:	2e03      	cmp	r6, #3
    33a4:	d017      	beq.n	33d6 <core_init_state+0x86>
    33a6:	2e04      	cmp	r6, #4
    33a8:	d011      	beq.n	33ce <core_init_state+0x7e>
    33aa:	2e05      	cmp	r6, #5
    33ac:	d00b      	beq.n	33c6 <core_init_state+0x76>
    33ae:	2e06      	cmp	r6, #6
    33b0:	d005      	beq.n	33be <core_init_state+0x6e>
                *(p+total+i)=buf[i];
    33b2:	f812 bb01 	ldrb.w	fp, [r2], #1
    33b6:	f888 b001 	strb.w	fp, [r8, #1]
    33ba:	f109 0901 	add.w	r9, r9, #1
    33be:	f812 8b01 	ldrb.w	r8, [r2], #1
    33c2:	f809 8b01 	strb.w	r8, [r9], #1
    33c6:	f812 6b01 	ldrb.w	r6, [r2], #1
    33ca:	f809 6b01 	strb.w	r6, [r9], #1
    33ce:	f812 bb01 	ldrb.w	fp, [r2], #1
    33d2:	f809 bb01 	strb.w	fp, [r9], #1
    33d6:	f812 8b01 	ldrb.w	r8, [r2], #1
    33da:	f809 8b01 	strb.w	r8, [r9], #1
    33de:	f812 6b01 	ldrb.w	r6, [r2], #1
    33e2:	f809 6b01 	strb.w	r6, [r9], #1
    33e6:	f812 bb01 	ldrb.w	fp, [r2], #1
    33ea:	f809 bb01 	strb.w	fp, [r9], #1
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
        if (next>0) {
            for(i=0;i<next;i++)
    33ee:	429a      	cmp	r2, r3
    33f0:	d024      	beq.n	343c <core_init_state+0xec>
                *(p+total+i)=buf[i];
    33f2:	4690      	mov	r8, r2
    33f4:	464e      	mov	r6, r9
    33f6:	f818 bb01 	ldrb.w	fp, [r8], #1
    33fa:	f806 bb01 	strb.w	fp, [r6], #1
    33fe:	f892 b001 	ldrb.w	fp, [r2, #1]
    3402:	f889 b001 	strb.w	fp, [r9, #1]
    3406:	f898 8001 	ldrb.w	r8, [r8, #1]
    340a:	f886 8001 	strb.w	r8, [r6, #1]
    340e:	78d6      	ldrb	r6, [r2, #3]
    3410:	f889 6003 	strb.w	r6, [r9, #3]
    3414:	f892 b004 	ldrb.w	fp, [r2, #4]
    3418:	f889 b004 	strb.w	fp, [r9, #4]
    341c:	f892 8005 	ldrb.w	r8, [r2, #5]
    3420:	f889 8005 	strb.w	r8, [r9, #5]
    3424:	7996      	ldrb	r6, [r2, #6]
    3426:	f889 6006 	strb.w	r6, [r9, #6]
    342a:	f892 b007 	ldrb.w	fp, [r2, #7]
    342e:	f889 b007 	strb.w	fp, [r9, #7]
    3432:	3208      	adds	r2, #8
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
        if (next>0) {
            for(i=0;i<next;i++)
    3434:	429a      	cmp	r2, r3
    3436:	f109 0908 	add.w	r9, r9, #8
    343a:	d1da      	bne.n	33f2 <core_init_state+0xa2>
                *(p+total+i)=buf[i];
            *(p+total+i)=',';
    343c:	f807 c004 	strb.w	ip, [r7, r4]
    3440:	46a8      	mov	r8, r5
            total+=next+1;
        }
        seed++;
        switch (seed & 0x7) {
    3442:	f001 0307 	and.w	r3, r1, #7
            for(i=0;i<next;i++)
                *(p+total+i)=buf[i];
            *(p+total+i)=',';
            total+=next+1;
        }
        seed++;
    3446:	b20c      	sxth	r4, r1
        switch (seed & 0x7) {
    3448:	1edd      	subs	r5, r3, #3
            case 6: /* scientific */
                buf=scipat[(seed>>3) & 0x3];
                next=8;
            break;
            case 7: /* invalid */
                buf=errpat[(seed>>3) & 0x3];
    344a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
                *(p+total+i)=buf[i];
            *(p+total+i)=',';
            total+=next+1;
        }
        seed++;
        switch (seed & 0x7) {
    344e:	2d04      	cmp	r5, #4
    3450:	d81f      	bhi.n	3492 <core_init_state+0x142>
    3452:	e8df f005 	tbb	[pc, r5]
    3456:	1919      	.short	0x1919
    3458:	0303      	.short	0x0303
    345a:	23          	.byte	0x23
    345b:	00          	.byte	0x00
                buf=floatpat[(seed>>3) & 0x3];
                next=8;
            break;
            case 5: /* scientific */
            case 6: /* scientific */
                buf=scipat[(seed>>3) & 0x3];
    345c:	4e12      	ldr	r6, [pc, #72]	; (34a8 <core_init_state+0x158>)
    345e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
                next=8;
    3462:	2308      	movs	r3, #8
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    next=0;
    while ((total+next+1)<size) {
    3464:	eb08 0403 	add.w	r4, r8, r3
    3468:	1c65      	adds	r5, r4, #1
    346a:	3101      	adds	r1, #1
    346c:	45ae      	cmp	lr, r5
    346e:	b289      	uxth	r1, r1
    3470:	d881      	bhi.n	3376 <core_init_state+0x26>
            default: /* Never happen, just to make some compilers happy */
            break;
        }
    }
    size++;
    while (total<size) { /* fill the rest with 0 */
    3472:	4580      	cmp	r8, r0
    3474:	d216      	bcs.n	34a4 <core_init_state+0x154>
    3476:	ebc8 0200 	rsb	r2, r8, r0
    347a:	2100      	movs	r1, #0
    347c:	eb07 0008 	add.w	r0, r7, r8
        total++;
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n",start);
#endif
}
    3480:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3484:	f002 ba5a 	b.w	593c <memset>
                buf=intpat[(seed>>3) & 0x3];
                next=4;
            break;
            case 3: /* float */
            case 4: /* float */
                buf=floatpat[(seed>>3) & 0x3];
    3488:	4d08      	ldr	r5, [pc, #32]	; (34ac <core_init_state+0x15c>)
                next=8;
    348a:	2308      	movs	r3, #8
                buf=intpat[(seed>>3) & 0x3];
                next=4;
            break;
            case 3: /* float */
            case 4: /* float */
                buf=floatpat[(seed>>3) & 0x3];
    348c:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
                next=8;
            break;
    3490:	e7e8      	b.n	3464 <core_init_state+0x114>
        seed++;
        switch (seed & 0x7) {
            case 0: /* int */
            case 1: /* int */
            case 2: /* int */
                buf=intpat[(seed>>3) & 0x3];
    3492:	4c07      	ldr	r4, [pc, #28]	; (34b0 <core_init_state+0x160>)
                next=4;
    3494:	2304      	movs	r3, #4
        seed++;
        switch (seed & 0x7) {
            case 0: /* int */
            case 1: /* int */
            case 2: /* int */
                buf=intpat[(seed>>3) & 0x3];
    3496:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
                next=4;
            break;
    349a:	e7e3      	b.n	3464 <core_init_state+0x114>
                buf=scipat[(seed>>3) & 0x3];
                next=8;
            break;
            case 7: /* invalid */
                buf=errpat[(seed>>3) & 0x3];
                next=8;
    349c:	2308      	movs	r3, #8
            case 6: /* scientific */
                buf=scipat[(seed>>3) & 0x3];
                next=8;
            break;
            case 7: /* invalid */
                buf=errpat[(seed>>3) & 0x3];
    349e:	f85a 6022 	ldr.w	r6, [sl, r2, lsl #2]
                next=8;
            break;
    34a2:	e7df      	b.n	3464 <core_init_state+0x114>
    34a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34a8:	00005eec 	.word	0x00005eec
    34ac:	00005e2c 	.word	0x00005e2c
    34b0:	00005e1c 	.word	0x00005e1c
    34b4:	00005efc 	.word	0x00005efc

000034b8 <core_state_transition>:

    The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    34b8:	6802      	ldr	r2, [r0, #0]
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    34ba:	7813      	ldrb	r3, [r2, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	f000 80d6 	beq.w	366e <core_state_transition+0x1b6>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    34c2:	2b2c      	cmp	r3, #44	; 0x2c
    34c4:	f000 80d1 	beq.w	366a <core_state_transition+0x1b2>
    2 - a valid number has been detected.

    The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    34c8:	b410      	push	{r4}
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    34ca:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    34ce:	2c09      	cmp	r4, #9
    34d0:	d81b      	bhi.n	350a <core_state_transition+0x52>
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
    34d2:	680c      	ldr	r4, [r1, #0]
    34d4:	3401      	adds	r4, #1
    34d6:	600c      	str	r4, [r1, #0]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    34d8:	7853      	ldrb	r3, [r2, #1]
    34da:	3201      	adds	r2, #1
    34dc:	2b00      	cmp	r3, #0
    34de:	d03d      	beq.n	355c <core_state_transition+0xa4>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    34e0:	2b2c      	cmp	r3, #44	; 0x2c
    34e2:	f000 80bf 	beq.w	3664 <core_state_transition+0x1ac>
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
    34e6:	2b2e      	cmp	r3, #46	; 0x2e
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    34e8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
    34ec:	f000 80a2 	beq.w	3634 <core_state_transition+0x17c>
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    34f0:	2c09      	cmp	r4, #9
    34f2:	f240 80bf 	bls.w	3674 <core_state_transition+0x1bc>
                state = CORE_FLOAT;
                transition_count[CORE_INT]++;
            }
            else if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
                transition_count[CORE_INT]++;
    34f6:	690b      	ldr	r3, [r1, #16]
    34f8:	3301      	adds	r3, #1
    34fa:	610b      	str	r3, [r1, #16]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    34fc:	3201      	adds	r2, #1
            if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
                transition_count[CORE_INT]++;
            }
            else if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
    34fe:	2101      	movs	r1, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    3500:	6002      	str	r2, [r0, #0]
    return state;
}
    3502:	f85d 4b04 	ldr.w	r4, [sp], #4
    3506:	4608      	mov	r0, r1
    3508:	4770      	bx	lr
        switch(state) {
        case CORE_START:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
            }
            else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    350a:	2b2b      	cmp	r3, #43	; 0x2b
    350c:	d010      	beq.n	3530 <core_state_transition+0x78>
    350e:	2b2d      	cmp	r3, #45	; 0x2d
    3510:	d00e      	beq.n	3530 <core_state_transition+0x78>
                state = CORE_S1;
            }
            else if( NEXT_SYMBOL == '.' ) {
    3512:	2b2e      	cmp	r3, #46	; 0x2e
    3514:	d034      	beq.n	3580 <core_state_transition+0xc8>
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
    3516:	e891 0018 	ldmia.w	r1, {r3, r4}
            else if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
    351a:	3401      	adds	r4, #1
            }
            transition_count[CORE_START]++;
    351c:	3301      	adds	r3, #1
    351e:	e881 0018 	stmia.w	r1, {r3, r4}

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3522:	3201      	adds	r2, #1
            }
            else if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
            }
            else {
                state = CORE_INVALID;
    3524:	2101      	movs	r1, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    3526:	6002      	str	r2, [r0, #0]
    return state;
}
    3528:	f85d 4b04 	ldr.w	r4, [sp], #4
    352c:	4608      	mov	r0, r1
    352e:	4770      	bx	lr
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
    3530:	680c      	ldr	r4, [r1, #0]
    3532:	3401      	adds	r4, #1
    3534:	600c      	str	r4, [r1, #0]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3536:	7853      	ldrb	r3, [r2, #1]
    3538:	3201      	adds	r2, #1
    353a:	2b00      	cmp	r3, #0
    353c:	f000 80a0 	beq.w	3680 <core_state_transition+0x1c8>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    3540:	2b2c      	cmp	r3, #44	; 0x2c
    3542:	f000 80a1 	beq.w	3688 <core_state_transition+0x1d0>
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    3546:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    354a:	2c09      	cmp	r4, #9
    354c:	d80c      	bhi.n	3568 <core_state_transition+0xb0>
            transition_count[CORE_START]++;
            break;
        case CORE_S1:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
                transition_count[CORE_S1]++;
    354e:	688b      	ldr	r3, [r1, #8]
    3550:	3301      	adds	r3, #1
    3552:	608b      	str	r3, [r1, #8]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3554:	7853      	ldrb	r3, [r2, #1]
    3556:	3201      	adds	r2, #1
    3558:	2b00      	cmp	r3, #0
    355a:	d1c1      	bne.n	34e0 <core_state_transition+0x28>
            }
            transition_count[CORE_START]++;
            break;
        case CORE_S1:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
    355c:	2104      	movs	r1, #4
            break;
        default:
            break;
        }
    }
    *instr=str;
    355e:	6002      	str	r2, [r0, #0]
    return state;
}
    3560:	f85d 4b04 	ldr.w	r4, [sp], #4
    3564:	4608      	mov	r0, r1
    3566:	4770      	bx	lr
        case CORE_S1:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
                transition_count[CORE_S1]++;
            }
            else if( NEXT_SYMBOL == '.' ) {
    3568:	2b2e      	cmp	r3, #46	; 0x2e
    356a:	d073      	beq.n	3654 <core_state_transition+0x19c>
                state = CORE_FLOAT;
                transition_count[CORE_S1]++;
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
    356c:	688b      	ldr	r3, [r1, #8]
            break;
        }
    }
    *instr=str;
    return state;
}
    356e:	f85d 4b04 	ldr.w	r4, [sp], #4
                state = CORE_FLOAT;
                transition_count[CORE_S1]++;
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
    3572:	3301      	adds	r3, #1
    3574:	608b      	str	r3, [r1, #8]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3576:	3201      	adds	r2, #1
            else if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
                transition_count[CORE_S1]++;
            }
            else {
                state = CORE_INVALID;
    3578:	2101      	movs	r1, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    357a:	6002      	str	r2, [r0, #0]
    return state;
}
    357c:	4608      	mov	r0, r1
    357e:	4770      	bx	lr
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
    3580:	680b      	ldr	r3, [r1, #0]
    3582:	3301      	adds	r3, #1
    3584:	600b      	str	r3, [r1, #0]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3586:	7854      	ldrb	r4, [r2, #1]
    3588:	1c53      	adds	r3, r2, #1
    358a:	2c00      	cmp	r4, #0
    358c:	d059      	beq.n	3642 <core_state_transition+0x18a>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    358e:	2c2c      	cmp	r4, #44	; 0x2c
    3590:	d07c      	beq.n	368c <core_state_transition+0x1d4>
                state = CORE_INVALID;
                transition_count[CORE_INT]++;
            }
            break;
        case CORE_FLOAT:
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    3592:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    3596:	2a45      	cmp	r2, #69	; 0x45
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    3598:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
                state = CORE_INVALID;
                transition_count[CORE_INT]++;
            }
            break;
        case CORE_FLOAT:
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    359c:	d009      	beq.n	35b2 <core_state_transition+0xfa>
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    359e:	2c09      	cmp	r4, #9
    35a0:	d852      	bhi.n	3648 <core_state_transition+0x190>

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    35a2:	785c      	ldrb	r4, [r3, #1]
    35a4:	1c5a      	adds	r2, r3, #1
    35a6:	2c00      	cmp	r4, #0
    35a8:	d07b      	beq.n	36a2 <core_state_transition+0x1ea>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    35aa:	2c2c      	cmp	r4, #44	; 0x2c
    35ac:	d07b      	beq.n	36a6 <core_state_transition+0x1ee>
    35ae:	4613      	mov	r3, r2
    35b0:	e7ef      	b.n	3592 <core_state_transition+0xda>
            }
            break;
        case CORE_FLOAT:
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
                state = CORE_S2;
                transition_count[CORE_FLOAT]++;
    35b2:	694a      	ldr	r2, [r1, #20]
    35b4:	3201      	adds	r2, #1
    35b6:	614a      	str	r2, [r1, #20]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    35b8:	785c      	ldrb	r4, [r3, #1]
    35ba:	1c5a      	adds	r2, r3, #1
    35bc:	2c00      	cmp	r4, #0
    35be:	d06a      	beq.n	3696 <core_state_transition+0x1de>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    35c0:	2c2c      	cmp	r4, #44	; 0x2c
    35c2:	d06a      	beq.n	369a <core_state_transition+0x1e2>
                state = CORE_INVALID;
                transition_count[CORE_FLOAT]++;
            }
            break;
        case CORE_S2:
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    35c4:	2c2b      	cmp	r4, #43	; 0x2b
                state = CORE_EXPONENT;
                transition_count[CORE_S2]++;
    35c6:	68ca      	ldr	r2, [r1, #12]
                state = CORE_INVALID;
                transition_count[CORE_FLOAT]++;
            }
            break;
        case CORE_S2:
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    35c8:	d00a      	beq.n	35e0 <core_state_transition+0x128>
    35ca:	2c2d      	cmp	r4, #45	; 0x2d
    35cc:	d008      	beq.n	35e0 <core_state_transition+0x128>
                state = CORE_EXPONENT;
                transition_count[CORE_S2]++;
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_S2]++;
    35ce:	1c54      	adds	r4, r2, #1
    35d0:	60cc      	str	r4, [r1, #12]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    35d2:	1c9a      	adds	r2, r3, #2
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_EXPONENT;
                transition_count[CORE_S2]++;
            }
            else {
                state = CORE_INVALID;
    35d4:	2101      	movs	r1, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    35d6:	6002      	str	r2, [r0, #0]
    return state;
}
    35d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    35dc:	4608      	mov	r0, r1
    35de:	4770      	bx	lr
            }
            break;
        case CORE_S2:
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_EXPONENT;
                transition_count[CORE_S2]++;
    35e0:	3201      	adds	r2, #1
    35e2:	60ca      	str	r2, [r1, #12]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    35e4:	789c      	ldrb	r4, [r3, #2]
    35e6:	1c9a      	adds	r2, r3, #2
    35e8:	2c00      	cmp	r4, #0
    35ea:	d052      	beq.n	3692 <core_state_transition+0x1da>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    35ec:	2c2c      	cmp	r4, #44	; 0x2c
    35ee:	d056      	beq.n	369e <core_state_transition+0x1e6>
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    35f0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    35f4:	2a09      	cmp	r2, #9
    35f6:	d811      	bhi.n	361c <core_state_transition+0x164>
            }
            break;
        case CORE_EXPONENT:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_SCIENTIFIC;
                transition_count[CORE_EXPONENT]++;
    35f8:	698a      	ldr	r2, [r1, #24]
    35fa:	3201      	adds	r2, #1
    35fc:	618a      	str	r2, [r1, #24]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    35fe:	78dc      	ldrb	r4, [r3, #3]
    3600:	1cda      	adds	r2, r3, #3
    3602:	b14c      	cbz	r4, 3618 <core_state_transition+0x160>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    3604:	2c2c      	cmp	r4, #44	; 0x2c
    3606:	d03d      	beq.n	3684 <core_state_transition+0x1cc>
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
    ee_u8 retval;
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    3608:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    360c:	2b09      	cmp	r3, #9
    360e:	d80b      	bhi.n	3628 <core_state_transition+0x170>

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3610:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    3614:	2c00      	cmp	r4, #0
    3616:	d1f5      	bne.n	3604 <core_state_transition+0x14c>
                transition_count[CORE_S2]++;
            }
            break;
        case CORE_EXPONENT:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_SCIENTIFIC;
    3618:	2107      	movs	r1, #7
    361a:	e771      	b.n	3500 <core_state_transition+0x48>
                transition_count[CORE_EXPONENT]++;
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_EXPONENT]++;
    361c:	698c      	ldr	r4, [r1, #24]
    361e:	3401      	adds	r4, #1
    3620:	618c      	str	r4, [r1, #24]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3622:	1cda      	adds	r2, r3, #3
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_SCIENTIFIC;
                transition_count[CORE_EXPONENT]++;
            }
            else {
                state = CORE_INVALID;
    3624:	2101      	movs	r1, #1
    3626:	e76b      	b.n	3500 <core_state_transition+0x48>
            }
            break;
        case CORE_SCIENTIFIC:
            if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
    3628:	684c      	ldr	r4, [r1, #4]
    362a:	3401      	adds	r4, #1
    362c:	604c      	str	r4, [r1, #4]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    362e:	3201      	adds	r2, #1
                transition_count[CORE_EXPONENT]++;
            }
            break;
        case CORE_SCIENTIFIC:
            if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
    3630:	2101      	movs	r1, #1
    3632:	e765      	b.n	3500 <core_state_transition+0x48>
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
                transition_count[CORE_INT]++;
    3634:	690c      	ldr	r4, [r1, #16]
    3636:	3401      	adds	r4, #1
    3638:	610c      	str	r4, [r1, #16]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    363a:	7854      	ldrb	r4, [r2, #1]
    363c:	1c53      	adds	r3, r2, #1
    363e:	2c00      	cmp	r4, #0
    3640:	d1a5      	bne.n	358e <core_state_transition+0xd6>
    3642:	461a      	mov	r2, r3
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
    3644:	2105      	movs	r1, #5
    3646:	e75b      	b.n	3500 <core_state_transition+0x48>
                state = CORE_S2;
                transition_count[CORE_FLOAT]++;
            }
            else if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
                transition_count[CORE_FLOAT]++;
    3648:	694a      	ldr	r2, [r1, #20]
    364a:	1c54      	adds	r4, r2, #1
    364c:	614c      	str	r4, [r1, #20]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    364e:	1c5a      	adds	r2, r3, #1
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
                state = CORE_S2;
                transition_count[CORE_FLOAT]++;
            }
            else if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
    3650:	2101      	movs	r1, #1
    3652:	e755      	b.n	3500 <core_state_transition+0x48>
                state = CORE_INT;
                transition_count[CORE_S1]++;
            }
            else if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
                transition_count[CORE_S1]++;
    3654:	688c      	ldr	r4, [r1, #8]
    3656:	3401      	adds	r4, #1
    3658:	608c      	str	r4, [r1, #8]

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    365a:	7854      	ldrb	r4, [r2, #1]
    365c:	1c53      	adds	r3, r2, #1
    365e:	2c00      	cmp	r4, #0
    3660:	d195      	bne.n	358e <core_state_transition+0xd6>
    3662:	e7ee      	b.n	3642 <core_state_transition+0x18a>
            }
            transition_count[CORE_START]++;
            break;
        case CORE_S1:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
    3664:	2104      	movs	r1, #4
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
            str++;
    3666:	3201      	adds	r2, #1
            break;
    3668:	e74a      	b.n	3500 <core_state_transition+0x48>
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    366a:	2300      	movs	r3, #0
    for( ; *str && state != CORE_INVALID; str++ ) {
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
            str++;
    366c:	3201      	adds	r2, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    366e:	6002      	str	r2, [r0, #0]
    return state;
}
    3670:	4618      	mov	r0, r3
    3672:	4770      	bx	lr

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    3674:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3678:	2b00      	cmp	r3, #0
    367a:	f47f af31 	bne.w	34e0 <core_state_transition+0x28>
    367e:	e76d      	b.n	355c <core_state_transition+0xa4>
        case CORE_START:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
            }
            else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_S1;
    3680:	2102      	movs	r1, #2
    3682:	e73d      	b.n	3500 <core_state_transition+0x48>
                transition_count[CORE_S2]++;
            }
            break;
        case CORE_EXPONENT:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_SCIENTIFIC;
    3684:	2107      	movs	r1, #7
    3686:	e7ee      	b.n	3666 <core_state_transition+0x1ae>
        case CORE_START:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
            }
            else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_S1;
    3688:	2102      	movs	r1, #2
    368a:	e7ec      	b.n	3666 <core_state_transition+0x1ae>

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    368c:	461a      	mov	r2, r3
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
                state = CORE_FLOAT;
    368e:	2105      	movs	r1, #5
    3690:	e7e9      	b.n	3666 <core_state_transition+0x1ae>
                transition_count[CORE_FLOAT]++;
            }
            break;
        case CORE_S2:
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_EXPONENT;
    3692:	2106      	movs	r1, #6
    3694:	e734      	b.n	3500 <core_state_transition+0x48>
                transition_count[CORE_INT]++;
            }
            break;
        case CORE_FLOAT:
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
                state = CORE_S2;
    3696:	2103      	movs	r1, #3
    3698:	e732      	b.n	3500 <core_state_transition+0x48>
    369a:	2103      	movs	r1, #3
    369c:	e7e3      	b.n	3666 <core_state_transition+0x1ae>
                transition_count[CORE_FLOAT]++;
            }
            break;
        case CORE_S2:
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
                state = CORE_EXPONENT;
    369e:	2106      	movs	r1, #6
    36a0:	e7e1      	b.n	3666 <core_state_transition+0x1ae>

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    36a2:	2105      	movs	r1, #5
    36a4:	e72c      	b.n	3500 <core_state_transition+0x48>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    36a6:	2105      	movs	r1, #5
    36a8:	e7dd      	b.n	3666 <core_state_transition+0x1ae>
    36aa:	bf00      	nop

000036ac <core_bench_state>:

    Go over the input twice, once direct, and once after introducing some corruption.
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock,
        ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc)
{
    36ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36b0:	b092      	sub	sp, #72	; 0x48
    36b2:	460c      	mov	r4, r1
    36b4:	4682      	mov	sl, r0
    36b6:	2100      	movs	r1, #0
    36b8:	4691      	mov	r9, r2
    36ba:	a80a      	add	r0, sp, #40	; 0x28
    36bc:	2220      	movs	r2, #32
    36be:	4698      	mov	r8, r3
    ee_u32 final_counts[NUM_CORE_STATES];
    ee_u32 track_counts[NUM_CORE_STATES];
    ee_u8 *p=memblock;
    36c0:	9401      	str	r4, [sp, #4]

    Go over the input twice, once direct, and once after introducing some corruption.
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock,
        ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc)
{
    36c2:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
    36c6:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
    36ca:	f002 f937 	bl	593c <memset>
    36ce:	2220      	movs	r2, #32
    36d0:	2100      	movs	r1, #0
    36d2:	a802      	add	r0, sp, #8
    36d4:	f002 f932 	bl	593c <memset>
#endif
    for (i=0; i<NUM_CORE_STATES; i++) {
        final_counts[i]=track_counts[i]=0;
    }
    /* run the state machine over the input */
    while (*p!=0) {
    36d8:	7822      	ldrb	r2, [r4, #0]
    36da:	2a00      	cmp	r2, #0
    36dc:	d05b      	beq.n	3796 <core_bench_state+0xea>
    36de:	ad01      	add	r5, sp, #4
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    36e0:	a90a      	add	r1, sp, #40	; 0x28
    36e2:	4628      	mov	r0, r5
    36e4:	f7ff fee8 	bl	34b8 <core_state_transition>
        final_counts[fstate]++;
    36e8:	ab12      	add	r3, sp, #72	; 0x48
    36ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
#endif
    for (i=0; i<NUM_CORE_STATES; i++) {
        final_counts[i]=track_counts[i]=0;
    }
    /* run the state machine over the input */
    while (*p!=0) {
    36ee:	9901      	ldr	r1, [sp, #4]
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
        final_counts[fstate]++;
    36f0:	f850 3c40 	ldr.w	r3, [r0, #-64]
#endif
    for (i=0; i<NUM_CORE_STATES; i++) {
        final_counts[i]=track_counts[i]=0;
    }
    /* run the state machine over the input */
    while (*p!=0) {
    36f4:	780a      	ldrb	r2, [r1, #0]
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
        final_counts[fstate]++;
    36f6:	3301      	adds	r3, #1
    36f8:	f840 3c40 	str.w	r3, [r0, #-64]
#endif
    for (i=0; i<NUM_CORE_STATES; i++) {
        final_counts[i]=track_counts[i]=0;
    }
    /* run the state machine over the input */
    while (*p!=0) {
    36fc:	2a00      	cmp	r2, #0
    36fe:	d1ef      	bne.n	36e0 <core_bench_state+0x34>
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* insert some corruption */
    3700:	44a2      	add	sl, r4
    3702:	4554      	cmp	r4, sl
    }
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    3704:	9401      	str	r4, [sp, #4]
    3706:	7822      	ldrb	r2, [r4, #0]
    while (p < (memblock+blksize)) { /* insert some corruption */
    3708:	d242      	bcs.n	3790 <core_bench_state+0xe4>

    Go over the input twice, once direct, and once after introducing some corruption.
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock,
        ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc)
{
    370a:	4620      	mov	r0, r4
    370c:	e000      	b.n	3710 <core_bench_state+0x64>
    370e:	7802      	ldrb	r2, [r0, #0]
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* insert some corruption */
        if (*p!=',')
    3710:	2a2c      	cmp	r2, #44	; 0x2c
            *p^=(ee_u8)seed1;
    3712:	ea82 0109 	eor.w	r1, r2, r9
    3716:	bf1c      	itt	ne
    3718:	7001      	strbne	r1, [r0, #0]
    371a:	9801      	ldrne	r0, [sp, #4]
        p+=step;
    371c:	4430      	add	r0, r6
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* insert some corruption */
    371e:	4582      	cmp	sl, r0
        if (*p!=',')
            *p^=(ee_u8)seed1;
        p+=step;
    3720:	9001      	str	r0, [sp, #4]
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* insert some corruption */
    3722:	d8f4      	bhi.n	370e <core_bench_state+0x62>
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    /* run the state machine over the input again */
    while (*p!=0) {
    3724:	7823      	ldrb	r3, [r4, #0]
    while (p < (memblock+blksize)) { /* insert some corruption */
        if (*p!=',')
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    3726:	9401      	str	r4, [sp, #4]
    /* run the state machine over the input again */
    while (*p!=0) {
    3728:	2b00      	cmp	r3, #0
    372a:	d03a      	beq.n	37a2 <core_bench_state+0xf6>
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    372c:	a90a      	add	r1, sp, #40	; 0x28
    372e:	4628      	mov	r0, r5
    3730:	f7ff fec2 	bl	34b8 <core_state_transition>
        final_counts[fstate]++;
    3734:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    3738:	eb0c 0980 	add.w	r9, ip, r0, lsl #2
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    /* run the state machine over the input again */
    while (*p!=0) {
    373c:	9a01      	ldr	r2, [sp, #4]
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
        final_counts[fstate]++;
    373e:	f859 0c40 	ldr.w	r0, [r9, #-64]
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    /* run the state machine over the input again */
    while (*p!=0) {
    3742:	7811      	ldrb	r1, [r2, #0]
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
        final_counts[fstate]++;
    3744:	3001      	adds	r0, #1
    3746:	f849 0c40 	str.w	r0, [r9, #-64]
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    /* run the state machine over the input again */
    while (*p!=0) {
    374a:	2900      	cmp	r1, #0
    374c:	d1ee      	bne.n	372c <core_bench_state+0x80>
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    374e:	4554      	cmp	r4, sl
    }
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    3750:	9401      	str	r4, [sp, #4]
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3752:	d20a      	bcs.n	376a <core_bench_state+0xbe>
        if (*p!=',')
    3754:	7823      	ldrb	r3, [r4, #0]
    3756:	2b2c      	cmp	r3, #44	; 0x2c
            *p^=(ee_u8)seed2;
    3758:	ea83 0208 	eor.w	r2, r3, r8
    375c:	bf1c      	itt	ne
    375e:	7022      	strbne	r2, [r4, #0]
    3760:	9c01      	ldrne	r4, [sp, #4]
        p+=step;
    3762:	4434      	add	r4, r6
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3764:	4554      	cmp	r4, sl
        if (*p!=',')
            *p^=(ee_u8)seed2;
        p+=step;
    3766:	9401      	str	r4, [sp, #4]
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3768:	d3f4      	bcc.n	3754 <core_bench_state+0xa8>
    376a:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    376e:	46d0      	mov	r8, sl
            *p^=(ee_u8)seed2;
        p+=step;
    }
    /* end timing */
    for (i=0; i<NUM_CORE_STATES; i++) {
        crc=crcu32(final_counts[i],crc);
    3770:	4639      	mov	r1, r7
    3772:	f855 0f04 	ldr.w	r0, [r5, #4]!
    3776:	f000 f8e1 	bl	393c <crcu32>
        crc=crcu32(track_counts[i],crc);
    377a:	4601      	mov	r1, r0
    377c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    3780:	f000 f8dc 	bl	393c <crcu32>
        if (*p!=',')
            *p^=(ee_u8)seed2;
        p+=step;
    }
    /* end timing */
    for (i=0; i<NUM_CORE_STATES; i++) {
    3784:	4545      	cmp	r5, r8
        crc=crcu32(final_counts[i],crc);
        crc=crcu32(track_counts[i],crc);
    3786:	4607      	mov	r7, r0
        if (*p!=',')
            *p^=(ee_u8)seed2;
        p+=step;
    }
    /* end timing */
    for (i=0; i<NUM_CORE_STATES; i++) {
    3788:	d1f2      	bne.n	3770 <core_bench_state+0xc4>
        crc=crcu32(final_counts[i],crc);
        crc=crcu32(track_counts[i],crc);
    }
    return crc;
}
    378a:	b012      	add	sp, #72	; 0x48
    378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            *p^=(ee_u8)seed1;
        p+=step;
    }
    p=memblock;
    /* run the state machine over the input again */
    while (*p!=0) {
    3790:	2a00      	cmp	r2, #0
    3792:	d1cb      	bne.n	372c <core_bench_state+0x80>
    3794:	e7e9      	b.n	376a <core_bench_state+0xbe>
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    while (p < (memblock+blksize)) { /* insert some corruption */
    3796:	44a2      	add	sl, r4
    3798:	4554      	cmp	r4, sl
    }
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    379a:	9401      	str	r4, [sp, #4]
    379c:	ad01      	add	r5, sp, #4
    while (p < (memblock+blksize)) { /* insert some corruption */
    379e:	d3b4      	bcc.n	370a <core_bench_state+0x5e>
    37a0:	e7e3      	b.n	376a <core_bench_state+0xbe>
    }
    ee_printf("\n");
#else
    }
#endif
    p=memblock;
    37a2:	9401      	str	r4, [sp, #4]
    37a4:	e7d6      	b.n	3754 <core_bench_state+0xa8>
    37a6:	bf00      	nop

000037a8 <get_seed_32>:
    extern volatile ee_s32 seed3_volatile;
    extern volatile ee_s32 seed4_volatile;
    extern volatile ee_s32 seed5_volatile;
    ee_s32 get_seed_32(int i) {
        ee_s32 retval;
        switch (i) {
    37a8:	3801      	subs	r0, #1
    37aa:	2804      	cmp	r0, #4
    37ac:	d813      	bhi.n	37d6 <get_seed_32+0x2e>
    37ae:	e8df f000 	tbb	[pc, r0]
    37b2:	0906      	.short	0x0906
    37b4:	0f0c      	.short	0x0f0c
    37b6:	03          	.byte	0x03
    37b7:	00          	.byte	0x00
                break;
            case 4:
                retval=seed4_volatile;
                break;
            case 5:
                retval=seed5_volatile;
    37b8:	4b08      	ldr	r3, [pc, #32]	; (37dc <get_seed_32+0x34>)
    37ba:	6818      	ldr	r0, [r3, #0]
                break;
    37bc:	4770      	bx	lr
    extern volatile ee_s32 seed5_volatile;
    ee_s32 get_seed_32(int i) {
        ee_s32 retval;
        switch (i) {
            case 1:
                retval=seed1_volatile;
    37be:	4b08      	ldr	r3, [pc, #32]	; (37e0 <get_seed_32+0x38>)
    37c0:	6818      	ldr	r0, [r3, #0]
                break;
    37c2:	4770      	bx	lr
            case 2:
                retval=seed2_volatile;
    37c4:	4807      	ldr	r0, [pc, #28]	; (37e4 <get_seed_32+0x3c>)
    37c6:	6800      	ldr	r0, [r0, #0]
                break;
    37c8:	4770      	bx	lr
            case 3:
                retval=seed3_volatile;
    37ca:	4a07      	ldr	r2, [pc, #28]	; (37e8 <get_seed_32+0x40>)
    37cc:	6810      	ldr	r0, [r2, #0]
                break;
    37ce:	4770      	bx	lr
            case 4:
                retval=seed4_volatile;
    37d0:	4906      	ldr	r1, [pc, #24]	; (37ec <get_seed_32+0x44>)
    37d2:	6808      	ldr	r0, [r1, #0]
                break;
    37d4:	4770      	bx	lr
            case 5:
                retval=seed5_volatile;
                break;
            default:
                retval=0;
    37d6:	2000      	movs	r0, #0
                break;
        }
        return retval;
    }
    37d8:	4770      	bx	lr
    37da:	bf00      	nop
    37dc:	100010a0 	.word	0x100010a0
    37e0:	1000109c 	.word	0x1000109c
    37e4:	100010a4 	.word	0x100010a4
    37e8:	10001018 	.word	0x10001018
    37ec:	10001014 	.word	0x10001014

000037f0 <crcu16>:
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    37f0:	f24a 0201 	movw	r2, #40961	; 0xa001
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37f4:	ea81 0300 	eor.w	r3, r1, r0
        else
           crc &= 0x7fff;
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    37f8:	b410      	push	{r4}
    37fa:	084c      	lsrs	r4, r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    37fc:	ea84 0102 	eor.w	r1, r4, r2
    3800:	f013 0f01 	tst.w	r3, #1
    3804:	bf18      	it	ne
    3806:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3808:	f3c0 0346 	ubfx	r3, r0, #1, #7
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    380c:	ea84 0c03 	eor.w	ip, r4, r3
    3810:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3812:	ea84 0102 	eor.w	r1, r4, r2
    3816:	f01c 0f01 	tst.w	ip, #1
    381a:	bf18      	it	ne
    381c:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    381e:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3820:	ea84 0c03 	eor.w	ip, r4, r3
    3824:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3826:	ea84 0102 	eor.w	r1, r4, r2
    382a:	f01c 0f01 	tst.w	ip, #1
    382e:	bf18      	it	ne
    3830:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3832:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3834:	ea84 0c03 	eor.w	ip, r4, r3
    3838:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    383a:	ea84 0102 	eor.w	r1, r4, r2
    383e:	f01c 0f01 	tst.w	ip, #1
    3842:	bf18      	it	ne
    3844:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3846:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3848:	ea84 0c03 	eor.w	ip, r4, r3
    384c:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    384e:	ea84 0102 	eor.w	r1, r4, r2
    3852:	f01c 0f01 	tst.w	ip, #1
    3856:	bf18      	it	ne
    3858:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    385a:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    385c:	ea84 0c03 	eor.w	ip, r4, r3
    3860:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3862:	ea84 0102 	eor.w	r1, r4, r2
    3866:	f01c 0f01 	tst.w	ip, #1
    386a:	bf18      	it	ne
    386c:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    386e:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3870:	ea84 0c03 	eor.w	ip, r4, r3
    3874:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3876:	ea84 0102 	eor.w	r1, r4, r2
    387a:	f01c 0f01 	tst.w	ip, #1
    387e:	bf18      	it	ne
    3880:	460c      	movne	r4, r1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3882:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
    3886:	0864      	lsrs	r4, r4, #1
    3888:	f013 0f01 	tst.w	r3, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    388c:	ea84 0c02 	eor.w	ip, r4, r2
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3890:	ea4f 2310 	mov.w	r3, r0, lsr #8
    3894:	bf14      	ite	ne
    3896:	4660      	movne	r0, ip
    3898:	4620      	moveq	r0, r4
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    389a:	ea80 0103 	eor.w	r1, r0, r3
    389e:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    38a0:	ea80 0402 	eor.w	r4, r0, r2
    38a4:	f011 0f01 	tst.w	r1, #1
    38a8:	bf18      	it	ne
    38aa:	4620      	movne	r0, r4
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    38ac:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38ae:	ea83 0c00 	eor.w	ip, r3, r0
    38b2:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    38b4:	ea80 0102 	eor.w	r1, r0, r2
    38b8:	f01c 0f01 	tst.w	ip, #1
    38bc:	bf18      	it	ne
    38be:	4608      	movne	r0, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    38c0:	085c      	lsrs	r4, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38c2:	ea84 0300 	eor.w	r3, r4, r0
    38c6:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    38c8:	ea80 0c02 	eor.w	ip, r0, r2
    38cc:	f013 0f01 	tst.w	r3, #1
    38d0:	bf18      	it	ne
    38d2:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    38d4:	0864      	lsrs	r4, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38d6:	ea80 0104 	eor.w	r1, r0, r4
    38da:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    38dc:	ea80 0c02 	eor.w	ip, r0, r2
    38e0:	f011 0f01 	tst.w	r1, #1
    38e4:	bf18      	it	ne
    38e6:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    38e8:	0863      	lsrs	r3, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38ea:	ea80 0403 	eor.w	r4, r0, r3
    38ee:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    38f0:	ea80 0102 	eor.w	r1, r0, r2
    38f4:	f014 0f01 	tst.w	r4, #1
    38f8:	bf18      	it	ne
    38fa:	4608      	movne	r0, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    38fc:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38fe:	ea80 0403 	eor.w	r4, r0, r3
    3902:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3904:	ea80 0c02 	eor.w	ip, r0, r2
    3908:	f014 0f01 	tst.w	r4, #1
    390c:	bf18      	it	ne
    390e:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3910:	085b      	lsrs	r3, r3, #1
    3912:	0844      	lsrs	r4, r0, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3914:	ea80 0103 	eor.w	r1, r0, r3
    3918:	f011 0f01 	tst.w	r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    391c:	ea84 0002 	eor.w	r0, r4, r2
    3920:	bf18      	it	ne
    3922:	4604      	movne	r4, r0
    3924:	0860      	lsrs	r0, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3926:	ea84 0c53 	eor.w	ip, r4, r3, lsr #1
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    return crc;
    392a:	f01c 0f01 	tst.w	ip, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    392e:	ea82 0200 	eor.w	r2, r2, r0
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    return crc;
}
    3932:	bf18      	it	ne
    3934:	4610      	movne	r0, r2
    3936:	f85d 4b04 	ldr.w	r4, [sp], #4
    393a:	4770      	bx	lr

0000393c <crcu32>:
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    393c:	f24a 0301 	movw	r3, #40961	; 0xa001
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3940:	ea81 0200 	eor.w	r2, r1, r0
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    3944:	b410      	push	{r4}
    3946:	084c      	lsrs	r4, r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3948:	ea84 0103 	eor.w	r1, r4, r3
    394c:	f012 0f01 	tst.w	r2, #1
    3950:	bf18      	it	ne
    3952:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3954:	f3c0 0246 	ubfx	r2, r0, #1, #7
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3958:	ea84 0c02 	eor.w	ip, r4, r2
    395c:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    395e:	ea84 0103 	eor.w	r1, r4, r3
    3962:	f01c 0f01 	tst.w	ip, #1
    3966:	bf18      	it	ne
    3968:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    396a:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    396c:	ea84 0c02 	eor.w	ip, r4, r2
    3970:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3972:	ea84 0103 	eor.w	r1, r4, r3
    3976:	f01c 0f01 	tst.w	ip, #1
    397a:	bf18      	it	ne
    397c:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    397e:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3980:	ea84 0c02 	eor.w	ip, r4, r2
    3984:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3986:	ea84 0103 	eor.w	r1, r4, r3
    398a:	f01c 0f01 	tst.w	ip, #1
    398e:	bf18      	it	ne
    3990:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3992:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3994:	ea84 0c02 	eor.w	ip, r4, r2
    3998:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    399a:	ea84 0103 	eor.w	r1, r4, r3
    399e:	f01c 0f01 	tst.w	ip, #1
    39a2:	bf18      	it	ne
    39a4:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    39a6:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39a8:	ea84 0c02 	eor.w	ip, r4, r2
    39ac:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    39ae:	ea84 0103 	eor.w	r1, r4, r3
    39b2:	f01c 0f01 	tst.w	ip, #1
    39b6:	bf18      	it	ne
    39b8:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    39ba:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39bc:	ea84 0c02 	eor.w	ip, r4, r2
    39c0:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    39c2:	ea84 0103 	eor.w	r1, r4, r3
    39c6:	f01c 0f01 	tst.w	ip, #1
    39ca:	bf18      	it	ne
    39cc:	460c      	movne	r4, r1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39ce:	ea84 0252 	eor.w	r2, r4, r2, lsr #1
    39d2:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    39d4:	ea84 0c03 	eor.w	ip, r4, r3
    39d8:	f012 0f01 	tst.w	r2, #1
    39dc:	bf18      	it	ne
    39de:	4664      	movne	r4, ip
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    39e0:	f3c0 2207 	ubfx	r2, r0, #8, #8
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39e4:	ea84 0102 	eor.w	r1, r4, r2
    39e8:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    39ea:	ea84 0c03 	eor.w	ip, r4, r3
    39ee:	f011 0f01 	tst.w	r1, #1
    39f2:	bf18      	it	ne
    39f4:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    39f6:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39f8:	ea84 0102 	eor.w	r1, r4, r2
    39fc:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    39fe:	ea84 0c03 	eor.w	ip, r4, r3
    3a02:	f011 0f01 	tst.w	r1, #1
    3a06:	bf18      	it	ne
    3a08:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a0a:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a0c:	ea84 0102 	eor.w	r1, r4, r2
    3a10:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a12:	ea84 0c03 	eor.w	ip, r4, r3
    3a16:	f011 0f01 	tst.w	r1, #1
    3a1a:	bf18      	it	ne
    3a1c:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a1e:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a20:	ea84 0102 	eor.w	r1, r4, r2
    3a24:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a26:	ea84 0c03 	eor.w	ip, r4, r3
    3a2a:	f011 0f01 	tst.w	r1, #1
    3a2e:	bf18      	it	ne
    3a30:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a32:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a34:	ea84 0102 	eor.w	r1, r4, r2
    3a38:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a3a:	ea84 0c03 	eor.w	ip, r4, r3
    3a3e:	f011 0f01 	tst.w	r1, #1
    3a42:	bf18      	it	ne
    3a44:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a46:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a48:	ea84 0102 	eor.w	r1, r4, r2
    3a4c:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a4e:	ea84 0c03 	eor.w	ip, r4, r3
    3a52:	f011 0f01 	tst.w	r1, #1
    3a56:	bf18      	it	ne
    3a58:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a5a:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a5c:	ea84 0102 	eor.w	r1, r4, r2
    3a60:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a62:	ea84 0c03 	eor.w	ip, r4, r3
    3a66:	f011 0f01 	tst.w	r1, #1
    3a6a:	bf18      	it	ne
    3a6c:	4664      	movne	r4, ip
    3a6e:	0861      	lsrs	r1, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a70:	ea84 0252 	eor.w	r2, r4, r2, lsr #1
    3a74:	f012 0f01 	tst.w	r2, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a78:	ea81 0403 	eor.w	r4, r1, r3
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    3a7c:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3a80:	bf18      	it	ne
    3a82:	4621      	movne	r1, r4
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a84:	ea81 0c00 	eor.w	ip, r1, r0
    3a88:	084c      	lsrs	r4, r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3a8a:	ea84 0203 	eor.w	r2, r4, r3
    3a8e:	f01c 0f01 	tst.w	ip, #1
    3a92:	bf18      	it	ne
    3a94:	4614      	movne	r4, r2
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3a96:	f3c0 0246 	ubfx	r2, r0, #1, #7
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a9a:	ea84 0102 	eor.w	r1, r4, r2
    3a9e:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3aa0:	ea84 0c03 	eor.w	ip, r4, r3
    3aa4:	f011 0f01 	tst.w	r1, #1
    3aa8:	bf18      	it	ne
    3aaa:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3aac:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3aae:	ea84 0102 	eor.w	r1, r4, r2
    3ab2:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ab4:	ea84 0c03 	eor.w	ip, r4, r3
    3ab8:	f011 0f01 	tst.w	r1, #1
    3abc:	bf18      	it	ne
    3abe:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3ac0:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3ac2:	ea84 0102 	eor.w	r1, r4, r2
    3ac6:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ac8:	ea84 0c03 	eor.w	ip, r4, r3
    3acc:	f011 0f01 	tst.w	r1, #1
    3ad0:	bf18      	it	ne
    3ad2:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3ad4:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3ad6:	ea84 0102 	eor.w	r1, r4, r2
    3ada:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3adc:	ea84 0c03 	eor.w	ip, r4, r3
    3ae0:	f011 0f01 	tst.w	r1, #1
    3ae4:	bf18      	it	ne
    3ae6:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3ae8:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3aea:	ea84 0102 	eor.w	r1, r4, r2
    3aee:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3af0:	ea84 0c03 	eor.w	ip, r4, r3
    3af4:	f011 0f01 	tst.w	r1, #1
    3af8:	bf18      	it	ne
    3afa:	4664      	movne	r4, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3afc:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3afe:	ea84 0102 	eor.w	r1, r4, r2
    3b02:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b04:	ea84 0c03 	eor.w	ip, r4, r3
    3b08:	f011 0f01 	tst.w	r1, #1
    3b0c:	bf18      	it	ne
    3b0e:	4664      	movne	r4, ip
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b10:	ea84 0252 	eor.w	r2, r4, r2, lsr #1
    3b14:	0864      	lsrs	r4, r4, #1
    3b16:	f012 0f01 	tst.w	r2, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b1a:	ea84 0103 	eor.w	r1, r4, r3
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3b1e:	ea4f 2210 	mov.w	r2, r0, lsr #8
    3b22:	bf14      	ite	ne
    3b24:	4608      	movne	r0, r1
    3b26:	4620      	moveq	r0, r4
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b28:	ea82 0400 	eor.w	r4, r2, r0
    3b2c:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b2e:	ea80 0c03 	eor.w	ip, r0, r3
    3b32:	f014 0f01 	tst.w	r4, #1
    3b36:	bf18      	it	ne
    3b38:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b3a:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b3c:	ea82 0100 	eor.w	r1, r2, r0
    3b40:	0844      	lsrs	r4, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b42:	ea84 0003 	eor.w	r0, r4, r3
    3b46:	f011 0f01 	tst.w	r1, #1
    3b4a:	bf18      	it	ne
    3b4c:	4604      	movne	r4, r0
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b4e:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b50:	ea82 0c04 	eor.w	ip, r2, r4
    3b54:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b56:	ea84 0103 	eor.w	r1, r4, r3
    3b5a:	f01c 0f01 	tst.w	ip, #1
    3b5e:	bf18      	it	ne
    3b60:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b62:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b64:	ea82 0c04 	eor.w	ip, r2, r4
    3b68:	0860      	lsrs	r0, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b6a:	ea80 0403 	eor.w	r4, r0, r3
    3b6e:	f01c 0f01 	tst.w	ip, #1
    3b72:	bf18      	it	ne
    3b74:	4620      	movne	r0, r4
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b76:	0852      	lsrs	r2, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b78:	ea82 0100 	eor.w	r1, r2, r0
    3b7c:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b7e:	ea80 0c03 	eor.w	ip, r0, r3
    3b82:	f011 0f01 	tst.w	r1, #1
    3b86:	bf18      	it	ne
    3b88:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b8a:	0854      	lsrs	r4, r2, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3b8c:	ea84 0200 	eor.w	r2, r4, r0
    3b90:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3b92:	ea80 0103 	eor.w	r1, r0, r3
    3b96:	f012 0f01 	tst.w	r2, #1
    3b9a:	bf18      	it	ne
    3b9c:	4608      	movne	r0, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3b9e:	0864      	lsrs	r4, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3ba0:	ea80 0204 	eor.w	r2, r0, r4
    3ba4:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ba6:	ea80 0c03 	eor.w	ip, r0, r3
    3baa:	f012 0f01 	tst.w	r2, #1
    3bae:	bf18      	it	ne
    3bb0:	4660      	movne	r0, ip
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3bb2:	ea80 0154 	eor.w	r1, r0, r4, lsr #1
    3bb6:	0840      	lsrs	r0, r0, #1
    return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    return crc;
    3bb8:	f011 0f01 	tst.w	r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3bbc:	ea83 0300 	eor.w	r3, r3, r0
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    return crc;
}
    3bc0:	bf18      	it	ne
    3bc2:	4618      	movne	r0, r3
    3bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop

00003bcc <crc16>:
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3bcc:	f24a 0201 	movw	r2, #40961	; 0xa001
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3bd0:	ea81 0300 	eor.w	r3, r1, r0
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
    3bd4:	b410      	push	{r4}
    3bd6:	084c      	lsrs	r4, r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3bd8:	ea84 0102 	eor.w	r1, r4, r2
    3bdc:	f013 0f01 	tst.w	r3, #1
    3be0:	bf18      	it	ne
    3be2:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3be4:	f3c0 0346 	ubfx	r3, r0, #1, #7
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3be8:	ea84 0c03 	eor.w	ip, r4, r3
    3bec:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3bee:	ea84 0102 	eor.w	r1, r4, r2
    3bf2:	f01c 0f01 	tst.w	ip, #1
    3bf6:	bf18      	it	ne
    3bf8:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3bfa:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3bfc:	ea84 0c03 	eor.w	ip, r4, r3
    3c00:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c02:	ea84 0102 	eor.w	r1, r4, r2
    3c06:	f01c 0f01 	tst.w	ip, #1
    3c0a:	bf18      	it	ne
    3c0c:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c0e:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c10:	ea84 0c03 	eor.w	ip, r4, r3
    3c14:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c16:	ea84 0102 	eor.w	r1, r4, r2
    3c1a:	f01c 0f01 	tst.w	ip, #1
    3c1e:	bf18      	it	ne
    3c20:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c22:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c24:	ea84 0c03 	eor.w	ip, r4, r3
    3c28:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c2a:	ea84 0102 	eor.w	r1, r4, r2
    3c2e:	f01c 0f01 	tst.w	ip, #1
    3c32:	bf18      	it	ne
    3c34:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c36:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c38:	ea84 0c03 	eor.w	ip, r4, r3
    3c3c:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c3e:	ea84 0102 	eor.w	r1, r4, r2
    3c42:	f01c 0f01 	tst.w	ip, #1
    3c46:	bf18      	it	ne
    3c48:	460c      	movne	r4, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c4a:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c4c:	ea84 0c03 	eor.w	ip, r4, r3
    3c50:	0864      	lsrs	r4, r4, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c52:	ea84 0102 	eor.w	r1, r4, r2
    3c56:	f01c 0f01 	tst.w	ip, #1
    3c5a:	bf18      	it	ne
    3c5c:	460c      	movne	r4, r1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c5e:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
    3c62:	0864      	lsrs	r4, r4, #1
    3c64:	f013 0f01 	tst.w	r3, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c68:	ea84 0c02 	eor.w	ip, r4, r2
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3c6c:	f3c0 2307 	ubfx	r3, r0, #8, #8
    3c70:	bf14      	ite	ne
    3c72:	4660      	movne	r0, ip
    3c74:	4620      	moveq	r0, r4
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c76:	ea80 0103 	eor.w	r1, r0, r3
    3c7a:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c7c:	ea80 0402 	eor.w	r4, r0, r2
    3c80:	f011 0f01 	tst.w	r1, #1
    3c84:	bf18      	it	ne
    3c86:	4620      	movne	r0, r4
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c88:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c8a:	ea83 0c00 	eor.w	ip, r3, r0
    3c8e:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3c90:	ea80 0102 	eor.w	r1, r0, r2
    3c94:	f01c 0f01 	tst.w	ip, #1
    3c98:	bf18      	it	ne
    3c9a:	4608      	movne	r0, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3c9c:	085c      	lsrs	r4, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3c9e:	ea84 0300 	eor.w	r3, r4, r0
    3ca2:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ca4:	ea80 0c02 	eor.w	ip, r0, r2
    3ca8:	f013 0f01 	tst.w	r3, #1
    3cac:	bf18      	it	ne
    3cae:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3cb0:	0864      	lsrs	r4, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3cb2:	ea80 0104 	eor.w	r1, r0, r4
    3cb6:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3cb8:	ea80 0c02 	eor.w	ip, r0, r2
    3cbc:	f011 0f01 	tst.w	r1, #1
    3cc0:	bf18      	it	ne
    3cc2:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3cc4:	0863      	lsrs	r3, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3cc6:	ea80 0403 	eor.w	r4, r0, r3
    3cca:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ccc:	ea80 0102 	eor.w	r1, r0, r2
    3cd0:	f014 0f01 	tst.w	r4, #1
    3cd4:	bf18      	it	ne
    3cd6:	4608      	movne	r0, r1
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3cd8:	085b      	lsrs	r3, r3, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3cda:	ea80 0403 	eor.w	r4, r0, r3
    3cde:	0840      	lsrs	r0, r0, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3ce0:	ea80 0c02 	eor.w	ip, r0, r2
    3ce4:	f014 0f01 	tst.w	r4, #1
    3ce8:	bf18      	it	ne
    3cea:	4660      	movne	r0, ip
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
        data >>= 1;
    3cec:	085b      	lsrs	r3, r3, #1
    3cee:	0844      	lsrs	r4, r0, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3cf0:	ea80 0103 	eor.w	r1, r0, r3
    3cf4:	f011 0f01 	tst.w	r1, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3cf8:	ea84 0002 	eor.w	r0, r4, r2
    3cfc:	bf18      	it	ne
    3cfe:	4604      	movne	r4, r0
    3d00:	0860      	lsrs	r0, r4, #1
{
    ee_u8 i=0,x16=0,carry=0;

    for (i = 0; i < 8; i++)
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3d02:	ea84 0c53 	eor.w	ip, r4, r3, lsr #1
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
    return crcu16((ee_u16)newval, crc);
    3d06:	f01c 0f01 	tst.w	ip, #1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    3d0a:	ea82 0200 	eor.w	r2, r2, r0
    crc=crc16((ee_s16) (newval>>16) ,crc);
    return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
    return crcu16((ee_u16)newval, crc);
}
    3d0e:	bf18      	it	ne
    3d10:	4610      	movne	r0, r2
    3d12:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d16:	4770      	bx	lr

00003d18 <check_data_types>:
    }
    if (retval>0) {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    }
    return retval;
}
    3d18:	2000      	movs	r0, #0
    3d1a:	4770      	bx	lr

00003d1c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    3d1c:	e7fe      	b.n	3d1c <am_nmi_isr>
    3d1e:	bf00      	nop

00003d20 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    3d20:	e7fe      	b.n	3d20 <am_adc_isr>
    3d22:	bf00      	nop

00003d24 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    3d24:	4811      	ldr	r0, [pc, #68]	; (3d6c <zero_loop+0x12>)
    3d26:	4912      	ldr	r1, [pc, #72]	; (3d70 <zero_loop+0x16>)
    3d28:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    3d2a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    3d2e:	4811      	ldr	r0, [pc, #68]	; (3d74 <zero_loop+0x1a>)
    3d30:	6801      	ldr	r1, [r0, #0]
    3d32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3d36:	6001      	str	r1, [r0, #0]
    3d38:	f3bf 8f4f 	dsb	sy
    3d3c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    3d40:	480d      	ldr	r0, [pc, #52]	; (3d78 <zero_loop+0x1e>)
    3d42:	490e      	ldr	r1, [pc, #56]	; (3d7c <zero_loop+0x22>)
    3d44:	4a0e      	ldr	r2, [pc, #56]	; (3d80 <zero_loop+0x26>)

00003d46 <copy_loop>:
    3d46:	f850 3b04 	ldr.w	r3, [r0], #4
    3d4a:	f841 3b04 	str.w	r3, [r1], #4
    3d4e:	4291      	cmp	r1, r2
    3d50:	dbf9      	blt.n	3d46 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    3d52:	480c      	ldr	r0, [pc, #48]	; (3d84 <zero_loop+0x2a>)
    3d54:	490c      	ldr	r1, [pc, #48]	; (3d88 <zero_loop+0x2e>)
    3d56:	f04f 0200 	mov.w	r2, #0

00003d5a <zero_loop>:
    3d5a:	4288      	cmp	r0, r1
    3d5c:	bfb8      	it	lt
    3d5e:	f840 2b04 	strlt.w	r2, [r0], #4
    3d62:	dbfa      	blt.n	3d5a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    3d64:	f7fd fc28 	bl	15b8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    3d68:	be00      	bkpt	0x0000
    3d6a:	0000      	.short	0x0000
    3d6c:	e000ed08 	.word	0xe000ed08
    3d70:	00000000 	.word	0x00000000
    3d74:	e000ed88 	.word	0xe000ed88
    3d78:	00006078 	.word	0x00006078
    3d7c:	10001000 	.word	0x10001000
    3d80:	10001098 	.word	0x10001098
    3d84:	10001098 	.word	0x10001098
    3d88:	100015c0 	.word	0x100015c0

00003d8c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    3d8c:	b510      	push	{r4, lr}
    3d8e:	4604      	mov	r4, r0
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
    3d90:	f001 fa96 	bl	52c0 <am_hal_clkgen_sysclk_get>

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    3d94:	4b04      	ldr	r3, [pc, #16]	; (3da8 <am_util_delay_ms+0x1c>)
    3d96:	fba3 3000 	umull	r3, r0, r3, r0
    3d9a:	0980      	lsrs	r0, r0, #6
    3d9c:	fb04 f000 	mul.w	r0, r4, r0
}
    3da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    3da4:	f001 baca 	b.w	533c <am_hal_flash_delay>
    3da8:	057619f1 	.word	0x057619f1

00003dac <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    3dac:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    3dae:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    3db0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    3db2:	f000 f805 	bl	3dc0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    3db6:	bd01      	pop	{r0, pc}

00003db8 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    3db8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    3dba:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    3dbc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    3dbe:	4770      	bx	lr

00003dc0 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    3dc0:	b500      	push	{lr}
    3dc2:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3dc4:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    3dc6:	4a2d      	ldr	r2, [pc, #180]	; (3e7c <am_util_faultisr_collect_data+0xbc>)
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    3dc8:	9310      	str	r3, [sp, #64]	; 0x40
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3dca:	9301      	str	r3, [sp, #4]
    3dcc:	9300      	str	r3, [sp, #0]
    3dce:	9302      	str	r3, [sp, #8]
    3dd0:	9303      	str	r3, [sp, #12]
    3dd2:	9304      	str	r3, [sp, #16]
    3dd4:	9305      	str	r3, [sp, #20]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    3dd6:	6811      	ldr	r1, [r2, #0]
    3dd8:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    3dda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ddc:	b2d9      	uxtb	r1, r3
    3dde:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    3de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3de4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3de8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    3dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3dee:	0c19      	lsrs	r1, r3, #16
    3df0:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    3df4:	6912      	ldr	r2, [r2, #16]
    3df6:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3df8:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    3dfc:	078a      	lsls	r2, r1, #30
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    3dfe:	4603      	mov	r3, r0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3e00:	d436      	bmi.n	3e70 <am_util_faultisr_collect_data+0xb0>
    3e02:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3e06:	4619      	mov	r1, r3
    3e08:	2000      	movs	r0, #0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3e0a:	920e      	str	r2, [sp, #56]	; 0x38

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3e0c:	f7ff ffd4 	bl	3db8 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3e10:	4619      	mov	r1, r3

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3e12:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3e14:	2001      	movs	r0, #1

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3e16:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3e18:	f7ff ffce 	bl	3db8 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3e1c:	4619      	mov	r1, r3
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3e1e:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3e20:	2002      	movs	r0, #2
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3e22:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3e24:	f7ff ffc8 	bl	3db8 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3e28:	4619      	mov	r1, r3
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3e2a:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3e2c:	2003      	movs	r0, #3
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3e2e:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3e30:	f7ff ffc2 	bl	3db8 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3e34:	4619      	mov	r1, r3
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3e36:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3e38:	2004      	movs	r0, #4
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3e3a:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3e3c:	f7ff ffbc 	bl	3db8 <getStackedReg>
    3e40:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3e42:	4619      	mov	r1, r3
    3e44:	2005      	movs	r0, #5
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3e46:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3e48:	f7ff ffb6 	bl	3db8 <getStackedReg>
    3e4c:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3e4e:	4619      	mov	r1, r3
    3e50:	2006      	movs	r0, #6
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3e52:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3e54:	f7ff ffb0 	bl	3db8 <getStackedReg>
    3e58:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3e5a:	4619      	mov	r1, r3
    3e5c:	2007      	movs	r0, #7
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3e5e:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3e60:	f7ff ffaa 	bl	3db8 <getStackedReg>
    3e64:	4601      	mov	r1, r0

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3e66:	4668      	mov	r0, sp
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3e68:	910d      	str	r1, [sp, #52]	; 0x34

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3e6a:	f001 fa6d 	bl	5348 <am_hal_mcuctrl_fault_status>
    3e6e:	e7fe      	b.n	3e6e <am_util_faultisr_collect_data+0xae>

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3e70:	4601      	mov	r1, r0
    3e72:	2006      	movs	r0, #6
    3e74:	f7ff ffa0 	bl	3db8 <getStackedReg>
    3e78:	4602      	mov	r2, r0
    3e7a:	e7c4      	b.n	3e06 <am_util_faultisr_collect_data+0x46>
    3e7c:	e000ed28 	.word	0xe000ed28

00003e80 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    3e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e84:	b097      	sub	sp, #92	; 0x5c
    3e86:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
    3e8a:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3e8c:	2001      	movs	r0, #1
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    3e8e:	460d      	mov	r5, r1
    3e90:	920d      	str	r2, [sp, #52]	; 0x34
    3e92:	46f4      	mov	ip, lr
    3e94:	900c      	str	r0, [sp, #48]	; 0x30
    3e96:	e00b      	b.n	3eb0 <uint64_to_str+0x30>
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3e98:	f88c 3000 	strb.w	r3, [ip]
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    3e9c:	4604      	mov	r4, r0
    3e9e:	2500      	movs	r5, #0
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
        ui64Val = u64Tmp;
    } while ( ui64Val );
    3ea0:	2800      	cmp	r0, #0
    3ea2:	f000 8091 	beq.w	3fc8 <uint64_to_str+0x148>
    3ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ea8:	3101      	adds	r1, #1
    3eaa:	910c      	str	r1, [sp, #48]	; 0x30
    3eac:	f10c 0c01 	add.w	ip, ip, #1
        return q64 + ((r64 + 6) >> 4);
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    3eb0:	08a3      	lsrs	r3, r4, #2
    3eb2:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    3eb6:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    3eba:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    3ebe:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    3ec2:	08f8      	lsrs	r0, r7, #3
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    3ec4:	1da3      	adds	r3, r4, #6
    3ec6:	eb00 0880 	add.w	r8, r0, r0, lsl #2
    3eca:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    3ece:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3ed2:	462e      	mov	r6, r5
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3ed4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3ed8:	2700      	movs	r7, #0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3eda:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3ede:	ea56 0107 	orrs.w	r1, r6, r7
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3ee2:	f103 0330 	add.w	r3, r3, #48	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3ee6:	d0d7      	beq.n	3e98 <uint64_to_str+0x18>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    3ee8:	08a0      	lsrs	r0, r4, #2
    3eea:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    3eee:	08ae      	lsrs	r6, r5, #2
    3ef0:	9306      	str	r3, [sp, #24]
    3ef2:	9607      	str	r6, [sp, #28]
    3ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3ef8:	086b      	lsrs	r3, r5, #1
    3efa:	ea4f 0234 	mov.w	r2, r4, rrx
    3efe:	eb10 0b02 	adds.w	fp, r0, r2
    3f02:	eb41 0803 	adc.w	r8, r1, r3
    3f06:	465a      	mov	r2, fp
    3f08:	4643      	mov	r3, r8
        q64 += (q64 >> 4);
    3f0a:	0911      	lsrs	r1, r2, #4
    3f0c:	ea41 7008 	orr.w	r0, r1, r8, lsl #28
    3f10:	091e      	lsrs	r6, r3, #4
    3f12:	9601      	str	r6, [sp, #4]
    3f14:	9000      	str	r0, [sp, #0]
    3f16:	e9dd 0100 	ldrd	r0, r1, [sp]
    3f1a:	eb10 090b 	adds.w	r9, r0, fp
    3f1e:	eb41 0a08 	adc.w	sl, r1, r8
    3f22:	464a      	mov	r2, r9
    3f24:	4653      	mov	r3, sl
        q64 += (q64 >> 8);
    3f26:	0a11      	lsrs	r1, r2, #8
    3f28:	ea41 600a 	orr.w	r0, r1, sl, lsl #24
    3f2c:	0a1e      	lsrs	r6, r3, #8
    3f2e:	9603      	str	r6, [sp, #12]
    3f30:	9002      	str	r0, [sp, #8]
    3f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3f36:	eb10 0b09 	adds.w	fp, r0, r9
    3f3a:	eb41 080a 	adc.w	r8, r1, sl
    3f3e:	465a      	mov	r2, fp
    3f40:	4643      	mov	r3, r8
        q64 += (q64 >> 16);
    3f42:	0c11      	lsrs	r1, r2, #16
    3f44:	ea41 4008 	orr.w	r0, r1, r8, lsl #16
    3f48:	0c1e      	lsrs	r6, r3, #16
    3f4a:	9605      	str	r6, [sp, #20]
    3f4c:	9004      	str	r0, [sp, #16]
    3f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3f52:	eb10 090b 	adds.w	r9, r0, fp
    3f56:	eb41 0a08 	adc.w	sl, r1, r8
        q64 += (q64 >> 32);
    3f5a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    3f5e:	970b      	str	r7, [sp, #44]	; 0x2c
    3f60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3f64:	eb10 0709 	adds.w	r7, r0, r9
    3f68:	eb41 080a 	adc.w	r8, r1, sl
        q64 >>= 3;
    3f6c:	08f8      	lsrs	r0, r7, #3
    3f6e:	ea40 7648 	orr.w	r6, r0, r8, lsl #29
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
    3f72:	4643      	mov	r3, r8
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    3f74:	19b2      	adds	r2, r6, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    3f76:	ea4f 07d3 	mov.w	r7, r3, lsr #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    3f7a:	eb47 0307 	adc.w	r3, r7, r7
    3f7e:	0099      	lsls	r1, r3, #2
    3f80:	ea41 7092 	orr.w	r0, r1, r2, lsr #30
    3f84:	0091      	lsls	r1, r2, #2
    3f86:	9009      	str	r0, [sp, #36]	; 0x24
    3f88:	9108      	str	r1, [sp, #32]
    3f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3f8e:	eb10 0902 	adds.w	r9, r0, r2
    3f92:	eb41 0a03 	adc.w	sl, r1, r3
    3f96:	1da2      	adds	r2, r4, #6
    3f98:	f145 0500 	adc.w	r5, r5, #0
    3f9c:	ebb2 0309 	subs.w	r3, r2, r9
    3fa0:	eb65 000a 	sbc.w	r0, r5, sl
    3fa4:	091a      	lsrs	r2, r3, #4
    3fa6:	ea42 7500 	orr.w	r5, r2, r0, lsl #28
    3faa:	1976      	adds	r6, r6, r5
    3fac:	ea4f 1310 	mov.w	r3, r0, lsr #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3fb0:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    3fb4:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
    3fb8:	f104 0430 	add.w	r4, r4, #48	; 0x30
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    3fbc:	415f      	adcs	r7, r3
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3fbe:	f88c 4000 	strb.w	r4, [ip]
    3fc2:	463d      	mov	r5, r7
    3fc4:	4634      	mov	r4, r6
    3fc6:	e76e      	b.n	3ea6 <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    3fc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3fca:	980c      	ldr	r0, [sp, #48]	; 0x30
    3fcc:	2e00      	cmp	r6, #0
    3fce:	d059      	beq.n	4084 <uint64_to_str+0x204>
    3fd0:	eb0e 0a00 	add.w	sl, lr, r0
    3fd4:	46d3      	mov	fp, sl
    3fd6:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    3fda:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    3fde:	7037      	strb	r7, [r6, #0]
    3fe0:	44d4      	add	ip, sl
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    3fe2:	45de      	cmp	lr, fp
    3fe4:	4632      	mov	r2, r6
    3fe6:	f00c 0107 	and.w	r1, ip, #7
    3fea:	bf08      	it	eq
    3fec:	4632      	moveq	r2, r6
    3fee:	d047      	beq.n	4080 <uint64_to_str+0x200>
    3ff0:	b349      	cbz	r1, 4046 <uint64_to_str+0x1c6>
    3ff2:	2901      	cmp	r1, #1
    3ff4:	d021      	beq.n	403a <uint64_to_str+0x1ba>
    3ff6:	2902      	cmp	r1, #2
    3ff8:	d01b      	beq.n	4032 <uint64_to_str+0x1b2>
    3ffa:	2903      	cmp	r1, #3
    3ffc:	d015      	beq.n	402a <uint64_to_str+0x1aa>
    3ffe:	2904      	cmp	r1, #4
    4000:	d00f      	beq.n	4022 <uint64_to_str+0x1a2>
    4002:	2905      	cmp	r1, #5
    4004:	d009      	beq.n	401a <uint64_to_str+0x19a>
    4006:	2906      	cmp	r1, #6
        {
            *pcBuf++ = tbuf[ix];
    4008:	bf1c      	itt	ne
    400a:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    400e:	f802 1f01 	strbne.w	r1, [r2, #1]!
    4012:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    4016:	f802 3f01 	strb.w	r3, [r2, #1]!
    401a:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    401e:	f802 6f01 	strb.w	r6, [r2, #1]!
    4022:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    4026:	f802 4f01 	strb.w	r4, [r2, #1]!
    402a:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    402e:	f802 7f01 	strb.w	r7, [r2, #1]!
    4032:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    4036:	f802 5f01 	strb.w	r5, [r2, #1]!
    403a:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    403e:	f802 8f01 	strb.w	r8, [r2, #1]!
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    4042:	45de      	cmp	lr, fp
    4044:	d01b      	beq.n	407e <uint64_to_str+0x1fe>
        {
            *pcBuf++ = tbuf[ix];
    4046:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    404a:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    404e:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    4052:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    4056:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    405a:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    405e:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    4062:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    4066:	7051      	strb	r1, [r2, #1]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    4068:	45de      	cmp	lr, fp
        {
            *pcBuf++ = tbuf[ix];
    406a:	7093      	strb	r3, [r2, #2]
    406c:	f882 9003 	strb.w	r9, [r2, #3]
    4070:	7117      	strb	r7, [r2, #4]
    4072:	7156      	strb	r6, [r2, #5]
    4074:	7195      	strb	r5, [r2, #6]
    4076:	71d4      	strb	r4, [r2, #7]
    4078:	f802 af08 	strb.w	sl, [r2, #8]!
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    407c:	d1e3      	bne.n	4046 <uint64_to_str+0x1c6>
    407e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    4080:	2100      	movs	r1, #0
    4082:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    4084:	b017      	add	sp, #92	; 0x5c
    4086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    408a:	bf00      	nop

0000408c <am_util_stdio_printf_init>:
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    g_pfnCharPrint = pfnCharPrint;
    408c:	4b01      	ldr	r3, [pc, #4]	; (4094 <am_util_stdio_printf_init+0x8>)
    408e:	6018      	str	r0, [r3, #0]
    4090:	4770      	bx	lr
    4092:	bf00      	nop
    4094:	100015bc 	.word	0x100015bc

00004098 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    4098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    409c:	b0b3      	sub	sp, #204	; 0xcc
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    409e:	f04f 0a00 	mov.w	sl, #0
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    40a2:	9224      	str	r2, [sp, #144]	; 0x90
    40a4:	4604      	mov	r4, r0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    40a6:	780b      	ldrb	r3, [r1, #0]
    40a8:	b16b      	cbz	r3, 40c6 <am_util_stdio_vsprintf+0x2e>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    40aa:	2b25      	cmp	r3, #37	; 0x25
    40ac:	d011      	beq.n	40d2 <am_util_stdio_vsprintf+0x3a>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    40ae:	b124      	cbz	r4, 40ba <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    40b0:	2b0a      	cmp	r3, #10
    40b2:	f000 8085 	beq.w	41c0 <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    40b6:	7023      	strb	r3, [r4, #0]
    40b8:	3401      	adds	r4, #1
            }

            ++pcFmt;
    40ba:	3101      	adds	r1, #1
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    40bc:	780b      	ldrb	r3, [r1, #0]
                }
                *pcBuf++ = *pcFmt;
            }

            ++pcFmt;
            ++ui32CharCnt;
    40be:	f10a 0a01 	add.w	sl, sl, #1
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    40c2:	2b00      	cmp	r3, #0
    40c4:	d1f1      	bne.n	40aa <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    40c6:	b104      	cbz	r4, 40ca <am_util_stdio_vsprintf+0x32>
    {
        *pcBuf = 0x0;
    40c8:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    40ca:	4650      	mov	r0, sl
    40cc:	b033      	add	sp, #204	; 0xcc
    40ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    40d2:	f891 c001 	ldrb.w	ip, [r1, #1]
    40d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    40da:	f000 819e 	beq.w	441a <am_util_stdio_vsprintf+0x382>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    40de:	4663      	mov	r3, ip
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    40e0:	2b2d      	cmp	r3, #45	; 0x2d
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    40e2:	f101 0b01 	add.w	fp, r1, #1
        bLower = bLongLong = false;

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    40e6:	f04f 0c20 	mov.w	ip, #32
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    40ea:	f000 819c 	beq.w	4426 <am_util_stdio_vsprintf+0x38e>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    40ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    40f2:	2a09      	cmp	r2, #9
    40f4:	f200 85b5 	bhi.w	4c62 <am_util_stdio_vsprintf+0xbca>
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    40f8:	2200      	movs	r2, #0
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    40fa:	4610      	mov	r0, r2
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    40fc:	4659      	mov	r1, fp
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    40fe:	f04f 0e00 	mov.w	lr, #0
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    4102:	eb0e 058e 	add.w	r5, lr, lr, lsl #2
    4106:	eb03 0e45 	add.w	lr, r3, r5, lsl #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    410a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    410e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    4112:	2d09      	cmp	r5, #9
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    4114:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    {
        ++uCnt;
    4118:	f102 0201 	add.w	r2, r2, #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    411c:	d9f1      	bls.n	4102 <am_util_stdio_vsprintf+0x6a>
    if ( pui32CharCnt )
    {
        *pui32CharCnt = uCnt;
    }

    return bNeg ? -ui32Val : ui32Val;
    411e:	2800      	cmp	r0, #0
    4120:	d05a      	beq.n	41d8 <am_util_stdio_vsprintf+0x140>
    4122:	f81b 3002 	ldrb.w	r3, [fp, r2]
    4126:	f1ce 0e00 	rsb	lr, lr, #0
    412a:	eb0b 0102 	add.w	r1, fp, r2
    412e:	468b      	mov	fp, r1
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    4130:	2b73      	cmp	r3, #115	; 0x73
    4132:	d056      	beq.n	41e2 <am_util_stdio_vsprintf+0x14a>
    4134:	f1be 0f00 	cmp.w	lr, #0
    4138:	bfb8      	it	lt
    413a:	f1ce 0e00 	rsblt	lr, lr, #0
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    413e:	2b2e      	cmp	r3, #46	; 0x2e
    4140:	f000 8188 	beq.w	4454 <am_util_stdio_vsprintf+0x3bc>
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    4144:	2506      	movs	r5, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    4146:	2b6c      	cmp	r3, #108	; 0x6c
    4148:	f000 8179 	beq.w	443e <am_util_stdio_vsprintf+0x3a6>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    414c:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    4150:	2a32      	cmp	r2, #50	; 0x32
    4152:	f200 8558 	bhi.w	4c06 <am_util_stdio_vsprintf+0xb6e>
    4156:	e8df f012 	tbh	[pc, r2, lsl #1]
    415a:	029e      	.short	0x029e
    415c:	05560556 	.word	0x05560556
    4160:	05560556 	.word	0x05560556
    4164:	05560556 	.word	0x05560556
    4168:	05560556 	.word	0x05560556
    416c:	05560556 	.word	0x05560556
    4170:	05560556 	.word	0x05560556
    4174:	05560556 	.word	0x05560556
    4178:	05560556 	.word	0x05560556
    417c:	01a20556 	.word	0x01a20556
    4180:	05560556 	.word	0x05560556
    4184:	05560556 	.word	0x05560556
    4188:	05560556 	.word	0x05560556
    418c:	05560556 	.word	0x05560556
    4190:	05560556 	.word	0x05560556
    4194:	040102ba 	.word	0x040102ba
    4198:	029e0556 	.word	0x029e0556
    419c:	05560556 	.word	0x05560556
    41a0:	05560401 	.word	0x05560401
    41a4:	05560556 	.word	0x05560556
    41a8:	05560556 	.word	0x05560556
    41ac:	05560556 	.word	0x05560556
    41b0:	05560556 	.word	0x05560556
    41b4:	05560044 	.word	0x05560044
    41b8:	055602ca 	.word	0x055602ca
    41bc:	02c70556 	.word	0x02c70556
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    41c0:	4da3      	ldr	r5, [pc, #652]	; (4450 <am_util_stdio_vsprintf+0x3b8>)
    41c2:	7828      	ldrb	r0, [r5, #0]
    41c4:	2800      	cmp	r0, #0
    41c6:	f43f af76 	beq.w	40b6 <am_util_stdio_vsprintf+0x1e>
                {
                    *pcBuf++ = '\r';
    41ca:	230d      	movs	r3, #13
    41cc:	7023      	strb	r3, [r4, #0]
                    ++ui32CharCnt;
    41ce:	f10a 0a01 	add.w	sl, sl, #1
            if ( pcBuf )
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
                {
                    *pcBuf++ = '\r';
    41d2:	3401      	adds	r4, #1
    41d4:	780b      	ldrb	r3, [r1, #0]
    41d6:	e76e      	b.n	40b6 <am_util_stdio_vsprintf+0x1e>
    41d8:	f81b 3002 	ldrb.w	r3, [fp, r2]
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    41dc:	2b73      	cmp	r3, #115	; 0x73
    if ( pui32CharCnt )
    {
        *pui32CharCnt = uCnt;
    }

    return bNeg ? -ui32Val : ui32Val;
    41de:	4493      	add	fp, r2
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    41e0:	d1a8      	bne.n	4134 <am_util_stdio_vsprintf+0x9c>

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    41e2:	9e24      	ldr	r6, [sp, #144]	; 0x90
    41e4:	4633      	mov	r3, r6
    41e6:	6836      	ldr	r6, [r6, #0]
    41e8:	1d18      	adds	r0, r3, #4
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    41ea:	2e00      	cmp	r6, #0
    41ec:	f000 863c 	beq.w	4e68 <am_util_stdio_vsprintf+0xdd0>
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
    41f0:	7832      	ldrb	r2, [r6, #0]
    41f2:	1c73      	adds	r3, r6, #1
    41f4:	4619      	mov	r1, r3
    41f6:	2a00      	cmp	r2, #0
    41f8:	f000 870b 	beq.w	5012 <am_util_stdio_vsprintf+0xf7a>
    41fc:	1b8f      	subs	r7, r1, r6
    41fe:	f811 5b01 	ldrb.w	r5, [r1], #1
    4202:	2d00      	cmp	r5, #0
    4204:	d1fa      	bne.n	41fc <am_util_stdio_vsprintf+0x164>
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    4206:	f1be 0f00 	cmp.w	lr, #0
    420a:	dd7c      	ble.n	4306 <am_util_stdio_vsprintf+0x26e>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    420c:	4577      	cmp	r7, lr
    420e:	d27a      	bcs.n	4306 <am_util_stdio_vsprintf+0x26e>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    4210:	ebc7 0e0e 	rsb	lr, r7, lr
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4214:	f1be 0f00 	cmp.w	lr, #0
    4218:	f340 86ec 	ble.w	4ff4 <am_util_stdio_vsprintf+0xf5c>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    421c:	f10e 35ff 	add.w	r5, lr, #4294967295
    4220:	f005 0107 	and.w	r1, r5, #7
    4224:	4623      	mov	r3, r4
    {
        if ( pcBuf )
    4226:	b114      	cbz	r4, 422e <am_util_stdio_vsprintf+0x196>
        {
            *pcBuf++ = cPadChar;
    4228:	f884 c000 	strb.w	ip, [r4]
    422c:	1c63      	adds	r3, r4, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    422e:	1e6a      	subs	r2, r5, #1
    4230:	2d00      	cmp	r5, #0
    4232:	d05b      	beq.n	42ec <am_util_stdio_vsprintf+0x254>
    4234:	b381      	cbz	r1, 4298 <am_util_stdio_vsprintf+0x200>
    4236:	2901      	cmp	r1, #1
    4238:	d027      	beq.n	428a <am_util_stdio_vsprintf+0x1f2>
    423a:	2902      	cmp	r1, #2
    423c:	d020      	beq.n	4280 <am_util_stdio_vsprintf+0x1e8>
    423e:	2903      	cmp	r1, #3
    4240:	d019      	beq.n	4276 <am_util_stdio_vsprintf+0x1de>
    4242:	2904      	cmp	r1, #4
    4244:	d012      	beq.n	426c <am_util_stdio_vsprintf+0x1d4>
    4246:	2905      	cmp	r1, #5
    4248:	d00b      	beq.n	4262 <am_util_stdio_vsprintf+0x1ca>
    424a:	2906      	cmp	r1, #6
    424c:	d004      	beq.n	4258 <am_util_stdio_vsprintf+0x1c0>
    {
        if ( pcBuf )
    424e:	b113      	cbz	r3, 4256 <am_util_stdio_vsprintf+0x1be>
        {
            *pcBuf++ = cPadChar;
    4250:	f883 c000 	strb.w	ip, [r3]
    4254:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4256:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4258:	b113      	cbz	r3, 4260 <am_util_stdio_vsprintf+0x1c8>
        {
            *pcBuf++ = cPadChar;
    425a:	f883 c000 	strb.w	ip, [r3]
    425e:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4260:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4262:	b113      	cbz	r3, 426a <am_util_stdio_vsprintf+0x1d2>
        {
            *pcBuf++ = cPadChar;
    4264:	f883 c000 	strb.w	ip, [r3]
    4268:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    426a:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    426c:	b113      	cbz	r3, 4274 <am_util_stdio_vsprintf+0x1dc>
        {
            *pcBuf++ = cPadChar;
    426e:	f883 c000 	strb.w	ip, [r3]
    4272:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4274:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4276:	b113      	cbz	r3, 427e <am_util_stdio_vsprintf+0x1e6>
        {
            *pcBuf++ = cPadChar;
    4278:	f883 c000 	strb.w	ip, [r3]
    427c:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    427e:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4280:	b113      	cbz	r3, 4288 <am_util_stdio_vsprintf+0x1f0>
        {
            *pcBuf++ = cPadChar;
    4282:	f883 c000 	strb.w	ip, [r3]
    4286:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4288:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    428a:	b113      	cbz	r3, 4292 <am_util_stdio_vsprintf+0x1fa>
        {
            *pcBuf++ = cPadChar;
    428c:	f883 c000 	strb.w	ip, [r3]
    4290:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4292:	f112 32ff 	adds.w	r2, r2, #4294967295
    4296:	d329      	bcc.n	42ec <am_util_stdio_vsprintf+0x254>
    {
        if ( pcBuf )
    4298:	b113      	cbz	r3, 42a0 <am_util_stdio_vsprintf+0x208>
        {
            *pcBuf++ = cPadChar;
    429a:	f883 c000 	strb.w	ip, [r3]
    429e:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    42a0:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    42a2:	b303      	cbz	r3, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42a4:	1c5d      	adds	r5, r3, #1
    42a6:	f883 c000 	strb.w	ip, [r3]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42aa:	462b      	mov	r3, r5
    42ac:	b1dd      	cbz	r5, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42ae:	1c69      	adds	r1, r5, #1
    42b0:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42b4:	460b      	mov	r3, r1
    42b6:	b1b1      	cbz	r1, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42b8:	1c4d      	adds	r5, r1, #1
    42ba:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42be:	462b      	mov	r3, r5
    42c0:	b18d      	cbz	r5, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42c2:	1c69      	adds	r1, r5, #1
    42c4:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42c8:	460b      	mov	r3, r1
    42ca:	b161      	cbz	r1, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42cc:	1c4d      	adds	r5, r1, #1
    42ce:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42d2:	462b      	mov	r3, r5
    42d4:	b13d      	cbz	r5, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42d6:	1c69      	adds	r1, r5, #1
    42d8:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    42dc:	460b      	mov	r3, r1
    42de:	b111      	cbz	r1, 42e6 <am_util_stdio_vsprintf+0x24e>
        {
            *pcBuf++ = cPadChar;
    42e0:	f881 c000 	strb.w	ip, [r1]
    42e4:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    42e6:	3a07      	subs	r2, #7
    42e8:	1c55      	adds	r5, r2, #1
    42ea:	d1d5      	bne.n	4298 <am_util_stdio_vsprintf+0x200>
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    42ec:	2c00      	cmp	r4, #0
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    42ee:	7832      	ldrb	r2, [r6, #0]
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
    42f0:	44f2      	add	sl, lr
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    42f2:	bf08      	it	eq
    42f4:	f04f 0e00 	moveq.w	lr, #0
    42f8:	4474      	add	r4, lr
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    42fa:	2a00      	cmp	r2, #0
    42fc:	f000 8489 	beq.w	4c12 <am_util_stdio_vsprintf+0xb7a>
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
    4300:	f04f 0e00 	mov.w	lr, #0
    4304:	1c73      	adds	r3, r6, #1
    4306:	ebc6 060a 	rsb	r6, r6, sl
    430a:	eb06 0a03 	add.w	sl, r6, r3
                    }
                }

                while (*pcStr != 0x0)
                {
                    if ( pcBuf )
    430e:	b10c      	cbz	r4, 4314 <am_util_stdio_vsprintf+0x27c>
                    {
                        *pcBuf++ = *pcStr;
    4310:	7022      	strb	r2, [r4, #0]
    4312:	3401      	adds	r4, #1
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    4314:	f813 2b01 	ldrb.w	r2, [r3], #1
    4318:	2a00      	cmp	r2, #0
    431a:	d1f6      	bne.n	430a <am_util_stdio_vsprintf+0x272>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    431c:	f1be 0f00 	cmp.w	lr, #0
    4320:	f000 8477 	beq.w	4c12 <am_util_stdio_vsprintf+0xb7a>
                {
                    iWidth = -iWidth;

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    4324:	f1ce 0e00 	rsb	lr, lr, #0
    4328:	45be      	cmp	lr, r7
    432a:	f240 8472 	bls.w	4c12 <am_util_stdio_vsprintf+0xb7a>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    432e:	ebc7 0e0e 	rsb	lr, r7, lr
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4332:	f1be 0f00 	cmp.w	lr, #0
    4336:	f340 8678 	ble.w	502a <am_util_stdio_vsprintf+0xf92>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    433a:	f10e 35ff 	add.w	r5, lr, #4294967295
    433e:	f005 0107 	and.w	r1, r5, #7
    4342:	4623      	mov	r3, r4
    {
        if ( pcBuf )
    4344:	b114      	cbz	r4, 434c <am_util_stdio_vsprintf+0x2b4>
        {
            *pcBuf++ = cPadChar;
    4346:	f884 c000 	strb.w	ip, [r4]
    434a:	1c63      	adds	r3, r4, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    434c:	1e6a      	subs	r2, r5, #1
    434e:	2d00      	cmp	r5, #0
    4350:	d05b      	beq.n	440a <am_util_stdio_vsprintf+0x372>
    4352:	b381      	cbz	r1, 43b6 <am_util_stdio_vsprintf+0x31e>
    4354:	2901      	cmp	r1, #1
    4356:	d027      	beq.n	43a8 <am_util_stdio_vsprintf+0x310>
    4358:	2902      	cmp	r1, #2
    435a:	d020      	beq.n	439e <am_util_stdio_vsprintf+0x306>
    435c:	2903      	cmp	r1, #3
    435e:	d019      	beq.n	4394 <am_util_stdio_vsprintf+0x2fc>
    4360:	2904      	cmp	r1, #4
    4362:	d012      	beq.n	438a <am_util_stdio_vsprintf+0x2f2>
    4364:	2905      	cmp	r1, #5
    4366:	d00b      	beq.n	4380 <am_util_stdio_vsprintf+0x2e8>
    4368:	2906      	cmp	r1, #6
    436a:	d004      	beq.n	4376 <am_util_stdio_vsprintf+0x2de>
    {
        if ( pcBuf )
    436c:	b113      	cbz	r3, 4374 <am_util_stdio_vsprintf+0x2dc>
        {
            *pcBuf++ = cPadChar;
    436e:	f883 c000 	strb.w	ip, [r3]
    4372:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4374:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4376:	b113      	cbz	r3, 437e <am_util_stdio_vsprintf+0x2e6>
        {
            *pcBuf++ = cPadChar;
    4378:	f883 c000 	strb.w	ip, [r3]
    437c:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    437e:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4380:	b113      	cbz	r3, 4388 <am_util_stdio_vsprintf+0x2f0>
        {
            *pcBuf++ = cPadChar;
    4382:	f883 c000 	strb.w	ip, [r3]
    4386:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4388:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    438a:	b113      	cbz	r3, 4392 <am_util_stdio_vsprintf+0x2fa>
        {
            *pcBuf++ = cPadChar;
    438c:	f883 c000 	strb.w	ip, [r3]
    4390:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4392:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    4394:	b113      	cbz	r3, 439c <am_util_stdio_vsprintf+0x304>
        {
            *pcBuf++ = cPadChar;
    4396:	f883 c000 	strb.w	ip, [r3]
    439a:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    439c:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    439e:	b113      	cbz	r3, 43a6 <am_util_stdio_vsprintf+0x30e>
        {
            *pcBuf++ = cPadChar;
    43a0:	f883 c000 	strb.w	ip, [r3]
    43a4:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    43a6:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    43a8:	b113      	cbz	r3, 43b0 <am_util_stdio_vsprintf+0x318>
        {
            *pcBuf++ = cPadChar;
    43aa:	f883 c000 	strb.w	ip, [r3]
    43ae:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    43b0:	f112 32ff 	adds.w	r2, r2, #4294967295
    43b4:	d329      	bcc.n	440a <am_util_stdio_vsprintf+0x372>
    {
        if ( pcBuf )
    43b6:	b113      	cbz	r3, 43be <am_util_stdio_vsprintf+0x326>
        {
            *pcBuf++ = cPadChar;
    43b8:	f883 c000 	strb.w	ip, [r3]
    43bc:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    43be:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    43c0:	b303      	cbz	r3, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43c2:	1c5d      	adds	r5, r3, #1
    43c4:	f883 c000 	strb.w	ip, [r3]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43c8:	462b      	mov	r3, r5
    43ca:	b1dd      	cbz	r5, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43cc:	1c69      	adds	r1, r5, #1
    43ce:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43d2:	460b      	mov	r3, r1
    43d4:	b1b1      	cbz	r1, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43d6:	1c4d      	adds	r5, r1, #1
    43d8:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43dc:	462b      	mov	r3, r5
    43de:	b18d      	cbz	r5, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43e0:	1c69      	adds	r1, r5, #1
    43e2:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43e6:	460b      	mov	r3, r1
    43e8:	b161      	cbz	r1, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43ea:	1c4d      	adds	r5, r1, #1
    43ec:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43f0:	462b      	mov	r3, r5
    43f2:	b13d      	cbz	r5, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43f4:	1c69      	adds	r1, r5, #1
    43f6:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    43fa:	460b      	mov	r3, r1
    43fc:	b111      	cbz	r1, 4404 <am_util_stdio_vsprintf+0x36c>
        {
            *pcBuf++ = cPadChar;
    43fe:	f881 c000 	strb.w	ip, [r1]
    4402:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4404:	3a07      	subs	r2, #7
    4406:	1c51      	adds	r1, r2, #1
    4408:	d1d5      	bne.n	43b6 <am_util_stdio_vsprintf+0x31e>
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    440a:	2c00      	cmp	r4, #0
    440c:	bf14      	ite	ne
    440e:	4673      	movne	r3, lr
    4410:	2300      	moveq	r3, #0
                        ui32CharCnt += iWidth;
    4412:	44f2      	add	sl, lr
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    4414:	441c      	add	r4, r3

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    4416:	9024      	str	r0, [sp, #144]	; 0x90
    4418:	e163      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>
    441a:	788b      	ldrb	r3, [r1, #2]
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    441c:	2b2d      	cmp	r3, #45	; 0x2d
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
        {
            ui8PadChar = '0';
            ++pcFmt;
    441e:	f101 0b02 	add.w	fp, r1, #2
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    4422:	f47f ae64 	bne.w	40ee <am_util_stdio_vsprintf+0x56>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4426:	f89b 3001 	ldrb.w	r3, [fp, #1]
    442a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    442e:	2d09      	cmp	r5, #9
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
    4430:	f10b 0101 	add.w	r1, fp, #1
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4434:	f200 8644 	bhi.w	50c0 <am_util_stdio_vsprintf+0x1028>

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    4438:	2201      	movs	r2, #1
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    443a:	4610      	mov	r0, r2
    443c:	e65f      	b.n	40fe <am_util_stdio_vsprintf+0x66>
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    443e:	f89b 3001 	ldrb.w	r3, [fp, #1]
    4442:	2b6c      	cmp	r3, #108	; 0x6c
    4444:	f000 8420 	beq.w	4c88 <am_util_stdio_vsprintf+0xbf0>
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
    4448:	f10b 0b01 	add.w	fp, fp, #1
    444c:	e67e      	b.n	414c <am_util_stdio_vsprintf+0xb4>
    444e:	bf00      	nop
    4450:	100010b4 	.word	0x100010b4
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    4454:	f89b 2001 	ldrb.w	r2, [fp, #1]
    4458:	2a2d      	cmp	r2, #45	; 0x2d
        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
        {
            ++pcFmt;
    445a:	f10b 0001 	add.w	r0, fp, #1
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    445e:	f000 8406 	beq.w	4c6e <am_util_stdio_vsprintf+0xbd6>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4462:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    4466:	2b09      	cmp	r3, #9
    4468:	f200 84be 	bhi.w	4de8 <am_util_stdio_vsprintf+0xd50>
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    446c:	2100      	movs	r1, #0
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    446e:	460e      	mov	r6, r1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4470:	4683      	mov	fp, r0
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    4472:	2300      	movs	r3, #0
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    4474:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    4478:	eb02 0345 	add.w	r3, r2, r5, lsl #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    447c:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
    4480:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
    4484:	2d09      	cmp	r5, #9
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    4486:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    {
        ++uCnt;
    448a:	f101 0101 	add.w	r1, r1, #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    448e:	d9f1      	bls.n	4474 <am_util_stdio_vsprintf+0x3dc>
    if ( pui32CharCnt )
    {
        *pui32CharCnt = uCnt;
    }

    return bNeg ? -ui32Val : ui32Val;
    4490:	b106      	cbz	r6, 4494 <am_util_stdio_vsprintf+0x3fc>
    4492:	425b      	negs	r3, r3
    4494:	461d      	mov	r5, r3
        //
        if (*pcFmt == '.')
        {
            ++pcFmt;
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
            pcFmt += ui32NumChars;
    4496:	eb00 0b01 	add.w	fp, r0, r1
    449a:	5c43      	ldrb	r3, [r0, r1]
    449c:	e653      	b.n	4146 <am_util_stdio_vsprintf+0xae>

        //
        // Handle the specifier.
        //
        ++pcFmt;
        bLower = bLongLong = false;
    449e:	2500      	movs	r5, #0
    44a0:	951c      	str	r5, [sp, #112]	; 0x70
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    44a2:	9824      	ldr	r0, [sp, #144]	; 0x90
    44a4:	4601      	mov	r1, r0
                                      va_arg(pArgs, uint32_t);
    44a6:	3104      	adds	r1, #4
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    44a8:	6802      	ldr	r2, [r0, #0]
                                      va_arg(pArgs, uint32_t);
    44aa:	9124      	str	r1, [sp, #144]	; 0x90
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    44ac:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    44ae:	f1be 0f00 	cmp.w	lr, #0
    44b2:	f000 808a 	beq.w	45ca <am_util_stdio_vsprintf+0x532>
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;
    44b6:	ea52 0103 	orrs.w	r1, r2, r3
    44ba:	bf0c      	ite	eq
    44bc:	2601      	moveq	r6, #1
    44be:	2600      	movne	r6, #0

    while ( ui64Val )
    44c0:	ea52 0103 	orrs.w	r1, r2, r3
    44c4:	f000 859a 	beq.w	4ffc <am_util_stdio_vsprintf+0xf64>
    44c8:	4610      	mov	r0, r2
    44ca:	4619      	mov	r1, r3
    {
        ui64Val >>= 4;
    44cc:	0907      	lsrs	r7, r0, #4
    44ce:	ea47 7501 	orr.w	r5, r7, r1, lsl #28
    44d2:	090f      	lsrs	r7, r1, #4
    44d4:	4628      	mov	r0, r5
    44d6:	4639      	mov	r1, r7
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    44d8:	ea50 0501 	orrs.w	r5, r0, r1
    {
        ui64Val >>= 4;
        ++iDigits;
    44dc:	f106 0601 	add.w	r6, r6, #1
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    44e0:	d1f4      	bne.n	44cc <am_util_stdio_vsprintf+0x434>
                if ( iWidth )
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    44e2:	ebc6 010e 	rsb	r1, r6, lr
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    44e6:	2900      	cmp	r1, #0
    44e8:	f340 84b3 	ble.w	4e52 <am_util_stdio_vsprintf+0xdba>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    44ec:	3901      	subs	r1, #1
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    44ee:	4620      	mov	r0, r4
    44f0:	f001 0607 	and.w	r6, r1, #7
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    44f4:	b114      	cbz	r4, 44fc <am_util_stdio_vsprintf+0x464>
        {
            *pcBuf++ = cPadChar;
    44f6:	f884 c000 	strb.w	ip, [r4]
    44fa:	1c60      	adds	r0, r4, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    44fc:	1e4d      	subs	r5, r1, #1
    44fe:	2900      	cmp	r1, #0
    4500:	d05c      	beq.n	45bc <am_util_stdio_vsprintf+0x524>
    4502:	b386      	cbz	r6, 4566 <am_util_stdio_vsprintf+0x4ce>
    4504:	2e01      	cmp	r6, #1
    4506:	d027      	beq.n	4558 <am_util_stdio_vsprintf+0x4c0>
    4508:	2e02      	cmp	r6, #2
    450a:	d020      	beq.n	454e <am_util_stdio_vsprintf+0x4b6>
    450c:	2e03      	cmp	r6, #3
    450e:	d019      	beq.n	4544 <am_util_stdio_vsprintf+0x4ac>
    4510:	2e04      	cmp	r6, #4
    4512:	d012      	beq.n	453a <am_util_stdio_vsprintf+0x4a2>
    4514:	2e05      	cmp	r6, #5
    4516:	d00b      	beq.n	4530 <am_util_stdio_vsprintf+0x498>
    4518:	2e06      	cmp	r6, #6
    451a:	d004      	beq.n	4526 <am_util_stdio_vsprintf+0x48e>
    {
        if ( pcBuf )
    451c:	b110      	cbz	r0, 4524 <am_util_stdio_vsprintf+0x48c>
        {
            *pcBuf++ = cPadChar;
    451e:	f880 c000 	strb.w	ip, [r0]
    4522:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4524:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    4526:	b110      	cbz	r0, 452e <am_util_stdio_vsprintf+0x496>
        {
            *pcBuf++ = cPadChar;
    4528:	f880 c000 	strb.w	ip, [r0]
    452c:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    452e:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    4530:	b110      	cbz	r0, 4538 <am_util_stdio_vsprintf+0x4a0>
        {
            *pcBuf++ = cPadChar;
    4532:	f880 c000 	strb.w	ip, [r0]
    4536:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4538:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    453a:	b110      	cbz	r0, 4542 <am_util_stdio_vsprintf+0x4aa>
        {
            *pcBuf++ = cPadChar;
    453c:	f880 c000 	strb.w	ip, [r0]
    4540:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4542:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    4544:	b110      	cbz	r0, 454c <am_util_stdio_vsprintf+0x4b4>
        {
            *pcBuf++ = cPadChar;
    4546:	f880 c000 	strb.w	ip, [r0]
    454a:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    454c:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    454e:	b110      	cbz	r0, 4556 <am_util_stdio_vsprintf+0x4be>
        {
            *pcBuf++ = cPadChar;
    4550:	f880 c000 	strb.w	ip, [r0]
    4554:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4556:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    4558:	b110      	cbz	r0, 4560 <am_util_stdio_vsprintf+0x4c8>
        {
            *pcBuf++ = cPadChar;
    455a:	f880 c000 	strb.w	ip, [r0]
    455e:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4560:	f115 35ff 	adds.w	r5, r5, #4294967295
    4564:	d32a      	bcc.n	45bc <am_util_stdio_vsprintf+0x524>
    {
        if ( pcBuf )
    4566:	b110      	cbz	r0, 456e <am_util_stdio_vsprintf+0x4d6>
        {
            *pcBuf++ = cPadChar;
    4568:	f880 c000 	strb.w	ip, [r0]
    456c:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    456e:	3d01      	subs	r5, #1
    {
        if ( pcBuf )
    4570:	b300      	cbz	r0, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    4572:	1c47      	adds	r7, r0, #1
    4574:	f880 c000 	strb.w	ip, [r0]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4578:	4638      	mov	r0, r7
    457a:	b1df      	cbz	r7, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    457c:	1c7e      	adds	r6, r7, #1
    457e:	f887 c000 	strb.w	ip, [r7]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4582:	4630      	mov	r0, r6
    4584:	b1b6      	cbz	r6, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    4586:	1c77      	adds	r7, r6, #1
    4588:	f886 c000 	strb.w	ip, [r6]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    458c:	4638      	mov	r0, r7
    458e:	b18f      	cbz	r7, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    4590:	1c7e      	adds	r6, r7, #1
    4592:	f887 c000 	strb.w	ip, [r7]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4596:	4630      	mov	r0, r6
    4598:	b166      	cbz	r6, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    459a:	1c77      	adds	r7, r6, #1
    459c:	f886 c000 	strb.w	ip, [r6]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    45a0:	4638      	mov	r0, r7
    45a2:	b13f      	cbz	r7, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    45a4:	1c7e      	adds	r6, r7, #1
    45a6:	f887 c000 	strb.w	ip, [r7]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    45aa:	4630      	mov	r0, r6
    45ac:	b116      	cbz	r6, 45b4 <am_util_stdio_vsprintf+0x51c>
        {
            *pcBuf++ = cPadChar;
    45ae:	f886 c000 	strb.w	ip, [r6]
    45b2:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    45b4:	3d07      	subs	r5, #7
    45b6:	f1b5 3fff 	cmp.w	r5, #4294967295
    45ba:	d1d4      	bne.n	4566 <am_util_stdio_vsprintf+0x4ce>
    45bc:	3101      	adds	r1, #1
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    45be:	2c00      	cmp	r4, #0
    45c0:	f000 8329 	beq.w	4c16 <am_util_stdio_vsprintf+0xb7e>
    45c4:	468c      	mov	ip, r1
    45c6:	440c      	add	r4, r1
                    ui32CharCnt += iWidth;
    45c8:	44e2      	add	sl, ip
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    int iNumDig, ix = 0;
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    45ca:	ea52 0103 	orrs.w	r1, r2, r3
    45ce:	f040 8327 	bne.w	4c20 <am_util_stdio_vsprintf+0xb88>
    {
        tbuf[ix++] = '0';   // Print a '0'
    45d2:	2330      	movs	r3, #48	; 0x30
    45d4:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    45d8:	2c00      	cmp	r4, #0
    45da:	f000 8475 	beq.w	4ec8 <am_util_stdio_vsprintf+0xe30>
    45de:	2601      	movs	r6, #1
    45e0:	4630      	mov	r0, r6
    45e2:	ad2d      	add	r5, sp, #180	; 0xb4
    45e4:	182b      	adds	r3, r5, r0
    45e6:	f103 3cff 	add.w	ip, r3, #4294967295
    45ea:	43e9      	mvns	r1, r5
    {
        while (ix--)
        {
            *pcBuf++ = tbuf[ix];
    45ec:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    45f0:	7022      	strb	r2, [r4, #0]
    45f2:	4419      	add	r1, r3
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    45f4:	4565      	cmp	r5, ip
    45f6:	f001 0307 	and.w	r3, r1, #7
    45fa:	4622      	mov	r2, r4
    45fc:	d045      	beq.n	468a <am_util_stdio_vsprintf+0x5f2>
    45fe:	b34b      	cbz	r3, 4654 <am_util_stdio_vsprintf+0x5bc>
    4600:	2b01      	cmp	r3, #1
    4602:	d021      	beq.n	4648 <am_util_stdio_vsprintf+0x5b0>
    4604:	2b02      	cmp	r3, #2
    4606:	d01b      	beq.n	4640 <am_util_stdio_vsprintf+0x5a8>
    4608:	2b03      	cmp	r3, #3
    460a:	d015      	beq.n	4638 <am_util_stdio_vsprintf+0x5a0>
    460c:	2b04      	cmp	r3, #4
    460e:	d00f      	beq.n	4630 <am_util_stdio_vsprintf+0x598>
    4610:	2b05      	cmp	r3, #5
    4612:	d009      	beq.n	4628 <am_util_stdio_vsprintf+0x590>
    4614:	2b06      	cmp	r3, #6
    4616:	d003      	beq.n	4620 <am_util_stdio_vsprintf+0x588>
        {
            *pcBuf++ = tbuf[ix];
    4618:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    461c:	7061      	strb	r1, [r4, #1]
    461e:	1c62      	adds	r2, r4, #1
    4620:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
    4624:	f802 3f01 	strb.w	r3, [r2, #1]!
    4628:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    462c:	f802 1f01 	strb.w	r1, [r2, #1]!
    4630:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
    4634:	f802 3f01 	strb.w	r3, [r2, #1]!
    4638:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    463c:	f802 1f01 	strb.w	r1, [r2, #1]!
    4640:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
    4644:	f802 3f01 	strb.w	r3, [r2, #1]!
    4648:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    464c:	f802 1f01 	strb.w	r1, [r2, #1]!
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    4650:	4565      	cmp	r5, ip
    4652:	d01a      	beq.n	468a <am_util_stdio_vsprintf+0x5f2>
        {
            *pcBuf++ = tbuf[ix];
    4654:	f81c 7c01 	ldrb.w	r7, [ip, #-1]
    4658:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
    465c:	f81c 1c04 	ldrb.w	r1, [ip, #-4]
    4660:	7057      	strb	r7, [r2, #1]
    4662:	7093      	strb	r3, [r2, #2]
    4664:	f81c 7c03 	ldrb.w	r7, [ip, #-3]
    4668:	f81c 3c05 	ldrb.w	r3, [ip, #-5]
    466c:	70d7      	strb	r7, [r2, #3]
    466e:	7111      	strb	r1, [r2, #4]
    4670:	7153      	strb	r3, [r2, #5]
    4672:	f81c 1c06 	ldrb.w	r1, [ip, #-6]
    4676:	f81c 7c07 	ldrb.w	r7, [ip, #-7]
    467a:	f81c 3d08 	ldrb.w	r3, [ip, #-8]!
    467e:	7191      	strb	r1, [r2, #6]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    4680:	4565      	cmp	r5, ip
        {
            *pcBuf++ = tbuf[ix];
    4682:	71d7      	strb	r7, [r2, #7]
    4684:	f802 3f08 	strb.w	r3, [r2, #8]!
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    4688:	d1e4      	bne.n	4654 <am_util_stdio_vsprintf+0x5bc>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    468a:	2500      	movs	r5, #0
    468c:	5425      	strb	r5, [r4, r0]

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);

                if ( pcBuf )
                {
                    pcBuf += iVal;
    468e:	4630      	mov	r0, r6
    4690:	4434      	add	r4, r6
                if ( pcBuf )
                {
                    pcBuf += iVal;
                }

                ui32CharCnt += iVal;
    4692:	4482      	add	sl, r0
                break;
    4694:	e025      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>


            case 'f':
            case 'F':
                if ( pcBuf )
    4696:	b324      	cbz	r4, 46e2 <am_util_stdio_vsprintf+0x64a>
                {
                    float fValue = va_arg(pArgs, double);
    4698:	9824      	ldr	r0, [sp, #144]	; 0x90
    469a:	3007      	adds	r0, #7
    469c:	f020 0207 	bic.w	r2, r0, #7
    46a0:	e9d2 0100 	ldrd	r0, r1, [r2]
    46a4:	3208      	adds	r2, #8
    46a6:	9224      	str	r2, [sp, #144]	; 0x90
    46a8:	f7fc f97c 	bl	9a4 <__aeabi_d2f>
    46ac:	ee07 0a90 	vmov	s15, r0
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    46b0:	eef5 7a40 	vcmp.f32	s15, #0.0
                    float fValue = va_arg(pArgs, double);

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    46b4:	2114      	movs	r1, #20
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    46b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    46ba:	6021      	str	r1, [r4, #0]
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    46bc:	f040 8356 	bne.w	4d6c <am_util_stdio_vsprintf+0xcd4>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    46c0:	4aa5      	ldr	r2, [pc, #660]	; (4958 <am_util_stdio_vsprintf+0x8c0>)
    46c2:	6022      	str	r2, [r4, #0]
    46c4:	f04f 0c03 	mov.w	ip, #3
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
    46c8:	44e2      	add	sl, ip
                    pcBuf += iVal;
    46ca:	4464      	add	r4, ip
    46cc:	e009      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>
        }

        switch ( *pcFmt )
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    46ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    46d0:	4610      	mov	r0, r2
    46d2:	3004      	adds	r0, #4
    46d4:	7811      	ldrb	r1, [r2, #0]

                if ( pcBuf )
    46d6:	b10c      	cbz	r4, 46dc <am_util_stdio_vsprintf+0x644>
                {
                    *pcBuf++ = ui8CharSpecifier;
    46d8:	7021      	strb	r1, [r4, #0]
    46da:	3401      	adds	r4, #1
                }

                ++ui32CharCnt;
    46dc:	f10a 0a01 	add.w	sl, sl, #1
        }

        switch ( *pcFmt )
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    46e0:	9024      	str	r0, [sp, #144]	; 0x90
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    46e2:	f10b 0101 	add.w	r1, fp, #1
    46e6:	e4de      	b.n	40a6 <am_util_stdio_vsprintf+0xe>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    46e8:	2101      	movs	r1, #1
    46ea:	911c      	str	r1, [sp, #112]	; 0x70
    46ec:	e6d9      	b.n	44a2 <am_util_stdio_vsprintf+0x40a>

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    46ee:	9824      	ldr	r0, [sp, #144]	; 0x90
    46f0:	6802      	ldr	r2, [r0, #0]
                                      va_arg(pArgs, uint32_t);
    46f2:	3004      	adds	r0, #4

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    46f4:	4611      	mov	r1, r2
    46f6:	2200      	movs	r2, #0
                                      va_arg(pArgs, uint32_t);
    46f8:	9024      	str	r0, [sp, #144]	; 0x90

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    46fa:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    46fe:	f1be 0f00 	cmp.w	lr, #0
    4702:	f000 811d 	beq.w	4940 <am_util_stdio_vsprintf+0x8a8>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    4706:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    470a:	4603      	mov	r3, r0
    470c:	430b      	orrs	r3, r1

    while ( ui64Val )
    470e:	4602      	mov	r2, r0
    4710:	460b      	mov	r3, r1
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    4712:	bf0c      	ite	eq
    4714:	2501      	moveq	r5, #1
    4716:	2500      	movne	r5, #0

    while ( ui64Val )
    4718:	ea52 0103 	orrs.w	r1, r2, r3
    471c:	f000 84ac 	beq.w	5078 <am_util_stdio_vsprintf+0xfe0>
    4720:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
    4724:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
    4728:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
    472c:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
    4730:	46ae      	mov	lr, r5
    4732:	46a4      	mov	ip, r4
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    4734:	0894      	lsrs	r4, r2, #2
    4736:	ea44 7683 	orr.w	r6, r4, r3, lsl #30
    473a:	089f      	lsrs	r7, r3, #2
    473c:	9608      	str	r6, [sp, #32]
    473e:	9709      	str	r7, [sp, #36]	; 0x24
    4740:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    4744:	0859      	lsrs	r1, r3, #1
    4746:	ea4f 0032 	mov.w	r0, r2, rrx
    474a:	eb14 0800 	adds.w	r8, r4, r0
    474e:	eb45 0901 	adc.w	r9, r5, r1
    4752:	4645      	mov	r5, r8
        q64 += (q64 >> 4);
    4754:	0928      	lsrs	r0, r5, #4
    4756:	ea40 7a09 	orr.w	sl, r0, r9, lsl #28
    475a:	eb18 060a 	adds.w	r6, r8, sl
    475e:	ea4f 1b19 	mov.w	fp, r9, lsr #4
    4762:	eb49 070b 	adc.w	r7, r9, fp
        q64 += (q64 >> 8);
    4766:	0a34      	lsrs	r4, r6, #8
    4768:	ea44 6507 	orr.w	r5, r4, r7, lsl #24
    476c:	0a39      	lsrs	r1, r7, #8
    476e:	9101      	str	r1, [sp, #4]
    4770:	9500      	str	r5, [sp, #0]
    4772:	e9dd 4500 	ldrd	r4, r5, [sp]
    4776:	eb14 0806 	adds.w	r8, r4, r6
    477a:	eb45 0907 	adc.w	r9, r5, r7
    477e:	4640      	mov	r0, r8
    4780:	464e      	mov	r6, r9
        q64 += (q64 >> 16);
    4782:	0c07      	lsrs	r7, r0, #16
    4784:	ea47 4409 	orr.w	r4, r7, r9, lsl #16
    4788:	0c35      	lsrs	r5, r6, #16
    478a:	9402      	str	r4, [sp, #8]
    478c:	9503      	str	r5, [sp, #12]
    478e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    4792:	2600      	movs	r6, #0
    4794:	9314      	str	r3, [sp, #80]	; 0x50
    4796:	9615      	str	r6, [sp, #84]	; 0x54
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
    4798:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    479c:	eb14 0108 	adds.w	r1, r4, r8
    47a0:	eb45 0809 	adc.w	r8, r5, r9
        q64 += (q64 >> 32);
    47a4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    47a8:	9717      	str	r7, [sp, #92]	; 0x5c
    47aa:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    47ae:	1861      	adds	r1, r4, r1
    47b0:	eb45 0508 	adc.w	r5, r5, r8
        q64 >>= 3;
    47b4:	08c8      	lsrs	r0, r1, #3
    47b6:	ea40 7845 	orr.w	r8, r0, r5, lsl #29
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    47ba:	eb18 0008 	adds.w	r0, r8, r8
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    47be:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    47c2:	eb49 0109 	adc.w	r1, r9, r9
    47c6:	008c      	lsls	r4, r1, #2
    47c8:	ea44 7590 	orr.w	r5, r4, r0, lsr #30
    47cc:	0084      	lsls	r4, r0, #2
    47ce:	950b      	str	r5, [sp, #44]	; 0x2c
    47d0:	940a      	str	r4, [sp, #40]	; 0x28
    47d2:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    47d6:	1820      	adds	r0, r4, r0
    47d8:	eb45 0101 	adc.w	r1, r5, r1
    47dc:	1d94      	adds	r4, r2, #6
    47de:	f143 0500 	adc.w	r5, r3, #0
    47e2:	1a20      	subs	r0, r4, r0
    47e4:	eb65 0101 	sbc.w	r1, r5, r1
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    47e8:	0893      	lsrs	r3, r2, #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    47ea:	0904      	lsrs	r4, r0, #4
    47ec:	ea44 7001 	orr.w	r0, r4, r1, lsl #28
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    47f0:	eb03 0552 	add.w	r5, r3, r2, lsr #1
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    47f4:	0909      	lsrs	r1, r1, #4
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
    47f6:	eb05 1315 	add.w	r3, r5, r5, lsr #4
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    47fa:	900c      	str	r0, [sp, #48]	; 0x30
    47fc:	910d      	str	r1, [sp, #52]	; 0x34
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
    47fe:	eb03 2513 	add.w	r5, r3, r3, lsr #8
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
    4806:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        q32 >>= 3;
    480a:	08e3      	lsrs	r3, r4, #3
    480c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4810:	eb10 0008 	adds.w	r0, r0, r8
    4814:	4635      	mov	r5, r6
    4816:	f102 0206 	add.w	r2, r2, #6
    481a:	463e      	mov	r6, r7
    481c:	eb41 0109 	adc.w	r1, r1, r9
    4820:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    4824:	ea55 0706 	orrs.w	r7, r5, r6
    4828:	bf06      	itte	eq
    482a:	eb03 1412 	addeq.w	r4, r3, r2, lsr #4
    482e:	4631      	moveq	r1, r6
    4830:	4604      	movne	r4, r0
    4832:	4622      	mov	r2, r4
    4834:	460b      	mov	r3, r1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    4836:	ea52 0103 	orrs.w	r1, r2, r3
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    483a:	f10e 0e01 	add.w	lr, lr, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    483e:	f47f af79 	bne.w	4734 <am_util_stdio_vsprintf+0x69c>
    4842:	4675      	mov	r5, lr
    4844:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    4848:	ebc5 030e 	rsb	r3, r5, lr
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    484c:	2b00      	cmp	r3, #0
    484e:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
    4852:	4664      	mov	r4, ip
    4854:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    4858:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
    485c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
    4860:	f340 834b 	ble.w	4efa <am_util_stdio_vsprintf+0xe62>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4864:	3b01      	subs	r3, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    4866:	4620      	mov	r0, r4
    4868:	f003 0107 	and.w	r1, r3, #7
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    486c:	b114      	cbz	r4, 4874 <am_util_stdio_vsprintf+0x7dc>
        {
            *pcBuf++ = cPadChar;
    486e:	f884 c000 	strb.w	ip, [r4]
    4872:	1c60      	adds	r0, r4, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4874:	1e5a      	subs	r2, r3, #1
    4876:	2b00      	cmp	r3, #0
    4878:	d05b      	beq.n	4932 <am_util_stdio_vsprintf+0x89a>
    487a:	b381      	cbz	r1, 48de <am_util_stdio_vsprintf+0x846>
    487c:	2901      	cmp	r1, #1
    487e:	d027      	beq.n	48d0 <am_util_stdio_vsprintf+0x838>
    4880:	2902      	cmp	r1, #2
    4882:	d020      	beq.n	48c6 <am_util_stdio_vsprintf+0x82e>
    4884:	2903      	cmp	r1, #3
    4886:	d019      	beq.n	48bc <am_util_stdio_vsprintf+0x824>
    4888:	2904      	cmp	r1, #4
    488a:	d012      	beq.n	48b2 <am_util_stdio_vsprintf+0x81a>
    488c:	2905      	cmp	r1, #5
    488e:	d00b      	beq.n	48a8 <am_util_stdio_vsprintf+0x810>
    4890:	2906      	cmp	r1, #6
    4892:	d004      	beq.n	489e <am_util_stdio_vsprintf+0x806>
    {
        if ( pcBuf )
    4894:	b110      	cbz	r0, 489c <am_util_stdio_vsprintf+0x804>
        {
            *pcBuf++ = cPadChar;
    4896:	f880 c000 	strb.w	ip, [r0]
    489a:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    489c:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    489e:	b110      	cbz	r0, 48a6 <am_util_stdio_vsprintf+0x80e>
        {
            *pcBuf++ = cPadChar;
    48a0:	f880 c000 	strb.w	ip, [r0]
    48a4:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48a6:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48a8:	b110      	cbz	r0, 48b0 <am_util_stdio_vsprintf+0x818>
        {
            *pcBuf++ = cPadChar;
    48aa:	f880 c000 	strb.w	ip, [r0]
    48ae:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48b0:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48b2:	b110      	cbz	r0, 48ba <am_util_stdio_vsprintf+0x822>
        {
            *pcBuf++ = cPadChar;
    48b4:	f880 c000 	strb.w	ip, [r0]
    48b8:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48ba:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48bc:	b110      	cbz	r0, 48c4 <am_util_stdio_vsprintf+0x82c>
        {
            *pcBuf++ = cPadChar;
    48be:	f880 c000 	strb.w	ip, [r0]
    48c2:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48c4:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48c6:	b110      	cbz	r0, 48ce <am_util_stdio_vsprintf+0x836>
        {
            *pcBuf++ = cPadChar;
    48c8:	f880 c000 	strb.w	ip, [r0]
    48cc:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48ce:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48d0:	b110      	cbz	r0, 48d8 <am_util_stdio_vsprintf+0x840>
        {
            *pcBuf++ = cPadChar;
    48d2:	f880 c000 	strb.w	ip, [r0]
    48d6:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48d8:	f112 32ff 	adds.w	r2, r2, #4294967295
    48dc:	d329      	bcc.n	4932 <am_util_stdio_vsprintf+0x89a>
    {
        if ( pcBuf )
    48de:	b110      	cbz	r0, 48e6 <am_util_stdio_vsprintf+0x84e>
        {
            *pcBuf++ = cPadChar;
    48e0:	f880 c000 	strb.w	ip, [r0]
    48e4:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    48e6:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    48e8:	b300      	cbz	r0, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    48ea:	1c45      	adds	r5, r0, #1
    48ec:	f880 c000 	strb.w	ip, [r0]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    48f0:	4628      	mov	r0, r5
    48f2:	b1dd      	cbz	r5, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    48f4:	1c69      	adds	r1, r5, #1
    48f6:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    48fa:	4608      	mov	r0, r1
    48fc:	b1b1      	cbz	r1, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    48fe:	1c4d      	adds	r5, r1, #1
    4900:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4904:	4628      	mov	r0, r5
    4906:	b18d      	cbz	r5, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    4908:	1c69      	adds	r1, r5, #1
    490a:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    490e:	4608      	mov	r0, r1
    4910:	b161      	cbz	r1, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    4912:	1c4d      	adds	r5, r1, #1
    4914:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4918:	4628      	mov	r0, r5
    491a:	b13d      	cbz	r5, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    491c:	1c69      	adds	r1, r5, #1
    491e:	f885 c000 	strb.w	ip, [r5]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4922:	4608      	mov	r0, r1
    4924:	b111      	cbz	r1, 492c <am_util_stdio_vsprintf+0x894>
        {
            *pcBuf++ = cPadChar;
    4926:	f881 c000 	strb.w	ip, [r1]
    492a:	3001      	adds	r0, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    492c:	3a07      	subs	r2, #7
    492e:	1c51      	adds	r1, r2, #1
    4930:	d1d5      	bne.n	48de <am_util_stdio_vsprintf+0x846>
    4932:	3301      	adds	r3, #1
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    4934:	2c00      	cmp	r4, #0
    4936:	bf14      	ite	ne
    4938:	461a      	movne	r2, r3
    493a:	2200      	moveq	r2, #0
                    ui32CharCnt += iWidth;
    493c:	449a      	add	sl, r3
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    493e:	4414      	add	r4, r2
                    ui32CharCnt += iWidth;
                    iWidth = 0;
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    4940:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    4944:	4622      	mov	r2, r4
    4946:	f7ff fa9b 	bl	3e80 <uint64_to_str>

                if ( pcBuf )
    494a:	2c00      	cmp	r4, #0
    494c:	f43f aea1 	beq.w	4692 <am_util_stdio_vsprintf+0x5fa>

                iVal = uint64_to_str(ui64Val, pcBuf);

                if ( pcBuf )
                {
                    pcBuf += iVal;
    4950:	4404      	add	r4, r0
                }

                ui32CharCnt += iVal;
    4952:	4482      	add	sl, r0
    4954:	e6c5      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>
    4956:	bf00      	nop
    4958:	00302e30 	.word	0x00302e30
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    495c:	9924      	ldr	r1, [sp, #144]	; 0x90
    495e:	460b      	mov	r3, r1
    4960:	6808      	ldr	r0, [r1, #0]
                                     va_arg(pArgs, int32_t);
    4962:	3304      	adds	r3, #4
    4964:	9324      	str	r3, [sp, #144]	; 0x90
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    4966:	17c1      	asrs	r1, r0, #31
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    4968:	2800      	cmp	r0, #0
    496a:	f171 0300 	sbcs.w	r3, r1, #0
    496e:	f2c0 8259 	blt.w	4e24 <am_util_stdio_vsprintf+0xd8c>
                    ui64Val = -i64Val;          // Get absolute value
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
    4972:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
                    bNeg = false;
                }

                if ( iWidth )
    4976:	f1be 0f00 	cmp.w	lr, #0
    497a:	f000 8139 	beq.w	4bf0 <am_util_stdio_vsprintf+0xb58>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    497e:	4603      	mov	r3, r0
    4980:	430b      	orrs	r3, r1
    4982:	bf0c      	ite	eq
    4984:	2501      	moveq	r5, #1
    4986:	2500      	movne	r5, #0
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    4988:	460b      	mov	r3, r1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    498a:	4301      	orrs	r1, r0
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    498c:	4602      	mov	r2, r0
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    498e:	f000 8263 	beq.w	4e58 <am_util_stdio_vsprintf+0xdc0>
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
                    bNeg = false;
    4992:	2000      	movs	r0, #0
                // Get absolute value
                //
                if ( i64Val < 0 )
                {
                    ui64Val = -i64Val;          // Get absolute value
                    bNeg = true;
    4994:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
    4998:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
    499c:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
    49a0:	9025      	str	r0, [sp, #148]	; 0x94
    49a2:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
    49a6:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
    49aa:	46ae      	mov	lr, r5
    49ac:	46a4      	mov	ip, r4
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    49ae:	0897      	lsrs	r7, r2, #2
    49b0:	ea47 7483 	orr.w	r4, r7, r3, lsl #30
    49b4:	089e      	lsrs	r6, r3, #2
    49b6:	960f      	str	r6, [sp, #60]	; 0x3c
    49b8:	940e      	str	r4, [sp, #56]	; 0x38
    49ba:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    49be:	0859      	lsrs	r1, r3, #1
    49c0:	ea4f 0032 	mov.w	r0, r2, rrx
    49c4:	eb14 0a00 	adds.w	sl, r4, r0
    49c8:	eb45 0b01 	adc.w	fp, r5, r1
        q64 += (q64 >> 4);
    49cc:	ea4f 111a 	mov.w	r1, sl, lsr #4
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    49d0:	46d0      	mov	r8, sl
        q64 += (q64 >> 4);
    49d2:	ea41 7a0b 	orr.w	sl, r1, fp, lsl #28
    49d6:	eb18 000a 	adds.w	r0, r8, sl
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    49da:	46d9      	mov	r9, fp
        q64 += (q64 >> 4);
    49dc:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
    49e0:	eb49 070b 	adc.w	r7, r9, fp
        q64 += (q64 >> 8);
    49e4:	0a05      	lsrs	r5, r0, #8
    49e6:	ea45 6407 	orr.w	r4, r5, r7, lsl #24
    49ea:	0a3e      	lsrs	r6, r7, #8
    49ec:	9605      	str	r6, [sp, #20]
    49ee:	9404      	str	r4, [sp, #16]
    49f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    49f4:	eb14 0800 	adds.w	r8, r4, r0
    49f8:	eb45 0907 	adc.w	r9, r5, r7
    49fc:	4640      	mov	r0, r8
    49fe:	4649      	mov	r1, r9
        q64 += (q64 >> 16);
    4a00:	0c07      	lsrs	r7, r0, #16
    4a02:	ea47 4509 	orr.w	r5, r7, r9, lsl #16
    4a06:	0c0c      	lsrs	r4, r1, #16
    4a08:	9506      	str	r5, [sp, #24]
    4a0a:	9407      	str	r4, [sp, #28]
    4a0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    4a10:	2700      	movs	r7, #0
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    4a12:	eb14 0608 	adds.w	r6, r4, r8
    4a16:	eb45 0809 	adc.w	r8, r5, r9
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    4a1a:	9318      	str	r3, [sp, #96]	; 0x60
    4a1c:	9719      	str	r7, [sp, #100]	; 0x64
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    4a1e:	4641      	mov	r1, r8
        q64 += (q64 >> 32);
    4a20:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    4a24:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4a28:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
    4a2c:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
    4a30:	19a4      	adds	r4, r4, r6
    4a32:	eb45 0601 	adc.w	r6, r5, r1
        q64 >>= 3;
    4a36:	08e7      	lsrs	r7, r4, #3
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
    4a38:	4631      	mov	r1, r6
        q64 >>= 3;
    4a3a:	ea47 7646 	orr.w	r6, r7, r6, lsl #29
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a3e:	19b0      	adds	r0, r6, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    4a40:	ea4f 07d1 	mov.w	r7, r1, lsr #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a44:	eb47 0107 	adc.w	r1, r7, r7
    4a48:	008d      	lsls	r5, r1, #2
    4a4a:	ea45 7490 	orr.w	r4, r5, r0, lsr #30
    4a4e:	0085      	lsls	r5, r0, #2
    4a50:	9411      	str	r4, [sp, #68]	; 0x44
    4a52:	9510      	str	r5, [sp, #64]	; 0x40
    4a54:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
    4a58:	1820      	adds	r0, r4, r0
    4a5a:	eb45 0101 	adc.w	r1, r5, r1
    4a5e:	1d94      	adds	r4, r2, #6
    4a60:	f143 0500 	adc.w	r5, r3, #0
    4a64:	1a20      	subs	r0, r4, r0
    4a66:	eb65 0101 	sbc.w	r1, r5, r1
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    4a6a:	0893      	lsrs	r3, r2, #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a6c:	0904      	lsrs	r4, r0, #4
    4a6e:	ea44 7001 	orr.w	r0, r4, r1, lsl #28
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    4a72:	eb03 0552 	add.w	r5, r3, r2, lsr #1
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a76:	0909      	lsrs	r1, r1, #4
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
    4a78:	eb05 1315 	add.w	r3, r5, r5, lsr #4
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a7c:	9012      	str	r0, [sp, #72]	; 0x48
    4a7e:	9113      	str	r1, [sp, #76]	; 0x4c
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
    4a80:	eb03 2513 	add.w	r5, r3, r3, lsr #8
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
    4a88:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        q32 >>= 3;
    4a8c:	08e3      	lsrs	r3, r4, #3
    4a8e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    4a92:	1980      	adds	r0, r0, r6
    4a94:	f102 0206 	add.w	r2, r2, #6
    4a98:	4179      	adcs	r1, r7
    4a9a:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    4a9e:	ea58 0509 	orrs.w	r5, r8, r9
    4aa2:	bf06      	itte	eq
    4aa4:	eb03 1412 	addeq.w	r4, r3, r2, lsr #4
    4aa8:	4649      	moveq	r1, r9
    4aaa:	4604      	movne	r4, r0
    4aac:	4622      	mov	r2, r4
    4aae:	460b      	mov	r3, r1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    4ab0:	ea52 0103 	orrs.w	r1, r2, r3
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    4ab4:	f10e 0e01 	add.w	lr, lr, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    4ab8:	f47f af79 	bne.w	49ae <am_util_stdio_vsprintf+0x916>
    4abc:	4675      	mov	r5, lr
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);

                    if ( bNeg )
    4abe:	9825      	ldr	r0, [sp, #148]	; 0x94
    4ac0:	f8dd e0ac 	ldr.w	lr, [sp, #172]	; 0xac
    4ac4:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
    4ac8:	4664      	mov	r4, ip
    4aca:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
    4ace:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
    4ad2:	f8dd c0a8 	ldr.w	ip, [sp, #168]	; 0xa8
    4ad6:	e9dd 8928 	ldrd	r8, r9, [sp, #160]	; 0xa0
    4ada:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    4ade:	ebc5 050e 	rsb	r5, r5, lr

                    if ( bNeg )
    4ae2:	2800      	cmp	r0, #0
    4ae4:	f000 81ba 	beq.w	4e5c <am_util_stdio_vsprintf+0xdc4>
                        --iWidth;

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    4ae8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    4aec:	f000 82ad 	beq.w	504a <am_util_stdio_vsprintf+0xfb2>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4af0:	2d01      	cmp	r5, #1
    4af2:	f340 829e 	ble.w	5032 <am_util_stdio_vsprintf+0xf9a>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4af6:	3d02      	subs	r5, #2
    4af8:	2601      	movs	r6, #1
    4afa:	4623      	mov	r3, r4
    4afc:	f005 0007 	and.w	r0, r5, #7
    {
        if ( pcBuf )
    4b00:	b114      	cbz	r4, 4b08 <am_util_stdio_vsprintf+0xa70>
        {
            *pcBuf++ = cPadChar;
    4b02:	f884 c000 	strb.w	ip, [r4]
    4b06:	1c63      	adds	r3, r4, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b08:	f105 3eff 	add.w	lr, r5, #4294967295
    4b0c:	2d00      	cmp	r5, #0
    4b0e:	d064      	beq.n	4bda <am_util_stdio_vsprintf+0xb42>
    4b10:	b3b0      	cbz	r0, 4b80 <am_util_stdio_vsprintf+0xae8>
    4b12:	2801      	cmp	r0, #1
    4b14:	d02d      	beq.n	4b72 <am_util_stdio_vsprintf+0xada>
    4b16:	2802      	cmp	r0, #2
    4b18:	d025      	beq.n	4b66 <am_util_stdio_vsprintf+0xace>
    4b1a:	2803      	cmp	r0, #3
    4b1c:	d01d      	beq.n	4b5a <am_util_stdio_vsprintf+0xac2>
    4b1e:	2804      	cmp	r0, #4
    4b20:	d015      	beq.n	4b4e <am_util_stdio_vsprintf+0xab6>
    4b22:	2805      	cmp	r0, #5
    4b24:	d00d      	beq.n	4b42 <am_util_stdio_vsprintf+0xaaa>
    4b26:	2806      	cmp	r0, #6
    4b28:	d005      	beq.n	4b36 <am_util_stdio_vsprintf+0xa9e>
    {
        if ( pcBuf )
    4b2a:	b113      	cbz	r3, 4b32 <am_util_stdio_vsprintf+0xa9a>
        {
            *pcBuf++ = cPadChar;
    4b2c:	f883 c000 	strb.w	ip, [r3]
    4b30:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b32:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b36:	b113      	cbz	r3, 4b3e <am_util_stdio_vsprintf+0xaa6>
        {
            *pcBuf++ = cPadChar;
    4b38:	f883 c000 	strb.w	ip, [r3]
    4b3c:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b3e:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b42:	b113      	cbz	r3, 4b4a <am_util_stdio_vsprintf+0xab2>
        {
            *pcBuf++ = cPadChar;
    4b44:	f883 c000 	strb.w	ip, [r3]
    4b48:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b4a:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b4e:	b113      	cbz	r3, 4b56 <am_util_stdio_vsprintf+0xabe>
        {
            *pcBuf++ = cPadChar;
    4b50:	f883 c000 	strb.w	ip, [r3]
    4b54:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b56:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b5a:	b113      	cbz	r3, 4b62 <am_util_stdio_vsprintf+0xaca>
        {
            *pcBuf++ = cPadChar;
    4b5c:	f883 c000 	strb.w	ip, [r3]
    4b60:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b62:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b66:	b113      	cbz	r3, 4b6e <am_util_stdio_vsprintf+0xad6>
        {
            *pcBuf++ = cPadChar;
    4b68:	f883 c000 	strb.w	ip, [r3]
    4b6c:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b6e:	f10e 3eff 	add.w	lr, lr, #4294967295
    {
        if ( pcBuf )
    4b72:	b113      	cbz	r3, 4b7a <am_util_stdio_vsprintf+0xae2>
        {
            *pcBuf++ = cPadChar;
    4b74:	f883 c000 	strb.w	ip, [r3]
    4b78:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b7a:	f11e 3eff 	adds.w	lr, lr, #4294967295
    4b7e:	d32c      	bcc.n	4bda <am_util_stdio_vsprintf+0xb42>
    {
        if ( pcBuf )
    4b80:	b113      	cbz	r3, 4b88 <am_util_stdio_vsprintf+0xaf0>
        {
            *pcBuf++ = cPadChar;
    4b82:	f883 c000 	strb.w	ip, [r3]
    4b86:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4b88:	f10e 32ff 	add.w	r2, lr, #4294967295
    {
        if ( pcBuf )
    4b8c:	b303      	cbz	r3, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4b8e:	1c58      	adds	r0, r3, #1
    4b90:	f883 c000 	strb.w	ip, [r3]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4b94:	4603      	mov	r3, r0
    4b96:	b1d8      	cbz	r0, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4b98:	1c41      	adds	r1, r0, #1
    4b9a:	f880 c000 	strb.w	ip, [r0]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4b9e:	460b      	mov	r3, r1
    4ba0:	b1b1      	cbz	r1, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4ba2:	1c48      	adds	r0, r1, #1
    4ba4:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4ba8:	4603      	mov	r3, r0
    4baa:	b188      	cbz	r0, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4bac:	1c41      	adds	r1, r0, #1
    4bae:	f880 c000 	strb.w	ip, [r0]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4bb2:	460b      	mov	r3, r1
    4bb4:	b161      	cbz	r1, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4bb6:	1c48      	adds	r0, r1, #1
    4bb8:	f881 c000 	strb.w	ip, [r1]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4bbc:	4603      	mov	r3, r0
    4bbe:	b138      	cbz	r0, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4bc0:	1c41      	adds	r1, r0, #1
    4bc2:	f880 c000 	strb.w	ip, [r0]
        return i32Cnt;
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    4bc6:	460b      	mov	r3, r1
    4bc8:	b111      	cbz	r1, 4bd0 <am_util_stdio_vsprintf+0xb38>
        {
            *pcBuf++ = cPadChar;
    4bca:	f881 c000 	strb.w	ip, [r1]
    4bce:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4bd0:	f1a2 0e07 	sub.w	lr, r2, #7
    4bd4:	f11e 0001 	adds.w	r0, lr, #1
    4bd8:	d1d2      	bne.n	4b80 <am_util_stdio_vsprintf+0xae8>
    4bda:	3501      	adds	r5, #1
                            ++ui32CharCnt;
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    4bdc:	2c00      	cmp	r4, #0
    4bde:	f000 823f 	beq.w	5060 <am_util_stdio_vsprintf+0xfc8>
    4be2:	442c      	add	r4, r5
                    ui32CharCnt += iWidth;
    4be4:	44aa      	add	sl, r5
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    4be6:	b11e      	cbz	r6, 4bf0 <am_util_stdio_vsprintf+0xb58>
    4be8:	f1bc 0f20 	cmp.w	ip, #32
    4bec:	f000 8122 	beq.w	4e34 <am_util_stdio_vsprintf+0xd9c>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    4bf0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    4bf4:	4622      	mov	r2, r4
    4bf6:	f7ff f943 	bl	3e80 <uint64_to_str>

                if ( pcBuf )
    4bfa:	2c00      	cmp	r4, #0
    4bfc:	f47f aea8 	bne.w	4950 <am_util_stdio_vsprintf+0x8b8>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    4c00:	2400      	movs	r4, #0
                if ( pcBuf )
                {
                    pcBuf += iVal;
                }

                ui32CharCnt += iVal;
    4c02:	4482      	add	sl, r0
    4c04:	e56d      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    4c06:	b10c      	cbz	r4, 4c0c <am_util_stdio_vsprintf+0xb74>
                {
                    *pcBuf++ = *pcFmt;
    4c08:	7023      	strb	r3, [r4, #0]
    4c0a:	3401      	adds	r4, #1
                }

                ++ui32CharCnt;
    4c0c:	f10a 0a01 	add.w	sl, sl, #1
                break;
    4c10:	e567      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    4c12:	9024      	str	r0, [sp, #144]	; 0x90
    4c14:	e565      	b.n	46e2 <am_util_stdio_vsprintf+0x64a>
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
                    ui32CharCnt += iWidth;
    4c16:	448a      	add	sl, r1
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    int iNumDig, ix = 0;
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    4c18:	ea52 0103 	orrs.w	r1, r2, r3
    4c1c:	f000 8154 	beq.w	4ec8 <am_util_stdio_vsprintf+0xe30>
    4c20:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    4c22:	2e00      	cmp	r6, #0
    4c24:	bf14      	ite	ne
    4c26:	2727      	movne	r7, #39	; 0x27
    4c28:	2707      	moveq	r7, #7
    4c2a:	f10d 0cb3 	add.w	ip, sp, #179	; 0xb3
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    4c2e:	2000      	movs	r0, #0
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    {
        cCh = ui64Val & 0xf;
    4c30:	f002 010f 	and.w	r1, r2, #15
        //
        // Alpha character
        //
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
    4c34:	19cd      	adds	r5, r1, r7
        }

        tbuf[ix++] = cCh + '0';
        ui64Val >>= 4;
    4c36:	0912      	lsrs	r2, r2, #4
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    4c38:	2909      	cmp	r1, #9
    4c3a:	bf88      	it	hi
    4c3c:	4629      	movhi	r1, r5
        ui64Val >>= 4;
    4c3e:	ea42 7603 	orr.w	r6, r2, r3, lsl #28
    4c42:	ea4f 1e13 	mov.w	lr, r3, lsr #4
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    4c46:	3130      	adds	r1, #48	; 0x30
        ui64Val >>= 4;
    4c48:	4632      	mov	r2, r6
    4c4a:	4673      	mov	r3, lr
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    4c4c:	f80c 1f01 	strb.w	r1, [ip, #1]!
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    4c50:	ea52 0103 	orrs.w	r1, r2, r3
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    4c54:	f100 0001 	add.w	r0, r0, #1
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    4c58:	d1ea      	bne.n	4c30 <am_util_stdio_vsprintf+0xb98>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    4c5a:	2c00      	cmp	r4, #0
    4c5c:	d0d0      	beq.n	4c00 <am_util_stdio_vsprintf+0xb68>
    4c5e:	4606      	mov	r6, r0
    4c60:	e4bf      	b.n	45e2 <am_util_stdio_vsprintf+0x54a>
    4c62:	f89b 3000 	ldrb.w	r3, [fp]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4c66:	f04f 0e00 	mov.w	lr, #0
    4c6a:	f7ff ba61 	b.w	4130 <am_util_stdio_vsprintf+0x98>
    4c6e:	f89b 2002 	ldrb.w	r2, [fp, #2]
    4c72:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    4c76:	2b09      	cmp	r3, #9
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
    4c78:	f10b 0b02 	add.w	fp, fp, #2
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4c7c:	f200 821c 	bhi.w	50b8 <am_util_stdio_vsprintf+0x1020>

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    4c80:	2101      	movs	r1, #1
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    4c82:	460e      	mov	r6, r1
    4c84:	f7ff bbf5 	b.w	4472 <am_util_stdio_vsprintf+0x3da>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    4c88:	f89b 3002 	ldrb.w	r3, [fp, #2]
    4c8c:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
            {
                pcFmt++;
    4c90:	f10b 0b02 	add.w	fp, fp, #2
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    4c94:	2a32      	cmp	r2, #50	; 0x32
    4c96:	d8b6      	bhi.n	4c06 <am_util_stdio_vsprintf+0xb6e>
    4c98:	a101      	add	r1, pc, #4	; (adr r1, 4ca0 <am_util_stdio_vsprintf+0xc08>)
    4c9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4c9e:	bf00      	nop
    4ca0:	00004697 	.word	0x00004697
    4ca4:	00004c07 	.word	0x00004c07
    4ca8:	00004c07 	.word	0x00004c07
    4cac:	00004c07 	.word	0x00004c07
    4cb0:	00004c07 	.word	0x00004c07
    4cb4:	00004c07 	.word	0x00004c07
    4cb8:	00004c07 	.word	0x00004c07
    4cbc:	00004c07 	.word	0x00004c07
    4cc0:	00004c07 	.word	0x00004c07
    4cc4:	00004c07 	.word	0x00004c07
    4cc8:	00004c07 	.word	0x00004c07
    4ccc:	00004c07 	.word	0x00004c07
    4cd0:	00004c07 	.word	0x00004c07
    4cd4:	00004c07 	.word	0x00004c07
    4cd8:	00004c07 	.word	0x00004c07
    4cdc:	00004c07 	.word	0x00004c07
    4ce0:	00004c07 	.word	0x00004c07
    4ce4:	00004c07 	.word	0x00004c07
    4ce8:	000050c9 	.word	0x000050c9
    4cec:	00004c07 	.word	0x00004c07
    4cf0:	00004c07 	.word	0x00004c07
    4cf4:	00004c07 	.word	0x00004c07
    4cf8:	00004c07 	.word	0x00004c07
    4cfc:	00004c07 	.word	0x00004c07
    4d00:	00004c07 	.word	0x00004c07
    4d04:	00004c07 	.word	0x00004c07
    4d08:	00004c07 	.word	0x00004c07
    4d0c:	00004c07 	.word	0x00004c07
    4d10:	00004c07 	.word	0x00004c07
    4d14:	000046cf 	.word	0x000046cf
    4d18:	00004e11 	.word	0x00004e11
    4d1c:	00004c07 	.word	0x00004c07
    4d20:	00004697 	.word	0x00004697
    4d24:	00004c07 	.word	0x00004c07
    4d28:	00004c07 	.word	0x00004c07
    4d2c:	00004e11 	.word	0x00004e11
    4d30:	00004c07 	.word	0x00004c07
    4d34:	00004c07 	.word	0x00004c07
    4d38:	00004c07 	.word	0x00004c07
    4d3c:	00004c07 	.word	0x00004c07
    4d40:	00004c07 	.word	0x00004c07
    4d44:	00004c07 	.word	0x00004c07
    4d48:	00004c07 	.word	0x00004c07
    4d4c:	00004c07 	.word	0x00004c07
    4d50:	00004c07 	.word	0x00004c07
    4d54:	000041e3 	.word	0x000041e3
    4d58:	00004c07 	.word	0x00004c07
    4d5c:	00004df1 	.word	0x00004df1
    4d60:	00004c07 	.word	0x00004c07
    4d64:	00004c07 	.word	0x00004c07
    4d68:	00004eaf 	.word	0x00004eaf

    pcBufInitial = pcBuf;

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    4d6c:	f3c0 5ec7 	ubfx	lr, r0, #23, #8
    4d70:	f1ae 037f 	sub.w	r3, lr, #127	; 0x7f
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    4d74:	f3c0 0c16 	ubfx	ip, r0, #0, #23
    i32FracPart = 0;
    i32IntPart = 0;

    if (iExp2 >= 31)
    4d78:	2b1e      	cmp	r3, #30

    pcBufInitial = pcBuf;

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    4d7a:	4602      	mov	r2, r0
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    4d7c:	f44c 0000 	orr.w	r0, ip, #8388608	; 0x800000
    i32FracPart = 0;
    i32IntPart = 0;

    if (iExp2 >= 31)
    4d80:	f300 818b 	bgt.w	509a <am_util_stdio_vsprintf+0x1002>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    }
    else if (iExp2 < -23)
    4d84:	f113 0f17 	cmn.w	r3, #23
    4d88:	f2c0 8174 	blt.w	5074 <am_util_stdio_vsprintf+0xfdc>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    }
    else if (iExp2 >= 23)
    4d8c:	2b16      	cmp	r3, #22
    4d8e:	dd71      	ble.n	4e74 <am_util_stdio_vsprintf+0xddc>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    4d90:	f1ae 0696 	sub.w	r6, lr, #150	; 0x96
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    4d94:	2a00      	cmp	r2, #0
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    }
    else if (iExp2 >= 23)
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    4d96:	fa00 f006 	lsl.w	r0, r0, r6
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    4d9a:	f2c0 8165 	blt.w	5068 <am_util_stdio_vsprintf+0xfd0>
    4d9e:	46a6      	mov	lr, r4

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    4da0:	2600      	movs	r6, #0
    if (unFloatValue.I32 < 0)
    {
        *pcBuf++ = '-';
    }

    if (i32IntPart == 0)
    4da2:	2800      	cmp	r0, #0
    4da4:	f040 816d 	bne.w	5082 <am_util_stdio_vsprintf+0xfea>
    {
        *pcBuf++ = '0';
    4da8:	2730      	movs	r7, #48	; 0x30
    4daa:	f88e 7000 	strb.w	r7, [lr]
    4dae:	f10e 0701 	add.w	r7, lr, #1
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    4db2:	222e      	movs	r2, #46	; 0x2e
    4db4:	703a      	strb	r2, [r7, #0]

    if (i32FracPart == 0)
    4db6:	2e00      	cmp	r6, #0
    4db8:	f040 80a1 	bne.w	4efe <am_util_stdio_vsprintf+0xe66>
    {
        *pcBuf++ = '0';
    4dbc:	2030      	movs	r0, #48	; 0x30
    4dbe:	7078      	strb	r0, [r7, #1]
    4dc0:	1cbd      	adds	r5, r7, #2
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    4dc2:	2100      	movs	r1, #0
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;

                    iVal = ftoa(fValue, pcBuf, iPrecision);
                    if ( iVal < 0 )
    4dc4:	ebb5 0c04 	subs.w	ip, r5, r4
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    4dc8:	7029      	strb	r1, [r5, #0]
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;

                    iVal = ftoa(fValue, pcBuf, iPrecision);
                    if ( iVal < 0 )
    4dca:	f57f ac7d 	bpl.w	46c8 <am_util_stdio_vsprintf+0x630>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    4dce:	f11c 0201 	adds.w	r2, ip, #1
    4dd2:	f000 814f 	beq.w	5074 <am_util_stdio_vsprintf+0xfdc>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    4dd6:	f11c 0302 	adds.w	r3, ip, #2
    4dda:	f000 815e 	beq.w	509a <am_util_stdio_vsprintf+0x1002>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    4dde:	4bbc      	ldr	r3, [pc, #752]	; (50d0 <am_util_stdio_vsprintf+0x1038>)
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    4de0:	6023      	str	r3, [r4, #0]
    4de2:	f04f 0c03 	mov.w	ip, #3
    4de6:	e46f      	b.n	46c8 <am_util_stdio_vsprintf+0x630>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4de8:	2500      	movs	r5, #0
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    4dea:	4629      	mov	r1, r5
    4dec:	f7ff bb53 	b.w	4496 <am_util_stdio_vsprintf+0x3fe>

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    4df0:	9824      	ldr	r0, [sp, #144]	; 0x90
    4df2:	3007      	adds	r0, #7
    4df4:	f020 0107 	bic.w	r1, r0, #7
    4df8:	f101 0208 	add.w	r2, r1, #8
    4dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
    4e00:	9224      	str	r2, [sp, #144]	; 0x90
    4e02:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    4e06:	f1be 0f00 	cmp.w	lr, #0
    4e0a:	f43f ad99 	beq.w	4940 <am_util_stdio_vsprintf+0x8a8>
    4e0e:	e47a      	b.n	4706 <am_util_stdio_vsprintf+0x66e>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    4e10:	9824      	ldr	r0, [sp, #144]	; 0x90
    4e12:	3007      	adds	r0, #7
    4e14:	f020 0107 	bic.w	r1, r0, #7
    4e18:	f101 0308 	add.w	r3, r1, #8
    4e1c:	9324      	str	r3, [sp, #144]	; 0x90
    4e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4e22:	e5a1      	b.n	4968 <am_util_stdio_vsprintf+0x8d0>
                //
                // Get absolute value
                //
                if ( i64Val < 0 )
                {
                    ui64Val = -i64Val;          // Get absolute value
    4e24:	4240      	negs	r0, r0
    4e26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4e2a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
                {
                    ui64Val = i64Val;
                    bNeg = false;
                }

                if ( iWidth )
    4e2e:	f1be 0f00 	cmp.w	lr, #0
    4e32:	d153      	bne.n	4edc <am_util_stdio_vsprintf+0xe44>
                }
                else
                {
                    if ( bNeg )
                    {
                        if ( pcBuf )
    4e34:	b114      	cbz	r4, 4e3c <am_util_stdio_vsprintf+0xda4>
                        {
                            *pcBuf++ = '-';
    4e36:	252d      	movs	r5, #45	; 0x2d
    4e38:	7025      	strb	r5, [r4, #0]
    4e3a:	3401      	adds	r4, #1
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    4e3c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    4e40:	4622      	mov	r2, r4
                    {
                        if ( pcBuf )
                        {
                            *pcBuf++ = '-';
                        }
                        ++ui32CharCnt;
    4e42:	f10a 0a01 	add.w	sl, sl, #1
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    4e46:	f7ff f81b 	bl	3e80 <uint64_to_str>

                if ( pcBuf )
    4e4a:	2c00      	cmp	r4, #0
    4e4c:	f47f ad80 	bne.w	4950 <am_util_stdio_vsprintf+0x8b8>
    4e50:	e6d6      	b.n	4c00 <am_util_stdio_vsprintf+0xb68>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4e52:	2100      	movs	r1, #0
    4e54:	f7ff bbb3 	b.w	45be <am_util_stdio_vsprintf+0x526>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    4e58:	ebc5 050e 	rsb	r5, r5, lr
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4e5c:	2d00      	cmp	r5, #0
    4e5e:	f340 80fb 	ble.w	5058 <am_util_stdio_vsprintf+0xfc0>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    4e62:	3d01      	subs	r5, #1
    4e64:	2600      	movs	r6, #0
    4e66:	e648      	b.n	4afa <am_util_stdio_vsprintf+0xa62>
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    4e68:	f1be 0f00 	cmp.w	lr, #0
    4e6c:	dd2e      	ble.n	4ecc <am_util_stdio_vsprintf+0xe34>
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    4e6e:	4637      	mov	r7, r6
    4e70:	f7ff b9ce 	b.w	4210 <am_util_stdio_vsprintf+0x178>
    }
    else if (iExp2 >= 23)
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    4e74:	2b00      	cmp	r3, #0
    4e76:	f2c0 8112 	blt.w	509e <am_util_stdio_vsprintf+0x1006>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    4e7a:	f1ae 077e 	sub.w	r7, lr, #126	; 0x7e
    4e7e:	fa00 f107 	lsl.w	r1, r0, r7
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    4e82:	f1c3 0317 	rsb	r3, r3, #23
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    4e86:	2a00      	cmp	r2, #0
        i32IntPart = i32Mantissa << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    4e88:	f021 467f 	bic.w	r6, r1, #4278190080	; 0xff000000
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    4e8c:	fa40 f003 	asr.w	r0, r0, r3
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    4e90:	f2c0 80eb 	blt.w	506a <am_util_stdio_vsprintf+0xfd2>
    4e94:	4627      	mov	r7, r4
    }
    else
    {
        if (i32IntPart > 0)
        {
            uint64_to_str(i32IntPart, pcBuf);
    4e96:	463a      	mov	r2, r7
    4e98:	17c1      	asrs	r1, r0, #31
    4e9a:	f7fe fff1 	bl	3e80 <uint64_to_str>
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    4e9e:	7838      	ldrb	r0, [r7, #0]
    4ea0:	2800      	cmp	r0, #0
    4ea2:	d086      	beq.n	4db2 <am_util_stdio_vsprintf+0xd1a>
    4ea4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4ea8:	2900      	cmp	r1, #0
    4eaa:	d1fb      	bne.n	4ea4 <am_util_stdio_vsprintf+0xe0c>
    4eac:	e781      	b.n	4db2 <am_util_stdio_vsprintf+0xd1a>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    4eae:	2301      	movs	r3, #1
    4eb0:	931c      	str	r3, [sp, #112]	; 0x70
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    4eb2:	9d24      	ldr	r5, [sp, #144]	; 0x90
    4eb4:	3507      	adds	r5, #7
    4eb6:	f025 0007 	bic.w	r0, r5, #7
    4eba:	f100 0208 	add.w	r2, r0, #8
    4ebe:	9224      	str	r2, [sp, #144]	; 0x90
    4ec0:	e9d0 2300 	ldrd	r2, r3, [r0]
    4ec4:	f7ff baf3 	b.w	44ae <am_util_stdio_vsprintf+0x416>
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    int iNumDig, ix = 0;
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    4ec8:	2001      	movs	r0, #1
    4eca:	e699      	b.n	4c00 <am_util_stdio_vsprintf+0xb68>
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    4ecc:	7832      	ldrb	r2, [r6, #0]
    4ece:	2a00      	cmp	r2, #0
    4ed0:	f000 80a5 	beq.w	501e <am_util_stdio_vsprintf+0xf86>
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    4ed4:	4637      	mov	r7, r6
    4ed6:	2301      	movs	r3, #1
    4ed8:	f7ff ba15 	b.w	4306 <am_util_stdio_vsprintf+0x26e>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    4edc:	4603      	mov	r3, r0
    4ede:	430b      	orrs	r3, r1
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    4ee0:	4602      	mov	r2, r0
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    4ee2:	bf0c      	ite	eq
    4ee4:	2501      	moveq	r5, #1
    4ee6:	2500      	movne	r5, #0

    while ( ui64Val )
    4ee8:	4308      	orrs	r0, r1
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    4eea:	460b      	mov	r3, r1
                // Get absolute value
                //
                if ( i64Val < 0 )
                {
                    ui64Val = -i64Val;          // Get absolute value
                    bNeg = true;
    4eec:	bf18      	it	ne
    4eee:	2001      	movne	r0, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    4ef0:	f47f ad50 	bne.w	4994 <am_util_stdio_vsprintf+0x8fc>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    4ef4:	ebc5 050e 	rsb	r5, r5, lr
    4ef8:	e5f6      	b.n	4ae8 <am_util_stdio_vsprintf+0xa50>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4efa:	2300      	movs	r3, #0
    4efc:	e51a      	b.n	4934 <am_util_stdio_vsprintf+0x89c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    4efe:	1c7a      	adds	r2, r7, #1
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    4f00:	1b13      	subs	r3, r2, r4
    4f02:	f1c3 0c13 	rsb	ip, r3, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    4f06:	4565      	cmp	r5, ip
    4f08:	bfa8      	it	ge
    4f0a:	4665      	movge	r5, ip

        for (jx = 0; jx < iMax; jx++)
    4f0c:	2d00      	cmp	r5, #0
    4f0e:	dd6f      	ble.n	4ff0 <am_util_stdio_vsprintf+0xf58>
        {
            i32FracPart *= 10;
    4f10:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    4f14:	0071      	lsls	r1, r6, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f16:	160b      	asrs	r3, r1, #24
    4f18:	197e      	adds	r6, r7, r5
    4f1a:	43f8      	mvns	r0, r7
    4f1c:	3330      	adds	r3, #48	; 0x30
    4f1e:	b2db      	uxtb	r3, r3
    4f20:	4430      	add	r0, r6
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4f22:	42b2      	cmp	r2, r6
        {
            i32FracPart *= 10;
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f24:	707b      	strb	r3, [r7, #1]
            i32FracPart &= 0x00FFFFFF;
    4f26:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    4f2a:	f000 0003 	and.w	r0, r0, #3
    4f2e:	4617      	mov	r7, r2
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4f30:	d04c      	beq.n	4fcc <am_util_stdio_vsprintf+0xf34>
    4f32:	b308      	cbz	r0, 4f78 <am_util_stdio_vsprintf+0xee0>
    4f34:	2801      	cmp	r0, #1
    4f36:	d013      	beq.n	4f60 <am_util_stdio_vsprintf+0xec8>
    4f38:	2802      	cmp	r0, #2
    4f3a:	d008      	beq.n	4f4e <am_util_stdio_vsprintf+0xeb6>
        {
            i32FracPart *= 10;
    4f3c:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
    4f40:	0079      	lsls	r1, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f42:	160b      	asrs	r3, r1, #24
    4f44:	3330      	adds	r3, #48	; 0x30
    4f46:	7053      	strb	r3, [r2, #1]
            i32FracPart &= 0x00FFFFFF;
    4f48:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    4f4c:	1c57      	adds	r7, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
        {
            i32FracPart *= 10;
    4f4e:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    4f52:	0041      	lsls	r1, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f54:	160b      	asrs	r3, r1, #24
    4f56:	3330      	adds	r3, #48	; 0x30
    4f58:	f807 3f01 	strb.w	r3, [r7, #1]!
            i32FracPart &= 0x00FFFFFF;
    4f5c:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
        {
            i32FracPart *= 10;
    4f60:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    4f64:	0041      	lsls	r1, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f66:	160b      	asrs	r3, r1, #24
    4f68:	3330      	adds	r3, #48	; 0x30
    4f6a:	b2db      	uxtb	r3, r3
    4f6c:	f807 3f01 	strb.w	r3, [r7, #1]!
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4f70:	42b7      	cmp	r7, r6
        {
            i32FracPart *= 10;
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    4f72:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4f76:	d029      	beq.n	4fcc <am_util_stdio_vsprintf+0xf34>
        {
            i32FracPart *= 10;
    4f78:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    4f7c:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    4f7e:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
        {
            i32FracPart *= 10;
    4f82:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
    4f86:	0049      	lsls	r1, r1, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    4f88:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
        {
            i32FracPart *= 10;
    4f8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4f90:	005b      	lsls	r3, r3, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    4f92:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
        {
            i32FracPart *= 10;
    4f96:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
    4f9a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4f9e:	1600      	asrs	r0, r0, #24
    4fa0:	1609      	asrs	r1, r1, #24
    4fa2:	161b      	asrs	r3, r3, #24
    4fa4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    4fa8:	f101 0030 	add.w	r0, r1, #48	; 0x30
    4fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
    4fb0:	ea4f 632e 	mov.w	r3, lr, asr #24
    4fb4:	3330      	adds	r3, #48	; 0x30
    4fb6:	b2db      	uxtb	r3, r3
    4fb8:	f887 c001 	strb.w	ip, [r7, #1]
    4fbc:	70b8      	strb	r0, [r7, #2]
    4fbe:	70f9      	strb	r1, [r7, #3]
    4fc0:	f807 3f04 	strb.w	r3, [r7, #4]!
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4fc4:	42b7      	cmp	r7, r6
        {
            i32FracPart *= 10;
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    4fc6:	f02e 4c7f 	bic.w	ip, lr, #4278190080	; 0xff000000
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    4fca:	d1d5      	bne.n	4f78 <am_util_stdio_vsprintf+0xee0>

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    4fcc:	2b30      	cmp	r3, #48	; 0x30
    4fce:	442a      	add	r2, r5
    4fd0:	d10e      	bne.n	4ff0 <am_util_stdio_vsprintf+0xf58>
    4fd2:	f812 5c02 	ldrb.w	r5, [r2, #-2]
    4fd6:	2d2e      	cmp	r5, #46	; 0x2e
    4fd8:	d00a      	beq.n	4ff0 <am_util_stdio_vsprintf+0xf58>
    4fda:	3a02      	subs	r2, #2
    4fdc:	e002      	b.n	4fe4 <am_util_stdio_vsprintf+0xf4c>
    4fde:	7813      	ldrb	r3, [r2, #0]
    4fe0:	2b2e      	cmp	r3, #46	; 0x2e
    4fe2:	d004      	beq.n	4fee <am_util_stdio_vsprintf+0xf56>
        {
            --pcBuf;
    4fe4:	4610      	mov	r0, r2
    4fe6:	3a01      	subs	r2, #1

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    4fe8:	7801      	ldrb	r1, [r0, #0]
    4fea:	2930      	cmp	r1, #48	; 0x30
    4fec:	d0f7      	beq.n	4fde <am_util_stdio_vsprintf+0xf46>
    4fee:	1c42      	adds	r2, r0, #1
        {
            --pcBuf;
        }
        ++pcBuf;
    4ff0:	4615      	mov	r5, r2
    4ff2:	e6e6      	b.n	4dc2 <am_util_stdio_vsprintf+0xd2a>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    4ff4:	f04f 0e00 	mov.w	lr, #0
    4ff8:	f7ff b978 	b.w	42ec <am_util_stdio_vsprintf+0x254>
    4ffc:	ebbe 0106 	subs.w	r1, lr, r6
    5000:	f47f aa74 	bne.w	44ec <am_util_stdio_vsprintf+0x454>
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    5004:	2c00      	cmp	r4, #0
    5006:	f47f aae4 	bne.w	45d2 <am_util_stdio_vsprintf+0x53a>
    500a:	46a4      	mov	ip, r4
    500c:	4621      	mov	r1, r4
    500e:	f7ff bada 	b.w	45c6 <am_util_stdio_vsprintf+0x52e>
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    5012:	f1be 0f00 	cmp.w	lr, #0
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    5016:	bfc8      	it	gt
    5018:	4617      	movgt	r7, r2
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    501a:	f73f a8f9 	bgt.w	4210 <am_util_stdio_vsprintf+0x178>
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    501e:	4617      	mov	r7, r2

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    5020:	f1be 0f00 	cmp.w	lr, #0
    5024:	f47f a97e 	bne.w	4324 <am_util_stdio_vsprintf+0x28c>
    5028:	e5f3      	b.n	4c12 <am_util_stdio_vsprintf+0xb7a>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    502a:	f04f 0e00 	mov.w	lr, #0
    502e:	f7ff b9ec 	b.w	440a <am_util_stdio_vsprintf+0x372>
                            ++ui32CharCnt;
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    5032:	2c00      	cmp	r4, #0
    5034:	f47f add8 	bne.w	4be8 <am_util_stdio_vsprintf+0xb50>
                    ui32CharCnt += iWidth;
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    5038:	f1bc 0f20 	cmp.w	ip, #32
    503c:	d038      	beq.n	50b0 <am_util_stdio_vsprintf+0x1018>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    503e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    5042:	2200      	movs	r2, #0
    5044:	f7fe ff1c 	bl	3e80 <uint64_to_str>
    5048:	e5da      	b.n	4c00 <am_util_stdio_vsprintf+0xb68>
                        if ( ui8PadChar == '0' )
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    504a:	b114      	cbz	r4, 5052 <am_util_stdio_vsprintf+0xfba>
                            {
                                *pcBuf++ = '-';
    504c:	212d      	movs	r1, #45	; 0x2d
    504e:	7021      	strb	r1, [r4, #0]
    5050:	3401      	adds	r4, #1
                            }

                            ++ui32CharCnt;
    5052:	f10a 0a01 	add.w	sl, sl, #1
    5056:	e54b      	b.n	4af0 <am_util_stdio_vsprintf+0xa58>
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    5058:	2c00      	cmp	r4, #0
    505a:	f47f adc9 	bne.w	4bf0 <am_util_stdio_vsprintf+0xb58>
    505e:	e7ee      	b.n	503e <am_util_stdio_vsprintf+0xfa6>
                    ui32CharCnt += iWidth;
    5060:	44aa      	add	sl, r5
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    5062:	2e00      	cmp	r6, #0
    5064:	d1e8      	bne.n	5038 <am_util_stdio_vsprintf+0xfa0>
    5066:	e7ea      	b.n	503e <am_util_stdio_vsprintf+0xfa6>

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    5068:	2600      	movs	r6, #0
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    {
        *pcBuf++ = '-';
    506a:	222d      	movs	r2, #45	; 0x2d
    506c:	7022      	strb	r2, [r4, #0]
    506e:	f104 0e01 	add.w	lr, r4, #1
    5072:	e696      	b.n	4da2 <am_util_stdio_vsprintf+0xd0a>
                    if ( iVal < 0 )
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    5074:	4b17      	ldr	r3, [pc, #92]	; (50d4 <am_util_stdio_vsprintf+0x103c>)
    5076:	e6b3      	b.n	4de0 <am_util_stdio_vsprintf+0xd48>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    5078:	ebbe 0305 	subs.w	r3, lr, r5
    507c:	f47f abf2 	bne.w	4864 <am_util_stdio_vsprintf+0x7cc>
    5080:	e458      	b.n	4934 <am_util_stdio_vsprintf+0x89c>
    {
        *pcBuf++ = '0';
    }
    else
    {
        if (i32IntPart > 0)
    5082:	dc13      	bgt.n	50ac <am_util_stdio_vsprintf+0x1014>
        {
            uint64_to_str(i32IntPart, pcBuf);
        }
        else
        {
            *pcBuf++ = '-';
    5084:	f10e 0701 	add.w	r7, lr, #1
    5088:	232d      	movs	r3, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    508a:	4240      	negs	r0, r0
    508c:	17c1      	asrs	r1, r0, #31
    508e:	463a      	mov	r2, r7
        {
            uint64_to_str(i32IntPart, pcBuf);
        }
        else
        {
            *pcBuf++ = '-';
    5090:	f88e 3000 	strb.w	r3, [lr]
            uint64_to_str(-i32IntPart, pcBuf);
    5094:	f7fe fef4 	bl	3e80 <uint64_to_str>
    5098:	e701      	b.n	4e9e <am_util_stdio_vsprintf+0xe06>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    509a:	4b0f      	ldr	r3, [pc, #60]	; (50d8 <am_util_stdio_vsprintf+0x1040>)
    509c:	e6a0      	b.n	4de0 <am_util_stdio_vsprintf+0xd48>
        i32IntPart = i32Mantissa >> (23 - iExp2);
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    509e:	43de      	mvns	r6, r3
    }

    if (unFloatValue.I32 < 0)
    50a0:	2a00      	cmp	r2, #0
        i32IntPart = i32Mantissa >> (23 - iExp2);
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    50a2:	fa40 f606 	asr.w	r6, r0, r6
    }

    if (unFloatValue.I32 < 0)
    50a6:	db05      	blt.n	50b4 <am_util_stdio_vsprintf+0x101c>
    50a8:	46a6      	mov	lr, r4
    50aa:	e67d      	b.n	4da8 <am_util_stdio_vsprintf+0xd10>
    {
        *pcBuf++ = '0';
    }
    else
    {
        if (i32IntPart > 0)
    50ac:	4677      	mov	r7, lr
    50ae:	e6f2      	b.n	4e96 <am_util_stdio_vsprintf+0xdfe>
                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
                    ui32CharCnt += iWidth;
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    50b0:	2400      	movs	r4, #0
    50b2:	e6c3      	b.n	4e3c <am_util_stdio_vsprintf+0xda4>
    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    i32IntPart = 0;
    50b4:	2000      	movs	r0, #0
    50b6:	e7d8      	b.n	506a <am_util_stdio_vsprintf+0xfd2>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    50b8:	2300      	movs	r3, #0

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    50ba:	2101      	movs	r1, #1
    50bc:	f7ff b9ea 	b.w	4494 <am_util_stdio_vsprintf+0x3fc>
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    50c0:	f04f 0e00 	mov.w	lr, #0
    50c4:	f7ff b833 	b.w	412e <am_util_stdio_vsprintf+0x96>

        //
        // Handle the specifier.
        //
        ++pcFmt;
        bLower = bLongLong = false;
    50c8:	2300      	movs	r3, #0
    50ca:	931c      	str	r3, [sp, #112]	; 0x70
    50cc:	e6f1      	b.n	4eb2 <am_util_stdio_vsprintf+0xe1a>
    50ce:	bf00      	nop
    50d0:	003f2e3f 	.word	0x003f2e3f
    50d4:	00302e30 	.word	0x00302e30
    50d8:	00232e23 	.word	0x00232e23

000050dc <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    50dc:	b40e      	push	{r1, r2, r3}
    50de:	b500      	push	{lr}
    50e0:	b082      	sub	sp, #8
    50e2:	aa03      	add	r2, sp, #12
    50e4:	f852 1b04 	ldr.w	r1, [r2], #4
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    50e8:	9201      	str	r2, [sp, #4]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    50ea:	f7fe ffd5 	bl	4098 <am_util_stdio_vsprintf>
    va_end(pArgs);

    return ui32CharCnt;
}
    50ee:	b002      	add	sp, #8
    50f0:	f85d eb04 	ldr.w	lr, [sp], #4
    50f4:	b003      	add	sp, #12
    50f6:	4770      	bx	lr

000050f8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    50f8:	b40f      	push	{r0, r1, r2, r3}
    50fa:	b530      	push	{r4, r5, lr}
    50fc:	b083      	sub	sp, #12
    50fe:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    5100:	4c08      	ldr	r4, [pc, #32]	; (5124 <am_util_stdio_printf+0x2c>)
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    5102:	f852 1b04 	ldr.w	r1, [r2], #4

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    5106:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    5108:	4620      	mov	r0, r4
    510a:	f7fe ffc5 	bl	4098 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    510e:	4b06      	ldr	r3, [pc, #24]	; (5128 <am_util_stdio_printf+0x30>)
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    5110:	4605      	mov	r5, r0
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    5112:	6819      	ldr	r1, [r3, #0]
    5114:	4620      	mov	r0, r4
    5116:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    5118:	4628      	mov	r0, r5
    511a:	b003      	add	sp, #12
    511c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5120:	b004      	add	sp, #16
    5122:	4770      	bx	lr
    5124:	100010b8 	.word	0x100010b8
    5128:	100015bc 	.word	0x100015bc

0000512c <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    512c:	4801      	ldr	r0, [pc, #4]	; (5134 <am_util_stdio_terminal_clear+0x8>)
    512e:	f7ff bfe3 	b.w	50f8 <am_util_stdio_printf>
    5132:	bf00      	nop
    5134:	00005f0c 	.word	0x00005f0c

00005138 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    5138:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    513a:	f000 fa97 	bl	566c <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    513e:	f000 fad5 	bl	56ec <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    5142:	f000 fbf5 	bl	5930 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    5146:	2001      	movs	r0, #1
    5148:	f000 fae0 	bl	570c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    514c:	2001      	movs	r0, #1
    514e:	f000 f8c7 	bl	52e0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    5152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    5156:	f000 bae7 	b.w	5728 <am_hal_rtc_osc_disable>
    515a:	bf00      	nop

0000515c <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    515c:	4601      	mov	r1, r0
    515e:	2000      	movs	r0, #0
    5160:	f000 bbd2 	b.w	5908 <am_hal_uart_string_transmit_polled>

00005164 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    5164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5166:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    5168:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    516c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    516e:	7863      	ldrb	r3, [r4, #1]
    5170:	78e2      	ldrb	r2, [r4, #3]
    5172:	7925      	ldrb	r5, [r4, #4]
    5174:	79a1      	ldrb	r1, [r4, #6]
    5176:	00be      	lsls	r6, r7, #2
    5178:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    517c:	f006 0304 	and.w	r3, r6, #4
    5180:	f00e 0602 	and.w	r6, lr, #2
    5184:	431e      	orrs	r6, r3
    5186:	f042 0201 	orr.w	r2, r2, #1
    518a:	79e3      	ldrb	r3, [r4, #7]
    518c:	01ed      	lsls	r5, r5, #7
    518e:	4316      	orrs	r6, r2
    5190:	b2ed      	uxtb	r5, r5
    5192:	7a22      	ldrb	r2, [r4, #8]
    5194:	0289      	lsls	r1, r1, #10
    5196:	432e      	orrs	r6, r5
    5198:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    519c:	7a65      	ldrb	r5, [r4, #9]
    519e:	02db      	lsls	r3, r3, #11
    51a0:	430e      	orrs	r6, r1
    51a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    51a6:	0312      	lsls	r2, r2, #12
    51a8:	7aa1      	ldrb	r1, [r4, #10]
    51aa:	431e      	orrs	r6, r3
    51ac:	042d      	lsls	r5, r5, #16
    51ae:	b293      	uxth	r3, r2
    51b0:	7ae2      	ldrb	r2, [r4, #11]
    51b2:	431e      	orrs	r6, r3
    51b4:	0509      	lsls	r1, r1, #20
    51b6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    51ba:	0612      	lsls	r2, r2, #24
    51bc:	4333      	orrs	r3, r6
    51be:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    51c2:	00bf      	lsls	r7, r7, #2
    51c4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    51c8:	4333      	orrs	r3, r6
    51ca:	430b      	orrs	r3, r1
    51cc:	f007 0508 	and.w	r5, r7, #8
    51d0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    51d2:	f000 f943 	bl	545c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    51d6:	482c      	ldr	r0, [pc, #176]	; (5288 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    51d8:	4b2c      	ldr	r3, [pc, #176]	; (528c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    51da:	6005      	str	r5, [r0, #0]
    51dc:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    51de:	681e      	ldr	r6, [r3, #0]
    51e0:	0777      	lsls	r7, r6, #29
    51e2:	d41e      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    51e4:	681f      	ldr	r7, [r3, #0]
    51e6:	077e      	lsls	r6, r7, #29
    51e8:	f102 32ff 	add.w	r2, r2, #4294967295
    51ec:	d419      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    51ee:	6819      	ldr	r1, [r3, #0]
    51f0:	074f      	lsls	r7, r1, #29
    51f2:	d416      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    51f4:	6818      	ldr	r0, [r3, #0]
    51f6:	0746      	lsls	r6, r0, #29
    51f8:	d413      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    51fa:	681e      	ldr	r6, [r3, #0]
    51fc:	0770      	lsls	r0, r6, #29
    51fe:	d410      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    5200:	681f      	ldr	r7, [r3, #0]
    5202:	0779      	lsls	r1, r7, #29
    5204:	d40d      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    5206:	6819      	ldr	r1, [r3, #0]
    5208:	074f      	lsls	r7, r1, #29
    520a:	d40a      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    520c:	6818      	ldr	r0, [r3, #0]
    520e:	0746      	lsls	r6, r0, #29
    5210:	d407      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    5212:	681e      	ldr	r6, [r3, #0]
    5214:	0770      	lsls	r0, r6, #29
    5216:	d404      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    5218:	681f      	ldr	r7, [r3, #0]
    521a:	0779      	lsls	r1, r7, #29
    521c:	d401      	bmi.n	5222 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    521e:	3a09      	subs	r2, #9
    5220:	d1dd      	bne.n	51de <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    5222:	4b1a      	ldr	r3, [pc, #104]	; (528c <am_hal_cachectrl_enable+0x128>)
    5224:	681a      	ldr	r2, [r3, #0]
    5226:	f042 0101 	orr.w	r1, r2, #1
    522a:	6019      	str	r1, [r3, #0]
    522c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    522e:	6818      	ldr	r0, [r3, #0]
    5230:	0740      	lsls	r0, r0, #29
    5232:	d41e      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5234:	681e      	ldr	r6, [r3, #0]
    5236:	0771      	lsls	r1, r6, #29
    5238:	f102 32ff 	add.w	r2, r2, #4294967295
    523c:	d419      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    523e:	681f      	ldr	r7, [r3, #0]
    5240:	077f      	lsls	r7, r7, #29
    5242:	d416      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5244:	6819      	ldr	r1, [r3, #0]
    5246:	074e      	lsls	r6, r1, #29
    5248:	d413      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    524a:	6818      	ldr	r0, [r3, #0]
    524c:	0740      	lsls	r0, r0, #29
    524e:	d410      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5250:	681e      	ldr	r6, [r3, #0]
    5252:	0771      	lsls	r1, r6, #29
    5254:	d40d      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5256:	681f      	ldr	r7, [r3, #0]
    5258:	077f      	lsls	r7, r7, #29
    525a:	d40a      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    525c:	6819      	ldr	r1, [r3, #0]
    525e:	074e      	lsls	r6, r1, #29
    5260:	d407      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5262:	6818      	ldr	r0, [r3, #0]
    5264:	0740      	lsls	r0, r0, #29
    5266:	d404      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    5268:	681e      	ldr	r6, [r3, #0]
    526a:	0771      	lsls	r1, r6, #29
    526c:	d401      	bmi.n	5272 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    526e:	3a09      	subs	r2, #9
    5270:	d1dd      	bne.n	522e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    5272:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    5274:	4f04      	ldr	r7, [pc, #16]	; (5288 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    5276:	0223      	lsls	r3, r4, #8
    5278:	f403 7100 	and.w	r1, r3, #512	; 0x200
    527c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    5280:	4311      	orrs	r1, r2
    5282:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    5284:	6039      	str	r1, [r7, #0]
    5286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5288:	40018000 	.word	0x40018000
    528c:	40018008 	.word	0x40018008

00005290 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    5290:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    5292:	4604      	mov	r4, r0
    5294:	b120      	cbz	r0, 52a0 <am_hal_clkgen_sysclk_select+0x10>
    5296:	4a06      	ldr	r2, [pc, #24]	; (52b0 <am_hal_clkgen_sysclk_select+0x20>)
    5298:	4806      	ldr	r0, [pc, #24]	; (52b4 <am_hal_clkgen_sysclk_select+0x24>)
    529a:	2150      	movs	r1, #80	; 0x50
    529c:	f000 f84c 	bl	5338 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    52a0:	4b05      	ldr	r3, [pc, #20]	; (52b8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    52a2:	4906      	ldr	r1, [pc, #24]	; (52bc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    52a4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    52a6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    52a8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    52aa:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    52ac:	601a      	str	r2, [r3, #0]
    52ae:	bd10      	pop	{r4, pc}
    52b0:	00005f2c 	.word	0x00005f2c
    52b4:	00005f64 	.word	0x00005f64
    52b8:	40004014 	.word	0x40004014
    52bc:	40004018 	.word	0x40004018

000052c0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    52c0:	4b04      	ldr	r3, [pc, #16]	; (52d4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    52c2:	4905      	ldr	r1, [pc, #20]	; (52d8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    52c4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    52c6:	4805      	ldr	r0, [pc, #20]	; (52dc <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    52c8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    52cc:	bf08      	it	eq
    52ce:	4608      	moveq	r0, r1
    52d0:	4770      	bx	lr
    52d2:	bf00      	nop
    52d4:	40004018 	.word	0x40004018
    52d8:	02dc6c00 	.word	0x02dc6c00
    52dc:	016e3600 	.word	0x016e3600

000052e0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    52e0:	0783      	lsls	r3, r0, #30
    52e2:	d003      	beq.n	52ec <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    52e4:	4a02      	ldr	r2, [pc, #8]	; (52f0 <am_hal_clkgen_osc_stop+0x10>)
    52e6:	6813      	ldr	r3, [r2, #0]
    52e8:	4318      	orrs	r0, r3
    52ea:	6010      	str	r0, [r2, #0]
    52ec:	4770      	bx	lr
    52ee:	bf00      	nop
    52f0:	4000400c 	.word	0x4000400c

000052f4 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    52f4:	2801      	cmp	r0, #1
    52f6:	d900      	bls.n	52fa <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    52f8:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    52fa:	2903      	cmp	r1, #3
    52fc:	d8fc      	bhi.n	52f8 <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    52fe:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    5302:	b430      	push	{r4, r5}
    5304:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    5306:	9301      	str	r3, [sp, #4]
    5308:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    530a:	4b0a      	ldr	r3, [pc, #40]	; (5334 <am_hal_clkgen_uarten_set+0x40>)
    530c:	00c5      	lsls	r5, r0, #3
    530e:	681c      	ldr	r4, [r3, #0]
    5310:	2203      	movs	r2, #3
    5312:	40aa      	lsls	r2, r5
    5314:	ea24 0502 	bic.w	r5, r4, r2
    5318:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    531a:	fb00 f000 	mul.w	r0, r0, r0
    531e:	681a      	ldr	r2, [r3, #0]
    5320:	00c0      	lsls	r0, r0, #3
    5322:	4081      	lsls	r1, r0
    5324:	4311      	orrs	r1, r2
    5326:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    5328:	9b01      	ldr	r3, [sp, #4]
    532a:	f383 8810 	msr	PRIMASK, r3
}
    532e:	b002      	add	sp, #8
    5330:	bc30      	pop	{r4, r5}
    5332:	4770      	bx	lr
    5334:	40004034 	.word	0x40004034

00005338 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    5338:	e7fe      	b.n	5338 <am_hal_debug_error>
    533a:	bf00      	nop

0000533c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    533c:	4b01      	ldr	r3, [pc, #4]	; (5344 <am_hal_flash_delay+0x8>)
    533e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    5340:	4708      	bx	r1
    5342:	bf00      	nop
    5344:	10001048 	.word	0x10001048

00005348 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    5348:	4a0d      	ldr	r2, [pc, #52]	; (5380 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    534a:	4b0e      	ldr	r3, [pc, #56]	; (5384 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    534c:	490e      	ldr	r1, [pc, #56]	; (5388 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    534e:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    5350:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    5352:	6814      	ldr	r4, [r2, #0]
    5354:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    5356:	6809      	ldr	r1, [r1, #0]
    5358:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    535a:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    535c:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    535e:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    5360:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    5362:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    5364:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    5368:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    536a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    536c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    5370:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    5374:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    5376:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    5378:	6142      	str	r2, [r0, #20]
}
    537a:	bc70      	pop	{r4, r5, r6}
    537c:	4770      	bx	lr
    537e:	bf00      	nop
    5380:	400201c4 	.word	0x400201c4
    5384:	400201cc 	.word	0x400201cc
    5388:	400201c0 	.word	0x400201c0

0000538c <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    538c:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    538e:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    5390:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    5392:	b1c0      	cbz	r0, 53c6 <am_hal_pwrctrl_periph_enable+0x3a>
    5394:	1e43      	subs	r3, r0, #1
    5396:	4203      	tst	r3, r0
    5398:	d115      	bne.n	53c6 <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    539a:	f3ef 8010 	mrs	r0, PRIMASK
    539e:	9001      	str	r0, [sp, #4]
    53a0:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    53a2:	4a18      	ldr	r2, [pc, #96]	; (5404 <am_hal_pwrctrl_periph_enable+0x78>)
    53a4:	6811      	ldr	r1, [r2, #0]
    53a6:	4321      	orrs	r1, r4
    53a8:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    53aa:	9b01      	ldr	r3, [sp, #4]
    53ac:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    53b0:	200e      	movs	r0, #14
    53b2:	f7ff ffc3 	bl	533c <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    53b6:	f014 0f0e 	tst.w	r4, #14
    53ba:	d10a      	bne.n	53d2 <am_hal_pwrctrl_periph_enable+0x46>
    53bc:	f014 0f70 	tst.w	r4, #112	; 0x70
    53c0:	d00e      	beq.n	53e0 <am_hal_pwrctrl_periph_enable+0x54>
    53c2:	2408      	movs	r4, #8
    53c4:	e006      	b.n	53d4 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    53c6:	4a10      	ldr	r2, [pc, #64]	; (5408 <am_hal_pwrctrl_periph_enable+0x7c>)
    53c8:	4810      	ldr	r0, [pc, #64]	; (540c <am_hal_pwrctrl_periph_enable+0x80>)
    53ca:	215d      	movs	r1, #93	; 0x5d
    53cc:	f7ff ffb4 	bl	5338 <am_hal_debug_error>
    53d0:	e7e3      	b.n	539a <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    53d2:	2404      	movs	r4, #4
    53d4:	4a0e      	ldr	r2, [pc, #56]	; (5410 <am_hal_pwrctrl_periph_enable+0x84>)
    53d6:	6811      	ldr	r1, [r2, #0]
    53d8:	420c      	tst	r4, r1
    53da:	d0fc      	beq.n	53d6 <am_hal_pwrctrl_periph_enable+0x4a>
}
    53dc:	b002      	add	sp, #8
    53de:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    53e0:	f240 1081 	movw	r0, #385	; 0x181
    53e4:	4020      	ands	r0, r4
    53e6:	b940      	cbnz	r0, 53fa <am_hal_pwrctrl_periph_enable+0x6e>
    53e8:	05a3      	lsls	r3, r4, #22
    53ea:	d408      	bmi.n	53fe <am_hal_pwrctrl_periph_enable+0x72>
    53ec:	f414 6f80 	tst.w	r4, #1024	; 0x400
    53f0:	bf14      	ite	ne
    53f2:	2410      	movne	r4, #16
    53f4:	f04f 34ff 	moveq.w	r4, #4294967295
    53f8:	e7ec      	b.n	53d4 <am_hal_pwrctrl_periph_enable+0x48>
    53fa:	2402      	movs	r4, #2
    53fc:	e7ea      	b.n	53d4 <am_hal_pwrctrl_periph_enable+0x48>
    53fe:	2480      	movs	r4, #128	; 0x80
    5400:	e7e8      	b.n	53d4 <am_hal_pwrctrl_periph_enable+0x48>
    5402:	bf00      	nop
    5404:	40021008 	.word	0x40021008
    5408:	00005f7c 	.word	0x00005f7c
    540c:	00005fb0 	.word	0x00005fb0
    5410:	40021014 	.word	0x40021014

00005414 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    5414:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    5416:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    5418:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    541a:	b110      	cbz	r0, 5422 <am_hal_pwrctrl_periph_disable+0xe>
    541c:	1e43      	subs	r3, r0, #1
    541e:	4203      	tst	r3, r0
    5420:	d004      	beq.n	542c <am_hal_pwrctrl_periph_disable+0x18>
    5422:	4a0b      	ldr	r2, [pc, #44]	; (5450 <am_hal_pwrctrl_periph_disable+0x3c>)
    5424:	480b      	ldr	r0, [pc, #44]	; (5454 <am_hal_pwrctrl_periph_disable+0x40>)
    5426:	218d      	movs	r1, #141	; 0x8d
    5428:	f7ff ff86 	bl	5338 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    542c:	f3ef 8010 	mrs	r0, PRIMASK
    5430:	9001      	str	r0, [sp, #4]
    5432:	b672      	cpsid	i

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    5434:	4a08      	ldr	r2, [pc, #32]	; (5458 <am_hal_pwrctrl_periph_disable+0x44>)
    5436:	6811      	ldr	r1, [r2, #0]
    5438:	ea21 0404 	bic.w	r4, r1, r4
    543c:	6014      	str	r4, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    543e:	9b01      	ldr	r3, [sp, #4]
    5440:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    5444:	200e      	movs	r0, #14
    5446:	f7ff ff79 	bl	533c <am_hal_flash_delay>
}
    544a:	b002      	add	sp, #8
    544c:	bd10      	pop	{r4, pc}
    544e:	bf00      	nop
    5450:	00005f7c 	.word	0x00005f7c
    5454:	00005fb0 	.word	0x00005fb0
    5458:	40021008 	.word	0x40021008

0000545c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    545c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    5460:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    5462:	d03a      	beq.n	54da <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    5464:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    5468:	f000 809d 	beq.w	55a6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    546c:	2801      	cmp	r0, #1
    546e:	f000 809d 	beq.w	55ac <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    5472:	2803      	cmp	r0, #3
    5474:	f000 80a6 	beq.w	55c4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    5478:	2807      	cmp	r0, #7
    547a:	f000 809c 	beq.w	55b6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    547e:	280f      	cmp	r0, #15
    5480:	f000 80a5 	beq.w	55ce <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    5484:	281f      	cmp	r0, #31
    5486:	f000 80b1 	beq.w	55ec <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    548a:	283f      	cmp	r0, #63	; 0x3f
    548c:	f000 80b5 	beq.w	55fa <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    5490:	287f      	cmp	r0, #127	; 0x7f
    5492:	f000 80b9 	beq.w	5608 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    5496:	28ff      	cmp	r0, #255	; 0xff
    5498:	f000 80a0 	beq.w	55dc <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    549c:	f240 13ff 	movw	r3, #511	; 0x1ff
    54a0:	4298      	cmp	r0, r3
    54a2:	f000 80b8 	beq.w	5616 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    54a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    54aa:	4288      	cmp	r0, r1
    54ac:	f000 80b9 	beq.w	5622 <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    54b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    54b4:	4290      	cmp	r0, r2
    54b6:	d00e      	beq.n	54d6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    54b8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    54bc:	f000 80b7 	beq.w	562e <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    54c0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    54c4:	42a0      	cmp	r0, r4
    54c6:	f000 80b5 	beq.w	5634 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    54ca:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    54ce:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    54d2:	4560      	cmp	r0, ip
    54d4:	d132      	bne.n	553c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    54d6:	495c      	ldr	r1, [pc, #368]	; (5648 <am_hal_pwrctrl_memory_enable+0x1ec>)
    54d8:	e066      	b.n	55a8 <am_hal_pwrctrl_memory_enable+0x14c>
    54da:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    54de:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    54e0:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    54e2:	4c5a      	ldr	r4, [pc, #360]	; (564c <am_hal_pwrctrl_memory_enable+0x1f0>)
    54e4:	6822      	ldr	r2, [r4, #0]
    54e6:	402a      	ands	r2, r5
    54e8:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    54ea:	4d58      	ldr	r5, [pc, #352]	; (564c <am_hal_pwrctrl_memory_enable+0x1f0>)
    54ec:	682c      	ldr	r4, [r5, #0]
    54ee:	4320      	orrs	r0, r4
    54f0:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    54f2:	2b00      	cmp	r3, #0
    54f4:	d029      	beq.n	554a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    54f6:	4a56      	ldr	r2, [pc, #344]	; (5650 <am_hal_pwrctrl_memory_enable+0x1f4>)
    54f8:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    54fa:	4203      	tst	r3, r0
    54fc:	bf18      	it	ne
    54fe:	20c6      	movne	r0, #198	; 0xc6
    5500:	d01f      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5502:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5504:	422b      	tst	r3, r5
    5506:	d01c      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5508:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    550a:	4223      	tst	r3, r4
    550c:	d019      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    550e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5510:	422b      	tst	r3, r5
    5512:	d016      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5514:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5516:	4223      	tst	r3, r4
    5518:	d013      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    551a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    551c:	422b      	tst	r3, r5
    551e:	d010      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5520:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5522:	4223      	tst	r3, r4
    5524:	d00d      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5526:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5528:	422b      	tst	r3, r5
    552a:	d00a      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    552c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    552e:	4223      	tst	r3, r4
    5530:	d007      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5532:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    5534:	422b      	tst	r3, r5
    5536:	d004      	beq.n	5542 <am_hal_pwrctrl_memory_enable+0xe6>
    5538:	3809      	subs	r0, #9
    553a:	d1e2      	bne.n	5502 <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    553c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    553e:	bc30      	pop	{r4, r5}
    5540:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    5542:	b911      	cbnz	r1, 554a <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    5544:	2001      	movs	r0, #1
}
    5546:	bc30      	pop	{r4, r5}
    5548:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    554a:	4b41      	ldr	r3, [pc, #260]	; (5650 <am_hal_pwrctrl_memory_enable+0x1f4>)
    554c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    554e:	ea31 0402 	bics.w	r4, r1, r2
    5552:	bf18      	it	ne
    5554:	24c6      	movne	r4, #198	; 0xc6
    5556:	d0f5      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5558:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    555a:	ea31 0000 	bics.w	r0, r1, r0
    555e:	d0f1      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5560:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    5562:	ea31 0005 	bics.w	r0, r1, r5
    5566:	d0ed      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5568:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    556a:	ea31 0002 	bics.w	r0, r1, r2
    556e:	d0e9      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5570:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    5572:	ea31 0000 	bics.w	r0, r1, r0
    5576:	d0e5      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5578:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    557a:	ea31 0005 	bics.w	r0, r1, r5
    557e:	d0e1      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5580:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    5582:	ea31 0002 	bics.w	r0, r1, r2
    5586:	d0dd      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5588:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    558a:	ea31 0000 	bics.w	r0, r1, r0
    558e:	d0d9      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5590:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    5592:	ea31 0005 	bics.w	r0, r1, r5
    5596:	d0d5      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5598:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    559a:	ea31 0002 	bics.w	r0, r1, r2
    559e:	d0d1      	beq.n	5544 <am_hal_pwrctrl_memory_enable+0xe8>
    55a0:	3c09      	subs	r4, #9
    55a2:	d1d9      	bne.n	5558 <am_hal_pwrctrl_memory_enable+0xfc>
    55a4:	e7ca      	b.n	553c <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    55a6:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    55a8:	2300      	movs	r3, #0
    55aa:	e79e      	b.n	54ea <am_hal_pwrctrl_memory_enable+0x8e>
    55ac:	4d29      	ldr	r5, [pc, #164]	; (5654 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55ae:	4b2a      	ldr	r3, [pc, #168]	; (5658 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    55b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    55b4:	e795      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55b6:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55ba:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    55be:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    55c2:	e78e      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55c4:	4d25      	ldr	r5, [pc, #148]	; (565c <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55c6:	4b26      	ldr	r3, [pc, #152]	; (5660 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    55c8:	f44f 7140 	mov.w	r1, #768	; 0x300
    55cc:	e789      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55ce:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55d2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    55d6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    55da:	e782      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55dc:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55e0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    55e4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    55e8:	20ff      	movs	r0, #255	; 0xff
    55ea:	e77a      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55ec:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55f0:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    55f4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    55f8:	e773      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    55fa:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    55fe:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    5602:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    5606:	e76c      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    5608:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    560c:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    5610:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    5614:	e765      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    5616:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    561a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    561e:	4911      	ldr	r1, [pc, #68]	; (5664 <am_hal_pwrctrl_memory_enable+0x208>)
    5620:	e75f      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    5622:	4911      	ldr	r1, [pc, #68]	; (5668 <am_hal_pwrctrl_memory_enable+0x20c>)
    5624:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    5628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    562c:	e759      	b.n	54e2 <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    562e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    5632:	e7b9      	b.n	55a8 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    5634:	4805      	ldr	r0, [pc, #20]	; (564c <am_hal_pwrctrl_memory_enable+0x1f0>)
    5636:	6803      	ldr	r3, [r0, #0]
    5638:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    563c:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    563e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    5642:	2100      	movs	r1, #0
    5644:	e757      	b.n	54f6 <am_hal_pwrctrl_memory_enable+0x9a>
    5646:	bf00      	nop
    5648:	0007ff00 	.word	0x0007ff00
    564c:	40021010 	.word	0x40021010
    5650:	40021014 	.word	0x40021014
    5654:	fffff801 	.word	0xfffff801
    5658:	0007fe00 	.word	0x0007fe00
    565c:	fffff803 	.word	0xfffff803
    5660:	0007fc00 	.word	0x0007fc00
    5664:	0001ff00 	.word	0x0001ff00
    5668:	0003ff00 	.word	0x0003ff00

0000566c <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    566c:	4b0f      	ldr	r3, [pc, #60]	; (56ac <am_hal_pwrctrl_bucks_init+0x40>)
    566e:	681a      	ldr	r2, [r3, #0]
    5670:	0792      	lsls	r2, r2, #30
    5672:	d502      	bpl.n	567a <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    5674:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    5676:	07c3      	lsls	r3, r0, #31
    5678:	d40e      	bmi.n	5698 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    567a:	4b0d      	ldr	r3, [pc, #52]	; (56b0 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    567c:	4a0b      	ldr	r2, [pc, #44]	; (56ac <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    567e:	6819      	ldr	r1, [r3, #0]
    5680:	f041 0002 	orr.w	r0, r1, #2
    5684:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    5686:	6819      	ldr	r1, [r3, #0]
    5688:	f041 0001 	orr.w	r0, r1, #1
    568c:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    568e:	6813      	ldr	r3, [r2, #0]
    5690:	f003 0103 	and.w	r1, r3, #3
    5694:	2903      	cmp	r1, #3
    5696:	d1fa      	bne.n	568e <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    5698:	4a04      	ldr	r2, [pc, #16]	; (56ac <am_hal_pwrctrl_bucks_init+0x40>)
    569a:	6810      	ldr	r0, [r2, #0]
    569c:	f000 0303 	and.w	r3, r0, #3
    56a0:	2b03      	cmp	r3, #3
    56a2:	d1fa      	bne.n	569a <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    56a4:	2042      	movs	r0, #66	; 0x42
    56a6:	f7ff be49 	b.w	533c <am_hal_flash_delay>
    56aa:	bf00      	nop
    56ac:	40021004 	.word	0x40021004
    56b0:	40021000 	.word	0x40021000

000056b4 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    56b4:	4b0b      	ldr	r3, [pc, #44]	; (56e4 <am_hal_pwrctrl_bucks_enable+0x30>)
    56b6:	681a      	ldr	r2, [r3, #0]
    56b8:	0792      	lsls	r2, r2, #30
    56ba:	d502      	bpl.n	56c2 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    56bc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    56be:	07c3      	lsls	r3, r0, #31
    56c0:	d40e      	bmi.n	56e0 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    56c2:	4b09      	ldr	r3, [pc, #36]	; (56e8 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    56c4:	4a07      	ldr	r2, [pc, #28]	; (56e4 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    56c6:	6819      	ldr	r1, [r3, #0]
    56c8:	f041 0002 	orr.w	r0, r1, #2
    56cc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    56ce:	6819      	ldr	r1, [r3, #0]
    56d0:	f041 0001 	orr.w	r0, r1, #1
    56d4:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    56d6:	6813      	ldr	r3, [r2, #0]
    56d8:	f003 0103 	and.w	r1, r3, #3
    56dc:	2903      	cmp	r1, #3
    56de:	d1fa      	bne.n	56d6 <am_hal_pwrctrl_bucks_enable+0x22>
    56e0:	4770      	bx	lr
    56e2:	bf00      	nop
    56e4:	40021004 	.word	0x40021004
    56e8:	40021000 	.word	0x40021000

000056ec <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    56ec:	4905      	ldr	r1, [pc, #20]	; (5704 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    56ee:	4a06      	ldr	r2, [pc, #24]	; (5708 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    56f0:	680b      	ldr	r3, [r1, #0]
    56f2:	f043 0006 	orr.w	r0, r3, #6
    56f6:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    56f8:	6811      	ldr	r1, [r2, #0]
    56fa:	f021 0304 	bic.w	r3, r1, #4
    56fe:	6013      	str	r3, [r2, #0]
    5700:	4770      	bx	lr
    5702:	bf00      	nop
    5704:	40021018 	.word	0x40021018
    5708:	40021000 	.word	0x40021000

0000570c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    570c:	4a05      	ldr	r2, [pc, #20]	; (5724 <am_hal_rtc_osc_select+0x18>)
    570e:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    5710:	b918      	cbnz	r0, 571a <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    5712:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    5716:	6010      	str	r0, [r2, #0]
    5718:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    571a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    571e:	6011      	str	r1, [r2, #0]
    5720:	4770      	bx	lr
    5722:	bf00      	nop
    5724:	4000400c 	.word	0x4000400c

00005728 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    5728:	4a02      	ldr	r2, [pc, #8]	; (5734 <am_hal_rtc_osc_disable+0xc>)
    572a:	6813      	ldr	r3, [r2, #0]
    572c:	f043 0010 	orr.w	r0, r3, #16
    5730:	6010      	str	r0, [r2, #0]
    5732:	4770      	bx	lr
    5734:	40004050 	.word	0x40004050

00005738 <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    5738:	4b02      	ldr	r3, [pc, #8]	; (5744 <am_hal_sysctrl_fpu_enable+0xc>)
    573a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    573e:	601a      	str	r2, [r3, #0]
    5740:	4770      	bx	lr
    5742:	bf00      	nop
    5744:	e000ed88 	.word	0xe000ed88

00005748 <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    5748:	4a05      	ldr	r2, [pc, #20]	; (5760 <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    574a:	6813      	ldr	r3, [r2, #0]
//
//*****************************************************************************
void
am_hal_sysctrl_fpu_stacking_enable(bool bLazy)
{
    if ( bLazy )
    574c:	b918      	cbnz	r0, 5756 <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    574e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    5752:	6010      	str	r0, [r2, #0]
    5754:	4770      	bx	lr
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    5756:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    575a:	6011      	str	r1, [r2, #0]
    575c:	4770      	bx	lr
    575e:	bf00      	nop
    5760:	e000ef34 	.word	0xe000ef34

00005764 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    5764:	4a02      	ldr	r2, [pc, #8]	; (5770 <am_hal_systick_start+0xc>)
    5766:	6813      	ldr	r3, [r2, #0]
    5768:	f043 0001 	orr.w	r0, r3, #1
    576c:	6010      	str	r0, [r2, #0]
    576e:	4770      	bx	lr
    5770:	e000e010 	.word	0xe000e010

00005774 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    5774:	4a02      	ldr	r2, [pc, #8]	; (5780 <am_hal_systick_stop+0xc>)
    5776:	6813      	ldr	r3, [r2, #0]
    5778:	f023 0001 	bic.w	r0, r3, #1
    577c:	6010      	str	r0, [r2, #0]
    577e:	4770      	bx	lr
    5780:	e000e010 	.word	0xe000e010

00005784 <am_hal_systick_int_enable>:
am_hal_systick_int_enable(void)
{
    //
    // Enable the systick timer interrupt.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_TICKINT_M;
    5784:	4a02      	ldr	r2, [pc, #8]	; (5790 <am_hal_systick_int_enable+0xc>)
    5786:	6813      	ldr	r3, [r2, #0]
    5788:	f043 0002 	orr.w	r0, r3, #2
    578c:	6010      	str	r0, [r2, #0]
    578e:	4770      	bx	lr
    5790:	e000e010 	.word	0xe000e010

00005794 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    5794:	4b01      	ldr	r3, [pc, #4]	; (579c <am_hal_systick_load+0x8>)
    5796:	6018      	str	r0, [r3, #0]
    5798:	4770      	bx	lr
    579a:	bf00      	nop
    579c:	e000e014 	.word	0xe000e014

000057a0 <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    57a0:	4b01      	ldr	r3, [pc, #4]	; (57a8 <am_hal_systick_count+0x8>)
    57a2:	6818      	ldr	r0, [r3, #0]
}
    57a4:	4770      	bx	lr
    57a6:	bf00      	nop
    57a8:	e000e018 	.word	0xe000e018

000057ac <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    57ae:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    57b0:	460f      	mov	r7, r1
    57b2:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    57b4:	f7ff fd84 	bl	52c0 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    57b8:	0169      	lsls	r1, r5, #5
    57ba:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    57bc:	fbb0 f4f1 	udiv	r4, r0, r1
    57c0:	fbb2 f0f1 	udiv	r0, r2, r1
    57c4:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    57c8:	b924      	cbnz	r4, 57d4 <am_hal_uart_config+0x28>
    57ca:	4a11      	ldr	r2, [pc, #68]	; (5810 <am_hal_uart_config+0x64>)
    57cc:	4811      	ldr	r0, [pc, #68]	; (5814 <am_hal_uart_config+0x68>)
    57ce:	2161      	movs	r1, #97	; 0x61
    57d0:	f7ff fdb2 	bl	5338 <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    57d4:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    57d8:	331c      	adds	r3, #28
    57da:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    57dc:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    57de:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    57e0:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    57e2:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    57e4:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    57e6:	68fa      	ldr	r2, [r7, #12]
    57e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    57ea:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    57ec:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    57ee:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    57f2:	bf14      	ite	ne
    57f4:	2208      	movne	r2, #8
    57f6:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    57f8:	4302      	orrs	r2, r0
    57fa:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    57fc:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    57fe:	693f      	ldr	r7, [r7, #16]
    5800:	432f      	orrs	r7, r5
    5802:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    5804:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    5806:	f046 0110 	orr.w	r1, r6, #16
    580a:	6319      	str	r1, [r3, #48]	; 0x30
    580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    580e:	bf00      	nop
    5810:	00005fc8 	.word	0x00005fc8
    5814:	00005ffc 	.word	0x00005ffc

00005818 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    5818:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    581a:	f3ef 8310 	mrs	r3, PRIMASK
    581e:	9301      	str	r3, [sp, #4]
    5820:	b672      	cpsid	i
    5822:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    5826:	301c      	adds	r0, #28
    5828:	0301      	lsls	r1, r0, #12
    582a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    582c:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    5830:	f04c 0301 	orr.w	r3, ip, #1
    5834:	630b      	str	r3, [r1, #48]	; 0x30
    5836:	9801      	ldr	r0, [sp, #4]
    5838:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    583c:	b002      	add	sp, #8
    583e:	4770      	bx	lr

00005840 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    5840:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    5842:	f3ef 8310 	mrs	r3, PRIMASK
    5846:	9301      	str	r3, [sp, #4]
    5848:	b672      	cpsid	i
    584a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    584e:	301c      	adds	r0, #28
    5850:	0301      	lsls	r1, r0, #12
    5852:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    5854:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    5858:	f02c 0301 	bic.w	r3, ip, #1
    585c:	630b      	str	r3, [r1, #48]	; 0x30
    585e:	9801      	ldr	r0, [sp, #4]
    5860:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    5864:	b002      	add	sp, #8
    5866:	4770      	bx	lr

00005868 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    5868:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    586a:	b510      	push	{r4, lr}
    586c:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    586e:	d905      	bls.n	587c <am_hal_uart_pwrctrl_enable+0x14>
    5870:	4a05      	ldr	r2, [pc, #20]	; (5888 <am_hal_uart_pwrctrl_enable+0x20>)
    5872:	4806      	ldr	r0, [pc, #24]	; (588c <am_hal_uart_pwrctrl_enable+0x24>)
    5874:	f240 11a3 	movw	r1, #419	; 0x1a3
    5878:	f7ff fd5e 	bl	5338 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    587c:	2080      	movs	r0, #128	; 0x80
    587e:	40a0      	lsls	r0, r4
}
    5880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    5884:	f7ff bd82 	b.w	538c <am_hal_pwrctrl_periph_enable>
    5888:	00006010 	.word	0x00006010
    588c:	00005ffc 	.word	0x00005ffc

00005890 <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    5890:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    5892:	b510      	push	{r4, lr}
    5894:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    5896:	d905      	bls.n	58a4 <am_hal_uart_pwrctrl_disable+0x14>
    5898:	4a05      	ldr	r2, [pc, #20]	; (58b0 <am_hal_uart_pwrctrl_disable+0x20>)
    589a:	4806      	ldr	r0, [pc, #24]	; (58b4 <am_hal_uart_pwrctrl_disable+0x24>)
    589c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    58a0:	f7ff fd4a 	bl	5338 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    58a4:	2080      	movs	r0, #128	; 0x80
    58a6:	40a0      	lsls	r0, r4
}
    58a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    58ac:	f7ff bdb2 	b.w	5414 <am_hal_pwrctrl_periph_disable>
    58b0:	00006010 	.word	0x00006010
    58b4:	00005ffc 	.word	0x00005ffc

000058b8 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    58b8:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    58ba:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    58bc:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    58be:	f7ff fd19 	bl	52f4 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    58c2:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    58c6:	301c      	adds	r0, #28
    58c8:	0301      	lsls	r1, r0, #12
    58ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    58cc:	f043 0208 	orr.w	r2, r3, #8
    58d0:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    58d2:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    58d4:	f044 0010 	orr.w	r0, r4, #16
    58d8:	6308      	str	r0, [r1, #48]	; 0x30
    58da:	bd10      	pop	{r4, pc}

000058dc <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    58dc:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    58e0:	331c      	adds	r3, #28
    58e2:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    58e4:	2100      	movs	r1, #0
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    58e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    58e8:	f022 0208 	bic.w	r2, r2, #8
    58ec:	631a      	str	r2, [r3, #48]	; 0x30

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    58ee:	f7ff bd01 	b.w	52f4 <am_hal_clkgen_uarten_set>
    58f2:	bf00      	nop

000058f4 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    58f4:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    58f8:	301c      	adds	r0, #28
    58fa:	0302      	lsls	r2, r0, #12
    58fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    58fe:	f043 0010 	orr.w	r0, r3, #16
    5902:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    5904:	6351      	str	r1, [r2, #52]	; 0x34
    5906:	4770      	bx	lr

00005908 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    5908:	b410      	push	{r4}
    while (*pcString)
    590a:	780c      	ldrb	r4, [r1, #0]
    590c:	b16c      	cbz	r4, 592a <am_hal_uart_string_transmit_polled+0x22>
    590e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    5912:	301c      	adds	r0, #28
    5914:	0300      	lsls	r0, r0, #12
    5916:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    591a:	6813      	ldr	r3, [r2, #0]
    591c:	069b      	lsls	r3, r3, #26
    591e:	d4fc      	bmi.n	591a <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    5920:	6004      	str	r4, [r0, #0]
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while (*pcString)
    5922:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5926:	2c00      	cmp	r4, #0
    5928:	d1f7      	bne.n	591a <am_hal_uart_string_transmit_polled+0x12>
        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    }
}
    592a:	f85d 4b04 	ldr.w	r4, [sp], #4
    592e:	4770      	bx	lr

00005930 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    5930:	4b01      	ldr	r3, [pc, #4]	; (5938 <am_hal_vcomp_disable+0x8>)
    5932:	2237      	movs	r2, #55	; 0x37
    5934:	601a      	str	r2, [r3, #0]
    5936:	4770      	bx	lr
    5938:	4000c008 	.word	0x4000c008

0000593c <memset>:
    593c:	4402      	add	r2, r0
    593e:	4603      	mov	r3, r0
    5940:	4293      	cmp	r3, r2
    5942:	d002      	beq.n	594a <memset+0xe>
    5944:	f803 1b01 	strb.w	r1, [r3], #1
    5948:	e7fa      	b.n	5940 <memset+0x4>
    594a:	4770      	bx	lr
    594c:	70206b36 	.word	0x70206b36
    5950:	6f667265 	.word	0x6f667265
    5954:	6e616d72 	.word	0x6e616d72
    5958:	72206563 	.word	0x72206563
    595c:	70206e75 	.word	0x70206e75
    5960:	6d617261 	.word	0x6d617261
    5964:	72657465 	.word	0x72657465
    5968:	6f662073 	.word	0x6f662073
    596c:	6f632072 	.word	0x6f632072
    5970:	616d6572 	.word	0x616d6572
    5974:	0a2e6b72 	.word	0x0a2e6b72
    5978:	00000000 	.word	0x00000000
    597c:	76206b36 	.word	0x76206b36
    5980:	64696c61 	.word	0x64696c61
    5984:	6f697461 	.word	0x6f697461
    5988:	7572206e 	.word	0x7572206e
    598c:	6170206e 	.word	0x6170206e
    5990:	656d6172 	.word	0x656d6172
    5994:	73726574 	.word	0x73726574
    5998:	726f6620 	.word	0x726f6620
    599c:	726f6320 	.word	0x726f6320
    59a0:	72616d65 	.word	0x72616d65
    59a4:	000a2e6b 	.word	0x000a2e6b
    59a8:	666f7250 	.word	0x666f7250
    59ac:	20656c69 	.word	0x20656c69
    59b0:	656e6567 	.word	0x656e6567
    59b4:	69746172 	.word	0x69746172
    59b8:	72206e6f 	.word	0x72206e6f
    59bc:	70206e75 	.word	0x70206e75
    59c0:	6d617261 	.word	0x6d617261
    59c4:	72657465 	.word	0x72657465
    59c8:	6f662073 	.word	0x6f662073
    59cc:	6f632072 	.word	0x6f632072
    59d0:	616d6572 	.word	0x616d6572
    59d4:	0a2e6b72 	.word	0x0a2e6b72
    59d8:	00000000 	.word	0x00000000
    59dc:	70204b32 	.word	0x70204b32
    59e0:	6f667265 	.word	0x6f667265
    59e4:	6e616d72 	.word	0x6e616d72
    59e8:	72206563 	.word	0x72206563
    59ec:	70206e75 	.word	0x70206e75
    59f0:	6d617261 	.word	0x6d617261
    59f4:	72657465 	.word	0x72657465
    59f8:	6f662073 	.word	0x6f662073
    59fc:	6f632072 	.word	0x6f632072
    5a00:	616d6572 	.word	0x616d6572
    5a04:	0a2e6b72 	.word	0x0a2e6b72
    5a08:	00000000 	.word	0x00000000
    5a0c:	76204b32 	.word	0x76204b32
    5a10:	64696c61 	.word	0x64696c61
    5a14:	6f697461 	.word	0x6f697461
    5a18:	7572206e 	.word	0x7572206e
    5a1c:	6170206e 	.word	0x6170206e
    5a20:	656d6172 	.word	0x656d6172
    5a24:	73726574 	.word	0x73726574
    5a28:	726f6620 	.word	0x726f6620
    5a2c:	726f6320 	.word	0x726f6320
    5a30:	72616d65 	.word	0x72616d65
    5a34:	000a2e6b 	.word	0x000a2e6b
    5a38:	5d75255b 	.word	0x5d75255b
    5a3c:	4f525245 	.word	0x4f525245
    5a40:	6c202152 	.word	0x6c202152
    5a44:	20747369 	.word	0x20747369
    5a48:	20637263 	.word	0x20637263
    5a4c:	30257830 	.word	0x30257830
    5a50:	2d207834 	.word	0x2d207834
    5a54:	6f687320 	.word	0x6f687320
    5a58:	20646c75 	.word	0x20646c75
    5a5c:	30206562 	.word	0x30206562
    5a60:	34302578 	.word	0x34302578
    5a64:	00000a78 	.word	0x00000a78
    5a68:	5d75255b 	.word	0x5d75255b
    5a6c:	4f525245 	.word	0x4f525245
    5a70:	6d202152 	.word	0x6d202152
    5a74:	69727461 	.word	0x69727461
    5a78:	72632078 	.word	0x72632078
    5a7c:	78302063 	.word	0x78302063
    5a80:	78343025 	.word	0x78343025
    5a84:	73202d20 	.word	0x73202d20
    5a88:	6c756f68 	.word	0x6c756f68
    5a8c:	65622064 	.word	0x65622064
    5a90:	25783020 	.word	0x25783020
    5a94:	0a783430 	.word	0x0a783430
    5a98:	00000000 	.word	0x00000000
    5a9c:	5d75255b 	.word	0x5d75255b
    5aa0:	4f525245 	.word	0x4f525245
    5aa4:	73202152 	.word	0x73202152
    5aa8:	65746174 	.word	0x65746174
    5aac:	63726320 	.word	0x63726320
    5ab0:	25783020 	.word	0x25783020
    5ab4:	20783430 	.word	0x20783430
    5ab8:	6873202d 	.word	0x6873202d
    5abc:	646c756f 	.word	0x646c756f
    5ac0:	20656220 	.word	0x20656220
    5ac4:	30257830 	.word	0x30257830
    5ac8:	000a7834 	.word	0x000a7834
    5acc:	65726f43 	.word	0x65726f43
    5ad0:	6b72614d 	.word	0x6b72614d
    5ad4:	7a695320 	.word	0x7a695320
    5ad8:	20202065 	.word	0x20202065
    5adc:	25203a20 	.word	0x25203a20
    5ae0:	000a756c 	.word	0x000a756c
    5ae4:	61746f54 	.word	0x61746f54
    5ae8:	6974206c 	.word	0x6974206c
    5aec:	20736b63 	.word	0x20736b63
    5af0:	20202020 	.word	0x20202020
    5af4:	25203a20 	.word	0x25203a20
    5af8:	000a756c 	.word	0x000a756c
    5afc:	61746f54 	.word	0x61746f54
    5b00:	6974206c 	.word	0x6974206c
    5b04:	2820656d 	.word	0x2820656d
    5b08:	73636573 	.word	0x73636573
    5b0c:	25203a29 	.word	0x25203a29
    5b10:	00000a66 	.word	0x00000a66
    5b14:	72657449 	.word	0x72657449
    5b18:	6f697461 	.word	0x6f697461
    5b1c:	532f736e 	.word	0x532f736e
    5b20:	20206365 	.word	0x20206365
    5b24:	25203a20 	.word	0x25203a20
    5b28:	00000a66 	.word	0x00000a66
    5b2c:	4f525245 	.word	0x4f525245
    5b30:	4d202152 	.word	0x4d202152
    5b34:	20747375 	.word	0x20747375
    5b38:	63657865 	.word	0x63657865
    5b3c:	20657475 	.word	0x20657475
    5b40:	20726f66 	.word	0x20726f66
    5b44:	6c207461 	.word	0x6c207461
    5b48:	74736165 	.word	0x74736165
    5b4c:	20303120 	.word	0x20303120
    5b50:	73636573 	.word	0x73636573
    5b54:	726f6620 	.word	0x726f6620
    5b58:	76206120 	.word	0x76206120
    5b5c:	64696c61 	.word	0x64696c61
    5b60:	73657220 	.word	0x73657220
    5b64:	21746c75 	.word	0x21746c75
    5b68:	0000000a 	.word	0x0000000a
    5b6c:	72657449 	.word	0x72657449
    5b70:	6f697461 	.word	0x6f697461
    5b74:	2020736e 	.word	0x2020736e
    5b78:	20202020 	.word	0x20202020
    5b7c:	25203a20 	.word	0x25203a20
    5b80:	000a756c 	.word	0x000a756c
    5b84:	20434347 	.word	0x20434347
    5b88:	2e332e35 	.word	0x2e332e35
    5b8c:	30322031 	.word	0x30322031
    5b90:	33303631 	.word	0x33303631
    5b94:	28203730 	.word	0x28203730
    5b98:	656c6572 	.word	0x656c6572
    5b9c:	29657361 	.word	0x29657361
    5ba0:	52415b20 	.word	0x52415b20
    5ba4:	6d652f4d 	.word	0x6d652f4d
    5ba8:	64646562 	.word	0x64646562
    5bac:	352d6465 	.word	0x352d6465
    5bb0:	6172622d 	.word	0x6172622d
    5bb4:	2068636e 	.word	0x2068636e
    5bb8:	69766572 	.word	0x69766572
    5bbc:	6e6f6973 	.word	0x6e6f6973
    5bc0:	34333220 	.word	0x34333220
    5bc4:	5d393835 	.word	0x5d393835
    5bc8:	00000000 	.word	0x00000000
    5bcc:	706d6f43 	.word	0x706d6f43
    5bd0:	72656c69 	.word	0x72656c69
    5bd4:	72657620 	.word	0x72657620
    5bd8:	6e6f6973 	.word	0x6e6f6973
    5bdc:	25203a20 	.word	0x25203a20
    5be0:	00000a73 	.word	0x00000a73
    5be4:	43415453 	.word	0x43415453
    5be8:	0000004b 	.word	0x0000004b
    5bec:	6f6d654d 	.word	0x6f6d654d
    5bf0:	6c207972 	.word	0x6c207972
    5bf4:	7461636f 	.word	0x7461636f
    5bf8:	206e6f69 	.word	0x206e6f69
    5bfc:	25203a20 	.word	0x25203a20
    5c00:	00000a73 	.word	0x00000a73
    5c04:	64656573 	.word	0x64656573
    5c08:	20637263 	.word	0x20637263
    5c0c:	20202020 	.word	0x20202020
    5c10:	20202020 	.word	0x20202020
    5c14:	30203a20 	.word	0x30203a20
    5c18:	34302578 	.word	0x34302578
    5c1c:	00000a78 	.word	0x00000a78
    5c20:	5d64255b 	.word	0x5d64255b
    5c24:	6c637263 	.word	0x6c637263
    5c28:	20747369 	.word	0x20747369
    5c2c:	20202020 	.word	0x20202020
    5c30:	203a2020 	.word	0x203a2020
    5c34:	30257830 	.word	0x30257830
    5c38:	000a7834 	.word	0x000a7834
    5c3c:	5d64255b 	.word	0x5d64255b
    5c40:	6d637263 	.word	0x6d637263
    5c44:	69727461 	.word	0x69727461
    5c48:	20202078 	.word	0x20202078
    5c4c:	203a2020 	.word	0x203a2020
    5c50:	30257830 	.word	0x30257830
    5c54:	000a7834 	.word	0x000a7834
    5c58:	5d64255b 	.word	0x5d64255b
    5c5c:	73637263 	.word	0x73637263
    5c60:	65746174 	.word	0x65746174
    5c64:	20202020 	.word	0x20202020
    5c68:	203a2020 	.word	0x203a2020
    5c6c:	30257830 	.word	0x30257830
    5c70:	000a7834 	.word	0x000a7834
    5c74:	5d64255b 	.word	0x5d64255b
    5c78:	66637263 	.word	0x66637263
    5c7c:	6c616e69 	.word	0x6c616e69
    5c80:	20202020 	.word	0x20202020
    5c84:	203a2020 	.word	0x203a2020
    5c88:	30257830 	.word	0x30257830
    5c8c:	000a7834 	.word	0x000a7834
    5c90:	72726f43 	.word	0x72726f43
    5c94:	20746365 	.word	0x20746365
    5c98:	7265706f 	.word	0x7265706f
    5c9c:	6f697461 	.word	0x6f697461
    5ca0:	6176206e 	.word	0x6176206e
    5ca4:	6164696c 	.word	0x6164696c
    5ca8:	2e646574 	.word	0x2e646574
    5cac:	65655320 	.word	0x65655320
    5cb0:	61657220 	.word	0x61657220
    5cb4:	2e656d64 	.word	0x2e656d64
    5cb8:	20747874 	.word	0x20747874
    5cbc:	20726f66 	.word	0x20726f66
    5cc0:	206e7572 	.word	0x206e7572
    5cc4:	20646e61 	.word	0x20646e61
    5cc8:	6f706572 	.word	0x6f706572
    5ccc:	6e697472 	.word	0x6e697472
    5cd0:	75722067 	.word	0x75722067
    5cd4:	2e73656c 	.word	0x2e73656c
    5cd8:	0000000a 	.word	0x0000000a
    5cdc:	65726f43 	.word	0x65726f43
    5ce0:	6b72614d 	.word	0x6b72614d
    5ce4:	302e3120 	.word	0x302e3120
    5ce8:	25203a20 	.word	0x25203a20
    5cec:	202f2066 	.word	0x202f2066
    5cf0:	25207325 	.word	0x25207325
    5cf4:	00000073 	.word	0x00000073
    5cf8:	67616c66 	.word	0x67616c66
    5cfc:	2d203a73 	.word	0x2d203a73
    5d00:	0000336f 	.word	0x0000336f
    5d04:	25202f20 	.word	0x25202f20
    5d08:	00000073 	.word	0x00000073
    5d0c:	6f727245 	.word	0x6f727245
    5d10:	64207372 	.word	0x64207372
    5d14:	63657465 	.word	0x63657465
    5d18:	0a646574 	.word	0x0a646574
    5d1c:	00000000 	.word	0x00000000
    5d20:	6e6e6143 	.word	0x6e6e6143
    5d24:	7620746f 	.word	0x7620746f
    5d28:	64696c61 	.word	0x64696c61
    5d2c:	20657461 	.word	0x20657461
    5d30:	7265706f 	.word	0x7265706f
    5d34:	6f697461 	.word	0x6f697461
    5d38:	6f66206e 	.word	0x6f66206e
    5d3c:	68742072 	.word	0x68742072
    5d40:	20657365 	.word	0x20657365
    5d44:	64656573 	.word	0x64656573
    5d48:	6c617620 	.word	0x6c617620
    5d4c:	2c736575 	.word	0x2c736575
    5d50:	656c7020 	.word	0x656c7020
    5d54:	20657361 	.word	0x20657361
    5d58:	706d6f63 	.word	0x706d6f63
    5d5c:	20657261 	.word	0x20657261
    5d60:	68746977 	.word	0x68746977
    5d64:	73657220 	.word	0x73657220
    5d68:	73746c75 	.word	0x73746c75
    5d6c:	206e6f20 	.word	0x206e6f20
    5d70:	6e6b2061 	.word	0x6e6b2061
    5d74:	206e776f 	.word	0x206e776f
    5d78:	74616c70 	.word	0x74616c70
    5d7c:	6d726f66 	.word	0x6d726f66
    5d80:	00000a2e 	.word	0x00000a2e
    5d84:	4d2f4d43 	.word	0x4d2f4d43
    5d88:	253d7a48 	.word	0x253d7a48
    5d8c:	2e66332e 	.word	0x2e66332e
    5d90:	0000000a 	.word	0x0000000a
    5d94:	74617453 	.word	0x74617453
    5d98:	00006369 	.word	0x00006369
    5d9c:	70616548 	.word	0x70616548
    5da0:	00000000 	.word	0x00000000
    5da4:	63617453 	.word	0x63617453
    5da8:	0000006b 	.word	0x0000006b
    5dac:	69626d41 	.word	0x69626d41
    5db0:	694d2071 	.word	0x694d2071
    5db4:	206f7263 	.word	0x206f7263
    5db8:	65726f43 	.word	0x65726f43
    5dbc:	6b72616d 	.word	0x6b72616d
    5dc0:	73657420 	.word	0x73657420
    5dc4:	2e2e2e74 	.word	0x2e2e2e74
    5dc8:	00000a0a 	.word	0x00000a0a
    5dcc:	626d410a 	.word	0x626d410a
    5dd0:	4d207169 	.word	0x4d207169
    5dd4:	6f726369 	.word	0x6f726369
    5dd8:	726f4320 	.word	0x726f4320
    5ddc:	72616d65 	.word	0x72616d65
    5de0:	7572206b 	.word	0x7572206b
    5de4:	6966206e 	.word	0x6966206e
    5de8:	6873696e 	.word	0x6873696e
    5dec:	0a216465 	.word	0x0a216465
    5df0:	0000000a 	.word	0x0000000a
    5df4:	46465542 	.word	0x46465542
    5df8:	4f205245 	.word	0x4f205245
    5dfc:	46524556 	.word	0x46524556
    5e00:	45574f4c 	.word	0x45574f4c
    5e04:	49202144 	.word	0x49202144
    5e08:	6572636e 	.word	0x6572636e
    5e0c:	20657361 	.word	0x20657361
    5e10:	42545250 	.word	0x42545250
    5e14:	49534655 	.word	0x49534655
    5e18:	000a455a 	.word	0x000a455a

00005e1c <intpat>:
    5e1c:	00005ecc 00005ed4 00005edc 00005ee4     .^...^...^...^..

00005e2c <floatpat>:
    5e2c:	00005e9c 00005ea8 00005eb4 00005ec0     .^...^...^...^..
    5e3c:	332e3054 46312d65 00000000 542e542d     T0.3e-1F....-T.T
    5e4c:	71542b2b 00000000 2e335431 7a346534     ++Tq....1T3.4e4z
    5e5c:	00000000 302e3433 5e542d65 00000000     ....34.0e-T^....
    5e6c:	30352e35 332b6530 00000000 32312e2d     5.500e+3....-.12
    5e7c:	322d6533 00000000 6537382d 3233382b     3e-2....-87e+832
    5e8c:	00000000 362e302b 32312d65 00000000     ....+0.6e-12....
    5e9c:	352e3533 30303434 00000000 3332312e     35.54400.....123
    5eac:	30303534 00000000 3031312d 3030372e     4500....-110.700
    5ebc:	00000000 362e302b 30303434 00000000     ....+0.64400....
    5ecc:	32313035 00000000 34333231 00000000     5012....1234....
    5edc:	3437382d 00000000 3232312b 00000000     -874....+122....

00005eec <scipat>:
    5eec:	00005e6c 00005e78 00005e84 00005e90     l^..x^...^...^..

00005efc <errpat>:
    5efc:	00005e3c 00005e48 00005e54 00005e60     <^..H^..T^..`^..
    5f0c:	0a0a0a0a 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
    5f1c:	00000a0a                                ....

00005f20 <am_hal_cachectrl_defaults>:
    5f20:	50000001 00010300 00010101 685f6d61     ...P........am_h
    5f30:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    5f40:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    5f50:	63206469 6b636f6c 74657320 676e6974     id clock setting
    5f60:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    5f70:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    5f80:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    5f90:	206e6168 20656e6f 69726570 72656870     han one peripher
    5fa0:	61206c61 20612074 656d6974 0000002e     al at a time....
    5fb0:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    5fc0:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    5fd0:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    5fe0:	61657267 20726574 6e616874 20726f20     greater than or 
    5ff0:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    6000:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    6010:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    6020:	20612065 54524155 646f6d20 20656c75     e a UART module 
    6030:	74616874 656f6420 74276e73 69786520     that doesn't exi
    6040:	00007473 69797254 7420676e 6e65206f     st..Trying to en
    6050:	656c6261 55206120 20545241 75646f6d     able a UART modu
    6060:	7420656c 20746168 73656f64 2074276e     le that doesn't 
    6070:	73697865 00000074                       exist...
