
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\hello_world\atollic_gcc\bin\hello_world_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ee4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000050  10001000  00001ee4  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  10001050  00001f34  00021050  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021050  2**0
                  CONTENTS, READONLY
  5 .debug_info   000066b9  00000000  00000000  00021087  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b0d  00000000  00000000  00027740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f0  00000000  00000000  0002924d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e40  00000000  00000000  00029a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004062  00000000  00000000  0002a87d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002be9  00000000  00000000  0002e8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  000314c8  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000015e8  00000000  00000000  00031548  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003837  00000000  00000000  00032b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 69 02 00 00 d1 02 00 00 e1 02 00 00     ....i...........
      10:	e1 02 00 00 e1 02 00 00 e1 02 00 00 00 00 00 00     ................
	...
      2c:	d9 02 00 00 d9 02 00 00 00 00 00 00 d9 02 00 00     ................
      3c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      4c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      5c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      6c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      7c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      8c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      9c:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      ac:	d9 02 00 00 d9 02 00 00 d9 02 00 00 d9 02 00 00     ................
      bc:	d9 02 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     160:	b580      	push	{r7, lr}
     162:	b094      	sub	sp, #80	; 0x50
     164:	af02      	add	r7, sp, #8
    am_util_id_t sIdDevice;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     166:	2000      	movs	r0, #0
     168:	f001 f99a 	bl	14a0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     16c:	4830      	ldr	r0, [pc, #192]	; (230 <main+0xd0>)
     16e:	f001 f901 	bl	1374 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     172:	f001 f875 	bl	1260 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     176:	482f      	ldr	r0, [pc, #188]	; (234 <main+0xd4>)
     178:	f000 f9d8 	bl	52c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     17c:	f3ef 8310 	mrs	r3, PRIMASK
     180:	607b      	str	r3, [r7, #4]
     182:	b672      	cpsid	i
     184:	4b2c      	ldr	r3, [pc, #176]	; (238 <main+0xd8>)
     186:	2273      	movs	r2, #115	; 0x73
     188:	601a      	str	r2, [r3, #0]
     18a:	4a2c      	ldr	r2, [pc, #176]	; (23c <main+0xdc>)
     18c:	4b2b      	ldr	r3, [pc, #172]	; (23c <main+0xdc>)
     18e:	681b      	ldr	r3, [r3, #0]
     190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     194:	6013      	str	r3, [r2, #0]
     196:	4a2a      	ldr	r2, [pc, #168]	; (240 <main+0xe0>)
     198:	4b29      	ldr	r3, [pc, #164]	; (240 <main+0xe0>)
     19a:	681b      	ldr	r3, [r3, #0]
     19c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1a4:	6013      	str	r3, [r2, #0]
     1a6:	4a27      	ldr	r2, [pc, #156]	; (244 <main+0xe4>)
     1a8:	4b26      	ldr	r3, [pc, #152]	; (244 <main+0xe4>)
     1aa:	681b      	ldr	r3, [r3, #0]
     1ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1b0:	6013      	str	r3, [r2, #0]
     1b2:	4b21      	ldr	r3, [pc, #132]	; (238 <main+0xd8>)
     1b4:	2200      	movs	r2, #0
     1b6:	601a      	str	r2, [r3, #0]
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1be:	f001 f9a9 	bl	1514 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1c2:	f001 f85f 	bl	1284 <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     1c6:	f001 f841 	bl	124c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
     1ca:	481f      	ldr	r0, [pc, #124]	; (248 <main+0xe8>)
     1cc:	f001 f820 	bl	1210 <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
     1d0:	f107 0308 	add.w	r3, r7, #8
     1d4:	4618      	mov	r0, r3
     1d6:	f000 f903 	bl	3e0 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
     1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1dc:	4619      	mov	r1, r3
     1de:	481b      	ldr	r0, [pc, #108]	; (24c <main+0xec>)
     1e0:	f001 f816 	bl	1210 <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n",
     1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1e6:	4619      	mov	r1, r3
     1e8:	4819      	ldr	r0, [pc, #100]	; (250 <main+0xf0>)
     1ea:	f001 f811 	bl	1210 <am_util_stdio_printf>
         sIdDevice.pui8DeviceName);
    am_util_stdio_printf("Device Info:\n\tPart number: 0x%08X\n"
     1ee:	68b9      	ldr	r1, [r7, #8]
     1f0:	697a      	ldr	r2, [r7, #20]
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     1f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    //
    am_util_id_device(&sIdDevice);
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    am_util_stdio_printf("Device type: %s\n",
         sIdDevice.pui8DeviceName);
    am_util_stdio_printf("Device Info:\n\tPart number: 0x%08X\n"
     1f6:	4618      	mov	r0, r3
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     1f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
    //
    am_util_id_device(&sIdDevice);
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    am_util_stdio_printf("Device type: %s\n",
         sIdDevice.pui8DeviceName);
    am_util_stdio_printf("Device Info:\n\tPart number: 0x%08X\n"
     1fc:	9300      	str	r3, [sp, #0]
     1fe:	4603      	mov	r3, r0
     200:	4814      	ldr	r0, [pc, #80]	; (254 <main+0xf4>)
     202:	f001 f805 	bl	1210 <am_util_stdio_printf>
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    am_util_stdio_printf("\tFlash size: %d\n", sIdDevice.sMcuCtrlDevice.ui32FlashSize);
     206:	6a3b      	ldr	r3, [r7, #32]
     208:	4619      	mov	r1, r3
     20a:	4813      	ldr	r0, [pc, #76]	; (258 <main+0xf8>)
     20c:	f001 f800 	bl	1210 <am_util_stdio_printf>
    am_util_stdio_printf("\tSRAM size: %d\n\n", sIdDevice.sMcuCtrlDevice.ui32SRAMSize);
     210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     212:	4619      	mov	r1, r3
     214:	4811      	ldr	r0, [pc, #68]	; (25c <main+0xfc>)
     216:	f000 fffb 	bl	1210 <am_util_stdio_printf>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     21a:	4911      	ldr	r1, [pc, #68]	; (260 <main+0x100>)
     21c:	4811      	ldr	r0, [pc, #68]	; (264 <main+0x104>)
     21e:	f000 fff7 	bl	1210 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     222:	f001 f86f 	bl	1304 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     226:	2001      	movs	r0, #1
     228:	f001 fbfa 	bl	1a20 <am_hal_sysctrl_sleep>
    }
     22c:	e7fb      	b.n	226 <main+0xc6>
     22e:	bf00      	nop
     230:	00001e48 	.word	0x00001e48
     234:	00001371 	.word	0x00001371
     238:	40010060 	.word	0x40010060
     23c:	40010054 	.word	0x40010054
     240:	40010028 	.word	0x40010028
     244:	40010108 	.word	0x40010108
     248:	00001d0c 	.word	0x00001d0c
     24c:	00001d1c 	.word	0x00001d1c
     250:	00001d30 	.word	0x00001d30
     254:	00001d44 	.word	0x00001d44
     258:	00001d84 	.word	0x00001d84
     25c:	00001d98 	.word	0x00001d98
     260:	00001dac 	.word	0x00001dac
     264:	00001df4 	.word	0x00001df4

00000268 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     268:	4811      	ldr	r0, [pc, #68]	; (2b0 <zero_loop+0x12>)
     26a:	4912      	ldr	r1, [pc, #72]	; (2b4 <zero_loop+0x16>)
     26c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     26e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     272:	4811      	ldr	r0, [pc, #68]	; (2b8 <zero_loop+0x1a>)
     274:	6801      	ldr	r1, [r0, #0]
     276:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     27a:	6001      	str	r1, [r0, #0]
     27c:	f3bf 8f4f 	dsb	sy
     280:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     284:	480d      	ldr	r0, [pc, #52]	; (2bc <zero_loop+0x1e>)
     286:	490e      	ldr	r1, [pc, #56]	; (2c0 <zero_loop+0x22>)
     288:	4a0e      	ldr	r2, [pc, #56]	; (2c4 <zero_loop+0x26>)

0000028a <copy_loop>:
     28a:	f850 3b04 	ldr.w	r3, [r0], #4
     28e:	f841 3b04 	str.w	r3, [r1], #4
     292:	4291      	cmp	r1, r2
     294:	dbf9      	blt.n	28a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <zero_loop+0x2a>)
     298:	490c      	ldr	r1, [pc, #48]	; (2cc <zero_loop+0x2e>)
     29a:	f04f 0200 	mov.w	r2, #0

0000029e <zero_loop>:
     29e:	4288      	cmp	r0, r1
     2a0:	bfb8      	it	lt
     2a2:	f840 2b04 	strlt.w	r2, [r0], #4
     2a6:	dbfa      	blt.n	29e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     2a8:	f7ff ff5a 	bl	160 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     2ac:	be00      	bkpt	0x0000
}
     2ae:	bf00      	nop
     2b0:	e000ed08 	.word	0xe000ed08
     2b4:	00000000 	.word	0x00000000
     2b8:	e000ed88 	.word	0xe000ed88
     2bc:	00001ee4 	.word	0x00001ee4
     2c0:	10001000 	.word	0x10001000
     2c4:	10001050 	.word	0x10001050
     2c8:	10001050 	.word	0x10001050
     2cc:	10001168 	.word	0x10001168

000002d0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     2d0:	b480      	push	{r7}
     2d2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     2d4:	e7fe      	b.n	2d4 <am_nmi_isr+0x4>
     2d6:	bf00      	nop

000002d8 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     2d8:	b480      	push	{r7}
     2da:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     2dc:	e7fe      	b.n	2dc <am_adc_isr+0x4>
     2de:	bf00      	nop

000002e0 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     2e0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     2e2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     2e4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     2e6:	f000 f809 	bl	2fc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     2ea:	bd01      	pop	{r0, pc}
}
     2ec:	bf00      	nop
     2ee:	4618      	mov	r0, r3

000002f0 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     2f0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     2f2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     2f4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     2f6:	4770      	bx	lr
}
     2f8:	bf00      	nop
     2fa:	4618      	mov	r0, r3

000002fc <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b096      	sub	sp, #88	; 0x58
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     304:	f107 030c 	add.w	r3, r7, #12
     308:	2200      	movs	r2, #0
     30a:	601a      	str	r2, [r3, #0]
     30c:	605a      	str	r2, [r3, #4]
     30e:	609a      	str	r2, [r3, #8]
     310:	60da      	str	r2, [r3, #12]
     312:	611a      	str	r2, [r3, #16]
     314:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     316:	2300      	movs	r3, #0
     318:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     31c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     31e:	4b2e      	ldr	r3, [pc, #184]	; (3d8 <am_util_faultisr_collect_data+0xdc>)
     320:	681b      	ldr	r3, [r3, #0]
     322:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     326:	b2db      	uxtb	r3, r3
     328:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     32e:	0a1b      	lsrs	r3, r3, #8
     330:	b2db      	uxtb	r3, r3
     332:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     338:	0c1b      	lsrs	r3, r3, #16
     33a:	b29b      	uxth	r3, r3
     33c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     340:	4b26      	ldr	r3, [pc, #152]	; (3dc <am_util_faultisr_collect_data+0xe0>)
     342:	681b      	ldr	r3, [r3, #0]
     344:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     346:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     34a:	b2db      	uxtb	r3, r3
     34c:	f003 0302 	and.w	r3, r3, #2
     350:	2b00      	cmp	r3, #0
     352:	d005      	beq.n	360 <am_util_faultisr_collect_data+0x64>
     354:	6879      	ldr	r1, [r7, #4]
     356:	2006      	movs	r0, #6
     358:	f7ff ffca 	bl	2f0 <getStackedReg>
     35c:	4603      	mov	r3, r0
     35e:	e001      	b.n	364 <am_util_faultisr_collect_data+0x68>
     360:	f04f 33ff 	mov.w	r3, #4294967295
     364:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     366:	6879      	ldr	r1, [r7, #4]
     368:	2000      	movs	r0, #0
     36a:	f7ff ffc1 	bl	2f0 <getStackedReg>
     36e:	4603      	mov	r3, r0
     370:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     372:	6879      	ldr	r1, [r7, #4]
     374:	2001      	movs	r0, #1
     376:	f7ff ffbb 	bl	2f0 <getStackedReg>
     37a:	4603      	mov	r3, r0
     37c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     37e:	6879      	ldr	r1, [r7, #4]
     380:	2002      	movs	r0, #2
     382:	f7ff ffb5 	bl	2f0 <getStackedReg>
     386:	4603      	mov	r3, r0
     388:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     38a:	6879      	ldr	r1, [r7, #4]
     38c:	2003      	movs	r0, #3
     38e:	f7ff ffaf 	bl	2f0 <getStackedReg>
     392:	4603      	mov	r3, r0
     394:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     396:	6879      	ldr	r1, [r7, #4]
     398:	2004      	movs	r0, #4
     39a:	f7ff ffa9 	bl	2f0 <getStackedReg>
     39e:	4603      	mov	r3, r0
     3a0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3a2:	6879      	ldr	r1, [r7, #4]
     3a4:	2005      	movs	r0, #5
     3a6:	f7ff ffa3 	bl	2f0 <getStackedReg>
     3aa:	4603      	mov	r3, r0
     3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3ae:	6879      	ldr	r1, [r7, #4]
     3b0:	2006      	movs	r0, #6
     3b2:	f7ff ff9d 	bl	2f0 <getStackedReg>
     3b6:	4603      	mov	r3, r0
     3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     3ba:	6879      	ldr	r1, [r7, #4]
     3bc:	2007      	movs	r0, #7
     3be:	f7ff ff97 	bl	2f0 <getStackedReg>
     3c2:	4603      	mov	r3, r0
     3c4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     3c6:	f107 030c 	add.w	r3, r7, #12
     3ca:	4618      	mov	r0, r3
     3cc:	f001 f96a 	bl	16a4 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     3d0:	2300      	movs	r3, #0
     3d2:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     3d4:	e7fe      	b.n	3d4 <am_util_faultisr_collect_data+0xd8>
     3d6:	bf00      	nop
     3d8:	e000ed28 	.word	0xe000ed28
     3dc:	e000ed38 	.word	0xe000ed38

000003e0 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	b084      	sub	sp, #16
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    uint32_t ux, ui32PN;

    //
    // Go get all the device (hardware) info from the HAL
    //
    am_hal_mcuctrl_device_info_get(&psIDDevice->sMcuCtrlDevice);
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	4618      	mov	r0, r3
     3ec:	f001 f8e2 	bl	15b4 <am_hal_mcuctrl_device_info_get>

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     3f8:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     3fe:	4a44      	ldr	r2, [pc, #272]	; (510 <am_util_id_device+0x130>)
     400:	4293      	cmp	r3, r2
     402:	d10e      	bne.n	422 <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     404:	687b      	ldr	r3, [r7, #4]
     406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     408:	2b9b      	cmp	r3, #155	; 0x9b
     40a:	d10a      	bne.n	422 <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	6a1b      	ldr	r3, [r3, #32]
     410:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     414:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
     418:	d003      	beq.n	422 <am_util_id_device+0x42>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	4a3d      	ldr	r2, [pc, #244]	; (514 <am_util_id_device+0x134>)
     41e:	635a      	str	r2, [r3, #52]	; 0x34
     420:	e002      	b.n	428 <am_util_id_device+0x48>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
     422:	687b      	ldr	r3, [r7, #4]
     424:	4a3c      	ldr	r2, [pc, #240]	; (518 <am_util_id_device+0x138>)
     426:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
     428:	687b      	ldr	r3, [r7, #4]
     42a:	691b      	ldr	r3, [r3, #16]
     42c:	4a3b      	ldr	r2, [pc, #236]	; (51c <am_util_id_device+0x13c>)
     42e:	4293      	cmp	r3, r2
     430:	d102      	bne.n	438 <am_util_id_device+0x58>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     432:	687b      	ldr	r3, [r7, #4]
     434:	4a37      	ldr	r2, [pc, #220]	; (514 <am_util_id_device+0x134>)
     436:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
     438:	687b      	ldr	r3, [r7, #4]
     43a:	6a1b      	ldr	r3, [r3, #32]
     43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     440:	2be0      	cmp	r3, #224	; 0xe0
     442:	d126      	bne.n	492 <am_util_id_device+0xb2>
     444:	68fb      	ldr	r3, [r7, #12]
     446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     44a:	d122      	bne.n	492 <am_util_id_device+0xb2>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	2201      	movs	r2, #1
     450:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
     452:	687b      	ldr	r3, [r7, #4]
     454:	4a32      	ldr	r2, [pc, #200]	; (520 <am_util_id_device+0x140>)
     456:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     458:	687b      	ldr	r3, [r7, #4]
     45a:	68db      	ldr	r3, [r3, #12]
     45c:	091b      	lsrs	r3, r3, #4
     45e:	f003 030f 	and.w	r3, r3, #15
     462:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     464:	68bb      	ldr	r3, [r7, #8]
     466:	b2db      	uxtb	r3, r3
     468:	3340      	adds	r3, #64	; 0x40
     46a:	b2da      	uxtb	r2, r3
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     472:	687b      	ldr	r3, [r7, #4]
     474:	68db      	ldr	r3, [r3, #12]
     476:	f003 030f 	and.w	r3, r3, #15
     47a:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     47c:	68bb      	ldr	r3, [r7, #8]
     47e:	b2db      	uxtb	r3, r3
     480:	3330      	adds	r3, #48	; 0x30
     482:	b2da      	uxtb	r2, r3
     484:	687b      	ldr	r3, [r7, #4]
     486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	4a21      	ldr	r2, [pc, #132]	; (514 <am_util_id_device+0x134>)
     48e:	635a      	str	r2, [r3, #52]	; 0x34
     490:	e037      	b.n	502 <am_util_id_device+0x122>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
     492:	687b      	ldr	r3, [r7, #4]
     494:	6a1b      	ldr	r3, [r3, #32]
     496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     49a:	2bd0      	cmp	r3, #208	; 0xd0
     49c:	d123      	bne.n	4e6 <am_util_id_device+0x106>
     49e:	68fb      	ldr	r3, [r7, #12]
     4a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
     4a4:	d11f      	bne.n	4e6 <am_util_id_device+0x106>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	2202      	movs	r2, #2
     4aa:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	4a1d      	ldr	r2, [pc, #116]	; (524 <am_util_id_device+0x144>)
     4b0:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	68db      	ldr	r3, [r3, #12]
     4b6:	091b      	lsrs	r3, r3, #4
     4b8:	f003 030f 	and.w	r3, r3, #15
     4bc:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	b2db      	uxtb	r3, r3
     4c2:	3340      	adds	r3, #64	; 0x40
     4c4:	b2da      	uxtb	r2, r3
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	68db      	ldr	r3, [r3, #12]
     4d0:	f003 030f 	and.w	r3, r3, #15
     4d4:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     4d6:	68bb      	ldr	r3, [r7, #8]
     4d8:	b2db      	uxtb	r3, r3
     4da:	3330      	adds	r3, #48	; 0x30
     4dc:	b2da      	uxtb	r2, r3
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     4e4:	e00d      	b.n	502 <am_util_id_device+0x122>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	2200      	movs	r2, #0
     4ea:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	4a0e      	ldr	r2, [pc, #56]	; (528 <am_util_id_device+0x148>)
     4f0:	639a      	str	r2, [r3, #56]	; 0x38
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	223f      	movs	r2, #63	; 0x3f
     4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	2220      	movs	r2, #32
     4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }

    return psIDDevice->ui32Device;
     502:	687b      	ldr	r3, [r7, #4]
     504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
     506:	4618      	mov	r0, r3
     508:	3710      	adds	r7, #16
     50a:	46bd      	mov	sp, r7
     50c:	bd80      	pop	{r7, pc}
     50e:	bf00      	nop
     510:	b105100d 	.word	0xb105100d
     514:	00001e28 	.word	0x00001e28
     518:	00001e30 	.word	0x00001e30
     51c:	414d4251 	.word	0x414d4251
     520:	00001e18 	.word	0x00001e18
     524:	00001e20 	.word	0x00001e20
     528:	00001e38 	.word	0x00001e38

0000052c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     534:	4a04      	ldr	r2, [pc, #16]	; (548 <am_util_stdio_printf_init+0x1c>)
     536:	687b      	ldr	r3, [r7, #4]
     538:	6013      	str	r3, [r2, #0]
}
     53a:	bf00      	nop
     53c:	370c      	adds	r7, #12
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr
     546:	bf00      	nop
     548:	10001164 	.word	0x10001164

0000054c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     54c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     550:	b096      	sub	sp, #88	; 0x58
     552:	af00      	add	r7, sp, #0
     554:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     558:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     55c:	0025      	movs	r5, r4
     55e:	2600      	movs	r6, #0
     560:	ea55 0306 	orrs.w	r3, r5, r6
     564:	f000 809e 	beq.w	6a4 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     568:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     56c:	0862      	lsrs	r2, r4, #1
     56e:	ea4f 0133 	mov.w	r1, r3, rrx
     572:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     576:	ea4f 0893 	mov.w	r8, r3, lsr #2
     57a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     57e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     582:	eb11 0308 	adds.w	r3, r1, r8
     586:	eb42 0409 	adc.w	r4, r2, r9
     58a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     58e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     592:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     596:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     59a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     59e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5a2:	eb13 030a 	adds.w	r3, r3, sl
     5a6:	eb44 040b 	adc.w	r4, r4, fp
     5aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5b2:	0a1a      	lsrs	r2, r3, #8
     5b4:	62ba      	str	r2, [r7, #40]	; 0x28
     5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     5bc:	62ba      	str	r2, [r7, #40]	; 0x28
     5be:	0a23      	lsrs	r3, r4, #8
     5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
     5c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     5ca:	18c9      	adds	r1, r1, r3
     5cc:	eb42 0204 	adc.w	r2, r2, r4
     5d0:	460b      	mov	r3, r1
     5d2:	4614      	mov	r4, r2
     5d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     5d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5dc:	0c1a      	lsrs	r2, r3, #16
     5de:	623a      	str	r2, [r7, #32]
     5e0:	6a3a      	ldr	r2, [r7, #32]
     5e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     5e6:	623a      	str	r2, [r7, #32]
     5e8:	0c23      	lsrs	r3, r4, #16
     5ea:	627b      	str	r3, [r7, #36]	; 0x24
     5ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     5f4:	18c9      	adds	r1, r1, r3
     5f6:	eb42 0204 	adc.w	r2, r2, r4
     5fa:	460b      	mov	r3, r1
     5fc:	4614      	mov	r4, r2
     5fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     602:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     606:	0023      	movs	r3, r4
     608:	603b      	str	r3, [r7, #0]
     60a:	2300      	movs	r3, #0
     60c:	607b      	str	r3, [r7, #4]
     60e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     612:	e897 0006 	ldmia.w	r7, {r1, r2}
     616:	18c9      	adds	r1, r1, r3
     618:	eb42 0204 	adc.w	r2, r2, r4
     61c:	460b      	mov	r3, r1
     61e:	4614      	mov	r4, r2
     620:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     624:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     628:	08da      	lsrs	r2, r3, #3
     62a:	613a      	str	r2, [r7, #16]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     632:	613a      	str	r2, [r7, #16]
     634:	08e3      	lsrs	r3, r4, #3
     636:	617b      	str	r3, [r7, #20]
     638:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     63c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     640:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     644:	18db      	adds	r3, r3, r3
     646:	eb44 0404 	adc.w	r4, r4, r4
     64a:	00a2      	lsls	r2, r4, #2
     64c:	60fa      	str	r2, [r7, #12]
     64e:	68fa      	ldr	r2, [r7, #12]
     650:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     654:	60fa      	str	r2, [r7, #12]
     656:	009a      	lsls	r2, r3, #2
     658:	60ba      	str	r2, [r7, #8]
     65a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     65e:	18c9      	adds	r1, r1, r3
     660:	eb42 0204 	adc.w	r2, r2, r4
     664:	460b      	mov	r3, r1
     666:	4614      	mov	r4, r2
     668:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     66c:	1acb      	subs	r3, r1, r3
     66e:	eb62 0404 	sbc.w	r4, r2, r4
     672:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     676:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     67a:	3306      	adds	r3, #6
     67c:	f144 0400 	adc.w	r4, r4, #0
     680:	091a      	lsrs	r2, r3, #4
     682:	61ba      	str	r2, [r7, #24]
     684:	69ba      	ldr	r2, [r7, #24]
     686:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     68a:	61ba      	str	r2, [r7, #24]
     68c:	0923      	lsrs	r3, r4, #4
     68e:	61fb      	str	r3, [r7, #28]
     690:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     694:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     698:	18c9      	adds	r1, r1, r3
     69a:	eb42 0204 	adc.w	r2, r2, r4
     69e:	460b      	mov	r3, r1
     6a0:	4614      	mov	r4, r2
     6a2:	e029      	b.n	6f8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6a6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6aa:	085a      	lsrs	r2, r3, #1
     6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6ae:	089b      	lsrs	r3, r3, #2
     6b0:	4413      	add	r3, r2
     6b2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6b6:	091b      	lsrs	r3, r3, #4
     6b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6ba:	4413      	add	r3, r2
     6bc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6c0:	0a1b      	lsrs	r3, r3, #8
     6c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6c4:	4413      	add	r3, r2
     6c6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6ca:	0c1b      	lsrs	r3, r3, #16
     6cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6ce:	4413      	add	r3, r2
     6d0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6d4:	08db      	lsrs	r3, r3, #3
     6d6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6da:	4613      	mov	r3, r2
     6dc:	009b      	lsls	r3, r3, #2
     6de:	4413      	add	r3, r2
     6e0:	005b      	lsls	r3, r3, #1
     6e2:	461a      	mov	r2, r3
     6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6e6:	1a9b      	subs	r3, r3, r2
     6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6ec:	3306      	adds	r3, #6
     6ee:	091a      	lsrs	r2, r3, #4
     6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6f2:	4413      	add	r3, r2
     6f4:	f04f 0400 	mov.w	r4, #0
    }
}
     6f8:	4618      	mov	r0, r3
     6fa:	4621      	mov	r1, r4
     6fc:	3758      	adds	r7, #88	; 0x58
     6fe:	46bd      	mov	sp, r7
     700:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     704:	4770      	bx	lr
     706:	bf00      	nop

00000708 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     708:	b590      	push	{r4, r7, lr}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     712:	683a      	ldr	r2, [r7, #0]
     714:	687b      	ldr	r3, [r7, #4]
     716:	4313      	orrs	r3, r2
     718:	2b00      	cmp	r3, #0
     71a:	bf0c      	ite	eq
     71c:	2301      	moveq	r3, #1
     71e:	2300      	movne	r3, #0
     720:	b2db      	uxtb	r3, r3
     722:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     724:	e008      	b.n	738 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     726:	e9d7 0100 	ldrd	r0, r1, [r7]
     72a:	f7ff ff0f 	bl	54c <divu64_10>
     72e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     732:	68fb      	ldr	r3, [r7, #12]
     734:	3301      	adds	r3, #1
     736:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     738:	e897 0018 	ldmia.w	r7, {r3, r4}
     73c:	4323      	orrs	r3, r4
     73e:	d1f2      	bne.n	726 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     740:	68fb      	ldr	r3, [r7, #12]
}
     742:	4618      	mov	r0, r3
     744:	3714      	adds	r7, #20
     746:	46bd      	mov	sp, r7
     748:	bd90      	pop	{r4, r7, pc}
     74a:	bf00      	nop

0000074c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     74c:	b590      	push	{r4, r7, lr}
     74e:	b083      	sub	sp, #12
     750:	af00      	add	r7, sp, #0
     752:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     756:	e897 0018 	ldmia.w	r7, {r3, r4}
     75a:	2b00      	cmp	r3, #0
     75c:	f174 0300 	sbcs.w	r3, r4, #0
     760:	da06      	bge.n	770 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     762:	e897 0018 	ldmia.w	r7, {r3, r4}
     766:	425b      	negs	r3, r3
     768:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     76c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     770:	e897 0018 	ldmia.w	r7, {r3, r4}
     774:	4618      	mov	r0, r3
     776:	4621      	mov	r1, r4
     778:	f7ff ffc6 	bl	708 <ndigits_in_u64>
     77c:	4603      	mov	r3, r0
}
     77e:	4618      	mov	r0, r3
     780:	370c      	adds	r7, #12
     782:	46bd      	mov	sp, r7
     784:	bd90      	pop	{r4, r7, pc}
     786:	bf00      	nop

00000788 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     788:	b490      	push	{r4, r7}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     792:	6839      	ldr	r1, [r7, #0]
     794:	687a      	ldr	r2, [r7, #4]
     796:	430a      	orrs	r2, r1
     798:	2a00      	cmp	r2, #0
     79a:	bf0c      	ite	eq
     79c:	2201      	moveq	r2, #1
     79e:	2200      	movne	r2, #0
     7a0:	b2d2      	uxtb	r2, r2
     7a2:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7a4:	e00a      	b.n	7bc <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7a6:	e897 0006 	ldmia.w	r7, {r1, r2}
     7aa:	090b      	lsrs	r3, r1, #4
     7ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7b0:	0914      	lsrs	r4, r2, #4
     7b2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     7b6:	68fa      	ldr	r2, [r7, #12]
     7b8:	3201      	adds	r2, #1
     7ba:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     7bc:	e897 0006 	ldmia.w	r7, {r1, r2}
     7c0:	430a      	orrs	r2, r1
     7c2:	d1f0      	bne.n	7a6 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     7c4:	68fb      	ldr	r3, [r7, #12]
}
     7c6:	4618      	mov	r0, r3
     7c8:	3710      	adds	r7, #16
     7ca:	46bd      	mov	sp, r7
     7cc:	bc90      	pop	{r4, r7}
     7ce:	4770      	bx	lr

000007d0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     7d0:	b480      	push	{r7}
     7d2:	b087      	sub	sp, #28
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     7da:	2300      	movs	r3, #0
     7dc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     7de:	2300      	movs	r3, #0
     7e0:	613b      	str	r3, [r7, #16]
     7e2:	2300      	movs	r3, #0
     7e4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	2b2d      	cmp	r3, #45	; 0x2d
     7ec:	d11b      	bne.n	826 <decstr_to_int+0x56>
    {
        bNeg = true;
     7ee:	2301      	movs	r3, #1
     7f0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	3301      	adds	r3, #1
     7f6:	607b      	str	r3, [r7, #4]
        uCnt++;
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	3301      	adds	r3, #1
     7fc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     7fe:	e012      	b.n	826 <decstr_to_int+0x56>
    {
        ++uCnt;
     800:	68fb      	ldr	r3, [r7, #12]
     802:	3301      	adds	r3, #1
     804:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     806:	693a      	ldr	r2, [r7, #16]
     808:	4613      	mov	r3, r2
     80a:	009b      	lsls	r3, r3, #2
     80c:	4413      	add	r3, r2
     80e:	005b      	lsls	r3, r3, #1
     810:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     812:	687b      	ldr	r3, [r7, #4]
     814:	781b      	ldrb	r3, [r3, #0]
     816:	461a      	mov	r2, r3
     818:	693b      	ldr	r3, [r7, #16]
     81a:	4413      	add	r3, r2
     81c:	3b30      	subs	r3, #48	; 0x30
     81e:	613b      	str	r3, [r7, #16]
        pcStr++;
     820:	687b      	ldr	r3, [r7, #4]
     822:	3301      	adds	r3, #1
     824:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     826:	687b      	ldr	r3, [r7, #4]
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b2f      	cmp	r3, #47	; 0x2f
     82c:	d903      	bls.n	836 <decstr_to_int+0x66>
     82e:	687b      	ldr	r3, [r7, #4]
     830:	781b      	ldrb	r3, [r3, #0]
     832:	2b39      	cmp	r3, #57	; 0x39
     834:	d9e4      	bls.n	800 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     836:	683b      	ldr	r3, [r7, #0]
     838:	2b00      	cmp	r3, #0
     83a:	d002      	beq.n	842 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     83c:	683b      	ldr	r3, [r7, #0]
     83e:	68fa      	ldr	r2, [r7, #12]
     840:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     842:	7dfb      	ldrb	r3, [r7, #23]
     844:	2b00      	cmp	r3, #0
     846:	d002      	beq.n	84e <decstr_to_int+0x7e>
     848:	693b      	ldr	r3, [r7, #16]
     84a:	425b      	negs	r3, r3
     84c:	e000      	b.n	850 <decstr_to_int+0x80>
     84e:	693b      	ldr	r3, [r7, #16]
}
     850:	4618      	mov	r0, r3
     852:	371c      	adds	r7, #28
     854:	46bd      	mov	sp, r7
     856:	f85d 7b04 	ldr.w	r7, [sp], #4
     85a:	4770      	bx	lr

0000085c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     85c:	b590      	push	{r4, r7, lr}
     85e:	b091      	sub	sp, #68	; 0x44
     860:	af00      	add	r7, sp, #0
     862:	e9c7 0102 	strd	r0, r1, [r7, #8]
     866:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     868:	2300      	movs	r3, #0
     86a:	63fb      	str	r3, [r7, #60]	; 0x3c
     86c:	2300      	movs	r3, #0
     86e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     870:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     874:	f7ff fe6a 	bl	54c <divu64_10>
     878:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     87c:	68b9      	ldr	r1, [r7, #8]
     87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     880:	4613      	mov	r3, r2
     882:	009b      	lsls	r3, r3, #2
     884:	4413      	add	r3, r2
     886:	005b      	lsls	r3, r3, #1
     888:	1acb      	subs	r3, r1, r3
     88a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     88e:	1c5a      	adds	r2, r3, #1
     890:	63fa      	str	r2, [r7, #60]	; 0x3c
     892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     894:	b2d2      	uxtb	r2, r2
     896:	3230      	adds	r2, #48	; 0x30
     898:	b2d2      	uxtb	r2, r2
     89a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     89e:	440b      	add	r3, r1
     8a0:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8b0:	4323      	orrs	r3, r4
     8b2:	d1dd      	bne.n	870 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8b6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d011      	beq.n	8e2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     8be:	e008      	b.n	8d2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	1c5a      	adds	r2, r3, #1
     8c4:	607a      	str	r2, [r7, #4]
     8c6:	f107 0110 	add.w	r1, r7, #16
     8ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     8cc:	440a      	add	r2, r1
     8ce:	7812      	ldrb	r2, [r2, #0]
     8d0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8d4:	1e5a      	subs	r2, r3, #1
     8d6:	63fa      	str	r2, [r7, #60]	; 0x3c
     8d8:	2b00      	cmp	r3, #0
     8da:	d1f1      	bne.n	8c0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	2200      	movs	r2, #0
     8e0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     8e4:	4618      	mov	r0, r3
     8e6:	3744      	adds	r7, #68	; 0x44
     8e8:	46bd      	mov	sp, r7
     8ea:	bd90      	pop	{r4, r7, pc}

000008ec <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     8ec:	b4b0      	push	{r4, r5, r7}
     8ee:	b08d      	sub	sp, #52	; 0x34
     8f0:	af00      	add	r7, sp, #0
     8f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8f6:	607a      	str	r2, [r7, #4]
     8f8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     8fa:	2300      	movs	r3, #0
     8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     8fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     902:	4313      	orrs	r3, r2
     904:	d131      	bne.n	96a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     908:	1c5a      	adds	r2, r3, #1
     90a:	62fa      	str	r2, [r7, #44]	; 0x2c
     90c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     910:	4413      	add	r3, r2
     912:	2230      	movs	r2, #48	; 0x30
     914:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     918:	e027      	b.n	96a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     91a:	7a3b      	ldrb	r3, [r7, #8]
     91c:	f003 030f 	and.w	r3, r3, #15
     920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     928:	2b09      	cmp	r3, #9
     92a:	d90a      	bls.n	942 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     92c:	78fb      	ldrb	r3, [r7, #3]
     92e:	2b00      	cmp	r3, #0
     930:	d001      	beq.n	936 <uint64_to_hexstr+0x4a>
     932:	2227      	movs	r2, #39	; 0x27
     934:	e000      	b.n	938 <uint64_to_hexstr+0x4c>
     936:	2207      	movs	r2, #7
     938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     93c:	4413      	add	r3, r2
     93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     944:	1c5a      	adds	r2, r3, #1
     946:	62fa      	str	r2, [r7, #44]	; 0x2c
     948:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     94c:	3230      	adds	r2, #48	; 0x30
     94e:	b2d2      	uxtb	r2, r2
     950:	f107 0130 	add.w	r1, r7, #48	; 0x30
     954:	440b      	add	r3, r1
     956:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     95a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     95e:	0914      	lsrs	r4, r2, #4
     960:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     964:	091d      	lsrs	r5, r3, #4
     966:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     96a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     96e:	4313      	orrs	r3, r2
     970:	d1d3      	bne.n	91a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     974:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     976:	687b      	ldr	r3, [r7, #4]
     978:	2b00      	cmp	r3, #0
     97a:	d011      	beq.n	9a0 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     97c:	e008      	b.n	990 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     97e:	687b      	ldr	r3, [r7, #4]
     980:	1c5a      	adds	r2, r3, #1
     982:	607a      	str	r2, [r7, #4]
     984:	f107 0110 	add.w	r1, r7, #16
     988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     98a:	440a      	add	r2, r1
     98c:	7812      	ldrb	r2, [r2, #0]
     98e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     992:	1e5a      	subs	r2, r3, #1
     994:	62fa      	str	r2, [r7, #44]	; 0x2c
     996:	2b00      	cmp	r3, #0
     998:	d1f1      	bne.n	97e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	2200      	movs	r2, #0
     99e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9a2:	4618      	mov	r0, r3
     9a4:	3734      	adds	r7, #52	; 0x34
     9a6:	46bd      	mov	sp, r7
     9a8:	bcb0      	pop	{r4, r5, r7}
     9aa:	4770      	bx	lr

000009ac <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     9b4:	2300      	movs	r3, #0
     9b6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d104      	bne.n	9c8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	e009      	b.n	9d6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	3301      	adds	r3, #1
     9c6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	1c5a      	adds	r2, r3, #1
     9cc:	607a      	str	r2, [r7, #4]
     9ce:	781b      	ldrb	r3, [r3, #0]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d1f6      	bne.n	9c2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     9d4:	68fb      	ldr	r3, [r7, #12]
}
     9d6:	4618      	mov	r0, r3
     9d8:	3714      	adds	r7, #20
     9da:	46bd      	mov	sp, r7
     9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e0:	4770      	bx	lr
     9e2:	bf00      	nop

000009e4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     9e4:	b480      	push	{r7}
     9e6:	b087      	sub	sp, #28
     9e8:	af00      	add	r7, sp, #0
     9ea:	60f8      	str	r0, [r7, #12]
     9ec:	460b      	mov	r3, r1
     9ee:	607a      	str	r2, [r7, #4]
     9f0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     9f2:	2300      	movs	r3, #0
     9f4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	2b00      	cmp	r3, #0
     9fa:	dc0c      	bgt.n	a16 <padbuffer+0x32>
    {
        return i32Cnt;
     9fc:	697b      	ldr	r3, [r7, #20]
     9fe:	e010      	b.n	a22 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a00:	68fb      	ldr	r3, [r7, #12]
     a02:	2b00      	cmp	r3, #0
     a04:	d004      	beq.n	a10 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	1c5a      	adds	r2, r3, #1
     a0a:	60fa      	str	r2, [r7, #12]
     a0c:	7afa      	ldrb	r2, [r7, #11]
     a0e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a10:	697b      	ldr	r3, [r7, #20]
     a12:	3301      	adds	r3, #1
     a14:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	1e5a      	subs	r2, r3, #1
     a1a:	607a      	str	r2, [r7, #4]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d1ef      	bne.n	a00 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     a20:	697b      	ldr	r3, [r7, #20]
}
     a22:	4618      	mov	r0, r3
     a24:	371c      	adds	r7, #28
     a26:	46bd      	mov	sp, r7
     a28:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2c:	4770      	bx	lr
     a2e:	bf00      	nop

00000a30 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a30:	b590      	push	{r4, r7, lr}
     a32:	b08f      	sub	sp, #60	; 0x3c
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	60b9      	str	r1, [r7, #8]
     a3a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     a3c:	68bb      	ldr	r3, [r7, #8]
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a44:	2b03      	cmp	r3, #3
     a46:	dc02      	bgt.n	a4e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a48:	f06f 0302 	mvn.w	r3, #2
     a4c:	e0d4      	b.n	bf8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     a4e:	edd7 7a03 	vldr	s15, [r7, #12]
     a52:	eef5 7a40 	vcmp.f32	s15, #0.0
     a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a5a:	d104      	bne.n	a66 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     a5c:	68bb      	ldr	r3, [r7, #8]
     a5e:	4a68      	ldr	r2, [pc, #416]	; (c00 <ftoa+0x1d0>)
     a60:	601a      	str	r2, [r3, #0]
        return 3;
     a62:	2303      	movs	r3, #3
     a64:	e0c8      	b.n	bf8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     a6e:	697b      	ldr	r3, [r7, #20]
     a70:	15db      	asrs	r3, r3, #23
     a72:	b2db      	uxtb	r3, r3
     a74:	3b7f      	subs	r3, #127	; 0x7f
     a76:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     a78:	697b      	ldr	r3, [r7, #20]
     a7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     a82:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     a84:	2300      	movs	r3, #0
     a86:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     a88:	2300      	movs	r3, #0
     a8a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     a8c:	6a3b      	ldr	r3, [r7, #32]
     a8e:	2b1e      	cmp	r3, #30
     a90:	dd02      	ble.n	a98 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     a92:	f06f 0301 	mvn.w	r3, #1
     a96:	e0af      	b.n	bf8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     a98:	6a3b      	ldr	r3, [r7, #32]
     a9a:	f113 0f17 	cmn.w	r3, #23
     a9e:	da02      	bge.n	aa6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     aa0:	f04f 33ff 	mov.w	r3, #4294967295
     aa4:	e0a8      	b.n	bf8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     aa6:	6a3b      	ldr	r3, [r7, #32]
     aa8:	2b16      	cmp	r3, #22
     aaa:	dd06      	ble.n	aba <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     aac:	6a3b      	ldr	r3, [r7, #32]
     aae:	3b17      	subs	r3, #23
     ab0:	69fa      	ldr	r2, [r7, #28]
     ab2:	fa02 f303 	lsl.w	r3, r2, r3
     ab6:	637b      	str	r3, [r7, #52]	; 0x34
     ab8:	e01a      	b.n	af0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     aba:	6a3b      	ldr	r3, [r7, #32]
     abc:	2b00      	cmp	r3, #0
     abe:	db0f      	blt.n	ae0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     ac0:	6a3b      	ldr	r3, [r7, #32]
     ac2:	f1c3 0317 	rsb	r3, r3, #23
     ac6:	69fa      	ldr	r2, [r7, #28]
     ac8:	fa42 f303 	asr.w	r3, r2, r3
     acc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     ace:	6a3b      	ldr	r3, [r7, #32]
     ad0:	3301      	adds	r3, #1
     ad2:	69fa      	ldr	r2, [r7, #28]
     ad4:	fa02 f303 	lsl.w	r3, r2, r3
     ad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     adc:	633b      	str	r3, [r7, #48]	; 0x30
     ade:	e007      	b.n	af0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ae6:	6a3b      	ldr	r3, [r7, #32]
     ae8:	43db      	mvns	r3, r3
     aea:	fa42 f303 	asr.w	r3, r2, r3
     aee:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     af0:	697b      	ldr	r3, [r7, #20]
     af2:	2b00      	cmp	r3, #0
     af4:	da04      	bge.n	b00 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     af6:	68bb      	ldr	r3, [r7, #8]
     af8:	1c5a      	adds	r2, r3, #1
     afa:	60ba      	str	r2, [r7, #8]
     afc:	222d      	movs	r2, #45	; 0x2d
     afe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b02:	2b00      	cmp	r3, #0
     b04:	d105      	bne.n	b12 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	1c5a      	adds	r2, r3, #1
     b0a:	60ba      	str	r2, [r7, #8]
     b0c:	2230      	movs	r2, #48	; 0x30
     b0e:	701a      	strb	r2, [r3, #0]
     b10:	e021      	b.n	b56 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b14:	2b00      	cmp	r3, #0
     b16:	dd08      	ble.n	b2a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b1a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b1e:	68ba      	ldr	r2, [r7, #8]
     b20:	4618      	mov	r0, r3
     b22:	4621      	mov	r1, r4
     b24:	f7ff fe9a 	bl	85c <uint64_to_str>
     b28:	e011      	b.n	b4e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	1c5a      	adds	r2, r3, #1
     b2e:	60ba      	str	r2, [r7, #8]
     b30:	222d      	movs	r2, #45	; 0x2d
     b32:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b36:	425b      	negs	r3, r3
     b38:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b3c:	68ba      	ldr	r2, [r7, #8]
     b3e:	4618      	mov	r0, r3
     b40:	4621      	mov	r1, r4
     b42:	f7ff fe8b 	bl	85c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b46:	e002      	b.n	b4e <ftoa+0x11e>
        {
            pcBuf++;
     b48:	68bb      	ldr	r3, [r7, #8]
     b4a:	3301      	adds	r3, #1
     b4c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     b4e:	68bb      	ldr	r3, [r7, #8]
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	2b00      	cmp	r3, #0
     b54:	d1f8      	bne.n	b48 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     b56:	68bb      	ldr	r3, [r7, #8]
     b58:	1c5a      	adds	r2, r3, #1
     b5a:	60ba      	str	r2, [r7, #8]
     b5c:	222e      	movs	r2, #46	; 0x2e
     b5e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b62:	2b00      	cmp	r3, #0
     b64:	d105      	bne.n	b72 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	1c5a      	adds	r2, r3, #1
     b6a:	60ba      	str	r2, [r7, #8]
     b6c:	2230      	movs	r2, #48	; 0x30
     b6e:	701a      	strb	r2, [r3, #0]
     b70:	e03c      	b.n	bec <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b76:	1ad3      	subs	r3, r2, r3
     b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b7a:	1ad3      	subs	r3, r2, r3
     b7c:	3b01      	subs	r3, #1
     b7e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     b80:	69ba      	ldr	r2, [r7, #24]
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	4293      	cmp	r3, r2
     b86:	bfa8      	it	ge
     b88:	4613      	movge	r3, r2
     b8a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     b8c:	2300      	movs	r3, #0
     b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
     b90:	e015      	b.n	bbe <ftoa+0x18e>
        {
            i32FracPart *= 10;
     b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b94:	4613      	mov	r3, r2
     b96:	009b      	lsls	r3, r3, #2
     b98:	4413      	add	r3, r2
     b9a:	005b      	lsls	r3, r3, #1
     b9c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     b9e:	68bb      	ldr	r3, [r7, #8]
     ba0:	1c5a      	adds	r2, r3, #1
     ba2:	60ba      	str	r2, [r7, #8]
     ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ba6:	1612      	asrs	r2, r2, #24
     ba8:	b2d2      	uxtb	r2, r2
     baa:	3230      	adds	r2, #48	; 0x30
     bac:	b2d2      	uxtb	r2, r2
     bae:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     bb6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bba:	3301      	adds	r3, #1
     bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
     bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     bc0:	69bb      	ldr	r3, [r7, #24]
     bc2:	429a      	cmp	r2, r3
     bc4:	dbe5      	blt.n	b92 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	3b01      	subs	r3, #1
     bca:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     bcc:	e002      	b.n	bd4 <ftoa+0x1a4>
        {
            --pcBuf;
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	3b01      	subs	r3, #1
     bd2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	2b30      	cmp	r3, #48	; 0x30
     bda:	d104      	bne.n	be6 <ftoa+0x1b6>
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	3b01      	subs	r3, #1
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b2e      	cmp	r3, #46	; 0x2e
     be4:	d1f3      	bne.n	bce <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     be6:	68bb      	ldr	r3, [r7, #8]
     be8:	3301      	adds	r3, #1
     bea:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	2200      	movs	r2, #0
     bf0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     bf2:	68ba      	ldr	r2, [r7, #8]
     bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bf6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     bf8:	4618      	mov	r0, r3
     bfa:	373c      	adds	r7, #60	; 0x3c
     bfc:	46bd      	mov	sp, r7
     bfe:	bd90      	pop	{r4, r7, pc}
     c00:	00302e30 	.word	0x00302e30

00000c04 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c04:	b590      	push	{r4, r7, lr}
     c06:	b095      	sub	sp, #84	; 0x54
     c08:	af00      	add	r7, sp, #0
     c0a:	60f8      	str	r0, [r7, #12]
     c0c:	60b9      	str	r1, [r7, #8]
     c0e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c10:	2300      	movs	r3, #0
     c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c14:	2300      	movs	r3, #0
     c16:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c18:	e2e3      	b.n	11e2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c1a:	2306      	movs	r3, #6
     c1c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c1e:	68bb      	ldr	r3, [r7, #8]
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b25      	cmp	r3, #37	; 0x25
     c24:	d01f      	beq.n	c66 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c26:	68fb      	ldr	r3, [r7, #12]
     c28:	2b00      	cmp	r3, #0
     c2a:	d015      	beq.n	c58 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     c2c:	68bb      	ldr	r3, [r7, #8]
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2b0a      	cmp	r3, #10
     c32:	d10b      	bne.n	c4c <am_util_stdio_vsprintf+0x48>
     c34:	4bb1      	ldr	r3, [pc, #708]	; (efc <am_util_stdio_vsprintf+0x2f8>)
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	2b00      	cmp	r3, #0
     c3a:	d007      	beq.n	c4c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	1c5a      	adds	r2, r3, #1
     c40:	60fa      	str	r2, [r7, #12]
     c42:	220d      	movs	r2, #13
     c44:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c48:	3301      	adds	r3, #1
     c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	1c5a      	adds	r2, r3, #1
     c50:	60fa      	str	r2, [r7, #12]
     c52:	68ba      	ldr	r2, [r7, #8]
     c54:	7812      	ldrb	r2, [r2, #0]
     c56:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     c58:	68bb      	ldr	r3, [r7, #8]
     c5a:	3301      	adds	r3, #1
     c5c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c60:	3301      	adds	r3, #1
     c62:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     c64:	e2bd      	b.n	11e2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	3301      	adds	r3, #1
     c6a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     c6c:	2300      	movs	r3, #0
     c6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     c72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     c76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     c7a:	2320      	movs	r3, #32
     c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     c80:	68bb      	ldr	r3, [r7, #8]
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	2b30      	cmp	r3, #48	; 0x30
     c86:	d105      	bne.n	c94 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     c88:	2330      	movs	r3, #48	; 0x30
     c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3301      	adds	r3, #1
     c92:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     c94:	f107 0310 	add.w	r3, r7, #16
     c98:	4619      	mov	r1, r3
     c9a:	68b8      	ldr	r0, [r7, #8]
     c9c:	f7ff fd98 	bl	7d0 <decstr_to_int>
     ca0:	4603      	mov	r3, r0
     ca2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     ca4:	693b      	ldr	r3, [r7, #16]
     ca6:	68ba      	ldr	r2, [r7, #8]
     ca8:	4413      	add	r3, r2
     caa:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     cac:	68bb      	ldr	r3, [r7, #8]
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	2b73      	cmp	r3, #115	; 0x73
     cb2:	d005      	beq.n	cc0 <am_util_stdio_vsprintf+0xbc>
     cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cb6:	2b00      	cmp	r3, #0
     cb8:	da02      	bge.n	cc0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cbc:	425b      	negs	r3, r3
     cbe:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     cc0:	68bb      	ldr	r3, [r7, #8]
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	2b2e      	cmp	r3, #46	; 0x2e
     cc6:	d10e      	bne.n	ce6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	3301      	adds	r3, #1
     ccc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     cce:	f107 0310 	add.w	r3, r7, #16
     cd2:	4619      	mov	r1, r3
     cd4:	68b8      	ldr	r0, [r7, #8]
     cd6:	f7ff fd7b 	bl	7d0 <decstr_to_int>
     cda:	4603      	mov	r3, r0
     cdc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     cde:	693b      	ldr	r3, [r7, #16]
     ce0:	68ba      	ldr	r2, [r7, #8]
     ce2:	4413      	add	r3, r2
     ce4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b6c      	cmp	r3, #108	; 0x6c
     cec:	d10c      	bne.n	d08 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     cee:	68bb      	ldr	r3, [r7, #8]
     cf0:	3301      	adds	r3, #1
     cf2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     cf4:	68bb      	ldr	r3, [r7, #8]
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b6c      	cmp	r3, #108	; 0x6c
     cfa:	d105      	bne.n	d08 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     cfc:	68bb      	ldr	r3, [r7, #8]
     cfe:	3301      	adds	r3, #1
     d00:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d02:	2301      	movs	r3, #1
     d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d08:	68bb      	ldr	r3, [r7, #8]
     d0a:	781b      	ldrb	r3, [r3, #0]
     d0c:	3b46      	subs	r3, #70	; 0x46
     d0e:	2b32      	cmp	r3, #50	; 0x32
     d10:	f200 8254 	bhi.w	11bc <am_util_stdio_vsprintf+0x5b8>
     d14:	a201      	add	r2, pc, #4	; (adr r2, d1c <am_util_stdio_vsprintf+0x118>)
     d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d1a:	bf00      	nop
     d1c:	00001147 	.word	0x00001147
     d20:	000011bd 	.word	0x000011bd
     d24:	000011bd 	.word	0x000011bd
     d28:	000011bd 	.word	0x000011bd
     d2c:	000011bd 	.word	0x000011bd
     d30:	000011bd 	.word	0x000011bd
     d34:	000011bd 	.word	0x000011bd
     d38:	000011bd 	.word	0x000011bd
     d3c:	000011bd 	.word	0x000011bd
     d40:	000011bd 	.word	0x000011bd
     d44:	000011bd 	.word	0x000011bd
     d48:	000011bd 	.word	0x000011bd
     d4c:	000011bd 	.word	0x000011bd
     d50:	000011bd 	.word	0x000011bd
     d54:	000011bd 	.word	0x000011bd
     d58:	000011bd 	.word	0x000011bd
     d5c:	000011bd 	.word	0x000011bd
     d60:	000011bd 	.word	0x000011bd
     d64:	00000ee3 	.word	0x00000ee3
     d68:	000011bd 	.word	0x000011bd
     d6c:	000011bd 	.word	0x000011bd
     d70:	000011bd 	.word	0x000011bd
     d74:	000011bd 	.word	0x000011bd
     d78:	000011bd 	.word	0x000011bd
     d7c:	000011bd 	.word	0x000011bd
     d80:	000011bd 	.word	0x000011bd
     d84:	000011bd 	.word	0x000011bd
     d88:	000011bd 	.word	0x000011bd
     d8c:	000011bd 	.word	0x000011bd
     d90:	00000de9 	.word	0x00000de9
     d94:	0000100f 	.word	0x0000100f
     d98:	000011bd 	.word	0x000011bd
     d9c:	00001147 	.word	0x00001147
     da0:	000011bd 	.word	0x000011bd
     da4:	000011bd 	.word	0x000011bd
     da8:	0000100f 	.word	0x0000100f
     dac:	000011bd 	.word	0x000011bd
     db0:	000011bd 	.word	0x000011bd
     db4:	000011bd 	.word	0x000011bd
     db8:	000011bd 	.word	0x000011bd
     dbc:	000011bd 	.word	0x000011bd
     dc0:	000011bd 	.word	0x000011bd
     dc4:	000011bd 	.word	0x000011bd
     dc8:	000011bd 	.word	0x000011bd
     dcc:	000011bd 	.word	0x000011bd
     dd0:	00000e0f 	.word	0x00000e0f
     dd4:	000011bd 	.word	0x000011bd
     dd8:	00000f7d 	.word	0x00000f7d
     ddc:	000011bd 	.word	0x000011bd
     de0:	000011bd 	.word	0x000011bd
     de4:	00000edd 	.word	0x00000edd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	1d1a      	adds	r2, r3, #4
     dec:	607a      	str	r2, [r7, #4]
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	2b00      	cmp	r3, #0
     df8:	d005      	beq.n	e06 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	1c5a      	adds	r2, r3, #1
     dfe:	60fa      	str	r2, [r7, #12]
     e00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e04:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e08:	3301      	adds	r3, #1
     e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e0c:	e1e6      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	1d1a      	adds	r2, r3, #4
     e12:	607a      	str	r2, [r7, #4]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e1a:	f7ff fdc7 	bl	9ac <simple_strlen>
     e1e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e22:	2b00      	cmp	r3, #0
     e24:	dd2e      	ble.n	e84 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e2a:	429a      	cmp	r2, r3
     e2c:	d22a      	bcs.n	e84 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e32:	1ad3      	subs	r3, r2, r3
     e34:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e3c:	4619      	mov	r1, r3
     e3e:	68f8      	ldr	r0, [r7, #12]
     e40:	f7ff fdd0 	bl	9e4 <padbuffer>
     e44:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	2b00      	cmp	r3, #0
     e4a:	d001      	beq.n	e50 <am_util_stdio_vsprintf+0x24c>
     e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4e:	e000      	b.n	e52 <am_util_stdio_vsprintf+0x24e>
     e50:	2300      	movs	r3, #0
     e52:	68fa      	ldr	r2, [r7, #12]
     e54:	4413      	add	r3, r2
     e56:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e5c:	4413      	add	r3, r2
     e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     e60:	2300      	movs	r3, #0
     e62:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     e64:	e00e      	b.n	e84 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	2b00      	cmp	r3, #0
     e6a:	d005      	beq.n	e78 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	1c5a      	adds	r2, r3, #1
     e70:	60fa      	str	r2, [r7, #12]
     e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e7a:	3301      	adds	r3, #1
     e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e80:	3301      	adds	r3, #1
     e82:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2b00      	cmp	r3, #0
     e8a:	d1ec      	bne.n	e66 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e8e:	2b00      	cmp	r3, #0
     e90:	f000 81a1 	beq.w	11d6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e96:	425b      	negs	r3, r3
     e98:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e9e:	429a      	cmp	r2, r3
     ea0:	f080 8199 	bcs.w	11d6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ea8:	1ad3      	subs	r3, r2, r3
     eaa:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eb2:	4619      	mov	r1, r3
     eb4:	68f8      	ldr	r0, [r7, #12]
     eb6:	f7ff fd95 	bl	9e4 <padbuffer>
     eba:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d001      	beq.n	ec6 <am_util_stdio_vsprintf+0x2c2>
     ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec4:	e000      	b.n	ec8 <am_util_stdio_vsprintf+0x2c4>
     ec6:	2300      	movs	r3, #0
     ec8:	68fa      	ldr	r2, [r7, #12]
     eca:	4413      	add	r3, r2
     ecc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ed2:	4413      	add	r3, r2
     ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     ed6:	2300      	movs	r3, #0
     ed8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     eda:	e17c      	b.n	11d6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     edc:	2301      	movs	r3, #1
     ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00a      	beq.n	f00 <am_util_stdio_vsprintf+0x2fc>
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	3307      	adds	r3, #7
     eee:	f023 0307 	bic.w	r3, r3, #7
     ef2:	f103 0208 	add.w	r2, r3, #8
     ef6:	607a      	str	r2, [r7, #4]
     ef8:	cb18      	ldmia	r3, {r3, r4}
     efa:	e007      	b.n	f0c <am_util_stdio_vsprintf+0x308>
     efc:	10001150 	.word	0x10001150
                                      va_arg(pArgs, uint32_t);
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	1d1a      	adds	r2, r3, #4
     f04:	607a      	str	r2, [r7, #4]
     f06:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f08:	f04f 0400 	mov.w	r4, #0
     f0c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f12:	2b00      	cmp	r3, #0
     f14:	d01e      	beq.n	f54 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f1a:	f7ff fc35 	bl	788 <ndigits_in_hex>
     f1e:	4602      	mov	r2, r0
     f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f22:	1a9b      	subs	r3, r3, r2
     f24:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f2c:	4619      	mov	r1, r3
     f2e:	68f8      	ldr	r0, [r7, #12]
     f30:	f7ff fd58 	bl	9e4 <padbuffer>
     f34:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f36:	68fb      	ldr	r3, [r7, #12]
     f38:	2b00      	cmp	r3, #0
     f3a:	d001      	beq.n	f40 <am_util_stdio_vsprintf+0x33c>
     f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f3e:	e000      	b.n	f42 <am_util_stdio_vsprintf+0x33e>
     f40:	2300      	movs	r3, #0
     f42:	68fa      	ldr	r2, [r7, #12]
     f44:	4413      	add	r3, r2
     f46:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f4c:	4413      	add	r3, r2
     f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f50:	2300      	movs	r3, #0
     f52:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     f58:	68fa      	ldr	r2, [r7, #12]
     f5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f5e:	f7ff fcc5 	bl	8ec <uint64_to_hexstr>
     f62:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	2b00      	cmp	r3, #0
     f68:	d003      	beq.n	f72 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f6c:	68fa      	ldr	r2, [r7, #12]
     f6e:	4413      	add	r3, r2
     f70:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f76:	4413      	add	r3, r2
     f78:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f7a:	e12f      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f80:	2b00      	cmp	r3, #0
     f82:	d008      	beq.n	f96 <am_util_stdio_vsprintf+0x392>
     f84:	687b      	ldr	r3, [r7, #4]
     f86:	3307      	adds	r3, #7
     f88:	f023 0307 	bic.w	r3, r3, #7
     f8c:	f103 0208 	add.w	r2, r3, #8
     f90:	607a      	str	r2, [r7, #4]
     f92:	cb18      	ldmia	r3, {r3, r4}
     f94:	e005      	b.n	fa2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	1d1a      	adds	r2, r3, #4
     f9a:	607a      	str	r2, [r7, #4]
     f9c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f9e:	f04f 0400 	mov.w	r4, #0
     fa2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa8:	2b00      	cmp	r3, #0
     faa:	d01e      	beq.n	fea <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     fac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fb0:	f7ff fbaa 	bl	708 <ndigits_in_u64>
     fb4:	4602      	mov	r2, r0
     fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb8:	1a9b      	subs	r3, r3, r2
     fba:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fc2:	4619      	mov	r1, r3
     fc4:	68f8      	ldr	r0, [r7, #12]
     fc6:	f7ff fd0d 	bl	9e4 <padbuffer>
     fca:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fcc:	68fb      	ldr	r3, [r7, #12]
     fce:	2b00      	cmp	r3, #0
     fd0:	d001      	beq.n	fd6 <am_util_stdio_vsprintf+0x3d2>
     fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd4:	e000      	b.n	fd8 <am_util_stdio_vsprintf+0x3d4>
     fd6:	2300      	movs	r3, #0
     fd8:	68fa      	ldr	r2, [r7, #12]
     fda:	4413      	add	r3, r2
     fdc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fe2:	4413      	add	r3, r2
     fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fe6:	2300      	movs	r3, #0
     fe8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     fea:	68fa      	ldr	r2, [r7, #12]
     fec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ff0:	f7ff fc34 	bl	85c <uint64_to_str>
     ff4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d003      	beq.n	1004 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ffe:	68fa      	ldr	r2, [r7, #12]
    1000:	4413      	add	r3, r2
    1002:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1008:	4413      	add	r3, r2
    100a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    100c:	e0e6      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    100e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1012:	2b00      	cmp	r3, #0
    1014:	d008      	beq.n	1028 <am_util_stdio_vsprintf+0x424>
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	3307      	adds	r3, #7
    101a:	f023 0307 	bic.w	r3, r3, #7
    101e:	f103 0208 	add.w	r2, r3, #8
    1022:	607a      	str	r2, [r7, #4]
    1024:	cb18      	ldmia	r3, {r3, r4}
    1026:	e005      	b.n	1034 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	1d1a      	adds	r2, r3, #4
    102c:	607a      	str	r2, [r7, #4]
    102e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1030:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1034:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1038:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    103c:	2b00      	cmp	r3, #0
    103e:	f174 0300 	sbcs.w	r3, r4, #0
    1042:	da0a      	bge.n	105a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1044:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1048:	425b      	negs	r3, r3
    104a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    104e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1052:	2301      	movs	r3, #1
    1054:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1058:	e006      	b.n	1068 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    105a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    105e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1062:	2300      	movs	r3, #0
    1064:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    106a:	2b00      	cmp	r3, #0
    106c:	d04a      	beq.n	1104 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    106e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1072:	4618      	mov	r0, r3
    1074:	4621      	mov	r1, r4
    1076:	f7ff fb69 	bl	74c <ndigits_in_i64>
    107a:	4602      	mov	r2, r0
    107c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    107e:	1a9b      	subs	r3, r3, r2
    1080:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1086:	2b00      	cmp	r3, #0
    1088:	d011      	beq.n	10ae <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    108c:	3b01      	subs	r3, #1
    108e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1094:	2b30      	cmp	r3, #48	; 0x30
    1096:	d10a      	bne.n	10ae <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d004      	beq.n	10a8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60fa      	str	r2, [r7, #12]
    10a4:	222d      	movs	r2, #45	; 0x2d
    10a6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    10a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10aa:	3301      	adds	r3, #1
    10ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10b4:	4619      	mov	r1, r3
    10b6:	68f8      	ldr	r0, [r7, #12]
    10b8:	f7ff fc94 	bl	9e4 <padbuffer>
    10bc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d001      	beq.n	10c8 <am_util_stdio_vsprintf+0x4c4>
    10c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c6:	e000      	b.n	10ca <am_util_stdio_vsprintf+0x4c6>
    10c8:	2300      	movs	r3, #0
    10ca:	68fa      	ldr	r2, [r7, #12]
    10cc:	4413      	add	r3, r2
    10ce:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10d4:	4413      	add	r3, r2
    10d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10d8:	2300      	movs	r3, #0
    10da:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    10dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10e0:	2b00      	cmp	r3, #0
    10e2:	d01e      	beq.n	1122 <am_util_stdio_vsprintf+0x51e>
    10e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10e8:	2b20      	cmp	r3, #32
    10ea:	d11a      	bne.n	1122 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d004      	beq.n	10fc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    10f2:	68fb      	ldr	r3, [r7, #12]
    10f4:	1c5a      	adds	r2, r3, #1
    10f6:	60fa      	str	r2, [r7, #12]
    10f8:	222d      	movs	r2, #45	; 0x2d
    10fa:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    10fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10fe:	3301      	adds	r3, #1
    1100:	63fb      	str	r3, [r7, #60]	; 0x3c
    1102:	e00e      	b.n	1122 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1104:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1108:	2b00      	cmp	r3, #0
    110a:	d00a      	beq.n	1122 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	2b00      	cmp	r3, #0
    1110:	d004      	beq.n	111c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	1c5a      	adds	r2, r3, #1
    1116:	60fa      	str	r2, [r7, #12]
    1118:	222d      	movs	r2, #45	; 0x2d
    111a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111e:	3301      	adds	r3, #1
    1120:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1122:	68fa      	ldr	r2, [r7, #12]
    1124:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1128:	f7ff fb98 	bl	85c <uint64_to_str>
    112c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	2b00      	cmp	r3, #0
    1132:	d003      	beq.n	113c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1136:	68fa      	ldr	r2, [r7, #12]
    1138:	4413      	add	r3, r2
    113a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    113e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1140:	4413      	add	r3, r2
    1142:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1144:	e04a      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1146:	68fb      	ldr	r3, [r7, #12]
    1148:	2b00      	cmp	r3, #0
    114a:	d046      	beq.n	11da <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	3307      	adds	r3, #7
    1150:	f023 0307 	bic.w	r3, r3, #7
    1154:	f103 0208 	add.w	r2, r3, #8
    1158:	607a      	str	r2, [r7, #4]
    115a:	cb18      	ldmia	r3, {r3, r4}
    115c:	4618      	mov	r0, r3
    115e:	4621      	mov	r1, r4
    1160:	f7fe ffae 	bl	c0 <__aeabi_d2f>
    1164:	4603      	mov	r3, r0
    1166:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	2214      	movs	r2, #20
    116c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1170:	68f9      	ldr	r1, [r7, #12]
    1172:	6978      	ldr	r0, [r7, #20]
    1174:	f7ff fc5c 	bl	a30 <ftoa>
    1178:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    117c:	2b00      	cmp	r3, #0
    117e:	da14      	bge.n	11aa <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1182:	f1b3 3fff 	cmp.w	r3, #4294967295
    1186:	d102      	bne.n	118e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1188:	4b1e      	ldr	r3, [pc, #120]	; (1204 <am_util_stdio_vsprintf+0x600>)
    118a:	62bb      	str	r3, [r7, #40]	; 0x28
    118c:	e008      	b.n	11a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1190:	f113 0f02 	cmn.w	r3, #2
    1194:	d102      	bne.n	119c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1196:	4b1c      	ldr	r3, [pc, #112]	; (1208 <am_util_stdio_vsprintf+0x604>)
    1198:	62bb      	str	r3, [r7, #40]	; 0x28
    119a:	e001      	b.n	11a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    119c:	4b1b      	ldr	r3, [pc, #108]	; (120c <am_util_stdio_vsprintf+0x608>)
    119e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    11a0:	68fb      	ldr	r3, [r7, #12]
    11a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    11a4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    11a6:	2303      	movs	r3, #3
    11a8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    11aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11ae:	4413      	add	r3, r2
    11b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    11b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b4:	68fa      	ldr	r2, [r7, #12]
    11b6:	4413      	add	r3, r2
    11b8:	60fb      	str	r3, [r7, #12]
                }
                break;
    11ba:	e00e      	b.n	11da <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    11bc:	68fb      	ldr	r3, [r7, #12]
    11be:	2b00      	cmp	r3, #0
    11c0:	d005      	beq.n	11ce <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	1c5a      	adds	r2, r3, #1
    11c6:	60fa      	str	r2, [r7, #12]
    11c8:	68ba      	ldr	r2, [r7, #8]
    11ca:	7812      	ldrb	r2, [r2, #0]
    11cc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11d0:	3301      	adds	r3, #1
    11d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11d4:	e002      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    11d6:	bf00      	nop
    11d8:	e000      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    11da:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    11dc:	68bb      	ldr	r3, [r7, #8]
    11de:	3301      	adds	r3, #1
    11e0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    11e2:	68bb      	ldr	r3, [r7, #8]
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	f47f ad17 	bne.w	c1a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d002      	beq.n	11f8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    11f2:	68fb      	ldr	r3, [r7, #12]
    11f4:	2200      	movs	r2, #0
    11f6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    11f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    11fa:	4618      	mov	r0, r3
    11fc:	3754      	adds	r7, #84	; 0x54
    11fe:	46bd      	mov	sp, r7
    1200:	bd90      	pop	{r4, r7, pc}
    1202:	bf00      	nop
    1204:	00302e30 	.word	0x00302e30
    1208:	00232e23 	.word	0x00232e23
    120c:	003f2e3f 	.word	0x003f2e3f

00001210 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1210:	b40f      	push	{r0, r1, r2, r3}
    1212:	b580      	push	{r7, lr}
    1214:	b082      	sub	sp, #8
    1216:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1218:	f107 0314 	add.w	r3, r7, #20
    121c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    121e:	683a      	ldr	r2, [r7, #0]
    1220:	6939      	ldr	r1, [r7, #16]
    1222:	4808      	ldr	r0, [pc, #32]	; (1244 <am_util_stdio_printf+0x34>)
    1224:	f7ff fcee 	bl	c04 <am_util_stdio_vsprintf>
    1228:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    122a:	4b07      	ldr	r3, [pc, #28]	; (1248 <am_util_stdio_printf+0x38>)
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	4805      	ldr	r0, [pc, #20]	; (1244 <am_util_stdio_printf+0x34>)
    1230:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1232:	687b      	ldr	r3, [r7, #4]
}
    1234:	4618      	mov	r0, r3
    1236:	3708      	adds	r7, #8
    1238:	46bd      	mov	sp, r7
    123a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    123e:	b004      	add	sp, #16
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	10001050 	.word	0x10001050
    1248:	10001164 	.word	0x10001164

0000124c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1250:	4802      	ldr	r0, [pc, #8]	; (125c <am_util_stdio_terminal_clear+0x10>)
    1252:	f7ff ffdd 	bl	1210 <am_util_stdio_printf>
}
    1256:	bf00      	nop
    1258:	bd80      	pop	{r7, pc}
    125a:	bf00      	nop
    125c:	00001e04 	.word	0x00001e04

00001260 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1260:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1262:	f000 fb49 	bl	18f8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1266:	f000 fbb5 	bl	19d4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    126a:	f000 fccf 	bl	1c0c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    126e:	2001      	movs	r0, #1
    1270:	f000 fbc0 	bl	19f4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1274:	2001      	movs	r0, #1
    1276:	f000 f93b 	bl	14f0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    127a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    127e:	f000 bbc7 	b.w	1a10 <am_hal_rtc_osc_disable>
    1282:	bf00      	nop

00001284 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1284:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1286:	4b17      	ldr	r3, [pc, #92]	; (12e4 <am_bsp_debug_printf_enable+0x60>)
    1288:	6818      	ldr	r0, [r3, #0]
    128a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    128e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1290:	d001      	beq.n	1296 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1292:	b007      	add	sp, #28
    1294:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1296:	4a14      	ldr	r2, [pc, #80]	; (12e8 <am_bsp_debug_printf_enable+0x64>)
    1298:	4914      	ldr	r1, [pc, #80]	; (12ec <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    129a:	4d15      	ldr	r5, [pc, #84]	; (12f0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    129c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    129e:	a806      	add	r0, sp, #24
    12a0:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    12a4:	f000 fc56 	bl	1b54 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    12a8:	f3ef 8310 	mrs	r3, PRIMASK
    12ac:	9300      	str	r3, [sp, #0]
    12ae:	b672      	cpsid	i
    12b0:	4a10      	ldr	r2, [pc, #64]	; (12f4 <am_bsp_debug_printf_enable+0x70>)
    12b2:	4d11      	ldr	r5, [pc, #68]	; (12f8 <am_bsp_debug_printf_enable+0x74>)
    12b4:	4811      	ldr	r0, [pc, #68]	; (12fc <am_bsp_debug_printf_enable+0x78>)
    12b6:	4912      	ldr	r1, [pc, #72]	; (1300 <am_bsp_debug_printf_enable+0x7c>)
    12b8:	2373      	movs	r3, #115	; 0x73
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	682b      	ldr	r3, [r5, #0]
    12be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    12c2:	602b      	str	r3, [r5, #0]
    12c4:	6805      	ldr	r5, [r0, #0]
    12c6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    12ca:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    12ce:	6003      	str	r3, [r0, #0]
    12d0:	6808      	ldr	r0, [r1, #0]
    12d2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    12d6:	600d      	str	r5, [r1, #0]
    12d8:	6014      	str	r4, [r2, #0]
    12da:	9c00      	ldr	r4, [sp, #0]
    12dc:	f384 8810 	msr	PRIMASK, r4
}
    12e0:	b007      	add	sp, #28
    12e2:	bd30      	pop	{r4, r5, pc}
    12e4:	10001154 	.word	0x10001154
    12e8:	e0000e80 	.word	0xe0000e80
    12ec:	00150511 	.word	0x00150511
    12f0:	000f4240 	.word	0x000f4240
    12f4:	40010060 	.word	0x40010060
    12f8:	40010054 	.word	0x40010054
    12fc:	40010028 	.word	0x40010028
    1300:	40010108 	.word	0x40010108

00001304 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1304:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1306:	4b15      	ldr	r3, [pc, #84]	; (135c <am_bsp_debug_printf_disable+0x58>)
    1308:	6818      	ldr	r0, [r3, #0]
    130a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    130e:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1310:	d121      	bne.n	1356 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1312:	f000 f92b 	bl	156c <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1316:	f3ef 8110 	mrs	r1, PRIMASK
    131a:	9101      	str	r1, [sp, #4]
    131c:	b672      	cpsid	i
    131e:	4a10      	ldr	r2, [pc, #64]	; (1360 <am_bsp_debug_printf_disable+0x5c>)
    1320:	4d10      	ldr	r5, [pc, #64]	; (1364 <am_bsp_debug_printf_disable+0x60>)
    1322:	4811      	ldr	r0, [pc, #68]	; (1368 <am_bsp_debug_printf_disable+0x64>)
    1324:	4911      	ldr	r1, [pc, #68]	; (136c <am_bsp_debug_printf_disable+0x68>)
    1326:	2373      	movs	r3, #115	; 0x73
    1328:	6013      	str	r3, [r2, #0]
    132a:	682b      	ldr	r3, [r5, #0]
    132c:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1330:	f04c 0320 	orr.w	r3, ip, #32
    1334:	602b      	str	r3, [r5, #0]
    1336:	6805      	ldr	r5, [r0, #0]
    1338:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    133c:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1340:	6003      	str	r3, [r0, #0]
    1342:	6808      	ldr	r0, [r1, #0]
    1344:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1348:	600d      	str	r5, [r1, #0]
    134a:	6014      	str	r4, [r2, #0]
    134c:	9c01      	ldr	r4, [sp, #4]
    134e:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1352:	f000 fc55 	bl	1c00 <am_hal_tpiu_disable>
}
    1356:	b003      	add	sp, #12
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	bf00      	nop
    135c:	10001154 	.word	0x10001154
    1360:	40010060 	.word	0x40010060
    1364:	40010054 	.word	0x40010054
    1368:	40010028 	.word	0x40010028
    136c:	40010108 	.word	0x40010108

00001370 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1370:	f000 b906 	b.w	1580 <am_hal_itm_print>

00001374 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1376:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1378:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    137c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    137e:	7863      	ldrb	r3, [r4, #1]
    1380:	78e2      	ldrb	r2, [r4, #3]
    1382:	7925      	ldrb	r5, [r4, #4]
    1384:	79a1      	ldrb	r1, [r4, #6]
    1386:	00be      	lsls	r6, r7, #2
    1388:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    138c:	f006 0304 	and.w	r3, r6, #4
    1390:	f00e 0602 	and.w	r6, lr, #2
    1394:	431e      	orrs	r6, r3
    1396:	f042 0201 	orr.w	r2, r2, #1
    139a:	79e3      	ldrb	r3, [r4, #7]
    139c:	01ed      	lsls	r5, r5, #7
    139e:	4316      	orrs	r6, r2
    13a0:	b2ed      	uxtb	r5, r5
    13a2:	7a22      	ldrb	r2, [r4, #8]
    13a4:	0289      	lsls	r1, r1, #10
    13a6:	432e      	orrs	r6, r5
    13a8:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    13ac:	7a65      	ldrb	r5, [r4, #9]
    13ae:	02db      	lsls	r3, r3, #11
    13b0:	430e      	orrs	r6, r1
    13b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    13b6:	0312      	lsls	r2, r2, #12
    13b8:	7aa1      	ldrb	r1, [r4, #10]
    13ba:	431e      	orrs	r6, r3
    13bc:	042d      	lsls	r5, r5, #16
    13be:	b293      	uxth	r3, r2
    13c0:	7ae2      	ldrb	r2, [r4, #11]
    13c2:	431e      	orrs	r6, r3
    13c4:	0509      	lsls	r1, r1, #20
    13c6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    13ca:	0612      	lsls	r2, r2, #24
    13cc:	4333      	orrs	r3, r6
    13ce:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    13d2:	00bf      	lsls	r7, r7, #2
    13d4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    13d8:	4333      	orrs	r3, r6
    13da:	430b      	orrs	r3, r1
    13dc:	f007 0508 	and.w	r5, r7, #8
    13e0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    13e2:	f000 f981 	bl	16e8 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13e6:	482c      	ldr	r0, [pc, #176]	; (1498 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    13e8:	4b2c      	ldr	r3, [pc, #176]	; (149c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13ea:	6005      	str	r5, [r0, #0]
    13ec:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    13ee:	681e      	ldr	r6, [r3, #0]
    13f0:	0777      	lsls	r7, r6, #29
    13f2:	d41e      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    13f4:	681f      	ldr	r7, [r3, #0]
    13f6:	077e      	lsls	r6, r7, #29
    13f8:	f102 32ff 	add.w	r2, r2, #4294967295
    13fc:	d419      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    13fe:	6819      	ldr	r1, [r3, #0]
    1400:	074f      	lsls	r7, r1, #29
    1402:	d416      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    1404:	6818      	ldr	r0, [r3, #0]
    1406:	0746      	lsls	r6, r0, #29
    1408:	d413      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    140a:	681e      	ldr	r6, [r3, #0]
    140c:	0770      	lsls	r0, r6, #29
    140e:	d410      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    1410:	681f      	ldr	r7, [r3, #0]
    1412:	0779      	lsls	r1, r7, #29
    1414:	d40d      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    1416:	6819      	ldr	r1, [r3, #0]
    1418:	074f      	lsls	r7, r1, #29
    141a:	d40a      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    141c:	6818      	ldr	r0, [r3, #0]
    141e:	0746      	lsls	r6, r0, #29
    1420:	d407      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    1422:	681e      	ldr	r6, [r3, #0]
    1424:	0770      	lsls	r0, r6, #29
    1426:	d404      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    1428:	681f      	ldr	r7, [r3, #0]
    142a:	0779      	lsls	r1, r7, #29
    142c:	d401      	bmi.n	1432 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    142e:	3a09      	subs	r2, #9
    1430:	d1dd      	bne.n	13ee <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1432:	4b1a      	ldr	r3, [pc, #104]	; (149c <am_hal_cachectrl_enable+0x128>)
    1434:	681a      	ldr	r2, [r3, #0]
    1436:	f042 0101 	orr.w	r1, r2, #1
    143a:	6019      	str	r1, [r3, #0]
    143c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    143e:	6818      	ldr	r0, [r3, #0]
    1440:	0740      	lsls	r0, r0, #29
    1442:	d41e      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1444:	681e      	ldr	r6, [r3, #0]
    1446:	0771      	lsls	r1, r6, #29
    1448:	f102 32ff 	add.w	r2, r2, #4294967295
    144c:	d419      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    144e:	681f      	ldr	r7, [r3, #0]
    1450:	077f      	lsls	r7, r7, #29
    1452:	d416      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1454:	6819      	ldr	r1, [r3, #0]
    1456:	074e      	lsls	r6, r1, #29
    1458:	d413      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    145a:	6818      	ldr	r0, [r3, #0]
    145c:	0740      	lsls	r0, r0, #29
    145e:	d410      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1460:	681e      	ldr	r6, [r3, #0]
    1462:	0771      	lsls	r1, r6, #29
    1464:	d40d      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1466:	681f      	ldr	r7, [r3, #0]
    1468:	077f      	lsls	r7, r7, #29
    146a:	d40a      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    146c:	6819      	ldr	r1, [r3, #0]
    146e:	074e      	lsls	r6, r1, #29
    1470:	d407      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1472:	6818      	ldr	r0, [r3, #0]
    1474:	0740      	lsls	r0, r0, #29
    1476:	d404      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    1478:	681e      	ldr	r6, [r3, #0]
    147a:	0771      	lsls	r1, r6, #29
    147c:	d401      	bmi.n	1482 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    147e:	3a09      	subs	r2, #9
    1480:	d1dd      	bne.n	143e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1482:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1484:	4f04      	ldr	r7, [pc, #16]	; (1498 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1486:	0223      	lsls	r3, r4, #8
    1488:	f403 7100 	and.w	r1, r3, #512	; 0x200
    148c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1490:	4311      	orrs	r1, r2
    1492:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1494:	6039      	str	r1, [r7, #0]
    1496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1498:	40018000 	.word	0x40018000
    149c:	40018008 	.word	0x40018008

000014a0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    14a0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    14a2:	4604      	mov	r4, r0
    14a4:	b120      	cbz	r0, 14b0 <am_hal_clkgen_sysclk_select+0x10>
    14a6:	4a06      	ldr	r2, [pc, #24]	; (14c0 <am_hal_clkgen_sysclk_select+0x20>)
    14a8:	4806      	ldr	r0, [pc, #24]	; (14c4 <am_hal_clkgen_sysclk_select+0x24>)
    14aa:	2150      	movs	r1, #80	; 0x50
    14ac:	f000 f82a 	bl	1504 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    14b0:	4b05      	ldr	r3, [pc, #20]	; (14c8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    14b2:	4906      	ldr	r1, [pc, #24]	; (14cc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    14b4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    14b6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    14b8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    14ba:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    14bc:	601a      	str	r2, [r3, #0]
    14be:	bd10      	pop	{r4, pc}
    14c0:	00001e54 	.word	0x00001e54
    14c4:	00001e8c 	.word	0x00001e8c
    14c8:	40004014 	.word	0x40004014
    14cc:	40004018 	.word	0x40004018

000014d0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    14d0:	4b04      	ldr	r3, [pc, #16]	; (14e4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    14d2:	4905      	ldr	r1, [pc, #20]	; (14e8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    14d4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    14d8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    14dc:	bf08      	it	eq
    14de:	4608      	moveq	r0, r1
    14e0:	4770      	bx	lr
    14e2:	bf00      	nop
    14e4:	40004018 	.word	0x40004018
    14e8:	02dc6c00 	.word	0x02dc6c00
    14ec:	016e3600 	.word	0x016e3600

000014f0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    14f0:	0783      	lsls	r3, r0, #30
    14f2:	d003      	beq.n	14fc <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    14f4:	4a02      	ldr	r2, [pc, #8]	; (1500 <am_hal_clkgen_osc_stop+0x10>)
    14f6:	6813      	ldr	r3, [r2, #0]
    14f8:	4318      	orrs	r0, r3
    14fa:	6010      	str	r0, [r2, #0]
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop
    1500:	4000400c 	.word	0x4000400c

00001504 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1504:	e7fe      	b.n	1504 <am_hal_debug_error>
    1506:	bf00      	nop

00001508 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1508:	4b01      	ldr	r3, [pc, #4]	; (1510 <am_hal_flash_delay+0x8>)
    150a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    150c:	4708      	bx	r1
    150e:	bf00      	nop
    1510:	10001000 	.word	0x10001000

00001514 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1514:	4b0d      	ldr	r3, [pc, #52]	; (154c <am_hal_itm_enable+0x38>)
    1516:	6818      	ldr	r0, [r3, #0]
    1518:	07c2      	lsls	r2, r0, #31
    151a:	d416      	bmi.n	154a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    151c:	4a0c      	ldr	r2, [pc, #48]	; (1550 <am_hal_itm_enable+0x3c>)
    151e:	6811      	ldr	r1, [r2, #0]
    1520:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1524:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1526:	6810      	ldr	r0, [r2, #0]
    1528:	01c3      	lsls	r3, r0, #7
    152a:	d5fc      	bpl.n	1526 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    152c:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    152e:	4809      	ldr	r0, [pc, #36]	; (1554 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1530:	4c09      	ldr	r4, [pc, #36]	; (1558 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1532:	4d0a      	ldr	r5, [pc, #40]	; (155c <am_hal_itm_enable+0x48>)
    1534:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1536:	250f      	movs	r5, #15
    1538:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    153a:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    153c:	4908      	ldr	r1, [pc, #32]	; (1560 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <am_hal_itm_enable+0x50>)
    1540:	4a09      	ldr	r2, [pc, #36]	; (1568 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1542:	f04f 30ff 	mov.w	r0, #4294967295
    1546:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1548:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    154a:	4770      	bx	lr
    154c:	10001154 	.word	0x10001154
    1550:	e000edfc 	.word	0xe000edfc
    1554:	e0000fb0 	.word	0xe0000fb0
    1558:	e0000e40 	.word	0xe0000e40
    155c:	c5acce55 	.word	0xc5acce55
    1560:	e0000e00 	.word	0xe0000e00
    1564:	e0000e80 	.word	0xe0000e80
    1568:	00150511 	.word	0x00150511

0000156c <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    156c:	4a03      	ldr	r2, [pc, #12]	; (157c <am_hal_itm_not_busy+0x10>)
    156e:	6813      	ldr	r3, [r2, #0]
    1570:	021b      	lsls	r3, r3, #8
    1572:	d4fc      	bmi.n	156e <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1574:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1578:	f7ff bfc6 	b.w	1508 <am_hal_flash_delay>
    157c:	e0000e80 	.word	0xe0000e80

00001580 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1580:	7803      	ldrb	r3, [r0, #0]
    1582:	b1ab      	cbz	r3, 15b0 <am_hal_itm_print+0x30>
    1584:	4602      	mov	r2, r0
    1586:	2300      	movs	r3, #0
    1588:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    158c:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    158e:	2900      	cmp	r1, #0
    1590:	d1fa      	bne.n	1588 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1592:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1596:	b430      	push	{r4, r5}
    1598:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    159a:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    159c:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    15a0:	f8dc 3000 	ldr.w	r3, [ip]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d0fb      	beq.n	15a0 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    15a8:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    15aa:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    15ac:	d1f6      	bne.n	159c <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    15ae:	bc30      	pop	{r4, r5}
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop

000015b4 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15b4:	4b2f      	ldr	r3, [pc, #188]	; (1674 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15b6:	4930      	ldr	r1, [pc, #192]	; (1678 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    15b8:	4a30      	ldr	r2, [pc, #192]	; (167c <am_hal_mcuctrl_device_info_get+0xc8>)
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    15ba:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15bc:	681f      	ldr	r7, [r3, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15be:	4d30      	ldr	r5, [pc, #192]	; (1680 <am_hal_mcuctrl_device_info_get+0xcc>)
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15c0:	6007      	str	r7, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15c2:	682f      	ldr	r7, [r5, #0]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    15c4:	4c2f      	ldr	r4, [pc, #188]	; (1684 <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15c6:	6047      	str	r7, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    15c8:	6827      	ldr	r7, [r4, #0]
    15ca:	6087      	str	r7, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15cc:	680f      	ldr	r7, [r1, #0]
    15ce:	60c7      	str	r7, [r0, #12]

    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15d0:	681b      	ldr	r3, [r3, #0]
    15d2:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15d4:	682d      	ldr	r5, [r5, #0]
    15d6:	6045      	str	r5, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    15d8:	6824      	ldr	r4, [r4, #0]
    15da:	6084      	str	r4, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15dc:	6809      	ldr	r1, [r1, #0]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    15de:	4e2a      	ldr	r6, [pc, #168]	; (1688 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15e0:	60c1      	str	r1, [r0, #12]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    15e2:	f3c3 5703 	ubfx	r7, r3, #20, #4

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_flash_size[
    15e6:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    15ea:	6836      	ldr	r6, [r6, #0]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    15ec:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    15f0:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    15f4:	4a25      	ldr	r2, [pc, #148]	; (168c <am_hal_mcuctrl_device_info_get+0xd8>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    15f6:	6106      	str	r6, [r0, #16]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified =
    15f8:	f003 0301 	and.w	r3, r3, #1
    15fc:	6143      	str	r3, [r0, #20]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    15fe:	6185      	str	r5, [r0, #24]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1600:	61c4      	str	r4, [r0, #28]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1602:	6814      	ldr	r4, [r2, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1604:	4e22      	ldr	r6, [pc, #136]	; (1690 <am_hal_mcuctrl_device_info_get+0xdc>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1606:	4f23      	ldr	r7, [pc, #140]	; (1694 <am_hal_mcuctrl_device_info_get+0xe0>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1608:	4923      	ldr	r1, [pc, #140]	; (1698 <am_hal_mcuctrl_device_info_get+0xe4>)
    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    160a:	4d24      	ldr	r5, [pc, #144]	; (169c <am_hal_mcuctrl_device_info_get+0xe8>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    160c:	b2e3      	uxtb	r3, r4
    160e:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1610:	6834      	ldr	r4, [r6, #0]
    1612:	0224      	lsls	r4, r4, #8
    1614:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    1618:	4323      	orrs	r3, r4
    161a:	6203      	str	r3, [r0, #32]

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    161c:	6833      	ldr	r3, [r6, #0]
    161e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1622:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1624:	683c      	ldr	r4, [r7, #0]
    1626:	0124      	lsls	r4, r4, #4
    1628:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
    162c:	4323      	orrs	r3, r4
    162e:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1630:	683f      	ldr	r7, [r7, #0]
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    1632:	4c1b      	ldr	r4, [pc, #108]	; (16a0 <am_hal_mcuctrl_device_info_get+0xec>)
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1634:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
    1638:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    163a:	6809      	ldr	r1, [r1, #0]
    163c:	f3c1 1703 	ubfx	r7, r1, #4, #4
    1640:	433b      	orrs	r3, r7

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1642:	321c      	adds	r2, #28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1644:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1646:	6812      	ldr	r2, [r2, #0]
    1648:	0611      	lsls	r1, r2, #24
    164a:	62c1      	str	r1, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    164c:	682d      	ldr	r5, [r5, #0]
    164e:	042b      	lsls	r3, r5, #16
    1650:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    1654:	ea47 0201 	orr.w	r2, r7, r1
    1658:	62c2      	str	r2, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    165a:	6931      	ldr	r1, [r6, #16]
    165c:	020e      	lsls	r6, r1, #8
    165e:	f406 457f 	and.w	r5, r6, #65280	; 0xff00
    1662:	4315      	orrs	r5, r2
    1664:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    1666:	6824      	ldr	r4, [r4, #0]
    1668:	b2e3      	uxtb	r3, r4
    166a:	431d      	orrs	r5, r3
    166c:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    166e:	bcf0      	pop	{r4, r5, r6, r7}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	40020000 	.word	0x40020000
    1678:	4002000c 	.word	0x4002000c
    167c:	00001ea4 	.word	0x00001ea4
    1680:	40020004 	.word	0x40020004
    1684:	40020008 	.word	0x40020008
    1688:	40020010 	.word	0x40020010
    168c:	f0000fe0 	.word	0xf0000fe0
    1690:	f0000fe4 	.word	0xf0000fe4
    1694:	f0000fe8 	.word	0xf0000fe8
    1698:	f0000fec 	.word	0xf0000fec
    169c:	f0000ff8 	.word	0xf0000ff8
    16a0:	f0000ff0 	.word	0xf0000ff0

000016a4 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    16a4:	4a0d      	ldr	r2, [pc, #52]	; (16dc <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    16a6:	4b0e      	ldr	r3, [pc, #56]	; (16e0 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16a8:	490e      	ldr	r1, [pc, #56]	; (16e4 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    16aa:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    16ac:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    16ae:	6814      	ldr	r4, [r2, #0]
    16b0:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16b2:	6809      	ldr	r1, [r1, #0]
    16b4:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16b6:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16b8:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16ba:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16bc:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16be:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    16c0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16c4:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    16c6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    16c8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    16cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    16d0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    16d2:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16d4:	6142      	str	r2, [r0, #20]
}
    16d6:	bc70      	pop	{r4, r5, r6}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	400201c4 	.word	0x400201c4
    16e0:	400201cc 	.word	0x400201cc
    16e4:	400201c0 	.word	0x400201c0

000016e8 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    16e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    16ec:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    16ee:	d03a      	beq.n	1766 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    16f0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    16f4:	f000 809d 	beq.w	1832 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    16f8:	2801      	cmp	r0, #1
    16fa:	f000 809d 	beq.w	1838 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    16fe:	2803      	cmp	r0, #3
    1700:	f000 80a6 	beq.w	1850 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1704:	2807      	cmp	r0, #7
    1706:	f000 809c 	beq.w	1842 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    170a:	280f      	cmp	r0, #15
    170c:	f000 80a5 	beq.w	185a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1710:	281f      	cmp	r0, #31
    1712:	f000 80b1 	beq.w	1878 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1716:	283f      	cmp	r0, #63	; 0x3f
    1718:	f000 80b5 	beq.w	1886 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    171c:	287f      	cmp	r0, #127	; 0x7f
    171e:	f000 80b9 	beq.w	1894 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1722:	28ff      	cmp	r0, #255	; 0xff
    1724:	f000 80a0 	beq.w	1868 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1728:	f240 13ff 	movw	r3, #511	; 0x1ff
    172c:	4298      	cmp	r0, r3
    172e:	f000 80b8 	beq.w	18a2 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1732:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1736:	4288      	cmp	r0, r1
    1738:	f000 80b9 	beq.w	18ae <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    173c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1740:	4290      	cmp	r0, r2
    1742:	d00e      	beq.n	1762 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1744:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1748:	f000 80b7 	beq.w	18ba <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    174c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1750:	42a0      	cmp	r0, r4
    1752:	f000 80b5 	beq.w	18c0 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1756:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    175a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    175e:	4560      	cmp	r0, ip
    1760:	d132      	bne.n	17c8 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1762:	495c      	ldr	r1, [pc, #368]	; (18d4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1764:	e066      	b.n	1834 <am_hal_pwrctrl_memory_enable+0x14c>
    1766:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    176a:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    176c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    176e:	4c5a      	ldr	r4, [pc, #360]	; (18d8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1770:	6822      	ldr	r2, [r4, #0]
    1772:	402a      	ands	r2, r5
    1774:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1776:	4d58      	ldr	r5, [pc, #352]	; (18d8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1778:	682c      	ldr	r4, [r5, #0]
    177a:	4320      	orrs	r0, r4
    177c:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    177e:	2b00      	cmp	r3, #0
    1780:	d029      	beq.n	17d6 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1782:	4a56      	ldr	r2, [pc, #344]	; (18dc <am_hal_pwrctrl_memory_enable+0x1f4>)
    1784:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1786:	4203      	tst	r3, r0
    1788:	bf18      	it	ne
    178a:	20c6      	movne	r0, #198	; 0xc6
    178c:	d01f      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    178e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1790:	422b      	tst	r3, r5
    1792:	d01c      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1794:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1796:	4223      	tst	r3, r4
    1798:	d019      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    179a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    179c:	422b      	tst	r3, r5
    179e:	d016      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17a0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17a2:	4223      	tst	r3, r4
    17a4:	d013      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17a6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17a8:	422b      	tst	r3, r5
    17aa:	d010      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17ac:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17ae:	4223      	tst	r3, r4
    17b0:	d00d      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17b2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17b4:	422b      	tst	r3, r5
    17b6:	d00a      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17b8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17ba:	4223      	tst	r3, r4
    17bc:	d007      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    17be:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    17c0:	422b      	tst	r3, r5
    17c2:	d004      	beq.n	17ce <am_hal_pwrctrl_memory_enable+0xe6>
    17c4:	3809      	subs	r0, #9
    17c6:	d1e2      	bne.n	178e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    17c8:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    17ca:	bc30      	pop	{r4, r5}
    17cc:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    17ce:	b911      	cbnz	r1, 17d6 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    17d0:	2001      	movs	r0, #1
}
    17d2:	bc30      	pop	{r4, r5}
    17d4:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17d6:	4b41      	ldr	r3, [pc, #260]	; (18dc <am_hal_pwrctrl_memory_enable+0x1f4>)
    17d8:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17da:	ea31 0402 	bics.w	r4, r1, r2
    17de:	bf18      	it	ne
    17e0:	24c6      	movne	r4, #198	; 0xc6
    17e2:	d0f5      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17e4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17e6:	ea31 0000 	bics.w	r0, r1, r0
    17ea:	d0f1      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17ec:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17ee:	ea31 0005 	bics.w	r0, r1, r5
    17f2:	d0ed      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17f4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17f6:	ea31 0002 	bics.w	r0, r1, r2
    17fa:	d0e9      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    17fc:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    17fe:	ea31 0000 	bics.w	r0, r1, r0
    1802:	d0e5      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1804:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1806:	ea31 0005 	bics.w	r0, r1, r5
    180a:	d0e1      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    180c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    180e:	ea31 0002 	bics.w	r0, r1, r2
    1812:	d0dd      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1814:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1816:	ea31 0000 	bics.w	r0, r1, r0
    181a:	d0d9      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    181c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    181e:	ea31 0005 	bics.w	r0, r1, r5
    1822:	d0d5      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1824:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1826:	ea31 0002 	bics.w	r0, r1, r2
    182a:	d0d1      	beq.n	17d0 <am_hal_pwrctrl_memory_enable+0xe8>
    182c:	3c09      	subs	r4, #9
    182e:	d1d9      	bne.n	17e4 <am_hal_pwrctrl_memory_enable+0xfc>
    1830:	e7ca      	b.n	17c8 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1832:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1834:	2300      	movs	r3, #0
    1836:	e79e      	b.n	1776 <am_hal_pwrctrl_memory_enable+0x8e>
    1838:	4d29      	ldr	r5, [pc, #164]	; (18e0 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    183a:	4b2a      	ldr	r3, [pc, #168]	; (18e4 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    183c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1840:	e795      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1842:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1846:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    184a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    184e:	e78e      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1850:	4d25      	ldr	r5, [pc, #148]	; (18e8 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1852:	4b26      	ldr	r3, [pc, #152]	; (18ec <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1854:	f44f 7140 	mov.w	r1, #768	; 0x300
    1858:	e789      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    185a:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    185e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1862:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1866:	e782      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1868:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    186c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1870:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1874:	20ff      	movs	r0, #255	; 0xff
    1876:	e77a      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1878:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    187c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1880:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1884:	e773      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1886:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    188a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    188e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1892:	e76c      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    1894:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1898:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    189c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    18a0:	e765      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    18a2:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18a6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    18aa:	4911      	ldr	r1, [pc, #68]	; (18f0 <am_hal_pwrctrl_memory_enable+0x208>)
    18ac:	e75f      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    18ae:	4911      	ldr	r1, [pc, #68]	; (18f4 <am_hal_pwrctrl_memory_enable+0x20c>)
    18b0:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    18b8:	e759      	b.n	176e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    18ba:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    18be:	e7b9      	b.n	1834 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    18c0:	4805      	ldr	r0, [pc, #20]	; (18d8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    18c2:	6803      	ldr	r3, [r0, #0]
    18c4:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    18c8:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    18ca:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    18ce:	2100      	movs	r1, #0
    18d0:	e757      	b.n	1782 <am_hal_pwrctrl_memory_enable+0x9a>
    18d2:	bf00      	nop
    18d4:	0007ff00 	.word	0x0007ff00
    18d8:	40021010 	.word	0x40021010
    18dc:	40021014 	.word	0x40021014
    18e0:	fffff801 	.word	0xfffff801
    18e4:	0007fe00 	.word	0x0007fe00
    18e8:	fffff803 	.word	0xfffff803
    18ec:	0007fc00 	.word	0x0007fc00
    18f0:	0001ff00 	.word	0x0001ff00
    18f4:	0003ff00 	.word	0x0003ff00

000018f8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    18f8:	4b0f      	ldr	r3, [pc, #60]	; (1938 <am_hal_pwrctrl_bucks_init+0x40>)
    18fa:	681a      	ldr	r2, [r3, #0]
    18fc:	0792      	lsls	r2, r2, #30
    18fe:	d502      	bpl.n	1906 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1900:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1902:	07c3      	lsls	r3, r0, #31
    1904:	d40e      	bmi.n	1924 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1906:	4b0d      	ldr	r3, [pc, #52]	; (193c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1908:	4a0b      	ldr	r2, [pc, #44]	; (1938 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    190a:	6819      	ldr	r1, [r3, #0]
    190c:	f041 0002 	orr.w	r0, r1, #2
    1910:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1912:	6819      	ldr	r1, [r3, #0]
    1914:	f041 0001 	orr.w	r0, r1, #1
    1918:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    191a:	6813      	ldr	r3, [r2, #0]
    191c:	f003 0103 	and.w	r1, r3, #3
    1920:	2903      	cmp	r1, #3
    1922:	d1fa      	bne.n	191a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1924:	4a04      	ldr	r2, [pc, #16]	; (1938 <am_hal_pwrctrl_bucks_init+0x40>)
    1926:	6810      	ldr	r0, [r2, #0]
    1928:	f000 0303 	and.w	r3, r0, #3
    192c:	2b03      	cmp	r3, #3
    192e:	d1fa      	bne.n	1926 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1930:	2042      	movs	r0, #66	; 0x42
    1932:	f7ff bde9 	b.w	1508 <am_hal_flash_delay>
    1936:	bf00      	nop
    1938:	40021004 	.word	0x40021004
    193c:	40021000 	.word	0x40021000

00001940 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1940:	4b0b      	ldr	r3, [pc, #44]	; (1970 <am_hal_pwrctrl_bucks_enable+0x30>)
    1942:	681a      	ldr	r2, [r3, #0]
    1944:	0792      	lsls	r2, r2, #30
    1946:	d502      	bpl.n	194e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1948:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    194a:	07c3      	lsls	r3, r0, #31
    194c:	d40e      	bmi.n	196c <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1950:	4a07      	ldr	r2, [pc, #28]	; (1970 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1952:	6819      	ldr	r1, [r3, #0]
    1954:	f041 0002 	orr.w	r0, r1, #2
    1958:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    195a:	6819      	ldr	r1, [r3, #0]
    195c:	f041 0001 	orr.w	r0, r1, #1
    1960:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1962:	6813      	ldr	r3, [r2, #0]
    1964:	f003 0103 	and.w	r1, r3, #3
    1968:	2903      	cmp	r1, #3
    196a:	d1fa      	bne.n	1962 <am_hal_pwrctrl_bucks_enable+0x22>
    196c:	4770      	bx	lr
    196e:	bf00      	nop
    1970:	40021004 	.word	0x40021004
    1974:	40021000 	.word	0x40021000

00001978 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1978:	4b12      	ldr	r3, [pc, #72]	; (19c4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    197a:	681a      	ldr	r2, [r3, #0]
    197c:	0792      	lsls	r2, r2, #30
    197e:	d402      	bmi.n	1986 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1980:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1982:	07c3      	lsls	r3, r0, #31
    1984:	d51c      	bpl.n	19c0 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1986:	4910      	ldr	r1, [pc, #64]	; (19c8 <am_hal_pwrctrl_bucks_disable+0x50>)
    1988:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    198a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    198e:	2a20      	cmp	r2, #32
    1990:	d00b      	beq.n	19aa <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1992:	4b0e      	ldr	r3, [pc, #56]	; (19cc <am_hal_pwrctrl_bucks_disable+0x54>)
    1994:	681a      	ldr	r2, [r3, #0]
    1996:	f022 0002 	bic.w	r0, r2, #2
    199a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    199c:	6819      	ldr	r1, [r3, #0]
    199e:	f021 0201 	bic.w	r2, r1, #1
    19a2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    19a4:	200a      	movs	r0, #10
    19a6:	f7ff bdaf 	b.w	1508 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    19aa:	4809      	ldr	r0, [pc, #36]	; (19d0 <am_hal_pwrctrl_bucks_disable+0x58>)
    19ac:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    19ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    19b2:	d1ee      	bne.n	1992 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    19b4:	4805      	ldr	r0, [pc, #20]	; (19cc <am_hal_pwrctrl_bucks_disable+0x54>)
    19b6:	6803      	ldr	r3, [r0, #0]
    19b8:	f003 0105 	and.w	r1, r3, #5
    19bc:	6001      	str	r1, [r0, #0]
    19be:	e7f1      	b.n	19a4 <am_hal_pwrctrl_bucks_disable+0x2c>
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop
    19c4:	40021004 	.word	0x40021004
    19c8:	4002000c 	.word	0x4002000c
    19cc:	40021000 	.word	0x40021000
    19d0:	40021008 	.word	0x40021008

000019d4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    19d4:	4905      	ldr	r1, [pc, #20]	; (19ec <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    19d6:	4a06      	ldr	r2, [pc, #24]	; (19f0 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    19d8:	680b      	ldr	r3, [r1, #0]
    19da:	f043 0006 	orr.w	r0, r3, #6
    19de:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    19e0:	6811      	ldr	r1, [r2, #0]
    19e2:	f021 0304 	bic.w	r3, r1, #4
    19e6:	6013      	str	r3, [r2, #0]
    19e8:	4770      	bx	lr
    19ea:	bf00      	nop
    19ec:	40021018 	.word	0x40021018
    19f0:	40021000 	.word	0x40021000

000019f4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    19f4:	4a05      	ldr	r2, [pc, #20]	; (1a0c <am_hal_rtc_osc_select+0x18>)
    19f6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    19f8:	b918      	cbnz	r0, 1a02 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    19fa:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    19fe:	6010      	str	r0, [r2, #0]
    1a00:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1a02:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1a06:	6011      	str	r1, [r2, #0]
    1a08:	4770      	bx	lr
    1a0a:	bf00      	nop
    1a0c:	4000400c 	.word	0x4000400c

00001a10 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1a10:	4a02      	ldr	r2, [pc, #8]	; (1a1c <am_hal_rtc_osc_disable+0xc>)
    1a12:	6813      	ldr	r3, [r2, #0]
    1a14:	f043 0010 	orr.w	r0, r3, #16
    1a18:	6010      	str	r0, [r2, #0]
    1a1a:	4770      	bx	lr
    1a1c:	40004050 	.word	0x40004050

00001a20 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a22:	b083      	sub	sp, #12
    1a24:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1a26:	f000 f969 	bl	1cfc <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1a2a:	4a41      	ldr	r2, [pc, #260]	; (1b30 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1a2c:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1a2e:	b11d      	cbz	r5, 1a38 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1a30:	4b40      	ldr	r3, [pc, #256]	; (1b34 <am_hal_sysctrl_sleep+0x114>)
    1a32:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1a34:	07c3      	lsls	r3, r0, #31
    1a36:	d509      	bpl.n	1a4c <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1a38:	6811      	ldr	r1, [r2, #0]
    1a3a:	f021 0604 	bic.w	r6, r1, #4
    1a3e:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1a40:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1a42:	4620      	mov	r0, r4
    1a44:	f000 f95e 	bl	1d04 <am_hal_interrupt_master_set>
}
    1a48:	b003      	add	sp, #12
    1a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1a4c:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a4e:	493a      	ldr	r1, [pc, #232]	; (1b38 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1a50:	4f3a      	ldr	r7, [pc, #232]	; (1b3c <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1a52:	4d3b      	ldr	r5, [pc, #236]	; (1b40 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1a54:	483b      	ldr	r0, [pc, #236]	; (1b44 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1a56:	f043 0604 	orr.w	r6, r3, #4
    1a5a:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a5c:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1a5e:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1a60:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1a62:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a64:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1a68:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1a6a:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a6e:	bf14      	ite	ne
    1a70:	2500      	movne	r5, #0
    1a72:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1a74:	2e03      	cmp	r6, #3
    1a76:	bf8c      	ite	hi
    1a78:	2100      	movhi	r1, #0
    1a7a:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a7c:	f012 0303 	ands.w	r3, r2, #3
    1a80:	bf18      	it	ne
    1a82:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a84:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a88:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a8a:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1a8c:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1a90:	b91e      	cbnz	r6, 1a9a <am_hal_sysctrl_sleep+0x7a>
    1a92:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1a96:	2d0f      	cmp	r5, #15
    1a98:	d00a      	beq.n	1ab0 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1a9a:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1a9c:	2d0f      	cmp	r5, #15
    1a9e:	d01a      	beq.n	1ad6 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1aa0:	4f29      	ldr	r7, [pc, #164]	; (1b48 <am_hal_sysctrl_sleep+0x128>)
    1aa2:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1aa4:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1aa6:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1aa8:	f000 f92c 	bl	1d04 <am_hal_interrupt_master_set>
}
    1aac:	b003      	add	sp, #12
    1aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1ab0:	683a      	ldr	r2, [r7, #0]
    1ab2:	1e50      	subs	r0, r2, #1
    1ab4:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1ab6:	9800      	ldr	r0, [sp, #0]
    1ab8:	f04f 31ff 	mov.w	r1, #4294967295
    1abc:	f000 f8c6 	bl	1c4c <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1ac0:	9800      	ldr	r0, [sp, #0]
    1ac2:	4633      	mov	r3, r6
    1ac4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1ac8:	f04f 31ff 	mov.w	r1, #4294967295
    1acc:	f000 f8d2 	bl	1c74 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1ad0:	f7ff ff52 	bl	1978 <am_hal_pwrctrl_bucks_disable>
    1ad4:	e7e1      	b.n	1a9a <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1ad6:	f3ef 8310 	mrs	r3, PRIMASK
    1ada:	9301      	str	r3, [sp, #4]
    1adc:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1ade:	4e1b      	ldr	r6, [pc, #108]	; (1b4c <am_hal_sysctrl_sleep+0x12c>)
    1ae0:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1ae2:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1ae4:	6835      	ldr	r5, [r6, #0]
    1ae6:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1aea:	f04c 021c 	orr.w	r2, ip, #28
    1aee:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1af0:	6830      	ldr	r0, [r6, #0]
    1af2:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1af6:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1afa:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1afc:	9e01      	ldr	r6, [sp, #4]
    1afe:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1b02:	201c      	movs	r0, #28
    1b04:	f7ff fd00 	bl	1508 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1b08:	f7ff ff1a 	bl	1940 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b0c:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1b0e:	4910      	ldr	r1, [pc, #64]	; (1b50 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1b10:	4d0d      	ldr	r5, [pc, #52]	; (1b48 <am_hal_sysctrl_sleep+0x128>)
    1b12:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b14:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1b16:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b18:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1b1a:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1b1c:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1b1e:	f7ff fcf3 	bl	1508 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1b22:	9800      	ldr	r0, [sp, #0]
    1b24:	f04f 31ff 	mov.w	r1, #4294967295
    1b28:	f000 f876 	bl	1c18 <am_hal_ctimer_start>
    1b2c:	e789      	b.n	1a42 <am_hal_sysctrl_sleep+0x22>
    1b2e:	bf00      	nop
    1b30:	e000ed10 	.word	0xe000ed10
    1b34:	40020250 	.word	0x40020250
    1b38:	4002000c 	.word	0x4002000c
    1b3c:	10001160 	.word	0x10001160
    1b40:	40021000 	.word	0x40021000
    1b44:	40021008 	.word	0x40021008
    1b48:	10001158 	.word	0x10001158
    1b4c:	40020068 	.word	0x40020068
    1b50:	1000115c 	.word	0x1000115c

00001b54 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1b54:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1b56:	4a22      	ldr	r2, [pc, #136]	; (1be0 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1b58:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1b5a:	2100      	movs	r1, #0
    1b5c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1b5e:	b333      	cbz	r3, 1bae <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b60:	4d20      	ldr	r5, [pc, #128]	; (1be4 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1b62:	4921      	ldr	r1, [pc, #132]	; (1be8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1b64:	4a21      	ldr	r2, [pc, #132]	; (1bec <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b66:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1b68:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1b6c:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1b6e:	458c      	cmp	ip, r1
    1b70:	bf94      	ite	ls
    1b72:	461d      	movls	r5, r3
    1b74:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1b76:	f7ff fcab 	bl	14d0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1b7a:	1c43      	adds	r3, r0, #1
    1b7c:	d02e      	beq.n	1bdc <am_hal_tpiu_enable+0x88>
    1b7e:	08c3      	lsrs	r3, r0, #3
    1b80:	fbb3 fef5 	udiv	lr, r3, r5
    1b84:	f10e 31ff 	add.w	r1, lr, #4294967295
    1b88:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b8a:	4a19      	ldr	r2, [pc, #100]	; (1bf0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b8c:	4c19      	ldr	r4, [pc, #100]	; (1bf4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1b8e:	4b1a      	ldr	r3, [pc, #104]	; (1bf8 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b90:	491a      	ldr	r1, [pc, #104]	; (1bfc <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b92:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b94:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b96:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1b98:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b9c:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b9e:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ba0:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ba2:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1baa:	f7ff bcad 	b.w	1508 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1bae:	4c10      	ldr	r4, [pc, #64]	; (1bf0 <am_hal_tpiu_enable+0x9c>)
    1bb0:	6905      	ldr	r5, [r0, #16]
    1bb2:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1bb4:	6882      	ldr	r2, [r0, #8]
    1bb6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1bba:	68c3      	ldr	r3, [r0, #12]
    1bbc:	4c09      	ldr	r4, [pc, #36]	; (1be4 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1bbe:	490e      	ldr	r1, [pc, #56]	; (1bf8 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1bc0:	1e5d      	subs	r5, r3, #1
    1bc2:	2201      	movs	r2, #1
    1bc4:	40aa      	lsls	r2, r5
    1bc6:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1bc8:	680b      	ldr	r3, [r1, #0]
    1bca:	6840      	ldr	r0, [r0, #4]
    1bcc:	4318      	orrs	r0, r3
    1bce:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    1bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1bd4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1bd8:	f7ff bc96 	b.w	1508 <am_hal_flash_delay>
    1bdc:	2005      	movs	r0, #5
    1bde:	e7d4      	b.n	1b8a <am_hal_tpiu_enable+0x36>
    1be0:	e0040304 	.word	0xe0040304
    1be4:	e0040004 	.word	0xe0040004
    1be8:	001da380 	.word	0x001da380
    1bec:	000f4240 	.word	0x000f4240
    1bf0:	e0040010 	.word	0xe0040010
    1bf4:	e00400f0 	.word	0xe00400f0
    1bf8:	40020250 	.word	0x40020250
    1bfc:	e0040f00 	.word	0xe0040f00

00001c00 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1c00:	4b01      	ldr	r3, [pc, #4]	; (1c08 <am_hal_tpiu_disable+0x8>)
    1c02:	2200      	movs	r2, #0
    1c04:	601a      	str	r2, [r3, #0]
    1c06:	4770      	bx	lr
    1c08:	40020250 	.word	0x40020250

00001c0c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1c0c:	4b01      	ldr	r3, [pc, #4]	; (1c14 <am_hal_vcomp_disable+0x8>)
    1c0e:	2237      	movs	r2, #55	; 0x37
    1c10:	601a      	str	r2, [r3, #0]
    1c12:	4770      	bx	lr
    1c14:	4000c008 	.word	0x4000c008

00001c18 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1c18:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1c1a:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1c1e:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1c20:	0100      	lsls	r0, r0, #4
    1c22:	4a09      	ldr	r2, [pc, #36]	; (1c48 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1c24:	9301      	str	r3, [sp, #4]
    1c26:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1c28:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1c2a:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1c2e:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1c32:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1c36:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1c38:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1c3a:	9801      	ldr	r0, [sp, #4]
    1c3c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1c40:	b003      	add	sp, #12
    1c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c46:	4770      	bx	lr
    1c48:	4000800c 	.word	0x4000800c

00001c4c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1c4c:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c4e:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1c52:	0100      	lsls	r0, r0, #4
    1c54:	4a06      	ldr	r2, [pc, #24]	; (1c70 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c56:	9301      	str	r3, [sp, #4]
    1c58:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1c5a:	5883      	ldr	r3, [r0, r2]
    1c5c:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1c60:	4319      	orrs	r1, r3
    1c62:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1c64:	9801      	ldr	r0, [sp, #4]
    1c66:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1c6a:	b002      	add	sp, #8
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	4000800c 	.word	0x4000800c

00001c74 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1c74:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c76:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1c7a:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1c7c:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1c7e:	4d1c      	ldr	r5, [pc, #112]	; (1cf0 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c80:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1c82:	4e1c      	ldr	r6, [pc, #112]	; (1cf4 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1c84:	4f1c      	ldr	r7, [pc, #112]	; (1cf8 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c86:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c88:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1c8c:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c8e:	d01a      	beq.n	1cc6 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c90:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1c94:	2d80      	cmp	r5, #128	; 0x80
    1c96:	d01b      	beq.n	1cd0 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c9c:	2500      	movs	r5, #0
    1c9e:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1ca0:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1ca2:	d01c      	beq.n	1cde <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1ca4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1ca8:	d01e      	beq.n	1ce8 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1caa:	0c21      	lsrs	r1, r4, #16
    1cac:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1cae:	b291      	uxth	r1, r2
    1cb0:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1cb2:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1cb6:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1cb8:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1cba:	9801      	ldr	r0, [sp, #4]
    1cbc:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1cc0:	b002      	add	sp, #8
    1cc2:	bcf0      	pop	{r4, r5, r6, r7}
    1cc4:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1cc6:	0c25      	lsrs	r5, r4, #16
    1cc8:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1ccc:	2c80      	cmp	r4, #128	; 0x80
    1cce:	d10a      	bne.n	1ce6 <am_hal_ctimer_period_set+0x72>
    1cd0:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1cd2:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1cd4:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1cda:	4299      	cmp	r1, r3
    1cdc:	d1e2      	bne.n	1ca4 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1cde:	b297      	uxth	r7, r2
    1ce0:	433d      	orrs	r5, r7
    1ce2:	5185      	str	r5, [r0, r6]
    1ce4:	e7e9      	b.n	1cba <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ce6:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ce8:	b296      	uxth	r6, r2
    1cea:	4335      	orrs	r5, r6
    1cec:	51c5      	str	r5, [r0, r7]
    1cee:	e7e4      	b.n	1cba <am_hal_ctimer_period_set+0x46>
    1cf0:	4000800c 	.word	0x4000800c
    1cf4:	40008004 	.word	0x40008004
    1cf8:	40008008 	.word	0x40008008

00001cfc <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1cfc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1d00:	b672      	cpsid	i
    __asm("    bx lr");
    1d02:	4770      	bx	lr

00001d04 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1d04:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1d08:	4770      	bx	lr
    1d0a:	bf00      	nop
    1d0c:	6c6c6548 	.word	0x6c6c6548
    1d10:	6f57206f 	.word	0x6f57206f
    1d14:	21646c72 	.word	0x21646c72
    1d18:	00000a0a 	.word	0x00000a0a
    1d1c:	646e6556 	.word	0x646e6556
    1d20:	4e20726f 	.word	0x4e20726f
    1d24:	3a656d61 	.word	0x3a656d61
    1d28:	0a732520 	.word	0x0a732520
    1d2c:	00000000 	.word	0x00000000
    1d30:	69766544 	.word	0x69766544
    1d34:	74206563 	.word	0x74206563
    1d38:	3a657079 	.word	0x3a657079
    1d3c:	0a732520 	.word	0x0a732520
    1d40:	00000000 	.word	0x00000000
    1d44:	69766544 	.word	0x69766544
    1d48:	49206563 	.word	0x49206563
    1d4c:	3a6f666e 	.word	0x3a6f666e
    1d50:	6150090a 	.word	0x6150090a
    1d54:	6e207472 	.word	0x6e207472
    1d58:	65626d75 	.word	0x65626d75
    1d5c:	30203a72 	.word	0x30203a72
    1d60:	38302578 	.word	0x38302578
    1d64:	52090a58 	.word	0x52090a58
    1d68:	73697665 	.word	0x73697665
    1d6c:	3a6e6f69 	.word	0x3a6e6f69
    1d70:	25783020 	.word	0x25783020
    1d74:	52282058 	.word	0x52282058
    1d78:	63257665 	.word	0x63257665
    1d7c:	0a296325 	.word	0x0a296325
    1d80:	00000000 	.word	0x00000000
    1d84:	616c4609 	.word	0x616c4609
    1d88:	73206873 	.word	0x73206873
    1d8c:	3a657a69 	.word	0x3a657a69
    1d90:	0a642520 	.word	0x0a642520
    1d94:	00000000 	.word	0x00000000
    1d98:	41525309 	.word	0x41525309
    1d9c:	6973204d 	.word	0x6973204d
    1da0:	203a657a 	.word	0x203a657a
    1da4:	0a0a6425 	.word	0x0a0a6425
    1da8:	00000000 	.word	0x00000000
    1dac:	20434347 	.word	0x20434347
    1db0:	2e332e35 	.word	0x2e332e35
    1db4:	30322031 	.word	0x30322031
    1db8:	33303631 	.word	0x33303631
    1dbc:	28203730 	.word	0x28203730
    1dc0:	656c6572 	.word	0x656c6572
    1dc4:	29657361 	.word	0x29657361
    1dc8:	52415b20 	.word	0x52415b20
    1dcc:	6d652f4d 	.word	0x6d652f4d
    1dd0:	64646562 	.word	0x64646562
    1dd4:	352d6465 	.word	0x352d6465
    1dd8:	6172622d 	.word	0x6172622d
    1ddc:	2068636e 	.word	0x2068636e
    1de0:	69766572 	.word	0x69766572
    1de4:	6e6f6973 	.word	0x6e6f6973
    1de8:	34333220 	.word	0x34333220
    1dec:	5d393835 	.word	0x5d393835
    1df0:	00000000 	.word	0x00000000
    1df4:	706d6f43 	.word	0x706d6f43
    1df8:	72656c69 	.word	0x72656c69
    1dfc:	7325203a 	.word	0x7325203a
    1e00:	0000000a 	.word	0x0000000a
    1e04:	0a0a0a0a 	.word	0x0a0a0a0a
    1e08:	0a0a0a0a 	.word	0x0a0a0a0a
    1e0c:	0a0a0a0a 	.word	0x0a0a0a0a
    1e10:	0a0a0a0a 	.word	0x0a0a0a0a
    1e14:	00000a0a 	.word	0x00000a0a

00001e18 <g_DeviceNameApollo>:
    1e18:	6c6f7041 00006f6c                       Apollo..

00001e20 <g_DeviceNameApollo2>:
    1e20:	6c6f7041 00326f6c                       Apollo2.

00001e28 <g_ui8VendorNameAmbq>:
    1e28:	51424d41 00000000                       AMBQ....

00001e30 <g_ui8VendorNameUnknown>:
    1e30:	3f3f3f3f 00000000                       ????....

00001e38 <g_ui8DeviceNameUnknown>:
    1e38:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

00001e48 <am_hal_cachectrl_defaults>:
    1e48:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1e58:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1e68:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1e78:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1e88:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1e98:	6b6c635f 2e6e6567 00000063              _clkgen.c...

00001ea4 <g_am_hal_mcuctrl_flash_size>:
    1ea4:	00004000 00008000 00010000 00020000     .@..............
    1eb4:	00040000 00080000 00100000 00200000     .............. .
    1ec4:	00400000 00800000 01000000 02000000     ..@.............
    1ed4:	04000000 08000000 10000000 20000000     ............... 
