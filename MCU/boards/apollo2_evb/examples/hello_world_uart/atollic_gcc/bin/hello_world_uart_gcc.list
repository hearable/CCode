
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\hello_world_uart\atollic_gcc\bin\hello_world_uart_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000213c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000064  10001000  0000213c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001064  000021a0  00021064  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021064  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006fb2  00000000  00000000  0002109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a66  00000000  00000000  0002804d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000818  00000000  00000000  00029ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e80  00000000  00000000  0002a2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fd3  00000000  00000000  0002b14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002eda  00000000  00000000  0002f11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00031ff8  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001798  00000000  00000000  00032078  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003f78  00000000  00000000  00033810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 e9 03 00 00 51 04 00 00 61 04 00 00     ........Q...a...
      10:	61 04 00 00 61 04 00 00 61 04 00 00 00 00 00 00     a...a...a.......
	...
      2c:	59 04 00 00 59 04 00 00 00 00 00 00 59 04 00 00     Y...Y.......Y...
      3c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      4c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      5c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      6c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      7c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      8c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      9c:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      ac:	59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00     Y...Y...Y...Y...
      bc:	59 04 00 00                                         Y...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32Module)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     168:	f3ef 8310 	mrs	r3, PRIMASK
     16c:	60fb      	str	r3, [r7, #12]
     16e:	b672      	cpsid	i
     170:	4b29      	ldr	r3, [pc, #164]	; (218 <uart_init+0xb8>)
     172:	2273      	movs	r2, #115	; 0x73
     174:	601a      	str	r2, [r3, #0]
     176:	4a29      	ldr	r2, [pc, #164]	; (21c <uart_init+0xbc>)
     178:	4b28      	ldr	r3, [pc, #160]	; (21c <uart_init+0xbc>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     180:	6013      	str	r3, [r2, #0]
     182:	4a27      	ldr	r2, [pc, #156]	; (220 <uart_init+0xc0>)
     184:	4b26      	ldr	r3, [pc, #152]	; (220 <uart_init+0xc0>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18c:	6013      	str	r3, [r2, #0]
     18e:	4a25      	ldr	r2, [pc, #148]	; (224 <uart_init+0xc4>)
     190:	4b24      	ldr	r3, [pc, #144]	; (224 <uart_init+0xc4>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     198:	6013      	str	r3, [r2, #0]
     19a:	4b1f      	ldr	r3, [pc, #124]	; (218 <uart_init+0xb8>)
     19c:	2200      	movs	r2, #0
     19e:	601a      	str	r2, [r3, #0]
     1a0:	68fb      	ldr	r3, [r7, #12]
     1a2:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     1a6:	f3ef 8310 	mrs	r3, PRIMASK
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	b672      	cpsid	i
     1ae:	4b1a      	ldr	r3, [pc, #104]	; (218 <uart_init+0xb8>)
     1b0:	2273      	movs	r2, #115	; 0x73
     1b2:	601a      	str	r2, [r3, #0]
     1b4:	4a19      	ldr	r2, [pc, #100]	; (21c <uart_init+0xbc>)
     1b6:	4b19      	ldr	r3, [pc, #100]	; (21c <uart_init+0xbc>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     1be:	6013      	str	r3, [r2, #0]
     1c0:	4a17      	ldr	r2, [pc, #92]	; (220 <uart_init+0xc0>)
     1c2:	4b17      	ldr	r3, [pc, #92]	; (220 <uart_init+0xc0>)
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     1ce:	6013      	str	r3, [r2, #0]
     1d0:	4a14      	ldr	r2, [pc, #80]	; (224 <uart_init+0xc4>)
     1d2:	4b14      	ldr	r3, [pc, #80]	; (224 <uart_init+0xc4>)
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1da:	6013      	str	r3, [r2, #0]
     1dc:	4b0e      	ldr	r3, [pc, #56]	; (218 <uart_init+0xb8>)
     1de:	2200      	movs	r2, #0
     1e0:	601a      	str	r2, [r3, #0]
     1e2:	68bb      	ldr	r3, [r7, #8]
     1e4:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32Module);
     1e8:	6878      	ldr	r0, [r7, #4]
     1ea:	f001 fd6f 	bl	1ccc <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32Module);
     1ee:	6878      	ldr	r0, [r7, #4]
     1f0:	f001 fd80 	bl	1cf4 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32Module);
     1f4:	6878      	ldr	r0, [r7, #4]
     1f6:	f001 fd55 	bl	1ca4 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32Module, &g_sUartConfig);
     1fa:	490b      	ldr	r1, [pc, #44]	; (228 <uart_init+0xc8>)
     1fc:	6878      	ldr	r0, [r7, #4]
     1fe:	f001 fd01 	bl	1c04 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     202:	2112      	movs	r1, #18
     204:	6878      	ldr	r0, [r7, #4]
     206:	f001 fd93 	bl	1d30 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32Module);
     20a:	6878      	ldr	r0, [r7, #4]
     20c:	f001 fd36 	bl	1c7c <am_hal_uart_enable>
}
     210:	bf00      	nop
     212:	3710      	adds	r7, #16
     214:	46bd      	mov	sp, r7
     216:	bd80      	pop	{r7, pc}
     218:	40010060 	.word	0x40010060
     21c:	40010048 	.word	0x40010048
     220:	40010014 	.word	0x40010014
     224:	400100f4 	.word	0x400100f4
     228:	10001000 	.word	0x10001000

0000022c <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32Module)
{
     22c:	b580      	push	{r7, lr}
     22e:	b084      	sub	sp, #16
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(ui32Module, 0xFFFFFFFF);
     234:	f04f 31ff 	mov.w	r1, #4294967295
     238:	6878      	ldr	r0, [r7, #4]
     23a:	f001 fd19 	bl	1c70 <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable(ui32Module);
     23e:	6878      	ldr	r0, [r7, #4]
     240:	f001 fd30 	bl	1ca4 <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     244:	f3ef 8310 	mrs	r3, PRIMASK
     248:	60fb      	str	r3, [r7, #12]
     24a:	b672      	cpsid	i
     24c:	4b22      	ldr	r3, [pc, #136]	; (2d8 <uart_disable+0xac>)
     24e:	2273      	movs	r2, #115	; 0x73
     250:	601a      	str	r2, [r3, #0]
     252:	4a22      	ldr	r2, [pc, #136]	; (2dc <uart_disable+0xb0>)
     254:	4b21      	ldr	r3, [pc, #132]	; (2dc <uart_disable+0xb0>)
     256:	681b      	ldr	r3, [r3, #0]
     258:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     25c:	6013      	str	r3, [r2, #0]
     25e:	4a20      	ldr	r2, [pc, #128]	; (2e0 <uart_disable+0xb4>)
     260:	4b1f      	ldr	r3, [pc, #124]	; (2e0 <uart_disable+0xb4>)
     262:	681b      	ldr	r3, [r3, #0]
     264:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     268:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     26c:	6013      	str	r3, [r2, #0]
     26e:	4a1d      	ldr	r2, [pc, #116]	; (2e4 <uart_disable+0xb8>)
     270:	4b1c      	ldr	r3, [pc, #112]	; (2e4 <uart_disable+0xb8>)
     272:	681b      	ldr	r3, [r3, #0]
     274:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     278:	6013      	str	r3, [r2, #0]
     27a:	4b17      	ldr	r3, [pc, #92]	; (2d8 <uart_disable+0xac>)
     27c:	2200      	movs	r2, #0
     27e:	601a      	str	r2, [r3, #0]
     280:	68fb      	ldr	r3, [r7, #12]
     282:	f383 8810 	msr	PRIMASK, r3
      am_bsp_pin_disable(COM_UART_RX);
     286:	f3ef 8310 	mrs	r3, PRIMASK
     28a:	60bb      	str	r3, [r7, #8]
     28c:	b672      	cpsid	i
     28e:	4b12      	ldr	r3, [pc, #72]	; (2d8 <uart_disable+0xac>)
     290:	2273      	movs	r2, #115	; 0x73
     292:	601a      	str	r2, [r3, #0]
     294:	4a11      	ldr	r2, [pc, #68]	; (2dc <uart_disable+0xb0>)
     296:	4b11      	ldr	r3, [pc, #68]	; (2dc <uart_disable+0xb0>)
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     29e:	6013      	str	r3, [r2, #0]
     2a0:	4a0f      	ldr	r2, [pc, #60]	; (2e0 <uart_disable+0xb4>)
     2a2:	4b0f      	ldr	r3, [pc, #60]	; (2e0 <uart_disable+0xb4>)
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2aa:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     2ae:	6013      	str	r3, [r2, #0]
     2b0:	4a0c      	ldr	r2, [pc, #48]	; (2e4 <uart_disable+0xb8>)
     2b2:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <uart_disable+0xb8>)
     2b4:	681b      	ldr	r3, [r3, #0]
     2b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2ba:	6013      	str	r3, [r2, #0]
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <uart_disable+0xac>)
     2be:	2200      	movs	r2, #0
     2c0:	601a      	str	r2, [r3, #0]
     2c2:	68bb      	ldr	r3, [r7, #8]
     2c4:	f383 8810 	msr	PRIMASK, r3

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable(ui32Module);
     2c8:	6878      	ldr	r0, [r7, #4]
     2ca:	f001 fd25 	bl	1d18 <am_hal_uart_clock_disable>
}
     2ce:	bf00      	nop
     2d0:	3710      	adds	r7, #16
     2d2:	46bd      	mov	sp, r7
     2d4:	bd80      	pop	{r7, pc}
     2d6:	bf00      	nop
     2d8:	40010060 	.word	0x40010060
     2dc:	40010048 	.word	0x40010048
     2e0:	40010014 	.word	0x40010014
     2e4:	400100f4 	.word	0x400100f4

000002e8 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(uint32_t ui32Module)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get(ui32Module) & AM_HAL_UART_FR_BUSY );
     2f0:	bf00      	nop
     2f2:	6878      	ldr	r0, [r7, #4]
     2f4:	f001 fd26 	bl	1d44 <am_hal_uart_flags_get>
     2f8:	4603      	mov	r3, r0
     2fa:	f003 0308 	and.w	r3, r3, #8
     2fe:	2b00      	cmp	r3, #0
     300:	d1f7      	bne.n	2f2 <uart_transmit_delay+0xa>
}
     302:	bf00      	nop
     304:	3708      	adds	r7, #8
     306:	46bd      	mov	sp, r7
     308:	bd80      	pop	{r7, pc}
     30a:	bf00      	nop

0000030c <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     30c:	b580      	push	{r7, lr}
     30e:	b094      	sub	sp, #80	; 0x50
     310:	af02      	add	r7, sp, #8
    am_util_id_t sIdDevice;

    //
    // Select a UART module to use.
    //
    uint32_t ui32Module = AM_BSP_UART_PRINT_INST;
     312:	2300      	movs	r3, #0
     314:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     316:	2000      	movs	r0, #0
     318:	f001 f904 	bl	1524 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     31c:	4828      	ldr	r0, [pc, #160]	; (3c0 <main+0xb4>)
     31e:	f001 f86b 	bl	13f8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     322:	f001 f853 	bl	13cc <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     326:	4827      	ldr	r0, [pc, #156]	; (3c4 <main+0xb8>)
     328:	f000 f9c0 	bl	6ac <am_util_stdio_printf_init>

    //
    // Configure and enable the UART.
    //
    uart_init(ui32Module);
     32c:	6c78      	ldr	r0, [r7, #68]	; 0x44
     32e:	f7ff ff17 	bl	160 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_printf("Hello World!\r\n\r\n");
     332:	4825      	ldr	r0, [pc, #148]	; (3c8 <main+0xbc>)
     334:	f001 f82c 	bl	1390 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     338:	6c78      	ldr	r0, [r7, #68]	; 0x44
     33a:	f7ff ffd5 	bl	2e8 <uart_transmit_delay>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
     33e:	1d3b      	adds	r3, r7, #4
     340:	4618      	mov	r0, r3
     342:	f000 f90d 	bl	560 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\r\n", sIdDevice.pui8VendorName);
     346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     348:	4619      	mov	r1, r3
     34a:	4820      	ldr	r0, [pc, #128]	; (3cc <main+0xc0>)
     34c:	f001 f820 	bl	1390 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     350:	6c78      	ldr	r0, [r7, #68]	; 0x44
     352:	f7ff ffc9 	bl	2e8 <uart_transmit_delay>
    am_util_stdio_printf("Device type: %s\n",
     356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     358:	4619      	mov	r1, r3
     35a:	481d      	ldr	r0, [pc, #116]	; (3d0 <main+0xc4>)
     35c:	f001 f818 	bl	1390 <am_util_stdio_printf>
         sIdDevice.pui8DeviceName);
    uart_transmit_delay(ui32Module);
     360:	6c78      	ldr	r0, [r7, #68]	; 0x44
     362:	f7ff ffc1 	bl	2e8 <uart_transmit_delay>
    am_util_stdio_printf("Device Info:\r\n\tPart number: 0x%08X\r\n"
     366:	6879      	ldr	r1, [r7, #4]
     368:	693a      	ldr	r2, [r7, #16]
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     36a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    am_util_stdio_printf("Vendor Name: %s\r\n", sIdDevice.pui8VendorName);
    uart_transmit_delay(ui32Module);
    am_util_stdio_printf("Device type: %s\n",
         sIdDevice.pui8DeviceName);
    uart_transmit_delay(ui32Module);
    am_util_stdio_printf("Device Info:\r\n\tPart number: 0x%08X\r\n"
     36e:	4618      	mov	r0, r3
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     370:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    am_util_stdio_printf("Vendor Name: %s\r\n", sIdDevice.pui8VendorName);
    uart_transmit_delay(ui32Module);
    am_util_stdio_printf("Device type: %s\n",
         sIdDevice.pui8DeviceName);
    uart_transmit_delay(ui32Module);
    am_util_stdio_printf("Device Info:\r\n\tPart number: 0x%08X\r\n"
     374:	9300      	str	r3, [sp, #0]
     376:	4603      	mov	r3, r0
     378:	4816      	ldr	r0, [pc, #88]	; (3d4 <main+0xc8>)
     37a:	f001 f809 	bl	1390 <am_util_stdio_printf>
                         "\tRevision: 0x%X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    uart_transmit_delay(ui32Module);
     37e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     380:	f7ff ffb2 	bl	2e8 <uart_transmit_delay>
    am_util_stdio_printf("\tFlash size: %d\r\n", sIdDevice.sMcuCtrlDevice.ui32FlashSize);
     384:	69fb      	ldr	r3, [r7, #28]
     386:	4619      	mov	r1, r3
     388:	4813      	ldr	r0, [pc, #76]	; (3d8 <main+0xcc>)
     38a:	f001 f801 	bl	1390 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     38e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     390:	f7ff ffaa 	bl	2e8 <uart_transmit_delay>
    am_util_stdio_printf("\tSRAM size: %d\r\n\r\n", sIdDevice.sMcuCtrlDevice.ui32SRAMSize);
     394:	6a3b      	ldr	r3, [r7, #32]
     396:	4619      	mov	r1, r3
     398:	4810      	ldr	r0, [pc, #64]	; (3dc <main+0xd0>)
     39a:	f000 fff9 	bl	1390 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     39e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     3a0:	f7ff ffa2 	bl	2e8 <uart_transmit_delay>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\r\n", COMPILER_VERSION);
     3a4:	490e      	ldr	r1, [pc, #56]	; (3e0 <main+0xd4>)
     3a6:	480f      	ldr	r0, [pc, #60]	; (3e4 <main+0xd8>)
     3a8:	f000 fff2 	bl	1390 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     3ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
     3ae:	f7ff ff9b 	bl	2e8 <uart_transmit_delay>

    //
    // We are done printing.
    // Disable the UART and interrupts
    //
    uart_disable(ui32Module);
     3b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
     3b4:	f7ff ff3a 	bl	22c <uart_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     3b8:	2001      	movs	r0, #1
     3ba:	f001 fb89 	bl	1ad0 <am_hal_sysctrl_sleep>
    }
     3be:	e7fb      	b.n	3b8 <main+0xac>
     3c0:	00001fa4 	.word	0x00001fa4
     3c4:	000013f1 	.word	0x000013f1
     3c8:	00001e78 	.word	0x00001e78
     3cc:	00001e8c 	.word	0x00001e8c
     3d0:	00001ea0 	.word	0x00001ea0
     3d4:	00001eb4 	.word	0x00001eb4
     3d8:	00001ef4 	.word	0x00001ef4
     3dc:	00001f08 	.word	0x00001f08
     3e0:	00001f1c 	.word	0x00001f1c
     3e4:	00001f64 	.word	0x00001f64

000003e8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     3e8:	4811      	ldr	r0, [pc, #68]	; (430 <zero_loop+0x12>)
     3ea:	4912      	ldr	r1, [pc, #72]	; (434 <zero_loop+0x16>)
     3ec:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     3ee:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     3f2:	4811      	ldr	r0, [pc, #68]	; (438 <zero_loop+0x1a>)
     3f4:	6801      	ldr	r1, [r0, #0]
     3f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3fa:	6001      	str	r1, [r0, #0]
     3fc:	f3bf 8f4f 	dsb	sy
     400:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     404:	480d      	ldr	r0, [pc, #52]	; (43c <zero_loop+0x1e>)
     406:	490e      	ldr	r1, [pc, #56]	; (440 <zero_loop+0x22>)
     408:	4a0e      	ldr	r2, [pc, #56]	; (444 <zero_loop+0x26>)

0000040a <copy_loop>:
     40a:	f850 3b04 	ldr.w	r3, [r0], #4
     40e:	f841 3b04 	str.w	r3, [r1], #4
     412:	4291      	cmp	r1, r2
     414:	dbf9      	blt.n	40a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     416:	480c      	ldr	r0, [pc, #48]	; (448 <zero_loop+0x2a>)
     418:	490c      	ldr	r1, [pc, #48]	; (44c <zero_loop+0x2e>)
     41a:	f04f 0200 	mov.w	r2, #0

0000041e <zero_loop>:
     41e:	4288      	cmp	r0, r1
     420:	bfb8      	it	lt
     422:	f840 2b04 	strlt.w	r2, [r0], #4
     426:	dbfa      	blt.n	41e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     428:	f7ff ff70 	bl	30c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     42c:	be00      	bkpt	0x0000
}
     42e:	bf00      	nop
     430:	e000ed08 	.word	0xe000ed08
     434:	00000000 	.word	0x00000000
     438:	e000ed88 	.word	0xe000ed88
     43c:	0000213c 	.word	0x0000213c
     440:	10001000 	.word	0x10001000
     444:	10001064 	.word	0x10001064
     448:	10001064 	.word	0x10001064
     44c:	10001174 	.word	0x10001174

00000450 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     450:	b480      	push	{r7}
     452:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     454:	e7fe      	b.n	454 <am_nmi_isr+0x4>
     456:	bf00      	nop

00000458 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     458:	b480      	push	{r7}
     45a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     45c:	e7fe      	b.n	45c <am_adc_isr+0x4>
     45e:	bf00      	nop

00000460 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     460:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     462:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     464:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     466:	f000 f809 	bl	47c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     46a:	bd01      	pop	{r0, pc}
}
     46c:	bf00      	nop
     46e:	4618      	mov	r0, r3

00000470 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     470:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     472:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     474:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     476:	4770      	bx	lr
}
     478:	bf00      	nop
     47a:	4618      	mov	r0, r3

0000047c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     47c:	b580      	push	{r7, lr}
     47e:	b096      	sub	sp, #88	; 0x58
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     484:	f107 030c 	add.w	r3, r7, #12
     488:	2200      	movs	r2, #0
     48a:	601a      	str	r2, [r3, #0]
     48c:	605a      	str	r2, [r3, #4]
     48e:	609a      	str	r2, [r3, #8]
     490:	60da      	str	r2, [r3, #12]
     492:	611a      	str	r2, [r3, #16]
     494:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     496:	2300      	movs	r3, #0
     498:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     49c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     49e:	4b2e      	ldr	r3, [pc, #184]	; (558 <am_util_faultisr_collect_data+0xdc>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4a6:	b2db      	uxtb	r3, r3
     4a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4ae:	0a1b      	lsrs	r3, r3, #8
     4b0:	b2db      	uxtb	r3, r3
     4b2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4b8:	0c1b      	lsrs	r3, r3, #16
     4ba:	b29b      	uxth	r3, r3
     4bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     4c0:	4b26      	ldr	r3, [pc, #152]	; (55c <am_util_faultisr_collect_data+0xe0>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     4c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     4ca:	b2db      	uxtb	r3, r3
     4cc:	f003 0302 	and.w	r3, r3, #2
     4d0:	2b00      	cmp	r3, #0
     4d2:	d005      	beq.n	4e0 <am_util_faultisr_collect_data+0x64>
     4d4:	6879      	ldr	r1, [r7, #4]
     4d6:	2006      	movs	r0, #6
     4d8:	f7ff ffca 	bl	470 <getStackedReg>
     4dc:	4603      	mov	r3, r0
     4de:	e001      	b.n	4e4 <am_util_faultisr_collect_data+0x68>
     4e0:	f04f 33ff 	mov.w	r3, #4294967295
     4e4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     4e6:	6879      	ldr	r1, [r7, #4]
     4e8:	2000      	movs	r0, #0
     4ea:	f7ff ffc1 	bl	470 <getStackedReg>
     4ee:	4603      	mov	r3, r0
     4f0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     4f2:	6879      	ldr	r1, [r7, #4]
     4f4:	2001      	movs	r0, #1
     4f6:	f7ff ffbb 	bl	470 <getStackedReg>
     4fa:	4603      	mov	r3, r0
     4fc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     4fe:	6879      	ldr	r1, [r7, #4]
     500:	2002      	movs	r0, #2
     502:	f7ff ffb5 	bl	470 <getStackedReg>
     506:	4603      	mov	r3, r0
     508:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     50a:	6879      	ldr	r1, [r7, #4]
     50c:	2003      	movs	r0, #3
     50e:	f7ff ffaf 	bl	470 <getStackedReg>
     512:	4603      	mov	r3, r0
     514:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     516:	6879      	ldr	r1, [r7, #4]
     518:	2004      	movs	r0, #4
     51a:	f7ff ffa9 	bl	470 <getStackedReg>
     51e:	4603      	mov	r3, r0
     520:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     522:	6879      	ldr	r1, [r7, #4]
     524:	2005      	movs	r0, #5
     526:	f7ff ffa3 	bl	470 <getStackedReg>
     52a:	4603      	mov	r3, r0
     52c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     52e:	6879      	ldr	r1, [r7, #4]
     530:	2006      	movs	r0, #6
     532:	f7ff ff9d 	bl	470 <getStackedReg>
     536:	4603      	mov	r3, r0
     538:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     53a:	6879      	ldr	r1, [r7, #4]
     53c:	2007      	movs	r0, #7
     53e:	f7ff ff97 	bl	470 <getStackedReg>
     542:	4603      	mov	r3, r0
     544:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     546:	f107 030c 	add.w	r3, r7, #12
     54a:	4618      	mov	r0, r3
     54c:	f001 f8be 	bl	16cc <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     550:	2300      	movs	r3, #0
     552:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     554:	e7fe      	b.n	554 <am_util_faultisr_collect_data+0xd8>
     556:	bf00      	nop
     558:	e000ed28 	.word	0xe000ed28
     55c:	e000ed38 	.word	0xe000ed38

00000560 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
    uint32_t ux, ui32PN;

    //
    // Go get all the device (hardware) info from the HAL
    //
    am_hal_mcuctrl_device_info_get(&psIDDevice->sMcuCtrlDevice);
     568:	687b      	ldr	r3, [r7, #4]
     56a:	4618      	mov	r0, r3
     56c:	f001 f836 	bl	15dc <am_hal_mcuctrl_device_info_get>

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
     570:	687b      	ldr	r3, [r7, #4]
     572:	681b      	ldr	r3, [r3, #0]
     574:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     578:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     57e:	4a44      	ldr	r2, [pc, #272]	; (690 <am_util_id_device+0x130>)
     580:	4293      	cmp	r3, r2
     582:	d10e      	bne.n	5a2 <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     584:	687b      	ldr	r3, [r7, #4]
     586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     588:	2b9b      	cmp	r3, #155	; 0x9b
     58a:	d10a      	bne.n	5a2 <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	6a1b      	ldr	r3, [r3, #32]
     590:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     594:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
     598:	d003      	beq.n	5a2 <am_util_id_device+0x42>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	4a3d      	ldr	r2, [pc, #244]	; (694 <am_util_id_device+0x134>)
     59e:	635a      	str	r2, [r3, #52]	; 0x34
     5a0:	e002      	b.n	5a8 <am_util_id_device+0x48>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	4a3c      	ldr	r2, [pc, #240]	; (698 <am_util_id_device+0x138>)
     5a6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	691b      	ldr	r3, [r3, #16]
     5ac:	4a3b      	ldr	r2, [pc, #236]	; (69c <am_util_id_device+0x13c>)
     5ae:	4293      	cmp	r3, r2
     5b0:	d102      	bne.n	5b8 <am_util_id_device+0x58>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	4a37      	ldr	r2, [pc, #220]	; (694 <am_util_id_device+0x134>)
     5b6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	6a1b      	ldr	r3, [r3, #32]
     5bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     5c0:	2be0      	cmp	r3, #224	; 0xe0
     5c2:	d126      	bne.n	612 <am_util_id_device+0xb2>
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     5ca:	d122      	bne.n	612 <am_util_id_device+0xb2>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	2201      	movs	r2, #1
     5d0:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	4a32      	ldr	r2, [pc, #200]	; (6a0 <am_util_id_device+0x140>)
     5d6:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	68db      	ldr	r3, [r3, #12]
     5dc:	091b      	lsrs	r3, r3, #4
     5de:	f003 030f 	and.w	r3, r3, #15
     5e2:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     5e4:	68bb      	ldr	r3, [r7, #8]
     5e6:	b2db      	uxtb	r3, r3
     5e8:	3340      	adds	r3, #64	; 0x40
     5ea:	b2da      	uxtb	r2, r3
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	68db      	ldr	r3, [r3, #12]
     5f6:	f003 030f 	and.w	r3, r3, #15
     5fa:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     5fc:	68bb      	ldr	r3, [r7, #8]
     5fe:	b2db      	uxtb	r3, r3
     600:	3330      	adds	r3, #48	; 0x30
     602:	b2da      	uxtb	r2, r3
     604:	687b      	ldr	r3, [r7, #4]
     606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	4a21      	ldr	r2, [pc, #132]	; (694 <am_util_id_device+0x134>)
     60e:	635a      	str	r2, [r3, #52]	; 0x34
     610:	e037      	b.n	682 <am_util_id_device+0x122>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
     612:	687b      	ldr	r3, [r7, #4]
     614:	6a1b      	ldr	r3, [r3, #32]
     616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     61a:	2bd0      	cmp	r3, #208	; 0xd0
     61c:	d123      	bne.n	666 <am_util_id_device+0x106>
     61e:	68fb      	ldr	r3, [r7, #12]
     620:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
     624:	d11f      	bne.n	666 <am_util_id_device+0x106>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
     626:	687b      	ldr	r3, [r7, #4]
     628:	2202      	movs	r2, #2
     62a:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4a1d      	ldr	r2, [pc, #116]	; (6a4 <am_util_id_device+0x144>)
     630:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     632:	687b      	ldr	r3, [r7, #4]
     634:	68db      	ldr	r3, [r3, #12]
     636:	091b      	lsrs	r3, r3, #4
     638:	f003 030f 	and.w	r3, r3, #15
     63c:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     63e:	68bb      	ldr	r3, [r7, #8]
     640:	b2db      	uxtb	r3, r3
     642:	3340      	adds	r3, #64	; 0x40
     644:	b2da      	uxtb	r2, r3
     646:	687b      	ldr	r3, [r7, #4]
     648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	68db      	ldr	r3, [r3, #12]
     650:	f003 030f 	and.w	r3, r3, #15
     654:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     656:	68bb      	ldr	r3, [r7, #8]
     658:	b2db      	uxtb	r3, r3
     65a:	3330      	adds	r3, #48	; 0x30
     65c:	b2da      	uxtb	r2, r3
     65e:	687b      	ldr	r3, [r7, #4]
     660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     664:	e00d      	b.n	682 <am_util_id_device+0x122>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
     666:	687b      	ldr	r3, [r7, #4]
     668:	2200      	movs	r2, #0
     66a:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	4a0e      	ldr	r2, [pc, #56]	; (6a8 <am_util_id_device+0x148>)
     670:	639a      	str	r2, [r3, #56]	; 0x38
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
     672:	687b      	ldr	r3, [r7, #4]
     674:	223f      	movs	r2, #63	; 0x3f
     676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2220      	movs	r2, #32
     67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }

    return psIDDevice->ui32Device;
     682:	687b      	ldr	r3, [r7, #4]
     684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
     686:	4618      	mov	r0, r3
     688:	3710      	adds	r7, #16
     68a:	46bd      	mov	sp, r7
     68c:	bd80      	pop	{r7, pc}
     68e:	bf00      	nop
     690:	b105100d 	.word	0xb105100d
     694:	00001f84 	.word	0x00001f84
     698:	00001f8c 	.word	0x00001f8c
     69c:	414d4251 	.word	0x414d4251
     6a0:	00001f74 	.word	0x00001f74
     6a4:	00001f7c 	.word	0x00001f7c
     6a8:	00001f94 	.word	0x00001f94

000006ac <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     6ac:	b480      	push	{r7}
     6ae:	b083      	sub	sp, #12
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <am_util_stdio_printf_init+0x1c>)
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	6013      	str	r3, [r2, #0]
}
     6ba:	bf00      	nop
     6bc:	370c      	adds	r7, #12
     6be:	46bd      	mov	sp, r7
     6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	10001170 	.word	0x10001170

000006cc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     6cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     6d0:	b096      	sub	sp, #88	; 0x58
     6d2:	af00      	add	r7, sp, #0
     6d4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     6d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6dc:	0025      	movs	r5, r4
     6de:	2600      	movs	r6, #0
     6e0:	ea55 0306 	orrs.w	r3, r5, r6
     6e4:	f000 809e 	beq.w	824 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     6e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6ec:	0862      	lsrs	r2, r4, #1
     6ee:	ea4f 0133 	mov.w	r1, r3, rrx
     6f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     6fa:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     6fe:	ea4f 0994 	mov.w	r9, r4, lsr #2
     702:	eb11 0308 	adds.w	r3, r1, r8
     706:	eb42 0409 	adc.w	r4, r2, r9
     70a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     70e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     712:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     716:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     71a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     71e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     722:	eb13 030a 	adds.w	r3, r3, sl
     726:	eb44 040b 	adc.w	r4, r4, fp
     72a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     72e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     732:	0a1a      	lsrs	r2, r3, #8
     734:	62ba      	str	r2, [r7, #40]	; 0x28
     736:	6aba      	ldr	r2, [r7, #40]	; 0x28
     738:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     73c:	62ba      	str	r2, [r7, #40]	; 0x28
     73e:	0a23      	lsrs	r3, r4, #8
     740:	62fb      	str	r3, [r7, #44]	; 0x2c
     742:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     746:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     74a:	18c9      	adds	r1, r1, r3
     74c:	eb42 0204 	adc.w	r2, r2, r4
     750:	460b      	mov	r3, r1
     752:	4614      	mov	r4, r2
     754:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     758:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     75c:	0c1a      	lsrs	r2, r3, #16
     75e:	623a      	str	r2, [r7, #32]
     760:	6a3a      	ldr	r2, [r7, #32]
     762:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     766:	623a      	str	r2, [r7, #32]
     768:	0c23      	lsrs	r3, r4, #16
     76a:	627b      	str	r3, [r7, #36]	; 0x24
     76c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     770:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     774:	18c9      	adds	r1, r1, r3
     776:	eb42 0204 	adc.w	r2, r2, r4
     77a:	460b      	mov	r3, r1
     77c:	4614      	mov	r4, r2
     77e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     782:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     786:	0023      	movs	r3, r4
     788:	603b      	str	r3, [r7, #0]
     78a:	2300      	movs	r3, #0
     78c:	607b      	str	r3, [r7, #4]
     78e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     792:	e897 0006 	ldmia.w	r7, {r1, r2}
     796:	18c9      	adds	r1, r1, r3
     798:	eb42 0204 	adc.w	r2, r2, r4
     79c:	460b      	mov	r3, r1
     79e:	4614      	mov	r4, r2
     7a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     7a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7a8:	08da      	lsrs	r2, r3, #3
     7aa:	613a      	str	r2, [r7, #16]
     7ac:	693a      	ldr	r2, [r7, #16]
     7ae:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     7b2:	613a      	str	r2, [r7, #16]
     7b4:	08e3      	lsrs	r3, r4, #3
     7b6:	617b      	str	r3, [r7, #20]
     7b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     7bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     7c0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7c4:	18db      	adds	r3, r3, r3
     7c6:	eb44 0404 	adc.w	r4, r4, r4
     7ca:	00a2      	lsls	r2, r4, #2
     7cc:	60fa      	str	r2, [r7, #12]
     7ce:	68fa      	ldr	r2, [r7, #12]
     7d0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     7d4:	60fa      	str	r2, [r7, #12]
     7d6:	009a      	lsls	r2, r3, #2
     7d8:	60ba      	str	r2, [r7, #8]
     7da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     7de:	18c9      	adds	r1, r1, r3
     7e0:	eb42 0204 	adc.w	r2, r2, r4
     7e4:	460b      	mov	r3, r1
     7e6:	4614      	mov	r4, r2
     7e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     7ec:	1acb      	subs	r3, r1, r3
     7ee:	eb62 0404 	sbc.w	r4, r2, r4
     7f2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     7f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     7fa:	3306      	adds	r3, #6
     7fc:	f144 0400 	adc.w	r4, r4, #0
     800:	091a      	lsrs	r2, r3, #4
     802:	61ba      	str	r2, [r7, #24]
     804:	69ba      	ldr	r2, [r7, #24]
     806:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     80a:	61ba      	str	r2, [r7, #24]
     80c:	0923      	lsrs	r3, r4, #4
     80e:	61fb      	str	r3, [r7, #28]
     810:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     814:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     818:	18c9      	adds	r1, r1, r3
     81a:	eb42 0204 	adc.w	r2, r2, r4
     81e:	460b      	mov	r3, r1
     820:	4614      	mov	r4, r2
     822:	e029      	b.n	878 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     826:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     82a:	085a      	lsrs	r2, r3, #1
     82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     82e:	089b      	lsrs	r3, r3, #2
     830:	4413      	add	r3, r2
     832:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     836:	091b      	lsrs	r3, r3, #4
     838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     83a:	4413      	add	r3, r2
     83c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     840:	0a1b      	lsrs	r3, r3, #8
     842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     844:	4413      	add	r3, r2
     846:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     84a:	0c1b      	lsrs	r3, r3, #16
     84c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     84e:	4413      	add	r3, r2
     850:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     854:	08db      	lsrs	r3, r3, #3
     856:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     85a:	4613      	mov	r3, r2
     85c:	009b      	lsls	r3, r3, #2
     85e:	4413      	add	r3, r2
     860:	005b      	lsls	r3, r3, #1
     862:	461a      	mov	r2, r3
     864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     866:	1a9b      	subs	r3, r3, r2
     868:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     86c:	3306      	adds	r3, #6
     86e:	091a      	lsrs	r2, r3, #4
     870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     872:	4413      	add	r3, r2
     874:	f04f 0400 	mov.w	r4, #0
    }
}
     878:	4618      	mov	r0, r3
     87a:	4621      	mov	r1, r4
     87c:	3758      	adds	r7, #88	; 0x58
     87e:	46bd      	mov	sp, r7
     880:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     884:	4770      	bx	lr
     886:	bf00      	nop

00000888 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     888:	b590      	push	{r4, r7, lr}
     88a:	b085      	sub	sp, #20
     88c:	af00      	add	r7, sp, #0
     88e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     892:	683a      	ldr	r2, [r7, #0]
     894:	687b      	ldr	r3, [r7, #4]
     896:	4313      	orrs	r3, r2
     898:	2b00      	cmp	r3, #0
     89a:	bf0c      	ite	eq
     89c:	2301      	moveq	r3, #1
     89e:	2300      	movne	r3, #0
     8a0:	b2db      	uxtb	r3, r3
     8a2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     8a4:	e008      	b.n	8b8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     8a6:	e9d7 0100 	ldrd	r0, r1, [r7]
     8aa:	f7ff ff0f 	bl	6cc <divu64_10>
     8ae:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	3301      	adds	r3, #1
     8b6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     8b8:	e897 0018 	ldmia.w	r7, {r3, r4}
     8bc:	4323      	orrs	r3, r4
     8be:	d1f2      	bne.n	8a6 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     8c0:	68fb      	ldr	r3, [r7, #12]
}
     8c2:	4618      	mov	r0, r3
     8c4:	3714      	adds	r7, #20
     8c6:	46bd      	mov	sp, r7
     8c8:	bd90      	pop	{r4, r7, pc}
     8ca:	bf00      	nop

000008cc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     8cc:	b590      	push	{r4, r7, lr}
     8ce:	b083      	sub	sp, #12
     8d0:	af00      	add	r7, sp, #0
     8d2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     8d6:	e897 0018 	ldmia.w	r7, {r3, r4}
     8da:	2b00      	cmp	r3, #0
     8dc:	f174 0300 	sbcs.w	r3, r4, #0
     8e0:	da06      	bge.n	8f0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     8e2:	e897 0018 	ldmia.w	r7, {r3, r4}
     8e6:	425b      	negs	r3, r3
     8e8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     8ec:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     8f0:	e897 0018 	ldmia.w	r7, {r3, r4}
     8f4:	4618      	mov	r0, r3
     8f6:	4621      	mov	r1, r4
     8f8:	f7ff ffc6 	bl	888 <ndigits_in_u64>
     8fc:	4603      	mov	r3, r0
}
     8fe:	4618      	mov	r0, r3
     900:	370c      	adds	r7, #12
     902:	46bd      	mov	sp, r7
     904:	bd90      	pop	{r4, r7, pc}
     906:	bf00      	nop

00000908 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     908:	b490      	push	{r4, r7}
     90a:	b084      	sub	sp, #16
     90c:	af00      	add	r7, sp, #0
     90e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     912:	6839      	ldr	r1, [r7, #0]
     914:	687a      	ldr	r2, [r7, #4]
     916:	430a      	orrs	r2, r1
     918:	2a00      	cmp	r2, #0
     91a:	bf0c      	ite	eq
     91c:	2201      	moveq	r2, #1
     91e:	2200      	movne	r2, #0
     920:	b2d2      	uxtb	r2, r2
     922:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     924:	e00a      	b.n	93c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     926:	e897 0006 	ldmia.w	r7, {r1, r2}
     92a:	090b      	lsrs	r3, r1, #4
     92c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     930:	0914      	lsrs	r4, r2, #4
     932:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     936:	68fa      	ldr	r2, [r7, #12]
     938:	3201      	adds	r2, #1
     93a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     93c:	e897 0006 	ldmia.w	r7, {r1, r2}
     940:	430a      	orrs	r2, r1
     942:	d1f0      	bne.n	926 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     944:	68fb      	ldr	r3, [r7, #12]
}
     946:	4618      	mov	r0, r3
     948:	3710      	adds	r7, #16
     94a:	46bd      	mov	sp, r7
     94c:	bc90      	pop	{r4, r7}
     94e:	4770      	bx	lr

00000950 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     950:	b480      	push	{r7}
     952:	b087      	sub	sp, #28
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
     958:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     95a:	2300      	movs	r3, #0
     95c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     95e:	2300      	movs	r3, #0
     960:	613b      	str	r3, [r7, #16]
     962:	2300      	movs	r3, #0
     964:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     966:	687b      	ldr	r3, [r7, #4]
     968:	781b      	ldrb	r3, [r3, #0]
     96a:	2b2d      	cmp	r3, #45	; 0x2d
     96c:	d11b      	bne.n	9a6 <decstr_to_int+0x56>
    {
        bNeg = true;
     96e:	2301      	movs	r3, #1
     970:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     972:	687b      	ldr	r3, [r7, #4]
     974:	3301      	adds	r3, #1
     976:	607b      	str	r3, [r7, #4]
        uCnt++;
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	3301      	adds	r3, #1
     97c:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     97e:	e012      	b.n	9a6 <decstr_to_int+0x56>
    {
        ++uCnt;
     980:	68fb      	ldr	r3, [r7, #12]
     982:	3301      	adds	r3, #1
     984:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     986:	693a      	ldr	r2, [r7, #16]
     988:	4613      	mov	r3, r2
     98a:	009b      	lsls	r3, r3, #2
     98c:	4413      	add	r3, r2
     98e:	005b      	lsls	r3, r3, #1
     990:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     992:	687b      	ldr	r3, [r7, #4]
     994:	781b      	ldrb	r3, [r3, #0]
     996:	461a      	mov	r2, r3
     998:	693b      	ldr	r3, [r7, #16]
     99a:	4413      	add	r3, r2
     99c:	3b30      	subs	r3, #48	; 0x30
     99e:	613b      	str	r3, [r7, #16]
        pcStr++;
     9a0:	687b      	ldr	r3, [r7, #4]
     9a2:	3301      	adds	r3, #1
     9a4:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	2b2f      	cmp	r3, #47	; 0x2f
     9ac:	d903      	bls.n	9b6 <decstr_to_int+0x66>
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	2b39      	cmp	r3, #57	; 0x39
     9b4:	d9e4      	bls.n	980 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	2b00      	cmp	r3, #0
     9ba:	d002      	beq.n	9c2 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	68fa      	ldr	r2, [r7, #12]
     9c0:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     9c2:	7dfb      	ldrb	r3, [r7, #23]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d002      	beq.n	9ce <decstr_to_int+0x7e>
     9c8:	693b      	ldr	r3, [r7, #16]
     9ca:	425b      	negs	r3, r3
     9cc:	e000      	b.n	9d0 <decstr_to_int+0x80>
     9ce:	693b      	ldr	r3, [r7, #16]
}
     9d0:	4618      	mov	r0, r3
     9d2:	371c      	adds	r7, #28
     9d4:	46bd      	mov	sp, r7
     9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9da:	4770      	bx	lr

000009dc <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     9dc:	b590      	push	{r4, r7, lr}
     9de:	b091      	sub	sp, #68	; 0x44
     9e0:	af00      	add	r7, sp, #0
     9e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9e6:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     9e8:	2300      	movs	r3, #0
     9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
     9ec:	2300      	movs	r3, #0
     9ee:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     9f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     9f4:	f7ff fe6a 	bl	6cc <divu64_10>
     9f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     9fc:	68b9      	ldr	r1, [r7, #8]
     9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a00:	4613      	mov	r3, r2
     a02:	009b      	lsls	r3, r3, #2
     a04:	4413      	add	r3, r2
     a06:	005b      	lsls	r3, r3, #1
     a08:	1acb      	subs	r3, r1, r3
     a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a0e:	1c5a      	adds	r2, r3, #1
     a10:	63fa      	str	r2, [r7, #60]	; 0x3c
     a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a14:	b2d2      	uxtb	r2, r2
     a16:	3230      	adds	r2, #48	; 0x30
     a18:	b2d2      	uxtb	r2, r2
     a1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     a1e:	440b      	add	r3, r1
     a20:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     a24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a28:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     a2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     a30:	4323      	orrs	r3, r4
     a32:	d1dd      	bne.n	9f0 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a36:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d011      	beq.n	a62 <uint64_to_str+0x86>
    {
        while ( ix-- )
     a3e:	e008      	b.n	a52 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	1c5a      	adds	r2, r3, #1
     a44:	607a      	str	r2, [r7, #4]
     a46:	f107 0110 	add.w	r1, r7, #16
     a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a4c:	440a      	add	r2, r1
     a4e:	7812      	ldrb	r2, [r2, #0]
     a50:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a54:	1e5a      	subs	r2, r3, #1
     a56:	63fa      	str	r2, [r7, #60]	; 0x3c
     a58:	2b00      	cmp	r3, #0
     a5a:	d1f1      	bne.n	a40 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     a5c:	687b      	ldr	r3, [r7, #4]
     a5e:	2200      	movs	r2, #0
     a60:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     a64:	4618      	mov	r0, r3
     a66:	3744      	adds	r7, #68	; 0x44
     a68:	46bd      	mov	sp, r7
     a6a:	bd90      	pop	{r4, r7, pc}

00000a6c <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     a6c:	b4b0      	push	{r4, r5, r7}
     a6e:	b08d      	sub	sp, #52	; 0x34
     a70:	af00      	add	r7, sp, #0
     a72:	e9c7 0102 	strd	r0, r1, [r7, #8]
     a76:	607a      	str	r2, [r7, #4]
     a78:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     a7a:	2300      	movs	r3, #0
     a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a82:	4313      	orrs	r3, r2
     a84:	d131      	bne.n	aea <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a88:	1c5a      	adds	r2, r3, #1
     a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
     a8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a90:	4413      	add	r3, r2
     a92:	2230      	movs	r2, #48	; 0x30
     a94:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     a98:	e027      	b.n	aea <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     a9a:	7a3b      	ldrb	r3, [r7, #8]
     a9c:	f003 030f 	and.w	r3, r3, #15
     aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     aa8:	2b09      	cmp	r3, #9
     aaa:	d90a      	bls.n	ac2 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     aac:	78fb      	ldrb	r3, [r7, #3]
     aae:	2b00      	cmp	r3, #0
     ab0:	d001      	beq.n	ab6 <uint64_to_hexstr+0x4a>
     ab2:	2227      	movs	r2, #39	; 0x27
     ab4:	e000      	b.n	ab8 <uint64_to_hexstr+0x4c>
     ab6:	2207      	movs	r2, #7
     ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     abc:	4413      	add	r3, r2
     abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ac4:	1c5a      	adds	r2, r3, #1
     ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
     ac8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     acc:	3230      	adds	r2, #48	; 0x30
     ace:	b2d2      	uxtb	r2, r2
     ad0:	f107 0130 	add.w	r1, r7, #48	; 0x30
     ad4:	440b      	add	r3, r1
     ad6:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ade:	0914      	lsrs	r4, r2, #4
     ae0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     ae4:	091d      	lsrs	r5, r3, #4
     ae6:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     aee:	4313      	orrs	r3, r2
     af0:	d1d3      	bne.n	a9a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af4:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	2b00      	cmp	r3, #0
     afa:	d011      	beq.n	b20 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     afc:	e008      	b.n	b10 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	1c5a      	adds	r2, r3, #1
     b02:	607a      	str	r2, [r7, #4]
     b04:	f107 0110 	add.w	r1, r7, #16
     b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b0a:	440a      	add	r2, r1
     b0c:	7812      	ldrb	r2, [r2, #0]
     b0e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b12:	1e5a      	subs	r2, r3, #1
     b14:	62fa      	str	r2, [r7, #44]	; 0x2c
     b16:	2b00      	cmp	r3, #0
     b18:	d1f1      	bne.n	afe <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	2200      	movs	r2, #0
     b1e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     b22:	4618      	mov	r0, r3
     b24:	3734      	adds	r7, #52	; 0x34
     b26:	46bd      	mov	sp, r7
     b28:	bcb0      	pop	{r4, r5, r7}
     b2a:	4770      	bx	lr

00000b2c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     b2c:	b480      	push	{r7}
     b2e:	b085      	sub	sp, #20
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     b34:	2300      	movs	r3, #0
     b36:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d104      	bne.n	b48 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	e009      	b.n	b56 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	3301      	adds	r3, #1
     b46:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	1c5a      	adds	r2, r3, #1
     b4c:	607a      	str	r2, [r7, #4]
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	2b00      	cmp	r3, #0
     b52:	d1f6      	bne.n	b42 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     b54:	68fb      	ldr	r3, [r7, #12]
}
     b56:	4618      	mov	r0, r3
     b58:	3714      	adds	r7, #20
     b5a:	46bd      	mov	sp, r7
     b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b60:	4770      	bx	lr
     b62:	bf00      	nop

00000b64 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     b64:	b480      	push	{r7}
     b66:	b087      	sub	sp, #28
     b68:	af00      	add	r7, sp, #0
     b6a:	60f8      	str	r0, [r7, #12]
     b6c:	460b      	mov	r3, r1
     b6e:	607a      	str	r2, [r7, #4]
     b70:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     b72:	2300      	movs	r3, #0
     b74:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	2b00      	cmp	r3, #0
     b7a:	dc0c      	bgt.n	b96 <padbuffer+0x32>
    {
        return i32Cnt;
     b7c:	697b      	ldr	r3, [r7, #20]
     b7e:	e010      	b.n	ba2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	2b00      	cmp	r3, #0
     b84:	d004      	beq.n	b90 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     b86:	68fb      	ldr	r3, [r7, #12]
     b88:	1c5a      	adds	r2, r3, #1
     b8a:	60fa      	str	r2, [r7, #12]
     b8c:	7afa      	ldrb	r2, [r7, #11]
     b8e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     b90:	697b      	ldr	r3, [r7, #20]
     b92:	3301      	adds	r3, #1
     b94:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	1e5a      	subs	r2, r3, #1
     b9a:	607a      	str	r2, [r7, #4]
     b9c:	2b00      	cmp	r3, #0
     b9e:	d1ef      	bne.n	b80 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     ba0:	697b      	ldr	r3, [r7, #20]
}
     ba2:	4618      	mov	r0, r3
     ba4:	371c      	adds	r7, #28
     ba6:	46bd      	mov	sp, r7
     ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bac:	4770      	bx	lr
     bae:	bf00      	nop

00000bb0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     bb0:	b590      	push	{r4, r7, lr}
     bb2:	b08f      	sub	sp, #60	; 0x3c
     bb4:	af00      	add	r7, sp, #0
     bb6:	60f8      	str	r0, [r7, #12]
     bb8:	60b9      	str	r1, [r7, #8]
     bba:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     bbc:	68bb      	ldr	r3, [r7, #8]
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bc4:	2b03      	cmp	r3, #3
     bc6:	dc02      	bgt.n	bce <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     bc8:	f06f 0302 	mvn.w	r3, #2
     bcc:	e0d4      	b.n	d78 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     bce:	edd7 7a03 	vldr	s15, [r7, #12]
     bd2:	eef5 7a40 	vcmp.f32	s15, #0.0
     bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bda:	d104      	bne.n	be6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	4a68      	ldr	r2, [pc, #416]	; (d80 <ftoa+0x1d0>)
     be0:	601a      	str	r2, [r3, #0]
        return 3;
     be2:	2303      	movs	r3, #3
     be4:	e0c8      	b.n	d78 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     be6:	68bb      	ldr	r3, [r7, #8]
     be8:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     bea:	68fb      	ldr	r3, [r7, #12]
     bec:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     bee:	697b      	ldr	r3, [r7, #20]
     bf0:	15db      	asrs	r3, r3, #23
     bf2:	b2db      	uxtb	r3, r3
     bf4:	3b7f      	subs	r3, #127	; 0x7f
     bf6:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     bf8:	697b      	ldr	r3, [r7, #20]
     bfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
     bfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     c02:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     c04:	2300      	movs	r3, #0
     c06:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     c08:	2300      	movs	r3, #0
     c0a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     c0c:	6a3b      	ldr	r3, [r7, #32]
     c0e:	2b1e      	cmp	r3, #30
     c10:	dd02      	ble.n	c18 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     c12:	f06f 0301 	mvn.w	r3, #1
     c16:	e0af      	b.n	d78 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     c18:	6a3b      	ldr	r3, [r7, #32]
     c1a:	f113 0f17 	cmn.w	r3, #23
     c1e:	da02      	bge.n	c26 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     c20:	f04f 33ff 	mov.w	r3, #4294967295
     c24:	e0a8      	b.n	d78 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     c26:	6a3b      	ldr	r3, [r7, #32]
     c28:	2b16      	cmp	r3, #22
     c2a:	dd06      	ble.n	c3a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     c2c:	6a3b      	ldr	r3, [r7, #32]
     c2e:	3b17      	subs	r3, #23
     c30:	69fa      	ldr	r2, [r7, #28]
     c32:	fa02 f303 	lsl.w	r3, r2, r3
     c36:	637b      	str	r3, [r7, #52]	; 0x34
     c38:	e01a      	b.n	c70 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     c3a:	6a3b      	ldr	r3, [r7, #32]
     c3c:	2b00      	cmp	r3, #0
     c3e:	db0f      	blt.n	c60 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     c40:	6a3b      	ldr	r3, [r7, #32]
     c42:	f1c3 0317 	rsb	r3, r3, #23
     c46:	69fa      	ldr	r2, [r7, #28]
     c48:	fa42 f303 	asr.w	r3, r2, r3
     c4c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     c4e:	6a3b      	ldr	r3, [r7, #32]
     c50:	3301      	adds	r3, #1
     c52:	69fa      	ldr	r2, [r7, #28]
     c54:	fa02 f303 	lsl.w	r3, r2, r3
     c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c5c:	633b      	str	r3, [r7, #48]	; 0x30
     c5e:	e007      	b.n	c70 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     c60:	69fb      	ldr	r3, [r7, #28]
     c62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     c66:	6a3b      	ldr	r3, [r7, #32]
     c68:	43db      	mvns	r3, r3
     c6a:	fa42 f303 	asr.w	r3, r2, r3
     c6e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     c70:	697b      	ldr	r3, [r7, #20]
     c72:	2b00      	cmp	r3, #0
     c74:	da04      	bge.n	c80 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     c76:	68bb      	ldr	r3, [r7, #8]
     c78:	1c5a      	adds	r2, r3, #1
     c7a:	60ba      	str	r2, [r7, #8]
     c7c:	222d      	movs	r2, #45	; 0x2d
     c7e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c82:	2b00      	cmp	r3, #0
     c84:	d105      	bne.n	c92 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     c86:	68bb      	ldr	r3, [r7, #8]
     c88:	1c5a      	adds	r2, r3, #1
     c8a:	60ba      	str	r2, [r7, #8]
     c8c:	2230      	movs	r2, #48	; 0x30
     c8e:	701a      	strb	r2, [r3, #0]
     c90:	e021      	b.n	cd6 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c94:	2b00      	cmp	r3, #0
     c96:	dd08      	ble.n	caa <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c9e:	68ba      	ldr	r2, [r7, #8]
     ca0:	4618      	mov	r0, r3
     ca2:	4621      	mov	r1, r4
     ca4:	f7ff fe9a 	bl	9dc <uint64_to_str>
     ca8:	e011      	b.n	cce <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     caa:	68bb      	ldr	r3, [r7, #8]
     cac:	1c5a      	adds	r2, r3, #1
     cae:	60ba      	str	r2, [r7, #8]
     cb0:	222d      	movs	r2, #45	; 0x2d
     cb2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cb6:	425b      	negs	r3, r3
     cb8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     cbc:	68ba      	ldr	r2, [r7, #8]
     cbe:	4618      	mov	r0, r3
     cc0:	4621      	mov	r1, r4
     cc2:	f7ff fe8b 	bl	9dc <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     cc6:	e002      	b.n	cce <ftoa+0x11e>
        {
            pcBuf++;
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	3301      	adds	r3, #1
     ccc:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     cce:	68bb      	ldr	r3, [r7, #8]
     cd0:	781b      	ldrb	r3, [r3, #0]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d1f8      	bne.n	cc8 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     cd6:	68bb      	ldr	r3, [r7, #8]
     cd8:	1c5a      	adds	r2, r3, #1
     cda:	60ba      	str	r2, [r7, #8]
     cdc:	222e      	movs	r2, #46	; 0x2e
     cde:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ce2:	2b00      	cmp	r3, #0
     ce4:	d105      	bne.n	cf2 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	60ba      	str	r2, [r7, #8]
     cec:	2230      	movs	r2, #48	; 0x30
     cee:	701a      	strb	r2, [r3, #0]
     cf0:	e03c      	b.n	d6c <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     cf2:	68ba      	ldr	r2, [r7, #8]
     cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
     cfa:	1ad3      	subs	r3, r2, r3
     cfc:	3b01      	subs	r3, #1
     cfe:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     d00:	69ba      	ldr	r2, [r7, #24]
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	4293      	cmp	r3, r2
     d06:	bfa8      	it	ge
     d08:	4613      	movge	r3, r2
     d0a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     d0c:	2300      	movs	r3, #0
     d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
     d10:	e015      	b.n	d3e <ftoa+0x18e>
        {
            i32FracPart *= 10;
     d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d14:	4613      	mov	r3, r2
     d16:	009b      	lsls	r3, r3, #2
     d18:	4413      	add	r3, r2
     d1a:	005b      	lsls	r3, r3, #1
     d1c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     d1e:	68bb      	ldr	r3, [r7, #8]
     d20:	1c5a      	adds	r2, r3, #1
     d22:	60ba      	str	r2, [r7, #8]
     d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d26:	1612      	asrs	r2, r2, #24
     d28:	b2d2      	uxtb	r2, r2
     d2a:	3230      	adds	r2, #48	; 0x30
     d2c:	b2d2      	uxtb	r2, r2
     d2e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d36:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d3a:	3301      	adds	r3, #1
     d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
     d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d40:	69bb      	ldr	r3, [r7, #24]
     d42:	429a      	cmp	r2, r3
     d44:	dbe5      	blt.n	d12 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     d46:	68bb      	ldr	r3, [r7, #8]
     d48:	3b01      	subs	r3, #1
     d4a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d4c:	e002      	b.n	d54 <ftoa+0x1a4>
        {
            --pcBuf;
     d4e:	68bb      	ldr	r3, [r7, #8]
     d50:	3b01      	subs	r3, #1
     d52:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     d54:	68bb      	ldr	r3, [r7, #8]
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	2b30      	cmp	r3, #48	; 0x30
     d5a:	d104      	bne.n	d66 <ftoa+0x1b6>
     d5c:	68bb      	ldr	r3, [r7, #8]
     d5e:	3b01      	subs	r3, #1
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	2b2e      	cmp	r3, #46	; 0x2e
     d64:	d1f3      	bne.n	d4e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     d66:	68bb      	ldr	r3, [r7, #8]
     d68:	3301      	adds	r3, #1
     d6a:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     d6c:	68bb      	ldr	r3, [r7, #8]
     d6e:	2200      	movs	r2, #0
     d70:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     d72:	68ba      	ldr	r2, [r7, #8]
     d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d76:	1ad3      	subs	r3, r2, r3
} // ftoa()
     d78:	4618      	mov	r0, r3
     d7a:	373c      	adds	r7, #60	; 0x3c
     d7c:	46bd      	mov	sp, r7
     d7e:	bd90      	pop	{r4, r7, pc}
     d80:	00302e30 	.word	0x00302e30

00000d84 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     d84:	b590      	push	{r4, r7, lr}
     d86:	b095      	sub	sp, #84	; 0x54
     d88:	af00      	add	r7, sp, #0
     d8a:	60f8      	str	r0, [r7, #12]
     d8c:	60b9      	str	r1, [r7, #8]
     d8e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     d90:	2300      	movs	r3, #0
     d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     d94:	2300      	movs	r3, #0
     d96:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     d98:	e2e3      	b.n	1362 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     d9a:	2306      	movs	r3, #6
     d9c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	2b25      	cmp	r3, #37	; 0x25
     da4:	d01f      	beq.n	de6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	2b00      	cmp	r3, #0
     daa:	d015      	beq.n	dd8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     dac:	68bb      	ldr	r3, [r7, #8]
     dae:	781b      	ldrb	r3, [r3, #0]
     db0:	2b0a      	cmp	r3, #10
     db2:	d10b      	bne.n	dcc <am_util_stdio_vsprintf+0x48>
     db4:	4bb1      	ldr	r3, [pc, #708]	; (107c <am_util_stdio_vsprintf+0x2f8>)
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	2b00      	cmp	r3, #0
     dba:	d007      	beq.n	dcc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	1c5a      	adds	r2, r3, #1
     dc0:	60fa      	str	r2, [r7, #12]
     dc2:	220d      	movs	r2, #13
     dc4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dc8:	3301      	adds	r3, #1
     dca:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	1c5a      	adds	r2, r3, #1
     dd0:	60fa      	str	r2, [r7, #12]
     dd2:	68ba      	ldr	r2, [r7, #8]
     dd4:	7812      	ldrb	r2, [r2, #0]
     dd6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     dd8:	68bb      	ldr	r3, [r7, #8]
     dda:	3301      	adds	r3, #1
     ddc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     de0:	3301      	adds	r3, #1
     de2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     de4:	e2bd      	b.n	1362 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     de6:	68bb      	ldr	r3, [r7, #8]
     de8:	3301      	adds	r3, #1
     dea:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     dec:	2300      	movs	r3, #0
     dee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     df6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     dfa:	2320      	movs	r3, #32
     dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     e00:	68bb      	ldr	r3, [r7, #8]
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	2b30      	cmp	r3, #48	; 0x30
     e06:	d105      	bne.n	e14 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     e08:	2330      	movs	r3, #48	; 0x30
     e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     e0e:	68bb      	ldr	r3, [r7, #8]
     e10:	3301      	adds	r3, #1
     e12:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     e14:	f107 0310 	add.w	r3, r7, #16
     e18:	4619      	mov	r1, r3
     e1a:	68b8      	ldr	r0, [r7, #8]
     e1c:	f7ff fd98 	bl	950 <decstr_to_int>
     e20:	4603      	mov	r3, r0
     e22:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     e24:	693b      	ldr	r3, [r7, #16]
     e26:	68ba      	ldr	r2, [r7, #8]
     e28:	4413      	add	r3, r2
     e2a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     e2c:	68bb      	ldr	r3, [r7, #8]
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	2b73      	cmp	r3, #115	; 0x73
     e32:	d005      	beq.n	e40 <am_util_stdio_vsprintf+0xbc>
     e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e36:	2b00      	cmp	r3, #0
     e38:	da02      	bge.n	e40 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e3c:	425b      	negs	r3, r3
     e3e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     e40:	68bb      	ldr	r3, [r7, #8]
     e42:	781b      	ldrb	r3, [r3, #0]
     e44:	2b2e      	cmp	r3, #46	; 0x2e
     e46:	d10e      	bne.n	e66 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     e48:	68bb      	ldr	r3, [r7, #8]
     e4a:	3301      	adds	r3, #1
     e4c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     e4e:	f107 0310 	add.w	r3, r7, #16
     e52:	4619      	mov	r1, r3
     e54:	68b8      	ldr	r0, [r7, #8]
     e56:	f7ff fd7b 	bl	950 <decstr_to_int>
     e5a:	4603      	mov	r3, r0
     e5c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     e5e:	693b      	ldr	r3, [r7, #16]
     e60:	68ba      	ldr	r2, [r7, #8]
     e62:	4413      	add	r3, r2
     e64:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     e66:	68bb      	ldr	r3, [r7, #8]
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	2b6c      	cmp	r3, #108	; 0x6c
     e6c:	d10c      	bne.n	e88 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     e6e:	68bb      	ldr	r3, [r7, #8]
     e70:	3301      	adds	r3, #1
     e72:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e74:	68bb      	ldr	r3, [r7, #8]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	2b6c      	cmp	r3, #108	; 0x6c
     e7a:	d105      	bne.n	e88 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     e7c:	68bb      	ldr	r3, [r7, #8]
     e7e:	3301      	adds	r3, #1
     e80:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     e82:	2301      	movs	r3, #1
     e84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     e88:	68bb      	ldr	r3, [r7, #8]
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	3b46      	subs	r3, #70	; 0x46
     e8e:	2b32      	cmp	r3, #50	; 0x32
     e90:	f200 8254 	bhi.w	133c <am_util_stdio_vsprintf+0x5b8>
     e94:	a201      	add	r2, pc, #4	; (adr r2, e9c <am_util_stdio_vsprintf+0x118>)
     e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e9a:	bf00      	nop
     e9c:	000012c7 	.word	0x000012c7
     ea0:	0000133d 	.word	0x0000133d
     ea4:	0000133d 	.word	0x0000133d
     ea8:	0000133d 	.word	0x0000133d
     eac:	0000133d 	.word	0x0000133d
     eb0:	0000133d 	.word	0x0000133d
     eb4:	0000133d 	.word	0x0000133d
     eb8:	0000133d 	.word	0x0000133d
     ebc:	0000133d 	.word	0x0000133d
     ec0:	0000133d 	.word	0x0000133d
     ec4:	0000133d 	.word	0x0000133d
     ec8:	0000133d 	.word	0x0000133d
     ecc:	0000133d 	.word	0x0000133d
     ed0:	0000133d 	.word	0x0000133d
     ed4:	0000133d 	.word	0x0000133d
     ed8:	0000133d 	.word	0x0000133d
     edc:	0000133d 	.word	0x0000133d
     ee0:	0000133d 	.word	0x0000133d
     ee4:	00001063 	.word	0x00001063
     ee8:	0000133d 	.word	0x0000133d
     eec:	0000133d 	.word	0x0000133d
     ef0:	0000133d 	.word	0x0000133d
     ef4:	0000133d 	.word	0x0000133d
     ef8:	0000133d 	.word	0x0000133d
     efc:	0000133d 	.word	0x0000133d
     f00:	0000133d 	.word	0x0000133d
     f04:	0000133d 	.word	0x0000133d
     f08:	0000133d 	.word	0x0000133d
     f0c:	0000133d 	.word	0x0000133d
     f10:	00000f69 	.word	0x00000f69
     f14:	0000118f 	.word	0x0000118f
     f18:	0000133d 	.word	0x0000133d
     f1c:	000012c7 	.word	0x000012c7
     f20:	0000133d 	.word	0x0000133d
     f24:	0000133d 	.word	0x0000133d
     f28:	0000118f 	.word	0x0000118f
     f2c:	0000133d 	.word	0x0000133d
     f30:	0000133d 	.word	0x0000133d
     f34:	0000133d 	.word	0x0000133d
     f38:	0000133d 	.word	0x0000133d
     f3c:	0000133d 	.word	0x0000133d
     f40:	0000133d 	.word	0x0000133d
     f44:	0000133d 	.word	0x0000133d
     f48:	0000133d 	.word	0x0000133d
     f4c:	0000133d 	.word	0x0000133d
     f50:	00000f8f 	.word	0x00000f8f
     f54:	0000133d 	.word	0x0000133d
     f58:	000010fd 	.word	0x000010fd
     f5c:	0000133d 	.word	0x0000133d
     f60:	0000133d 	.word	0x0000133d
     f64:	0000105d 	.word	0x0000105d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     f68:	687b      	ldr	r3, [r7, #4]
     f6a:	1d1a      	adds	r2, r3, #4
     f6c:	607a      	str	r2, [r7, #4]
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	2b00      	cmp	r3, #0
     f78:	d005      	beq.n	f86 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     f7a:	68fb      	ldr	r3, [r7, #12]
     f7c:	1c5a      	adds	r2, r3, #1
     f7e:	60fa      	str	r2, [r7, #12]
     f80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     f84:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f88:	3301      	adds	r3, #1
     f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f8c:	e1e6      	b.n	135c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	1d1a      	adds	r2, r3, #4
     f92:	607a      	str	r2, [r7, #4]
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     f98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     f9a:	f7ff fdc7 	bl	b2c <simple_strlen>
     f9e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa2:	2b00      	cmp	r3, #0
     fa4:	dd2e      	ble.n	1004 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     faa:	429a      	cmp	r2, r3
     fac:	d22a      	bcs.n	1004 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fb2:	1ad3      	subs	r3, r2, r3
     fb4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fbc:	4619      	mov	r1, r3
     fbe:	68f8      	ldr	r0, [r7, #12]
     fc0:	f7ff fdd0 	bl	b64 <padbuffer>
     fc4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	2b00      	cmp	r3, #0
     fca:	d001      	beq.n	fd0 <am_util_stdio_vsprintf+0x24c>
     fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fce:	e000      	b.n	fd2 <am_util_stdio_vsprintf+0x24e>
     fd0:	2300      	movs	r3, #0
     fd2:	68fa      	ldr	r2, [r7, #12]
     fd4:	4413      	add	r3, r2
     fd6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fdc:	4413      	add	r3, r2
     fde:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     fe0:	2300      	movs	r3, #0
     fe2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     fe4:	e00e      	b.n	1004 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     fe6:	68fb      	ldr	r3, [r7, #12]
     fe8:	2b00      	cmp	r3, #0
     fea:	d005      	beq.n	ff8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	1c5a      	adds	r2, r3, #1
     ff0:	60fa      	str	r2, [r7, #12]
     ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ff4:	7812      	ldrb	r2, [r2, #0]
     ff6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ffa:	3301      	adds	r3, #1
     ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1000:	3301      	adds	r3, #1
    1002:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	2b00      	cmp	r3, #0
    100a:	d1ec      	bne.n	fe6 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100e:	2b00      	cmp	r3, #0
    1010:	f000 81a1 	beq.w	1356 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1016:	425b      	negs	r3, r3
    1018:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    101e:	429a      	cmp	r2, r3
    1020:	f080 8199 	bcs.w	1356 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1024:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1028:	1ad3      	subs	r3, r2, r3
    102a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    102c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1030:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1032:	4619      	mov	r1, r3
    1034:	68f8      	ldr	r0, [r7, #12]
    1036:	f7ff fd95 	bl	b64 <padbuffer>
    103a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	2b00      	cmp	r3, #0
    1040:	d001      	beq.n	1046 <am_util_stdio_vsprintf+0x2c2>
    1042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1044:	e000      	b.n	1048 <am_util_stdio_vsprintf+0x2c4>
    1046:	2300      	movs	r3, #0
    1048:	68fa      	ldr	r2, [r7, #12]
    104a:	4413      	add	r3, r2
    104c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1052:	4413      	add	r3, r2
    1054:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1056:	2300      	movs	r3, #0
    1058:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    105a:	e17c      	b.n	1356 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    105c:	2301      	movs	r3, #1
    105e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1066:	2b00      	cmp	r3, #0
    1068:	d00a      	beq.n	1080 <am_util_stdio_vsprintf+0x2fc>
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	3307      	adds	r3, #7
    106e:	f023 0307 	bic.w	r3, r3, #7
    1072:	f103 0208 	add.w	r2, r3, #8
    1076:	607a      	str	r2, [r7, #4]
    1078:	cb18      	ldmia	r3, {r3, r4}
    107a:	e007      	b.n	108c <am_util_stdio_vsprintf+0x308>
    107c:	10001164 	.word	0x10001164
                                      va_arg(pArgs, uint32_t);
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	1d1a      	adds	r2, r3, #4
    1084:	607a      	str	r2, [r7, #4]
    1086:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1088:	f04f 0400 	mov.w	r4, #0
    108c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1092:	2b00      	cmp	r3, #0
    1094:	d01e      	beq.n	10d4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    109a:	f7ff fc35 	bl	908 <ndigits_in_hex>
    109e:	4602      	mov	r2, r0
    10a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a2:	1a9b      	subs	r3, r3, r2
    10a4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10ac:	4619      	mov	r1, r3
    10ae:	68f8      	ldr	r0, [r7, #12]
    10b0:	f7ff fd58 	bl	b64 <padbuffer>
    10b4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d001      	beq.n	10c0 <am_util_stdio_vsprintf+0x33c>
    10bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10be:	e000      	b.n	10c2 <am_util_stdio_vsprintf+0x33e>
    10c0:	2300      	movs	r3, #0
    10c2:	68fa      	ldr	r2, [r7, #12]
    10c4:	4413      	add	r3, r2
    10c6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10cc:	4413      	add	r3, r2
    10ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10d0:	2300      	movs	r3, #0
    10d2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    10d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    10d8:	68fa      	ldr	r2, [r7, #12]
    10da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10de:	f7ff fcc5 	bl	a6c <uint64_to_hexstr>
    10e2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d003      	beq.n	10f2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    10ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10ec:	68fa      	ldr	r2, [r7, #12]
    10ee:	4413      	add	r3, r2
    10f0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10f6:	4413      	add	r3, r2
    10f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10fa:	e12f      	b.n	135c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    10fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1100:	2b00      	cmp	r3, #0
    1102:	d008      	beq.n	1116 <am_util_stdio_vsprintf+0x392>
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	3307      	adds	r3, #7
    1108:	f023 0307 	bic.w	r3, r3, #7
    110c:	f103 0208 	add.w	r2, r3, #8
    1110:	607a      	str	r2, [r7, #4]
    1112:	cb18      	ldmia	r3, {r3, r4}
    1114:	e005      	b.n	1122 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	1d1a      	adds	r2, r3, #4
    111a:	607a      	str	r2, [r7, #4]
    111c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    111e:	f04f 0400 	mov.w	r4, #0
    1122:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1128:	2b00      	cmp	r3, #0
    112a:	d01e      	beq.n	116a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    112c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1130:	f7ff fbaa 	bl	888 <ndigits_in_u64>
    1134:	4602      	mov	r2, r0
    1136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1138:	1a9b      	subs	r3, r3, r2
    113a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    113c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1140:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1142:	4619      	mov	r1, r3
    1144:	68f8      	ldr	r0, [r7, #12]
    1146:	f7ff fd0d 	bl	b64 <padbuffer>
    114a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    114c:	68fb      	ldr	r3, [r7, #12]
    114e:	2b00      	cmp	r3, #0
    1150:	d001      	beq.n	1156 <am_util_stdio_vsprintf+0x3d2>
    1152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1154:	e000      	b.n	1158 <am_util_stdio_vsprintf+0x3d4>
    1156:	2300      	movs	r3, #0
    1158:	68fa      	ldr	r2, [r7, #12]
    115a:	4413      	add	r3, r2
    115c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1162:	4413      	add	r3, r2
    1164:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1166:	2300      	movs	r3, #0
    1168:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    116a:	68fa      	ldr	r2, [r7, #12]
    116c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1170:	f7ff fc34 	bl	9dc <uint64_to_str>
    1174:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	2b00      	cmp	r3, #0
    117a:	d003      	beq.n	1184 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    117e:	68fa      	ldr	r2, [r7, #12]
    1180:	4413      	add	r3, r2
    1182:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1188:	4413      	add	r3, r2
    118a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    118c:	e0e6      	b.n	135c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    118e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1192:	2b00      	cmp	r3, #0
    1194:	d008      	beq.n	11a8 <am_util_stdio_vsprintf+0x424>
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	3307      	adds	r3, #7
    119a:	f023 0307 	bic.w	r3, r3, #7
    119e:	f103 0208 	add.w	r2, r3, #8
    11a2:	607a      	str	r2, [r7, #4]
    11a4:	cb18      	ldmia	r3, {r3, r4}
    11a6:	e005      	b.n	11b4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	1d1a      	adds	r2, r3, #4
    11ac:	607a      	str	r2, [r7, #4]
    11ae:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    11b4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    11b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11bc:	2b00      	cmp	r3, #0
    11be:	f174 0300 	sbcs.w	r3, r4, #0
    11c2:	da0a      	bge.n	11da <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    11c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11c8:	425b      	negs	r3, r3
    11ca:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    11ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    11d2:	2301      	movs	r3, #1
    11d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    11d8:	e006      	b.n	11e8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    11da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    11e2:	2300      	movs	r3, #0
    11e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    11e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ea:	2b00      	cmp	r3, #0
    11ec:	d04a      	beq.n	1284 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    11ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    11f2:	4618      	mov	r0, r3
    11f4:	4621      	mov	r1, r4
    11f6:	f7ff fb69 	bl	8cc <ndigits_in_i64>
    11fa:	4602      	mov	r2, r0
    11fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11fe:	1a9b      	subs	r3, r3, r2
    1200:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1206:	2b00      	cmp	r3, #0
    1208:	d011      	beq.n	122e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    120c:	3b01      	subs	r3, #1
    120e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1214:	2b30      	cmp	r3, #48	; 0x30
    1216:	d10a      	bne.n	122e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1218:	68fb      	ldr	r3, [r7, #12]
    121a:	2b00      	cmp	r3, #0
    121c:	d004      	beq.n	1228 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    121e:	68fb      	ldr	r3, [r7, #12]
    1220:	1c5a      	adds	r2, r3, #1
    1222:	60fa      	str	r2, [r7, #12]
    1224:	222d      	movs	r2, #45	; 0x2d
    1226:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    122a:	3301      	adds	r3, #1
    122c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    122e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1232:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1234:	4619      	mov	r1, r3
    1236:	68f8      	ldr	r0, [r7, #12]
    1238:	f7ff fc94 	bl	b64 <padbuffer>
    123c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	2b00      	cmp	r3, #0
    1242:	d001      	beq.n	1248 <am_util_stdio_vsprintf+0x4c4>
    1244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1246:	e000      	b.n	124a <am_util_stdio_vsprintf+0x4c6>
    1248:	2300      	movs	r3, #0
    124a:	68fa      	ldr	r2, [r7, #12]
    124c:	4413      	add	r3, r2
    124e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1254:	4413      	add	r3, r2
    1256:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1258:	2300      	movs	r3, #0
    125a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    125c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1260:	2b00      	cmp	r3, #0
    1262:	d01e      	beq.n	12a2 <am_util_stdio_vsprintf+0x51e>
    1264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1268:	2b20      	cmp	r3, #32
    126a:	d11a      	bne.n	12a2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	2b00      	cmp	r3, #0
    1270:	d004      	beq.n	127c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1272:	68fb      	ldr	r3, [r7, #12]
    1274:	1c5a      	adds	r2, r3, #1
    1276:	60fa      	str	r2, [r7, #12]
    1278:	222d      	movs	r2, #45	; 0x2d
    127a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    127c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    127e:	3301      	adds	r3, #1
    1280:	63fb      	str	r3, [r7, #60]	; 0x3c
    1282:	e00e      	b.n	12a2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1288:	2b00      	cmp	r3, #0
    128a:	d00a      	beq.n	12a2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	2b00      	cmp	r3, #0
    1290:	d004      	beq.n	129c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	1c5a      	adds	r2, r3, #1
    1296:	60fa      	str	r2, [r7, #12]
    1298:	222d      	movs	r2, #45	; 0x2d
    129a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    129e:	3301      	adds	r3, #1
    12a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    12a2:	68fa      	ldr	r2, [r7, #12]
    12a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12a8:	f7ff fb98 	bl	9dc <uint64_to_str>
    12ac:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12ae:	68fb      	ldr	r3, [r7, #12]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d003      	beq.n	12bc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    12b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12b6:	68fa      	ldr	r2, [r7, #12]
    12b8:	4413      	add	r3, r2
    12ba:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12c0:	4413      	add	r3, r2
    12c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12c4:	e04a      	b.n	135c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d046      	beq.n	135a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	3307      	adds	r3, #7
    12d0:	f023 0307 	bic.w	r3, r3, #7
    12d4:	f103 0208 	add.w	r2, r3, #8
    12d8:	607a      	str	r2, [r7, #4]
    12da:	cb18      	ldmia	r3, {r3, r4}
    12dc:	4618      	mov	r0, r3
    12de:	4621      	mov	r1, r4
    12e0:	f7fe feee 	bl	c0 <__aeabi_d2f>
    12e4:	4603      	mov	r3, r0
    12e6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	2214      	movs	r2, #20
    12ec:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    12ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12f0:	68f9      	ldr	r1, [r7, #12]
    12f2:	6978      	ldr	r0, [r7, #20]
    12f4:	f7ff fc5c 	bl	bb0 <ftoa>
    12f8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    12fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12fc:	2b00      	cmp	r3, #0
    12fe:	da14      	bge.n	132a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1302:	f1b3 3fff 	cmp.w	r3, #4294967295
    1306:	d102      	bne.n	130e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1308:	4b1e      	ldr	r3, [pc, #120]	; (1384 <am_util_stdio_vsprintf+0x600>)
    130a:	62bb      	str	r3, [r7, #40]	; 0x28
    130c:	e008      	b.n	1320 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1310:	f113 0f02 	cmn.w	r3, #2
    1314:	d102      	bne.n	131c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1316:	4b1c      	ldr	r3, [pc, #112]	; (1388 <am_util_stdio_vsprintf+0x604>)
    1318:	62bb      	str	r3, [r7, #40]	; 0x28
    131a:	e001      	b.n	1320 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    131c:	4b1b      	ldr	r3, [pc, #108]	; (138c <am_util_stdio_vsprintf+0x608>)
    131e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1324:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1326:	2303      	movs	r3, #3
    1328:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    132c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    132e:	4413      	add	r3, r2
    1330:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1334:	68fa      	ldr	r2, [r7, #12]
    1336:	4413      	add	r3, r2
    1338:	60fb      	str	r3, [r7, #12]
                }
                break;
    133a:	e00e      	b.n	135a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	2b00      	cmp	r3, #0
    1340:	d005      	beq.n	134e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	1c5a      	adds	r2, r3, #1
    1346:	60fa      	str	r2, [r7, #12]
    1348:	68ba      	ldr	r2, [r7, #8]
    134a:	7812      	ldrb	r2, [r2, #0]
    134c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    134e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1350:	3301      	adds	r3, #1
    1352:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1354:	e002      	b.n	135c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1356:	bf00      	nop
    1358:	e000      	b.n	135c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    135a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    135c:	68bb      	ldr	r3, [r7, #8]
    135e:	3301      	adds	r3, #1
    1360:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    1362:	68bb      	ldr	r3, [r7, #8]
    1364:	781b      	ldrb	r3, [r3, #0]
    1366:	2b00      	cmp	r3, #0
    1368:	f47f ad17 	bne.w	d9a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	2b00      	cmp	r3, #0
    1370:	d002      	beq.n	1378 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	2200      	movs	r2, #0
    1376:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    137a:	4618      	mov	r0, r3
    137c:	3754      	adds	r7, #84	; 0x54
    137e:	46bd      	mov	sp, r7
    1380:	bd90      	pop	{r4, r7, pc}
    1382:	bf00      	nop
    1384:	00302e30 	.word	0x00302e30
    1388:	00232e23 	.word	0x00232e23
    138c:	003f2e3f 	.word	0x003f2e3f

00001390 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1390:	b40f      	push	{r0, r1, r2, r3}
    1392:	b580      	push	{r7, lr}
    1394:	b082      	sub	sp, #8
    1396:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1398:	f107 0314 	add.w	r3, r7, #20
    139c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    139e:	683a      	ldr	r2, [r7, #0]
    13a0:	6939      	ldr	r1, [r7, #16]
    13a2:	4808      	ldr	r0, [pc, #32]	; (13c4 <am_util_stdio_printf+0x34>)
    13a4:	f7ff fcee 	bl	d84 <am_util_stdio_vsprintf>
    13a8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    13aa:	4b07      	ldr	r3, [pc, #28]	; (13c8 <am_util_stdio_printf+0x38>)
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	4805      	ldr	r0, [pc, #20]	; (13c4 <am_util_stdio_printf+0x34>)
    13b0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    13b2:	687b      	ldr	r3, [r7, #4]
}
    13b4:	4618      	mov	r0, r3
    13b6:	3708      	adds	r7, #8
    13b8:	46bd      	mov	sp, r7
    13ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    13be:	b004      	add	sp, #16
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	10001064 	.word	0x10001064
    13c8:	10001170 	.word	0x10001170

000013cc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    13cc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    13ce:	f000 faeb 	bl	19a8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    13d2:	f000 fb57 	bl	1a84 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    13d6:	f000 fccf 	bl	1d78 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    13da:	2001      	movs	r0, #1
    13dc:	f000 fb62 	bl	1aa4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    13e0:	2001      	movs	r0, #1
    13e2:	f000 f8c7 	bl	1574 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    13e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    13ea:	f000 bb69 	b.w	1ac0 <am_hal_rtc_osc_disable>
    13ee:	bf00      	nop

000013f0 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    13f0:	4601      	mov	r1, r0
    13f2:	2000      	movs	r0, #0
    13f4:	f000 bcac 	b.w	1d50 <am_hal_uart_string_transmit_polled>

000013f8 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    13f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13fa:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    13fc:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1400:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1402:	7863      	ldrb	r3, [r4, #1]
    1404:	78e2      	ldrb	r2, [r4, #3]
    1406:	7925      	ldrb	r5, [r4, #4]
    1408:	79a1      	ldrb	r1, [r4, #6]
    140a:	00be      	lsls	r6, r7, #2
    140c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1410:	f006 0304 	and.w	r3, r6, #4
    1414:	f00e 0602 	and.w	r6, lr, #2
    1418:	431e      	orrs	r6, r3
    141a:	f042 0201 	orr.w	r2, r2, #1
    141e:	79e3      	ldrb	r3, [r4, #7]
    1420:	01ed      	lsls	r5, r5, #7
    1422:	4316      	orrs	r6, r2
    1424:	b2ed      	uxtb	r5, r5
    1426:	7a22      	ldrb	r2, [r4, #8]
    1428:	0289      	lsls	r1, r1, #10
    142a:	432e      	orrs	r6, r5
    142c:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1430:	7a65      	ldrb	r5, [r4, #9]
    1432:	02db      	lsls	r3, r3, #11
    1434:	430e      	orrs	r6, r1
    1436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    143a:	0312      	lsls	r2, r2, #12
    143c:	7aa1      	ldrb	r1, [r4, #10]
    143e:	431e      	orrs	r6, r3
    1440:	042d      	lsls	r5, r5, #16
    1442:	b293      	uxth	r3, r2
    1444:	7ae2      	ldrb	r2, [r4, #11]
    1446:	431e      	orrs	r6, r3
    1448:	0509      	lsls	r1, r1, #20
    144a:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    144e:	0612      	lsls	r2, r2, #24
    1450:	4333      	orrs	r3, r6
    1452:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1456:	00bf      	lsls	r7, r7, #2
    1458:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    145c:	4333      	orrs	r3, r6
    145e:	430b      	orrs	r3, r1
    1460:	f007 0508 	and.w	r5, r7, #8
    1464:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1466:	f000 f997 	bl	1798 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    146a:	482c      	ldr	r0, [pc, #176]	; (151c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    146c:	4b2c      	ldr	r3, [pc, #176]	; (1520 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    146e:	6005      	str	r5, [r0, #0]
    1470:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1472:	681e      	ldr	r6, [r3, #0]
    1474:	0777      	lsls	r7, r6, #29
    1476:	d41e      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    1478:	681f      	ldr	r7, [r3, #0]
    147a:	077e      	lsls	r6, r7, #29
    147c:	f102 32ff 	add.w	r2, r2, #4294967295
    1480:	d419      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    1482:	6819      	ldr	r1, [r3, #0]
    1484:	074f      	lsls	r7, r1, #29
    1486:	d416      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    1488:	6818      	ldr	r0, [r3, #0]
    148a:	0746      	lsls	r6, r0, #29
    148c:	d413      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    148e:	681e      	ldr	r6, [r3, #0]
    1490:	0770      	lsls	r0, r6, #29
    1492:	d410      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    1494:	681f      	ldr	r7, [r3, #0]
    1496:	0779      	lsls	r1, r7, #29
    1498:	d40d      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    149a:	6819      	ldr	r1, [r3, #0]
    149c:	074f      	lsls	r7, r1, #29
    149e:	d40a      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    14a0:	6818      	ldr	r0, [r3, #0]
    14a2:	0746      	lsls	r6, r0, #29
    14a4:	d407      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    14a6:	681e      	ldr	r6, [r3, #0]
    14a8:	0770      	lsls	r0, r6, #29
    14aa:	d404      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    14ac:	681f      	ldr	r7, [r3, #0]
    14ae:	0779      	lsls	r1, r7, #29
    14b0:	d401      	bmi.n	14b6 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    14b2:	3a09      	subs	r2, #9
    14b4:	d1dd      	bne.n	1472 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    14b6:	4b1a      	ldr	r3, [pc, #104]	; (1520 <am_hal_cachectrl_enable+0x128>)
    14b8:	681a      	ldr	r2, [r3, #0]
    14ba:	f042 0101 	orr.w	r1, r2, #1
    14be:	6019      	str	r1, [r3, #0]
    14c0:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14c2:	6818      	ldr	r0, [r3, #0]
    14c4:	0740      	lsls	r0, r0, #29
    14c6:	d41e      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14c8:	681e      	ldr	r6, [r3, #0]
    14ca:	0771      	lsls	r1, r6, #29
    14cc:	f102 32ff 	add.w	r2, r2, #4294967295
    14d0:	d419      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14d2:	681f      	ldr	r7, [r3, #0]
    14d4:	077f      	lsls	r7, r7, #29
    14d6:	d416      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14d8:	6819      	ldr	r1, [r3, #0]
    14da:	074e      	lsls	r6, r1, #29
    14dc:	d413      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14de:	6818      	ldr	r0, [r3, #0]
    14e0:	0740      	lsls	r0, r0, #29
    14e2:	d410      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14e4:	681e      	ldr	r6, [r3, #0]
    14e6:	0771      	lsls	r1, r6, #29
    14e8:	d40d      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14ea:	681f      	ldr	r7, [r3, #0]
    14ec:	077f      	lsls	r7, r7, #29
    14ee:	d40a      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14f0:	6819      	ldr	r1, [r3, #0]
    14f2:	074e      	lsls	r6, r1, #29
    14f4:	d407      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14f6:	6818      	ldr	r0, [r3, #0]
    14f8:	0740      	lsls	r0, r0, #29
    14fa:	d404      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    14fc:	681e      	ldr	r6, [r3, #0]
    14fe:	0771      	lsls	r1, r6, #29
    1500:	d401      	bmi.n	1506 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1502:	3a09      	subs	r2, #9
    1504:	d1dd      	bne.n	14c2 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1506:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1508:	4f04      	ldr	r7, [pc, #16]	; (151c <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    150a:	0223      	lsls	r3, r4, #8
    150c:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1510:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1514:	4311      	orrs	r1, r2
    1516:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1518:	6039      	str	r1, [r7, #0]
    151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    151c:	40018000 	.word	0x40018000
    1520:	40018008 	.word	0x40018008

00001524 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1524:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1526:	4604      	mov	r4, r0
    1528:	b120      	cbz	r0, 1534 <am_hal_clkgen_sysclk_select+0x10>
    152a:	4a06      	ldr	r2, [pc, #24]	; (1544 <am_hal_clkgen_sysclk_select+0x20>)
    152c:	4806      	ldr	r0, [pc, #24]	; (1548 <am_hal_clkgen_sysclk_select+0x24>)
    152e:	2150      	movs	r1, #80	; 0x50
    1530:	f000 f84c 	bl	15cc <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1536:	4906      	ldr	r1, [pc, #24]	; (1550 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1538:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    153a:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    153c:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    153e:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1540:	601a      	str	r2, [r3, #0]
    1542:	bd10      	pop	{r4, pc}
    1544:	00001fb0 	.word	0x00001fb0
    1548:	00001fe8 	.word	0x00001fe8
    154c:	40004014 	.word	0x40004014
    1550:	40004018 	.word	0x40004018

00001554 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1556:	4905      	ldr	r1, [pc, #20]	; (156c <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1558:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    155a:	4805      	ldr	r0, [pc, #20]	; (1570 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    155c:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1560:	bf08      	it	eq
    1562:	4608      	moveq	r0, r1
    1564:	4770      	bx	lr
    1566:	bf00      	nop
    1568:	40004018 	.word	0x40004018
    156c:	02dc6c00 	.word	0x02dc6c00
    1570:	016e3600 	.word	0x016e3600

00001574 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1574:	0783      	lsls	r3, r0, #30
    1576:	d003      	beq.n	1580 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1578:	4a02      	ldr	r2, [pc, #8]	; (1584 <am_hal_clkgen_osc_stop+0x10>)
    157a:	6813      	ldr	r3, [r2, #0]
    157c:	4318      	orrs	r0, r3
    157e:	6010      	str	r0, [r2, #0]
    1580:	4770      	bx	lr
    1582:	bf00      	nop
    1584:	4000400c 	.word	0x4000400c

00001588 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1588:	2801      	cmp	r0, #1
    158a:	d900      	bls.n	158e <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    158c:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    158e:	2903      	cmp	r1, #3
    1590:	d8fc      	bhi.n	158c <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1592:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    1596:	b430      	push	{r4, r5}
    1598:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    159a:	9301      	str	r3, [sp, #4]
    159c:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <am_hal_clkgen_uarten_set+0x40>)
    15a0:	00c5      	lsls	r5, r0, #3
    15a2:	681c      	ldr	r4, [r3, #0]
    15a4:	2203      	movs	r2, #3
    15a6:	40aa      	lsls	r2, r5
    15a8:	ea24 0502 	bic.w	r5, r4, r2
    15ac:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    15ae:	fb00 f000 	mul.w	r0, r0, r0
    15b2:	681a      	ldr	r2, [r3, #0]
    15b4:	00c0      	lsls	r0, r0, #3
    15b6:	4081      	lsls	r1, r0
    15b8:	4311      	orrs	r1, r2
    15ba:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    15bc:	9b01      	ldr	r3, [sp, #4]
    15be:	f383 8810 	msr	PRIMASK, r3
}
    15c2:	b002      	add	sp, #8
    15c4:	bc30      	pop	{r4, r5}
    15c6:	4770      	bx	lr
    15c8:	40004034 	.word	0x40004034

000015cc <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    15cc:	e7fe      	b.n	15cc <am_hal_debug_error>
    15ce:	bf00      	nop

000015d0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    15d0:	4b01      	ldr	r3, [pc, #4]	; (15d8 <am_hal_flash_delay+0x8>)
    15d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    15d4:	4708      	bx	r1
    15d6:	bf00      	nop
    15d8:	10001014 	.word	0x10001014

000015dc <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15dc:	4b2f      	ldr	r3, [pc, #188]	; (169c <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15de:	4930      	ldr	r1, [pc, #192]	; (16a0 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    15e0:	4a30      	ldr	r2, [pc, #192]	; (16a4 <am_hal_mcuctrl_device_info_get+0xc8>)
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    15e2:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15e4:	681f      	ldr	r7, [r3, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15e6:	4d30      	ldr	r5, [pc, #192]	; (16a8 <am_hal_mcuctrl_device_info_get+0xcc>)
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15e8:	6007      	str	r7, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15ea:	682f      	ldr	r7, [r5, #0]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    15ec:	4c2f      	ldr	r4, [pc, #188]	; (16ac <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15ee:	6047      	str	r7, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    15f0:	6827      	ldr	r7, [r4, #0]
    15f2:	6087      	str	r7, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    15f4:	680f      	ldr	r7, [r1, #0]
    15f6:	60c7      	str	r7, [r0, #12]

    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    15fc:	682d      	ldr	r5, [r5, #0]
    15fe:	6045      	str	r5, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1600:	6824      	ldr	r4, [r4, #0]
    1602:	6084      	str	r4, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1604:	6809      	ldr	r1, [r1, #0]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1606:	4e2a      	ldr	r6, [pc, #168]	; (16b0 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1608:	60c1      	str	r1, [r0, #12]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    160a:	f3c3 5703 	ubfx	r7, r3, #20, #4

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_flash_size[
    160e:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1612:	6836      	ldr	r6, [r6, #0]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    1614:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1618:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    161c:	4a25      	ldr	r2, [pc, #148]	; (16b4 <am_hal_mcuctrl_device_info_get+0xd8>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    161e:	6106      	str	r6, [r0, #16]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified =
    1620:	f003 0301 	and.w	r3, r3, #1
    1624:	6143      	str	r3, [r0, #20]
             AM_HAL_MCUCTRL_CHIP_INFO_QUAL_S;

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
    1626:	6185      	str	r5, [r0, #24]
            AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_S];

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
    1628:	61c4      	str	r4, [r0, #28]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    162a:	6814      	ldr	r4, [r2, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    162c:	4e22      	ldr	r6, [pc, #136]	; (16b8 <am_hal_mcuctrl_device_info_get+0xdc>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    162e:	4f23      	ldr	r7, [pc, #140]	; (16bc <am_hal_mcuctrl_device_info_get+0xe0>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1630:	4923      	ldr	r1, [pc, #140]	; (16c0 <am_hal_mcuctrl_device_info_get+0xe4>)
    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1632:	4d24      	ldr	r5, [pc, #144]	; (16c4 <am_hal_mcuctrl_device_info_get+0xe8>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1634:	b2e3      	uxtb	r3, r4
    1636:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1638:	6834      	ldr	r4, [r6, #0]
    163a:	0224      	lsls	r4, r4, #8
    163c:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    1640:	4323      	orrs	r3, r4
    1642:	6203      	str	r3, [r0, #32]

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    1644:	6833      	ldr	r3, [r6, #0]
    1646:	f3c3 1303 	ubfx	r3, r3, #4, #4
    164a:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    164c:	683c      	ldr	r4, [r7, #0]
    164e:	0124      	lsls	r4, r4, #4
    1650:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
    1654:	4323      	orrs	r3, r4
    1656:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1658:	683f      	ldr	r7, [r7, #0]
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    165a:	4c1b      	ldr	r4, [pc, #108]	; (16c8 <am_hal_mcuctrl_device_info_get+0xec>)
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    165c:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
    1660:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1662:	6809      	ldr	r1, [r1, #0]
    1664:	f3c1 1703 	ubfx	r7, r1, #4, #4
    1668:	433b      	orrs	r3, r7

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    166a:	321c      	adds	r2, #28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    166c:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    166e:	6812      	ldr	r2, [r2, #0]
    1670:	0611      	lsls	r1, r2, #24
    1672:	62c1      	str	r1, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1674:	682d      	ldr	r5, [r5, #0]
    1676:	042b      	lsls	r3, r5, #16
    1678:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    167c:	ea47 0201 	orr.w	r2, r7, r1
    1680:	62c2      	str	r2, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    1682:	6931      	ldr	r1, [r6, #16]
    1684:	020e      	lsls	r6, r1, #8
    1686:	f406 457f 	and.w	r5, r6, #65280	; 0xff00
    168a:	4315      	orrs	r5, r2
    168c:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    168e:	6824      	ldr	r4, [r4, #0]
    1690:	b2e3      	uxtb	r3, r4
    1692:	431d      	orrs	r5, r3
    1694:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    1696:	bcf0      	pop	{r4, r5, r6, r7}
    1698:	4770      	bx	lr
    169a:	bf00      	nop
    169c:	40020000 	.word	0x40020000
    16a0:	4002000c 	.word	0x4002000c
    16a4:	00002000 	.word	0x00002000
    16a8:	40020004 	.word	0x40020004
    16ac:	40020008 	.word	0x40020008
    16b0:	40020010 	.word	0x40020010
    16b4:	f0000fe0 	.word	0xf0000fe0
    16b8:	f0000fe4 	.word	0xf0000fe4
    16bc:	f0000fe8 	.word	0xf0000fe8
    16c0:	f0000fec 	.word	0xf0000fec
    16c4:	f0000ff8 	.word	0xf0000ff8
    16c8:	f0000ff0 	.word	0xf0000ff0

000016cc <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    16cc:	4a0d      	ldr	r2, [pc, #52]	; (1704 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    16ce:	4b0e      	ldr	r3, [pc, #56]	; (1708 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16d0:	490e      	ldr	r1, [pc, #56]	; (170c <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    16d2:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    16d4:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    16d6:	6814      	ldr	r4, [r2, #0]
    16d8:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16da:	6809      	ldr	r1, [r1, #0]
    16dc:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16de:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16e0:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16e2:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    16e4:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16e6:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    16e8:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16ec:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    16ee:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    16f0:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    16f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    16f8:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    16fa:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    16fc:	6142      	str	r2, [r0, #20]
}
    16fe:	bc70      	pop	{r4, r5, r6}
    1700:	4770      	bx	lr
    1702:	bf00      	nop
    1704:	400201c4 	.word	0x400201c4
    1708:	400201cc 	.word	0x400201cc
    170c:	400201c0 	.word	0x400201c0

00001710 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1710:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1712:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1714:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1716:	b1c0      	cbz	r0, 174a <am_hal_pwrctrl_periph_enable+0x3a>
    1718:	1e43      	subs	r3, r0, #1
    171a:	4203      	tst	r3, r0
    171c:	d115      	bne.n	174a <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    171e:	f3ef 8010 	mrs	r0, PRIMASK
    1722:	9001      	str	r0, [sp, #4]
    1724:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1726:	4a18      	ldr	r2, [pc, #96]	; (1788 <am_hal_pwrctrl_periph_enable+0x78>)
    1728:	6811      	ldr	r1, [r2, #0]
    172a:	4321      	orrs	r1, r4
    172c:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    172e:	9b01      	ldr	r3, [sp, #4]
    1730:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1734:	200e      	movs	r0, #14
    1736:	f7ff ff4b 	bl	15d0 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    173a:	f014 0f0e 	tst.w	r4, #14
    173e:	d10a      	bne.n	1756 <am_hal_pwrctrl_periph_enable+0x46>
    1740:	f014 0f70 	tst.w	r4, #112	; 0x70
    1744:	d00e      	beq.n	1764 <am_hal_pwrctrl_periph_enable+0x54>
    1746:	2408      	movs	r4, #8
    1748:	e006      	b.n	1758 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    174a:	4a10      	ldr	r2, [pc, #64]	; (178c <am_hal_pwrctrl_periph_enable+0x7c>)
    174c:	4810      	ldr	r0, [pc, #64]	; (1790 <am_hal_pwrctrl_periph_enable+0x80>)
    174e:	215d      	movs	r1, #93	; 0x5d
    1750:	f7ff ff3c 	bl	15cc <am_hal_debug_error>
    1754:	e7e3      	b.n	171e <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1756:	2404      	movs	r4, #4
    1758:	4a0e      	ldr	r2, [pc, #56]	; (1794 <am_hal_pwrctrl_periph_enable+0x84>)
    175a:	6811      	ldr	r1, [r2, #0]
    175c:	420c      	tst	r4, r1
    175e:	d0fc      	beq.n	175a <am_hal_pwrctrl_periph_enable+0x4a>
}
    1760:	b002      	add	sp, #8
    1762:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1764:	f240 1081 	movw	r0, #385	; 0x181
    1768:	4020      	ands	r0, r4
    176a:	b940      	cbnz	r0, 177e <am_hal_pwrctrl_periph_enable+0x6e>
    176c:	05a3      	lsls	r3, r4, #22
    176e:	d408      	bmi.n	1782 <am_hal_pwrctrl_periph_enable+0x72>
    1770:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1774:	bf14      	ite	ne
    1776:	2410      	movne	r4, #16
    1778:	f04f 34ff 	moveq.w	r4, #4294967295
    177c:	e7ec      	b.n	1758 <am_hal_pwrctrl_periph_enable+0x48>
    177e:	2402      	movs	r4, #2
    1780:	e7ea      	b.n	1758 <am_hal_pwrctrl_periph_enable+0x48>
    1782:	2480      	movs	r4, #128	; 0x80
    1784:	e7e8      	b.n	1758 <am_hal_pwrctrl_periph_enable+0x48>
    1786:	bf00      	nop
    1788:	40021008 	.word	0x40021008
    178c:	00002040 	.word	0x00002040
    1790:	00002074 	.word	0x00002074
    1794:	40021014 	.word	0x40021014

00001798 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1798:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    179c:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    179e:	d03a      	beq.n	1816 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    17a0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    17a4:	f000 809d 	beq.w	18e2 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    17a8:	2801      	cmp	r0, #1
    17aa:	f000 809d 	beq.w	18e8 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    17ae:	2803      	cmp	r0, #3
    17b0:	f000 80a6 	beq.w	1900 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    17b4:	2807      	cmp	r0, #7
    17b6:	f000 809c 	beq.w	18f2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    17ba:	280f      	cmp	r0, #15
    17bc:	f000 80a5 	beq.w	190a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    17c0:	281f      	cmp	r0, #31
    17c2:	f000 80b1 	beq.w	1928 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    17c6:	283f      	cmp	r0, #63	; 0x3f
    17c8:	f000 80b5 	beq.w	1936 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    17cc:	287f      	cmp	r0, #127	; 0x7f
    17ce:	f000 80b9 	beq.w	1944 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    17d2:	28ff      	cmp	r0, #255	; 0xff
    17d4:	f000 80a0 	beq.w	1918 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    17d8:	f240 13ff 	movw	r3, #511	; 0x1ff
    17dc:	4298      	cmp	r0, r3
    17de:	f000 80b8 	beq.w	1952 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    17e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    17e6:	4288      	cmp	r0, r1
    17e8:	f000 80b9 	beq.w	195e <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    17ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
    17f0:	4290      	cmp	r0, r2
    17f2:	d00e      	beq.n	1812 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    17f4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    17f8:	f000 80b7 	beq.w	196a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    17fc:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1800:	42a0      	cmp	r0, r4
    1802:	f000 80b5 	beq.w	1970 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1806:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    180a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    180e:	4560      	cmp	r0, ip
    1810:	d132      	bne.n	1878 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1812:	495c      	ldr	r1, [pc, #368]	; (1984 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1814:	e066      	b.n	18e4 <am_hal_pwrctrl_memory_enable+0x14c>
    1816:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    181a:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    181c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    181e:	4c5a      	ldr	r4, [pc, #360]	; (1988 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1820:	6822      	ldr	r2, [r4, #0]
    1822:	402a      	ands	r2, r5
    1824:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1826:	4d58      	ldr	r5, [pc, #352]	; (1988 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1828:	682c      	ldr	r4, [r5, #0]
    182a:	4320      	orrs	r0, r4
    182c:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    182e:	2b00      	cmp	r3, #0
    1830:	d029      	beq.n	1886 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1832:	4a56      	ldr	r2, [pc, #344]	; (198c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1834:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1836:	4203      	tst	r3, r0
    1838:	bf18      	it	ne
    183a:	20c6      	movne	r0, #198	; 0xc6
    183c:	d01f      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    183e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1840:	422b      	tst	r3, r5
    1842:	d01c      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1844:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1846:	4223      	tst	r3, r4
    1848:	d019      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    184a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    184c:	422b      	tst	r3, r5
    184e:	d016      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1850:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1852:	4223      	tst	r3, r4
    1854:	d013      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1856:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1858:	422b      	tst	r3, r5
    185a:	d010      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    185c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    185e:	4223      	tst	r3, r4
    1860:	d00d      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1862:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1864:	422b      	tst	r3, r5
    1866:	d00a      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1868:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    186a:	4223      	tst	r3, r4
    186c:	d007      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    186e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1870:	422b      	tst	r3, r5
    1872:	d004      	beq.n	187e <am_hal_pwrctrl_memory_enable+0xe6>
    1874:	3809      	subs	r0, #9
    1876:	d1e2      	bne.n	183e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1878:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    187a:	bc30      	pop	{r4, r5}
    187c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    187e:	b911      	cbnz	r1, 1886 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1880:	2001      	movs	r0, #1
}
    1882:	bc30      	pop	{r4, r5}
    1884:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1886:	4b41      	ldr	r3, [pc, #260]	; (198c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1888:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    188a:	ea31 0402 	bics.w	r4, r1, r2
    188e:	bf18      	it	ne
    1890:	24c6      	movne	r4, #198	; 0xc6
    1892:	d0f5      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1894:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1896:	ea31 0000 	bics.w	r0, r1, r0
    189a:	d0f1      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    189c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    189e:	ea31 0005 	bics.w	r0, r1, r5
    18a2:	d0ed      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18a4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18a6:	ea31 0002 	bics.w	r0, r1, r2
    18aa:	d0e9      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18ac:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18ae:	ea31 0000 	bics.w	r0, r1, r0
    18b2:	d0e5      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18b4:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18b6:	ea31 0005 	bics.w	r0, r1, r5
    18ba:	d0e1      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18bc:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18be:	ea31 0002 	bics.w	r0, r1, r2
    18c2:	d0dd      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18c4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18c6:	ea31 0000 	bics.w	r0, r1, r0
    18ca:	d0d9      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18cc:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18ce:	ea31 0005 	bics.w	r0, r1, r5
    18d2:	d0d5      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18d4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    18d6:	ea31 0002 	bics.w	r0, r1, r2
    18da:	d0d1      	beq.n	1880 <am_hal_pwrctrl_memory_enable+0xe8>
    18dc:	3c09      	subs	r4, #9
    18de:	d1d9      	bne.n	1894 <am_hal_pwrctrl_memory_enable+0xfc>
    18e0:	e7ca      	b.n	1878 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    18e2:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    18e4:	2300      	movs	r3, #0
    18e6:	e79e      	b.n	1826 <am_hal_pwrctrl_memory_enable+0x8e>
    18e8:	4d29      	ldr	r5, [pc, #164]	; (1990 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18ea:	4b2a      	ldr	r3, [pc, #168]	; (1994 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    18ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    18f0:	e795      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    18f2:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18f6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    18fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    18fe:	e78e      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1900:	4d25      	ldr	r5, [pc, #148]	; (1998 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1902:	4b26      	ldr	r3, [pc, #152]	; (199c <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1904:	f44f 7140 	mov.w	r1, #768	; 0x300
    1908:	e789      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    190a:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    190e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1912:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1916:	e782      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1918:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    191c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1920:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1924:	20ff      	movs	r0, #255	; 0xff
    1926:	e77a      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1928:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    192c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1930:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1934:	e773      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1936:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    193a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    193e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1942:	e76c      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1944:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1948:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    194c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1950:	e765      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    1952:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1956:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    195a:	4911      	ldr	r1, [pc, #68]	; (19a0 <am_hal_pwrctrl_memory_enable+0x208>)
    195c:	e75f      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    195e:	4911      	ldr	r1, [pc, #68]	; (19a4 <am_hal_pwrctrl_memory_enable+0x20c>)
    1960:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1964:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1968:	e759      	b.n	181e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    196a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    196e:	e7b9      	b.n	18e4 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1970:	4805      	ldr	r0, [pc, #20]	; (1988 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1972:	6803      	ldr	r3, [r0, #0]
    1974:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1978:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    197a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    197e:	2100      	movs	r1, #0
    1980:	e757      	b.n	1832 <am_hal_pwrctrl_memory_enable+0x9a>
    1982:	bf00      	nop
    1984:	0007ff00 	.word	0x0007ff00
    1988:	40021010 	.word	0x40021010
    198c:	40021014 	.word	0x40021014
    1990:	fffff801 	.word	0xfffff801
    1994:	0007fe00 	.word	0x0007fe00
    1998:	fffff803 	.word	0xfffff803
    199c:	0007fc00 	.word	0x0007fc00
    19a0:	0001ff00 	.word	0x0001ff00
    19a4:	0003ff00 	.word	0x0003ff00

000019a8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19a8:	4b0f      	ldr	r3, [pc, #60]	; (19e8 <am_hal_pwrctrl_bucks_init+0x40>)
    19aa:	681a      	ldr	r2, [r3, #0]
    19ac:	0792      	lsls	r2, r2, #30
    19ae:	d502      	bpl.n	19b6 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    19b0:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19b2:	07c3      	lsls	r3, r0, #31
    19b4:	d40e      	bmi.n	19d4 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19b6:	4b0d      	ldr	r3, [pc, #52]	; (19ec <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19b8:	4a0b      	ldr	r2, [pc, #44]	; (19e8 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19ba:	6819      	ldr	r1, [r3, #0]
    19bc:	f041 0002 	orr.w	r0, r1, #2
    19c0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    19c2:	6819      	ldr	r1, [r3, #0]
    19c4:	f041 0001 	orr.w	r0, r1, #1
    19c8:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19ca:	6813      	ldr	r3, [r2, #0]
    19cc:	f003 0103 	and.w	r1, r3, #3
    19d0:	2903      	cmp	r1, #3
    19d2:	d1fa      	bne.n	19ca <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    19d4:	4a04      	ldr	r2, [pc, #16]	; (19e8 <am_hal_pwrctrl_bucks_init+0x40>)
    19d6:	6810      	ldr	r0, [r2, #0]
    19d8:	f000 0303 	and.w	r3, r0, #3
    19dc:	2b03      	cmp	r3, #3
    19de:	d1fa      	bne.n	19d6 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    19e0:	2042      	movs	r0, #66	; 0x42
    19e2:	f7ff bdf5 	b.w	15d0 <am_hal_flash_delay>
    19e6:	bf00      	nop
    19e8:	40021004 	.word	0x40021004
    19ec:	40021000 	.word	0x40021000

000019f0 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19f0:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <am_hal_pwrctrl_bucks_enable+0x30>)
    19f2:	681a      	ldr	r2, [r3, #0]
    19f4:	0792      	lsls	r2, r2, #30
    19f6:	d502      	bpl.n	19fe <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    19f8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19fa:	07c3      	lsls	r3, r0, #31
    19fc:	d40e      	bmi.n	1a1c <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19fe:	4b09      	ldr	r3, [pc, #36]	; (1a24 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a00:	4a07      	ldr	r2, [pc, #28]	; (1a20 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a02:	6819      	ldr	r1, [r3, #0]
    1a04:	f041 0002 	orr.w	r0, r1, #2
    1a08:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1a0a:	6819      	ldr	r1, [r3, #0]
    1a0c:	f041 0001 	orr.w	r0, r1, #1
    1a10:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a12:	6813      	ldr	r3, [r2, #0]
    1a14:	f003 0103 	and.w	r1, r3, #3
    1a18:	2903      	cmp	r1, #3
    1a1a:	d1fa      	bne.n	1a12 <am_hal_pwrctrl_bucks_enable+0x22>
    1a1c:	4770      	bx	lr
    1a1e:	bf00      	nop
    1a20:	40021004 	.word	0x40021004
    1a24:	40021000 	.word	0x40021000

00001a28 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a28:	4b12      	ldr	r3, [pc, #72]	; (1a74 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1a2a:	681a      	ldr	r2, [r3, #0]
    1a2c:	0792      	lsls	r2, r2, #30
    1a2e:	d402      	bmi.n	1a36 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1a30:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a32:	07c3      	lsls	r3, r0, #31
    1a34:	d51c      	bpl.n	1a70 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a36:	4910      	ldr	r1, [pc, #64]	; (1a78 <am_hal_pwrctrl_bucks_disable+0x50>)
    1a38:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1a3e:	2a20      	cmp	r2, #32
    1a40:	d00b      	beq.n	1a5a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1a42:	4b0e      	ldr	r3, [pc, #56]	; (1a7c <am_hal_pwrctrl_bucks_disable+0x54>)
    1a44:	681a      	ldr	r2, [r3, #0]
    1a46:	f022 0002 	bic.w	r0, r2, #2
    1a4a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1a4c:	6819      	ldr	r1, [r3, #0]
    1a4e:	f021 0201 	bic.w	r2, r1, #1
    1a52:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1a54:	200a      	movs	r0, #10
    1a56:	f7ff bdbb 	b.w	15d0 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1a5a:	4809      	ldr	r0, [pc, #36]	; (1a80 <am_hal_pwrctrl_bucks_disable+0x58>)
    1a5c:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1a62:	d1ee      	bne.n	1a42 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a64:	4805      	ldr	r0, [pc, #20]	; (1a7c <am_hal_pwrctrl_bucks_disable+0x54>)
    1a66:	6803      	ldr	r3, [r0, #0]
    1a68:	f003 0105 	and.w	r1, r3, #5
    1a6c:	6001      	str	r1, [r0, #0]
    1a6e:	e7f1      	b.n	1a54 <am_hal_pwrctrl_bucks_disable+0x2c>
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	40021004 	.word	0x40021004
    1a78:	4002000c 	.word	0x4002000c
    1a7c:	40021000 	.word	0x40021000
    1a80:	40021008 	.word	0x40021008

00001a84 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a86:	4a06      	ldr	r2, [pc, #24]	; (1aa0 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a88:	680b      	ldr	r3, [r1, #0]
    1a8a:	f043 0006 	orr.w	r0, r3, #6
    1a8e:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a90:	6811      	ldr	r1, [r2, #0]
    1a92:	f021 0304 	bic.w	r3, r1, #4
    1a96:	6013      	str	r3, [r2, #0]
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop
    1a9c:	40021018 	.word	0x40021018
    1aa0:	40021000 	.word	0x40021000

00001aa4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1aa4:	4a05      	ldr	r2, [pc, #20]	; (1abc <am_hal_rtc_osc_select+0x18>)
    1aa6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1aa8:	b918      	cbnz	r0, 1ab2 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1aaa:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1aae:	6010      	str	r0, [r2, #0]
    1ab0:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ab2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1ab6:	6011      	str	r1, [r2, #0]
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	4000400c 	.word	0x4000400c

00001ac0 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1ac0:	4a02      	ldr	r2, [pc, #8]	; (1acc <am_hal_rtc_osc_disable+0xc>)
    1ac2:	6813      	ldr	r3, [r2, #0]
    1ac4:	f043 0010 	orr.w	r0, r3, #16
    1ac8:	6010      	str	r0, [r2, #0]
    1aca:	4770      	bx	lr
    1acc:	40004050 	.word	0x40004050

00001ad0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ad2:	b083      	sub	sp, #12
    1ad4:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1ad6:	f000 f9c7 	bl	1e68 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ada:	4a41      	ldr	r2, [pc, #260]	; (1be0 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1adc:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ade:	b11d      	cbz	r5, 1ae8 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1ae0:	4b40      	ldr	r3, [pc, #256]	; (1be4 <am_hal_sysctrl_sleep+0x114>)
    1ae2:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ae4:	07c3      	lsls	r3, r0, #31
    1ae6:	d509      	bpl.n	1afc <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1ae8:	6811      	ldr	r1, [r2, #0]
    1aea:	f021 0604 	bic.w	r6, r1, #4
    1aee:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1af0:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1af2:	4620      	mov	r0, r4
    1af4:	f000 f9bc 	bl	1e70 <am_hal_interrupt_master_set>
}
    1af8:	b003      	add	sp, #12
    1afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1afc:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1afe:	493a      	ldr	r1, [pc, #232]	; (1be8 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b00:	4f3a      	ldr	r7, [pc, #232]	; (1bec <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b02:	4d3b      	ldr	r5, [pc, #236]	; (1bf0 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b04:	483b      	ldr	r0, [pc, #236]	; (1bf4 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b06:	f043 0604 	orr.w	r6, r3, #4
    1b0a:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b0c:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b0e:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b10:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b12:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b14:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1b18:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1b1a:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b1e:	bf14      	ite	ne
    1b20:	2500      	movne	r5, #0
    1b22:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1b24:	2e03      	cmp	r6, #3
    1b26:	bf8c      	ite	hi
    1b28:	2100      	movhi	r1, #0
    1b2a:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1b2c:	f012 0303 	ands.w	r3, r2, #3
    1b30:	bf18      	it	ne
    1b32:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b34:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1b38:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b3a:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1b3c:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1b40:	b91e      	cbnz	r6, 1b4a <am_hal_sysctrl_sleep+0x7a>
    1b42:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1b46:	2d0f      	cmp	r5, #15
    1b48:	d00a      	beq.n	1b60 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1b4a:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1b4c:	2d0f      	cmp	r5, #15
    1b4e:	d01a      	beq.n	1b86 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1b50:	4f29      	ldr	r7, [pc, #164]	; (1bf8 <am_hal_sysctrl_sleep+0x128>)
    1b52:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b54:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1b56:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b58:	f000 f98a 	bl	1e70 <am_hal_interrupt_master_set>
}
    1b5c:	b003      	add	sp, #12
    1b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b60:	683a      	ldr	r2, [r7, #0]
    1b62:	1e50      	subs	r0, r2, #1
    1b64:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1b66:	9800      	ldr	r0, [sp, #0]
    1b68:	f04f 31ff 	mov.w	r1, #4294967295
    1b6c:	f000 f924 	bl	1db8 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1b70:	9800      	ldr	r0, [sp, #0]
    1b72:	4633      	mov	r3, r6
    1b74:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1b78:	f04f 31ff 	mov.w	r1, #4294967295
    1b7c:	f000 f930 	bl	1de0 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1b80:	f7ff ff52 	bl	1a28 <am_hal_pwrctrl_bucks_disable>
    1b84:	e7e1      	b.n	1b4a <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b86:	f3ef 8310 	mrs	r3, PRIMASK
    1b8a:	9301      	str	r3, [sp, #4]
    1b8c:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1b8e:	4e1b      	ldr	r6, [pc, #108]	; (1bfc <am_hal_sysctrl_sleep+0x12c>)
    1b90:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1b92:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1b94:	6835      	ldr	r5, [r6, #0]
    1b96:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1b9a:	f04c 021c 	orr.w	r2, ip, #28
    1b9e:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1ba0:	6830      	ldr	r0, [r6, #0]
    1ba2:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1ba6:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1baa:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1bac:	9e01      	ldr	r6, [sp, #4]
    1bae:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1bb2:	201c      	movs	r0, #28
    1bb4:	f7ff fd0c 	bl	15d0 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1bb8:	f7ff ff1a 	bl	19f0 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bbc:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1bbe:	4910      	ldr	r1, [pc, #64]	; (1c00 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1bc0:	4d0d      	ldr	r5, [pc, #52]	; (1bf8 <am_hal_sysctrl_sleep+0x128>)
    1bc2:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bc4:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1bc6:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bc8:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1bca:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1bcc:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1bce:	f7ff fcff 	bl	15d0 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1bd2:	9800      	ldr	r0, [sp, #0]
    1bd4:	f04f 31ff 	mov.w	r1, #4294967295
    1bd8:	f000 f8d4 	bl	1d84 <am_hal_ctimer_start>
    1bdc:	e789      	b.n	1af2 <am_hal_sysctrl_sleep+0x22>
    1bde:	bf00      	nop
    1be0:	e000ed10 	.word	0xe000ed10
    1be4:	40020250 	.word	0x40020250
    1be8:	4002000c 	.word	0x4002000c
    1bec:	1000116c 	.word	0x1000116c
    1bf0:	40021000 	.word	0x40021000
    1bf4:	40021008 	.word	0x40021008
    1bf8:	10001165 	.word	0x10001165
    1bfc:	40020068 	.word	0x40020068
    1c00:	10001168 	.word	0x10001168

00001c04 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1c06:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1c08:	460f      	mov	r7, r1
    1c0a:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1c0c:	f7ff fca2 	bl	1554 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1c10:	0169      	lsls	r1, r5, #5
    1c12:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1c14:	fbb0 f4f1 	udiv	r4, r0, r1
    1c18:	fbb2 f0f1 	udiv	r0, r2, r1
    1c1c:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1c20:	b924      	cbnz	r4, 1c2c <am_hal_uart_config+0x28>
    1c22:	4a11      	ldr	r2, [pc, #68]	; (1c68 <am_hal_uart_config+0x64>)
    1c24:	4811      	ldr	r0, [pc, #68]	; (1c6c <am_hal_uart_config+0x68>)
    1c26:	2161      	movs	r1, #97	; 0x61
    1c28:	f7ff fcd0 	bl	15cc <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1c2c:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    1c30:	331c      	adds	r3, #28
    1c32:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1c34:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1c36:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1c38:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1c3a:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    1c3c:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1c3e:	68fa      	ldr	r2, [r7, #12]
    1c40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c42:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1c44:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1c46:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1c4a:	bf14      	ite	ne
    1c4c:	2208      	movne	r2, #8
    1c4e:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1c50:	4302      	orrs	r2, r0
    1c52:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1c54:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    1c56:	693f      	ldr	r7, [r7, #16]
    1c58:	432f      	orrs	r7, r5
    1c5a:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1c5c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1c5e:	f046 0110 	orr.w	r1, r6, #16
    1c62:	6319      	str	r1, [r3, #48]	; 0x30
    1c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c66:	bf00      	nop
    1c68:	0000208c 	.word	0x0000208c
    1c6c:	000020c0 	.word	0x000020c0

00001c70 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    1c70:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1c74:	301c      	adds	r0, #28
    1c76:	0302      	lsls	r2, r0, #12
    1c78:	6451      	str	r1, [r2, #68]	; 0x44
    1c7a:	4770      	bx	lr

00001c7c <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1c7c:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1c7e:	f3ef 8310 	mrs	r3, PRIMASK
    1c82:	9301      	str	r3, [sp, #4]
    1c84:	b672      	cpsid	i
    1c86:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1c8a:	301c      	adds	r0, #28
    1c8c:	0301      	lsls	r1, r0, #12
    1c8e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1c90:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    1c94:	f04c 0301 	orr.w	r3, ip, #1
    1c98:	630b      	str	r3, [r1, #48]	; 0x30
    1c9a:	9801      	ldr	r0, [sp, #4]
    1c9c:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1ca0:	b002      	add	sp, #8
    1ca2:	4770      	bx	lr

00001ca4 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1ca4:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1ca6:	f3ef 8310 	mrs	r3, PRIMASK
    1caa:	9301      	str	r3, [sp, #4]
    1cac:	b672      	cpsid	i
    1cae:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1cb2:	301c      	adds	r0, #28
    1cb4:	0301      	lsls	r1, r0, #12
    1cb6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1cb8:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    1cbc:	f02c 0301 	bic.w	r3, ip, #1
    1cc0:	630b      	str	r3, [r1, #48]	; 0x30
    1cc2:	9801      	ldr	r0, [sp, #4]
    1cc4:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1cc8:	b002      	add	sp, #8
    1cca:	4770      	bx	lr

00001ccc <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1ccc:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    1cce:	b510      	push	{r4, lr}
    1cd0:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1cd2:	d905      	bls.n	1ce0 <am_hal_uart_pwrctrl_enable+0x14>
    1cd4:	4a05      	ldr	r2, [pc, #20]	; (1cec <am_hal_uart_pwrctrl_enable+0x20>)
    1cd6:	4806      	ldr	r0, [pc, #24]	; (1cf0 <am_hal_uart_pwrctrl_enable+0x24>)
    1cd8:	f240 11a3 	movw	r1, #419	; 0x1a3
    1cdc:	f7ff fc76 	bl	15cc <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ce0:	2080      	movs	r0, #128	; 0x80
    1ce2:	40a0      	lsls	r0, r4
}
    1ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ce8:	f7ff bd12 	b.w	1710 <am_hal_pwrctrl_periph_enable>
    1cec:	000020d4 	.word	0x000020d4
    1cf0:	000020c0 	.word	0x000020c0

00001cf4 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1cf4:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1cf6:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1cf8:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1cfa:	f7ff fc45 	bl	1588 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1cfe:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1d02:	301c      	adds	r0, #28
    1d04:	0301      	lsls	r1, r0, #12
    1d06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1d08:	f043 0208 	orr.w	r2, r3, #8
    1d0c:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1d0e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1d10:	f044 0010 	orr.w	r0, r4, #16
    1d14:	6308      	str	r0, [r1, #48]	; 0x30
    1d16:	bd10      	pop	{r4, pc}

00001d18 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1d18:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    1d1c:	331c      	adds	r3, #28
    1d1e:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1d20:	2100      	movs	r1, #0
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d24:	f022 0208 	bic.w	r2, r2, #8
    1d28:	631a      	str	r2, [r3, #48]	; 0x30

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1d2a:	f7ff bc2d 	b.w	1588 <am_hal_clkgen_uarten_set>
    1d2e:	bf00      	nop

00001d30 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1d30:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1d34:	301c      	adds	r0, #28
    1d36:	0302      	lsls	r2, r0, #12
    1d38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1d3a:	f043 0010 	orr.w	r0, r3, #16
    1d3e:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1d40:	6351      	str	r1, [r2, #52]	; 0x34
    1d42:	4770      	bx	lr

00001d44 <am_hal_uart_flags_get>:
am_hal_uart_flags_get(uint32_t ui32Module)
{
    //
    // Read and return the Flags.
    //
    return AM_REGn(UART, ui32Module, FR);
    1d44:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1d48:	301c      	adds	r0, #28
    1d4a:	0301      	lsls	r1, r0, #12
    1d4c:	6988      	ldr	r0, [r1, #24]
}
    1d4e:	4770      	bx	lr

00001d50 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    1d50:	b410      	push	{r4}
    while (*pcString)
    1d52:	780c      	ldrb	r4, [r1, #0]
    1d54:	b16c      	cbz	r4, 1d72 <am_hal_uart_string_transmit_polled+0x22>
    1d56:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1d5a:	301c      	adds	r0, #28
    1d5c:	0300      	lsls	r0, r0, #12
    1d5e:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1d62:	6813      	ldr	r3, [r2, #0]
    1d64:	069b      	lsls	r3, r3, #26
    1d66:	d4fc      	bmi.n	1d62 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    1d68:	6004      	str	r4, [r0, #0]
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while (*pcString)
    1d6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1d6e:	2c00      	cmp	r4, #0
    1d70:	d1f7      	bne.n	1d62 <am_hal_uart_string_transmit_polled+0x12>
        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    }
}
    1d72:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d76:	4770      	bx	lr

00001d78 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1d78:	4b01      	ldr	r3, [pc, #4]	; (1d80 <am_hal_vcomp_disable+0x8>)
    1d7a:	2237      	movs	r2, #55	; 0x37
    1d7c:	601a      	str	r2, [r3, #0]
    1d7e:	4770      	bx	lr
    1d80:	4000c008 	.word	0x4000c008

00001d84 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1d84:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1d86:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1d8a:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1d8c:	0100      	lsls	r0, r0, #4
    1d8e:	4a09      	ldr	r2, [pc, #36]	; (1db4 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1d90:	9301      	str	r3, [sp, #4]
    1d92:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1d94:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1d96:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1d9a:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1d9e:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1da2:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1da4:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1da6:	9801      	ldr	r0, [sp, #4]
    1da8:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1dac:	b003      	add	sp, #12
    1dae:	f85d 4b04 	ldr.w	r4, [sp], #4
    1db2:	4770      	bx	lr
    1db4:	4000800c 	.word	0x4000800c

00001db8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1db8:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1dba:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1dbe:	0100      	lsls	r0, r0, #4
    1dc0:	4a06      	ldr	r2, [pc, #24]	; (1ddc <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1dc2:	9301      	str	r3, [sp, #4]
    1dc4:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1dc6:	5883      	ldr	r3, [r0, r2]
    1dc8:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1dcc:	4319      	orrs	r1, r3
    1dce:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1dd0:	9801      	ldr	r0, [sp, #4]
    1dd2:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1dd6:	b002      	add	sp, #8
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	4000800c 	.word	0x4000800c

00001de0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1de0:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1de2:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1de6:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1de8:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1dea:	4d1c      	ldr	r5, [pc, #112]	; (1e5c <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1dec:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1dee:	4e1c      	ldr	r6, [pc, #112]	; (1e60 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1df0:	4f1c      	ldr	r7, [pc, #112]	; (1e64 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1df2:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1df4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1df8:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1dfa:	d01a      	beq.n	1e32 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1dfc:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1e00:	2d80      	cmp	r5, #128	; 0x80
    1e02:	d01b      	beq.n	1e3c <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1e08:	2500      	movs	r5, #0
    1e0a:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1e0c:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1e0e:	d01c      	beq.n	1e4a <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1e10:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1e14:	d01e      	beq.n	1e54 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1e16:	0c21      	lsrs	r1, r4, #16
    1e18:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1e1a:	b291      	uxth	r1, r2
    1e1c:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1e1e:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1e22:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1e24:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1e26:	9801      	ldr	r0, [sp, #4]
    1e28:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1e2c:	b002      	add	sp, #8
    1e2e:	bcf0      	pop	{r4, r5, r6, r7}
    1e30:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1e32:	0c25      	lsrs	r5, r4, #16
    1e34:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1e38:	2c80      	cmp	r4, #128	; 0x80
    1e3a:	d10a      	bne.n	1e52 <am_hal_ctimer_period_set+0x72>
    1e3c:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1e3e:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1e40:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1e46:	4299      	cmp	r1, r3
    1e48:	d1e2      	bne.n	1e10 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1e4a:	b297      	uxth	r7, r2
    1e4c:	433d      	orrs	r5, r7
    1e4e:	5185      	str	r5, [r0, r6]
    1e50:	e7e9      	b.n	1e26 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1e52:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1e54:	b296      	uxth	r6, r2
    1e56:	4335      	orrs	r5, r6
    1e58:	51c5      	str	r5, [r0, r7]
    1e5a:	e7e4      	b.n	1e26 <am_hal_ctimer_period_set+0x46>
    1e5c:	4000800c 	.word	0x4000800c
    1e60:	40008004 	.word	0x40008004
    1e64:	40008008 	.word	0x40008008

00001e68 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1e68:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1e6c:	b672      	cpsid	i
    __asm("    bx lr");
    1e6e:	4770      	bx	lr

00001e70 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1e70:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1e74:	4770      	bx	lr
    1e76:	bf00      	nop
    1e78:	6c6c6548 	.word	0x6c6c6548
    1e7c:	6f57206f 	.word	0x6f57206f
    1e80:	21646c72 	.word	0x21646c72
    1e84:	0a0d0a0d 	.word	0x0a0d0a0d
    1e88:	00000000 	.word	0x00000000
    1e8c:	646e6556 	.word	0x646e6556
    1e90:	4e20726f 	.word	0x4e20726f
    1e94:	3a656d61 	.word	0x3a656d61
    1e98:	0d732520 	.word	0x0d732520
    1e9c:	0000000a 	.word	0x0000000a
    1ea0:	69766544 	.word	0x69766544
    1ea4:	74206563 	.word	0x74206563
    1ea8:	3a657079 	.word	0x3a657079
    1eac:	0a732520 	.word	0x0a732520
    1eb0:	00000000 	.word	0x00000000
    1eb4:	69766544 	.word	0x69766544
    1eb8:	49206563 	.word	0x49206563
    1ebc:	3a6f666e 	.word	0x3a6f666e
    1ec0:	50090a0d 	.word	0x50090a0d
    1ec4:	20747261 	.word	0x20747261
    1ec8:	626d756e 	.word	0x626d756e
    1ecc:	203a7265 	.word	0x203a7265
    1ed0:	30257830 	.word	0x30257830
    1ed4:	0a0d5838 	.word	0x0a0d5838
    1ed8:	76655209 	.word	0x76655209
    1edc:	6f697369 	.word	0x6f697369
    1ee0:	30203a6e 	.word	0x30203a6e
    1ee4:	20582578 	.word	0x20582578
    1ee8:	76655228 	.word	0x76655228
    1eec:	63256325 	.word	0x63256325
    1ef0:	00000a29 	.word	0x00000a29
    1ef4:	616c4609 	.word	0x616c4609
    1ef8:	73206873 	.word	0x73206873
    1efc:	3a657a69 	.word	0x3a657a69
    1f00:	0d642520 	.word	0x0d642520
    1f04:	0000000a 	.word	0x0000000a
    1f08:	41525309 	.word	0x41525309
    1f0c:	6973204d 	.word	0x6973204d
    1f10:	203a657a 	.word	0x203a657a
    1f14:	0a0d6425 	.word	0x0a0d6425
    1f18:	00000a0d 	.word	0x00000a0d
    1f1c:	20434347 	.word	0x20434347
    1f20:	2e332e35 	.word	0x2e332e35
    1f24:	30322031 	.word	0x30322031
    1f28:	33303631 	.word	0x33303631
    1f2c:	28203730 	.word	0x28203730
    1f30:	656c6572 	.word	0x656c6572
    1f34:	29657361 	.word	0x29657361
    1f38:	52415b20 	.word	0x52415b20
    1f3c:	6d652f4d 	.word	0x6d652f4d
    1f40:	64646562 	.word	0x64646562
    1f44:	352d6465 	.word	0x352d6465
    1f48:	6172622d 	.word	0x6172622d
    1f4c:	2068636e 	.word	0x2068636e
    1f50:	69766572 	.word	0x69766572
    1f54:	6e6f6973 	.word	0x6e6f6973
    1f58:	34333220 	.word	0x34333220
    1f5c:	5d393835 	.word	0x5d393835
    1f60:	00000000 	.word	0x00000000
    1f64:	706d6f43 	.word	0x706d6f43
    1f68:	72656c69 	.word	0x72656c69
    1f6c:	7325203a 	.word	0x7325203a
    1f70:	00000a0d 	.word	0x00000a0d

00001f74 <g_DeviceNameApollo>:
    1f74:	6c6f7041 00006f6c                       Apollo..

00001f7c <g_DeviceNameApollo2>:
    1f7c:	6c6f7041 00326f6c                       Apollo2.

00001f84 <g_ui8VendorNameAmbq>:
    1f84:	51424d41 00000000                       AMBQ....

00001f8c <g_ui8VendorNameUnknown>:
    1f8c:	3f3f3f3f 00000000                       ????....

00001f94 <g_ui8DeviceNameUnknown>:
    1f94:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

00001fa4 <am_hal_cachectrl_defaults>:
    1fa4:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1fb4:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1fc4:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1fd4:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1fe4:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1ff4:	6b6c635f 2e6e6567 00000063              _clkgen.c...

00002000 <g_am_hal_mcuctrl_flash_size>:
    2000:	00004000 00008000 00010000 00020000     .@..............
    2010:	00040000 00080000 00100000 00200000     .............. .
    2020:	00400000 00800000 01000000 02000000     ..@.............
    2030:	04000000 08000000 10000000 20000000     ............... 
    2040:	6e6e6143 6520746f 6c62616e 6f6d2065     Cannot enable mo
    2050:	74206572 206e6168 20656e6f 69726570     re than one peri
    2060:	72656870 61206c61 20612074 656d6974     pheral at a time
    2070:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2080:	7277705f 6c727463 0000632e 65746e49     _pwrctrl.c..Inte
    2090:	20726567 69766964 20726f73 5453554d     ger divisor MUST
    20a0:	20656220 61657267 20726574 6e616874      be greater than
    20b0:	20726f20 61757165 6f74206c 002e3120      or equal to 1..
    20c0:	2e5c2e2e 6d615c2e 6c61685f 7261755f     ..\..\am_hal_uar
    20d0:	00632e74 69797254 7420676e 6964206f     t.c.Trying to di
    20e0:	6c626173 20612065 54524155 646f6d20     sable a UART mod
    20f0:	20656c75 74616874 656f6420 74276e73     ule that doesn't
    2100:	69786520 00007473 69797254 7420676e      exist..Trying t
    2110:	6e65206f 656c6261 55206120 20545241     o enable a UART 
    2120:	75646f6d 7420656c 20746168 73656f64     module that does
    2130:	2074276e 73697865 00000074              n't exist...
