
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\buckzx_demo\atollic_gcc\bin\buckzx_demo_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000008c  10001000  00002d3c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000164  1000108c  00002dc8  0002108c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002108c  2**0
                  CONTENTS, READONLY
  5 .debug_info   000075d1  00000000  00000000  000210c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d46  00000000  00000000  00028694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000918  00000000  00000000  0002a3da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000f90  00000000  00000000  0002acf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004616  00000000  00000000  0002bc82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003166  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  000333fe  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001ac0  00000000  00000000  0003347c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000433c  00000000  00000000  00034f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 15 0c 00 00 7d 0c 00 00 ed 0c 00 00     ........}.......
      10:	ed 0c 00 00 ed 0c 00 00 ed 0c 00 00 00 00 00 00     ................
	...
      2c:	85 0c 00 00 85 0c 00 00 00 00 00 00 85 0c 00 00     ................
      3c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 89 08 00 00     ................
      4c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      5c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      6c:	85 0c 00 00 61 08 00 00 c5 07 00 00 85 0c 00 00     ....a...........
      7c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      8c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      9c:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      ac:	85 0c 00 00 85 0c 00 00 85 0c 00 00 85 0c 00 00     ................
      bc:	85 0c 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     482:	683b      	ldr	r3, [r7, #0]
     484:	00db      	lsls	r3, r3, #3
     486:	687a      	ldr	r2, [r7, #4]
     488:	4413      	add	r3, r2
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	f003 0302 	and.w	r3, r3, #2
     490:	2b00      	cmp	r3, #0
     492:	d036      	beq.n	502 <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     494:	683b      	ldr	r3, [r7, #0]
     496:	00db      	lsls	r3, r3, #3
     498:	687a      	ldr	r2, [r7, #4]
     49a:	4413      	add	r3, r2
     49c:	685b      	ldr	r3, [r3, #4]
     49e:	f003 0301 	and.w	r3, r3, #1
     4a2:	2b00      	cmp	r3, #0
     4a4:	d116      	bne.n	4d4 <am_devices_led_off+0x5c>
     4a6:	683b      	ldr	r3, [r7, #0]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	687a      	ldr	r2, [r7, #4]
     4ac:	4413      	add	r3, r2
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	08db      	lsrs	r3, r3, #3
     4b2:	f003 0204 	and.w	r2, r3, #4
     4b6:	4b21      	ldr	r3, [pc, #132]	; (53c <am_devices_led_off+0xc4>)
     4b8:	4413      	add	r3, r2
     4ba:	4619      	mov	r1, r3
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	f003 031f 	and.w	r3, r3, #31
     4ca:	2201      	movs	r2, #1
     4cc:	fa02 f303 	lsl.w	r3, r2, r3
     4d0:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     4d2:	e02c      	b.n	52e <am_devices_led_off+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	00db      	lsls	r3, r3, #3
     4d8:	687a      	ldr	r2, [r7, #4]
     4da:	4413      	add	r3, r2
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	08db      	lsrs	r3, r3, #3
     4e0:	f003 0204 	and.w	r2, r3, #4
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <am_devices_led_off+0xc8>)
     4e6:	4413      	add	r3, r2
     4e8:	4619      	mov	r1, r3
     4ea:	683b      	ldr	r3, [r7, #0]
     4ec:	00db      	lsls	r3, r3, #3
     4ee:	687a      	ldr	r2, [r7, #4]
     4f0:	4413      	add	r3, r2
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	f003 031f 	and.w	r3, r3, #31
     4f8:	2201      	movs	r2, #1
     4fa:	fa02 f303 	lsl.w	r3, r2, r3
     4fe:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     500:	e015      	b.n	52e <am_devices_led_off+0xb6>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     502:	683b      	ldr	r3, [r7, #0]
     504:	00db      	lsls	r3, r3, #3
     506:	687a      	ldr	r2, [r7, #4]
     508:	4413      	add	r3, r2
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	08db      	lsrs	r3, r3, #3
     50e:	f003 0204 	and.w	r2, r3, #4
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <am_devices_led_off+0xcc>)
     514:	4413      	add	r3, r2
     516:	4619      	mov	r1, r3
     518:	683b      	ldr	r3, [r7, #0]
     51a:	00db      	lsls	r3, r3, #3
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	4413      	add	r3, r2
     520:	681b      	ldr	r3, [r3, #0]
     522:	f003 031f 	and.w	r3, r3, #31
     526:	2201      	movs	r2, #1
     528:	fa02 f303 	lsl.w	r3, r2, r3
     52c:	600b      	str	r3, [r1, #0]
    }
}
     52e:	bf00      	nop
     530:	370c      	adds	r7, #12
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr
     53a:	bf00      	nop
     53c:	40010090 	.word	0x40010090
     540:	40010098 	.word	0x40010098
     544:	400100b4 	.word	0x400100b4

00000548 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     548:	b580      	push	{r7, lr}
     54a:	b084      	sub	sp, #16
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
     550:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	685b      	ldr	r3, [r3, #4]
     55c:	f003 0302 	and.w	r3, r3, #2
     560:	2b00      	cmp	r3, #0
     562:	d029      	beq.n	5b8 <am_devices_led_toggle+0x70>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     564:	f3ef 8310 	mrs	r3, PRIMASK
     568:	60fb      	str	r3, [r7, #12]
     56a:	b672      	cpsid	i
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	00db      	lsls	r3, r3, #3
     570:	687a      	ldr	r2, [r7, #4]
     572:	4413      	add	r3, r2
     574:	681b      	ldr	r3, [r3, #0]
     576:	08db      	lsrs	r3, r3, #3
     578:	f003 0204 	and.w	r2, r3, #4
     57c:	4b2c      	ldr	r3, [pc, #176]	; (630 <am_devices_led_toggle+0xe8>)
     57e:	4413      	add	r3, r2
     580:	4618      	mov	r0, r3
     582:	683b      	ldr	r3, [r7, #0]
     584:	00db      	lsls	r3, r3, #3
     586:	687a      	ldr	r2, [r7, #4]
     588:	4413      	add	r3, r2
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	08db      	lsrs	r3, r3, #3
     58e:	f003 0204 	and.w	r2, r3, #4
     592:	4b27      	ldr	r3, [pc, #156]	; (630 <am_devices_led_toggle+0xe8>)
     594:	4413      	add	r3, r2
     596:	681a      	ldr	r2, [r3, #0]
     598:	683b      	ldr	r3, [r7, #0]
     59a:	00db      	lsls	r3, r3, #3
     59c:	6879      	ldr	r1, [r7, #4]
     59e:	440b      	add	r3, r1
     5a0:	681b      	ldr	r3, [r3, #0]
     5a2:	f003 031f 	and.w	r3, r3, #31
     5a6:	2101      	movs	r1, #1
     5a8:	fa01 f303 	lsl.w	r3, r1, r3
     5ac:	4053      	eors	r3, r2
     5ae:	6003      	str	r3, [r0, #0]
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	f383 8810 	msr	PRIMASK, r3
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     5b6:	e037      	b.n	628 <am_devices_led_toggle+0xe0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	00db      	lsls	r3, r3, #3
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	4413      	add	r3, r2
     5c0:	681b      	ldr	r3, [r3, #0]
     5c2:	4618      	mov	r0, r3
     5c4:	f001 fd48 	bl	2058 <am_hal_gpio_out_enable_bit_get>
     5c8:	4603      	mov	r3, r0
     5ca:	2b00      	cmp	r3, #0
     5cc:	d016      	beq.n	5fc <am_devices_led_toggle+0xb4>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     5ce:	683b      	ldr	r3, [r7, #0]
     5d0:	00db      	lsls	r3, r3, #3
     5d2:	687a      	ldr	r2, [r7, #4]
     5d4:	4413      	add	r3, r2
     5d6:	681b      	ldr	r3, [r3, #0]
     5d8:	08db      	lsrs	r3, r3, #3
     5da:	f003 0204 	and.w	r2, r3, #4
     5de:	4b15      	ldr	r3, [pc, #84]	; (634 <am_devices_led_toggle+0xec>)
     5e0:	4413      	add	r3, r2
     5e2:	4619      	mov	r1, r3
     5e4:	683b      	ldr	r3, [r7, #0]
     5e6:	00db      	lsls	r3, r3, #3
     5e8:	687a      	ldr	r2, [r7, #4]
     5ea:	4413      	add	r3, r2
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f003 031f 	and.w	r3, r3, #31
     5f2:	2201      	movs	r2, #1
     5f4:	fa02 f303 	lsl.w	r3, r2, r3
     5f8:	600b      	str	r3, [r1, #0]
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     5fa:	e015      	b.n	628 <am_devices_led_toggle+0xe0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     5fc:	683b      	ldr	r3, [r7, #0]
     5fe:	00db      	lsls	r3, r3, #3
     600:	687a      	ldr	r2, [r7, #4]
     602:	4413      	add	r3, r2
     604:	681b      	ldr	r3, [r3, #0]
     606:	08db      	lsrs	r3, r3, #3
     608:	f003 0204 	and.w	r2, r3, #4
     60c:	4b0a      	ldr	r3, [pc, #40]	; (638 <am_devices_led_toggle+0xf0>)
     60e:	4413      	add	r3, r2
     610:	4619      	mov	r1, r3
     612:	683b      	ldr	r3, [r7, #0]
     614:	00db      	lsls	r3, r3, #3
     616:	687a      	ldr	r2, [r7, #4]
     618:	4413      	add	r3, r2
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	f003 031f 	and.w	r3, r3, #31
     620:	2201      	movs	r2, #1
     622:	fa02 f303 	lsl.w	r3, r2, r3
     626:	600b      	str	r3, [r1, #0]
        }
    }
}
     628:	bf00      	nop
     62a:	3710      	adds	r7, #16
     62c:	46bd      	mov	sp, r7
     62e:	bd80      	pop	{r7, pc}
     630:	40010088 	.word	0x40010088
     634:	400100b4 	.word	0x400100b4
     638:	400100a8 	.word	0x400100a8

0000063c <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     63c:	b580      	push	{r7, lr}
     63e:	b084      	sub	sp, #16
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     644:	f3ef 8310 	mrs	r3, PRIMASK
     648:	60fb      	str	r3, [r7, #12]
     64a:	b672      	cpsid	i
     64c:	4b29      	ldr	r3, [pc, #164]	; (6f4 <uart_init+0xb8>)
     64e:	2273      	movs	r2, #115	; 0x73
     650:	601a      	str	r2, [r3, #0]
     652:	4a29      	ldr	r2, [pc, #164]	; (6f8 <uart_init+0xbc>)
     654:	4b28      	ldr	r3, [pc, #160]	; (6f8 <uart_init+0xbc>)
     656:	681b      	ldr	r3, [r3, #0]
     658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     65c:	6013      	str	r3, [r2, #0]
     65e:	4a27      	ldr	r2, [pc, #156]	; (6fc <uart_init+0xc0>)
     660:	4b26      	ldr	r3, [pc, #152]	; (6fc <uart_init+0xc0>)
     662:	681b      	ldr	r3, [r3, #0]
     664:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     668:	6013      	str	r3, [r2, #0]
     66a:	4a25      	ldr	r2, [pc, #148]	; (700 <uart_init+0xc4>)
     66c:	4b24      	ldr	r3, [pc, #144]	; (700 <uart_init+0xc4>)
     66e:	681b      	ldr	r3, [r3, #0]
     670:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     674:	6013      	str	r3, [r2, #0]
     676:	4b1f      	ldr	r3, [pc, #124]	; (6f4 <uart_init+0xb8>)
     678:	2200      	movs	r2, #0
     67a:	601a      	str	r2, [r3, #0]
     67c:	68fb      	ldr	r3, [r7, #12]
     67e:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     682:	f3ef 8310 	mrs	r3, PRIMASK
     686:	60bb      	str	r3, [r7, #8]
     688:	b672      	cpsid	i
     68a:	4b1a      	ldr	r3, [pc, #104]	; (6f4 <uart_init+0xb8>)
     68c:	2273      	movs	r2, #115	; 0x73
     68e:	601a      	str	r2, [r3, #0]
     690:	4a19      	ldr	r2, [pc, #100]	; (6f8 <uart_init+0xbc>)
     692:	4b19      	ldr	r3, [pc, #100]	; (6f8 <uart_init+0xbc>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     69a:	6013      	str	r3, [r2, #0]
     69c:	4a17      	ldr	r2, [pc, #92]	; (6fc <uart_init+0xc0>)
     69e:	4b17      	ldr	r3, [pc, #92]	; (6fc <uart_init+0xc0>)
     6a0:	681b      	ldr	r3, [r3, #0]
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     6aa:	6013      	str	r3, [r2, #0]
     6ac:	4a14      	ldr	r2, [pc, #80]	; (700 <uart_init+0xc4>)
     6ae:	4b14      	ldr	r3, [pc, #80]	; (700 <uart_init+0xc4>)
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6b6:	6013      	str	r3, [r2, #0]
     6b8:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <uart_init+0xb8>)
     6ba:	2200      	movs	r2, #0
     6bc:	601a      	str	r2, [r3, #0]
     6be:	68bb      	ldr	r3, [r7, #8]
     6c0:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     6c4:	6878      	ldr	r0, [r7, #4]
     6c6:	f002 f9db 	bl	2a80 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     6ca:	6878      	ldr	r0, [r7, #4]
     6cc:	f002 fa00 	bl	2ad0 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     6d0:	6878      	ldr	r0, [r7, #4]
     6d2:	f002 f9c1 	bl	2a58 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     6d6:	490b      	ldr	r1, [pc, #44]	; (704 <uart_init+0xc8>)
     6d8:	6878      	ldr	r0, [r7, #4]
     6da:	f002 f973 	bl	29c4 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     6de:	2112      	movs	r1, #18
     6e0:	6878      	ldr	r0, [r7, #4]
     6e2:	f002 fa13 	bl	2b0c <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     6e6:	6878      	ldr	r0, [r7, #4]
     6e8:	f002 f9a2 	bl	2a30 <am_hal_uart_enable>
}
     6ec:	bf00      	nop
     6ee:	3710      	adds	r7, #16
     6f0:	46bd      	mov	sp, r7
     6f2:	bd80      	pop	{r7, pc}
     6f4:	40010060 	.word	0x40010060
     6f8:	40010048 	.word	0x40010048
     6fc:	40010014 	.word	0x40010014
     700:	400100f4 	.word	0x400100f4
     704:	10001000 	.word	0x10001000

00000708 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     708:	b580      	push	{r7, lr}
     70a:	b084      	sub	sp, #16
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     710:	200a      	movs	r0, #10
     712:	f000 fabb 	bl	c8c <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     716:	6878      	ldr	r0, [r7, #4]
     718:	f002 f99e 	bl	2a58 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     71c:	6878      	ldr	r0, [r7, #4]
     71e:	f002 f9c3 	bl	2aa8 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     722:	6878      	ldr	r0, [r7, #4]
     724:	f002 f9e6 	bl	2af4 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     728:	f3ef 8310 	mrs	r3, PRIMASK
     72c:	60fb      	str	r3, [r7, #12]
     72e:	b672      	cpsid	i
     730:	4b20      	ldr	r3, [pc, #128]	; (7b4 <uart_disable+0xac>)
     732:	2273      	movs	r2, #115	; 0x73
     734:	601a      	str	r2, [r3, #0]
     736:	4a20      	ldr	r2, [pc, #128]	; (7b8 <uart_disable+0xb0>)
     738:	4b1f      	ldr	r3, [pc, #124]	; (7b8 <uart_disable+0xb0>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     740:	6013      	str	r3, [r2, #0]
     742:	4a1e      	ldr	r2, [pc, #120]	; (7bc <uart_disable+0xb4>)
     744:	4b1d      	ldr	r3, [pc, #116]	; (7bc <uart_disable+0xb4>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     74c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     750:	6013      	str	r3, [r2, #0]
     752:	4a1b      	ldr	r2, [pc, #108]	; (7c0 <uart_disable+0xb8>)
     754:	4b1a      	ldr	r3, [pc, #104]	; (7c0 <uart_disable+0xb8>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     75c:	6013      	str	r3, [r2, #0]
     75e:	4b15      	ldr	r3, [pc, #84]	; (7b4 <uart_disable+0xac>)
     760:	2200      	movs	r2, #0
     762:	601a      	str	r2, [r3, #0]
     764:	68fb      	ldr	r3, [r7, #12]
     766:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_disable(COM_UART_RX);
     76a:	f3ef 8310 	mrs	r3, PRIMASK
     76e:	60bb      	str	r3, [r7, #8]
     770:	b672      	cpsid	i
     772:	4b10      	ldr	r3, [pc, #64]	; (7b4 <uart_disable+0xac>)
     774:	2273      	movs	r2, #115	; 0x73
     776:	601a      	str	r2, [r3, #0]
     778:	4a0f      	ldr	r2, [pc, #60]	; (7b8 <uart_disable+0xb0>)
     77a:	4b0f      	ldr	r3, [pc, #60]	; (7b8 <uart_disable+0xb0>)
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     782:	6013      	str	r3, [r2, #0]
     784:	4a0d      	ldr	r2, [pc, #52]	; (7bc <uart_disable+0xb4>)
     786:	4b0d      	ldr	r3, [pc, #52]	; (7bc <uart_disable+0xb4>)
     788:	681b      	ldr	r3, [r3, #0]
     78a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     78e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     792:	6013      	str	r3, [r2, #0]
     794:	4a0a      	ldr	r2, [pc, #40]	; (7c0 <uart_disable+0xb8>)
     796:	4b0a      	ldr	r3, [pc, #40]	; (7c0 <uart_disable+0xb8>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     79e:	6013      	str	r3, [r2, #0]
     7a0:	4b04      	ldr	r3, [pc, #16]	; (7b4 <uart_disable+0xac>)
     7a2:	2200      	movs	r2, #0
     7a4:	601a      	str	r2, [r3, #0]
     7a6:	68bb      	ldr	r3, [r7, #8]
     7a8:	f383 8810 	msr	PRIMASK, r3
}
     7ac:	bf00      	nop
     7ae:	3710      	adds	r7, #16
     7b0:	46bd      	mov	sp, r7
     7b2:	bd80      	pop	{r7, pc}
     7b4:	40010060 	.word	0x40010060
     7b8:	40010048 	.word	0x40010048
     7bc:	40010014 	.word	0x40010014
     7c0:	400100f4 	.word	0x400100f4

000007c4 <am_ctimer_isr>:
// CTIMER ISR
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	b082      	sub	sp, #8
     7c8:	af00      	add	r7, sp, #0
    uint32_t ui32Status, ui32IntMask;

    //
    // Set the GPIO indicating that the ISR has been entered
    //
    am_hal_gpio_out_bit_set(GPIO_CTIMER_ISR);
     7ca:	4b23      	ldr	r3, [pc, #140]	; (858 <am_ctimer_isr+0x94>)
     7cc:	2240      	movs	r2, #64	; 0x40
     7ce:	601a      	str	r2, [r3, #0]

    //
    // Get interrupt status and clear the interrupt.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
     7d0:	2000      	movs	r0, #0
     7d2:	f001 fc21 	bl	2018 <am_hal_ctimer_int_status_get>
     7d6:	6038      	str	r0, [r7, #0]
    am_hal_ctimer_int_clear(ui32Status);
     7d8:	6838      	ldr	r0, [r7, #0]
     7da:	f001 fc17 	bl	200c <am_hal_ctimer_int_clear>

    //
    // Determine which interrupt it is and set the GPIO.
    // This will indicate that the buck has pulsed.
    //
    ui32IntMask = ui32Status;
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	607b      	str	r3, [r7, #4]
    while ( ui32IntMask )
     7e2:	e012      	b.n	80a <am_ctimer_isr+0x46>
    {
        if ( ui32IntMask & 0x01 )
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	f003 0301 	and.w	r3, r3, #1
     7ea:	2b00      	cmp	r3, #0
     7ec:	d002      	beq.n	7f4 <am_ctimer_isr+0x30>
        {
            //
            // This is CTIMER A
            //
            am_hal_gpio_out_bit_set(GPIO_BUCKA);
     7ee:	4b1a      	ldr	r3, [pc, #104]	; (858 <am_ctimer_isr+0x94>)
     7f0:	2208      	movs	r2, #8
     7f2:	601a      	str	r2, [r3, #0]
        }

        if ( ui32IntMask & 0x02 )
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	f003 0302 	and.w	r3, r3, #2
     7fa:	2b00      	cmp	r3, #0
     7fc:	d002      	beq.n	804 <am_ctimer_isr+0x40>
        {
            //
            // This is CTIMER B
            //
            am_hal_gpio_out_bit_set(GPIO_BUCKB);
     7fe:	4b16      	ldr	r3, [pc, #88]	; (858 <am_ctimer_isr+0x94>)
     800:	2210      	movs	r2, #16
     802:	601a      	str	r2, [r3, #0]
        }

        //
        // Check the next 2 timers
        //
        ui32IntMask >>= 2;
     804:	687b      	ldr	r3, [r7, #4]
     806:	089b      	lsrs	r3, r3, #2
     808:	607b      	str	r3, [r7, #4]
    //
    // Determine which interrupt it is and set the GPIO.
    // This will indicate that the buck has pulsed.
    //
    ui32IntMask = ui32Status;
    while ( ui32IntMask )
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	2b00      	cmp	r3, #0
     80e:	d1e9      	bne.n	7e4 <am_ctimer_isr+0x20>
        ui32IntMask >>= 2;
    }

    //
    // And call the appropriate CTIMER ISR
    am_hal_ctimer_int_service(ui32Status);
     810:	6838      	ldr	r0, [r7, #0]
     812:	f001 fa8f 	bl	1d34 <am_hal_ctimer_int_service>

    //
    // Now that the buck has been handled, clear the appropriate GPIO.
    //
    ui32IntMask = ui32Status;
     816:	683b      	ldr	r3, [r7, #0]
     818:	607b      	str	r3, [r7, #4]
    while ( ui32IntMask )
     81a:	e012      	b.n	842 <am_ctimer_isr+0x7e>
    {
        if ( ui32IntMask & 0x01 )
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	f003 0301 	and.w	r3, r3, #1
     822:	2b00      	cmp	r3, #0
     824:	d002      	beq.n	82c <am_ctimer_isr+0x68>
        {
            //
            // This is CTIMER A
            //
            am_hal_gpio_out_bit_clear(GPIO_BUCKA);
     826:	4b0d      	ldr	r3, [pc, #52]	; (85c <am_ctimer_isr+0x98>)
     828:	2208      	movs	r2, #8
     82a:	601a      	str	r2, [r3, #0]
        }

        if ( ui32IntMask & 0x02 )
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	f003 0302 	and.w	r3, r3, #2
     832:	2b00      	cmp	r3, #0
     834:	d002      	beq.n	83c <am_ctimer_isr+0x78>
        {
            //
            // This is CTIMER B
            //
            am_hal_gpio_out_bit_clear(GPIO_BUCKB);
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <am_ctimer_isr+0x98>)
     838:	2210      	movs	r2, #16
     83a:	601a      	str	r2, [r3, #0]
        }

        //
        // Check the next 2 timers
        //
        ui32IntMask >>= 2;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	089b      	lsrs	r3, r3, #2
     840:	607b      	str	r3, [r7, #4]

    //
    // Now that the buck has been handled, clear the appropriate GPIO.
    //
    ui32IntMask = ui32Status;
    while ( ui32IntMask )
     842:	687b      	ldr	r3, [r7, #4]
     844:	2b00      	cmp	r3, #0
     846:	d1e9      	bne.n	81c <am_ctimer_isr+0x58>
    }

    //
    // Clear the GPIO indicating that the ISR is exiting.
    //
    am_hal_gpio_out_bit_clear(GPIO_CTIMER_ISR);
     848:	4b04      	ldr	r3, [pc, #16]	; (85c <am_ctimer_isr+0x98>)
     84a:	2240      	movs	r2, #64	; 0x40
     84c:	601a      	str	r2, [r3, #0]
}
     84e:	bf00      	nop
     850:	3708      	adds	r7, #8
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	bf00      	nop
     858:	40010090 	.word	0x40010090
     85c:	40010098 	.word	0x40010098

00000860 <am_gpio_isr>:
// GPIO ISR
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     860:	b580      	push	{r7, lr}
     862:	af00      	add	r7, sp, #0
    //
    // Delay for debounce.
    //
    am_util_delay_ms(200);
     864:	20c8      	movs	r0, #200	; 0xc8
     866:	f000 fa11 	bl	c8c <am_util_delay_ms>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     86a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     86e:	f04f 0100 	mov.w	r1, #0
     872:	f001 fc0f 	bl	2094 <am_hal_gpio_int_clear>

    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     876:	2100      	movs	r1, #0
     878:	4802      	ldr	r0, [pc, #8]	; (884 <am_gpio_isr+0x24>)
     87a:	f7ff fe65 	bl	548 <am_devices_led_toggle>
}
     87e:	bf00      	nop
     880:	bd80      	pop	{r7, pc}
     882:	bf00      	nop
     884:	10001014 	.word	0x10001014

00000888 <am_clkgen_isr>:
// RTC ISR
//
//*****************************************************************************
void
am_clkgen_isr(void)
{
     888:	b580      	push	{r7, lr}
     88a:	af00      	add	r7, sp, #0
    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     88c:	2008      	movs	r0, #8
     88e:	f001 fe7d 	bl	258c <am_hal_rtc_int_clear>

    //
    // Toggle LED 1.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 1);
     892:	2101      	movs	r1, #1
     894:	4804      	ldr	r0, [pc, #16]	; (8a8 <am_clkgen_isr+0x20>)
     896:	f7ff fe57 	bl	548 <am_devices_led_toggle>

    //
    // Increment counter.
    //
    g_ui32CountRTC++;
     89a:	4b04      	ldr	r3, [pc, #16]	; (8ac <am_clkgen_isr+0x24>)
     89c:	681b      	ldr	r3, [r3, #0]
     89e:	3301      	adds	r3, #1
     8a0:	4a02      	ldr	r2, [pc, #8]	; (8ac <am_clkgen_isr+0x24>)
     8a2:	6013      	str	r3, [r2, #0]
}
     8a4:	bf00      	nop
     8a6:	bd80      	pop	{r7, pc}
     8a8:	10001014 	.word	0x10001014
     8ac:	1000108c 	.word	0x1000108c

000008b0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b088      	sub	sp, #32
     8b4:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     8b6:	2000      	movs	r0, #0
     8b8:	f001 f9de 	bl	1c78 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     8bc:	48ae      	ldr	r0, [pc, #696]	; (b78 <main+0x2c8>)
     8be:	f001 f945 	bl	1b4c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     8c2:	f001 f92d 	bl	1b20 <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     8c6:	2001      	movs	r0, #1
     8c8:	f001 f9fe 	bl	1cc8 <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     8cc:	2000      	movs	r0, #0
     8ce:	f001 fe37 	bl	2540 <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     8d2:	f001 fe43 	bl	255c <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     8d6:	48a9      	ldr	r0, [pc, #676]	; (b7c <main+0x2cc>)
     8d8:	f000 fa88 	bl	dec <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(AM_BSP_UART_PRINT_INST);
     8dc:	2000      	movs	r0, #0
     8de:	f7ff fead 	bl	63c <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     8e2:	f001 f913 	bl	1b0c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Buck Zero-Cross Demo/Example\n");
     8e6:	48a6      	ldr	r0, [pc, #664]	; (b80 <main+0x2d0>)
     8e8:	f001 f8f2 	bl	1ad0 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(AM_BSP_UART_PRINT_INST);
     8ec:	2000      	movs	r0, #0
     8ee:	f7ff ff0b 	bl	708 <uart_disable>
#ifdef AM_PART_APOLLO2

    //
    // Turn OFF Flash1
    //
    AM_BFW(PWRCTRL, MEMEN, FLASH1, 0);
     8f2:	4aa4      	ldr	r2, [pc, #656]	; (b84 <main+0x2d4>)
     8f4:	4ba3      	ldr	r3, [pc, #652]	; (b84 <main+0x2d4>)
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     8fc:	6013      	str	r3, [r2, #0]
    while (AM_BFR(PWRCTRL, PWRONSTATUS, PD_FLAM1) != 0) {}
     8fe:	bf00      	nop
     900:	4ba1      	ldr	r3, [pc, #644]	; (b88 <main+0x2d8>)
     902:	681b      	ldr	r3, [r3, #0]
     904:	f003 0340 	and.w	r3, r3, #64	; 0x40
     908:	099b      	lsrs	r3, r3, #6
     90a:	2b00      	cmp	r3, #0
     90c:	d1f8      	bne.n	900 <main+0x50>

    //
    // Power down SRAM
    //
    AM_BFWe(PWRCTRL, SRAMPWDINSLEEP, SRAMSLEEPPOWERDOWN, ALLBUTLOWER8K);
     90e:	4a9f      	ldr	r2, [pc, #636]	; (b8c <main+0x2dc>)
     910:	4b9e      	ldr	r3, [pc, #632]	; (b8c <main+0x2dc>)
     912:	681b      	ldr	r3, [r3, #0]
     914:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     918:	f023 0307 	bic.w	r3, r3, #7
     91c:	f443 63ff 	orr.w	r3, r3, #2040	; 0x7f8
     920:	f043 0306 	orr.w	r3, r3, #6
     924:	6013      	str	r3, [r2, #0]
#endif // AM_PART_APOLLO2

    //
    // Configure the LEDs GPIO and button pins.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     926:	2105      	movs	r1, #5
     928:	4899      	ldr	r0, [pc, #612]	; (b90 <main+0x2e0>)
     92a:	f7ff fd8b 	bl	444 <am_devices_led_array_init>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	61fb      	str	r3, [r7, #28]
     934:	b672      	cpsid	i
     936:	4b97      	ldr	r3, [pc, #604]	; (b94 <main+0x2e4>)
     938:	2273      	movs	r2, #115	; 0x73
     93a:	601a      	str	r2, [r3, #0]
     93c:	4a96      	ldr	r2, [pc, #600]	; (b98 <main+0x2e8>)
     93e:	4b96      	ldr	r3, [pc, #600]	; (b98 <main+0x2e8>)
     940:	681b      	ldr	r3, [r3, #0]
     942:	f023 0307 	bic.w	r3, r3, #7
     946:	6013      	str	r3, [r2, #0]
     948:	4a94      	ldr	r2, [pc, #592]	; (b9c <main+0x2ec>)
     94a:	4b94      	ldr	r3, [pc, #592]	; (b9c <main+0x2ec>)
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     952:	f043 031a 	orr.w	r3, r3, #26
     956:	6013      	str	r3, [r2, #0]
     958:	4a91      	ldr	r2, [pc, #580]	; (ba0 <main+0x2f0>)
     95a:	4b91      	ldr	r3, [pc, #580]	; (ba0 <main+0x2f0>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     962:	6013      	str	r3, [r2, #0]
     964:	4b8b      	ldr	r3, [pc, #556]	; (b94 <main+0x2e4>)
     966:	2200      	movs	r2, #0
     968:	601a      	str	r2, [r3, #0]
     96a:	69fb      	ldr	r3, [r7, #28]
     96c:	f383 8810 	msr	PRIMASK, r3

    //
    // Turn the LEDs off.
    //
    am_devices_led_off(am_bsp_psLEDs, 0);
     970:	2100      	movs	r1, #0
     972:	4887      	ldr	r0, [pc, #540]	; (b90 <main+0x2e0>)
     974:	f7ff fd80 	bl	478 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
     978:	2101      	movs	r1, #1
     97a:	4885      	ldr	r0, [pc, #532]	; (b90 <main+0x2e0>)
     97c:	f7ff fd7c 	bl	478 <am_devices_led_off>

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
     980:	f3ef 8310 	mrs	r3, PRIMASK
     984:	61bb      	str	r3, [r7, #24]
     986:	b672      	cpsid	i
     988:	4b82      	ldr	r3, [pc, #520]	; (b94 <main+0x2e4>)
     98a:	2273      	movs	r2, #115	; 0x73
     98c:	601a      	str	r2, [r3, #0]
     98e:	4a82      	ldr	r2, [pc, #520]	; (b98 <main+0x2e8>)
     990:	4b81      	ldr	r3, [pc, #516]	; (b98 <main+0x2e8>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	f023 0308 	bic.w	r3, r3, #8
     998:	6013      	str	r3, [r2, #0]
     99a:	4b7e      	ldr	r3, [pc, #504]	; (b94 <main+0x2e4>)
     99c:	2200      	movs	r2, #0
     99e:	601a      	str	r2, [r3, #0]
     9a0:	69bb      	ldr	r3, [r7, #24]
     9a2:	f383 8810 	msr	PRIMASK, r3

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     9a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     9aa:	f04f 0100 	mov.w	r1, #0
     9ae:	f001 fb71 	bl	2094 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     9b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     9b6:	f04f 0100 	mov.w	r1, #0
     9ba:	f001 fb5b 	bl	2074 <am_hal_gpio_int_enable>

    //
    // Set the alarm repeat interval to be every second.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
     9be:	2007      	movs	r0, #7
     9c0:	f001 fdea 	bl	2598 <am_hal_rtc_alarm_interval_set>

    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     9c4:	2008      	movs	r0, #8
     9c6:	f001 fde1 	bl	258c <am_hal_rtc_int_clear>

    //
    // Enable the RTC alarm interrupt.
    //
    am_hal_rtc_int_enable(AM_HAL_RTC_INT_ALM);
     9ca:	2008      	movs	r0, #8
     9cc:	f001 fdd6 	bl	257c <am_hal_rtc_int_enable>

    //
    // Enable GPIO interrupts to the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     9d0:	201c      	movs	r0, #28
     9d2:	f001 fb71 	bl	20b8 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CLKGEN);
     9d6:	2012      	movs	r0, #18
     9d8:	f001 fb6e 	bl	20b8 <am_hal_interrupt_enable>

    //
    // Set the timer to be used for tracking the buck.
    //
    am_hal_sysctrl_buck_ctimer_isr_init(BUCK_TIMER);
     9dc:	2003      	movs	r0, #3
     9de:	f001 ff3d 	bl	285c <am_hal_sysctrl_buck_ctimer_isr_init>

    am_hal_gpio_pin_config(GPIO_BUCKA, AM_HAL_GPIO_OUTPUT);
     9e2:	f3ef 8310 	mrs	r3, PRIMASK
     9e6:	617b      	str	r3, [r7, #20]
     9e8:	b672      	cpsid	i
     9ea:	4b6a      	ldr	r3, [pc, #424]	; (b94 <main+0x2e4>)
     9ec:	2273      	movs	r2, #115	; 0x73
     9ee:	601a      	str	r2, [r3, #0]
     9f0:	4a6c      	ldr	r2, [pc, #432]	; (ba4 <main+0x2f4>)
     9f2:	4b6c      	ldr	r3, [pc, #432]	; (ba4 <main+0x2f4>)
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     9fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     9fe:	6013      	str	r3, [r2, #0]
     a00:	4a69      	ldr	r2, [pc, #420]	; (ba8 <main+0x2f8>)
     a02:	4b69      	ldr	r3, [pc, #420]	; (ba8 <main+0x2f8>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a0a:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     a0e:	6013      	str	r3, [r2, #0]
     a10:	4a66      	ldr	r2, [pc, #408]	; (bac <main+0x2fc>)
     a12:	4b66      	ldr	r3, [pc, #408]	; (bac <main+0x2fc>)
     a14:	681b      	ldr	r3, [r3, #0]
     a16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a1a:	6013      	str	r3, [r2, #0]
     a1c:	4b5d      	ldr	r3, [pc, #372]	; (b94 <main+0x2e4>)
     a1e:	2200      	movs	r2, #0
     a20:	601a      	str	r2, [r3, #0]
     a22:	697b      	ldr	r3, [r7, #20]
     a24:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_out_bit_clear(GPIO_BUCKA);
     a28:	4b61      	ldr	r3, [pc, #388]	; (bb0 <main+0x300>)
     a2a:	2208      	movs	r2, #8
     a2c:	601a      	str	r2, [r3, #0]

    am_hal_gpio_pin_config(GPIO_BUCKB, AM_HAL_GPIO_OUTPUT);
     a2e:	f3ef 8310 	mrs	r3, PRIMASK
     a32:	613b      	str	r3, [r7, #16]
     a34:	b672      	cpsid	i
     a36:	4b57      	ldr	r3, [pc, #348]	; (b94 <main+0x2e4>)
     a38:	2273      	movs	r2, #115	; 0x73
     a3a:	601a      	str	r2, [r3, #0]
     a3c:	4a59      	ldr	r2, [pc, #356]	; (ba4 <main+0x2f4>)
     a3e:	4b59      	ldr	r3, [pc, #356]	; (ba4 <main+0x2f4>)
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a4a:	6013      	str	r3, [r2, #0]
     a4c:	4a59      	ldr	r2, [pc, #356]	; (bb4 <main+0x304>)
     a4e:	4b59      	ldr	r3, [pc, #356]	; (bb4 <main+0x304>)
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     a56:	f043 0318 	orr.w	r3, r3, #24
     a5a:	6013      	str	r3, [r2, #0]
     a5c:	4a56      	ldr	r2, [pc, #344]	; (bb8 <main+0x308>)
     a5e:	4b56      	ldr	r3, [pc, #344]	; (bb8 <main+0x308>)
     a60:	681b      	ldr	r3, [r3, #0]
     a62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     a66:	6013      	str	r3, [r2, #0]
     a68:	4b4a      	ldr	r3, [pc, #296]	; (b94 <main+0x2e4>)
     a6a:	2200      	movs	r2, #0
     a6c:	601a      	str	r2, [r3, #0]
     a6e:	693b      	ldr	r3, [r7, #16]
     a70:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_out_bit_clear(GPIO_BUCKB);
     a74:	4b4e      	ldr	r3, [pc, #312]	; (bb0 <main+0x300>)
     a76:	2210      	movs	r2, #16
     a78:	601a      	str	r2, [r3, #0]

    am_hal_gpio_pin_config(GPIO_SLEEP, AM_HAL_GPIO_OUTPUT);
     a7a:	f3ef 8310 	mrs	r3, PRIMASK
     a7e:	60fb      	str	r3, [r7, #12]
     a80:	b672      	cpsid	i
     a82:	4b44      	ldr	r3, [pc, #272]	; (b94 <main+0x2e4>)
     a84:	2273      	movs	r2, #115	; 0x73
     a86:	601a      	str	r2, [r3, #0]
     a88:	4a46      	ldr	r2, [pc, #280]	; (ba4 <main+0x2f4>)
     a8a:	4b46      	ldr	r3, [pc, #280]	; (ba4 <main+0x2f4>)
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
     a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     a96:	6013      	str	r3, [r2, #0]
     a98:	4a46      	ldr	r2, [pc, #280]	; (bb4 <main+0x304>)
     a9a:	4b46      	ldr	r3, [pc, #280]	; (bb4 <main+0x304>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     aa2:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     aa6:	6013      	str	r3, [r2, #0]
     aa8:	4a43      	ldr	r2, [pc, #268]	; (bb8 <main+0x308>)
     aaa:	4b43      	ldr	r3, [pc, #268]	; (bb8 <main+0x308>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     ab2:	6013      	str	r3, [r2, #0]
     ab4:	4b37      	ldr	r3, [pc, #220]	; (b94 <main+0x2e4>)
     ab6:	2200      	movs	r2, #0
     ab8:	601a      	str	r2, [r3, #0]
     aba:	68fb      	ldr	r3, [r7, #12]
     abc:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_out_bit_clear(GPIO_SLEEP);
     ac0:	4b3b      	ldr	r3, [pc, #236]	; (bb0 <main+0x300>)
     ac2:	2220      	movs	r2, #32
     ac4:	601a      	str	r2, [r3, #0]

    //
    // GPIO 6 = am_ctimer_isr
    //
    am_hal_gpio_pin_config(GPIO_CTIMER_ISR, AM_HAL_GPIO_OUTPUT);
     ac6:	f3ef 8310 	mrs	r3, PRIMASK
     aca:	60bb      	str	r3, [r7, #8]
     acc:	b672      	cpsid	i
     ace:	4b31      	ldr	r3, [pc, #196]	; (b94 <main+0x2e4>)
     ad0:	2273      	movs	r2, #115	; 0x73
     ad2:	601a      	str	r2, [r3, #0]
     ad4:	4a33      	ldr	r2, [pc, #204]	; (ba4 <main+0x2f4>)
     ad6:	4b33      	ldr	r3, [pc, #204]	; (ba4 <main+0x2f4>)
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     ae2:	6013      	str	r3, [r2, #0]
     ae4:	4a33      	ldr	r2, [pc, #204]	; (bb4 <main+0x304>)
     ae6:	4b33      	ldr	r3, [pc, #204]	; (bb4 <main+0x304>)
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     aee:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     af2:	6013      	str	r3, [r2, #0]
     af4:	4a30      	ldr	r2, [pc, #192]	; (bb8 <main+0x308>)
     af6:	4b30      	ldr	r3, [pc, #192]	; (bb8 <main+0x308>)
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     afe:	6013      	str	r3, [r2, #0]
     b00:	4b24      	ldr	r3, [pc, #144]	; (b94 <main+0x2e4>)
     b02:	2200      	movs	r2, #0
     b04:	601a      	str	r2, [r3, #0]
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_out_bit_clear(GPIO_CTIMER_ISR);
     b0c:	4b28      	ldr	r3, [pc, #160]	; (bb0 <main+0x300>)
     b0e:	2240      	movs	r2, #64	; 0x40
     b10:	601a      	str	r2, [r3, #0]

    //
    // GPIO 7 = wiggler while waiting for buck trim completion
    //
    am_hal_gpio_pin_config(GPIO_WIGGLER, AM_HAL_GPIO_OUTPUT);
     b12:	f3ef 8310 	mrs	r3, PRIMASK
     b16:	607b      	str	r3, [r7, #4]
     b18:	b672      	cpsid	i
     b1a:	4b1e      	ldr	r3, [pc, #120]	; (b94 <main+0x2e4>)
     b1c:	2273      	movs	r2, #115	; 0x73
     b1e:	601a      	str	r2, [r3, #0]
     b20:	4a20      	ldr	r2, [pc, #128]	; (ba4 <main+0x2f4>)
     b22:	4b20      	ldr	r3, [pc, #128]	; (ba4 <main+0x2f4>)
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     b2e:	6013      	str	r3, [r2, #0]
     b30:	4a20      	ldr	r2, [pc, #128]	; (bb4 <main+0x304>)
     b32:	4b20      	ldr	r3, [pc, #128]	; (bb4 <main+0x304>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b3a:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     b3e:	6013      	str	r3, [r2, #0]
     b40:	4a1d      	ldr	r2, [pc, #116]	; (bb8 <main+0x308>)
     b42:	4b1d      	ldr	r3, [pc, #116]	; (bb8 <main+0x308>)
     b44:	681b      	ldr	r3, [r3, #0]
     b46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b4a:	6013      	str	r3, [r2, #0]
     b4c:	4b11      	ldr	r3, [pc, #68]	; (b94 <main+0x2e4>)
     b4e:	2200      	movs	r2, #0
     b50:	601a      	str	r2, [r3, #0]
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_out_bit_clear(GPIO_WIGGLER);
     b58:	4b15      	ldr	r3, [pc, #84]	; (bb0 <main+0x300>)
     b5a:	2280      	movs	r2, #128	; 0x80
     b5c:	601a      	str	r2, [r3, #0]

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
     b5e:	f001 fad3 	bl	2108 <am_hal_interrupt_master_enable>
    {
        //
        // Go to Deep Sleep.
        // First, set the GPIO to show we're going to sleep.
        //
        am_hal_gpio_out_bit_set(GPIO_SLEEP);
     b62:	4b16      	ldr	r3, [pc, #88]	; (bbc <main+0x30c>)
     b64:	2220      	movs	r2, #32
     b66:	601a      	str	r2, [r3, #0]

        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     b68:	2001      	movs	r0, #1
     b6a:	f001 fddd 	bl	2728 <am_hal_sysctrl_sleep>

        am_hal_gpio_out_bit_clear(GPIO_SLEEP);
     b6e:	4b10      	ldr	r3, [pc, #64]	; (bb0 <main+0x300>)
     b70:	2220      	movs	r2, #32
     b72:	601a      	str	r2, [r3, #0]

        while ( !am_hal_sysctrl_buck_update_complete() )
     b74:	e034      	b.n	be0 <main+0x330>
     b76:	bf00      	nop
     b78:	00002b88 	.word	0x00002b88
     b7c:	00001b45 	.word	0x00001b45
     b80:	00002b54 	.word	0x00002b54
     b84:	40021010 	.word	0x40021010
     b88:	40021014 	.word	0x40021014
     b8c:	4002100c 	.word	0x4002100c
     b90:	10001014 	.word	0x10001014
     b94:	40010060 	.word	0x40010060
     b98:	40010048 	.word	0x40010048
     b9c:	40010010 	.word	0x40010010
     ba0:	400100f0 	.word	0x400100f0
     ba4:	40010040 	.word	0x40010040
     ba8:	40010000 	.word	0x40010000
     bac:	400100e0 	.word	0x400100e0
     bb0:	40010098 	.word	0x40010098
     bb4:	40010004 	.word	0x40010004
     bb8:	400100e4 	.word	0x400100e4
     bbc:	40010090 	.word	0x40010090
        {
            am_hal_gpio_out_bit_toggle(GPIO_WIGGLER);
     bc0:	f3ef 8310 	mrs	r3, PRIMASK
     bc4:	603b      	str	r3, [r7, #0]
     bc6:	b672      	cpsid	i
     bc8:	4a0f      	ldr	r2, [pc, #60]	; (c08 <main+0x358>)
     bca:	4b0f      	ldr	r3, [pc, #60]	; (c08 <main+0x358>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	f083 0380 	eor.w	r3, r3, #128	; 0x80
     bd2:	6013      	str	r3, [r2, #0]
     bd4:	683b      	ldr	r3, [r7, #0]
     bd6:	f383 8810 	msr	PRIMASK, r3
            am_util_delay_us(1);
     bda:	2001      	movs	r0, #1
     bdc:	f000 f86e 	bl	cbc <am_util_delay_us>

        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);

        am_hal_gpio_out_bit_clear(GPIO_SLEEP);

        while ( !am_hal_sysctrl_buck_update_complete() )
     be0:	f001 feea 	bl	29b8 <am_hal_sysctrl_buck_update_complete>
     be4:	4603      	mov	r3, r0
     be6:	f083 0301 	eor.w	r3, r3, #1
     bea:	b2db      	uxtb	r3, r3
     bec:	2b00      	cmp	r3, #0
     bee:	d1e7      	bne.n	bc0 <main+0x310>
        {
            am_hal_gpio_out_bit_toggle(GPIO_WIGGLER);
            am_util_delay_us(1);
        }

        am_hal_gpio_out_bit_clear(GPIO_WIGGLER);
     bf0:	4b06      	ldr	r3, [pc, #24]	; (c0c <main+0x35c>)
     bf2:	2280      	movs	r2, #128	; 0x80
     bf4:	601a      	str	r2, [r3, #0]

        //
        // Buck workaround is completed.
        // Now, keep the buck operating for the rest of this second.
        //
        while ( g_ui32CountRTC & 1 ){};
     bf6:	bf00      	nop
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <main+0x360>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	f003 0301 	and.w	r3, r3, #1
     c00:	2b00      	cmp	r3, #0
     c02:	d1f9      	bne.n	bf8 <main+0x348>
    }
     c04:	e7ad      	b.n	b62 <main+0x2b2>
     c06:	bf00      	nop
     c08:	40010088 	.word	0x40010088
     c0c:	40010098 	.word	0x40010098
     c10:	1000108c 	.word	0x1000108c

00000c14 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     c14:	4811      	ldr	r0, [pc, #68]	; (c5c <zero_loop+0x12>)
     c16:	4912      	ldr	r1, [pc, #72]	; (c60 <zero_loop+0x16>)
     c18:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     c1a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     c1e:	4811      	ldr	r0, [pc, #68]	; (c64 <zero_loop+0x1a>)
     c20:	6801      	ldr	r1, [r0, #0]
     c22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     c26:	6001      	str	r1, [r0, #0]
     c28:	f3bf 8f4f 	dsb	sy
     c2c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     c30:	480d      	ldr	r0, [pc, #52]	; (c68 <zero_loop+0x1e>)
     c32:	490e      	ldr	r1, [pc, #56]	; (c6c <zero_loop+0x22>)
     c34:	4a0e      	ldr	r2, [pc, #56]	; (c70 <zero_loop+0x26>)

00000c36 <copy_loop>:
     c36:	f850 3b04 	ldr.w	r3, [r0], #4
     c3a:	f841 3b04 	str.w	r3, [r1], #4
     c3e:	4291      	cmp	r1, r2
     c40:	dbf9      	blt.n	c36 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     c42:	480c      	ldr	r0, [pc, #48]	; (c74 <zero_loop+0x2a>)
     c44:	490c      	ldr	r1, [pc, #48]	; (c78 <zero_loop+0x2e>)
     c46:	f04f 0200 	mov.w	r2, #0

00000c4a <zero_loop>:
     c4a:	4288      	cmp	r0, r1
     c4c:	bfb8      	it	lt
     c4e:	f840 2b04 	strlt.w	r2, [r0], #4
     c52:	dbfa      	blt.n	c4a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     c54:	f7ff fe2c 	bl	8b0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     c58:	be00      	bkpt	0x0000
}
     c5a:	bf00      	nop
     c5c:	e000ed08 	.word	0xe000ed08
     c60:	00000000 	.word	0x00000000
     c64:	e000ed88 	.word	0xe000ed88
     c68:	00002d3c 	.word	0x00002d3c
     c6c:	10001000 	.word	0x10001000
     c70:	1000108c 	.word	0x1000108c
     c74:	1000108c 	.word	0x1000108c
     c78:	100011f0 	.word	0x100011f0

00000c7c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     c7c:	b480      	push	{r7}
     c7e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     c80:	e7fe      	b.n	c80 <am_nmi_isr+0x4>
     c82:	bf00      	nop

00000c84 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     c84:	b480      	push	{r7}
     c86:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     c88:	e7fe      	b.n	c88 <am_adc_isr+0x4>
     c8a:	bf00      	nop

00000c8c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     c8c:	b580      	push	{r7, lr}
     c8e:	b084      	sub	sp, #16
     c90:	af00      	add	r7, sp, #0
     c92:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     c94:	f001 f808 	bl	1ca8 <am_hal_clkgen_sysclk_get>
     c98:	4602      	mov	r2, r0
     c9a:	4b07      	ldr	r3, [pc, #28]	; (cb8 <am_util_delay_ms+0x2c>)
     c9c:	fba3 2302 	umull	r2, r3, r3, r2
     ca0:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     ca2:	687a      	ldr	r2, [r7, #4]
     ca4:	fb02 f303 	mul.w	r3, r2, r3
     ca8:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     caa:	68f8      	ldr	r0, [r7, #12]
     cac:	f001 f9ce 	bl	204c <am_hal_flash_delay>
}
     cb0:	bf00      	nop
     cb2:	3710      	adds	r7, #16
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}
     cb8:	057619f1 	.word	0x057619f1

00000cbc <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b084      	sub	sp, #16
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MicroSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000000);
     cc4:	f000 fff0 	bl	1ca8 <am_hal_clkgen_sysclk_get>
     cc8:	4602      	mov	r2, r0
     cca:	4b07      	ldr	r3, [pc, #28]	; (ce8 <am_util_delay_us+0x2c>)
     ccc:	fba3 2302 	umull	r2, r3, r3, r2
     cd0:	0c9b      	lsrs	r3, r3, #18
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    uint32_t ui32Loops = ui32MicroSeconds *
     cd2:	687a      	ldr	r2, [r7, #4]
     cd4:	fb02 f303 	mul.w	r3, r2, r3
     cd8:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     cda:	68f8      	ldr	r0, [r7, #12]
     cdc:	f001 f9b6 	bl	204c <am_hal_flash_delay>
}
     ce0:	bf00      	nop
     ce2:	3710      	adds	r7, #16
     ce4:	46bd      	mov	sp, r7
     ce6:	bd80      	pop	{r7, pc}
     ce8:	165e9f81 	.word	0x165e9f81

00000cec <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     cec:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     cee:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     cf0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     cf2:	f000 f809 	bl	d08 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     cf6:	bd01      	pop	{r0, pc}
}
     cf8:	bf00      	nop
     cfa:	4618      	mov	r0, r3

00000cfc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     cfc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     cfe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     d00:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     d02:	4770      	bx	lr
}
     d04:	bf00      	nop
     d06:	4618      	mov	r0, r3

00000d08 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     d08:	b580      	push	{r7, lr}
     d0a:	b096      	sub	sp, #88	; 0x58
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     d10:	f107 030c 	add.w	r3, r7, #12
     d14:	2200      	movs	r2, #0
     d16:	601a      	str	r2, [r3, #0]
     d18:	605a      	str	r2, [r3, #4]
     d1a:	609a      	str	r2, [r3, #8]
     d1c:	60da      	str	r2, [r3, #12]
     d1e:	611a      	str	r2, [r3, #16]
     d20:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     d22:	2300      	movs	r3, #0
     d24:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     d28:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     d2a:	4b2e      	ldr	r3, [pc, #184]	; (de4 <am_util_faultisr_collect_data+0xdc>)
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d32:	b2db      	uxtb	r3, r3
     d34:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d3a:	0a1b      	lsrs	r3, r3, #8
     d3c:	b2db      	uxtb	r3, r3
     d3e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d44:	0c1b      	lsrs	r3, r3, #16
     d46:	b29b      	uxth	r3, r3
     d48:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     d4c:	4b26      	ldr	r3, [pc, #152]	; (de8 <am_util_faultisr_collect_data+0xe0>)
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     d52:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     d56:	b2db      	uxtb	r3, r3
     d58:	f003 0302 	and.w	r3, r3, #2
     d5c:	2b00      	cmp	r3, #0
     d5e:	d005      	beq.n	d6c <am_util_faultisr_collect_data+0x64>
     d60:	6879      	ldr	r1, [r7, #4]
     d62:	2006      	movs	r0, #6
     d64:	f7ff ffca 	bl	cfc <getStackedReg>
     d68:	4603      	mov	r3, r0
     d6a:	e001      	b.n	d70 <am_util_faultisr_collect_data+0x68>
     d6c:	f04f 33ff 	mov.w	r3, #4294967295
     d70:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     d72:	6879      	ldr	r1, [r7, #4]
     d74:	2000      	movs	r0, #0
     d76:	f7ff ffc1 	bl	cfc <getStackedReg>
     d7a:	4603      	mov	r3, r0
     d7c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     d7e:	6879      	ldr	r1, [r7, #4]
     d80:	2001      	movs	r0, #1
     d82:	f7ff ffbb 	bl	cfc <getStackedReg>
     d86:	4603      	mov	r3, r0
     d88:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     d8a:	6879      	ldr	r1, [r7, #4]
     d8c:	2002      	movs	r0, #2
     d8e:	f7ff ffb5 	bl	cfc <getStackedReg>
     d92:	4603      	mov	r3, r0
     d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     d96:	6879      	ldr	r1, [r7, #4]
     d98:	2003      	movs	r0, #3
     d9a:	f7ff ffaf 	bl	cfc <getStackedReg>
     d9e:	4603      	mov	r3, r0
     da0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     da2:	6879      	ldr	r1, [r7, #4]
     da4:	2004      	movs	r0, #4
     da6:	f7ff ffa9 	bl	cfc <getStackedReg>
     daa:	4603      	mov	r3, r0
     dac:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     dae:	6879      	ldr	r1, [r7, #4]
     db0:	2005      	movs	r0, #5
     db2:	f7ff ffa3 	bl	cfc <getStackedReg>
     db6:	4603      	mov	r3, r0
     db8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     dba:	6879      	ldr	r1, [r7, #4]
     dbc:	2006      	movs	r0, #6
     dbe:	f7ff ff9d 	bl	cfc <getStackedReg>
     dc2:	4603      	mov	r3, r0
     dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     dc6:	6879      	ldr	r1, [r7, #4]
     dc8:	2007      	movs	r0, #7
     dca:	f7ff ff97 	bl	cfc <getStackedReg>
     dce:	4603      	mov	r3, r0
     dd0:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     dd2:	f107 030c 	add.w	r3, r7, #12
     dd6:	4618      	mov	r0, r3
     dd8:	f001 f9a2 	bl	2120 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     ddc:	2300      	movs	r3, #0
     dde:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     de0:	e7fe      	b.n	de0 <am_util_faultisr_collect_data+0xd8>
     de2:	bf00      	nop
     de4:	e000ed28 	.word	0xe000ed28
     de8:	e000ed38 	.word	0xe000ed38

00000dec <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     dec:	b480      	push	{r7}
     dee:	b083      	sub	sp, #12
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     df4:	4a04      	ldr	r2, [pc, #16]	; (e08 <am_util_stdio_printf_init+0x1c>)
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	6013      	str	r3, [r2, #0]
}
     dfa:	bf00      	nop
     dfc:	370c      	adds	r7, #12
     dfe:	46bd      	mov	sp, r7
     e00:	f85d 7b04 	ldr.w	r7, [sp], #4
     e04:	4770      	bx	lr
     e06:	bf00      	nop
     e08:	100011ac 	.word	0x100011ac

00000e0c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     e0c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     e10:	b096      	sub	sp, #88	; 0x58
     e12:	af00      	add	r7, sp, #0
     e14:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     e18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e1c:	0025      	movs	r5, r4
     e1e:	2600      	movs	r6, #0
     e20:	ea55 0306 	orrs.w	r3, r5, r6
     e24:	f000 809e 	beq.w	f64 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     e28:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e2c:	0862      	lsrs	r2, r4, #1
     e2e:	ea4f 0133 	mov.w	r1, r3, rrx
     e32:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e36:	ea4f 0893 	mov.w	r8, r3, lsr #2
     e3a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     e3e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     e42:	eb11 0308 	adds.w	r3, r1, r8
     e46:	eb42 0409 	adc.w	r4, r2, r9
     e4a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     e4e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     e52:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     e56:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     e5a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     e5e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     e62:	eb13 030a 	adds.w	r3, r3, sl
     e66:	eb44 040b 	adc.w	r4, r4, fp
     e6a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     e6e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     e72:	0a1a      	lsrs	r2, r3, #8
     e74:	62ba      	str	r2, [r7, #40]	; 0x28
     e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e78:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     e7c:	62ba      	str	r2, [r7, #40]	; 0x28
     e7e:	0a23      	lsrs	r3, r4, #8
     e80:	62fb      	str	r3, [r7, #44]	; 0x2c
     e82:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     e86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     e8a:	18c9      	adds	r1, r1, r3
     e8c:	eb42 0204 	adc.w	r2, r2, r4
     e90:	460b      	mov	r3, r1
     e92:	4614      	mov	r4, r2
     e94:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     e98:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     e9c:	0c1a      	lsrs	r2, r3, #16
     e9e:	623a      	str	r2, [r7, #32]
     ea0:	6a3a      	ldr	r2, [r7, #32]
     ea2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     ea6:	623a      	str	r2, [r7, #32]
     ea8:	0c23      	lsrs	r3, r4, #16
     eaa:	627b      	str	r3, [r7, #36]	; 0x24
     eac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     eb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     eb4:	18c9      	adds	r1, r1, r3
     eb6:	eb42 0204 	adc.w	r2, r2, r4
     eba:	460b      	mov	r3, r1
     ebc:	4614      	mov	r4, r2
     ebe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     ec2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ec6:	0023      	movs	r3, r4
     ec8:	603b      	str	r3, [r7, #0]
     eca:	2300      	movs	r3, #0
     ecc:	607b      	str	r3, [r7, #4]
     ece:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ed2:	e897 0006 	ldmia.w	r7, {r1, r2}
     ed6:	18c9      	adds	r1, r1, r3
     ed8:	eb42 0204 	adc.w	r2, r2, r4
     edc:	460b      	mov	r3, r1
     ede:	4614      	mov	r4, r2
     ee0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     ee4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ee8:	08da      	lsrs	r2, r3, #3
     eea:	613a      	str	r2, [r7, #16]
     eec:	693a      	ldr	r2, [r7, #16]
     eee:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     ef2:	613a      	str	r2, [r7, #16]
     ef4:	08e3      	lsrs	r3, r4, #3
     ef6:	617b      	str	r3, [r7, #20]
     ef8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     efc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     f00:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     f04:	18db      	adds	r3, r3, r3
     f06:	eb44 0404 	adc.w	r4, r4, r4
     f0a:	00a2      	lsls	r2, r4, #2
     f0c:	60fa      	str	r2, [r7, #12]
     f0e:	68fa      	ldr	r2, [r7, #12]
     f10:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     f14:	60fa      	str	r2, [r7, #12]
     f16:	009a      	lsls	r2, r3, #2
     f18:	60ba      	str	r2, [r7, #8]
     f1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     f1e:	18c9      	adds	r1, r1, r3
     f20:	eb42 0204 	adc.w	r2, r2, r4
     f24:	460b      	mov	r3, r1
     f26:	4614      	mov	r4, r2
     f28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     f2c:	1acb      	subs	r3, r1, r3
     f2e:	eb62 0404 	sbc.w	r4, r2, r4
     f32:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     f36:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     f3a:	3306      	adds	r3, #6
     f3c:	f144 0400 	adc.w	r4, r4, #0
     f40:	091a      	lsrs	r2, r3, #4
     f42:	61ba      	str	r2, [r7, #24]
     f44:	69ba      	ldr	r2, [r7, #24]
     f46:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     f4a:	61ba      	str	r2, [r7, #24]
     f4c:	0923      	lsrs	r3, r4, #4
     f4e:	61fb      	str	r3, [r7, #28]
     f50:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     f54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     f58:	18c9      	adds	r1, r1, r3
     f5a:	eb42 0204 	adc.w	r2, r2, r4
     f5e:	460b      	mov	r3, r1
     f60:	4614      	mov	r4, r2
     f62:	e029      	b.n	fb8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f66:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     f6a:	085a      	lsrs	r2, r3, #1
     f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     f6e:	089b      	lsrs	r3, r3, #2
     f70:	4413      	add	r3, r2
     f72:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f76:	091b      	lsrs	r3, r3, #4
     f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     f7a:	4413      	add	r3, r2
     f7c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f80:	0a1b      	lsrs	r3, r3, #8
     f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     f84:	4413      	add	r3, r2
     f86:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f8a:	0c1b      	lsrs	r3, r3, #16
     f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     f8e:	4413      	add	r3, r2
     f90:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f94:	08db      	lsrs	r3, r3, #3
     f96:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     f9a:	4613      	mov	r3, r2
     f9c:	009b      	lsls	r3, r3, #2
     f9e:	4413      	add	r3, r2
     fa0:	005b      	lsls	r3, r3, #1
     fa2:	461a      	mov	r2, r3
     fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     fa6:	1a9b      	subs	r3, r3, r2
     fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fac:	3306      	adds	r3, #6
     fae:	091a      	lsrs	r2, r3, #4
     fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     fb2:	4413      	add	r3, r2
     fb4:	f04f 0400 	mov.w	r4, #0
    }
}
     fb8:	4618      	mov	r0, r3
     fba:	4621      	mov	r1, r4
     fbc:	3758      	adds	r7, #88	; 0x58
     fbe:	46bd      	mov	sp, r7
     fc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     fc4:	4770      	bx	lr
     fc6:	bf00      	nop

00000fc8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     fc8:	b590      	push	{r4, r7, lr}
     fca:	b085      	sub	sp, #20
     fcc:	af00      	add	r7, sp, #0
     fce:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     fd2:	683a      	ldr	r2, [r7, #0]
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	4313      	orrs	r3, r2
     fd8:	2b00      	cmp	r3, #0
     fda:	bf0c      	ite	eq
     fdc:	2301      	moveq	r3, #1
     fde:	2300      	movne	r3, #0
     fe0:	b2db      	uxtb	r3, r3
     fe2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     fe4:	e008      	b.n	ff8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
     fea:	f7ff ff0f 	bl	e0c <divu64_10>
     fee:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     ff2:	68fb      	ldr	r3, [r7, #12]
     ff4:	3301      	adds	r3, #1
     ff6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     ff8:	e897 0018 	ldmia.w	r7, {r3, r4}
     ffc:	4323      	orrs	r3, r4
     ffe:	d1f2      	bne.n	fe6 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
    1000:	68fb      	ldr	r3, [r7, #12]
}
    1002:	4618      	mov	r0, r3
    1004:	3714      	adds	r7, #20
    1006:	46bd      	mov	sp, r7
    1008:	bd90      	pop	{r4, r7, pc}
    100a:	bf00      	nop

0000100c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    100c:	b590      	push	{r4, r7, lr}
    100e:	b083      	sub	sp, #12
    1010:	af00      	add	r7, sp, #0
    1012:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    1016:	e897 0018 	ldmia.w	r7, {r3, r4}
    101a:	2b00      	cmp	r3, #0
    101c:	f174 0300 	sbcs.w	r3, r4, #0
    1020:	da06      	bge.n	1030 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    1022:	e897 0018 	ldmia.w	r7, {r3, r4}
    1026:	425b      	negs	r3, r3
    1028:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    102c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    1030:	e897 0018 	ldmia.w	r7, {r3, r4}
    1034:	4618      	mov	r0, r3
    1036:	4621      	mov	r1, r4
    1038:	f7ff ffc6 	bl	fc8 <ndigits_in_u64>
    103c:	4603      	mov	r3, r0
}
    103e:	4618      	mov	r0, r3
    1040:	370c      	adds	r7, #12
    1042:	46bd      	mov	sp, r7
    1044:	bd90      	pop	{r4, r7, pc}
    1046:	bf00      	nop

00001048 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    1048:	b490      	push	{r4, r7}
    104a:	b084      	sub	sp, #16
    104c:	af00      	add	r7, sp, #0
    104e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    1052:	6839      	ldr	r1, [r7, #0]
    1054:	687a      	ldr	r2, [r7, #4]
    1056:	430a      	orrs	r2, r1
    1058:	2a00      	cmp	r2, #0
    105a:	bf0c      	ite	eq
    105c:	2201      	moveq	r2, #1
    105e:	2200      	movne	r2, #0
    1060:	b2d2      	uxtb	r2, r2
    1062:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    1064:	e00a      	b.n	107c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    1066:	e897 0006 	ldmia.w	r7, {r1, r2}
    106a:	090b      	lsrs	r3, r1, #4
    106c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    1070:	0914      	lsrs	r4, r2, #4
    1072:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    1076:	68fa      	ldr	r2, [r7, #12]
    1078:	3201      	adds	r2, #1
    107a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    107c:	e897 0006 	ldmia.w	r7, {r1, r2}
    1080:	430a      	orrs	r2, r1
    1082:	d1f0      	bne.n	1066 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
    1084:	68fb      	ldr	r3, [r7, #12]
}
    1086:	4618      	mov	r0, r3
    1088:	3710      	adds	r7, #16
    108a:	46bd      	mov	sp, r7
    108c:	bc90      	pop	{r4, r7}
    108e:	4770      	bx	lr

00001090 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    1090:	b480      	push	{r7}
    1092:	b087      	sub	sp, #28
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
    1098:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    109a:	2300      	movs	r3, #0
    109c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    109e:	2300      	movs	r3, #0
    10a0:	613b      	str	r3, [r7, #16]
    10a2:	2300      	movs	r3, #0
    10a4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b2d      	cmp	r3, #45	; 0x2d
    10ac:	d11b      	bne.n	10e6 <decstr_to_int+0x56>
    {
        bNeg = true;
    10ae:	2301      	movs	r3, #1
    10b0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	3301      	adds	r3, #1
    10b6:	607b      	str	r3, [r7, #4]
        uCnt++;
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	3301      	adds	r3, #1
    10bc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    10be:	e012      	b.n	10e6 <decstr_to_int+0x56>
    {
        ++uCnt;
    10c0:	68fb      	ldr	r3, [r7, #12]
    10c2:	3301      	adds	r3, #1
    10c4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    10c6:	693a      	ldr	r2, [r7, #16]
    10c8:	4613      	mov	r3, r2
    10ca:	009b      	lsls	r3, r3, #2
    10cc:	4413      	add	r3, r2
    10ce:	005b      	lsls	r3, r3, #1
    10d0:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	461a      	mov	r2, r3
    10d8:	693b      	ldr	r3, [r7, #16]
    10da:	4413      	add	r3, r2
    10dc:	3b30      	subs	r3, #48	; 0x30
    10de:	613b      	str	r3, [r7, #16]
        pcStr++;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	3301      	adds	r3, #1
    10e4:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b2f      	cmp	r3, #47	; 0x2f
    10ec:	d903      	bls.n	10f6 <decstr_to_int+0x66>
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b39      	cmp	r3, #57	; 0x39
    10f4:	d9e4      	bls.n	10c0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
    10f6:	683b      	ldr	r3, [r7, #0]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d002      	beq.n	1102 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    10fc:	683b      	ldr	r3, [r7, #0]
    10fe:	68fa      	ldr	r2, [r7, #12]
    1100:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    1102:	7dfb      	ldrb	r3, [r7, #23]
    1104:	2b00      	cmp	r3, #0
    1106:	d002      	beq.n	110e <decstr_to_int+0x7e>
    1108:	693b      	ldr	r3, [r7, #16]
    110a:	425b      	negs	r3, r3
    110c:	e000      	b.n	1110 <decstr_to_int+0x80>
    110e:	693b      	ldr	r3, [r7, #16]
}
    1110:	4618      	mov	r0, r3
    1112:	371c      	adds	r7, #28
    1114:	46bd      	mov	sp, r7
    1116:	f85d 7b04 	ldr.w	r7, [sp], #4
    111a:	4770      	bx	lr

0000111c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    111c:	b590      	push	{r4, r7, lr}
    111e:	b091      	sub	sp, #68	; 0x44
    1120:	af00      	add	r7, sp, #0
    1122:	e9c7 0102 	strd	r0, r1, [r7, #8]
    1126:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    1128:	2300      	movs	r3, #0
    112a:	63fb      	str	r3, [r7, #60]	; 0x3c
    112c:	2300      	movs	r3, #0
    112e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    1130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    1134:	f7ff fe6a 	bl	e0c <divu64_10>
    1138:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    113c:	68b9      	ldr	r1, [r7, #8]
    113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1140:	4613      	mov	r3, r2
    1142:	009b      	lsls	r3, r3, #2
    1144:	4413      	add	r3, r2
    1146:	005b      	lsls	r3, r3, #1
    1148:	1acb      	subs	r3, r1, r3
    114a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    114e:	1c5a      	adds	r2, r3, #1
    1150:	63fa      	str	r2, [r7, #60]	; 0x3c
    1152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1154:	b2d2      	uxtb	r2, r2
    1156:	3230      	adds	r2, #48	; 0x30
    1158:	b2d2      	uxtb	r2, r2
    115a:	f107 0140 	add.w	r1, r7, #64	; 0x40
    115e:	440b      	add	r3, r1
    1160:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    1164:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    1168:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    116c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    1170:	4323      	orrs	r3, r4
    1172:	d1dd      	bne.n	1130 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1176:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    1178:	687b      	ldr	r3, [r7, #4]
    117a:	2b00      	cmp	r3, #0
    117c:	d011      	beq.n	11a2 <uint64_to_str+0x86>
    {
        while ( ix-- )
    117e:	e008      	b.n	1192 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    1180:	687b      	ldr	r3, [r7, #4]
    1182:	1c5a      	adds	r2, r3, #1
    1184:	607a      	str	r2, [r7, #4]
    1186:	f107 0110 	add.w	r1, r7, #16
    118a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    118c:	440a      	add	r2, r1
    118e:	7812      	ldrb	r2, [r2, #0]
    1190:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    1192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1194:	1e5a      	subs	r2, r3, #1
    1196:	63fa      	str	r2, [r7, #60]	; 0x3c
    1198:	2b00      	cmp	r3, #0
    119a:	d1f1      	bne.n	1180 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	2200      	movs	r2, #0
    11a0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    11a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    11a4:	4618      	mov	r0, r3
    11a6:	3744      	adds	r7, #68	; 0x44
    11a8:	46bd      	mov	sp, r7
    11aa:	bd90      	pop	{r4, r7, pc}

000011ac <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    11ac:	b4b0      	push	{r4, r5, r7}
    11ae:	b08d      	sub	sp, #52	; 0x34
    11b0:	af00      	add	r7, sp, #0
    11b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
    11b6:	607a      	str	r2, [r7, #4]
    11b8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    11ba:	2300      	movs	r3, #0
    11bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    11be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    11c2:	4313      	orrs	r3, r2
    11c4:	d131      	bne.n	122a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    11c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11c8:	1c5a      	adds	r2, r3, #1
    11ca:	62fa      	str	r2, [r7, #44]	; 0x2c
    11cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
    11d0:	4413      	add	r3, r2
    11d2:	2230      	movs	r2, #48	; 0x30
    11d4:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    11d8:	e027      	b.n	122a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    11da:	7a3b      	ldrb	r3, [r7, #8]
    11dc:	f003 030f 	and.w	r3, r3, #15
    11e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    11e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    11e8:	2b09      	cmp	r3, #9
    11ea:	d90a      	bls.n	1202 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    11ec:	78fb      	ldrb	r3, [r7, #3]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d001      	beq.n	11f6 <uint64_to_hexstr+0x4a>
    11f2:	2227      	movs	r2, #39	; 0x27
    11f4:	e000      	b.n	11f8 <uint64_to_hexstr+0x4c>
    11f6:	2207      	movs	r2, #7
    11f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    11fc:	4413      	add	r3, r2
    11fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    1202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1204:	1c5a      	adds	r2, r3, #1
    1206:	62fa      	str	r2, [r7, #44]	; 0x2c
    1208:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    120c:	3230      	adds	r2, #48	; 0x30
    120e:	b2d2      	uxtb	r2, r2
    1210:	f107 0130 	add.w	r1, r7, #48	; 0x30
    1214:	440b      	add	r3, r1
    1216:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    121a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    121e:	0914      	lsrs	r4, r2, #4
    1220:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    1224:	091d      	lsrs	r5, r3, #4
    1226:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    122a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    122e:	4313      	orrs	r3, r2
    1230:	d1d3      	bne.n	11da <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1234:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	2b00      	cmp	r3, #0
    123a:	d011      	beq.n	1260 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    123c:	e008      	b.n	1250 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	1c5a      	adds	r2, r3, #1
    1242:	607a      	str	r2, [r7, #4]
    1244:	f107 0110 	add.w	r1, r7, #16
    1248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    124a:	440a      	add	r2, r1
    124c:	7812      	ldrb	r2, [r2, #0]
    124e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    1250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1252:	1e5a      	subs	r2, r3, #1
    1254:	62fa      	str	r2, [r7, #44]	; 0x2c
    1256:	2b00      	cmp	r3, #0
    1258:	d1f1      	bne.n	123e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	2200      	movs	r2, #0
    125e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    1260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1262:	4618      	mov	r0, r3
    1264:	3734      	adds	r7, #52	; 0x34
    1266:	46bd      	mov	sp, r7
    1268:	bcb0      	pop	{r4, r5, r7}
    126a:	4770      	bx	lr

0000126c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    126c:	b480      	push	{r7}
    126e:	b085      	sub	sp, #20
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    1274:	2300      	movs	r3, #0
    1276:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	2b00      	cmp	r3, #0
    127c:	d104      	bne.n	1288 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	e009      	b.n	1296 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	3301      	adds	r3, #1
    1286:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	1c5a      	adds	r2, r3, #1
    128c:	607a      	str	r2, [r7, #4]
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	2b00      	cmp	r3, #0
    1292:	d1f6      	bne.n	1282 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
    1294:	68fb      	ldr	r3, [r7, #12]
}
    1296:	4618      	mov	r0, r3
    1298:	3714      	adds	r7, #20
    129a:	46bd      	mov	sp, r7
    129c:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a0:	4770      	bx	lr
    12a2:	bf00      	nop

000012a4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    12a4:	b480      	push	{r7}
    12a6:	b087      	sub	sp, #28
    12a8:	af00      	add	r7, sp, #0
    12aa:	60f8      	str	r0, [r7, #12]
    12ac:	460b      	mov	r3, r1
    12ae:	607a      	str	r2, [r7, #4]
    12b0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    12b2:	2300      	movs	r3, #0
    12b4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	2b00      	cmp	r3, #0
    12ba:	dc0c      	bgt.n	12d6 <padbuffer+0x32>
    {
        return i32Cnt;
    12bc:	697b      	ldr	r3, [r7, #20]
    12be:	e010      	b.n	12e2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d004      	beq.n	12d0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	1c5a      	adds	r2, r3, #1
    12ca:	60fa      	str	r2, [r7, #12]
    12cc:	7afa      	ldrb	r2, [r7, #11]
    12ce:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    12d0:	697b      	ldr	r3, [r7, #20]
    12d2:	3301      	adds	r3, #1
    12d4:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	1e5a      	subs	r2, r3, #1
    12da:	607a      	str	r2, [r7, #4]
    12dc:	2b00      	cmp	r3, #0
    12de:	d1ef      	bne.n	12c0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
    12e0:	697b      	ldr	r3, [r7, #20]
}
    12e2:	4618      	mov	r0, r3
    12e4:	371c      	adds	r7, #28
    12e6:	46bd      	mov	sp, r7
    12e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ec:	4770      	bx	lr
    12ee:	bf00      	nop

000012f0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    12f0:	b590      	push	{r4, r7, lr}
    12f2:	b08f      	sub	sp, #60	; 0x3c
    12f4:	af00      	add	r7, sp, #0
    12f6:	60f8      	str	r0, [r7, #12]
    12f8:	60b9      	str	r1, [r7, #8]
    12fa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
    12fc:	68bb      	ldr	r3, [r7, #8]
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
    1302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1304:	2b03      	cmp	r3, #3
    1306:	dc02      	bgt.n	130e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    1308:	f06f 0302 	mvn.w	r3, #2
    130c:	e0d4      	b.n	14b8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
    130e:	edd7 7a03 	vldr	s15, [r7, #12]
    1312:	eef5 7a40 	vcmp.f32	s15, #0.0
    1316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    131a:	d104      	bne.n	1326 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    131c:	68bb      	ldr	r3, [r7, #8]
    131e:	4a68      	ldr	r2, [pc, #416]	; (14c0 <ftoa+0x1d0>)
    1320:	601a      	str	r2, [r3, #0]
        return 3;
    1322:	2303      	movs	r3, #3
    1324:	e0c8      	b.n	14b8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
    1326:	68bb      	ldr	r3, [r7, #8]
    1328:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    132e:	697b      	ldr	r3, [r7, #20]
    1330:	15db      	asrs	r3, r3, #23
    1332:	b2db      	uxtb	r3, r3
    1334:	3b7f      	subs	r3, #127	; 0x7f
    1336:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    1338:	697b      	ldr	r3, [r7, #20]
    133a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    133e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1342:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
    1344:	2300      	movs	r3, #0
    1346:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    1348:	2300      	movs	r3, #0
    134a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    134c:	6a3b      	ldr	r3, [r7, #32]
    134e:	2b1e      	cmp	r3, #30
    1350:	dd02      	ble.n	1358 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    1352:	f06f 0301 	mvn.w	r3, #1
    1356:	e0af      	b.n	14b8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
    1358:	6a3b      	ldr	r3, [r7, #32]
    135a:	f113 0f17 	cmn.w	r3, #23
    135e:	da02      	bge.n	1366 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    1360:	f04f 33ff 	mov.w	r3, #4294967295
    1364:	e0a8      	b.n	14b8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
    1366:	6a3b      	ldr	r3, [r7, #32]
    1368:	2b16      	cmp	r3, #22
    136a:	dd06      	ble.n	137a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    136c:	6a3b      	ldr	r3, [r7, #32]
    136e:	3b17      	subs	r3, #23
    1370:	69fa      	ldr	r2, [r7, #28]
    1372:	fa02 f303 	lsl.w	r3, r2, r3
    1376:	637b      	str	r3, [r7, #52]	; 0x34
    1378:	e01a      	b.n	13b0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    137a:	6a3b      	ldr	r3, [r7, #32]
    137c:	2b00      	cmp	r3, #0
    137e:	db0f      	blt.n	13a0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    1380:	6a3b      	ldr	r3, [r7, #32]
    1382:	f1c3 0317 	rsb	r3, r3, #23
    1386:	69fa      	ldr	r2, [r7, #28]
    1388:	fa42 f303 	asr.w	r3, r2, r3
    138c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    138e:	6a3b      	ldr	r3, [r7, #32]
    1390:	3301      	adds	r3, #1
    1392:	69fa      	ldr	r2, [r7, #28]
    1394:	fa02 f303 	lsl.w	r3, r2, r3
    1398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    139c:	633b      	str	r3, [r7, #48]	; 0x30
    139e:	e007      	b.n	13b0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    13a0:	69fb      	ldr	r3, [r7, #28]
    13a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    13a6:	6a3b      	ldr	r3, [r7, #32]
    13a8:	43db      	mvns	r3, r3
    13aa:	fa42 f303 	asr.w	r3, r2, r3
    13ae:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    13b0:	697b      	ldr	r3, [r7, #20]
    13b2:	2b00      	cmp	r3, #0
    13b4:	da04      	bge.n	13c0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	1c5a      	adds	r2, r3, #1
    13ba:	60ba      	str	r2, [r7, #8]
    13bc:	222d      	movs	r2, #45	; 0x2d
    13be:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    13c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13c2:	2b00      	cmp	r3, #0
    13c4:	d105      	bne.n	13d2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    13c6:	68bb      	ldr	r3, [r7, #8]
    13c8:	1c5a      	adds	r2, r3, #1
    13ca:	60ba      	str	r2, [r7, #8]
    13cc:	2230      	movs	r2, #48	; 0x30
    13ce:	701a      	strb	r2, [r3, #0]
    13d0:	e021      	b.n	1416 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    13d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d4:	2b00      	cmp	r3, #0
    13d6:	dd08      	ble.n	13ea <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    13d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13da:	ea4f 74e3 	mov.w	r4, r3, asr #31
    13de:	68ba      	ldr	r2, [r7, #8]
    13e0:	4618      	mov	r0, r3
    13e2:	4621      	mov	r1, r4
    13e4:	f7ff fe9a 	bl	111c <uint64_to_str>
    13e8:	e011      	b.n	140e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    13ea:	68bb      	ldr	r3, [r7, #8]
    13ec:	1c5a      	adds	r2, r3, #1
    13ee:	60ba      	str	r2, [r7, #8]
    13f0:	222d      	movs	r2, #45	; 0x2d
    13f2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    13f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13f6:	425b      	negs	r3, r3
    13f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    13fc:	68ba      	ldr	r2, [r7, #8]
    13fe:	4618      	mov	r0, r3
    1400:	4621      	mov	r1, r4
    1402:	f7ff fe8b 	bl	111c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1406:	e002      	b.n	140e <ftoa+0x11e>
        {
            pcBuf++;
    1408:	68bb      	ldr	r3, [r7, #8]
    140a:	3301      	adds	r3, #1
    140c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    140e:	68bb      	ldr	r3, [r7, #8]
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	2b00      	cmp	r3, #0
    1414:	d1f8      	bne.n	1408 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    1416:	68bb      	ldr	r3, [r7, #8]
    1418:	1c5a      	adds	r2, r3, #1
    141a:	60ba      	str	r2, [r7, #8]
    141c:	222e      	movs	r2, #46	; 0x2e
    141e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1422:	2b00      	cmp	r3, #0
    1424:	d105      	bne.n	1432 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    1426:	68bb      	ldr	r3, [r7, #8]
    1428:	1c5a      	adds	r2, r3, #1
    142a:	60ba      	str	r2, [r7, #8]
    142c:	2230      	movs	r2, #48	; 0x30
    142e:	701a      	strb	r2, [r3, #0]
    1430:	e03c      	b.n	14ac <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1432:	68ba      	ldr	r2, [r7, #8]
    1434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1436:	1ad3      	subs	r3, r2, r3
    1438:	6aba      	ldr	r2, [r7, #40]	; 0x28
    143a:	1ad3      	subs	r3, r2, r3
    143c:	3b01      	subs	r3, #1
    143e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1440:	69ba      	ldr	r2, [r7, #24]
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	4293      	cmp	r3, r2
    1446:	bfa8      	it	ge
    1448:	4613      	movge	r3, r2
    144a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    144c:	2300      	movs	r3, #0
    144e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1450:	e015      	b.n	147e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1454:	4613      	mov	r3, r2
    1456:	009b      	lsls	r3, r3, #2
    1458:	4413      	add	r3, r2
    145a:	005b      	lsls	r3, r3, #1
    145c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    145e:	68bb      	ldr	r3, [r7, #8]
    1460:	1c5a      	adds	r2, r3, #1
    1462:	60ba      	str	r2, [r7, #8]
    1464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1466:	1612      	asrs	r2, r2, #24
    1468:	b2d2      	uxtb	r2, r2
    146a:	3230      	adds	r2, #48	; 0x30
    146c:	b2d2      	uxtb	r2, r2
    146e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1472:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1476:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    1478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    147a:	3301      	adds	r3, #1
    147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    147e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1480:	69bb      	ldr	r3, [r7, #24]
    1482:	429a      	cmp	r2, r3
    1484:	dbe5      	blt.n	1452 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    1486:	68bb      	ldr	r3, [r7, #8]
    1488:	3b01      	subs	r3, #1
    148a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    148c:	e002      	b.n	1494 <ftoa+0x1a4>
        {
            --pcBuf;
    148e:	68bb      	ldr	r3, [r7, #8]
    1490:	3b01      	subs	r3, #1
    1492:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    1494:	68bb      	ldr	r3, [r7, #8]
    1496:	781b      	ldrb	r3, [r3, #0]
    1498:	2b30      	cmp	r3, #48	; 0x30
    149a:	d104      	bne.n	14a6 <ftoa+0x1b6>
    149c:	68bb      	ldr	r3, [r7, #8]
    149e:	3b01      	subs	r3, #1
    14a0:	781b      	ldrb	r3, [r3, #0]
    14a2:	2b2e      	cmp	r3, #46	; 0x2e
    14a4:	d1f3      	bne.n	148e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    14a6:	68bb      	ldr	r3, [r7, #8]
    14a8:	3301      	adds	r3, #1
    14aa:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    14ac:	68bb      	ldr	r3, [r7, #8]
    14ae:	2200      	movs	r2, #0
    14b0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    14b2:	68ba      	ldr	r2, [r7, #8]
    14b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14b6:	1ad3      	subs	r3, r2, r3
} // ftoa()
    14b8:	4618      	mov	r0, r3
    14ba:	373c      	adds	r7, #60	; 0x3c
    14bc:	46bd      	mov	sp, r7
    14be:	bd90      	pop	{r4, r7, pc}
    14c0:	00302e30 	.word	0x00302e30

000014c4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    14c4:	b590      	push	{r4, r7, lr}
    14c6:	b095      	sub	sp, #84	; 0x54
    14c8:	af00      	add	r7, sp, #0
    14ca:	60f8      	str	r0, [r7, #12]
    14cc:	60b9      	str	r1, [r7, #8]
    14ce:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    14d0:	2300      	movs	r3, #0
    14d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    14d4:	2300      	movs	r3, #0
    14d6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    14d8:	e2e3      	b.n	1aa2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    14da:	2306      	movs	r3, #6
    14dc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    14de:	68bb      	ldr	r3, [r7, #8]
    14e0:	781b      	ldrb	r3, [r3, #0]
    14e2:	2b25      	cmp	r3, #37	; 0x25
    14e4:	d01f      	beq.n	1526 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    14e6:	68fb      	ldr	r3, [r7, #12]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d015      	beq.n	1518 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    14ec:	68bb      	ldr	r3, [r7, #8]
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	2b0a      	cmp	r3, #10
    14f2:	d10b      	bne.n	150c <am_util_stdio_vsprintf+0x48>
    14f4:	4bb1      	ldr	r3, [pc, #708]	; (17bc <am_util_stdio_vsprintf+0x2f8>)
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d007      	beq.n	150c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	1c5a      	adds	r2, r3, #1
    1500:	60fa      	str	r2, [r7, #12]
    1502:	220d      	movs	r2, #13
    1504:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1508:	3301      	adds	r3, #1
    150a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	1c5a      	adds	r2, r3, #1
    1510:	60fa      	str	r2, [r7, #12]
    1512:	68ba      	ldr	r2, [r7, #8]
    1514:	7812      	ldrb	r2, [r2, #0]
    1516:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1518:	68bb      	ldr	r3, [r7, #8]
    151a:	3301      	adds	r3, #1
    151c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    151e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1520:	3301      	adds	r3, #1
    1522:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1524:	e2bd      	b.n	1aa2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1526:	68bb      	ldr	r3, [r7, #8]
    1528:	3301      	adds	r3, #1
    152a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    152c:	2300      	movs	r3, #0
    152e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1536:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    153a:	2320      	movs	r3, #32
    153c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1540:	68bb      	ldr	r3, [r7, #8]
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	2b30      	cmp	r3, #48	; 0x30
    1546:	d105      	bne.n	1554 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1548:	2330      	movs	r3, #48	; 0x30
    154a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    154e:	68bb      	ldr	r3, [r7, #8]
    1550:	3301      	adds	r3, #1
    1552:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1554:	f107 0310 	add.w	r3, r7, #16
    1558:	4619      	mov	r1, r3
    155a:	68b8      	ldr	r0, [r7, #8]
    155c:	f7ff fd98 	bl	1090 <decstr_to_int>
    1560:	4603      	mov	r3, r0
    1562:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1564:	693b      	ldr	r3, [r7, #16]
    1566:	68ba      	ldr	r2, [r7, #8]
    1568:	4413      	add	r3, r2
    156a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    156c:	68bb      	ldr	r3, [r7, #8]
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	2b73      	cmp	r3, #115	; 0x73
    1572:	d005      	beq.n	1580 <am_util_stdio_vsprintf+0xbc>
    1574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1576:	2b00      	cmp	r3, #0
    1578:	da02      	bge.n	1580 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    157c:	425b      	negs	r3, r3
    157e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1580:	68bb      	ldr	r3, [r7, #8]
    1582:	781b      	ldrb	r3, [r3, #0]
    1584:	2b2e      	cmp	r3, #46	; 0x2e
    1586:	d10e      	bne.n	15a6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1588:	68bb      	ldr	r3, [r7, #8]
    158a:	3301      	adds	r3, #1
    158c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    158e:	f107 0310 	add.w	r3, r7, #16
    1592:	4619      	mov	r1, r3
    1594:	68b8      	ldr	r0, [r7, #8]
    1596:	f7ff fd7b 	bl	1090 <decstr_to_int>
    159a:	4603      	mov	r3, r0
    159c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    159e:	693b      	ldr	r3, [r7, #16]
    15a0:	68ba      	ldr	r2, [r7, #8]
    15a2:	4413      	add	r3, r2
    15a4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    15a6:	68bb      	ldr	r3, [r7, #8]
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2b6c      	cmp	r3, #108	; 0x6c
    15ac:	d10c      	bne.n	15c8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    15ae:	68bb      	ldr	r3, [r7, #8]
    15b0:	3301      	adds	r3, #1
    15b2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    15b4:	68bb      	ldr	r3, [r7, #8]
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	2b6c      	cmp	r3, #108	; 0x6c
    15ba:	d105      	bne.n	15c8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    15bc:	68bb      	ldr	r3, [r7, #8]
    15be:	3301      	adds	r3, #1
    15c0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    15c2:	2301      	movs	r3, #1
    15c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    15c8:	68bb      	ldr	r3, [r7, #8]
    15ca:	781b      	ldrb	r3, [r3, #0]
    15cc:	3b46      	subs	r3, #70	; 0x46
    15ce:	2b32      	cmp	r3, #50	; 0x32
    15d0:	f200 8254 	bhi.w	1a7c <am_util_stdio_vsprintf+0x5b8>
    15d4:	a201      	add	r2, pc, #4	; (adr r2, 15dc <am_util_stdio_vsprintf+0x118>)
    15d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15da:	bf00      	nop
    15dc:	00001a07 	.word	0x00001a07
    15e0:	00001a7d 	.word	0x00001a7d
    15e4:	00001a7d 	.word	0x00001a7d
    15e8:	00001a7d 	.word	0x00001a7d
    15ec:	00001a7d 	.word	0x00001a7d
    15f0:	00001a7d 	.word	0x00001a7d
    15f4:	00001a7d 	.word	0x00001a7d
    15f8:	00001a7d 	.word	0x00001a7d
    15fc:	00001a7d 	.word	0x00001a7d
    1600:	00001a7d 	.word	0x00001a7d
    1604:	00001a7d 	.word	0x00001a7d
    1608:	00001a7d 	.word	0x00001a7d
    160c:	00001a7d 	.word	0x00001a7d
    1610:	00001a7d 	.word	0x00001a7d
    1614:	00001a7d 	.word	0x00001a7d
    1618:	00001a7d 	.word	0x00001a7d
    161c:	00001a7d 	.word	0x00001a7d
    1620:	00001a7d 	.word	0x00001a7d
    1624:	000017a3 	.word	0x000017a3
    1628:	00001a7d 	.word	0x00001a7d
    162c:	00001a7d 	.word	0x00001a7d
    1630:	00001a7d 	.word	0x00001a7d
    1634:	00001a7d 	.word	0x00001a7d
    1638:	00001a7d 	.word	0x00001a7d
    163c:	00001a7d 	.word	0x00001a7d
    1640:	00001a7d 	.word	0x00001a7d
    1644:	00001a7d 	.word	0x00001a7d
    1648:	00001a7d 	.word	0x00001a7d
    164c:	00001a7d 	.word	0x00001a7d
    1650:	000016a9 	.word	0x000016a9
    1654:	000018cf 	.word	0x000018cf
    1658:	00001a7d 	.word	0x00001a7d
    165c:	00001a07 	.word	0x00001a07
    1660:	00001a7d 	.word	0x00001a7d
    1664:	00001a7d 	.word	0x00001a7d
    1668:	000018cf 	.word	0x000018cf
    166c:	00001a7d 	.word	0x00001a7d
    1670:	00001a7d 	.word	0x00001a7d
    1674:	00001a7d 	.word	0x00001a7d
    1678:	00001a7d 	.word	0x00001a7d
    167c:	00001a7d 	.word	0x00001a7d
    1680:	00001a7d 	.word	0x00001a7d
    1684:	00001a7d 	.word	0x00001a7d
    1688:	00001a7d 	.word	0x00001a7d
    168c:	00001a7d 	.word	0x00001a7d
    1690:	000016cf 	.word	0x000016cf
    1694:	00001a7d 	.word	0x00001a7d
    1698:	0000183d 	.word	0x0000183d
    169c:	00001a7d 	.word	0x00001a7d
    16a0:	00001a7d 	.word	0x00001a7d
    16a4:	0000179d 	.word	0x0000179d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	1d1a      	adds	r2, r3, #4
    16ac:	607a      	str	r2, [r7, #4]
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	2b00      	cmp	r3, #0
    16b8:	d005      	beq.n	16c6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    16ba:	68fb      	ldr	r3, [r7, #12]
    16bc:	1c5a      	adds	r2, r3, #1
    16be:	60fa      	str	r2, [r7, #12]
    16c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    16c4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    16c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16c8:	3301      	adds	r3, #1
    16ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    16cc:	e1e6      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	1d1a      	adds	r2, r3, #4
    16d2:	607a      	str	r2, [r7, #4]
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    16d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    16da:	f7ff fdc7 	bl	126c <simple_strlen>
    16de:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    16e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16e2:	2b00      	cmp	r3, #0
    16e4:	dd2e      	ble.n	1744 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    16e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    16ea:	429a      	cmp	r2, r3
    16ec:	d22a      	bcs.n	1744 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    16ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
    16f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16f2:	1ad3      	subs	r3, r2, r3
    16f4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    16f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    16fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    16fc:	4619      	mov	r1, r3
    16fe:	68f8      	ldr	r0, [r7, #12]
    1700:	f7ff fdd0 	bl	12a4 <padbuffer>
    1704:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1706:	68fb      	ldr	r3, [r7, #12]
    1708:	2b00      	cmp	r3, #0
    170a:	d001      	beq.n	1710 <am_util_stdio_vsprintf+0x24c>
    170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    170e:	e000      	b.n	1712 <am_util_stdio_vsprintf+0x24e>
    1710:	2300      	movs	r3, #0
    1712:	68fa      	ldr	r2, [r7, #12]
    1714:	4413      	add	r3, r2
    1716:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    171a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    171c:	4413      	add	r3, r2
    171e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1720:	2300      	movs	r3, #0
    1722:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1724:	e00e      	b.n	1744 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1726:	68fb      	ldr	r3, [r7, #12]
    1728:	2b00      	cmp	r3, #0
    172a:	d005      	beq.n	1738 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    172c:	68fb      	ldr	r3, [r7, #12]
    172e:	1c5a      	adds	r2, r3, #1
    1730:	60fa      	str	r2, [r7, #12]
    1732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1734:	7812      	ldrb	r2, [r2, #0]
    1736:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    173a:	3301      	adds	r3, #1
    173c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    173e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1740:	3301      	adds	r3, #1
    1742:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	2b00      	cmp	r3, #0
    174a:	d1ec      	bne.n	1726 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    174e:	2b00      	cmp	r3, #0
    1750:	f000 81a1 	beq.w	1a96 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1756:	425b      	negs	r3, r3
    1758:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    175e:	429a      	cmp	r2, r3
    1760:	f080 8199 	bcs.w	1a96 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1764:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1768:	1ad3      	subs	r3, r2, r3
    176a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    176c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1770:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1772:	4619      	mov	r1, r3
    1774:	68f8      	ldr	r0, [r7, #12]
    1776:	f7ff fd95 	bl	12a4 <padbuffer>
    177a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	2b00      	cmp	r3, #0
    1780:	d001      	beq.n	1786 <am_util_stdio_vsprintf+0x2c2>
    1782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1784:	e000      	b.n	1788 <am_util_stdio_vsprintf+0x2c4>
    1786:	2300      	movs	r3, #0
    1788:	68fa      	ldr	r2, [r7, #12]
    178a:	4413      	add	r3, r2
    178c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1792:	4413      	add	r3, r2
    1794:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1796:	2300      	movs	r3, #0
    1798:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    179a:	e17c      	b.n	1a96 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    179c:	2301      	movs	r3, #1
    179e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    17a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    17a6:	2b00      	cmp	r3, #0
    17a8:	d00a      	beq.n	17c0 <am_util_stdio_vsprintf+0x2fc>
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	3307      	adds	r3, #7
    17ae:	f023 0307 	bic.w	r3, r3, #7
    17b2:	f103 0208 	add.w	r2, r3, #8
    17b6:	607a      	str	r2, [r7, #4]
    17b8:	cb18      	ldmia	r3, {r3, r4}
    17ba:	e007      	b.n	17cc <am_util_stdio_vsprintf+0x308>
    17bc:	10001190 	.word	0x10001190
                                      va_arg(pArgs, uint32_t);
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	1d1a      	adds	r2, r3, #4
    17c4:	607a      	str	r2, [r7, #4]
    17c6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    17c8:	f04f 0400 	mov.w	r4, #0
    17cc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    17d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17d2:	2b00      	cmp	r3, #0
    17d4:	d01e      	beq.n	1814 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    17d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    17da:	f7ff fc35 	bl	1048 <ndigits_in_hex>
    17de:	4602      	mov	r2, r0
    17e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17e2:	1a9b      	subs	r3, r3, r2
    17e4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    17e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    17ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    17ec:	4619      	mov	r1, r3
    17ee:	68f8      	ldr	r0, [r7, #12]
    17f0:	f7ff fd58 	bl	12a4 <padbuffer>
    17f4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d001      	beq.n	1800 <am_util_stdio_vsprintf+0x33c>
    17fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17fe:	e000      	b.n	1802 <am_util_stdio_vsprintf+0x33e>
    1800:	2300      	movs	r3, #0
    1802:	68fa      	ldr	r2, [r7, #12]
    1804:	4413      	add	r3, r2
    1806:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    180a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    180c:	4413      	add	r3, r2
    180e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1810:	2300      	movs	r3, #0
    1812:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1814:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1818:	68fa      	ldr	r2, [r7, #12]
    181a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    181e:	f7ff fcc5 	bl	11ac <uint64_to_hexstr>
    1822:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1824:	68fb      	ldr	r3, [r7, #12]
    1826:	2b00      	cmp	r3, #0
    1828:	d003      	beq.n	1832 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    182c:	68fa      	ldr	r2, [r7, #12]
    182e:	4413      	add	r3, r2
    1830:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1836:	4413      	add	r3, r2
    1838:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    183a:	e12f      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    183c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1840:	2b00      	cmp	r3, #0
    1842:	d008      	beq.n	1856 <am_util_stdio_vsprintf+0x392>
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	3307      	adds	r3, #7
    1848:	f023 0307 	bic.w	r3, r3, #7
    184c:	f103 0208 	add.w	r2, r3, #8
    1850:	607a      	str	r2, [r7, #4]
    1852:	cb18      	ldmia	r3, {r3, r4}
    1854:	e005      	b.n	1862 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	1d1a      	adds	r2, r3, #4
    185a:	607a      	str	r2, [r7, #4]
    185c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    185e:	f04f 0400 	mov.w	r4, #0
    1862:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1868:	2b00      	cmp	r3, #0
    186a:	d01e      	beq.n	18aa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    186c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1870:	f7ff fbaa 	bl	fc8 <ndigits_in_u64>
    1874:	4602      	mov	r2, r0
    1876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1878:	1a9b      	subs	r3, r3, r2
    187a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    187c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1880:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1882:	4619      	mov	r1, r3
    1884:	68f8      	ldr	r0, [r7, #12]
    1886:	f7ff fd0d 	bl	12a4 <padbuffer>
    188a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    188c:	68fb      	ldr	r3, [r7, #12]
    188e:	2b00      	cmp	r3, #0
    1890:	d001      	beq.n	1896 <am_util_stdio_vsprintf+0x3d2>
    1892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1894:	e000      	b.n	1898 <am_util_stdio_vsprintf+0x3d4>
    1896:	2300      	movs	r3, #0
    1898:	68fa      	ldr	r2, [r7, #12]
    189a:	4413      	add	r3, r2
    189c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    189e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    18a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18a2:	4413      	add	r3, r2
    18a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    18a6:	2300      	movs	r3, #0
    18a8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    18aa:	68fa      	ldr	r2, [r7, #12]
    18ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    18b0:	f7ff fc34 	bl	111c <uint64_to_str>
    18b4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    18b6:	68fb      	ldr	r3, [r7, #12]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d003      	beq.n	18c4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    18bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18be:	68fa      	ldr	r2, [r7, #12]
    18c0:	4413      	add	r3, r2
    18c2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    18c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18c8:	4413      	add	r3, r2
    18ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    18cc:	e0e6      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    18ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    18d2:	2b00      	cmp	r3, #0
    18d4:	d008      	beq.n	18e8 <am_util_stdio_vsprintf+0x424>
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	3307      	adds	r3, #7
    18da:	f023 0307 	bic.w	r3, r3, #7
    18de:	f103 0208 	add.w	r2, r3, #8
    18e2:	607a      	str	r2, [r7, #4]
    18e4:	cb18      	ldmia	r3, {r3, r4}
    18e6:	e005      	b.n	18f4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	1d1a      	adds	r2, r3, #4
    18ec:	607a      	str	r2, [r7, #4]
    18ee:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    18f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    18f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    18f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    18fc:	2b00      	cmp	r3, #0
    18fe:	f174 0300 	sbcs.w	r3, r4, #0
    1902:	da0a      	bge.n	191a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1904:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1908:	425b      	negs	r3, r3
    190a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    190e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1912:	2301      	movs	r3, #1
    1914:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1918:	e006      	b.n	1928 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    191a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    191e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1922:	2300      	movs	r3, #0
    1924:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    192a:	2b00      	cmp	r3, #0
    192c:	d04a      	beq.n	19c4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    192e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1932:	4618      	mov	r0, r3
    1934:	4621      	mov	r1, r4
    1936:	f7ff fb69 	bl	100c <ndigits_in_i64>
    193a:	4602      	mov	r2, r0
    193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    193e:	1a9b      	subs	r3, r3, r2
    1940:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1946:	2b00      	cmp	r3, #0
    1948:	d011      	beq.n	196e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    194c:	3b01      	subs	r3, #1
    194e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1954:	2b30      	cmp	r3, #48	; 0x30
    1956:	d10a      	bne.n	196e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1958:	68fb      	ldr	r3, [r7, #12]
    195a:	2b00      	cmp	r3, #0
    195c:	d004      	beq.n	1968 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	1c5a      	adds	r2, r3, #1
    1962:	60fa      	str	r2, [r7, #12]
    1964:	222d      	movs	r2, #45	; 0x2d
    1966:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    196a:	3301      	adds	r3, #1
    196c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    196e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1972:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1974:	4619      	mov	r1, r3
    1976:	68f8      	ldr	r0, [r7, #12]
    1978:	f7ff fc94 	bl	12a4 <padbuffer>
    197c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	2b00      	cmp	r3, #0
    1982:	d001      	beq.n	1988 <am_util_stdio_vsprintf+0x4c4>
    1984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1986:	e000      	b.n	198a <am_util_stdio_vsprintf+0x4c6>
    1988:	2300      	movs	r3, #0
    198a:	68fa      	ldr	r2, [r7, #12]
    198c:	4413      	add	r3, r2
    198e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1994:	4413      	add	r3, r2
    1996:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1998:	2300      	movs	r3, #0
    199a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    199c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    19a0:	2b00      	cmp	r3, #0
    19a2:	d01e      	beq.n	19e2 <am_util_stdio_vsprintf+0x51e>
    19a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    19a8:	2b20      	cmp	r3, #32
    19aa:	d11a      	bne.n	19e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    19ac:	68fb      	ldr	r3, [r7, #12]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d004      	beq.n	19bc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    19b2:	68fb      	ldr	r3, [r7, #12]
    19b4:	1c5a      	adds	r2, r3, #1
    19b6:	60fa      	str	r2, [r7, #12]
    19b8:	222d      	movs	r2, #45	; 0x2d
    19ba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    19bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19be:	3301      	adds	r3, #1
    19c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    19c2:	e00e      	b.n	19e2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    19c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    19c8:	2b00      	cmp	r3, #0
    19ca:	d00a      	beq.n	19e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d004      	beq.n	19dc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	1c5a      	adds	r2, r3, #1
    19d6:	60fa      	str	r2, [r7, #12]
    19d8:	222d      	movs	r2, #45	; 0x2d
    19da:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    19dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19de:	3301      	adds	r3, #1
    19e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    19e2:	68fa      	ldr	r2, [r7, #12]
    19e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    19e8:	f7ff fb98 	bl	111c <uint64_to_str>
    19ec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    19ee:	68fb      	ldr	r3, [r7, #12]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d003      	beq.n	19fc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    19f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19f6:	68fa      	ldr	r2, [r7, #12]
    19f8:	4413      	add	r3, r2
    19fa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    19fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a00:	4413      	add	r3, r2
    1a02:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1a04:	e04a      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d046      	beq.n	1a9a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	3307      	adds	r3, #7
    1a10:	f023 0307 	bic.w	r3, r3, #7
    1a14:	f103 0208 	add.w	r2, r3, #8
    1a18:	607a      	str	r2, [r7, #4]
    1a1a:	cb18      	ldmia	r3, {r3, r4}
    1a1c:	4618      	mov	r0, r3
    1a1e:	4621      	mov	r1, r4
    1a20:	f7fe fb4e 	bl	c0 <__aeabi_d2f>
    1a24:	4603      	mov	r3, r0
    1a26:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	2214      	movs	r2, #20
    1a2c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1a30:	68f9      	ldr	r1, [r7, #12]
    1a32:	6978      	ldr	r0, [r7, #20]
    1a34:	f7ff fc5c 	bl	12f0 <ftoa>
    1a38:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	da14      	bge.n	1a6a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a42:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a46:	d102      	bne.n	1a4e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1a48:	4b1e      	ldr	r3, [pc, #120]	; (1ac4 <am_util_stdio_vsprintf+0x600>)
    1a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    1a4c:	e008      	b.n	1a60 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a50:	f113 0f02 	cmn.w	r3, #2
    1a54:	d102      	bne.n	1a5c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1a56:	4b1c      	ldr	r3, [pc, #112]	; (1ac8 <am_util_stdio_vsprintf+0x604>)
    1a58:	62bb      	str	r3, [r7, #40]	; 0x28
    1a5a:	e001      	b.n	1a60 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1a5c:	4b1b      	ldr	r3, [pc, #108]	; (1acc <am_util_stdio_vsprintf+0x608>)
    1a5e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a64:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1a66:	2303      	movs	r3, #3
    1a68:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a6e:	4413      	add	r3, r2
    1a70:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a74:	68fa      	ldr	r2, [r7, #12]
    1a76:	4413      	add	r3, r2
    1a78:	60fb      	str	r3, [r7, #12]
                }
                break;
    1a7a:	e00e      	b.n	1a9a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d005      	beq.n	1a8e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1a82:	68fb      	ldr	r3, [r7, #12]
    1a84:	1c5a      	adds	r2, r3, #1
    1a86:	60fa      	str	r2, [r7, #12]
    1a88:	68ba      	ldr	r2, [r7, #8]
    1a8a:	7812      	ldrb	r2, [r2, #0]
    1a8c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a90:	3301      	adds	r3, #1
    1a92:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1a94:	e002      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1a96:	bf00      	nop
    1a98:	e000      	b.n	1a9c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    1a9a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1a9c:	68bb      	ldr	r3, [r7, #8]
    1a9e:	3301      	adds	r3, #1
    1aa0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    1aa2:	68bb      	ldr	r3, [r7, #8]
    1aa4:	781b      	ldrb	r3, [r3, #0]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	f47f ad17 	bne.w	14da <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1aac:	68fb      	ldr	r3, [r7, #12]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d002      	beq.n	1ab8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	2200      	movs	r2, #0
    1ab6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1aba:	4618      	mov	r0, r3
    1abc:	3754      	adds	r7, #84	; 0x54
    1abe:	46bd      	mov	sp, r7
    1ac0:	bd90      	pop	{r4, r7, pc}
    1ac2:	bf00      	nop
    1ac4:	00302e30 	.word	0x00302e30
    1ac8:	00232e23 	.word	0x00232e23
    1acc:	003f2e3f 	.word	0x003f2e3f

00001ad0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1ad0:	b40f      	push	{r0, r1, r2, r3}
    1ad2:	b580      	push	{r7, lr}
    1ad4:	b082      	sub	sp, #8
    1ad6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1ad8:	f107 0314 	add.w	r3, r7, #20
    1adc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1ade:	683a      	ldr	r2, [r7, #0]
    1ae0:	6939      	ldr	r1, [r7, #16]
    1ae2:	4808      	ldr	r0, [pc, #32]	; (1b04 <am_util_stdio_printf+0x34>)
    1ae4:	f7ff fcee 	bl	14c4 <am_util_stdio_vsprintf>
    1ae8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1aea:	4b07      	ldr	r3, [pc, #28]	; (1b08 <am_util_stdio_printf+0x38>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	4805      	ldr	r0, [pc, #20]	; (1b04 <am_util_stdio_printf+0x34>)
    1af0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1af2:	687b      	ldr	r3, [r7, #4]
}
    1af4:	4618      	mov	r0, r3
    1af6:	3708      	adds	r7, #8
    1af8:	46bd      	mov	sp, r7
    1afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1afe:	b004      	add	sp, #16
    1b00:	4770      	bx	lr
    1b02:	bf00      	nop
    1b04:	10001090 	.word	0x10001090
    1b08:	100011ac 	.word	0x100011ac

00001b0c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1b10:	4802      	ldr	r0, [pc, #8]	; (1b1c <am_util_stdio_terminal_clear+0x10>)
    1b12:	f7ff ffdd 	bl	1ad0 <am_util_stdio_printf>
}
    1b16:	bf00      	nop
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	bf00      	nop
    1b1c:	00002b74 	.word	0x00002b74

00001b20 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1b20:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1b22:	f000 fc8f 	bl	2444 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1b26:	f000 fcfb 	bl	2520 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1b2a:	f001 f80d 	bl	2b48 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1b2e:	2001      	movs	r0, #1
    1b30:	f000 fd06 	bl	2540 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1b34:	2001      	movs	r0, #1
    1b36:	f000 f8d1 	bl	1cdc <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1b3e:	f000 bd15 	b.w	256c <am_hal_rtc_osc_disable>
    1b42:	bf00      	nop

00001b44 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    1b44:	4601      	mov	r1, r0
    1b46:	2000      	movs	r0, #0
    1b48:	f000 bfea 	b.w	2b20 <am_hal_uart_string_transmit_polled>

00001b4c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b4e:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1b50:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1b54:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1b56:	7863      	ldrb	r3, [r4, #1]
    1b58:	78e2      	ldrb	r2, [r4, #3]
    1b5a:	7925      	ldrb	r5, [r4, #4]
    1b5c:	79a1      	ldrb	r1, [r4, #6]
    1b5e:	00be      	lsls	r6, r7, #2
    1b60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1b64:	f006 0304 	and.w	r3, r6, #4
    1b68:	f00e 0602 	and.w	r6, lr, #2
    1b6c:	431e      	orrs	r6, r3
    1b6e:	f042 0201 	orr.w	r2, r2, #1
    1b72:	79e3      	ldrb	r3, [r4, #7]
    1b74:	01ed      	lsls	r5, r5, #7
    1b76:	4316      	orrs	r6, r2
    1b78:	b2ed      	uxtb	r5, r5
    1b7a:	7a22      	ldrb	r2, [r4, #8]
    1b7c:	0289      	lsls	r1, r1, #10
    1b7e:	432e      	orrs	r6, r5
    1b80:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1b84:	7a65      	ldrb	r5, [r4, #9]
    1b86:	02db      	lsls	r3, r3, #11
    1b88:	430e      	orrs	r6, r1
    1b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1b8e:	0312      	lsls	r2, r2, #12
    1b90:	7aa1      	ldrb	r1, [r4, #10]
    1b92:	431e      	orrs	r6, r3
    1b94:	042d      	lsls	r5, r5, #16
    1b96:	b293      	uxth	r3, r2
    1b98:	7ae2      	ldrb	r2, [r4, #11]
    1b9a:	431e      	orrs	r6, r3
    1b9c:	0509      	lsls	r1, r1, #20
    1b9e:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    1ba2:	0612      	lsls	r2, r2, #24
    1ba4:	4333      	orrs	r3, r6
    1ba6:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1baa:	00bf      	lsls	r7, r7, #2
    1bac:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1bb0:	4333      	orrs	r3, r6
    1bb2:	430b      	orrs	r3, r1
    1bb4:	f007 0508 	and.w	r5, r7, #8
    1bb8:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1bba:	f000 fb3b 	bl	2234 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1bbe:	482c      	ldr	r0, [pc, #176]	; (1c70 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1bc0:	4b2c      	ldr	r3, [pc, #176]	; (1c74 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1bc2:	6005      	str	r5, [r0, #0]
    1bc4:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1bc6:	681e      	ldr	r6, [r3, #0]
    1bc8:	0777      	lsls	r7, r6, #29
    1bca:	d41e      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bcc:	681f      	ldr	r7, [r3, #0]
    1bce:	077e      	lsls	r6, r7, #29
    1bd0:	f102 32ff 	add.w	r2, r2, #4294967295
    1bd4:	d419      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bd6:	6819      	ldr	r1, [r3, #0]
    1bd8:	074f      	lsls	r7, r1, #29
    1bda:	d416      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bdc:	6818      	ldr	r0, [r3, #0]
    1bde:	0746      	lsls	r6, r0, #29
    1be0:	d413      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1be2:	681e      	ldr	r6, [r3, #0]
    1be4:	0770      	lsls	r0, r6, #29
    1be6:	d410      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1be8:	681f      	ldr	r7, [r3, #0]
    1bea:	0779      	lsls	r1, r7, #29
    1bec:	d40d      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bee:	6819      	ldr	r1, [r3, #0]
    1bf0:	074f      	lsls	r7, r1, #29
    1bf2:	d40a      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bf4:	6818      	ldr	r0, [r3, #0]
    1bf6:	0746      	lsls	r6, r0, #29
    1bf8:	d407      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1bfa:	681e      	ldr	r6, [r3, #0]
    1bfc:	0770      	lsls	r0, r6, #29
    1bfe:	d404      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    1c00:	681f      	ldr	r7, [r3, #0]
    1c02:	0779      	lsls	r1, r7, #29
    1c04:	d401      	bmi.n	1c0a <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1c06:	3a09      	subs	r2, #9
    1c08:	d1dd      	bne.n	1bc6 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1c0a:	4b1a      	ldr	r3, [pc, #104]	; (1c74 <am_hal_cachectrl_enable+0x128>)
    1c0c:	681a      	ldr	r2, [r3, #0]
    1c0e:	f042 0101 	orr.w	r1, r2, #1
    1c12:	6019      	str	r1, [r3, #0]
    1c14:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1c16:	6818      	ldr	r0, [r3, #0]
    1c18:	0740      	lsls	r0, r0, #29
    1c1a:	d41e      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c1c:	681e      	ldr	r6, [r3, #0]
    1c1e:	0771      	lsls	r1, r6, #29
    1c20:	f102 32ff 	add.w	r2, r2, #4294967295
    1c24:	d419      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c26:	681f      	ldr	r7, [r3, #0]
    1c28:	077f      	lsls	r7, r7, #29
    1c2a:	d416      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c2c:	6819      	ldr	r1, [r3, #0]
    1c2e:	074e      	lsls	r6, r1, #29
    1c30:	d413      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c32:	6818      	ldr	r0, [r3, #0]
    1c34:	0740      	lsls	r0, r0, #29
    1c36:	d410      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c38:	681e      	ldr	r6, [r3, #0]
    1c3a:	0771      	lsls	r1, r6, #29
    1c3c:	d40d      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c3e:	681f      	ldr	r7, [r3, #0]
    1c40:	077f      	lsls	r7, r7, #29
    1c42:	d40a      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c44:	6819      	ldr	r1, [r3, #0]
    1c46:	074e      	lsls	r6, r1, #29
    1c48:	d407      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c4a:	6818      	ldr	r0, [r3, #0]
    1c4c:	0740      	lsls	r0, r0, #29
    1c4e:	d404      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    1c50:	681e      	ldr	r6, [r3, #0]
    1c52:	0771      	lsls	r1, r6, #29
    1c54:	d401      	bmi.n	1c5a <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1c56:	3a09      	subs	r2, #9
    1c58:	d1dd      	bne.n	1c16 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1c5a:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1c5c:	4f04      	ldr	r7, [pc, #16]	; (1c70 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1c5e:	0223      	lsls	r3, r4, #8
    1c60:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1c64:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1c68:	4311      	orrs	r1, r2
    1c6a:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1c6c:	6039      	str	r1, [r7, #0]
    1c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c70:	40018000 	.word	0x40018000
    1c74:	40018008 	.word	0x40018008

00001c78 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1c78:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1c7a:	4604      	mov	r4, r0
    1c7c:	b120      	cbz	r0, 1c88 <am_hal_clkgen_sysclk_select+0x10>
    1c7e:	4a06      	ldr	r2, [pc, #24]	; (1c98 <am_hal_clkgen_sysclk_select+0x20>)
    1c80:	4806      	ldr	r0, [pc, #24]	; (1c9c <am_hal_clkgen_sysclk_select+0x24>)
    1c82:	2150      	movs	r1, #80	; 0x50
    1c84:	f000 f9e0 	bl	2048 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1c88:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1c8a:	4906      	ldr	r1, [pc, #24]	; (1ca4 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1c8c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1c8e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1c90:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1c92:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1c94:	601a      	str	r2, [r3, #0]
    1c96:	bd10      	pop	{r4, pc}
    1c98:	00002b94 	.word	0x00002b94
    1c9c:	00002bcc 	.word	0x00002bcc
    1ca0:	40004014 	.word	0x40004014
    1ca4:	40004018 	.word	0x40004018

00001ca8 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1ca8:	4b04      	ldr	r3, [pc, #16]	; (1cbc <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1caa:	4905      	ldr	r1, [pc, #20]	; (1cc0 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1cac:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1cae:	4805      	ldr	r0, [pc, #20]	; (1cc4 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1cb0:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1cb4:	bf08      	it	eq
    1cb6:	4608      	moveq	r0, r1
    1cb8:	4770      	bx	lr
    1cba:	bf00      	nop
    1cbc:	40004018 	.word	0x40004018
    1cc0:	02dc6c00 	.word	0x02dc6c00
    1cc4:	016e3600 	.word	0x016e3600

00001cc8 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1cc8:	0783      	lsls	r3, r0, #30
    1cca:	d004      	beq.n	1cd6 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1ccc:	4a02      	ldr	r2, [pc, #8]	; (1cd8 <am_hal_clkgen_osc_start+0x10>)
    1cce:	6813      	ldr	r3, [r2, #0]
    1cd0:	ea23 0000 	bic.w	r0, r3, r0
    1cd4:	6010      	str	r0, [r2, #0]
    1cd6:	4770      	bx	lr
    1cd8:	4000400c 	.word	0x4000400c

00001cdc <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1cdc:	0783      	lsls	r3, r0, #30
    1cde:	d003      	beq.n	1ce8 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1ce0:	4a02      	ldr	r2, [pc, #8]	; (1cec <am_hal_clkgen_osc_stop+0x10>)
    1ce2:	6813      	ldr	r3, [r2, #0]
    1ce4:	4318      	orrs	r0, r3
    1ce6:	6010      	str	r0, [r2, #0]
    1ce8:	4770      	bx	lr
    1cea:	bf00      	nop
    1cec:	4000400c 	.word	0x4000400c

00001cf0 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1cf0:	2801      	cmp	r0, #1
    1cf2:	d900      	bls.n	1cf6 <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    1cf4:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1cf6:	2903      	cmp	r1, #3
    1cf8:	d8fc      	bhi.n	1cf4 <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1cfa:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    1cfe:	b430      	push	{r4, r5}
    1d00:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1d02:	9301      	str	r3, [sp, #4]
    1d04:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1d06:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <am_hal_clkgen_uarten_set+0x40>)
    1d08:	00c5      	lsls	r5, r0, #3
    1d0a:	681c      	ldr	r4, [r3, #0]
    1d0c:	2203      	movs	r2, #3
    1d0e:	40aa      	lsls	r2, r5
    1d10:	ea24 0502 	bic.w	r5, r4, r2
    1d14:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1d16:	fb00 f000 	mul.w	r0, r0, r0
    1d1a:	681a      	ldr	r2, [r3, #0]
    1d1c:	00c0      	lsls	r0, r0, #3
    1d1e:	4081      	lsls	r1, r0
    1d20:	4311      	orrs	r1, r2
    1d22:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    1d24:	9b01      	ldr	r3, [sp, #4]
    1d26:	f383 8810 	msr	PRIMASK, r3
}
    1d2a:	b002      	add	sp, #8
    1d2c:	bc30      	pop	{r4, r5}
    1d2e:	4770      	bx	lr
    1d30:	40004034 	.word	0x40004034

00001d34 <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    1d34:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    1d36:	b284      	uxth	r4, r0

    while ( ui32Status )
    1d38:	b184      	cbz	r4, 1d5c <am_hal_ctimer_int_service+0x28>
    1d3a:	4e09      	ldr	r6, [pc, #36]	; (1d60 <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1d3c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        // Pick one of any remaining active interrupt bits
        //
#ifdef __IAR_SYSTEMS_ICC__
        ui32Clz = __CLZ(ui32Status);
#else
        ui32Clz = __builtin_clz(ui32Status);
    1d40:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    1d44:	f1c3 021f 	rsb	r2, r3, #31
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1d48:	fa25 f003 	lsr.w	r0, r5, r3

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    1d4c:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1d50:	ea24 0400 	bic.w	r4, r4, r0
        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
        if ( pfnHandler )
    1d54:	b101      	cbz	r1, 1d58 <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    1d56:	4788      	blx	r1

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;

    while ( ui32Status )
    1d58:	2c00      	cmp	r4, #0
    1d5a:	d1f1      	bne.n	1d40 <am_hal_ctimer_int_service+0xc>
    1d5c:	bd70      	pop	{r4, r5, r6, pc}
    1d5e:	bf00      	nop
    1d60:	100011b0 	.word	0x100011b0

00001d64 <am_hal_ctimer_int_register>:
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1d64:	2880      	cmp	r0, #128	; 0x80
//
//*****************************************************************************
void
am_hal_ctimer_int_register(uint32_t ui32Interrupt,
                           am_hal_ctimer_handler_t pfnHandler)
{
    1d66:	b510      	push	{r4, lr}
    1d68:	460c      	mov	r4, r1
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1d6a:	d050      	beq.n	1e0e <am_hal_ctimer_int_register+0xaa>
    1d6c:	d913      	bls.n	1d96 <am_hal_ctimer_int_register+0x32>
    1d6e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1d72:	d02b      	beq.n	1dcc <am_hal_ctimer_int_register+0x68>
    1d74:	d92e      	bls.n	1dd4 <am_hal_ctimer_int_register+0x70>
    1d76:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    1d7a:	d025      	beq.n	1dc8 <am_hal_ctimer_int_register+0x64>
    1d7c:	d935      	bls.n	1dea <am_hal_ctimer_int_register+0x86>
    1d7e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    1d82:	d038      	beq.n	1df6 <am_hal_ctimer_int_register+0x92>
    1d84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        case AM_REG_CTIMER_INTEN_CTMRA3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C1INT_S;
    1d88:	bf08      	it	eq
    1d8a:	220f      	moveq	r2, #15
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1d8c:	d10c      	bne.n	1da8 <am_hal_ctimer_int_register+0x44>

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    }

    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1d8e:	4b23      	ldr	r3, [pc, #140]	; (1e1c <am_hal_ctimer_int_register+0xb8>)
    1d90:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1d94:	bd10      	pop	{r4, pc}
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1d96:	2808      	cmp	r0, #8
    1d98:	d037      	beq.n	1e0a <am_hal_ctimer_int_register+0xa6>
    1d9a:	d90d      	bls.n	1db8 <am_hal_ctimer_int_register+0x54>
    1d9c:	2820      	cmp	r0, #32
    1d9e:	d032      	beq.n	1e06 <am_hal_ctimer_int_register+0xa2>
    1da0:	2840      	cmp	r0, #64	; 0x40
    1da2:	d02e      	beq.n	1e02 <am_hal_ctimer_int_register+0x9e>
    1da4:	2810      	cmp	r0, #16
    1da6:	d013      	beq.n	1dd0 <am_hal_ctimer_int_register+0x6c>
        case AM_REG_CTIMER_INTEN_CTMRB3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C1INT_S;
            break;

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    1da8:	4a1d      	ldr	r2, [pc, #116]	; (1e20 <am_hal_ctimer_int_register+0xbc>)
    1daa:	481e      	ldr	r0, [pc, #120]	; (1e24 <am_hal_ctimer_int_register+0xc0>)
    1dac:	f240 119b 	movw	r1, #411	; 0x19b
    1db0:	f000 f94a 	bl	2048 <am_hal_debug_error>
//*****************************************************************************
void
am_hal_ctimer_int_register(uint32_t ui32Interrupt,
                           am_hal_ctimer_handler_t pfnHandler)
{
    uint32_t intIdx = 0;
    1db4:	2200      	movs	r2, #0
    1db6:	e7ea      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1db8:	2802      	cmp	r0, #2
    1dba:	d02c      	beq.n	1e16 <am_hal_ctimer_int_register+0xb2>
    1dbc:	2804      	cmp	r0, #4
    1dbe:	d028      	beq.n	1e12 <am_hal_ctimer_int_register+0xae>
    1dc0:	2801      	cmp	r0, #1
    1dc2:	d1f1      	bne.n	1da8 <am_hal_ctimer_int_register+0x44>
    {
        case AM_REG_CTIMER_INTEN_CTMRA0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C0INT_S;
    1dc4:	2200      	movs	r2, #0
    1dc6:	e7e2      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C1INT_S;
    1dc8:	220d      	movs	r2, #13
            break;
    1dca:	e7e0      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C1INT_S;
    1dcc:	220b      	movs	r2, #11
            break;
    1dce:	e7de      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C0INT_S;
    1dd0:	2204      	movs	r2, #4
            break;
    1dd2:	e7dc      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1dd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1dd8:	d011      	beq.n	1dfe <am_hal_ctimer_int_register+0x9a>
    1dda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    1dde:	d00c      	beq.n	1dfa <am_hal_ctimer_int_register+0x96>
    1de0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    1de4:	d1e0      	bne.n	1da8 <am_hal_ctimer_int_register+0x44>
        case AM_REG_CTIMER_INTEN_CTMRB3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C1INT_S;
    1de6:	2208      	movs	r2, #8
            break;
    1de8:	e7d1      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1dea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
        case AM_REG_CTIMER_INTEN_CTMRB1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C1INT_S;
    1dee:	bf08      	it	eq
    1df0:	220c      	moveq	r2, #12
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1df2:	d0cc      	beq.n	1d8e <am_hal_ctimer_int_register+0x2a>
    1df4:	e7d8      	b.n	1da8 <am_hal_ctimer_int_register+0x44>
        case AM_REG_CTIMER_INTEN_CTMRB2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
    1df6:	220e      	movs	r2, #14
            break;
    1df8:	e7c9      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C1INT_S;
    1dfa:	220a      	movs	r2, #10
            break;
    1dfc:	e7c7      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C1INT_S;
    1dfe:	2209      	movs	r2, #9
            break;
    1e00:	e7c5      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C0INT_S;
    1e02:	2206      	movs	r2, #6
            break;
    1e04:	e7c3      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C0INT_S;
    1e06:	2205      	movs	r2, #5
            break;
    1e08:	e7c1      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C0INT_S;
    1e0a:	2203      	movs	r2, #3
            break;
    1e0c:	e7bf      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C0INT_S;
    1e0e:	2207      	movs	r2, #7
            break;
    1e10:	e7bd      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C0INT_S;
    1e12:	2202      	movs	r2, #2
            break;
    1e14:	e7bb      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C0INT_S;
    1e16:	2201      	movs	r2, #1
    1e18:	e7b9      	b.n	1d8e <am_hal_ctimer_int_register+0x2a>
    1e1a:	bf00      	nop
    1e1c:	100011b0 	.word	0x100011b0
    1e20:	00002be4 	.word	0x00002be4
    1e24:	00002c0c 	.word	0x00002c0c

00001e28 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1e28:	b410      	push	{r4}
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1e2a:	680c      	ldr	r4, [r1, #0]
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1e2c:	688b      	ldr	r3, [r1, #8]
    1e2e:	684a      	ldr	r2, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1e30:	f3ef 8110 	mrs	r1, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1e34:	b083      	sub	sp, #12
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1e36:	2c00      	cmp	r4, #0
    1e38:	bf18      	it	ne
    1e3a:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1e3e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1e42:	4323      	orrs	r3, r4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1e44:	9101      	str	r1, [sp, #4]
    1e46:	b672      	cpsid	i

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1e48:	4c29      	ldr	r4, [pc, #164]	; (1ef0 <am_hal_ctimer_config+0xc8>)
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1e4a:	4a2a      	ldr	r2, [pc, #168]	; (1ef4 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1e4c:	0100      	lsls	r0, r0, #4
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1e4e:	5103      	str	r3, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1e50:	6811      	ldr	r1, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1e52:	f001 0c0f 	and.w	ip, r1, #15
    1e56:	f10c 33ff 	add.w	r3, ip, #4294967295
    1e5a:	2b01      	cmp	r3, #1
    1e5c:	d941      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1e5e:	6824      	ldr	r4, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e60:	f3c4 0244 	ubfx	r2, r4, #1, #5
    1e64:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1e66:	f3c4 4144 	ubfx	r1, r4, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e6a:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1e6c:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e70:	d937      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1e72:	2b04      	cmp	r3, #4
    1e74:	d935      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1e76:	4c20      	ldr	r4, [pc, #128]	; (1ef8 <am_hal_ctimer_config+0xd0>)
    1e78:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e7a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1e7e:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1e82:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e86:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1e88:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e8c:	d929      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1e8e:	2b04      	cmp	r3, #4
    1e90:	d927      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1e92:	4c1a      	ldr	r4, [pc, #104]	; (1efc <am_hal_ctimer_config+0xd4>)
    1e94:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1e96:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1e9a:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1e9e:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1ea2:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1ea4:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1ea8:	d91b      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1eaa:	2b04      	cmp	r3, #4
    1eac:	d919      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1eae:	4c14      	ldr	r4, [pc, #80]	; (1f00 <am_hal_ctimer_config+0xd8>)
    1eb0:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1eb2:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1eb6:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1eba:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1ebe:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1ec0:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1ec4:	d90d      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1ec6:	2b04      	cmp	r3, #4
    1ec8:	d90b      	bls.n	1ee2 <am_hal_ctimer_config+0xba>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    1eca:	4c0e      	ldr	r4, [pc, #56]	; (1f04 <am_hal_ctimer_config+0xdc>)
    1ecc:	6820      	ldr	r0, [r4, #0]
    1ece:	f040 0204 	orr.w	r2, r0, #4
    1ed2:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ed4:	9801      	ldr	r0, [sp, #4]
    1ed6:	f380 8810 	msr	PRIMASK, r0

} // am_hal_ctimer_config()
    1eda:	b003      	add	sp, #12
    1edc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ee0:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1ee2:	4908      	ldr	r1, [pc, #32]	; (1f04 <am_hal_ctimer_config+0xdc>)
    1ee4:	680b      	ldr	r3, [r1, #0]
    1ee6:	f023 0404 	bic.w	r4, r3, #4
    1eea:	600c      	str	r4, [r1, #0]
    1eec:	e7f2      	b.n	1ed4 <am_hal_ctimer_config+0xac>
    1eee:	bf00      	nop
    1ef0:	4000800c 	.word	0x4000800c
    1ef4:	40008100 	.word	0x40008100
    1ef8:	4000801c 	.word	0x4000801c
    1efc:	4000802c 	.word	0x4000802c
    1f00:	4000803c 	.word	0x4000803c
    1f04:	40021020 	.word	0x40021020

00001f08 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f08:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1f0a:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f0e:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f10:	0100      	lsls	r0, r0, #4
    1f12:	4a09      	ldr	r2, [pc, #36]	; (1f38 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1f18:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1f1a:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1f1e:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1f22:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1f26:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1f28:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f2a:	9801      	ldr	r0, [sp, #4]
    1f2c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1f30:	b003      	add	sp, #12
    1f32:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f36:	4770      	bx	lr
    1f38:	4000800c 	.word	0x4000800c

00001f3c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1f3c:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f3e:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f42:	0100      	lsls	r0, r0, #4
    1f44:	4a06      	ldr	r2, [pc, #24]	; (1f60 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f46:	9301      	str	r3, [sp, #4]
    1f48:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1f4a:	5883      	ldr	r3, [r0, r2]
    1f4c:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1f50:	4319      	orrs	r1, r3
    1f52:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f54:	9801      	ldr	r0, [sp, #4]
    1f56:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1f5a:	b002      	add	sp, #8
    1f5c:	4770      	bx	lr
    1f5e:	bf00      	nop
    1f60:	4000800c 	.word	0x4000800c

00001f64 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f64:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f66:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1f6a:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1f6c:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f6e:	4d1c      	ldr	r5, [pc, #112]	; (1fe0 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f70:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1f72:	4e1c      	ldr	r6, [pc, #112]	; (1fe4 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1f74:	4f1c      	ldr	r7, [pc, #112]	; (1fe8 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f76:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f78:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1f7c:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f7e:	d01a      	beq.n	1fb6 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f80:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1f84:	2d80      	cmp	r5, #128	; 0x80
    1f86:	d01b      	beq.n	1fc0 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f8c:	2500      	movs	r5, #0
    1f8e:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1f90:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f92:	d01c      	beq.n	1fce <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f94:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1f98:	d01e      	beq.n	1fd8 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f9a:	0c21      	lsrs	r1, r4, #16
    1f9c:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f9e:	b291      	uxth	r1, r2
    1fa0:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1fa2:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1fa6:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1fa8:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1faa:	9801      	ldr	r0, [sp, #4]
    1fac:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1fb0:	b002      	add	sp, #8
    1fb2:	bcf0      	pop	{r4, r5, r6, r7}
    1fb4:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1fb6:	0c25      	lsrs	r5, r4, #16
    1fb8:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1fbc:	2c80      	cmp	r4, #128	; 0x80
    1fbe:	d10a      	bne.n	1fd6 <am_hal_ctimer_period_set+0x72>
    1fc0:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1fc2:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1fc4:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1fca:	4299      	cmp	r1, r3
    1fcc:	d1e2      	bne.n	1f94 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1fce:	b297      	uxth	r7, r2
    1fd0:	433d      	orrs	r5, r7
    1fd2:	5185      	str	r5, [r0, r6]
    1fd4:	e7e9      	b.n	1faa <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1fd6:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1fd8:	b296      	uxth	r6, r2
    1fda:	4335      	orrs	r5, r6
    1fdc:	51c5      	str	r5, [r0, r7]
    1fde:	e7e4      	b.n	1faa <am_hal_ctimer_period_set+0x46>
    1fe0:	4000800c 	.word	0x4000800c
    1fe4:	40008004 	.word	0x40008004
    1fe8:	40008008 	.word	0x40008008

00001fec <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1fec:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1fee:	f3ef 8310 	mrs	r3, PRIMASK
    1ff2:	9301      	str	r3, [sp, #4]
    1ff4:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1ff6:	4904      	ldr	r1, [pc, #16]	; (2008 <am_hal_ctimer_int_enable+0x1c>)
    1ff8:	680a      	ldr	r2, [r1, #0]
    1ffa:	4310      	orrs	r0, r2
    1ffc:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ffe:	9801      	ldr	r0, [sp, #4]
    2000:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    2004:	b002      	add	sp, #8
    2006:	4770      	bx	lr
    2008:	40008200 	.word	0x40008200

0000200c <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    200c:	4b01      	ldr	r3, [pc, #4]	; (2014 <am_hal_ctimer_int_clear+0x8>)
    200e:	6018      	str	r0, [r3, #0]
    2010:	4770      	bx	lr
    2012:	bf00      	nop
    2014:	40008208 	.word	0x40008208

00002018 <am_hal_ctimer_int_status_get>:
{
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    2018:	b910      	cbnz	r0, 2020 <am_hal_ctimer_int_status_get+0x8>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    201a:	4b09      	ldr	r3, [pc, #36]	; (2040 <am_hal_ctimer_int_status_get+0x28>)
    201c:	6818      	ldr	r0, [r3, #0]
    201e:	4770      	bx	lr
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    2020:	b082      	sub	sp, #8
        uint32_t u32RetVal;

        //
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM
    2022:	f3ef 8010 	mrs	r0, PRIMASK
    2026:	9001      	str	r0, [sp, #4]
    2028:	b672      	cpsid	i

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    202a:	4a05      	ldr	r2, [pc, #20]	; (2040 <am_hal_ctimer_int_status_get+0x28>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    202c:	4905      	ldr	r1, [pc, #20]	; (2044 <am_hal_ctimer_int_status_get+0x2c>)
        //
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    202e:	6810      	ldr	r0, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    2030:	680b      	ldr	r3, [r1, #0]

        //
        // Done with critical section.
        //
        AM_CRITICAL_END_ASM
    2032:	9a01      	ldr	r2, [sp, #4]
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    2034:	4018      	ands	r0, r3

        //
        // Done with critical section.
        //
        AM_CRITICAL_END_ASM
    2036:	f382 8810 	msr	PRIMASK, r2
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    }
} // am_hal_ctimer_int_status_get()
    203a:	b002      	add	sp, #8
    203c:	4770      	bx	lr
    203e:	bf00      	nop
    2040:	40008204 	.word	0x40008204
    2044:	40008200 	.word	0x40008200

00002048 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    2048:	e7fe      	b.n	2048 <am_hal_debug_error>
    204a:	bf00      	nop

0000204c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    204c:	4b01      	ldr	r3, [pc, #4]	; (2054 <am_hal_flash_delay+0x8>)
    204e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2050:	4708      	bx	r1
    2052:	bf00      	nop
    2054:	1000103c 	.word	0x1000103c

00002058 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    2058:	08c3      	lsrs	r3, r0, #3
    205a:	f003 0104 	and.w	r1, r3, #4
    205e:	4a04      	ldr	r2, [pc, #16]	; (2070 <am_hal_gpio_out_enable_bit_get+0x18>)
    2060:	588b      	ldr	r3, [r1, r2]
    2062:	f000 001f 	and.w	r0, r0, #31
    2066:	fa23 f100 	lsr.w	r1, r3, r0
}
    206a:	f001 0001 	and.w	r0, r1, #1
    206e:	4770      	bx	lr
    2070:	400100a0 	.word	0x400100a0

00002074 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    2074:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    2076:	4c05      	ldr	r4, [pc, #20]	; (208c <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    2078:	4a05      	ldr	r2, [pc, #20]	; (2090 <am_hal_gpio_int_enable+0x1c>)
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    207a:	6823      	ldr	r3, [r4, #0]
    207c:	4319      	orrs	r1, r3
    207e:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    2080:	6811      	ldr	r1, [r2, #0]
}
    2082:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    2086:	4308      	orrs	r0, r1
    2088:	6010      	str	r0, [r2, #0]
}
    208a:	4770      	bx	lr
    208c:	40010210 	.word	0x40010210
    2090:	40010200 	.word	0x40010200

00002094 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    2094:	b082      	sub	sp, #8
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    2096:	f3ef 8310 	mrs	r3, PRIMASK
    209a:	9301      	str	r3, [sp, #4]
    209c:	b672      	cpsid	i
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    209e:	4a04      	ldr	r2, [pc, #16]	; (20b0 <am_hal_gpio_int_clear+0x1c>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    20a0:	4b04      	ldr	r3, [pc, #16]	; (20b4 <am_hal_gpio_int_clear+0x20>)
{
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    20a2:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    20a4:	6018      	str	r0, [r3, #0]
    AM_CRITICAL_END_ASM
    20a6:	9801      	ldr	r0, [sp, #4]
    20a8:	f380 8810 	msr	PRIMASK, r0
}
    20ac:	b002      	add	sp, #8
    20ae:	4770      	bx	lr
    20b0:	40010218 	.word	0x40010218
    20b4:	40010208 	.word	0x40010208

000020b8 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    20b8:	280f      	cmp	r0, #15
    20ba:	d80b      	bhi.n	20d4 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    20bc:	2805      	cmp	r0, #5
    20be:	d013      	beq.n	20e8 <am_hal_interrupt_enable+0x30>
    20c0:	2806      	cmp	r0, #6
    20c2:	d017      	beq.n	20f4 <am_hal_interrupt_enable+0x3c>
    20c4:	2804      	cmp	r0, #4
    20c6:	d104      	bne.n	20d2 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    20c8:	4a0d      	ldr	r2, [pc, #52]	; (2100 <am_hal_interrupt_enable+0x48>)
    20ca:	6813      	ldr	r3, [r2, #0]
    20cc:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    20d0:	6010      	str	r0, [r2, #0]
    20d2:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    20d4:	f1a0 0310 	sub.w	r3, r0, #16
    20d8:	f003 0c1f 	and.w	ip, r3, #31
    20dc:	2001      	movs	r0, #1
    20de:	4909      	ldr	r1, [pc, #36]	; (2104 <am_hal_interrupt_enable+0x4c>)
    20e0:	fa00 f20c 	lsl.w	r2, r0, ip
    20e4:	600a      	str	r2, [r1, #0]
    20e6:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    20e8:	4805      	ldr	r0, [pc, #20]	; (2100 <am_hal_interrupt_enable+0x48>)
    20ea:	6801      	ldr	r1, [r0, #0]
    20ec:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    20f0:	6002      	str	r2, [r0, #0]
            break;
    20f2:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    20f4:	4902      	ldr	r1, [pc, #8]	; (2100 <am_hal_interrupt_enable+0x48>)
    20f6:	680a      	ldr	r2, [r1, #0]
    20f8:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    20fc:	600b      	str	r3, [r1, #0]
            break;
    20fe:	4770      	bx	lr
    2100:	e000ed24 	.word	0xe000ed24
    2104:	e000e100 	.word	0xe000e100

00002108 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    2108:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    210c:	b662      	cpsie	i
    __asm("    bx lr");
    210e:	4770      	bx	lr

00002110 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    2110:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    2114:	b672      	cpsid	i
    __asm("    bx lr");
    2116:	4770      	bx	lr

00002118 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    2118:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    211c:	4770      	bx	lr
    211e:	bf00      	nop

00002120 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    2120:	4a0d      	ldr	r2, [pc, #52]	; (2158 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    2122:	4b0e      	ldr	r3, [pc, #56]	; (215c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2124:	490e      	ldr	r1, [pc, #56]	; (2160 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    2126:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    2128:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    212a:	6814      	ldr	r4, [r2, #0]
    212c:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    212e:	6809      	ldr	r1, [r1, #0]
    2130:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2132:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2134:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2136:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2138:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    213a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    213c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2140:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    2142:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2144:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2148:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    214c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    214e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2150:	6142      	str	r2, [r0, #20]
}
    2152:	bc70      	pop	{r4, r5, r6}
    2154:	4770      	bx	lr
    2156:	bf00      	nop
    2158:	400201c4 	.word	0x400201c4
    215c:	400201cc 	.word	0x400201cc
    2160:	400201c0 	.word	0x400201c0

00002164 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2164:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    2166:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2168:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    216a:	b1c0      	cbz	r0, 219e <am_hal_pwrctrl_periph_enable+0x3a>
    216c:	1e43      	subs	r3, r0, #1
    216e:	4203      	tst	r3, r0
    2170:	d115      	bne.n	219e <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2172:	f3ef 8010 	mrs	r0, PRIMASK
    2176:	9001      	str	r0, [sp, #4]
    2178:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    217a:	4a18      	ldr	r2, [pc, #96]	; (21dc <am_hal_pwrctrl_periph_enable+0x78>)
    217c:	6811      	ldr	r1, [r2, #0]
    217e:	4321      	orrs	r1, r4
    2180:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    2182:	9b01      	ldr	r3, [sp, #4]
    2184:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    2188:	200e      	movs	r0, #14
    218a:	f7ff ff5f 	bl	204c <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    218e:	f014 0f0e 	tst.w	r4, #14
    2192:	d10a      	bne.n	21aa <am_hal_pwrctrl_periph_enable+0x46>
    2194:	f014 0f70 	tst.w	r4, #112	; 0x70
    2198:	d00e      	beq.n	21b8 <am_hal_pwrctrl_periph_enable+0x54>
    219a:	2408      	movs	r4, #8
    219c:	e006      	b.n	21ac <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    219e:	4a10      	ldr	r2, [pc, #64]	; (21e0 <am_hal_pwrctrl_periph_enable+0x7c>)
    21a0:	4810      	ldr	r0, [pc, #64]	; (21e4 <am_hal_pwrctrl_periph_enable+0x80>)
    21a2:	215d      	movs	r1, #93	; 0x5d
    21a4:	f7ff ff50 	bl	2048 <am_hal_debug_error>
    21a8:	e7e3      	b.n	2172 <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    21aa:	2404      	movs	r4, #4
    21ac:	4a0e      	ldr	r2, [pc, #56]	; (21e8 <am_hal_pwrctrl_periph_enable+0x84>)
    21ae:	6811      	ldr	r1, [r2, #0]
    21b0:	420c      	tst	r4, r1
    21b2:	d0fc      	beq.n	21ae <am_hal_pwrctrl_periph_enable+0x4a>
}
    21b4:	b002      	add	sp, #8
    21b6:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    21b8:	f240 1081 	movw	r0, #385	; 0x181
    21bc:	4020      	ands	r0, r4
    21be:	b940      	cbnz	r0, 21d2 <am_hal_pwrctrl_periph_enable+0x6e>
    21c0:	05a3      	lsls	r3, r4, #22
    21c2:	d408      	bmi.n	21d6 <am_hal_pwrctrl_periph_enable+0x72>
    21c4:	f414 6f80 	tst.w	r4, #1024	; 0x400
    21c8:	bf14      	ite	ne
    21ca:	2410      	movne	r4, #16
    21cc:	f04f 34ff 	moveq.w	r4, #4294967295
    21d0:	e7ec      	b.n	21ac <am_hal_pwrctrl_periph_enable+0x48>
    21d2:	2402      	movs	r4, #2
    21d4:	e7ea      	b.n	21ac <am_hal_pwrctrl_periph_enable+0x48>
    21d6:	2480      	movs	r4, #128	; 0x80
    21d8:	e7e8      	b.n	21ac <am_hal_pwrctrl_periph_enable+0x48>
    21da:	bf00      	nop
    21dc:	40021008 	.word	0x40021008
    21e0:	00002c34 	.word	0x00002c34
    21e4:	00002c68 	.word	0x00002c68
    21e8:	40021014 	.word	0x40021014

000021ec <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    21ec:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    21ee:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    21f0:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    21f2:	b110      	cbz	r0, 21fa <am_hal_pwrctrl_periph_disable+0xe>
    21f4:	1e43      	subs	r3, r0, #1
    21f6:	4203      	tst	r3, r0
    21f8:	d004      	beq.n	2204 <am_hal_pwrctrl_periph_disable+0x18>
    21fa:	4a0b      	ldr	r2, [pc, #44]	; (2228 <am_hal_pwrctrl_periph_disable+0x3c>)
    21fc:	480b      	ldr	r0, [pc, #44]	; (222c <am_hal_pwrctrl_periph_disable+0x40>)
    21fe:	218d      	movs	r1, #141	; 0x8d
    2200:	f7ff ff22 	bl	2048 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2204:	f3ef 8010 	mrs	r0, PRIMASK
    2208:	9001      	str	r0, [sp, #4]
    220a:	b672      	cpsid	i

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    220c:	4a08      	ldr	r2, [pc, #32]	; (2230 <am_hal_pwrctrl_periph_disable+0x44>)
    220e:	6811      	ldr	r1, [r2, #0]
    2210:	ea21 0404 	bic.w	r4, r1, r4
    2214:	6014      	str	r4, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    221c:	200e      	movs	r0, #14
    221e:	f7ff ff15 	bl	204c <am_hal_flash_delay>
}
    2222:	b002      	add	sp, #8
    2224:	bd10      	pop	{r4, pc}
    2226:	bf00      	nop
    2228:	00002c34 	.word	0x00002c34
    222c:	00002c68 	.word	0x00002c68
    2230:	40021008 	.word	0x40021008

00002234 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2234:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    2238:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    223a:	d03a      	beq.n	22b2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    223c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    2240:	f000 809d 	beq.w	237e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    2244:	2801      	cmp	r0, #1
    2246:	f000 809d 	beq.w	2384 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    224a:	2803      	cmp	r0, #3
    224c:	f000 80a6 	beq.w	239c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    2250:	2807      	cmp	r0, #7
    2252:	f000 809c 	beq.w	238e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    2256:	280f      	cmp	r0, #15
    2258:	f000 80a5 	beq.w	23a6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    225c:	281f      	cmp	r0, #31
    225e:	f000 80b1 	beq.w	23c4 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    2262:	283f      	cmp	r0, #63	; 0x3f
    2264:	f000 80b5 	beq.w	23d2 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    2268:	287f      	cmp	r0, #127	; 0x7f
    226a:	f000 80b9 	beq.w	23e0 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    226e:	28ff      	cmp	r0, #255	; 0xff
    2270:	f000 80a0 	beq.w	23b4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    2274:	f240 13ff 	movw	r3, #511	; 0x1ff
    2278:	4298      	cmp	r0, r3
    227a:	f000 80b8 	beq.w	23ee <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    227e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2282:	4288      	cmp	r0, r1
    2284:	f000 80b9 	beq.w	23fa <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    2288:	f240 72ff 	movw	r2, #2047	; 0x7ff
    228c:	4290      	cmp	r0, r2
    228e:	d00e      	beq.n	22ae <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    2290:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    2294:	f000 80b7 	beq.w	2406 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    2298:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    229c:	42a0      	cmp	r0, r4
    229e:	f000 80b5 	beq.w	240c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    22a2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    22a6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    22aa:	4560      	cmp	r0, ip
    22ac:	d132      	bne.n	2314 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    22ae:	495c      	ldr	r1, [pc, #368]	; (2420 <am_hal_pwrctrl_memory_enable+0x1ec>)
    22b0:	e066      	b.n	2380 <am_hal_pwrctrl_memory_enable+0x14c>
    22b2:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    22b6:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    22b8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    22ba:	4c5a      	ldr	r4, [pc, #360]	; (2424 <am_hal_pwrctrl_memory_enable+0x1f0>)
    22bc:	6822      	ldr	r2, [r4, #0]
    22be:	402a      	ands	r2, r5
    22c0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    22c2:	4d58      	ldr	r5, [pc, #352]	; (2424 <am_hal_pwrctrl_memory_enable+0x1f0>)
    22c4:	682c      	ldr	r4, [r5, #0]
    22c6:	4320      	orrs	r0, r4
    22c8:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    22ca:	2b00      	cmp	r3, #0
    22cc:	d029      	beq.n	2322 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22ce:	4a56      	ldr	r2, [pc, #344]	; (2428 <am_hal_pwrctrl_memory_enable+0x1f4>)
    22d0:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22d2:	4203      	tst	r3, r0
    22d4:	bf18      	it	ne
    22d6:	20c6      	movne	r0, #198	; 0xc6
    22d8:	d01f      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22da:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22dc:	422b      	tst	r3, r5
    22de:	d01c      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22e0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22e2:	4223      	tst	r3, r4
    22e4:	d019      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22e6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22e8:	422b      	tst	r3, r5
    22ea:	d016      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22ec:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22ee:	4223      	tst	r3, r4
    22f0:	d013      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22f2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22f4:	422b      	tst	r3, r5
    22f6:	d010      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22f8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    22fa:	4223      	tst	r3, r4
    22fc:	d00d      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22fe:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2300:	422b      	tst	r3, r5
    2302:	d00a      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2304:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2306:	4223      	tst	r3, r4
    2308:	d007      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    230a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    230c:	422b      	tst	r3, r5
    230e:	d004      	beq.n	231a <am_hal_pwrctrl_memory_enable+0xe6>
    2310:	3809      	subs	r0, #9
    2312:	d1e2      	bne.n	22da <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    2314:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    2316:	bc30      	pop	{r4, r5}
    2318:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    231a:	b911      	cbnz	r1, 2322 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    231c:	2001      	movs	r0, #1
}
    231e:	bc30      	pop	{r4, r5}
    2320:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2322:	4b41      	ldr	r3, [pc, #260]	; (2428 <am_hal_pwrctrl_memory_enable+0x1f4>)
    2324:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2326:	ea31 0402 	bics.w	r4, r1, r2
    232a:	bf18      	it	ne
    232c:	24c6      	movne	r4, #198	; 0xc6
    232e:	d0f5      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2330:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2332:	ea31 0000 	bics.w	r0, r1, r0
    2336:	d0f1      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2338:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    233a:	ea31 0005 	bics.w	r0, r1, r5
    233e:	d0ed      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2340:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2342:	ea31 0002 	bics.w	r0, r1, r2
    2346:	d0e9      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2348:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    234a:	ea31 0000 	bics.w	r0, r1, r0
    234e:	d0e5      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2350:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2352:	ea31 0005 	bics.w	r0, r1, r5
    2356:	d0e1      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2358:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    235a:	ea31 0002 	bics.w	r0, r1, r2
    235e:	d0dd      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2360:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2362:	ea31 0000 	bics.w	r0, r1, r0
    2366:	d0d9      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2368:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    236a:	ea31 0005 	bics.w	r0, r1, r5
    236e:	d0d5      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2370:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2372:	ea31 0002 	bics.w	r0, r1, r2
    2376:	d0d1      	beq.n	231c <am_hal_pwrctrl_memory_enable+0xe8>
    2378:	3c09      	subs	r4, #9
    237a:	d1d9      	bne.n	2330 <am_hal_pwrctrl_memory_enable+0xfc>
    237c:	e7ca      	b.n	2314 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    237e:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    2380:	2300      	movs	r3, #0
    2382:	e79e      	b.n	22c2 <am_hal_pwrctrl_memory_enable+0x8e>
    2384:	4d29      	ldr	r5, [pc, #164]	; (242c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2386:	4b2a      	ldr	r3, [pc, #168]	; (2430 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    2388:	f44f 7180 	mov.w	r1, #256	; 0x100
    238c:	e795      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    238e:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2392:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    2396:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    239a:	e78e      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    239c:	4d25      	ldr	r5, [pc, #148]	; (2434 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    239e:	4b26      	ldr	r3, [pc, #152]	; (2438 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    23a0:	f44f 7140 	mov.w	r1, #768	; 0x300
    23a4:	e789      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23a6:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23aa:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    23ae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    23b2:	e782      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23b4:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23b8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    23bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    23c0:	20ff      	movs	r0, #255	; 0xff
    23c2:	e77a      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23c4:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23c8:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    23cc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    23d0:	e773      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23d2:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23d6:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    23da:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    23de:	e76c      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23e0:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23e4:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    23e8:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    23ec:	e765      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    23ee:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23f2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    23f6:	4911      	ldr	r1, [pc, #68]	; (243c <am_hal_pwrctrl_memory_enable+0x208>)
    23f8:	e75f      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    23fa:	4911      	ldr	r1, [pc, #68]	; (2440 <am_hal_pwrctrl_memory_enable+0x20c>)
    23fc:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    2404:	e759      	b.n	22ba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2406:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    240a:	e7b9      	b.n	2380 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    240c:	4805      	ldr	r0, [pc, #20]	; (2424 <am_hal_pwrctrl_memory_enable+0x1f0>)
    240e:	6803      	ldr	r3, [r0, #0]
    2410:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    2414:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2416:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    241a:	2100      	movs	r1, #0
    241c:	e757      	b.n	22ce <am_hal_pwrctrl_memory_enable+0x9a>
    241e:	bf00      	nop
    2420:	0007ff00 	.word	0x0007ff00
    2424:	40021010 	.word	0x40021010
    2428:	40021014 	.word	0x40021014
    242c:	fffff801 	.word	0xfffff801
    2430:	0007fe00 	.word	0x0007fe00
    2434:	fffff803 	.word	0xfffff803
    2438:	0007fc00 	.word	0x0007fc00
    243c:	0001ff00 	.word	0x0001ff00
    2440:	0003ff00 	.word	0x0003ff00

00002444 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2444:	4b0f      	ldr	r3, [pc, #60]	; (2484 <am_hal_pwrctrl_bucks_init+0x40>)
    2446:	681a      	ldr	r2, [r3, #0]
    2448:	0792      	lsls	r2, r2, #30
    244a:	d502      	bpl.n	2452 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    244c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    244e:	07c3      	lsls	r3, r0, #31
    2450:	d40e      	bmi.n	2470 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2452:	4b0d      	ldr	r3, [pc, #52]	; (2488 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2454:	4a0b      	ldr	r2, [pc, #44]	; (2484 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2456:	6819      	ldr	r1, [r3, #0]
    2458:	f041 0002 	orr.w	r0, r1, #2
    245c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    245e:	6819      	ldr	r1, [r3, #0]
    2460:	f041 0001 	orr.w	r0, r1, #1
    2464:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2466:	6813      	ldr	r3, [r2, #0]
    2468:	f003 0103 	and.w	r1, r3, #3
    246c:	2903      	cmp	r1, #3
    246e:	d1fa      	bne.n	2466 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2470:	4a04      	ldr	r2, [pc, #16]	; (2484 <am_hal_pwrctrl_bucks_init+0x40>)
    2472:	6810      	ldr	r0, [r2, #0]
    2474:	f000 0303 	and.w	r3, r0, #3
    2478:	2b03      	cmp	r3, #3
    247a:	d1fa      	bne.n	2472 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    247c:	2042      	movs	r0, #66	; 0x42
    247e:	f7ff bde5 	b.w	204c <am_hal_flash_delay>
    2482:	bf00      	nop
    2484:	40021004 	.word	0x40021004
    2488:	40021000 	.word	0x40021000

0000248c <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <am_hal_pwrctrl_bucks_enable+0x30>)
    248e:	681a      	ldr	r2, [r3, #0]
    2490:	0792      	lsls	r2, r2, #30
    2492:	d502      	bpl.n	249a <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2494:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2496:	07c3      	lsls	r3, r0, #31
    2498:	d40e      	bmi.n	24b8 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    249a:	4b09      	ldr	r3, [pc, #36]	; (24c0 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    249c:	4a07      	ldr	r2, [pc, #28]	; (24bc <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    249e:	6819      	ldr	r1, [r3, #0]
    24a0:	f041 0002 	orr.w	r0, r1, #2
    24a4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    24a6:	6819      	ldr	r1, [r3, #0]
    24a8:	f041 0001 	orr.w	r0, r1, #1
    24ac:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    24ae:	6813      	ldr	r3, [r2, #0]
    24b0:	f003 0103 	and.w	r1, r3, #3
    24b4:	2903      	cmp	r1, #3
    24b6:	d1fa      	bne.n	24ae <am_hal_pwrctrl_bucks_enable+0x22>
    24b8:	4770      	bx	lr
    24ba:	bf00      	nop
    24bc:	40021004 	.word	0x40021004
    24c0:	40021000 	.word	0x40021000

000024c4 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    24c4:	4b12      	ldr	r3, [pc, #72]	; (2510 <am_hal_pwrctrl_bucks_disable+0x4c>)
    24c6:	681a      	ldr	r2, [r3, #0]
    24c8:	0792      	lsls	r2, r2, #30
    24ca:	d402      	bmi.n	24d2 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    24cc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    24ce:	07c3      	lsls	r3, r0, #31
    24d0:	d51c      	bpl.n	250c <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    24d2:	4910      	ldr	r1, [pc, #64]	; (2514 <am_hal_pwrctrl_bucks_disable+0x50>)
    24d4:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    24d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    24da:	2a20      	cmp	r2, #32
    24dc:	d00b      	beq.n	24f6 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    24de:	4b0e      	ldr	r3, [pc, #56]	; (2518 <am_hal_pwrctrl_bucks_disable+0x54>)
    24e0:	681a      	ldr	r2, [r3, #0]
    24e2:	f022 0002 	bic.w	r0, r2, #2
    24e6:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    24e8:	6819      	ldr	r1, [r3, #0]
    24ea:	f021 0201 	bic.w	r2, r1, #1
    24ee:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    24f0:	200a      	movs	r0, #10
    24f2:	f7ff bdab 	b.w	204c <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    24f6:	4809      	ldr	r0, [pc, #36]	; (251c <am_hal_pwrctrl_bucks_disable+0x58>)
    24f8:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    24fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    24fe:	d1ee      	bne.n	24de <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    2500:	4805      	ldr	r0, [pc, #20]	; (2518 <am_hal_pwrctrl_bucks_disable+0x54>)
    2502:	6803      	ldr	r3, [r0, #0]
    2504:	f003 0105 	and.w	r1, r3, #5
    2508:	6001      	str	r1, [r0, #0]
    250a:	e7f1      	b.n	24f0 <am_hal_pwrctrl_bucks_disable+0x2c>
    250c:	4770      	bx	lr
    250e:	bf00      	nop
    2510:	40021004 	.word	0x40021004
    2514:	4002000c 	.word	0x4002000c
    2518:	40021000 	.word	0x40021000
    251c:	40021008 	.word	0x40021008

00002520 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2520:	4905      	ldr	r1, [pc, #20]	; (2538 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2522:	4a06      	ldr	r2, [pc, #24]	; (253c <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2524:	680b      	ldr	r3, [r1, #0]
    2526:	f043 0006 	orr.w	r0, r3, #6
    252a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    252c:	6811      	ldr	r1, [r2, #0]
    252e:	f021 0304 	bic.w	r3, r1, #4
    2532:	6013      	str	r3, [r2, #0]
    2534:	4770      	bx	lr
    2536:	bf00      	nop
    2538:	40021018 	.word	0x40021018
    253c:	40021000 	.word	0x40021000

00002540 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2540:	4a05      	ldr	r2, [pc, #20]	; (2558 <am_hal_rtc_osc_select+0x18>)
    2542:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    2544:	b918      	cbnz	r0, 254e <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2546:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    254a:	6010      	str	r0, [r2, #0]
    254c:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    254e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2552:	6011      	str	r1, [r2, #0]
    2554:	4770      	bx	lr
    2556:	bf00      	nop
    2558:	4000400c 	.word	0x4000400c

0000255c <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    255c:	4a02      	ldr	r2, [pc, #8]	; (2568 <am_hal_rtc_osc_enable+0xc>)
    255e:	6813      	ldr	r3, [r2, #0]
    2560:	f023 0010 	bic.w	r0, r3, #16
    2564:	6010      	str	r0, [r2, #0]
    2566:	4770      	bx	lr
    2568:	40004050 	.word	0x40004050

0000256c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    256c:	4a02      	ldr	r2, [pc, #8]	; (2578 <am_hal_rtc_osc_disable+0xc>)
    256e:	6813      	ldr	r3, [r2, #0]
    2570:	f043 0010 	orr.w	r0, r3, #16
    2574:	6010      	str	r0, [r2, #0]
    2576:	4770      	bx	lr
    2578:	40004050 	.word	0x40004050

0000257c <am_hal_rtc_int_enable>:
am_hal_rtc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(RTC, INTEN) |= ui32Interrupt;
    257c:	4a02      	ldr	r2, [pc, #8]	; (2588 <am_hal_rtc_int_enable+0xc>)
    257e:	6813      	ldr	r3, [r2, #0]
    2580:	4318      	orrs	r0, r3
    2582:	6010      	str	r0, [r2, #0]
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	40004100 	.word	0x40004100

0000258c <am_hal_rtc_int_clear>:
am_hal_rtc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(RTC, INTCLR) = ui32Interrupt;
    258c:	4b01      	ldr	r3, [pc, #4]	; (2594 <am_hal_rtc_int_clear+0x8>)
    258e:	6018      	str	r0, [r3, #0]
    2590:	4770      	bx	lr
    2592:	bf00      	nop
    2594:	40004108 	.word	0x40004108

00002598 <am_hal_rtc_alarm_interval_set>:
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    2598:	2808      	cmp	r0, #8
//! @return None.
//
//*****************************************************************************
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    259a:	b410      	push	{r4}
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    259c:	d01c      	beq.n	25d8 <am_hal_rtc_alarm_interval_set+0x40>
    259e:	2809      	cmp	r0, #9
    25a0:	d110      	bne.n	25c4 <am_hal_rtc_alarm_interval_set+0x2c>
    25a2:	230e      	movs	r3, #14
        //
        // If repeat every 100th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_100TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_100TH;
    25a4:	22ff      	movs	r2, #255	; 0xff
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    25a6:	4c0e      	ldr	r4, [pc, #56]	; (25e0 <am_hal_rtc_alarm_interval_set+0x48>)

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    25a8:	490e      	ldr	r1, [pc, #56]	; (25e4 <am_hal_rtc_alarm_interval_set+0x4c>)
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    25aa:	6820      	ldr	r0, [r4, #0]
    25ac:	f020 000e 	bic.w	r0, r0, #14
    25b0:	4318      	orrs	r0, r3
    25b2:	6020      	str	r0, [r4, #0]

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    25b4:	680b      	ldr	r3, [r1, #0]
    25b6:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    25ba:	4322      	orrs	r2, r4
    25bc:	600a      	str	r2, [r1, #0]
}
    25be:	f85d 4b04 	ldr.w	r4, [sp], #4
    25c2:	4770      	bx	lr
        //
        default:
            //
            // Get the current value of the ALM100 field.
            //
            ui32Value = AM_BFR(RTC, ALMLOW, ALM100);
    25c4:	4b07      	ldr	r3, [pc, #28]	; (25e4 <am_hal_rtc_alarm_interval_set+0x4c>)
    25c6:	681a      	ldr	r2, [r3, #0]
    25c8:	b2d2      	uxtb	r2, r2
    25ca:	0040      	lsls	r0, r0, #1

            //
            // If ALM100 was previous EVERY_10TH or EVERY_100TH reset to zero
            // otherwise keep previous setting.
            //
            ui32Alm100 = ui32Value >= 0xF0 ? 0 : ui32Value;
    25cc:	2aef      	cmp	r2, #239	; 0xef
    25ce:	f000 030e 	and.w	r3, r0, #14
    25d2:	d9e8      	bls.n	25a6 <am_hal_rtc_alarm_interval_set+0xe>
    25d4:	2200      	movs	r2, #0
    25d6:	e7e6      	b.n	25a6 <am_hal_rtc_alarm_interval_set+0xe>
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    25d8:	230e      	movs	r3, #14
        //
        // If repeat every 10th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_10TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_10TH;
    25da:	22f0      	movs	r2, #240	; 0xf0
    25dc:	e7e3      	b.n	25a6 <am_hal_rtc_alarm_interval_set+0xe>
    25de:	bf00      	nop
    25e0:	40004050 	.word	0x40004050
    25e4:	40004048 	.word	0x40004048

000025e8 <am_hal_sysctrl_buckA_ctimer_isr>:
// Note: This handler assumes that the interrupt is cleared in am_ctimer_isr().
//
//*****************************************************************************
static void
am_hal_sysctrl_buckA_ctimer_isr(void)
{
    25e8:	b510      	push	{r4, lr}
    // Begin critical section.
    // Although a relatively long time, the following 2us delay is critically
    // timed for re-trimming the buck and thus cannot be extended.  Therefore,
    // we must keep it inside the critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    25ea:	f3ef 8410 	mrs	r4, PRIMASK
// Note: This handler assumes that the interrupt is cleared in am_ctimer_isr().
//
//*****************************************************************************
static void
am_hal_sysctrl_buckA_ctimer_isr(void)
{
    25ee:	b084      	sub	sp, #16
    // Begin critical section.
    // Although a relatively long time, the following 2us delay is critically
    // timed for re-trimming the buck and thus cannot be extended.  Therefore,
    // we must keep it inside the critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    25f0:	9401      	str	r4, [sp, #4]
    25f2:	b672      	cpsid	i

    //
    // Delay for 2us.
    //
    am_hal_flash_delay( FLASH_CYCLES_US(2) );
    25f4:	201c      	movs	r0, #28
    25f6:	f7ff fd29 	bl	204c <am_hal_flash_delay>

    //
    // Determine which buck (core or mem) needs to be updated.
    //
    if ( g_ui32CoreBuck == COREBUCK_TIMERA )
    25fa:	4b1d      	ldr	r3, [pc, #116]	; (2670 <am_hal_sysctrl_buckA_ctimer_isr+0x88>)
    25fc:	6818      	ldr	r0, [r3, #0]
    25fe:	2801      	cmp	r0, #1
    2600:	d023      	beq.n	264a <am_hal_sysctrl_buckA_ctimer_isr+0x62>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2602:	9403      	str	r4, [sp, #12]
    2604:	b672      	cpsid	i
    {
        //
        // Use saved settings
        //
        ui32NewCore = g_ui32SaveCoreBuckZX;
        ui32NewMem  = g_ui32SaveMemBuckZX;
    2606:	4a1b      	ldr	r2, [pc, #108]	; (2674 <am_hal_sysctrl_buckA_ctimer_isr+0x8c>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2608:	491b      	ldr	r1, [pc, #108]	; (2678 <am_hal_sysctrl_buckA_ctimer_isr+0x90>)
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    260a:	6814      	ldr	r4, [r2, #0]
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    260c:	680b      	ldr	r3, [r1, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    260e:	680b      	ldr	r3, [r1, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2610:	680b      	ldr	r3, [r1, #0]
    2612:	0360      	lsls	r0, r4, #13
    2614:	f400 32f0 	and.w	r2, r0, #122880	; 0x1e000
    2618:	f423 34f0 	bic.w	r4, r3, #122880	; 0x1e000
    261c:	4314      	orrs	r4, r2
    261e:	600c      	str	r4, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2620:	9903      	ldr	r1, [sp, #12]
    2622:	f381 8810 	msr	PRIMASK, r1
        //
        setBuckZX(0, 0, SETBUCKZX_RESTORE_MEM_ONLY  |
                        SETBUCKZX_USE_SAVED_SETTINGS );
    }

    g_ui32BuckInputs |= 0x1;
    2626:	4c15      	ldr	r4, [pc, #84]	; (267c <am_hal_sysctrl_buckA_ctimer_isr+0x94>)
    2628:	6821      	ldr	r1, [r4, #0]
    262a:	f041 0201 	orr.w	r2, r1, #1
    262e:	6022      	str	r2, [r4, #0]

    if ( g_ui32BuckInputs == 0x3 )
    2630:	6823      	ldr	r3, [r4, #0]
    2632:	2b03      	cmp	r3, #3
    2634:	d104      	bne.n	2640 <am_hal_sysctrl_buckA_ctimer_isr+0x58>
    {
        g_bBuckRestoreComplete = true;
    2636:	4912      	ldr	r1, [pc, #72]	; (2680 <am_hal_sysctrl_buckA_ctimer_isr+0x98>)
    2638:	2001      	movs	r0, #1
        g_ui32BuckInputs = 0;
    263a:	2200      	movs	r2, #0

    g_ui32BuckInputs |= 0x1;

    if ( g_ui32BuckInputs == 0x3 )
    {
        g_bBuckRestoreComplete = true;
    263c:	7008      	strb	r0, [r1, #0]
        g_ui32BuckInputs = 0;
    263e:	6022      	str	r2, [r4, #0]
    }

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    2640:	9c01      	ldr	r4, [sp, #4]
    2642:	f384 8810 	msr	PRIMASK, r4
}
    2646:	b004      	add	sp, #16
    2648:	bd10      	pop	{r4, pc}
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    264a:	9402      	str	r4, [sp, #8]
    264c:	b672      	cpsid	i
    if ( ui32Flags & SETBUCKZX_USE_SAVED_SETTINGS )
    {
        //
        // Use saved settings
        //
        ui32NewCore = g_ui32SaveCoreBuckZX;
    264e:	4b0d      	ldr	r3, [pc, #52]	; (2684 <am_hal_sysctrl_buckA_ctimer_isr+0x9c>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2650:	4809      	ldr	r0, [pc, #36]	; (2678 <am_hal_sysctrl_buckA_ctimer_isr+0x90>)
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2652:	681a      	ldr	r2, [r3, #0]
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2654:	6803      	ldr	r3, [r0, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    2656:	6803      	ldr	r3, [r0, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2658:	6804      	ldr	r4, [r0, #0]
    265a:	0091      	lsls	r1, r2, #2
    265c:	f001 023c 	and.w	r2, r1, #60	; 0x3c
    2660:	f024 033c 	bic.w	r3, r4, #60	; 0x3c
    2664:	4313      	orrs	r3, r2
    2666:	6003      	str	r3, [r0, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2668:	9802      	ldr	r0, [sp, #8]
    266a:	f380 8810 	msr	PRIMASK, r0
    266e:	e7da      	b.n	2626 <am_hal_sysctrl_buckA_ctimer_isr+0x3e>
    2670:	10001194 	.word	0x10001194
    2674:	100011a8 	.word	0x100011a8
    2678:	40020068 	.word	0x40020068
    267c:	1000119c 	.word	0x1000119c
    2680:	10001198 	.word	0x10001198
    2684:	100011a4 	.word	0x100011a4

00002688 <am_hal_sysctrl_buckB_ctimer_isr>:
// Note: This handler assumes that the interrupt is cleared in am_ctimer_isr().
//
//*****************************************************************************
static void
am_hal_sysctrl_buckB_ctimer_isr(void)
{
    2688:	b510      	push	{r4, lr}
    // Begin critical section.
    // Although a relatively long time, the following 2us delay is critically
    // timed for re-trimming the buck and thus cannot be extended.  Therefore,
    // we must keep it inside the critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    268a:	f3ef 8410 	mrs	r4, PRIMASK
// Note: This handler assumes that the interrupt is cleared in am_ctimer_isr().
//
//*****************************************************************************
static void
am_hal_sysctrl_buckB_ctimer_isr(void)
{
    268e:	b084      	sub	sp, #16
    // Begin critical section.
    // Although a relatively long time, the following 2us delay is critically
    // timed for re-trimming the buck and thus cannot be extended.  Therefore,
    // we must keep it inside the critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2690:	9401      	str	r4, [sp, #4]
    2692:	b672      	cpsid	i

    //
    // Delay for 2us.
    //
    am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2694:	201c      	movs	r0, #28
    2696:	f7ff fcd9 	bl	204c <am_hal_flash_delay>

    //
    // Determine which buck (core or mem) needs to be updated.
    //
    if ( g_ui32CoreBuck == COREBUCK_TIMERB )
    269a:	4b1d      	ldr	r3, [pc, #116]	; (2710 <am_hal_sysctrl_buckB_ctimer_isr+0x88>)
    269c:	6818      	ldr	r0, [r3, #0]
    269e:	2802      	cmp	r0, #2
    26a0:	d023      	beq.n	26ea <am_hal_sysctrl_buckB_ctimer_isr+0x62>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    26a2:	9403      	str	r4, [sp, #12]
    26a4:	b672      	cpsid	i
    {
        //
        // Use saved settings
        //
        ui32NewCore = g_ui32SaveCoreBuckZX;
        ui32NewMem  = g_ui32SaveMemBuckZX;
    26a6:	4a1b      	ldr	r2, [pc, #108]	; (2714 <am_hal_sysctrl_buckB_ctimer_isr+0x8c>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    26a8:	491b      	ldr	r1, [pc, #108]	; (2718 <am_hal_sysctrl_buckB_ctimer_isr+0x90>)
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    26aa:	6814      	ldr	r4, [r2, #0]
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    26ac:	680b      	ldr	r3, [r1, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    26ae:	680b      	ldr	r3, [r1, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    26b0:	680b      	ldr	r3, [r1, #0]
    26b2:	0360      	lsls	r0, r4, #13
    26b4:	f400 32f0 	and.w	r2, r0, #122880	; 0x1e000
    26b8:	f423 34f0 	bic.w	r4, r3, #122880	; 0x1e000
    26bc:	4314      	orrs	r4, r2
    26be:	600c      	str	r4, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    26c0:	9903      	ldr	r1, [sp, #12]
    26c2:	f381 8810 	msr	PRIMASK, r1
        //
        setBuckZX(0, 0, SETBUCKZX_RESTORE_MEM_ONLY  |
                        SETBUCKZX_USE_SAVED_SETTINGS );
    }

    g_ui32BuckInputs |= 0x2;
    26c6:	4c15      	ldr	r4, [pc, #84]	; (271c <am_hal_sysctrl_buckB_ctimer_isr+0x94>)
    26c8:	6821      	ldr	r1, [r4, #0]
    26ca:	f041 0202 	orr.w	r2, r1, #2
    26ce:	6022      	str	r2, [r4, #0]

    if ( g_ui32BuckInputs == 0x3 )
    26d0:	6823      	ldr	r3, [r4, #0]
    26d2:	2b03      	cmp	r3, #3
    26d4:	d104      	bne.n	26e0 <am_hal_sysctrl_buckB_ctimer_isr+0x58>
    {
        g_bBuckRestoreComplete = true;
    26d6:	4912      	ldr	r1, [pc, #72]	; (2720 <am_hal_sysctrl_buckB_ctimer_isr+0x98>)
    26d8:	2001      	movs	r0, #1
        g_ui32BuckInputs = 0;
    26da:	2200      	movs	r2, #0

    g_ui32BuckInputs |= 0x2;

    if ( g_ui32BuckInputs == 0x3 )
    {
        g_bBuckRestoreComplete = true;
    26dc:	7008      	strb	r0, [r1, #0]
        g_ui32BuckInputs = 0;
    26de:	6022      	str	r2, [r4, #0]
    }

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    26e0:	9c01      	ldr	r4, [sp, #4]
    26e2:	f384 8810 	msr	PRIMASK, r4
}
    26e6:	b004      	add	sp, #16
    26e8:	bd10      	pop	{r4, pc}
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    26ea:	9402      	str	r4, [sp, #8]
    26ec:	b672      	cpsid	i
    if ( ui32Flags & SETBUCKZX_USE_SAVED_SETTINGS )
    {
        //
        // Use saved settings
        //
        ui32NewCore = g_ui32SaveCoreBuckZX;
    26ee:	4b0d      	ldr	r3, [pc, #52]	; (2724 <am_hal_sysctrl_buckB_ctimer_isr+0x9c>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    26f0:	4809      	ldr	r0, [pc, #36]	; (2718 <am_hal_sysctrl_buckB_ctimer_isr+0x90>)
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    26f2:	681a      	ldr	r2, [r3, #0]
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    26f4:	6803      	ldr	r3, [r0, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    26f6:	6803      	ldr	r3, [r0, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    26f8:	6804      	ldr	r4, [r0, #0]
    26fa:	0091      	lsls	r1, r2, #2
    26fc:	f001 023c 	and.w	r2, r1, #60	; 0x3c
    2700:	f024 033c 	bic.w	r3, r4, #60	; 0x3c
    2704:	4313      	orrs	r3, r2
    2706:	6003      	str	r3, [r0, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2708:	9802      	ldr	r0, [sp, #8]
    270a:	f380 8810 	msr	PRIMASK, r0
    270e:	e7da      	b.n	26c6 <am_hal_sysctrl_buckB_ctimer_isr+0x3e>
    2710:	10001194 	.word	0x10001194
    2714:	100011a8 	.word	0x100011a8
    2718:	40020068 	.word	0x40020068
    271c:	1000119c 	.word	0x1000119c
    2720:	10001198 	.word	0x10001198
    2724:	100011a4 	.word	0x100011a4

00002728 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	b083      	sub	sp, #12
    272c:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    272e:	f7ff fcef 	bl	2110 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2732:	4a41      	ldr	r2, [pc, #260]	; (2838 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2734:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2736:	b11d      	cbz	r5, 2740 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2738:	4b40      	ldr	r3, [pc, #256]	; (283c <am_hal_sysctrl_sleep+0x114>)
    273a:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    273c:	07c3      	lsls	r3, r0, #31
    273e:	d509      	bpl.n	2754 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2740:	6811      	ldr	r1, [r2, #0]
    2742:	f021 0604 	bic.w	r6, r1, #4
    2746:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2748:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    274a:	4620      	mov	r0, r4
    274c:	f7ff fce4 	bl	2118 <am_hal_interrupt_master_set>
}
    2750:	b003      	add	sp, #12
    2752:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2754:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2756:	493a      	ldr	r1, [pc, #232]	; (2840 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2758:	4f3a      	ldr	r7, [pc, #232]	; (2844 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    275a:	4d3b      	ldr	r5, [pc, #236]	; (2848 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    275c:	483b      	ldr	r0, [pc, #236]	; (284c <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    275e:	f043 0604 	orr.w	r6, r3, #4
    2762:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2764:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2766:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2768:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    276a:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    276c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2770:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2772:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2776:	bf14      	ite	ne
    2778:	2500      	movne	r5, #0
    277a:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    277c:	2e03      	cmp	r6, #3
    277e:	bf8c      	ite	hi
    2780:	2100      	movhi	r1, #0
    2782:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2784:	f012 0303 	ands.w	r3, r2, #3
    2788:	bf18      	it	ne
    278a:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    278c:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2790:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2792:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2794:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2798:	b91e      	cbnz	r6, 27a2 <am_hal_sysctrl_sleep+0x7a>
    279a:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    279e:	2d0f      	cmp	r5, #15
    27a0:	d00a      	beq.n	27b8 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    27a2:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    27a4:	2d0f      	cmp	r5, #15
    27a6:	d01a      	beq.n	27de <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    27a8:	4f29      	ldr	r7, [pc, #164]	; (2850 <am_hal_sysctrl_sleep+0x128>)
    27aa:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    27ac:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    27ae:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    27b0:	f7ff fcb2 	bl	2118 <am_hal_interrupt_master_set>
}
    27b4:	b003      	add	sp, #12
    27b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    27b8:	683a      	ldr	r2, [r7, #0]
    27ba:	1e50      	subs	r0, r2, #1
    27bc:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    27be:	9800      	ldr	r0, [sp, #0]
    27c0:	f04f 31ff 	mov.w	r1, #4294967295
    27c4:	f7ff fbba 	bl	1f3c <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    27c8:	9800      	ldr	r0, [sp, #0]
    27ca:	4633      	mov	r3, r6
    27cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    27d0:	f04f 31ff 	mov.w	r1, #4294967295
    27d4:	f7ff fbc6 	bl	1f64 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    27d8:	f7ff fe74 	bl	24c4 <am_hal_pwrctrl_bucks_disable>
    27dc:	e7e1      	b.n	27a2 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    27de:	f3ef 8310 	mrs	r3, PRIMASK
    27e2:	9301      	str	r3, [sp, #4]
    27e4:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    27e6:	4e1b      	ldr	r6, [pc, #108]	; (2854 <am_hal_sysctrl_sleep+0x12c>)
    27e8:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    27ea:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    27ec:	6835      	ldr	r5, [r6, #0]
    27ee:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    27f2:	f04c 021c 	orr.w	r2, ip, #28
    27f6:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    27f8:	6830      	ldr	r0, [r6, #0]
    27fa:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    27fe:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    2802:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2804:	9e01      	ldr	r6, [sp, #4]
    2806:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    280a:	201c      	movs	r0, #28
    280c:	f7ff fc1e 	bl	204c <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2810:	f7ff fe3c 	bl	248c <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2814:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2816:	4910      	ldr	r1, [pc, #64]	; (2858 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2818:	4d0d      	ldr	r5, [pc, #52]	; (2850 <am_hal_sysctrl_sleep+0x128>)
    281a:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    281c:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    281e:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2820:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2822:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2824:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2826:	f7ff fc11 	bl	204c <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    282a:	9800      	ldr	r0, [sp, #0]
    282c:	f04f 31ff 	mov.w	r1, #4294967295
    2830:	f7ff fb6a 	bl	1f08 <am_hal_ctimer_start>
    2834:	e789      	b.n	274a <am_hal_sysctrl_sleep+0x22>
    2836:	bf00      	nop
    2838:	e000ed10 	.word	0xe000ed10
    283c:	40020250 	.word	0x40020250
    2840:	4002000c 	.word	0x4002000c
    2844:	100011a0 	.word	0x100011a0
    2848:	40021000 	.word	0x40021000
    284c:	40021008 	.word	0x40021008
    2850:	10001198 	.word	0x10001198
    2854:	40020068 	.word	0x40020068
    2858:	1000119c 	.word	0x1000119c

0000285c <am_hal_sysctrl_buck_ctimer_isr_init>:
//! @return 0.
//
//*****************************************************************************
uint32_t
am_hal_sysctrl_buck_ctimer_isr_init(uint32_t ui32BuckTimerNumber)
{
    285c:	b5f0      	push	{r4, r5, r6, r7, lr}
    g_ui32BuckInputs = 0;

    //
    // Initialize operation complete flag
    //
    g_bBuckRestoreComplete = false;
    285e:	494c      	ldr	r1, [pc, #304]	; (2990 <am_hal_sysctrl_buck_ctimer_isr_init+0x134>)
    uint32_t ui32RetVal = 0;

    //
    // Initialize the input flags
    //
    g_ui32BuckInputs = 0;
    2860:	4c4c      	ldr	r4, [pc, #304]	; (2994 <am_hal_sysctrl_buck_ctimer_isr_init+0x138>)
    g_bBuckRestoreComplete = false;

    //
    // Initialize to assume there is no valid timer.
    //
    g_ui32BuckTimer = 0;
    2862:	4a4d      	ldr	r2, [pc, #308]	; (2998 <am_hal_sysctrl_buck_ctimer_isr_init+0x13c>)
    uint32_t ui32RetVal = 0;

    //
    // Initialize the input flags
    //
    g_ui32BuckInputs = 0;
    2864:	2300      	movs	r3, #0
    //
    // Initialize to assume there is no valid timer.
    //
    g_ui32BuckTimer = 0;

    if ( ui32BuckTimerNumber > BUCK_TIMER_MAX )
    2866:	2803      	cmp	r0, #3
    uint32_t ui32RetVal = 0;

    //
    // Initialize the input flags
    //
    g_ui32BuckInputs = 0;
    2868:	6023      	str	r3, [r4, #0]
//! @return 0.
//
//*****************************************************************************
uint32_t
am_hal_sysctrl_buck_ctimer_isr_init(uint32_t ui32BuckTimerNumber)
{
    286a:	b085      	sub	sp, #20
    g_ui32BuckInputs = 0;

    //
    // Initialize operation complete flag
    //
    g_bBuckRestoreComplete = false;
    286c:	700b      	strb	r3, [r1, #0]

    //
    // Initialize to assume there is no valid timer.
    //
    g_ui32BuckTimer = 0;
    286e:	6013      	str	r3, [r2, #0]

    if ( ui32BuckTimerNumber > BUCK_TIMER_MAX )
    2870:	d92b      	bls.n	28ca <am_hal_sysctrl_buck_ctimer_isr_init+0x6e>
    {
        if ( ( ui32BuckTimerNumber & 0xFFFF0000 ) ==
    2872:	0c04      	lsrs	r4, r0, #16
    2874:	0421      	lsls	r1, r4, #16
    2876:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
    287a:	d002      	beq.n	2882 <am_hal_sysctrl_buck_ctimer_isr_init+0x26>
        //
        am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    }

    return ui32RetVal;
}
    287c:	2000      	movs	r0, #0
    287e:	b005      	add	sp, #20
    2880:	bdf0      	pop	{r4, r5, r6, r7, pc}
            //
            // The caller is asking for the hard option, which changes the
            //  settings to the more noise-immune, if less efficient, settings.
            // While we're at it, go ahead and save off the current settings.
            //
            if ( (ui32BuckTimerNumber & 0x0000FFFF) == 0 )
    2882:	b286      	uxth	r6, r0
    2884:	2e00      	cmp	r6, #0
    2886:	d15b      	bne.n	2940 <am_hal_sysctrl_buck_ctimer_isr_init+0xe4>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2888:	f3ef 8710 	mrs	r7, PRIMASK
    288c:	9701      	str	r7, [sp, #4]
    288e:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2890:	4e42      	ldr	r6, [pc, #264]	; (299c <am_hal_sysctrl_buck_ctimer_isr_init+0x140>)
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    2892:	4d43      	ldr	r5, [pc, #268]	; (29a0 <am_hal_sysctrl_buck_ctimer_isr_init+0x144>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2894:	6830      	ldr	r0, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    2896:	6833      	ldr	r3, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2898:	6831      	ldr	r1, [r6, #0]
            g_ui32SaveCoreBuckZX = ui32SaveCore;
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    289a:	4c42      	ldr	r4, [pc, #264]	; (29a4 <am_hal_sysctrl_buck_ctimer_isr_init+0x148>)
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    289c:	f021 0c3c 	bic.w	ip, r1, #60	; 0x3c
    28a0:	f04c 021c 	orr.w	r2, ip, #28
    28a4:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    28a6:	6837      	ldr	r7, [r6, #0]
    28a8:	f427 31f0 	bic.w	r1, r7, #122880	; 0x1e000
    28ac:	f441 4260 	orr.w	r2, r1, #57344	; 0xe000
    28b0:	6032      	str	r2, [r6, #0]
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    28b2:	f3c0 0083 	ubfx	r0, r0, #2, #4
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    28b6:	f3c3 3743 	ubfx	r7, r3, #13, #4
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    28ba:	9e01      	ldr	r6, [sp, #4]
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    28bc:	6028      	str	r0, [r5, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    28be:	6027      	str	r7, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    28c0:	f386 8810 	msr	PRIMASK, r6
        //
        am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    }

    return ui32RetVal;
}
    28c4:	2000      	movs	r0, #0
    28c6:	b005      	add	sp, #20
    28c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28ca:	4604      	mov	r4, r0
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    28cc:	f3ef 8010 	mrs	r0, PRIMASK
    28d0:	9003      	str	r0, [sp, #12]
    28d2:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    28d4:	4d31      	ldr	r5, [pc, #196]	; (299c <am_hal_sysctrl_buck_ctimer_isr_init+0x140>)
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    28d6:	4e32      	ldr	r6, [pc, #200]	; (29a0 <am_hal_sysctrl_buck_ctimer_isr_init+0x144>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    28d8:	682f      	ldr	r7, [r5, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    28da:	682b      	ldr	r3, [r5, #0]
            g_ui32SaveCoreBuckZX = ui32SaveCore;
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    28dc:	4d31      	ldr	r5, [pc, #196]	; (29a4 <am_hal_sysctrl_buck_ctimer_isr_init+0x148>)
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    28de:	9803      	ldr	r0, [sp, #12]
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    28e0:	f3c7 0183 	ubfx	r1, r7, #2, #4
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    28e4:	f3c3 3743 	ubfx	r7, r3, #13, #4
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    28e8:	6031      	str	r1, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    28ea:	602f      	str	r7, [r5, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    28ec:	f380 8810 	msr	PRIMASK, r0
        g_ui32BuckTimer = ui32BuckTimerNumber + 1;

        //
        // Register the timer ISRs
        //
        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERA0C0 <<
    28f0:	2601      	movs	r6, #1
                                    (ui32BuckTimerNumber * 2),
    28f2:	fa04 f506 	lsl.w	r5, r4, r6

        //
        // The timer number will be maintained as (n + 1).  Therefore, a value
        // of 0 saved in the global is an invalid timer.  1=timer0, 2=timer1...
        //
        g_ui32BuckTimer = ui32BuckTimerNumber + 1;
    28f6:	19a3      	adds	r3, r4, r6

        //
        // Register the timer ISRs
        //
        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERA0C0 <<
    28f8:	fa06 f005 	lsl.w	r0, r6, r5
                                    (ui32BuckTimerNumber * 2),
                                     am_hal_sysctrl_buckA_ctimer_isr );

        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERB0C0 <<
    28fc:	2702      	movs	r7, #2
        g_ui32BuckTimer = ui32BuckTimerNumber + 1;

        //
        // Register the timer ISRs
        //
        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERA0C0 <<
    28fe:	492a      	ldr	r1, [pc, #168]	; (29a8 <am_hal_sysctrl_buck_ctimer_isr_init+0x14c>)

        //
        // The timer number will be maintained as (n + 1).  Therefore, a value
        // of 0 saved in the global is an invalid timer.  1=timer0, 2=timer1...
        //
        g_ui32BuckTimer = ui32BuckTimerNumber + 1;
    2900:	6013      	str	r3, [r2, #0]

        //
        // Register the timer ISRs
        //
        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERA0C0 <<
    2902:	f7ff fa2f 	bl	1d64 <am_hal_ctimer_int_register>
                                    (ui32BuckTimerNumber * 2),
                                     am_hal_sysctrl_buckA_ctimer_isr );

        am_hal_ctimer_int_register( AM_HAL_CTIMER_INT_TIMERB0C0 <<
    2906:	fa07 f005 	lsl.w	r0, r7, r5
    290a:	4928      	ldr	r1, [pc, #160]	; (29ac <am_hal_sysctrl_buck_ctimer_isr_init+0x150>)
    290c:	f7ff fa2a 	bl	1d64 <am_hal_ctimer_int_register>
        if ( (ui32BuckTimerNumber == 0)  ||  (ui32BuckTimerNumber == 1) )
        {
            //
            // Indicate that TimerB is core buck.
            //
            g_ui32CoreBuck = COREBUCK_TIMERB;
    2910:	4a27      	ldr	r2, [pc, #156]	; (29b0 <am_hal_sysctrl_buck_ctimer_isr_init+0x154>)
        // Determine which timer input (A or B) is core buck and which is mem
        // buck based on the timer number.
        //  For CTIMER 0 & 1: Timer A is mem  buck, Timer B is core buck
        //  For CTIMER 2 & 3: Timer A is core buck, Timer B is mem  buck
        //
        if ( (ui32BuckTimerNumber == 0)  ||  (ui32BuckTimerNumber == 1) )
    2912:	42b4      	cmp	r4, r6
        }

        //
        // Clear and configure the timers
        //
        am_hal_ctimer_clear(ui32BuckTimerNumber, AM_HAL_CTIMER_BOTH);
    2914:	4620      	mov	r0, r4
    2916:	f04f 31ff 	mov.w	r1, #4294967295
        if ( (ui32BuckTimerNumber == 0)  ||  (ui32BuckTimerNumber == 1) )
        {
            //
            // Indicate that TimerB is core buck.
            //
            g_ui32CoreBuck = COREBUCK_TIMERB;
    291a:	bf94      	ite	ls
    291c:	6017      	strls	r7, [r2, #0]
        else
        {
            //
            // Indicate that TimerA is core buck
            //
            g_ui32CoreBuck = COREBUCK_TIMERA;
    291e:	6016      	strhi	r6, [r2, #0]
        }

        //
        // Clear and configure the timers
        //
        am_hal_ctimer_clear(ui32BuckTimerNumber, AM_HAL_CTIMER_BOTH);
    2920:	f7ff fb0c 	bl	1f3c <am_hal_ctimer_clear>

        am_hal_ctimer_config(ui32BuckTimerNumber,
    2924:	4923      	ldr	r1, [pc, #140]	; (29b4 <am_hal_sysctrl_buck_ctimer_isr_init+0x158>)
    2926:	4620      	mov	r0, r4
    2928:	f7ff fa7e 	bl	1e28 <am_hal_ctimer_config>
                             (am_hal_ctimer_config_t*)&g_sBuckTimer);

        //
        // Enable the interrupts for timers A and B
        //
        am_hal_ctimer_int_enable( (AM_HAL_CTIMER_INT_TIMERA0C0 |
    292c:	2003      	movs	r0, #3
    292e:	40a8      	lsls	r0, r5
    2930:	f7ff fb5c 	bl	1fec <am_hal_ctimer_int_enable>
                                   (ui32BuckTimerNumber * 2) );

        //
        // Enable the timer interrupt in the NVIC.
        //
        am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    2934:	201d      	movs	r0, #29
    2936:	f7ff fbbf 	bl	20b8 <am_hal_interrupt_enable>
    }

    return ui32RetVal;
}
    293a:	2000      	movs	r0, #0
    293c:	b005      	add	sp, #20
    293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2940:	f3ef 8510 	mrs	r5, PRIMASK
    2944:	9502      	str	r5, [sp, #8]
    2946:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2948:	4a14      	ldr	r2, [pc, #80]	; (299c <am_hal_sysctrl_buck_ctimer_isr_init+0x140>)
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    294a:	4f15      	ldr	r7, [pc, #84]	; (29a0 <am_hal_sysctrl_buck_ctimer_isr_init+0x144>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    294c:	6815      	ldr	r5, [r2, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    294e:	6814      	ldr	r4, [r2, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2950:	6813      	ldr	r3, [r2, #0]
            g_ui32SaveCoreBuckZX = ui32SaveCore;
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    2952:	4e14      	ldr	r6, [pc, #80]	; (29a4 <am_hal_sysctrl_buck_ctimer_isr_init+0x148>)
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2954:	1e41      	subs	r1, r0, #1
    2956:	0089      	lsls	r1, r1, #2
    2958:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
    295c:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    2960:	4319      	orrs	r1, r3
    2962:	6011      	str	r1, [r2, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2964:	0a00      	lsrs	r0, r0, #8
    2966:	6811      	ldr	r1, [r2, #0]
    2968:	1e43      	subs	r3, r0, #1
    296a:	0358      	lsls	r0, r3, #13
    296c:	f400 33f0 	and.w	r3, r0, #122880	; 0x1e000
    2970:	f421 31f0 	bic.w	r1, r1, #122880	; 0x1e000
    2974:	430b      	orrs	r3, r1
    2976:	6013      	str	r3, [r2, #0]
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    2978:	f3c5 0583 	ubfx	r5, r5, #2, #4
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    297c:	f3c4 3443 	ubfx	r4, r4, #13, #4
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2980:	9a02      	ldr	r2, [sp, #8]
        //
        // Save off the zero cross values as read on entry to the function.
        //
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            g_ui32SaveCoreBuckZX = ui32SaveCore;
    2982:	603d      	str	r5, [r7, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            g_ui32SaveMemBuckZX  = ui32SaveMem;
    2984:	6034      	str	r4, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2986:	f382 8810 	msr	PRIMASK, r2
        //
        am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    }

    return ui32RetVal;
}
    298a:	2000      	movs	r0, #0
    298c:	b005      	add	sp, #20
    298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2990:	10001198 	.word	0x10001198
    2994:	1000119c 	.word	0x1000119c
    2998:	100011a0 	.word	0x100011a0
    299c:	40020068 	.word	0x40020068
    29a0:	100011a4 	.word	0x100011a4
    29a4:	100011a8 	.word	0x100011a8
    29a8:	000025e9 	.word	0x000025e9
    29ac:	00002689 	.word	0x00002689
    29b0:	10001194 	.word	0x10001194
    29b4:	00002c80 	.word	0x00002c80

000029b8 <am_hal_sysctrl_buck_update_complete>:
//
//*****************************************************************************
bool
am_hal_sysctrl_buck_update_complete(void)
{
    return g_bBuckRestoreComplete;
    29b8:	4b01      	ldr	r3, [pc, #4]	; (29c0 <am_hal_sysctrl_buck_update_complete+0x8>)
    29ba:	7818      	ldrb	r0, [r3, #0]
}
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	10001198 	.word	0x10001198

000029c4 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    29c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    29c6:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    29c8:	460f      	mov	r7, r1
    29ca:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    29cc:	f7ff f96c 	bl	1ca8 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    29d0:	0169      	lsls	r1, r5, #5
    29d2:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    29d4:	fbb0 f4f1 	udiv	r4, r0, r1
    29d8:	fbb2 f0f1 	udiv	r0, r2, r1
    29dc:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    29e0:	b924      	cbnz	r4, 29ec <am_hal_uart_config+0x28>
    29e2:	4a11      	ldr	r2, [pc, #68]	; (2a28 <am_hal_uart_config+0x64>)
    29e4:	4811      	ldr	r0, [pc, #68]	; (2a2c <am_hal_uart_config+0x68>)
    29e6:	2161      	movs	r1, #97	; 0x61
    29e8:	f7ff fb2e 	bl	2048 <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    29ec:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    29f0:	331c      	adds	r3, #28
    29f2:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    29f4:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    29f6:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    29f8:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    29fa:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    29fc:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    29fe:	68fa      	ldr	r2, [r7, #12]
    2a00:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2a02:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2a04:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2a06:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2a0a:	bf14      	ite	ne
    2a0c:	2208      	movne	r2, #8
    2a0e:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2a10:	4302      	orrs	r2, r0
    2a12:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    2a14:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    2a16:	693f      	ldr	r7, [r7, #16]
    2a18:	432f      	orrs	r7, r5
    2a1a:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2a1c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    2a1e:	f046 0110 	orr.w	r1, r6, #16
    2a22:	6319      	str	r1, [r3, #48]	; 0x30
    2a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a26:	bf00      	nop
    2a28:	00002c8c 	.word	0x00002c8c
    2a2c:	00002cc0 	.word	0x00002cc0

00002a30 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    2a30:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    2a32:	f3ef 8310 	mrs	r3, PRIMASK
    2a36:	9301      	str	r3, [sp, #4]
    2a38:	b672      	cpsid	i
    2a3a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2a3e:	301c      	adds	r0, #28
    2a40:	0301      	lsls	r1, r0, #12
    2a42:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    2a44:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    2a48:	f04c 0301 	orr.w	r3, ip, #1
    2a4c:	630b      	str	r3, [r1, #48]	; 0x30
    2a4e:	9801      	ldr	r0, [sp, #4]
    2a50:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    2a54:	b002      	add	sp, #8
    2a56:	4770      	bx	lr

00002a58 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    2a58:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    2a5a:	f3ef 8310 	mrs	r3, PRIMASK
    2a5e:	9301      	str	r3, [sp, #4]
    2a60:	b672      	cpsid	i
    2a62:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2a66:	301c      	adds	r0, #28
    2a68:	0301      	lsls	r1, r0, #12
    2a6a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    2a6c:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    2a70:	f02c 0301 	bic.w	r3, ip, #1
    2a74:	630b      	str	r3, [r1, #48]	; 0x30
    2a76:	9801      	ldr	r0, [sp, #4]
    2a78:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    2a7c:	b002      	add	sp, #8
    2a7e:	4770      	bx	lr

00002a80 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2a80:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    2a82:	b510      	push	{r4, lr}
    2a84:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2a86:	d905      	bls.n	2a94 <am_hal_uart_pwrctrl_enable+0x14>
    2a88:	4a05      	ldr	r2, [pc, #20]	; (2aa0 <am_hal_uart_pwrctrl_enable+0x20>)
    2a8a:	4806      	ldr	r0, [pc, #24]	; (2aa4 <am_hal_uart_pwrctrl_enable+0x24>)
    2a8c:	f240 11a3 	movw	r1, #419	; 0x1a3
    2a90:	f7ff fada 	bl	2048 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2a94:	2080      	movs	r0, #128	; 0x80
    2a96:	40a0      	lsls	r0, r4
}
    2a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2a9c:	f7ff bb62 	b.w	2164 <am_hal_pwrctrl_periph_enable>
    2aa0:	00002cd4 	.word	0x00002cd4
    2aa4:	00002cc0 	.word	0x00002cc0

00002aa8 <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2aa8:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    2aaa:	b510      	push	{r4, lr}
    2aac:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2aae:	d905      	bls.n	2abc <am_hal_uart_pwrctrl_disable+0x14>
    2ab0:	4a05      	ldr	r2, [pc, #20]	; (2ac8 <am_hal_uart_pwrctrl_disable+0x20>)
    2ab2:	4806      	ldr	r0, [pc, #24]	; (2acc <am_hal_uart_pwrctrl_disable+0x24>)
    2ab4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    2ab8:	f7ff fac6 	bl	2048 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2abc:	2080      	movs	r0, #128	; 0x80
    2abe:	40a0      	lsls	r0, r4
}
    2ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2ac4:	f7ff bb92 	b.w	21ec <am_hal_pwrctrl_periph_disable>
    2ac8:	00002cd4 	.word	0x00002cd4
    2acc:	00002cc0 	.word	0x00002cc0

00002ad0 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    2ad0:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    2ad2:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    2ad4:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    2ad6:	f7ff f90b 	bl	1cf0 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    2ada:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    2ade:	301c      	adds	r0, #28
    2ae0:	0301      	lsls	r1, r0, #12
    2ae2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2ae4:	f043 0208 	orr.w	r2, r3, #8
    2ae8:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2aea:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2aec:	f044 0010 	orr.w	r0, r4, #16
    2af0:	6308      	str	r0, [r1, #48]	; 0x30
    2af2:	bd10      	pop	{r4, pc}

00002af4 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    2af4:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    2af8:	331c      	adds	r3, #28
    2afa:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2afc:	2100      	movs	r1, #0
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    2afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b00:	f022 0208 	bic.w	r2, r2, #8
    2b04:	631a      	str	r2, [r3, #48]	; 0x30

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2b06:	f7ff b8f3 	b.w	1cf0 <am_hal_clkgen_uarten_set>
    2b0a:	bf00      	nop

00002b0c <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2b0c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2b10:	301c      	adds	r0, #28
    2b12:	0302      	lsls	r2, r0, #12
    2b14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2b16:	f043 0010 	orr.w	r0, r3, #16
    2b1a:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    2b1c:	6351      	str	r1, [r2, #52]	; 0x34
    2b1e:	4770      	bx	lr

00002b20 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    2b20:	b410      	push	{r4}
    while (*pcString)
    2b22:	780c      	ldrb	r4, [r1, #0]
    2b24:	b16c      	cbz	r4, 2b42 <am_hal_uart_string_transmit_polled+0x22>
    2b26:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2b2a:	301c      	adds	r0, #28
    2b2c:	0300      	lsls	r0, r0, #12
    2b2e:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    2b32:	6813      	ldr	r3, [r2, #0]
    2b34:	069b      	lsls	r3, r3, #26
    2b36:	d4fc      	bmi.n	2b32 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    2b38:	6004      	str	r4, [r0, #0]
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while (*pcString)
    2b3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2b3e:	2c00      	cmp	r4, #0
    2b40:	d1f7      	bne.n	2b32 <am_hal_uart_string_transmit_polled+0x12>
        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    }
}
    2b42:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b46:	4770      	bx	lr

00002b48 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2b48:	4b01      	ldr	r3, [pc, #4]	; (2b50 <am_hal_vcomp_disable+0x8>)
    2b4a:	2237      	movs	r2, #55	; 0x37
    2b4c:	601a      	str	r2, [r3, #0]
    2b4e:	4770      	bx	lr
    2b50:	4000c008 	.word	0x4000c008
    2b54:	6b637542 	.word	0x6b637542
    2b58:	72655a20 	.word	0x72655a20
    2b5c:	72432d6f 	.word	0x72432d6f
    2b60:	2073736f 	.word	0x2073736f
    2b64:	6f6d6544 	.word	0x6f6d6544
    2b68:	6178452f 	.word	0x6178452f
    2b6c:	656c706d 	.word	0x656c706d
    2b70:	0000000a 	.word	0x0000000a
    2b74:	0a0a0a0a 	.word	0x0a0a0a0a
    2b78:	0a0a0a0a 	.word	0x0a0a0a0a
    2b7c:	0a0a0a0a 	.word	0x0a0a0a0a
    2b80:	0a0a0a0a 	.word	0x0a0a0a0a
    2b84:	00000a0a 	.word	0x00000a0a

00002b88 <am_hal_cachectrl_defaults>:
    2b88:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2b98:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2ba8:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2bb8:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2bc8:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2bd8:	6b6c635f 2e6e6567 00000063 6d695443     _clkgen.c...CTim
    2be8:	69207265 7265746e 74707572 6d756e20     er interrupt num
    2bf8:	20726562 2074756f 7220666f 65676e61     ber out of range
    2c08:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2c18:	6974635f 2e72656d 00000063 20646142     _ctimer.c...Bad 
    2c28:	4d495443 72205245 00646165 6e6e6143     CTIMER read.Cann
    2c38:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2c48:	206e6168 20656e6f 69726570 72656870     han one peripher
    2c58:	61206c61 20612074 656d6974 0000002e     al at a time....
    2c68:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2c78:	6c727463 0000632e                       ctrl.c..

00002c80 <g_sBuckTimer>:
    2c80:	00000000 00000220 00000220 65746e49     .... ... ...Inte
    2c90:	20726567 69766964 20726f73 5453554d     ger divisor MUST
    2ca0:	20656220 61657267 20726574 6e616874      be greater than
    2cb0:	20726f20 61757165 6f74206c 002e3120      or equal to 1..
    2cc0:	2e5c2e2e 6d615c2e 6c61685f 7261755f     ..\..\am_hal_uar
    2cd0:	00632e74 69797254 7420676e 6964206f     t.c.Trying to di
    2ce0:	6c626173 20612065 54524155 646f6d20     sable a UART mod
    2cf0:	20656c75 74616874 656f6420 74276e73     ule that doesn't
    2d00:	69786520 00007473 69797254 7420676e      exist..Trying t
    2d10:	6e65206f 656c6261 55206120 20545241     o enable a UART 
    2d20:	75646f6d 7420656c 20746168 73656f64     module that does
    2d30:	2074276e 73697865 00000074              n't exist...
