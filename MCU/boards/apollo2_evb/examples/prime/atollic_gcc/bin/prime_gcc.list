
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\prime\atollic_gcc\bin\prime_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d08  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000064  10001000  00001d08  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  10001064  00001d6c  00021064  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021064  2**0
                  CONTENTS, READONLY
  5 .debug_info   00005851  00000000  00000000  0002109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001572  00000000  00000000  000268ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000006a8  00000000  00000000  00027e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ba0  00000000  00000000  00028506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033cd  00000000  00000000  000290a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002655  00000000  00000000  0002c473  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000013e0  00000000  00000000  0002eb48  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002a40  00000000  00000000  0002ff28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 45 04 00 00 ad 04 00 00 ed 04 00 00     ....E...........
      10:	ed 04 00 00 ed 04 00 00 ed 04 00 00 00 00 00 00     ................
	...
      2c:	b5 04 00 00 b5 04 00 00 00 00 00 00 b5 04 00 00     ................
      3c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      4c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      5c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      6c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      7c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      8c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      9c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      ac:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      bc:	b5 04 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     168:	f3ef 8310 	mrs	r3, PRIMASK
     16c:	60fb      	str	r3, [r7, #12]
     16e:	b672      	cpsid	i
     170:	4b29      	ldr	r3, [pc, #164]	; (218 <uart_init+0xb8>)
     172:	2273      	movs	r2, #115	; 0x73
     174:	601a      	str	r2, [r3, #0]
     176:	4a29      	ldr	r2, [pc, #164]	; (21c <uart_init+0xbc>)
     178:	4b28      	ldr	r3, [pc, #160]	; (21c <uart_init+0xbc>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     180:	6013      	str	r3, [r2, #0]
     182:	4a27      	ldr	r2, [pc, #156]	; (220 <uart_init+0xc0>)
     184:	4b26      	ldr	r3, [pc, #152]	; (220 <uart_init+0xc0>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18c:	6013      	str	r3, [r2, #0]
     18e:	4a25      	ldr	r2, [pc, #148]	; (224 <uart_init+0xc4>)
     190:	4b24      	ldr	r3, [pc, #144]	; (224 <uart_init+0xc4>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     198:	6013      	str	r3, [r2, #0]
     19a:	4b1f      	ldr	r3, [pc, #124]	; (218 <uart_init+0xb8>)
     19c:	2200      	movs	r2, #0
     19e:	601a      	str	r2, [r3, #0]
     1a0:	68fb      	ldr	r3, [r7, #12]
     1a2:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     1a6:	f3ef 8310 	mrs	r3, PRIMASK
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	b672      	cpsid	i
     1ae:	4b1a      	ldr	r3, [pc, #104]	; (218 <uart_init+0xb8>)
     1b0:	2273      	movs	r2, #115	; 0x73
     1b2:	601a      	str	r2, [r3, #0]
     1b4:	4a19      	ldr	r2, [pc, #100]	; (21c <uart_init+0xbc>)
     1b6:	4b19      	ldr	r3, [pc, #100]	; (21c <uart_init+0xbc>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     1be:	6013      	str	r3, [r2, #0]
     1c0:	4a17      	ldr	r2, [pc, #92]	; (220 <uart_init+0xc0>)
     1c2:	4b17      	ldr	r3, [pc, #92]	; (220 <uart_init+0xc0>)
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     1ce:	6013      	str	r3, [r2, #0]
     1d0:	4a14      	ldr	r2, [pc, #80]	; (224 <uart_init+0xc4>)
     1d2:	4b14      	ldr	r3, [pc, #80]	; (224 <uart_init+0xc4>)
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1da:	6013      	str	r3, [r2, #0]
     1dc:	4b0e      	ldr	r3, [pc, #56]	; (218 <uart_init+0xb8>)
     1de:	2200      	movs	r2, #0
     1e0:	601a      	str	r2, [r3, #0]
     1e2:	68bb      	ldr	r3, [r7, #8]
     1e4:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     1e8:	6878      	ldr	r0, [r7, #4]
     1ea:	f001 fbdb 	bl	19a4 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     1ee:	6878      	ldr	r0, [r7, #4]
     1f0:	f001 fc00 	bl	19f4 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     1f4:	6878      	ldr	r0, [r7, #4]
     1f6:	f001 fbc1 	bl	197c <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     1fa:	490b      	ldr	r1, [pc, #44]	; (228 <uart_init+0xc8>)
     1fc:	6878      	ldr	r0, [r7, #4]
     1fe:	f001 fb73 	bl	18e8 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     202:	2112      	movs	r1, #18
     204:	6878      	ldr	r0, [r7, #4]
     206:	f001 fc13 	bl	1a30 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     20a:	6878      	ldr	r0, [r7, #4]
     20c:	f001 fba2 	bl	1954 <am_hal_uart_enable>
}
     210:	bf00      	nop
     212:	3710      	adds	r7, #16
     214:	46bd      	mov	sp, r7
     216:	bd80      	pop	{r7, pc}
     218:	40010060 	.word	0x40010060
     21c:	40010048 	.word	0x40010048
     220:	40010014 	.word	0x40010014
     224:	400100f4 	.word	0x400100f4
     228:	10001000 	.word	0x10001000

0000022c <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     22c:	b580      	push	{r7, lr}
     22e:	b084      	sub	sp, #16
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     234:	200a      	movs	r0, #10
     236:	f000 f941 	bl	4bc <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     23a:	6878      	ldr	r0, [r7, #4]
     23c:	f001 fb9e 	bl	197c <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     240:	6878      	ldr	r0, [r7, #4]
     242:	f001 fbc3 	bl	19cc <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     246:	6878      	ldr	r0, [r7, #4]
     248:	f001 fbe6 	bl	1a18 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     24c:	f3ef 8310 	mrs	r3, PRIMASK
     250:	60fb      	str	r3, [r7, #12]
     252:	b672      	cpsid	i
     254:	4b20      	ldr	r3, [pc, #128]	; (2d8 <uart_disable+0xac>)
     256:	2273      	movs	r2, #115	; 0x73
     258:	601a      	str	r2, [r3, #0]
     25a:	4a20      	ldr	r2, [pc, #128]	; (2dc <uart_disable+0xb0>)
     25c:	4b1f      	ldr	r3, [pc, #124]	; (2dc <uart_disable+0xb0>)
     25e:	681b      	ldr	r3, [r3, #0]
     260:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     264:	6013      	str	r3, [r2, #0]
     266:	4a1e      	ldr	r2, [pc, #120]	; (2e0 <uart_disable+0xb4>)
     268:	4b1d      	ldr	r3, [pc, #116]	; (2e0 <uart_disable+0xb4>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     270:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     274:	6013      	str	r3, [r2, #0]
     276:	4a1b      	ldr	r2, [pc, #108]	; (2e4 <uart_disable+0xb8>)
     278:	4b1a      	ldr	r3, [pc, #104]	; (2e4 <uart_disable+0xb8>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     280:	6013      	str	r3, [r2, #0]
     282:	4b15      	ldr	r3, [pc, #84]	; (2d8 <uart_disable+0xac>)
     284:	2200      	movs	r2, #0
     286:	601a      	str	r2, [r3, #0]
     288:	68fb      	ldr	r3, [r7, #12]
     28a:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_disable(COM_UART_RX);
     28e:	f3ef 8310 	mrs	r3, PRIMASK
     292:	60bb      	str	r3, [r7, #8]
     294:	b672      	cpsid	i
     296:	4b10      	ldr	r3, [pc, #64]	; (2d8 <uart_disable+0xac>)
     298:	2273      	movs	r2, #115	; 0x73
     29a:	601a      	str	r2, [r3, #0]
     29c:	4a0f      	ldr	r2, [pc, #60]	; (2dc <uart_disable+0xb0>)
     29e:	4b0f      	ldr	r3, [pc, #60]	; (2dc <uart_disable+0xb0>)
     2a0:	681b      	ldr	r3, [r3, #0]
     2a2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     2a6:	6013      	str	r3, [r2, #0]
     2a8:	4a0d      	ldr	r2, [pc, #52]	; (2e0 <uart_disable+0xb4>)
     2aa:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <uart_disable+0xb4>)
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2b2:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     2b6:	6013      	str	r3, [r2, #0]
     2b8:	4a0a      	ldr	r2, [pc, #40]	; (2e4 <uart_disable+0xb8>)
     2ba:	4b0a      	ldr	r3, [pc, #40]	; (2e4 <uart_disable+0xb8>)
     2bc:	681b      	ldr	r3, [r3, #0]
     2be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2c2:	6013      	str	r3, [r2, #0]
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <uart_disable+0xac>)
     2c6:	2200      	movs	r2, #0
     2c8:	601a      	str	r2, [r3, #0]
     2ca:	68bb      	ldr	r3, [r7, #8]
     2cc:	f383 8810 	msr	PRIMASK, r3
}
     2d0:	bf00      	nop
     2d2:	3710      	adds	r7, #16
     2d4:	46bd      	mov	sp, r7
     2d6:	bd80      	pop	{r7, pc}
     2d8:	40010060 	.word	0x40010060
     2dc:	40010048 	.word	0x40010048
     2e0:	40010014 	.word	0x40010014
     2e4:	400100f4 	.word	0x400100f4

000002e8 <set_for_min_power>:
// Minimize power
//
//*****************************************************************************
void
set_for_min_power(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     2ec:	480d      	ldr	r0, [pc, #52]	; (324 <set_for_min_power+0x3c>)
     2ee:	f001 f82d 	bl	134c <am_hal_cachectrl_enable>

    //
    // Turn OFF Flash1.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
     2f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
     2f6:	f001 f9a5 	bl	1644 <am_hal_pwrctrl_memory_enable>

    //
    // Turn off SRAMs above 8K.
    // Note - assumes a 4KB stack (the usual example stack size).
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);
     2fa:	2001      	movs	r0, #1
     2fc:	f001 f9a2 	bl	1644 <am_hal_pwrctrl_memory_enable>

    //
    // Let the XTAL turn off.
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
     300:	4a09      	ldr	r2, [pc, #36]	; (328 <set_for_min_power+0x40>)
     302:	4b09      	ldr	r3, [pc, #36]	; (328 <set_for_min_power+0x40>)
     304:	681b      	ldr	r3, [r3, #0]
     306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     30a:	6013      	str	r3, [r2, #0]

    //
    // Turn off the voltage comparator.
    //
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
     30c:	4b07      	ldr	r3, [pc, #28]	; (32c <set_for_min_power+0x44>)
     30e:	2237      	movs	r2, #55	; 0x37
     310:	601a      	str	r2, [r3, #0]

    //
    // Powerdown the BOD and PDR logic.
    //
    AM_REG(MCUCTRL, BODPORCTRL) = 0x2;  // 3=disable both 2=disable BOD 1=disable PDR
     312:	4b07      	ldr	r3, [pc, #28]	; (330 <set_for_min_power+0x48>)
     314:	2202      	movs	r2, #2
     316:	601a      	str	r2, [r3, #0]

    //
    // Turn off all peripheral power domains.
    //
    AM_REG(PWRCTRL, DEVICEEN) = 0;
     318:	4b06      	ldr	r3, [pc, #24]	; (334 <set_for_min_power+0x4c>)
     31a:	2200      	movs	r2, #0
     31c:	601a      	str	r2, [r3, #0]
}
     31e:	bf00      	nop
     320:	bd80      	pop	{r7, pc}
     322:	bf00      	nop
     324:	00001bb0 	.word	0x00001bb0
     328:	4000400c 	.word	0x4000400c
     32c:	4000c008 	.word	0x4000c008
     330:	40020100 	.word	0x40020100
     334:	40021008 	.word	0x40021008

00000338 <prime_number>:
//    Output, int PRIME_NUMBER, the number of prime numbers up to N.
//
//*****************************************************************************
uint32_t
prime_number(int32_t i32n)
{
     338:	b480      	push	{r7}
     33a:	b087      	sub	sp, #28
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Total, ui32Prime;
    int32_t ix, jx;

    ui32Total = 0;
     340:	2300      	movs	r3, #0
     342:	617b      	str	r3, [r7, #20]

    for ( ix = 2; ix <= i32n; ix++ )
     344:	2302      	movs	r3, #2
     346:	60fb      	str	r3, [r7, #12]
     348:	e01f      	b.n	38a <prime_number+0x52>
    {
        ui32Prime = 1;
     34a:	2301      	movs	r3, #1
     34c:	613b      	str	r3, [r7, #16]
        for ( jx = 2; jx < ix; jx++ )
     34e:	2302      	movs	r3, #2
     350:	60bb      	str	r3, [r7, #8]
     352:	e00f      	b.n	374 <prime_number+0x3c>
        {
            if ( (ix % jx) == 0 )
     354:	68fb      	ldr	r3, [r7, #12]
     356:	68ba      	ldr	r2, [r7, #8]
     358:	fb93 f2f2 	sdiv	r2, r3, r2
     35c:	68b9      	ldr	r1, [r7, #8]
     35e:	fb01 f202 	mul.w	r2, r1, r2
     362:	1a9b      	subs	r3, r3, r2
     364:	2b00      	cmp	r3, #0
     366:	d102      	bne.n	36e <prime_number+0x36>
            {
                ui32Prime = 0;
     368:	2300      	movs	r3, #0
     36a:	613b      	str	r3, [r7, #16]
                break;
     36c:	e006      	b.n	37c <prime_number+0x44>
    ui32Total = 0;

    for ( ix = 2; ix <= i32n; ix++ )
    {
        ui32Prime = 1;
        for ( jx = 2; jx < ix; jx++ )
     36e:	68bb      	ldr	r3, [r7, #8]
     370:	3301      	adds	r3, #1
     372:	60bb      	str	r3, [r7, #8]
     374:	68ba      	ldr	r2, [r7, #8]
     376:	68fb      	ldr	r3, [r7, #12]
     378:	429a      	cmp	r2, r3
     37a:	dbeb      	blt.n	354 <prime_number+0x1c>
            {
                ui32Prime = 0;
                break;
            }
        }
        ui32Total += ui32Prime;
     37c:	697a      	ldr	r2, [r7, #20]
     37e:	693b      	ldr	r3, [r7, #16]
     380:	4413      	add	r3, r2
     382:	617b      	str	r3, [r7, #20]
    uint32_t ui32Total, ui32Prime;
    int32_t ix, jx;

    ui32Total = 0;

    for ( ix = 2; ix <= i32n; ix++ )
     384:	68fb      	ldr	r3, [r7, #12]
     386:	3301      	adds	r3, #1
     388:	60fb      	str	r3, [r7, #12]
     38a:	68fa      	ldr	r2, [r7, #12]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	429a      	cmp	r2, r3
     390:	dddb      	ble.n	34a <prime_number+0x12>
                break;
            }
        }
        ui32Total += ui32Prime;
    }
    return ui32Total;
     392:	697b      	ldr	r3, [r7, #20]
}
     394:	4618      	mov	r0, r3
     396:	371c      	adds	r7, #28
     398:	46bd      	mov	sp, r7
     39a:	f85d 7b04 	ldr.w	r7, [sp], #4
     39e:	4770      	bx	lr

000003a0 <main>:
// Main Function.
//
//*****************************************************************************
int
main(void)
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b082      	sub	sp, #8
     3a4:	af00      	add	r7, sp, #0
    uint32_t ui32Result;
    uint32_t ui32UartModule = AM_BSP_UART_PRINT_INST;
     3a6:	2300      	movs	r3, #0
     3a8:	607b      	str	r3, [r7, #4]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     3aa:	2000      	movs	r0, #0
     3ac:	f001 f864 	bl	1478 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     3b0:	481b      	ldr	r0, [pc, #108]	; (420 <main+0x80>)
     3b2:	f000 ffcb 	bl	134c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     3b6:	f000 ffb3 	bl	1320 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     3ba:	481a      	ldr	r0, [pc, #104]	; (424 <main+0x84>)
     3bc:	f000 f916 	bl	5ec <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(ui32UartModule);
     3c0:	6878      	ldr	r0, [r7, #4]
     3c2:	f7ff fecd 	bl	160 <uart_init>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     3c6:	f000 ffa1 	bl	130c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro 'prime' example.\n\n");
     3ca:	4817      	ldr	r0, [pc, #92]	; (428 <main+0x88>)
     3cc:	f000 ff80 	bl	12d0 <am_util_stdio_printf>

    //
    // Brief description
    //
    am_util_stdio_printf("Used for measuring power while computing the number of prime numbers in a range.\n");
     3d0:	4816      	ldr	r0, [pc, #88]	; (42c <main+0x8c>)
     3d2:	f000 ff7d 	bl	12d0 <am_util_stdio_printf>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     3d6:	4916      	ldr	r1, [pc, #88]	; (430 <main+0x90>)
     3d8:	4816      	ldr	r0, [pc, #88]	; (434 <main+0x94>)
     3da:	f000 ff79 	bl	12d0 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(ui32UartModule);
     3de:	6878      	ldr	r0, [r7, #4]
     3e0:	f7ff ff24 	bl	22c <uart_disable>
    while(1)
    {
        //
        // Set MCU for minimal power
        //
        set_for_min_power();
     3e4:	f7ff ff80 	bl	2e8 <set_for_min_power>

        //
        // Determine the number of primes for the given value.
        //
        ui32Result = prime_number(NUM_OF_PRIMES_IN);
     3e8:	4813      	ldr	r0, [pc, #76]	; (438 <main+0x98>)
     3ea:	f7ff ffa5 	bl	338 <prime_number>
     3ee:	6038      	str	r0, [r7, #0]

        //
        // Print the result
        //
        uart_init(ui32UartModule);
     3f0:	6878      	ldr	r0, [r7, #4]
     3f2:	f7ff feb5 	bl	160 <uart_init>

        if ( ui32Result == EXP_PRIMES )
     3f6:	683b      	ldr	r3, [r7, #0]
     3f8:	f242 5278 	movw	r2, #9592	; 0x2578
     3fc:	4293      	cmp	r3, r2
     3fe:	d105      	bne.n	40c <main+0x6c>
        {
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
     400:	683a      	ldr	r2, [r7, #0]
     402:	490d      	ldr	r1, [pc, #52]	; (438 <main+0x98>)
     404:	480d      	ldr	r0, [pc, #52]	; (43c <main+0x9c>)
     406:	f000 ff63 	bl	12d0 <am_util_stdio_printf>
     40a:	e004      	b.n	416 <main+0x76>
        }
        else
        {
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
     40c:	683a      	ldr	r2, [r7, #0]
     40e:	490a      	ldr	r1, [pc, #40]	; (438 <main+0x98>)
     410:	480b      	ldr	r0, [pc, #44]	; (440 <main+0xa0>)
     412:	f000 ff5d 	bl	12d0 <am_util_stdio_printf>
        }

        uart_disable(ui32UartModule);
     416:	6878      	ldr	r0, [r7, #4]
     418:	f7ff ff08 	bl	22c <uart_disable>
    }
     41c:	e7e2      	b.n	3e4 <main+0x44>
     41e:	bf00      	nop
     420:	00001bb0 	.word	0x00001bb0
     424:	00001345 	.word	0x00001345
     428:	00001a78 	.word	0x00001a78
     42c:	00001a98 	.word	0x00001a98
     430:	00001aec 	.word	0x00001aec
     434:	00001b34 	.word	0x00001b34
     438:	000186a0 	.word	0x000186a0
     43c:	00001b44 	.word	0x00001b44
     440:	00001b6c 	.word	0x00001b6c

00000444 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     444:	4811      	ldr	r0, [pc, #68]	; (48c <zero_loop+0x12>)
     446:	4912      	ldr	r1, [pc, #72]	; (490 <zero_loop+0x16>)
     448:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     44a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     44e:	4811      	ldr	r0, [pc, #68]	; (494 <zero_loop+0x1a>)
     450:	6801      	ldr	r1, [r0, #0]
     452:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     456:	6001      	str	r1, [r0, #0]
     458:	f3bf 8f4f 	dsb	sy
     45c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     460:	480d      	ldr	r0, [pc, #52]	; (498 <zero_loop+0x1e>)
     462:	490e      	ldr	r1, [pc, #56]	; (49c <zero_loop+0x22>)
     464:	4a0e      	ldr	r2, [pc, #56]	; (4a0 <zero_loop+0x26>)

00000466 <copy_loop>:
     466:	f850 3b04 	ldr.w	r3, [r0], #4
     46a:	f841 3b04 	str.w	r3, [r1], #4
     46e:	4291      	cmp	r1, r2
     470:	dbf9      	blt.n	466 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     472:	480c      	ldr	r0, [pc, #48]	; (4a4 <zero_loop+0x2a>)
     474:	490c      	ldr	r1, [pc, #48]	; (4a8 <zero_loop+0x2e>)
     476:	f04f 0200 	mov.w	r2, #0

0000047a <zero_loop>:
     47a:	4288      	cmp	r0, r1
     47c:	bfb8      	it	lt
     47e:	f840 2b04 	strlt.w	r2, [r0], #4
     482:	dbfa      	blt.n	47a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     484:	f7ff ff8c 	bl	3a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     488:	be00      	bkpt	0x0000
}
     48a:	bf00      	nop
     48c:	e000ed08 	.word	0xe000ed08
     490:	00000000 	.word	0x00000000
     494:	e000ed88 	.word	0xe000ed88
     498:	00001d08 	.word	0x00001d08
     49c:	10001000 	.word	0x10001000
     4a0:	10001064 	.word	0x10001064
     4a4:	10001064 	.word	0x10001064
     4a8:	1000116c 	.word	0x1000116c

000004ac <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     4ac:	b480      	push	{r7}
     4ae:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     4b0:	e7fe      	b.n	4b0 <am_nmi_isr+0x4>
     4b2:	bf00      	nop

000004b4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     4b4:	b480      	push	{r7}
     4b6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     4b8:	e7fe      	b.n	4b8 <am_adc_isr+0x4>
     4ba:	bf00      	nop

000004bc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     4c4:	f000 fff0 	bl	14a8 <am_hal_clkgen_sysclk_get>
     4c8:	4602      	mov	r2, r0
     4ca:	4b07      	ldr	r3, [pc, #28]	; (4e8 <am_util_delay_ms+0x2c>)
     4cc:	fba3 2302 	umull	r2, r3, r3, r2
     4d0:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	fb02 f303 	mul.w	r3, r2, r3
     4d8:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     4da:	68f8      	ldr	r0, [r7, #12]
     4dc:	f001 f822 	bl	1524 <am_hal_flash_delay>
}
     4e0:	bf00      	nop
     4e2:	3710      	adds	r7, #16
     4e4:	46bd      	mov	sp, r7
     4e6:	bd80      	pop	{r7, pc}
     4e8:	057619f1 	.word	0x057619f1

000004ec <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     4ec:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     4ee:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     4f0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     4f2:	f000 f809 	bl	508 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     4f6:	bd01      	pop	{r0, pc}
}
     4f8:	bf00      	nop
     4fa:	4618      	mov	r0, r3

000004fc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     4fc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     4fe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     500:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     502:	4770      	bx	lr
}
     504:	bf00      	nop
     506:	4618      	mov	r0, r3

00000508 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     508:	b580      	push	{r7, lr}
     50a:	b096      	sub	sp, #88	; 0x58
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     510:	f107 030c 	add.w	r3, r7, #12
     514:	2200      	movs	r2, #0
     516:	601a      	str	r2, [r3, #0]
     518:	605a      	str	r2, [r3, #4]
     51a:	609a      	str	r2, [r3, #8]
     51c:	60da      	str	r2, [r3, #12]
     51e:	611a      	str	r2, [r3, #16]
     520:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     522:	2300      	movs	r3, #0
     524:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     528:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     52a:	4b2e      	ldr	r3, [pc, #184]	; (5e4 <am_util_faultisr_collect_data+0xdc>)
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     532:	b2db      	uxtb	r3, r3
     534:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     53a:	0a1b      	lsrs	r3, r3, #8
     53c:	b2db      	uxtb	r3, r3
     53e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     544:	0c1b      	lsrs	r3, r3, #16
     546:	b29b      	uxth	r3, r3
     548:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     54c:	4b26      	ldr	r3, [pc, #152]	; (5e8 <am_util_faultisr_collect_data+0xe0>)
     54e:	681b      	ldr	r3, [r3, #0]
     550:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     552:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     556:	b2db      	uxtb	r3, r3
     558:	f003 0302 	and.w	r3, r3, #2
     55c:	2b00      	cmp	r3, #0
     55e:	d005      	beq.n	56c <am_util_faultisr_collect_data+0x64>
     560:	6879      	ldr	r1, [r7, #4]
     562:	2006      	movs	r0, #6
     564:	f7ff ffca 	bl	4fc <getStackedReg>
     568:	4603      	mov	r3, r0
     56a:	e001      	b.n	570 <am_util_faultisr_collect_data+0x68>
     56c:	f04f 33ff 	mov.w	r3, #4294967295
     570:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     572:	6879      	ldr	r1, [r7, #4]
     574:	2000      	movs	r0, #0
     576:	f7ff ffc1 	bl	4fc <getStackedReg>
     57a:	4603      	mov	r3, r0
     57c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     57e:	6879      	ldr	r1, [r7, #4]
     580:	2001      	movs	r0, #1
     582:	f7ff ffbb 	bl	4fc <getStackedReg>
     586:	4603      	mov	r3, r0
     588:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     58a:	6879      	ldr	r1, [r7, #4]
     58c:	2002      	movs	r0, #2
     58e:	f7ff ffb5 	bl	4fc <getStackedReg>
     592:	4603      	mov	r3, r0
     594:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     596:	6879      	ldr	r1, [r7, #4]
     598:	2003      	movs	r0, #3
     59a:	f7ff ffaf 	bl	4fc <getStackedReg>
     59e:	4603      	mov	r3, r0
     5a0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5a2:	6879      	ldr	r1, [r7, #4]
     5a4:	2004      	movs	r0, #4
     5a6:	f7ff ffa9 	bl	4fc <getStackedReg>
     5aa:	4603      	mov	r3, r0
     5ac:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5ae:	6879      	ldr	r1, [r7, #4]
     5b0:	2005      	movs	r0, #5
     5b2:	f7ff ffa3 	bl	4fc <getStackedReg>
     5b6:	4603      	mov	r3, r0
     5b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5ba:	6879      	ldr	r1, [r7, #4]
     5bc:	2006      	movs	r0, #6
     5be:	f7ff ff9d 	bl	4fc <getStackedReg>
     5c2:	4603      	mov	r3, r0
     5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	2007      	movs	r0, #7
     5ca:	f7ff ff97 	bl	4fc <getStackedReg>
     5ce:	4603      	mov	r3, r0
     5d0:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     5d2:	f107 030c 	add.w	r3, r7, #12
     5d6:	4618      	mov	r0, r3
     5d8:	f000 ffaa 	bl	1530 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     5dc:	2300      	movs	r3, #0
     5de:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     5e0:	e7fe      	b.n	5e0 <am_util_faultisr_collect_data+0xd8>
     5e2:	bf00      	nop
     5e4:	e000ed28 	.word	0xe000ed28
     5e8:	e000ed38 	.word	0xe000ed38

000005ec <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5ec:	b480      	push	{r7}
     5ee:	b083      	sub	sp, #12
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5f4:	4a04      	ldr	r2, [pc, #16]	; (608 <am_util_stdio_printf_init+0x1c>)
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	6013      	str	r3, [r2, #0]
}
     5fa:	bf00      	nop
     5fc:	370c      	adds	r7, #12
     5fe:	46bd      	mov	sp, r7
     600:	f85d 7b04 	ldr.w	r7, [sp], #4
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	10001168 	.word	0x10001168

0000060c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     60c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     610:	b096      	sub	sp, #88	; 0x58
     612:	af00      	add	r7, sp, #0
     614:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     618:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     61c:	0025      	movs	r5, r4
     61e:	2600      	movs	r6, #0
     620:	ea55 0306 	orrs.w	r3, r5, r6
     624:	f000 809e 	beq.w	764 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     628:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     62c:	0862      	lsrs	r2, r4, #1
     62e:	ea4f 0133 	mov.w	r1, r3, rrx
     632:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     636:	ea4f 0893 	mov.w	r8, r3, lsr #2
     63a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     63e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     642:	eb11 0308 	adds.w	r3, r1, r8
     646:	eb42 0409 	adc.w	r4, r2, r9
     64a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     64e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     652:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     656:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     65a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     65e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     662:	eb13 030a 	adds.w	r3, r3, sl
     666:	eb44 040b 	adc.w	r4, r4, fp
     66a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     66e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     672:	0a1a      	lsrs	r2, r3, #8
     674:	62ba      	str	r2, [r7, #40]	; 0x28
     676:	6aba      	ldr	r2, [r7, #40]	; 0x28
     678:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     67c:	62ba      	str	r2, [r7, #40]	; 0x28
     67e:	0a23      	lsrs	r3, r4, #8
     680:	62fb      	str	r3, [r7, #44]	; 0x2c
     682:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     686:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     68a:	18c9      	adds	r1, r1, r3
     68c:	eb42 0204 	adc.w	r2, r2, r4
     690:	460b      	mov	r3, r1
     692:	4614      	mov	r4, r2
     694:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     698:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     69c:	0c1a      	lsrs	r2, r3, #16
     69e:	623a      	str	r2, [r7, #32]
     6a0:	6a3a      	ldr	r2, [r7, #32]
     6a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     6a6:	623a      	str	r2, [r7, #32]
     6a8:	0c23      	lsrs	r3, r4, #16
     6aa:	627b      	str	r3, [r7, #36]	; 0x24
     6ac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     6b4:	18c9      	adds	r1, r1, r3
     6b6:	eb42 0204 	adc.w	r2, r2, r4
     6ba:	460b      	mov	r3, r1
     6bc:	4614      	mov	r4, r2
     6be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     6c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6c6:	0023      	movs	r3, r4
     6c8:	603b      	str	r3, [r7, #0]
     6ca:	2300      	movs	r3, #0
     6cc:	607b      	str	r3, [r7, #4]
     6ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6d2:	e897 0006 	ldmia.w	r7, {r1, r2}
     6d6:	18c9      	adds	r1, r1, r3
     6d8:	eb42 0204 	adc.w	r2, r2, r4
     6dc:	460b      	mov	r3, r1
     6de:	4614      	mov	r4, r2
     6e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6e8:	08da      	lsrs	r2, r3, #3
     6ea:	613a      	str	r2, [r7, #16]
     6ec:	693a      	ldr	r2, [r7, #16]
     6ee:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6f2:	613a      	str	r2, [r7, #16]
     6f4:	08e3      	lsrs	r3, r4, #3
     6f6:	617b      	str	r3, [r7, #20]
     6f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     700:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     704:	18db      	adds	r3, r3, r3
     706:	eb44 0404 	adc.w	r4, r4, r4
     70a:	00a2      	lsls	r2, r4, #2
     70c:	60fa      	str	r2, [r7, #12]
     70e:	68fa      	ldr	r2, [r7, #12]
     710:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     714:	60fa      	str	r2, [r7, #12]
     716:	009a      	lsls	r2, r3, #2
     718:	60ba      	str	r2, [r7, #8]
     71a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     71e:	18c9      	adds	r1, r1, r3
     720:	eb42 0204 	adc.w	r2, r2, r4
     724:	460b      	mov	r3, r1
     726:	4614      	mov	r4, r2
     728:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     72c:	1acb      	subs	r3, r1, r3
     72e:	eb62 0404 	sbc.w	r4, r2, r4
     732:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     736:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     73a:	3306      	adds	r3, #6
     73c:	f144 0400 	adc.w	r4, r4, #0
     740:	091a      	lsrs	r2, r3, #4
     742:	61ba      	str	r2, [r7, #24]
     744:	69ba      	ldr	r2, [r7, #24]
     746:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     74a:	61ba      	str	r2, [r7, #24]
     74c:	0923      	lsrs	r3, r4, #4
     74e:	61fb      	str	r3, [r7, #28]
     750:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     754:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     758:	18c9      	adds	r1, r1, r3
     75a:	eb42 0204 	adc.w	r2, r2, r4
     75e:	460b      	mov	r3, r1
     760:	4614      	mov	r4, r2
     762:	e029      	b.n	7b8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     766:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76a:	085a      	lsrs	r2, r3, #1
     76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76e:	089b      	lsrs	r3, r3, #2
     770:	4413      	add	r3, r2
     772:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     776:	091b      	lsrs	r3, r3, #4
     778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     77a:	4413      	add	r3, r2
     77c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     780:	0a1b      	lsrs	r3, r3, #8
     782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     784:	4413      	add	r3, r2
     786:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     78a:	0c1b      	lsrs	r3, r3, #16
     78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     78e:	4413      	add	r3, r2
     790:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     794:	08db      	lsrs	r3, r3, #3
     796:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     79a:	4613      	mov	r3, r2
     79c:	009b      	lsls	r3, r3, #2
     79e:	4413      	add	r3, r2
     7a0:	005b      	lsls	r3, r3, #1
     7a2:	461a      	mov	r2, r3
     7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7a6:	1a9b      	subs	r3, r3, r2
     7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7ac:	3306      	adds	r3, #6
     7ae:	091a      	lsrs	r2, r3, #4
     7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7b2:	4413      	add	r3, r2
     7b4:	f04f 0400 	mov.w	r4, #0
    }
}
     7b8:	4618      	mov	r0, r3
     7ba:	4621      	mov	r1, r4
     7bc:	3758      	adds	r7, #88	; 0x58
     7be:	46bd      	mov	sp, r7
     7c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7c4:	4770      	bx	lr
     7c6:	bf00      	nop

000007c8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     7c8:	b590      	push	{r4, r7, lr}
     7ca:	b085      	sub	sp, #20
     7cc:	af00      	add	r7, sp, #0
     7ce:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     7d2:	683a      	ldr	r2, [r7, #0]
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	4313      	orrs	r3, r2
     7d8:	2b00      	cmp	r3, #0
     7da:	bf0c      	ite	eq
     7dc:	2301      	moveq	r3, #1
     7de:	2300      	movne	r3, #0
     7e0:	b2db      	uxtb	r3, r3
     7e2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7e4:	e008      	b.n	7f8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7e6:	e9d7 0100 	ldrd	r0, r1, [r7]
     7ea:	f7ff ff0f 	bl	60c <divu64_10>
     7ee:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	3301      	adds	r3, #1
     7f6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     7f8:	e897 0018 	ldmia.w	r7, {r3, r4}
     7fc:	4323      	orrs	r3, r4
     7fe:	d1f2      	bne.n	7e6 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     800:	68fb      	ldr	r3, [r7, #12]
}
     802:	4618      	mov	r0, r3
     804:	3714      	adds	r7, #20
     806:	46bd      	mov	sp, r7
     808:	bd90      	pop	{r4, r7, pc}
     80a:	bf00      	nop

0000080c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     80c:	b590      	push	{r4, r7, lr}
     80e:	b083      	sub	sp, #12
     810:	af00      	add	r7, sp, #0
     812:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     816:	e897 0018 	ldmia.w	r7, {r3, r4}
     81a:	2b00      	cmp	r3, #0
     81c:	f174 0300 	sbcs.w	r3, r4, #0
     820:	da06      	bge.n	830 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     822:	e897 0018 	ldmia.w	r7, {r3, r4}
     826:	425b      	negs	r3, r3
     828:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     82c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     830:	e897 0018 	ldmia.w	r7, {r3, r4}
     834:	4618      	mov	r0, r3
     836:	4621      	mov	r1, r4
     838:	f7ff ffc6 	bl	7c8 <ndigits_in_u64>
     83c:	4603      	mov	r3, r0
}
     83e:	4618      	mov	r0, r3
     840:	370c      	adds	r7, #12
     842:	46bd      	mov	sp, r7
     844:	bd90      	pop	{r4, r7, pc}
     846:	bf00      	nop

00000848 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     848:	b490      	push	{r4, r7}
     84a:	b084      	sub	sp, #16
     84c:	af00      	add	r7, sp, #0
     84e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     852:	6839      	ldr	r1, [r7, #0]
     854:	687a      	ldr	r2, [r7, #4]
     856:	430a      	orrs	r2, r1
     858:	2a00      	cmp	r2, #0
     85a:	bf0c      	ite	eq
     85c:	2201      	moveq	r2, #1
     85e:	2200      	movne	r2, #0
     860:	b2d2      	uxtb	r2, r2
     862:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     864:	e00a      	b.n	87c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     866:	e897 0006 	ldmia.w	r7, {r1, r2}
     86a:	090b      	lsrs	r3, r1, #4
     86c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     870:	0914      	lsrs	r4, r2, #4
     872:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     876:	68fa      	ldr	r2, [r7, #12]
     878:	3201      	adds	r2, #1
     87a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     87c:	e897 0006 	ldmia.w	r7, {r1, r2}
     880:	430a      	orrs	r2, r1
     882:	d1f0      	bne.n	866 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     884:	68fb      	ldr	r3, [r7, #12]
}
     886:	4618      	mov	r0, r3
     888:	3710      	adds	r7, #16
     88a:	46bd      	mov	sp, r7
     88c:	bc90      	pop	{r4, r7}
     88e:	4770      	bx	lr

00000890 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     890:	b480      	push	{r7}
     892:	b087      	sub	sp, #28
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     89a:	2300      	movs	r3, #0
     89c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     89e:	2300      	movs	r3, #0
     8a0:	613b      	str	r3, [r7, #16]
     8a2:	2300      	movs	r3, #0
     8a4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	781b      	ldrb	r3, [r3, #0]
     8aa:	2b2d      	cmp	r3, #45	; 0x2d
     8ac:	d11b      	bne.n	8e6 <decstr_to_int+0x56>
    {
        bNeg = true;
     8ae:	2301      	movs	r3, #1
     8b0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	3301      	adds	r3, #1
     8b6:	607b      	str	r3, [r7, #4]
        uCnt++;
     8b8:	68fb      	ldr	r3, [r7, #12]
     8ba:	3301      	adds	r3, #1
     8bc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8be:	e012      	b.n	8e6 <decstr_to_int+0x56>
    {
        ++uCnt;
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	3301      	adds	r3, #1
     8c4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     8c6:	693a      	ldr	r2, [r7, #16]
     8c8:	4613      	mov	r3, r2
     8ca:	009b      	lsls	r3, r3, #2
     8cc:	4413      	add	r3, r2
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	781b      	ldrb	r3, [r3, #0]
     8d6:	461a      	mov	r2, r3
     8d8:	693b      	ldr	r3, [r7, #16]
     8da:	4413      	add	r3, r2
     8dc:	3b30      	subs	r3, #48	; 0x30
     8de:	613b      	str	r3, [r7, #16]
        pcStr++;
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	3301      	adds	r3, #1
     8e4:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	2b2f      	cmp	r3, #47	; 0x2f
     8ec:	d903      	bls.n	8f6 <decstr_to_int+0x66>
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	2b39      	cmp	r3, #57	; 0x39
     8f4:	d9e4      	bls.n	8c0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     8f6:	683b      	ldr	r3, [r7, #0]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d002      	beq.n	902 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	68fa      	ldr	r2, [r7, #12]
     900:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     902:	7dfb      	ldrb	r3, [r7, #23]
     904:	2b00      	cmp	r3, #0
     906:	d002      	beq.n	90e <decstr_to_int+0x7e>
     908:	693b      	ldr	r3, [r7, #16]
     90a:	425b      	negs	r3, r3
     90c:	e000      	b.n	910 <decstr_to_int+0x80>
     90e:	693b      	ldr	r3, [r7, #16]
}
     910:	4618      	mov	r0, r3
     912:	371c      	adds	r7, #28
     914:	46bd      	mov	sp, r7
     916:	f85d 7b04 	ldr.w	r7, [sp], #4
     91a:	4770      	bx	lr

0000091c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     91c:	b590      	push	{r4, r7, lr}
     91e:	b091      	sub	sp, #68	; 0x44
     920:	af00      	add	r7, sp, #0
     922:	e9c7 0102 	strd	r0, r1, [r7, #8]
     926:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     928:	2300      	movs	r3, #0
     92a:	63fb      	str	r3, [r7, #60]	; 0x3c
     92c:	2300      	movs	r3, #0
     92e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     934:	f7ff fe6a 	bl	60c <divu64_10>
     938:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     93c:	68b9      	ldr	r1, [r7, #8]
     93e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     940:	4613      	mov	r3, r2
     942:	009b      	lsls	r3, r3, #2
     944:	4413      	add	r3, r2
     946:	005b      	lsls	r3, r3, #1
     948:	1acb      	subs	r3, r1, r3
     94a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     94e:	1c5a      	adds	r2, r3, #1
     950:	63fa      	str	r2, [r7, #60]	; 0x3c
     952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     954:	b2d2      	uxtb	r2, r2
     956:	3230      	adds	r2, #48	; 0x30
     958:	b2d2      	uxtb	r2, r2
     95a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     95e:	440b      	add	r3, r1
     960:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     964:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     968:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     96c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     970:	4323      	orrs	r3, r4
     972:	d1dd      	bne.n	930 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     976:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2b00      	cmp	r3, #0
     97c:	d011      	beq.n	9a2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     97e:	e008      	b.n	992 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     980:	687b      	ldr	r3, [r7, #4]
     982:	1c5a      	adds	r2, r3, #1
     984:	607a      	str	r2, [r7, #4]
     986:	f107 0110 	add.w	r1, r7, #16
     98a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     98c:	440a      	add	r2, r1
     98e:	7812      	ldrb	r2, [r2, #0]
     990:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     994:	1e5a      	subs	r2, r3, #1
     996:	63fa      	str	r2, [r7, #60]	; 0x3c
     998:	2b00      	cmp	r3, #0
     99a:	d1f1      	bne.n	980 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2200      	movs	r2, #0
     9a0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     9a4:	4618      	mov	r0, r3
     9a6:	3744      	adds	r7, #68	; 0x44
     9a8:	46bd      	mov	sp, r7
     9aa:	bd90      	pop	{r4, r7, pc}

000009ac <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     9ac:	b4b0      	push	{r4, r5, r7}
     9ae:	b08d      	sub	sp, #52	; 0x34
     9b0:	af00      	add	r7, sp, #0
     9b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9b6:	607a      	str	r2, [r7, #4]
     9b8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     9ba:	2300      	movs	r3, #0
     9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     9be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9c2:	4313      	orrs	r3, r2
     9c4:	d131      	bne.n	a2a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9c8:	1c5a      	adds	r2, r3, #1
     9ca:	62fa      	str	r2, [r7, #44]	; 0x2c
     9cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     9d0:	4413      	add	r3, r2
     9d2:	2230      	movs	r2, #48	; 0x30
     9d4:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9d8:	e027      	b.n	a2a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9da:	7a3b      	ldrb	r3, [r7, #8]
     9dc:	f003 030f 	and.w	r3, r3, #15
     9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9e8:	2b09      	cmp	r3, #9
     9ea:	d90a      	bls.n	a02 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9ec:	78fb      	ldrb	r3, [r7, #3]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d001      	beq.n	9f6 <uint64_to_hexstr+0x4a>
     9f2:	2227      	movs	r2, #39	; 0x27
     9f4:	e000      	b.n	9f8 <uint64_to_hexstr+0x4c>
     9f6:	2207      	movs	r2, #7
     9f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9fc:	4413      	add	r3, r2
     9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a04:	1c5a      	adds	r2, r3, #1
     a06:	62fa      	str	r2, [r7, #44]	; 0x2c
     a08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     a0c:	3230      	adds	r2, #48	; 0x30
     a0e:	b2d2      	uxtb	r2, r2
     a10:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a14:	440b      	add	r3, r1
     a16:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a1e:	0914      	lsrs	r4, r2, #4
     a20:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     a24:	091d      	lsrs	r5, r3, #4
     a26:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     a2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a2e:	4313      	orrs	r3, r2
     a30:	d1d3      	bne.n	9da <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a34:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	2b00      	cmp	r3, #0
     a3a:	d011      	beq.n	a60 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a3c:	e008      	b.n	a50 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	1c5a      	adds	r2, r3, #1
     a42:	607a      	str	r2, [r7, #4]
     a44:	f107 0110 	add.w	r1, r7, #16
     a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a4a:	440a      	add	r2, r1
     a4c:	7812      	ldrb	r2, [r2, #0]
     a4e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a52:	1e5a      	subs	r2, r3, #1
     a54:	62fa      	str	r2, [r7, #44]	; 0x2c
     a56:	2b00      	cmp	r3, #0
     a58:	d1f1      	bne.n	a3e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	2200      	movs	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a62:	4618      	mov	r0, r3
     a64:	3734      	adds	r7, #52	; 0x34
     a66:	46bd      	mov	sp, r7
     a68:	bcb0      	pop	{r4, r5, r7}
     a6a:	4770      	bx	lr

00000a6c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a6c:	b480      	push	{r7}
     a6e:	b085      	sub	sp, #20
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a74:	2300      	movs	r3, #0
     a76:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d104      	bne.n	a88 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	e009      	b.n	a96 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	3301      	adds	r3, #1
     a86:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	1c5a      	adds	r2, r3, #1
     a8c:	607a      	str	r2, [r7, #4]
     a8e:	781b      	ldrb	r3, [r3, #0]
     a90:	2b00      	cmp	r3, #0
     a92:	d1f6      	bne.n	a82 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     a94:	68fb      	ldr	r3, [r7, #12]
}
     a96:	4618      	mov	r0, r3
     a98:	3714      	adds	r7, #20
     a9a:	46bd      	mov	sp, r7
     a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa0:	4770      	bx	lr
     aa2:	bf00      	nop

00000aa4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     aa4:	b480      	push	{r7}
     aa6:	b087      	sub	sp, #28
     aa8:	af00      	add	r7, sp, #0
     aaa:	60f8      	str	r0, [r7, #12]
     aac:	460b      	mov	r3, r1
     aae:	607a      	str	r2, [r7, #4]
     ab0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     ab2:	2300      	movs	r3, #0
     ab4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	dc0c      	bgt.n	ad6 <padbuffer+0x32>
    {
        return i32Cnt;
     abc:	697b      	ldr	r3, [r7, #20]
     abe:	e010      	b.n	ae2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d004      	beq.n	ad0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     ac6:	68fb      	ldr	r3, [r7, #12]
     ac8:	1c5a      	adds	r2, r3, #1
     aca:	60fa      	str	r2, [r7, #12]
     acc:	7afa      	ldrb	r2, [r7, #11]
     ace:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ad0:	697b      	ldr	r3, [r7, #20]
     ad2:	3301      	adds	r3, #1
     ad4:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	1e5a      	subs	r2, r3, #1
     ada:	607a      	str	r2, [r7, #4]
     adc:	2b00      	cmp	r3, #0
     ade:	d1ef      	bne.n	ac0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     ae0:	697b      	ldr	r3, [r7, #20]
}
     ae2:	4618      	mov	r0, r3
     ae4:	371c      	adds	r7, #28
     ae6:	46bd      	mov	sp, r7
     ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
     aec:	4770      	bx	lr
     aee:	bf00      	nop

00000af0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     af0:	b590      	push	{r4, r7, lr}
     af2:	b08f      	sub	sp, #60	; 0x3c
     af4:	af00      	add	r7, sp, #0
     af6:	60f8      	str	r0, [r7, #12]
     af8:	60b9      	str	r1, [r7, #8]
     afa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     afc:	68bb      	ldr	r3, [r7, #8]
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b04:	2b03      	cmp	r3, #3
     b06:	dc02      	bgt.n	b0e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     b08:	f06f 0302 	mvn.w	r3, #2
     b0c:	e0d4      	b.n	cb8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     b0e:	edd7 7a03 	vldr	s15, [r7, #12]
     b12:	eef5 7a40 	vcmp.f32	s15, #0.0
     b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b1a:	d104      	bne.n	b26 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b1c:	68bb      	ldr	r3, [r7, #8]
     b1e:	4a68      	ldr	r2, [pc, #416]	; (cc0 <ftoa+0x1d0>)
     b20:	601a      	str	r2, [r3, #0]
        return 3;
     b22:	2303      	movs	r3, #3
     b24:	e0c8      	b.n	cb8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     b26:	68bb      	ldr	r3, [r7, #8]
     b28:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     b2e:	697b      	ldr	r3, [r7, #20]
     b30:	15db      	asrs	r3, r3, #23
     b32:	b2db      	uxtb	r3, r3
     b34:	3b7f      	subs	r3, #127	; 0x7f
     b36:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b38:	697b      	ldr	r3, [r7, #20]
     b3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b42:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     b44:	2300      	movs	r3, #0
     b46:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b48:	2300      	movs	r3, #0
     b4a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b4c:	6a3b      	ldr	r3, [r7, #32]
     b4e:	2b1e      	cmp	r3, #30
     b50:	dd02      	ble.n	b58 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b52:	f06f 0301 	mvn.w	r3, #1
     b56:	e0af      	b.n	cb8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     b58:	6a3b      	ldr	r3, [r7, #32]
     b5a:	f113 0f17 	cmn.w	r3, #23
     b5e:	da02      	bge.n	b66 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b60:	f04f 33ff 	mov.w	r3, #4294967295
     b64:	e0a8      	b.n	cb8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     b66:	6a3b      	ldr	r3, [r7, #32]
     b68:	2b16      	cmp	r3, #22
     b6a:	dd06      	ble.n	b7a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     b6c:	6a3b      	ldr	r3, [r7, #32]
     b6e:	3b17      	subs	r3, #23
     b70:	69fa      	ldr	r2, [r7, #28]
     b72:	fa02 f303 	lsl.w	r3, r2, r3
     b76:	637b      	str	r3, [r7, #52]	; 0x34
     b78:	e01a      	b.n	bb0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b7a:	6a3b      	ldr	r3, [r7, #32]
     b7c:	2b00      	cmp	r3, #0
     b7e:	db0f      	blt.n	ba0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     b80:	6a3b      	ldr	r3, [r7, #32]
     b82:	f1c3 0317 	rsb	r3, r3, #23
     b86:	69fa      	ldr	r2, [r7, #28]
     b88:	fa42 f303 	asr.w	r3, r2, r3
     b8c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     b8e:	6a3b      	ldr	r3, [r7, #32]
     b90:	3301      	adds	r3, #1
     b92:	69fa      	ldr	r2, [r7, #28]
     b94:	fa02 f303 	lsl.w	r3, r2, r3
     b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b9c:	633b      	str	r3, [r7, #48]	; 0x30
     b9e:	e007      	b.n	bb0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     ba0:	69fb      	ldr	r3, [r7, #28]
     ba2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ba6:	6a3b      	ldr	r3, [r7, #32]
     ba8:	43db      	mvns	r3, r3
     baa:	fa42 f303 	asr.w	r3, r2, r3
     bae:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     bb0:	697b      	ldr	r3, [r7, #20]
     bb2:	2b00      	cmp	r3, #0
     bb4:	da04      	bge.n	bc0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	1c5a      	adds	r2, r3, #1
     bba:	60ba      	str	r2, [r7, #8]
     bbc:	222d      	movs	r2, #45	; 0x2d
     bbe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc2:	2b00      	cmp	r3, #0
     bc4:	d105      	bne.n	bd2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	1c5a      	adds	r2, r3, #1
     bca:	60ba      	str	r2, [r7, #8]
     bcc:	2230      	movs	r2, #48	; 0x30
     bce:	701a      	strb	r2, [r3, #0]
     bd0:	e021      	b.n	c16 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bd4:	2b00      	cmp	r3, #0
     bd6:	dd08      	ble.n	bea <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bda:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bde:	68ba      	ldr	r2, [r7, #8]
     be0:	4618      	mov	r0, r3
     be2:	4621      	mov	r1, r4
     be4:	f7ff fe9a 	bl	91c <uint64_to_str>
     be8:	e011      	b.n	c0e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	1c5a      	adds	r2, r3, #1
     bee:	60ba      	str	r2, [r7, #8]
     bf0:	222d      	movs	r2, #45	; 0x2d
     bf2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bf6:	425b      	negs	r3, r3
     bf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bfc:	68ba      	ldr	r2, [r7, #8]
     bfe:	4618      	mov	r0, r3
     c00:	4621      	mov	r1, r4
     c02:	f7ff fe8b 	bl	91c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     c06:	e002      	b.n	c0e <ftoa+0x11e>
        {
            pcBuf++;
     c08:	68bb      	ldr	r3, [r7, #8]
     c0a:	3301      	adds	r3, #1
     c0c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     c0e:	68bb      	ldr	r3, [r7, #8]
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d1f8      	bne.n	c08 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	1c5a      	adds	r2, r3, #1
     c1a:	60ba      	str	r2, [r7, #8]
     c1c:	222e      	movs	r2, #46	; 0x2e
     c1e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c22:	2b00      	cmp	r3, #0
     c24:	d105      	bne.n	c32 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     c26:	68bb      	ldr	r3, [r7, #8]
     c28:	1c5a      	adds	r2, r3, #1
     c2a:	60ba      	str	r2, [r7, #8]
     c2c:	2230      	movs	r2, #48	; 0x30
     c2e:	701a      	strb	r2, [r3, #0]
     c30:	e03c      	b.n	cac <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     c32:	68ba      	ldr	r2, [r7, #8]
     c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c36:	1ad3      	subs	r3, r2, r3
     c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c3a:	1ad3      	subs	r3, r2, r3
     c3c:	3b01      	subs	r3, #1
     c3e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c40:	69ba      	ldr	r2, [r7, #24]
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	4293      	cmp	r3, r2
     c46:	bfa8      	it	ge
     c48:	4613      	movge	r3, r2
     c4a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     c4c:	2300      	movs	r3, #0
     c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
     c50:	e015      	b.n	c7e <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c54:	4613      	mov	r3, r2
     c56:	009b      	lsls	r3, r3, #2
     c58:	4413      	add	r3, r2
     c5a:	005b      	lsls	r3, r3, #1
     c5c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c5e:	68bb      	ldr	r3, [r7, #8]
     c60:	1c5a      	adds	r2, r3, #1
     c62:	60ba      	str	r2, [r7, #8]
     c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c66:	1612      	asrs	r2, r2, #24
     c68:	b2d2      	uxtb	r2, r2
     c6a:	3230      	adds	r2, #48	; 0x30
     c6c:	b2d2      	uxtb	r2, r2
     c6e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c76:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c7a:	3301      	adds	r3, #1
     c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
     c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c80:	69bb      	ldr	r3, [r7, #24]
     c82:	429a      	cmp	r2, r3
     c84:	dbe5      	blt.n	c52 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     c86:	68bb      	ldr	r3, [r7, #8]
     c88:	3b01      	subs	r3, #1
     c8a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c8c:	e002      	b.n	c94 <ftoa+0x1a4>
        {
            --pcBuf;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3b01      	subs	r3, #1
     c92:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     c94:	68bb      	ldr	r3, [r7, #8]
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	2b30      	cmp	r3, #48	; 0x30
     c9a:	d104      	bne.n	ca6 <ftoa+0x1b6>
     c9c:	68bb      	ldr	r3, [r7, #8]
     c9e:	3b01      	subs	r3, #1
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b2e      	cmp	r3, #46	; 0x2e
     ca4:	d1f3      	bne.n	c8e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	3301      	adds	r3, #1
     caa:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     cac:	68bb      	ldr	r3, [r7, #8]
     cae:	2200      	movs	r2, #0
     cb0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     cb2:	68ba      	ldr	r2, [r7, #8]
     cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cb6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     cb8:	4618      	mov	r0, r3
     cba:	373c      	adds	r7, #60	; 0x3c
     cbc:	46bd      	mov	sp, r7
     cbe:	bd90      	pop	{r4, r7, pc}
     cc0:	00302e30 	.word	0x00302e30

00000cc4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     cc4:	b590      	push	{r4, r7, lr}
     cc6:	b095      	sub	sp, #84	; 0x54
     cc8:	af00      	add	r7, sp, #0
     cca:	60f8      	str	r0, [r7, #12]
     ccc:	60b9      	str	r1, [r7, #8]
     cce:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     cd0:	2300      	movs	r3, #0
     cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     cd4:	2300      	movs	r3, #0
     cd6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     cd8:	e2e3      	b.n	12a2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     cda:	2306      	movs	r3, #6
     cdc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     cde:	68bb      	ldr	r3, [r7, #8]
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b25      	cmp	r3, #37	; 0x25
     ce4:	d01f      	beq.n	d26 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	2b00      	cmp	r3, #0
     cea:	d015      	beq.n	d18 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     cec:	68bb      	ldr	r3, [r7, #8]
     cee:	781b      	ldrb	r3, [r3, #0]
     cf0:	2b0a      	cmp	r3, #10
     cf2:	d10b      	bne.n	d0c <am_util_stdio_vsprintf+0x48>
     cf4:	4bb1      	ldr	r3, [pc, #708]	; (fbc <am_util_stdio_vsprintf+0x2f8>)
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d007      	beq.n	d0c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     cfc:	68fb      	ldr	r3, [r7, #12]
     cfe:	1c5a      	adds	r2, r3, #1
     d00:	60fa      	str	r2, [r7, #12]
     d02:	220d      	movs	r2, #13
     d04:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d08:	3301      	adds	r3, #1
     d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	1c5a      	adds	r2, r3, #1
     d10:	60fa      	str	r2, [r7, #12]
     d12:	68ba      	ldr	r2, [r7, #8]
     d14:	7812      	ldrb	r2, [r2, #0]
     d16:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	3301      	adds	r3, #1
     d1c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d20:	3301      	adds	r3, #1
     d22:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     d24:	e2bd      	b.n	12a2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	3301      	adds	r3, #1
     d2a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     d2c:	2300      	movs	r3, #0
     d2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d3a:	2320      	movs	r3, #32
     d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d40:	68bb      	ldr	r3, [r7, #8]
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	2b30      	cmp	r3, #48	; 0x30
     d46:	d105      	bne.n	d54 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d48:	2330      	movs	r3, #48	; 0x30
     d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d4e:	68bb      	ldr	r3, [r7, #8]
     d50:	3301      	adds	r3, #1
     d52:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d54:	f107 0310 	add.w	r3, r7, #16
     d58:	4619      	mov	r1, r3
     d5a:	68b8      	ldr	r0, [r7, #8]
     d5c:	f7ff fd98 	bl	890 <decstr_to_int>
     d60:	4603      	mov	r3, r0
     d62:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d64:	693b      	ldr	r3, [r7, #16]
     d66:	68ba      	ldr	r2, [r7, #8]
     d68:	4413      	add	r3, r2
     d6a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d6c:	68bb      	ldr	r3, [r7, #8]
     d6e:	781b      	ldrb	r3, [r3, #0]
     d70:	2b73      	cmp	r3, #115	; 0x73
     d72:	d005      	beq.n	d80 <am_util_stdio_vsprintf+0xbc>
     d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d76:	2b00      	cmp	r3, #0
     d78:	da02      	bge.n	d80 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d7c:	425b      	negs	r3, r3
     d7e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	2b2e      	cmp	r3, #46	; 0x2e
     d86:	d10e      	bne.n	da6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	3301      	adds	r3, #1
     d8c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d8e:	f107 0310 	add.w	r3, r7, #16
     d92:	4619      	mov	r1, r3
     d94:	68b8      	ldr	r0, [r7, #8]
     d96:	f7ff fd7b 	bl	890 <decstr_to_int>
     d9a:	4603      	mov	r3, r0
     d9c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d9e:	693b      	ldr	r3, [r7, #16]
     da0:	68ba      	ldr	r2, [r7, #8]
     da2:	4413      	add	r3, r2
     da4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     da6:	68bb      	ldr	r3, [r7, #8]
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b6c      	cmp	r3, #108	; 0x6c
     dac:	d10c      	bne.n	dc8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     dae:	68bb      	ldr	r3, [r7, #8]
     db0:	3301      	adds	r3, #1
     db2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     db4:	68bb      	ldr	r3, [r7, #8]
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	2b6c      	cmp	r3, #108	; 0x6c
     dba:	d105      	bne.n	dc8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     dbc:	68bb      	ldr	r3, [r7, #8]
     dbe:	3301      	adds	r3, #1
     dc0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     dc2:	2301      	movs	r3, #1
     dc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     dc8:	68bb      	ldr	r3, [r7, #8]
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	3b46      	subs	r3, #70	; 0x46
     dce:	2b32      	cmp	r3, #50	; 0x32
     dd0:	f200 8254 	bhi.w	127c <am_util_stdio_vsprintf+0x5b8>
     dd4:	a201      	add	r2, pc, #4	; (adr r2, ddc <am_util_stdio_vsprintf+0x118>)
     dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dda:	bf00      	nop
     ddc:	00001207 	.word	0x00001207
     de0:	0000127d 	.word	0x0000127d
     de4:	0000127d 	.word	0x0000127d
     de8:	0000127d 	.word	0x0000127d
     dec:	0000127d 	.word	0x0000127d
     df0:	0000127d 	.word	0x0000127d
     df4:	0000127d 	.word	0x0000127d
     df8:	0000127d 	.word	0x0000127d
     dfc:	0000127d 	.word	0x0000127d
     e00:	0000127d 	.word	0x0000127d
     e04:	0000127d 	.word	0x0000127d
     e08:	0000127d 	.word	0x0000127d
     e0c:	0000127d 	.word	0x0000127d
     e10:	0000127d 	.word	0x0000127d
     e14:	0000127d 	.word	0x0000127d
     e18:	0000127d 	.word	0x0000127d
     e1c:	0000127d 	.word	0x0000127d
     e20:	0000127d 	.word	0x0000127d
     e24:	00000fa3 	.word	0x00000fa3
     e28:	0000127d 	.word	0x0000127d
     e2c:	0000127d 	.word	0x0000127d
     e30:	0000127d 	.word	0x0000127d
     e34:	0000127d 	.word	0x0000127d
     e38:	0000127d 	.word	0x0000127d
     e3c:	0000127d 	.word	0x0000127d
     e40:	0000127d 	.word	0x0000127d
     e44:	0000127d 	.word	0x0000127d
     e48:	0000127d 	.word	0x0000127d
     e4c:	0000127d 	.word	0x0000127d
     e50:	00000ea9 	.word	0x00000ea9
     e54:	000010cf 	.word	0x000010cf
     e58:	0000127d 	.word	0x0000127d
     e5c:	00001207 	.word	0x00001207
     e60:	0000127d 	.word	0x0000127d
     e64:	0000127d 	.word	0x0000127d
     e68:	000010cf 	.word	0x000010cf
     e6c:	0000127d 	.word	0x0000127d
     e70:	0000127d 	.word	0x0000127d
     e74:	0000127d 	.word	0x0000127d
     e78:	0000127d 	.word	0x0000127d
     e7c:	0000127d 	.word	0x0000127d
     e80:	0000127d 	.word	0x0000127d
     e84:	0000127d 	.word	0x0000127d
     e88:	0000127d 	.word	0x0000127d
     e8c:	0000127d 	.word	0x0000127d
     e90:	00000ecf 	.word	0x00000ecf
     e94:	0000127d 	.word	0x0000127d
     e98:	0000103d 	.word	0x0000103d
     e9c:	0000127d 	.word	0x0000127d
     ea0:	0000127d 	.word	0x0000127d
     ea4:	00000f9d 	.word	0x00000f9d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	1d1a      	adds	r2, r3, #4
     eac:	607a      	str	r2, [r7, #4]
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d005      	beq.n	ec6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	60fa      	str	r2, [r7, #12]
     ec0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     ec4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec8:	3301      	adds	r3, #1
     eca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ecc:	e1e6      	b.n	129c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	1d1a      	adds	r2, r3, #4
     ed2:	607a      	str	r2, [r7, #4]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ed8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     eda:	f7ff fdc7 	bl	a6c <simple_strlen>
     ede:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee2:	2b00      	cmp	r3, #0
     ee4:	dd2e      	ble.n	f44 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     eea:	429a      	cmp	r2, r3
     eec:	d22a      	bcs.n	f44 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ef2:	1ad3      	subs	r3, r2, r3
     ef4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
     efc:	4619      	mov	r1, r3
     efe:	68f8      	ldr	r0, [r7, #12]
     f00:	f7ff fdd0 	bl	aa4 <padbuffer>
     f04:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	2b00      	cmp	r3, #0
     f0a:	d001      	beq.n	f10 <am_util_stdio_vsprintf+0x24c>
     f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0e:	e000      	b.n	f12 <am_util_stdio_vsprintf+0x24e>
     f10:	2300      	movs	r3, #0
     f12:	68fa      	ldr	r2, [r7, #12]
     f14:	4413      	add	r3, r2
     f16:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f1c:	4413      	add	r3, r2
     f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f20:	2300      	movs	r3, #0
     f22:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     f24:	e00e      	b.n	f44 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	2b00      	cmp	r3, #0
     f2a:	d005      	beq.n	f38 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	60fa      	str	r2, [r7, #12]
     f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f34:	7812      	ldrb	r2, [r2, #0]
     f36:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f3a:	3301      	adds	r3, #1
     f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f40:	3301      	adds	r3, #1
     f42:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	2b00      	cmp	r3, #0
     f4a:	d1ec      	bne.n	f26 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4e:	2b00      	cmp	r3, #0
     f50:	f000 81a1 	beq.w	1296 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f56:	425b      	negs	r3, r3
     f58:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f5e:	429a      	cmp	r2, r3
     f60:	f080 8199 	bcs.w	1296 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f68:	1ad3      	subs	r3, r2, r3
     f6a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f72:	4619      	mov	r1, r3
     f74:	68f8      	ldr	r0, [r7, #12]
     f76:	f7ff fd95 	bl	aa4 <padbuffer>
     f7a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	2b00      	cmp	r3, #0
     f80:	d001      	beq.n	f86 <am_util_stdio_vsprintf+0x2c2>
     f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f84:	e000      	b.n	f88 <am_util_stdio_vsprintf+0x2c4>
     f86:	2300      	movs	r3, #0
     f88:	68fa      	ldr	r2, [r7, #12]
     f8a:	4413      	add	r3, r2
     f8c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f92:	4413      	add	r3, r2
     f94:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f96:	2300      	movs	r3, #0
     f98:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f9a:	e17c      	b.n	1296 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f9c:	2301      	movs	r3, #1
     f9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fa6:	2b00      	cmp	r3, #0
     fa8:	d00a      	beq.n	fc0 <am_util_stdio_vsprintf+0x2fc>
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	3307      	adds	r3, #7
     fae:	f023 0307 	bic.w	r3, r3, #7
     fb2:	f103 0208 	add.w	r2, r3, #8
     fb6:	607a      	str	r2, [r7, #4]
     fb8:	cb18      	ldmia	r3, {r3, r4}
     fba:	e007      	b.n	fcc <am_util_stdio_vsprintf+0x308>
     fbc:	10001164 	.word	0x10001164
                                      va_arg(pArgs, uint32_t);
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	1d1a      	adds	r2, r3, #4
     fc4:	607a      	str	r2, [r7, #4]
     fc6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc8:	f04f 0400 	mov.w	r4, #0
     fcc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd2:	2b00      	cmp	r3, #0
     fd4:	d01e      	beq.n	1014 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fda:	f7ff fc35 	bl	848 <ndigits_in_hex>
     fde:	4602      	mov	r2, r0
     fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe2:	1a9b      	subs	r3, r3, r2
     fe4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fec:	4619      	mov	r1, r3
     fee:	68f8      	ldr	r0, [r7, #12]
     ff0:	f7ff fd58 	bl	aa4 <padbuffer>
     ff4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d001      	beq.n	1000 <am_util_stdio_vsprintf+0x33c>
     ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffe:	e000      	b.n	1002 <am_util_stdio_vsprintf+0x33e>
    1000:	2300      	movs	r3, #0
    1002:	68fa      	ldr	r2, [r7, #12]
    1004:	4413      	add	r3, r2
    1006:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    100c:	4413      	add	r3, r2
    100e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1010:	2300      	movs	r3, #0
    1012:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1018:	68fa      	ldr	r2, [r7, #12]
    101a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    101e:	f7ff fcc5 	bl	9ac <uint64_to_hexstr>
    1022:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1024:	68fb      	ldr	r3, [r7, #12]
    1026:	2b00      	cmp	r3, #0
    1028:	d003      	beq.n	1032 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    102c:	68fa      	ldr	r2, [r7, #12]
    102e:	4413      	add	r3, r2
    1030:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1036:	4413      	add	r3, r2
    1038:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    103a:	e12f      	b.n	129c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    103c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1040:	2b00      	cmp	r3, #0
    1042:	d008      	beq.n	1056 <am_util_stdio_vsprintf+0x392>
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	3307      	adds	r3, #7
    1048:	f023 0307 	bic.w	r3, r3, #7
    104c:	f103 0208 	add.w	r2, r3, #8
    1050:	607a      	str	r2, [r7, #4]
    1052:	cb18      	ldmia	r3, {r3, r4}
    1054:	e005      	b.n	1062 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	1d1a      	adds	r2, r3, #4
    105a:	607a      	str	r2, [r7, #4]
    105c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    105e:	f04f 0400 	mov.w	r4, #0
    1062:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1068:	2b00      	cmp	r3, #0
    106a:	d01e      	beq.n	10aa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    106c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1070:	f7ff fbaa 	bl	7c8 <ndigits_in_u64>
    1074:	4602      	mov	r2, r0
    1076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1078:	1a9b      	subs	r3, r3, r2
    107a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    107c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1080:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1082:	4619      	mov	r1, r3
    1084:	68f8      	ldr	r0, [r7, #12]
    1086:	f7ff fd0d 	bl	aa4 <padbuffer>
    108a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    108c:	68fb      	ldr	r3, [r7, #12]
    108e:	2b00      	cmp	r3, #0
    1090:	d001      	beq.n	1096 <am_util_stdio_vsprintf+0x3d2>
    1092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1094:	e000      	b.n	1098 <am_util_stdio_vsprintf+0x3d4>
    1096:	2300      	movs	r3, #0
    1098:	68fa      	ldr	r2, [r7, #12]
    109a:	4413      	add	r3, r2
    109c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10a2:	4413      	add	r3, r2
    10a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10a6:	2300      	movs	r3, #0
    10a8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    10aa:	68fa      	ldr	r2, [r7, #12]
    10ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10b0:	f7ff fc34 	bl	91c <uint64_to_str>
    10b4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d003      	beq.n	10c4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    10bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10be:	68fa      	ldr	r2, [r7, #12]
    10c0:	4413      	add	r3, r2
    10c2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10c8:	4413      	add	r3, r2
    10ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10cc:	e0e6      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10d2:	2b00      	cmp	r3, #0
    10d4:	d008      	beq.n	10e8 <am_util_stdio_vsprintf+0x424>
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	3307      	adds	r3, #7
    10da:	f023 0307 	bic.w	r3, r3, #7
    10de:	f103 0208 	add.w	r2, r3, #8
    10e2:	607a      	str	r2, [r7, #4]
    10e4:	cb18      	ldmia	r3, {r3, r4}
    10e6:	e005      	b.n	10f4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	1d1a      	adds	r2, r3, #4
    10ec:	607a      	str	r2, [r7, #4]
    10ee:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    10f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10fc:	2b00      	cmp	r3, #0
    10fe:	f174 0300 	sbcs.w	r3, r4, #0
    1102:	da0a      	bge.n	111a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1104:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1108:	425b      	negs	r3, r3
    110a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    110e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1112:	2301      	movs	r3, #1
    1114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1118:	e006      	b.n	1128 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    111a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    111e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1122:	2300      	movs	r3, #0
    1124:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    112a:	2b00      	cmp	r3, #0
    112c:	d04a      	beq.n	11c4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    112e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1132:	4618      	mov	r0, r3
    1134:	4621      	mov	r1, r4
    1136:	f7ff fb69 	bl	80c <ndigits_in_i64>
    113a:	4602      	mov	r2, r0
    113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113e:	1a9b      	subs	r3, r3, r2
    1140:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1146:	2b00      	cmp	r3, #0
    1148:	d011      	beq.n	116e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114c:	3b01      	subs	r3, #1
    114e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1154:	2b30      	cmp	r3, #48	; 0x30
    1156:	d10a      	bne.n	116e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	2b00      	cmp	r3, #0
    115c:	d004      	beq.n	1168 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	1c5a      	adds	r2, r3, #1
    1162:	60fa      	str	r2, [r7, #12]
    1164:	222d      	movs	r2, #45	; 0x2d
    1166:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    116a:	3301      	adds	r3, #1
    116c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    116e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1172:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1174:	4619      	mov	r1, r3
    1176:	68f8      	ldr	r0, [r7, #12]
    1178:	f7ff fc94 	bl	aa4 <padbuffer>
    117c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	2b00      	cmp	r3, #0
    1182:	d001      	beq.n	1188 <am_util_stdio_vsprintf+0x4c4>
    1184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1186:	e000      	b.n	118a <am_util_stdio_vsprintf+0x4c6>
    1188:	2300      	movs	r3, #0
    118a:	68fa      	ldr	r2, [r7, #12]
    118c:	4413      	add	r3, r2
    118e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1194:	4413      	add	r3, r2
    1196:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1198:	2300      	movs	r3, #0
    119a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    119c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11a0:	2b00      	cmp	r3, #0
    11a2:	d01e      	beq.n	11e2 <am_util_stdio_vsprintf+0x51e>
    11a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11a8:	2b20      	cmp	r3, #32
    11aa:	d11a      	bne.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d004      	beq.n	11bc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    11b2:	68fb      	ldr	r3, [r7, #12]
    11b4:	1c5a      	adds	r2, r3, #1
    11b6:	60fa      	str	r2, [r7, #12]
    11b8:	222d      	movs	r2, #45	; 0x2d
    11ba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    11bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11be:	3301      	adds	r3, #1
    11c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    11c2:	e00e      	b.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    11c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11c8:	2b00      	cmp	r3, #0
    11ca:	d00a      	beq.n	11e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d004      	beq.n	11dc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	1c5a      	adds	r2, r3, #1
    11d6:	60fa      	str	r2, [r7, #12]
    11d8:	222d      	movs	r2, #45	; 0x2d
    11da:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11de:	3301      	adds	r3, #1
    11e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    11e2:	68fa      	ldr	r2, [r7, #12]
    11e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11e8:	f7ff fb98 	bl	91c <uint64_to_str>
    11ec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d003      	beq.n	11fc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    11f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f6:	68fa      	ldr	r2, [r7, #12]
    11f8:	4413      	add	r3, r2
    11fa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1200:	4413      	add	r3, r2
    1202:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1204:	e04a      	b.n	129c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	2b00      	cmp	r3, #0
    120a:	d046      	beq.n	129a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	3307      	adds	r3, #7
    1210:	f023 0307 	bic.w	r3, r3, #7
    1214:	f103 0208 	add.w	r2, r3, #8
    1218:	607a      	str	r2, [r7, #4]
    121a:	cb18      	ldmia	r3, {r3, r4}
    121c:	4618      	mov	r0, r3
    121e:	4621      	mov	r1, r4
    1220:	f7fe ff4e 	bl	c0 <__aeabi_d2f>
    1224:	4603      	mov	r3, r0
    1226:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	2214      	movs	r2, #20
    122c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    122e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1230:	68f9      	ldr	r1, [r7, #12]
    1232:	6978      	ldr	r0, [r7, #20]
    1234:	f7ff fc5c 	bl	af0 <ftoa>
    1238:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    123c:	2b00      	cmp	r3, #0
    123e:	da14      	bge.n	126a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1242:	f1b3 3fff 	cmp.w	r3, #4294967295
    1246:	d102      	bne.n	124e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1248:	4b1e      	ldr	r3, [pc, #120]	; (12c4 <am_util_stdio_vsprintf+0x600>)
    124a:	62bb      	str	r3, [r7, #40]	; 0x28
    124c:	e008      	b.n	1260 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1250:	f113 0f02 	cmn.w	r3, #2
    1254:	d102      	bne.n	125c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1256:	4b1c      	ldr	r3, [pc, #112]	; (12c8 <am_util_stdio_vsprintf+0x604>)
    1258:	62bb      	str	r3, [r7, #40]	; 0x28
    125a:	e001      	b.n	1260 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    125c:	4b1b      	ldr	r3, [pc, #108]	; (12cc <am_util_stdio_vsprintf+0x608>)
    125e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1264:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1266:	2303      	movs	r3, #3
    1268:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    126c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    126e:	4413      	add	r3, r2
    1270:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1274:	68fa      	ldr	r2, [r7, #12]
    1276:	4413      	add	r3, r2
    1278:	60fb      	str	r3, [r7, #12]
                }
                break;
    127a:	e00e      	b.n	129a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	2b00      	cmp	r3, #0
    1280:	d005      	beq.n	128e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	1c5a      	adds	r2, r3, #1
    1286:	60fa      	str	r2, [r7, #12]
    1288:	68ba      	ldr	r2, [r7, #8]
    128a:	7812      	ldrb	r2, [r2, #0]
    128c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1290:	3301      	adds	r3, #1
    1292:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1294:	e002      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1296:	bf00      	nop
    1298:	e000      	b.n	129c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    129a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    129c:	68bb      	ldr	r3, [r7, #8]
    129e:	3301      	adds	r3, #1
    12a0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    12a2:	68bb      	ldr	r3, [r7, #8]
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	f47f ad17 	bne.w	cda <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d002      	beq.n	12b8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    12b2:	68fb      	ldr	r3, [r7, #12]
    12b4:	2200      	movs	r2, #0
    12b6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    12b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    12ba:	4618      	mov	r0, r3
    12bc:	3754      	adds	r7, #84	; 0x54
    12be:	46bd      	mov	sp, r7
    12c0:	bd90      	pop	{r4, r7, pc}
    12c2:	bf00      	nop
    12c4:	00302e30 	.word	0x00302e30
    12c8:	00232e23 	.word	0x00232e23
    12cc:	003f2e3f 	.word	0x003f2e3f

000012d0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    12d0:	b40f      	push	{r0, r1, r2, r3}
    12d2:	b580      	push	{r7, lr}
    12d4:	b082      	sub	sp, #8
    12d6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12d8:	f107 0314 	add.w	r3, r7, #20
    12dc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12de:	683a      	ldr	r2, [r7, #0]
    12e0:	6939      	ldr	r1, [r7, #16]
    12e2:	4808      	ldr	r0, [pc, #32]	; (1304 <am_util_stdio_printf+0x34>)
    12e4:	f7ff fcee 	bl	cc4 <am_util_stdio_vsprintf>
    12e8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    12ea:	4b07      	ldr	r3, [pc, #28]	; (1308 <am_util_stdio_printf+0x38>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	4805      	ldr	r0, [pc, #20]	; (1304 <am_util_stdio_printf+0x34>)
    12f0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12f2:	687b      	ldr	r3, [r7, #4]
}
    12f4:	4618      	mov	r0, r3
    12f6:	3708      	adds	r7, #8
    12f8:	46bd      	mov	sp, r7
    12fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12fe:	b004      	add	sp, #16
    1300:	4770      	bx	lr
    1302:	bf00      	nop
    1304:	10001064 	.word	0x10001064
    1308:	10001168 	.word	0x10001168

0000130c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    130c:	b580      	push	{r7, lr}
    130e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1310:	4802      	ldr	r0, [pc, #8]	; (131c <am_util_stdio_terminal_clear+0x10>)
    1312:	f7ff ffdd 	bl	12d0 <am_util_stdio_printf>
}
    1316:	bf00      	nop
    1318:	bd80      	pop	{r7, pc}
    131a:	bf00      	nop
    131c:	00001b9c 	.word	0x00001b9c

00001320 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1320:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1322:	f000 fa97 	bl	1854 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1326:	f000 fab9 	bl	189c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    132a:	f000 fb9f 	bl	1a6c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    132e:	2001      	movs	r0, #1
    1330:	f000 fac4 	bl	18bc <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1334:	2001      	movs	r0, #1
    1336:	f000 f8c7 	bl	14c8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    133a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    133e:	f000 bacb 	b.w	18d8 <am_hal_rtc_osc_disable>
    1342:	bf00      	nop

00001344 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    1344:	4601      	mov	r1, r0
    1346:	2000      	movs	r0, #0
    1348:	f000 bb7c 	b.w	1a44 <am_hal_uart_string_transmit_polled>

0000134c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    134e:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1350:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1354:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1356:	7863      	ldrb	r3, [r4, #1]
    1358:	78e2      	ldrb	r2, [r4, #3]
    135a:	7925      	ldrb	r5, [r4, #4]
    135c:	79a1      	ldrb	r1, [r4, #6]
    135e:	00be      	lsls	r6, r7, #2
    1360:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1364:	f006 0304 	and.w	r3, r6, #4
    1368:	f00e 0602 	and.w	r6, lr, #2
    136c:	431e      	orrs	r6, r3
    136e:	f042 0201 	orr.w	r2, r2, #1
    1372:	79e3      	ldrb	r3, [r4, #7]
    1374:	01ed      	lsls	r5, r5, #7
    1376:	4316      	orrs	r6, r2
    1378:	b2ed      	uxtb	r5, r5
    137a:	7a22      	ldrb	r2, [r4, #8]
    137c:	0289      	lsls	r1, r1, #10
    137e:	432e      	orrs	r6, r5
    1380:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1384:	7a65      	ldrb	r5, [r4, #9]
    1386:	02db      	lsls	r3, r3, #11
    1388:	430e      	orrs	r6, r1
    138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    138e:	0312      	lsls	r2, r2, #12
    1390:	7aa1      	ldrb	r1, [r4, #10]
    1392:	431e      	orrs	r6, r3
    1394:	042d      	lsls	r5, r5, #16
    1396:	b293      	uxth	r3, r2
    1398:	7ae2      	ldrb	r2, [r4, #11]
    139a:	431e      	orrs	r6, r3
    139c:	0509      	lsls	r1, r1, #20
    139e:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    13a2:	0612      	lsls	r2, r2, #24
    13a4:	4333      	orrs	r3, r6
    13a6:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    13aa:	00bf      	lsls	r7, r7, #2
    13ac:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    13b0:	4333      	orrs	r3, r6
    13b2:	430b      	orrs	r3, r1
    13b4:	f007 0508 	and.w	r5, r7, #8
    13b8:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    13ba:	f000 f943 	bl	1644 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13be:	482c      	ldr	r0, [pc, #176]	; (1470 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    13c0:	4b2c      	ldr	r3, [pc, #176]	; (1474 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13c2:	6005      	str	r5, [r0, #0]
    13c4:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    13c6:	681e      	ldr	r6, [r3, #0]
    13c8:	0777      	lsls	r7, r6, #29
    13ca:	d41e      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13cc:	681f      	ldr	r7, [r3, #0]
    13ce:	077e      	lsls	r6, r7, #29
    13d0:	f102 32ff 	add.w	r2, r2, #4294967295
    13d4:	d419      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13d6:	6819      	ldr	r1, [r3, #0]
    13d8:	074f      	lsls	r7, r1, #29
    13da:	d416      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13dc:	6818      	ldr	r0, [r3, #0]
    13de:	0746      	lsls	r6, r0, #29
    13e0:	d413      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13e2:	681e      	ldr	r6, [r3, #0]
    13e4:	0770      	lsls	r0, r6, #29
    13e6:	d410      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13e8:	681f      	ldr	r7, [r3, #0]
    13ea:	0779      	lsls	r1, r7, #29
    13ec:	d40d      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13ee:	6819      	ldr	r1, [r3, #0]
    13f0:	074f      	lsls	r7, r1, #29
    13f2:	d40a      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13f4:	6818      	ldr	r0, [r3, #0]
    13f6:	0746      	lsls	r6, r0, #29
    13f8:	d407      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    13fa:	681e      	ldr	r6, [r3, #0]
    13fc:	0770      	lsls	r0, r6, #29
    13fe:	d404      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    1400:	681f      	ldr	r7, [r3, #0]
    1402:	0779      	lsls	r1, r7, #29
    1404:	d401      	bmi.n	140a <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1406:	3a09      	subs	r2, #9
    1408:	d1dd      	bne.n	13c6 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    140a:	4b1a      	ldr	r3, [pc, #104]	; (1474 <am_hal_cachectrl_enable+0x128>)
    140c:	681a      	ldr	r2, [r3, #0]
    140e:	f042 0101 	orr.w	r1, r2, #1
    1412:	6019      	str	r1, [r3, #0]
    1414:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1416:	6818      	ldr	r0, [r3, #0]
    1418:	0740      	lsls	r0, r0, #29
    141a:	d41e      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    141c:	681e      	ldr	r6, [r3, #0]
    141e:	0771      	lsls	r1, r6, #29
    1420:	f102 32ff 	add.w	r2, r2, #4294967295
    1424:	d419      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    1426:	681f      	ldr	r7, [r3, #0]
    1428:	077f      	lsls	r7, r7, #29
    142a:	d416      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    142c:	6819      	ldr	r1, [r3, #0]
    142e:	074e      	lsls	r6, r1, #29
    1430:	d413      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    1432:	6818      	ldr	r0, [r3, #0]
    1434:	0740      	lsls	r0, r0, #29
    1436:	d410      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    1438:	681e      	ldr	r6, [r3, #0]
    143a:	0771      	lsls	r1, r6, #29
    143c:	d40d      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    143e:	681f      	ldr	r7, [r3, #0]
    1440:	077f      	lsls	r7, r7, #29
    1442:	d40a      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    1444:	6819      	ldr	r1, [r3, #0]
    1446:	074e      	lsls	r6, r1, #29
    1448:	d407      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    144a:	6818      	ldr	r0, [r3, #0]
    144c:	0740      	lsls	r0, r0, #29
    144e:	d404      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    1450:	681e      	ldr	r6, [r3, #0]
    1452:	0771      	lsls	r1, r6, #29
    1454:	d401      	bmi.n	145a <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1456:	3a09      	subs	r2, #9
    1458:	d1dd      	bne.n	1416 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    145a:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    145c:	4f04      	ldr	r7, [pc, #16]	; (1470 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    145e:	0223      	lsls	r3, r4, #8
    1460:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1464:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1468:	4311      	orrs	r1, r2
    146a:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    146c:	6039      	str	r1, [r7, #0]
    146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1470:	40018000 	.word	0x40018000
    1474:	40018008 	.word	0x40018008

00001478 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1478:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    147a:	4604      	mov	r4, r0
    147c:	b120      	cbz	r0, 1488 <am_hal_clkgen_sysclk_select+0x10>
    147e:	4a06      	ldr	r2, [pc, #24]	; (1498 <am_hal_clkgen_sysclk_select+0x20>)
    1480:	4806      	ldr	r0, [pc, #24]	; (149c <am_hal_clkgen_sysclk_select+0x24>)
    1482:	2150      	movs	r1, #80	; 0x50
    1484:	f000 f84c 	bl	1520 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1488:	4b05      	ldr	r3, [pc, #20]	; (14a0 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    148a:	4906      	ldr	r1, [pc, #24]	; (14a4 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    148c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    148e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1490:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1492:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1494:	601a      	str	r2, [r3, #0]
    1496:	bd10      	pop	{r4, pc}
    1498:	00001bbc 	.word	0x00001bbc
    149c:	00001bf4 	.word	0x00001bf4
    14a0:	40004014 	.word	0x40004014
    14a4:	40004018 	.word	0x40004018

000014a8 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    14aa:	4905      	ldr	r1, [pc, #20]	; (14c0 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    14ac:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    14ae:	4805      	ldr	r0, [pc, #20]	; (14c4 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    14b0:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    14b4:	bf08      	it	eq
    14b6:	4608      	moveq	r0, r1
    14b8:	4770      	bx	lr
    14ba:	bf00      	nop
    14bc:	40004018 	.word	0x40004018
    14c0:	02dc6c00 	.word	0x02dc6c00
    14c4:	016e3600 	.word	0x016e3600

000014c8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    14c8:	0783      	lsls	r3, r0, #30
    14ca:	d003      	beq.n	14d4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    14cc:	4a02      	ldr	r2, [pc, #8]	; (14d8 <am_hal_clkgen_osc_stop+0x10>)
    14ce:	6813      	ldr	r3, [r2, #0]
    14d0:	4318      	orrs	r0, r3
    14d2:	6010      	str	r0, [r2, #0]
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop
    14d8:	4000400c 	.word	0x4000400c

000014dc <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    14dc:	2801      	cmp	r0, #1
    14de:	d900      	bls.n	14e2 <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    14e0:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    14e2:	2903      	cmp	r1, #3
    14e4:	d8fc      	bhi.n	14e0 <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    14e6:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    14ea:	b430      	push	{r4, r5}
    14ec:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    14ee:	9301      	str	r3, [sp, #4]
    14f0:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    14f2:	4b0a      	ldr	r3, [pc, #40]	; (151c <am_hal_clkgen_uarten_set+0x40>)
    14f4:	00c5      	lsls	r5, r0, #3
    14f6:	681c      	ldr	r4, [r3, #0]
    14f8:	2203      	movs	r2, #3
    14fa:	40aa      	lsls	r2, r5
    14fc:	ea24 0502 	bic.w	r5, r4, r2
    1500:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1502:	fb00 f000 	mul.w	r0, r0, r0
    1506:	681a      	ldr	r2, [r3, #0]
    1508:	00c0      	lsls	r0, r0, #3
    150a:	4081      	lsls	r1, r0
    150c:	4311      	orrs	r1, r2
    150e:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	f383 8810 	msr	PRIMASK, r3
}
    1516:	b002      	add	sp, #8
    1518:	bc30      	pop	{r4, r5}
    151a:	4770      	bx	lr
    151c:	40004034 	.word	0x40004034

00001520 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1520:	e7fe      	b.n	1520 <am_hal_debug_error>
    1522:	bf00      	nop

00001524 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1524:	4b01      	ldr	r3, [pc, #4]	; (152c <am_hal_flash_delay+0x8>)
    1526:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1528:	4708      	bx	r1
    152a:	bf00      	nop
    152c:	10001014 	.word	0x10001014

00001530 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1530:	4a0d      	ldr	r2, [pc, #52]	; (1568 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1532:	4b0e      	ldr	r3, [pc, #56]	; (156c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1534:	490e      	ldr	r1, [pc, #56]	; (1570 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1536:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1538:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    153a:	6814      	ldr	r4, [r2, #0]
    153c:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    153e:	6809      	ldr	r1, [r1, #0]
    1540:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1542:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1544:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1546:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1548:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    154a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    154c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1550:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1552:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1554:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1558:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    155c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    155e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1560:	6142      	str	r2, [r0, #20]
}
    1562:	bc70      	pop	{r4, r5, r6}
    1564:	4770      	bx	lr
    1566:	bf00      	nop
    1568:	400201c4 	.word	0x400201c4
    156c:	400201cc 	.word	0x400201cc
    1570:	400201c0 	.word	0x400201c0

00001574 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1574:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1576:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1578:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    157a:	b1c0      	cbz	r0, 15ae <am_hal_pwrctrl_periph_enable+0x3a>
    157c:	1e43      	subs	r3, r0, #1
    157e:	4203      	tst	r3, r0
    1580:	d115      	bne.n	15ae <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1582:	f3ef 8010 	mrs	r0, PRIMASK
    1586:	9001      	str	r0, [sp, #4]
    1588:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    158a:	4a18      	ldr	r2, [pc, #96]	; (15ec <am_hal_pwrctrl_periph_enable+0x78>)
    158c:	6811      	ldr	r1, [r2, #0]
    158e:	4321      	orrs	r1, r4
    1590:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1592:	9b01      	ldr	r3, [sp, #4]
    1594:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1598:	200e      	movs	r0, #14
    159a:	f7ff ffc3 	bl	1524 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    159e:	f014 0f0e 	tst.w	r4, #14
    15a2:	d10a      	bne.n	15ba <am_hal_pwrctrl_periph_enable+0x46>
    15a4:	f014 0f70 	tst.w	r4, #112	; 0x70
    15a8:	d00e      	beq.n	15c8 <am_hal_pwrctrl_periph_enable+0x54>
    15aa:	2408      	movs	r4, #8
    15ac:	e006      	b.n	15bc <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    15ae:	4a10      	ldr	r2, [pc, #64]	; (15f0 <am_hal_pwrctrl_periph_enable+0x7c>)
    15b0:	4810      	ldr	r0, [pc, #64]	; (15f4 <am_hal_pwrctrl_periph_enable+0x80>)
    15b2:	215d      	movs	r1, #93	; 0x5d
    15b4:	f7ff ffb4 	bl	1520 <am_hal_debug_error>
    15b8:	e7e3      	b.n	1582 <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    15ba:	2404      	movs	r4, #4
    15bc:	4a0e      	ldr	r2, [pc, #56]	; (15f8 <am_hal_pwrctrl_periph_enable+0x84>)
    15be:	6811      	ldr	r1, [r2, #0]
    15c0:	420c      	tst	r4, r1
    15c2:	d0fc      	beq.n	15be <am_hal_pwrctrl_periph_enable+0x4a>
}
    15c4:	b002      	add	sp, #8
    15c6:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    15c8:	f240 1081 	movw	r0, #385	; 0x181
    15cc:	4020      	ands	r0, r4
    15ce:	b940      	cbnz	r0, 15e2 <am_hal_pwrctrl_periph_enable+0x6e>
    15d0:	05a3      	lsls	r3, r4, #22
    15d2:	d408      	bmi.n	15e6 <am_hal_pwrctrl_periph_enable+0x72>
    15d4:	f414 6f80 	tst.w	r4, #1024	; 0x400
    15d8:	bf14      	ite	ne
    15da:	2410      	movne	r4, #16
    15dc:	f04f 34ff 	moveq.w	r4, #4294967295
    15e0:	e7ec      	b.n	15bc <am_hal_pwrctrl_periph_enable+0x48>
    15e2:	2402      	movs	r4, #2
    15e4:	e7ea      	b.n	15bc <am_hal_pwrctrl_periph_enable+0x48>
    15e6:	2480      	movs	r4, #128	; 0x80
    15e8:	e7e8      	b.n	15bc <am_hal_pwrctrl_periph_enable+0x48>
    15ea:	bf00      	nop
    15ec:	40021008 	.word	0x40021008
    15f0:	00001c0c 	.word	0x00001c0c
    15f4:	00001c40 	.word	0x00001c40
    15f8:	40021014 	.word	0x40021014

000015fc <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    15fc:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    15fe:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1600:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1602:	b110      	cbz	r0, 160a <am_hal_pwrctrl_periph_disable+0xe>
    1604:	1e43      	subs	r3, r0, #1
    1606:	4203      	tst	r3, r0
    1608:	d004      	beq.n	1614 <am_hal_pwrctrl_periph_disable+0x18>
    160a:	4a0b      	ldr	r2, [pc, #44]	; (1638 <am_hal_pwrctrl_periph_disable+0x3c>)
    160c:	480b      	ldr	r0, [pc, #44]	; (163c <am_hal_pwrctrl_periph_disable+0x40>)
    160e:	218d      	movs	r1, #141	; 0x8d
    1610:	f7ff ff86 	bl	1520 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1614:	f3ef 8010 	mrs	r0, PRIMASK
    1618:	9001      	str	r0, [sp, #4]
    161a:	b672      	cpsid	i

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    161c:	4a08      	ldr	r2, [pc, #32]	; (1640 <am_hal_pwrctrl_periph_disable+0x44>)
    161e:	6811      	ldr	r1, [r2, #0]
    1620:	ea21 0404 	bic.w	r4, r1, r4
    1624:	6014      	str	r4, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    1626:	9b01      	ldr	r3, [sp, #4]
    1628:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    162c:	200e      	movs	r0, #14
    162e:	f7ff ff79 	bl	1524 <am_hal_flash_delay>
}
    1632:	b002      	add	sp, #8
    1634:	bd10      	pop	{r4, pc}
    1636:	bf00      	nop
    1638:	00001c0c 	.word	0x00001c0c
    163c:	00001c40 	.word	0x00001c40
    1640:	40021008 	.word	0x40021008

00001644 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1644:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1648:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    164a:	d03a      	beq.n	16c2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    164c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1650:	f000 809d 	beq.w	178e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1654:	2801      	cmp	r0, #1
    1656:	f000 809d 	beq.w	1794 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    165a:	2803      	cmp	r0, #3
    165c:	f000 80a6 	beq.w	17ac <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1660:	2807      	cmp	r0, #7
    1662:	f000 809c 	beq.w	179e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1666:	280f      	cmp	r0, #15
    1668:	f000 80a5 	beq.w	17b6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    166c:	281f      	cmp	r0, #31
    166e:	f000 80b1 	beq.w	17d4 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1672:	283f      	cmp	r0, #63	; 0x3f
    1674:	f000 80b5 	beq.w	17e2 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1678:	287f      	cmp	r0, #127	; 0x7f
    167a:	f000 80b9 	beq.w	17f0 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    167e:	28ff      	cmp	r0, #255	; 0xff
    1680:	f000 80a0 	beq.w	17c4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1684:	f240 13ff 	movw	r3, #511	; 0x1ff
    1688:	4298      	cmp	r0, r3
    168a:	f000 80b8 	beq.w	17fe <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    168e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1692:	4288      	cmp	r0, r1
    1694:	f000 80b9 	beq.w	180a <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1698:	f240 72ff 	movw	r2, #2047	; 0x7ff
    169c:	4290      	cmp	r0, r2
    169e:	d00e      	beq.n	16be <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    16a0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    16a4:	f000 80b7 	beq.w	1816 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    16a8:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    16ac:	42a0      	cmp	r0, r4
    16ae:	f000 80b5 	beq.w	181c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    16b2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    16b6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    16ba:	4560      	cmp	r0, ip
    16bc:	d132      	bne.n	1724 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    16be:	495c      	ldr	r1, [pc, #368]	; (1830 <am_hal_pwrctrl_memory_enable+0x1ec>)
    16c0:	e066      	b.n	1790 <am_hal_pwrctrl_memory_enable+0x14c>
    16c2:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    16c6:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    16c8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    16ca:	4c5a      	ldr	r4, [pc, #360]	; (1834 <am_hal_pwrctrl_memory_enable+0x1f0>)
    16cc:	6822      	ldr	r2, [r4, #0]
    16ce:	402a      	ands	r2, r5
    16d0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    16d2:	4d58      	ldr	r5, [pc, #352]	; (1834 <am_hal_pwrctrl_memory_enable+0x1f0>)
    16d4:	682c      	ldr	r4, [r5, #0]
    16d6:	4320      	orrs	r0, r4
    16d8:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    16da:	2b00      	cmp	r3, #0
    16dc:	d029      	beq.n	1732 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    16de:	4a56      	ldr	r2, [pc, #344]	; (1838 <am_hal_pwrctrl_memory_enable+0x1f4>)
    16e0:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    16e2:	4203      	tst	r3, r0
    16e4:	bf18      	it	ne
    16e6:	20c6      	movne	r0, #198	; 0xc6
    16e8:	d01f      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    16ea:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    16ec:	422b      	tst	r3, r5
    16ee:	d01c      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    16f0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    16f2:	4223      	tst	r3, r4
    16f4:	d019      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    16f6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    16f8:	422b      	tst	r3, r5
    16fa:	d016      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    16fc:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    16fe:	4223      	tst	r3, r4
    1700:	d013      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1702:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1704:	422b      	tst	r3, r5
    1706:	d010      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1708:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    170a:	4223      	tst	r3, r4
    170c:	d00d      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    170e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1710:	422b      	tst	r3, r5
    1712:	d00a      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1714:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1716:	4223      	tst	r3, r4
    1718:	d007      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    171a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    171c:	422b      	tst	r3, r5
    171e:	d004      	beq.n	172a <am_hal_pwrctrl_memory_enable+0xe6>
    1720:	3809      	subs	r0, #9
    1722:	d1e2      	bne.n	16ea <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1724:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1726:	bc30      	pop	{r4, r5}
    1728:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    172a:	b911      	cbnz	r1, 1732 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    172c:	2001      	movs	r0, #1
}
    172e:	bc30      	pop	{r4, r5}
    1730:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1732:	4b41      	ldr	r3, [pc, #260]	; (1838 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1734:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1736:	ea31 0402 	bics.w	r4, r1, r2
    173a:	bf18      	it	ne
    173c:	24c6      	movne	r4, #198	; 0xc6
    173e:	d0f5      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1740:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1742:	ea31 0000 	bics.w	r0, r1, r0
    1746:	d0f1      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1748:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    174a:	ea31 0005 	bics.w	r0, r1, r5
    174e:	d0ed      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1750:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1752:	ea31 0002 	bics.w	r0, r1, r2
    1756:	d0e9      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1758:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    175a:	ea31 0000 	bics.w	r0, r1, r0
    175e:	d0e5      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1760:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1762:	ea31 0005 	bics.w	r0, r1, r5
    1766:	d0e1      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1768:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    176a:	ea31 0002 	bics.w	r0, r1, r2
    176e:	d0dd      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1770:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1772:	ea31 0000 	bics.w	r0, r1, r0
    1776:	d0d9      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1778:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    177a:	ea31 0005 	bics.w	r0, r1, r5
    177e:	d0d5      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1780:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1782:	ea31 0002 	bics.w	r0, r1, r2
    1786:	d0d1      	beq.n	172c <am_hal_pwrctrl_memory_enable+0xe8>
    1788:	3c09      	subs	r4, #9
    178a:	d1d9      	bne.n	1740 <am_hal_pwrctrl_memory_enable+0xfc>
    178c:	e7ca      	b.n	1724 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    178e:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1790:	2300      	movs	r3, #0
    1792:	e79e      	b.n	16d2 <am_hal_pwrctrl_memory_enable+0x8e>
    1794:	4d29      	ldr	r5, [pc, #164]	; (183c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1796:	4b2a      	ldr	r3, [pc, #168]	; (1840 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1798:	f44f 7180 	mov.w	r1, #256	; 0x100
    179c:	e795      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    179e:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17a2:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    17a6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    17aa:	e78e      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17ac:	4d25      	ldr	r5, [pc, #148]	; (1844 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17ae:	4b26      	ldr	r3, [pc, #152]	; (1848 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    17b0:	f44f 7140 	mov.w	r1, #768	; 0x300
    17b4:	e789      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17b6:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17ba:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    17be:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    17c2:	e782      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17c4:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17c8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    17cc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    17d0:	20ff      	movs	r0, #255	; 0xff
    17d2:	e77a      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17d4:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17d8:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    17dc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    17e0:	e773      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17e2:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17e6:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    17ea:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    17ee:	e76c      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17f0:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    17f4:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    17f8:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    17fc:	e765      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    17fe:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1802:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1806:	4911      	ldr	r1, [pc, #68]	; (184c <am_hal_pwrctrl_memory_enable+0x208>)
    1808:	e75f      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    180a:	4911      	ldr	r1, [pc, #68]	; (1850 <am_hal_pwrctrl_memory_enable+0x20c>)
    180c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1814:	e759      	b.n	16ca <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1816:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    181a:	e7b9      	b.n	1790 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    181c:	4805      	ldr	r0, [pc, #20]	; (1834 <am_hal_pwrctrl_memory_enable+0x1f0>)
    181e:	6803      	ldr	r3, [r0, #0]
    1820:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1824:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1826:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    182a:	2100      	movs	r1, #0
    182c:	e757      	b.n	16de <am_hal_pwrctrl_memory_enable+0x9a>
    182e:	bf00      	nop
    1830:	0007ff00 	.word	0x0007ff00
    1834:	40021010 	.word	0x40021010
    1838:	40021014 	.word	0x40021014
    183c:	fffff801 	.word	0xfffff801
    1840:	0007fe00 	.word	0x0007fe00
    1844:	fffff803 	.word	0xfffff803
    1848:	0007fc00 	.word	0x0007fc00
    184c:	0001ff00 	.word	0x0001ff00
    1850:	0003ff00 	.word	0x0003ff00

00001854 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1854:	4b0f      	ldr	r3, [pc, #60]	; (1894 <am_hal_pwrctrl_bucks_init+0x40>)
    1856:	681a      	ldr	r2, [r3, #0]
    1858:	0792      	lsls	r2, r2, #30
    185a:	d502      	bpl.n	1862 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    185c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    185e:	07c3      	lsls	r3, r0, #31
    1860:	d40e      	bmi.n	1880 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1862:	4b0d      	ldr	r3, [pc, #52]	; (1898 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1864:	4a0b      	ldr	r2, [pc, #44]	; (1894 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1866:	6819      	ldr	r1, [r3, #0]
    1868:	f041 0002 	orr.w	r0, r1, #2
    186c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    186e:	6819      	ldr	r1, [r3, #0]
    1870:	f041 0001 	orr.w	r0, r1, #1
    1874:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1876:	6813      	ldr	r3, [r2, #0]
    1878:	f003 0103 	and.w	r1, r3, #3
    187c:	2903      	cmp	r1, #3
    187e:	d1fa      	bne.n	1876 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1880:	4a04      	ldr	r2, [pc, #16]	; (1894 <am_hal_pwrctrl_bucks_init+0x40>)
    1882:	6810      	ldr	r0, [r2, #0]
    1884:	f000 0303 	and.w	r3, r0, #3
    1888:	2b03      	cmp	r3, #3
    188a:	d1fa      	bne.n	1882 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    188c:	2042      	movs	r0, #66	; 0x42
    188e:	f7ff be49 	b.w	1524 <am_hal_flash_delay>
    1892:	bf00      	nop
    1894:	40021004 	.word	0x40021004
    1898:	40021000 	.word	0x40021000

0000189c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    189c:	4905      	ldr	r1, [pc, #20]	; (18b4 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    189e:	4a06      	ldr	r2, [pc, #24]	; (18b8 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    18a0:	680b      	ldr	r3, [r1, #0]
    18a2:	f043 0006 	orr.w	r0, r3, #6
    18a6:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    18a8:	6811      	ldr	r1, [r2, #0]
    18aa:	f021 0304 	bic.w	r3, r1, #4
    18ae:	6013      	str	r3, [r2, #0]
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop
    18b4:	40021018 	.word	0x40021018
    18b8:	40021000 	.word	0x40021000

000018bc <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    18bc:	4a05      	ldr	r2, [pc, #20]	; (18d4 <am_hal_rtc_osc_select+0x18>)
    18be:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    18c0:	b918      	cbnz	r0, 18ca <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    18c2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    18c6:	6010      	str	r0, [r2, #0]
    18c8:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    18ca:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    18ce:	6011      	str	r1, [r2, #0]
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	4000400c 	.word	0x4000400c

000018d8 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    18d8:	4a02      	ldr	r2, [pc, #8]	; (18e4 <am_hal_rtc_osc_disable+0xc>)
    18da:	6813      	ldr	r3, [r2, #0]
    18dc:	f043 0010 	orr.w	r0, r3, #16
    18e0:	6010      	str	r0, [r2, #0]
    18e2:	4770      	bx	lr
    18e4:	40004050 	.word	0x40004050

000018e8 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    18e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    18ea:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    18ec:	460f      	mov	r7, r1
    18ee:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    18f0:	f7ff fdda 	bl	14a8 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    18f4:	0169      	lsls	r1, r5, #5
    18f6:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    18f8:	fbb0 f4f1 	udiv	r4, r0, r1
    18fc:	fbb2 f0f1 	udiv	r0, r2, r1
    1900:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1904:	b924      	cbnz	r4, 1910 <am_hal_uart_config+0x28>
    1906:	4a11      	ldr	r2, [pc, #68]	; (194c <am_hal_uart_config+0x64>)
    1908:	4811      	ldr	r0, [pc, #68]	; (1950 <am_hal_uart_config+0x68>)
    190a:	2161      	movs	r1, #97	; 0x61
    190c:	f7ff fe08 	bl	1520 <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1910:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    1914:	331c      	adds	r3, #28
    1916:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1918:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    191a:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    191c:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    191e:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    1920:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1922:	68fa      	ldr	r2, [r7, #12]
    1924:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1926:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1928:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    192a:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    192e:	bf14      	ite	ne
    1930:	2208      	movne	r2, #8
    1932:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1934:	4302      	orrs	r2, r0
    1936:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1938:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    193a:	693f      	ldr	r7, [r7, #16]
    193c:	432f      	orrs	r7, r5
    193e:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1940:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1942:	f046 0110 	orr.w	r1, r6, #16
    1946:	6319      	str	r1, [r3, #48]	; 0x30
    1948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    194a:	bf00      	nop
    194c:	00001c58 	.word	0x00001c58
    1950:	00001c8c 	.word	0x00001c8c

00001954 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1954:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1956:	f3ef 8310 	mrs	r3, PRIMASK
    195a:	9301      	str	r3, [sp, #4]
    195c:	b672      	cpsid	i
    195e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1962:	301c      	adds	r0, #28
    1964:	0301      	lsls	r1, r0, #12
    1966:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1968:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    196c:	f04c 0301 	orr.w	r3, ip, #1
    1970:	630b      	str	r3, [r1, #48]	; 0x30
    1972:	9801      	ldr	r0, [sp, #4]
    1974:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1978:	b002      	add	sp, #8
    197a:	4770      	bx	lr

0000197c <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    197c:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    197e:	f3ef 8310 	mrs	r3, PRIMASK
    1982:	9301      	str	r3, [sp, #4]
    1984:	b672      	cpsid	i
    1986:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    198a:	301c      	adds	r0, #28
    198c:	0301      	lsls	r1, r0, #12
    198e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1990:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    1994:	f02c 0301 	bic.w	r3, ip, #1
    1998:	630b      	str	r3, [r1, #48]	; 0x30
    199a:	9801      	ldr	r0, [sp, #4]
    199c:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    19a0:	b002      	add	sp, #8
    19a2:	4770      	bx	lr

000019a4 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    19a4:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    19a6:	b510      	push	{r4, lr}
    19a8:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    19aa:	d905      	bls.n	19b8 <am_hal_uart_pwrctrl_enable+0x14>
    19ac:	4a05      	ldr	r2, [pc, #20]	; (19c4 <am_hal_uart_pwrctrl_enable+0x20>)
    19ae:	4806      	ldr	r0, [pc, #24]	; (19c8 <am_hal_uart_pwrctrl_enable+0x24>)
    19b0:	f240 11a3 	movw	r1, #419	; 0x1a3
    19b4:	f7ff fdb4 	bl	1520 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    19b8:	2080      	movs	r0, #128	; 0x80
    19ba:	40a0      	lsls	r0, r4
}
    19bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    19c0:	f7ff bdd8 	b.w	1574 <am_hal_pwrctrl_periph_enable>
    19c4:	00001ca0 	.word	0x00001ca0
    19c8:	00001c8c 	.word	0x00001c8c

000019cc <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    19cc:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    19ce:	b510      	push	{r4, lr}
    19d0:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    19d2:	d905      	bls.n	19e0 <am_hal_uart_pwrctrl_disable+0x14>
    19d4:	4a05      	ldr	r2, [pc, #20]	; (19ec <am_hal_uart_pwrctrl_disable+0x20>)
    19d6:	4806      	ldr	r0, [pc, #24]	; (19f0 <am_hal_uart_pwrctrl_disable+0x24>)
    19d8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    19dc:	f7ff fda0 	bl	1520 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    19e0:	2080      	movs	r0, #128	; 0x80
    19e2:	40a0      	lsls	r0, r4
}
    19e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    19e8:	f7ff be08 	b.w	15fc <am_hal_pwrctrl_periph_disable>
    19ec:	00001ca0 	.word	0x00001ca0
    19f0:	00001c8c 	.word	0x00001c8c

000019f4 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    19f4:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    19f6:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    19f8:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    19fa:	f7ff fd6f 	bl	14dc <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    19fe:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1a02:	301c      	adds	r0, #28
    1a04:	0301      	lsls	r1, r0, #12
    1a06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1a08:	f043 0208 	orr.w	r2, r3, #8
    1a0c:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1a0e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1a10:	f044 0010 	orr.w	r0, r4, #16
    1a14:	6308      	str	r0, [r1, #48]	; 0x30
    1a16:	bd10      	pop	{r4, pc}

00001a18 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1a18:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    1a1c:	331c      	adds	r3, #28
    1a1e:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1a20:	2100      	movs	r1, #0
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1a24:	f022 0208 	bic.w	r2, r2, #8
    1a28:	631a      	str	r2, [r3, #48]	; 0x30

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1a2a:	f7ff bd57 	b.w	14dc <am_hal_clkgen_uarten_set>
    1a2e:	bf00      	nop

00001a30 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1a30:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1a34:	301c      	adds	r0, #28
    1a36:	0302      	lsls	r2, r0, #12
    1a38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1a3a:	f043 0010 	orr.w	r0, r3, #16
    1a3e:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1a40:	6351      	str	r1, [r2, #52]	; 0x34
    1a42:	4770      	bx	lr

00001a44 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    1a44:	b410      	push	{r4}
    while (*pcString)
    1a46:	780c      	ldrb	r4, [r1, #0]
    1a48:	b16c      	cbz	r4, 1a66 <am_hal_uart_string_transmit_polled+0x22>
    1a4a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1a4e:	301c      	adds	r0, #28
    1a50:	0300      	lsls	r0, r0, #12
    1a52:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1a56:	6813      	ldr	r3, [r2, #0]
    1a58:	069b      	lsls	r3, r3, #26
    1a5a:	d4fc      	bmi.n	1a56 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    1a5c:	6004      	str	r4, [r0, #0]
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while (*pcString)
    1a5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1a62:	2c00      	cmp	r4, #0
    1a64:	d1f7      	bne.n	1a56 <am_hal_uart_string_transmit_polled+0x12>
        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    }
}
    1a66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a6a:	4770      	bx	lr

00001a6c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1a6c:	4b01      	ldr	r3, [pc, #4]	; (1a74 <am_hal_vcomp_disable+0x8>)
    1a6e:	2237      	movs	r2, #55	; 0x37
    1a70:	601a      	str	r2, [r3, #0]
    1a72:	4770      	bx	lr
    1a74:	4000c008 	.word	0x4000c008
    1a78:	69626d41 	.word	0x69626d41
    1a7c:	694d2071 	.word	0x694d2071
    1a80:	206f7263 	.word	0x206f7263
    1a84:	69727027 	.word	0x69727027
    1a88:	2027656d 	.word	0x2027656d
    1a8c:	6d617865 	.word	0x6d617865
    1a90:	2e656c70 	.word	0x2e656c70
    1a94:	00000a0a 	.word	0x00000a0a
    1a98:	64657355 	.word	0x64657355
    1a9c:	726f6620 	.word	0x726f6620
    1aa0:	61656d20 	.word	0x61656d20
    1aa4:	69727573 	.word	0x69727573
    1aa8:	7020676e 	.word	0x7020676e
    1aac:	7265776f 	.word	0x7265776f
    1ab0:	69687720 	.word	0x69687720
    1ab4:	6320656c 	.word	0x6320656c
    1ab8:	75706d6f 	.word	0x75706d6f
    1abc:	676e6974 	.word	0x676e6974
    1ac0:	65687420 	.word	0x65687420
    1ac4:	6d756e20 	.word	0x6d756e20
    1ac8:	20726562 	.word	0x20726562
    1acc:	7020666f 	.word	0x7020666f
    1ad0:	656d6972 	.word	0x656d6972
    1ad4:	6d756e20 	.word	0x6d756e20
    1ad8:	73726562 	.word	0x73726562
    1adc:	206e6920 	.word	0x206e6920
    1ae0:	61722061 	.word	0x61722061
    1ae4:	2e65676e 	.word	0x2e65676e
    1ae8:	0000000a 	.word	0x0000000a
    1aec:	20434347 	.word	0x20434347
    1af0:	2e332e35 	.word	0x2e332e35
    1af4:	30322031 	.word	0x30322031
    1af8:	33303631 	.word	0x33303631
    1afc:	28203730 	.word	0x28203730
    1b00:	656c6572 	.word	0x656c6572
    1b04:	29657361 	.word	0x29657361
    1b08:	52415b20 	.word	0x52415b20
    1b0c:	6d652f4d 	.word	0x6d652f4d
    1b10:	64646562 	.word	0x64646562
    1b14:	352d6465 	.word	0x352d6465
    1b18:	6172622d 	.word	0x6172622d
    1b1c:	2068636e 	.word	0x2068636e
    1b20:	69766572 	.word	0x69766572
    1b24:	6e6f6973 	.word	0x6e6f6973
    1b28:	34333220 	.word	0x34333220
    1b2c:	5d393835 	.word	0x5d393835
    1b30:	00000000 	.word	0x00000000
    1b34:	706d6f43 	.word	0x706d6f43
    1b38:	72656c69 	.word	0x72656c69
    1b3c:	7325203a 	.word	0x7325203a
    1b40:	0000000a 	.word	0x0000000a
    1b44:	73736150 	.word	0x73736150
    1b48:	756e203a 	.word	0x756e203a
    1b4c:	7265626d 	.word	0x7265626d
    1b50:	20666f20 	.word	0x20666f20
    1b54:	6d697270 	.word	0x6d697270
    1b58:	66207365 	.word	0x66207365
    1b5c:	2520726f 	.word	0x2520726f
    1b60:	73692064 	.word	0x73692064
    1b64:	2e642520 	.word	0x2e642520
    1b68:	0000000a 	.word	0x0000000a
    1b6c:	4f525245 	.word	0x4f525245
    1b70:	49203a52 	.word	0x49203a52
    1b74:	6c61766e 	.word	0x6c61766e
    1b78:	72206469 	.word	0x72206469
    1b7c:	6c757365 	.word	0x6c757365
    1b80:	45202e74 	.word	0x45202e74
    1b84:	63657078 	.word	0x63657078
    1b88:	20646574 	.word	0x20646574
    1b8c:	202c6425 	.word	0x202c6425
    1b90:	20746f67 	.word	0x20746f67
    1b94:	0a2e6425 	.word	0x0a2e6425
    1b98:	00000000 	.word	0x00000000
    1b9c:	0a0a0a0a 	.word	0x0a0a0a0a
    1ba0:	0a0a0a0a 	.word	0x0a0a0a0a
    1ba4:	0a0a0a0a 	.word	0x0a0a0a0a
    1ba8:	0a0a0a0a 	.word	0x0a0a0a0a
    1bac:	00000a0a 	.word	0x00000a0a

00001bb0 <am_hal_cachectrl_defaults>:
    1bb0:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1bc0:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1bd0:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1be0:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1bf0:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1c00:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    1c10:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    1c20:	206e6168 20656e6f 69726570 72656870     han one peripher
    1c30:	61206c61 20612074 656d6974 0000002e     al at a time....
    1c40:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    1c50:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    1c60:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    1c70:	61657267 20726574 6e616874 20726f20     greater than or 
    1c80:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    1c90:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    1ca0:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    1cb0:	20612065 54524155 646f6d20 20656c75     e a UART module 
    1cc0:	74616874 656f6420 74276e73 69786520     that doesn't exi
    1cd0:	00007473 69797254 7420676e 6e65206f     st..Trying to en
    1ce0:	656c6261 55206120 20545241 75646f6d     able a UART modu
    1cf0:	7420656c 20746168 73656f64 2074276e     le that doesn't 
    1d00:	73697865 00000074                       exist...
