
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\ios_fifo\atollic_gcc\bin\ios_fifo_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000098  10001000  000030f8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000780  10001098  00003190  00021098  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021098  2**0
                  CONTENTS, READONLY
  5 .debug_info   000070ab  00000000  00000000  000210cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d07  00000000  00000000  0002817a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000008f0  00000000  00000000  00029e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001138  00000000  00000000  0002a771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042b7  00000000  00000000  0002b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f7d  00000000  00000000  0002fb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00032add  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000195c  00000000  00000000  00032b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000447c  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 1d 08 00 00 85 08 00 00 8d 08 00 00     ................
      10:	8d 08 00 00 8d 08 00 00 8d 08 00 00 00 00 00 00     ................
	...
      2c:	95 08 00 00 95 08 00 00 00 00 00 00 95 08 00 00     ................
      3c:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      4c:	95 08 00 00 7d 05 00 00 09 05 00 00 95 08 00 00     ....}...........
      5c:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      6c:	95 08 00 00 95 08 00 00 61 01 00 00 95 08 00 00     ........a.......
      7c:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      8c:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      9c:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      ac:	95 08 00 00 95 08 00 00 95 08 00 00 95 08 00 00     ................
      bc:	95 08 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_ctimer_isr>:
};

// Timer Interrupt Service Routine (ISR)
void
am_ctimer_isr(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    ui32Status = am_hal_ctimer_int_status_get(false);
     166:	2000      	movs	r0, #0
     168:	f001 fcd4 	bl	1b14 <am_hal_ctimer_int_status_get>
     16c:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
     16e:	6878      	ldr	r0, [r7, #4]
     170:	f001 fcca 	bl	1b08 <am_hal_ctimer_int_clear>

    am_hal_ctimer_int_service(ui32Status);
     174:	6878      	ldr	r0, [r7, #4]
     176:	f001 fb47 	bl	1808 <am_hal_ctimer_int_service>
}
     17a:	bf00      	nop
     17c:	3708      	adds	r7, #8
     17e:	46bd      	mov	sp, r7
     180:	bd80      	pop	{r7, pc}
     182:	bf00      	nop

00000184 <timer0_handler>:

// Emulate Sensor0 New Data
void
timer0_handler(void)
{
     184:	b480      	push	{r7}
     186:	af00      	add	r7, sp, #0

    // Inform main loop of sensor 0 Data availability
    g_bSensor0Data = true;
     188:	4b03      	ldr	r3, [pc, #12]	; (198 <timer0_handler+0x14>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
}
     18e:	bf00      	nop
     190:	46bd      	mov	sp, r7
     192:	f85d 7b04 	ldr.w	r7, [sp], #4
     196:	4770      	bx	lr
     198:	100011b9 	.word	0x100011b9

0000019c <timer1_handler>:

// Emulate Sensor1 New Data
void
timer1_handler(void)
{
     19c:	b480      	push	{r7}
     19e:	af00      	add	r7, sp, #0
    // Inform main loop of sensor 1 Data availability
    g_bSensor1Data = true;
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <timer1_handler+0x14>)
     1a2:	2201      	movs	r2, #1
     1a4:	701a      	strb	r2, [r3, #0]
}
     1a6:	bf00      	nop
     1a8:	46bd      	mov	sp, r7
     1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     1ae:	4770      	bx	lr
     1b0:	100017bb 	.word	0x100017bb

000001b4 <stop_sensors>:

void
stop_sensors(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
    //
    // Stop timer A0
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
     1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1bc:	2000      	movs	r0, #0
     1be:	f001 fc27 	bl	1a10 <am_hal_ctimer_stop>
    //
    // Stop timer A1
    //
    am_hal_ctimer_stop(1, AM_HAL_CTIMER_TIMERA);
     1c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1c6:	2001      	movs	r0, #1
     1c8:	f001 fc22 	bl	1a10 <am_hal_ctimer_stop>
}
     1cc:	bf00      	nop
     1ce:	bd80      	pop	{r7, pc}

000001d0 <start_sensors>:

void
start_sensors(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
    stop_sensors(); // Just in case host died without sending STOP last time
     1d4:	f7ff ffee 	bl	1b4 <stop_sensors>
    // Initialize Data Buffer Index
    g_sendIdx = 0;
     1d8:	4b08      	ldr	r3, [pc, #32]	; (1fc <start_sensors+0x2c>)
     1da:	2200      	movs	r2, #0
     1dc:	601a      	str	r2, [r3, #0]
    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     1de:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1e2:	2000      	movs	r0, #0
     1e4:	f001 fbfa 	bl	19dc <am_hal_ctimer_start>
    //
    // Start timer A1
    //
    am_hal_ctimer_start(1, AM_HAL_CTIMER_TIMERA);
     1e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1ec:	2001      	movs	r0, #1
     1ee:	f001 fbf5 	bl	19dc <am_hal_ctimer_start>
    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     1f2:	4b03      	ldr	r3, [pc, #12]	; (200 <start_sensors+0x30>)
     1f4:	2200      	movs	r2, #0
     1f6:	701a      	strb	r2, [r3, #0]
}
     1f8:	bf00      	nop
     1fa:	bd80      	pop	{r7, pc}
     1fc:	10001098 	.word	0x10001098
     200:	100011b8 	.word	0x100011b8

00000204 <init_sensors>:

void
init_sensors(void)
{
     204:	b580      	push	{r7, lr}
     206:	b082      	sub	sp, #8
     208:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0 & A1.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     20a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     20e:	2000      	movs	r0, #0
     210:	f001 fc12 	bl	1a38 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer);
     214:	491f      	ldr	r1, [pc, #124]	; (294 <init_sensors+0x90>)
     216:	2000      	movs	r0, #0
     218:	f001 fb70 	bl	18fc <am_hal_ctimer_config>
    am_hal_ctimer_clear(1, AM_HAL_CTIMER_TIMERA);
     21c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     220:	2001      	movs	r0, #1
     222:	f001 fc09 	bl	1a38 <am_hal_ctimer_clear>
    am_hal_ctimer_config(1, &g_sTimer);
     226:	491b      	ldr	r1, [pc, #108]	; (294 <init_sensors+0x90>)
     228:	2001      	movs	r0, #1
     22a:	f001 fb67 	bl	18fc <am_hal_ctimer_config>

    //
    // Set up timerA0 for Sensor 0 Freq
    //
    ui32Period = 12000 / SENSOR0_FREQ ;
     22e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     232:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     234:	687b      	ldr	r3, [r7, #4]
     236:	085b      	lsrs	r3, r3, #1
     238:	687a      	ldr	r2, [r7, #4]
     23a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     23e:	2000      	movs	r0, #0
     240:	f001 fc0e 	bl	1a60 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));
    //
    // Set up timerA1 for Sensor 1 Freq
    //
    ui32Period = 12000 / SENSOR1_FREQ ;
     244:	f240 63b2 	movw	r3, #1714	; 0x6b2
     248:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(1, AM_HAL_CTIMER_TIMERA, ui32Period,
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	085b      	lsrs	r3, r3, #1
     24e:	687a      	ldr	r2, [r7, #4]
     250:	f64f 71ff 	movw	r1, #65535	; 0xffff
     254:	2001      	movs	r0, #1
     256:	f001 fc03 	bl	1a60 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     25a:	2001      	movs	r0, #1
     25c:	f001 fc54 	bl	1b08 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA1);
     260:	2004      	movs	r0, #4
     262:	f001 fc51 	bl	1b08 <am_hal_ctimer_int_clear>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0,
     266:	490c      	ldr	r1, [pc, #48]	; (298 <init_sensors+0x94>)
     268:	2001      	movs	r0, #1
     26a:	f001 fae5 	bl	1838 <am_hal_ctimer_int_register>
                               timer0_handler);
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA1,
     26e:	490b      	ldr	r1, [pc, #44]	; (29c <init_sensors+0x98>)
     270:	2004      	movs	r0, #4
     272:	f001 fae1 	bl	1838 <am_hal_ctimer_int_register>
                               timer1_handler);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     276:	2001      	movs	r0, #1
     278:	f001 fc36 	bl	1ae8 <am_hal_ctimer_int_enable>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA1);
     27c:	2004      	movs	r0, #4
     27e:	f001 fc33 	bl	1ae8 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     282:	201d      	movs	r0, #29
     284:	f001 fc66 	bl	1b54 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     288:	f001 fc8c 	bl	1ba4 <am_hal_interrupt_master_enable>
}
     28c:	bf00      	nop
     28e:	3708      	adds	r7, #8
     290:	46bd      	mov	sp, r7
     292:	bd80      	pop	{r7, pc}
     294:	10001030 	.word	0x10001030
     298:	00000185 	.word	0x00000185
     29c:	0000019d 	.word	0x0000019d

000002a0 <ios_set_up>:
// Configure the SPI slave.
//
//*****************************************************************************
static void
ios_set_up(bool bSpi)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b08a      	sub	sp, #40	; 0x28
     2a4:	af00      	add	r7, sp, #0
     2a6:	4603      	mov	r3, r0
     2a8:	71fb      	strb	r3, [r7, #7]
    if (bSpi)
     2aa:	79fb      	ldrb	r3, [r7, #7]
     2ac:	2b00      	cmp	r3, #0
     2ae:	f000 8088 	beq.w	3c2 <ios_set_up+0x122>
    {
        // Configure SPI interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCK, AM_BSP_GPIO_CFG_IOS_SCK);
     2b2:	f3ef 8310 	mrs	r3, PRIMASK
     2b6:	627b      	str	r3, [r7, #36]	; 0x24
     2b8:	b672      	cpsid	i
     2ba:	4b85      	ldr	r3, [pc, #532]	; (4d0 <ios_set_up+0x230>)
     2bc:	2273      	movs	r2, #115	; 0x73
     2be:	601a      	str	r2, [r3, #0]
     2c0:	4a84      	ldr	r2, [pc, #528]	; (4d4 <ios_set_up+0x234>)
     2c2:	4b84      	ldr	r3, [pc, #528]	; (4d4 <ios_set_up+0x234>)
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	f023 0307 	bic.w	r3, r3, #7
     2ca:	6013      	str	r3, [r2, #0]
     2cc:	4a82      	ldr	r2, [pc, #520]	; (4d8 <ios_set_up+0x238>)
     2ce:	4b82      	ldr	r3, [pc, #520]	; (4d8 <ios_set_up+0x238>)
     2d0:	681b      	ldr	r3, [r3, #0]
     2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2d6:	f043 030a 	orr.w	r3, r3, #10
     2da:	6013      	str	r3, [r2, #0]
     2dc:	4a7f      	ldr	r2, [pc, #508]	; (4dc <ios_set_up+0x23c>)
     2de:	4b7f      	ldr	r3, [pc, #508]	; (4dc <ios_set_up+0x23c>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2e6:	6013      	str	r3, [r2, #0]
     2e8:	4b79      	ldr	r3, [pc, #484]	; (4d0 <ios_set_up+0x230>)
     2ea:	2200      	movs	r2, #0
     2ec:	601a      	str	r2, [r3, #0]
     2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     2f0:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MISO, AM_BSP_GPIO_CFG_IOS_MISO);
     2f4:	f3ef 8310 	mrs	r3, PRIMASK
     2f8:	623b      	str	r3, [r7, #32]
     2fa:	b672      	cpsid	i
     2fc:	4b74      	ldr	r3, [pc, #464]	; (4d0 <ios_set_up+0x230>)
     2fe:	2273      	movs	r2, #115	; 0x73
     300:	601a      	str	r2, [r3, #0]
     302:	4a74      	ldr	r2, [pc, #464]	; (4d4 <ios_set_up+0x234>)
     304:	4b73      	ldr	r3, [pc, #460]	; (4d4 <ios_set_up+0x234>)
     306:	681b      	ldr	r3, [r3, #0]
     308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     30c:	6013      	str	r3, [r2, #0]
     30e:	4a72      	ldr	r2, [pc, #456]	; (4d8 <ios_set_up+0x238>)
     310:	4b71      	ldr	r3, [pc, #452]	; (4d8 <ios_set_up+0x238>)
     312:	681b      	ldr	r3, [r3, #0]
     314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     31c:	6013      	str	r3, [r2, #0]
     31e:	4a6f      	ldr	r2, [pc, #444]	; (4dc <ios_set_up+0x23c>)
     320:	4b6e      	ldr	r3, [pc, #440]	; (4dc <ios_set_up+0x23c>)
     322:	681b      	ldr	r3, [r3, #0]
     324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     328:	6013      	str	r3, [r2, #0]
     32a:	4b69      	ldr	r3, [pc, #420]	; (4d0 <ios_set_up+0x230>)
     32c:	2200      	movs	r2, #0
     32e:	601a      	str	r2, [r3, #0]
     330:	6a3b      	ldr	r3, [r7, #32]
     332:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MOSI, AM_BSP_GPIO_CFG_IOS_MOSI);
     336:	f3ef 8310 	mrs	r3, PRIMASK
     33a:	61fb      	str	r3, [r7, #28]
     33c:	b672      	cpsid	i
     33e:	4b64      	ldr	r3, [pc, #400]	; (4d0 <ios_set_up+0x230>)
     340:	2273      	movs	r2, #115	; 0x73
     342:	601a      	str	r2, [r3, #0]
     344:	4a63      	ldr	r2, [pc, #396]	; (4d4 <ios_set_up+0x234>)
     346:	4b63      	ldr	r3, [pc, #396]	; (4d4 <ios_set_up+0x234>)
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     34e:	6013      	str	r3, [r2, #0]
     350:	4a61      	ldr	r2, [pc, #388]	; (4d8 <ios_set_up+0x238>)
     352:	4b61      	ldr	r3, [pc, #388]	; (4d8 <ios_set_up+0x238>)
     354:	681b      	ldr	r3, [r3, #0]
     356:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     35a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     35e:	6013      	str	r3, [r2, #0]
     360:	4a5e      	ldr	r2, [pc, #376]	; (4dc <ios_set_up+0x23c>)
     362:	4b5e      	ldr	r3, [pc, #376]	; (4dc <ios_set_up+0x23c>)
     364:	681b      	ldr	r3, [r3, #0]
     366:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     36a:	6013      	str	r3, [r2, #0]
     36c:	4b58      	ldr	r3, [pc, #352]	; (4d0 <ios_set_up+0x230>)
     36e:	2200      	movs	r2, #0
     370:	601a      	str	r2, [r3, #0]
     372:	69fb      	ldr	r3, [r7, #28]
     374:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_nCE, AM_BSP_GPIO_CFG_IOS_nCE);
     378:	f3ef 8310 	mrs	r3, PRIMASK
     37c:	61bb      	str	r3, [r7, #24]
     37e:	b672      	cpsid	i
     380:	4b53      	ldr	r3, [pc, #332]	; (4d0 <ios_set_up+0x230>)
     382:	2273      	movs	r2, #115	; 0x73
     384:	601a      	str	r2, [r3, #0]
     386:	4a53      	ldr	r2, [pc, #332]	; (4d4 <ios_set_up+0x234>)
     388:	4b52      	ldr	r3, [pc, #328]	; (4d4 <ios_set_up+0x234>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     390:	6013      	str	r3, [r2, #0]
     392:	4a51      	ldr	r2, [pc, #324]	; (4d8 <ios_set_up+0x238>)
     394:	4b50      	ldr	r3, [pc, #320]	; (4d8 <ios_set_up+0x238>)
     396:	681b      	ldr	r3, [r3, #0]
     398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     39c:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
     3a0:	6013      	str	r3, [r2, #0]
     3a2:	4a4e      	ldr	r2, [pc, #312]	; (4dc <ios_set_up+0x23c>)
     3a4:	4b4d      	ldr	r3, [pc, #308]	; (4dc <ios_set_up+0x23c>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3ac:	6013      	str	r3, [r2, #0]
     3ae:	4b48      	ldr	r3, [pc, #288]	; (4d0 <ios_set_up+0x230>)
     3b0:	2200      	movs	r2, #0
     3b2:	601a      	str	r2, [r3, #0]
     3b4:	69bb      	ldr	r3, [r7, #24]
     3b6:	f383 8810 	msr	PRIMASK, r3
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSSpiConfig);
     3ba:	4849      	ldr	r0, [pc, #292]	; (4e0 <ios_set_up+0x240>)
     3bc:	f001 fc0c 	bl	1bd8 <am_hal_ios_config>
     3c0:	e046      	b.n	450 <ios_set_up+0x1b0>
    }
    else
    {
        // Configure I2C interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCL, AM_BSP_GPIO_CFG_IOS_SCL);
     3c2:	f3ef 8310 	mrs	r3, PRIMASK
     3c6:	617b      	str	r3, [r7, #20]
     3c8:	b672      	cpsid	i
     3ca:	4b41      	ldr	r3, [pc, #260]	; (4d0 <ios_set_up+0x230>)
     3cc:	2273      	movs	r2, #115	; 0x73
     3ce:	601a      	str	r2, [r3, #0]
     3d0:	4a40      	ldr	r2, [pc, #256]	; (4d4 <ios_set_up+0x234>)
     3d2:	4b40      	ldr	r3, [pc, #256]	; (4d4 <ios_set_up+0x234>)
     3d4:	681b      	ldr	r3, [r3, #0]
     3d6:	f023 0307 	bic.w	r3, r3, #7
     3da:	6013      	str	r3, [r2, #0]
     3dc:	4a3e      	ldr	r2, [pc, #248]	; (4d8 <ios_set_up+0x238>)
     3de:	4b3e      	ldr	r3, [pc, #248]	; (4d8 <ios_set_up+0x238>)
     3e0:	681b      	ldr	r3, [r3, #0]
     3e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     3e6:	f043 0302 	orr.w	r3, r3, #2
     3ea:	6013      	str	r3, [r2, #0]
     3ec:	4a3b      	ldr	r2, [pc, #236]	; (4dc <ios_set_up+0x23c>)
     3ee:	4b3b      	ldr	r3, [pc, #236]	; (4dc <ios_set_up+0x23c>)
     3f0:	681b      	ldr	r3, [r3, #0]
     3f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     3f6:	6013      	str	r3, [r2, #0]
     3f8:	4b35      	ldr	r3, [pc, #212]	; (4d0 <ios_set_up+0x230>)
     3fa:	2200      	movs	r2, #0
     3fc:	601a      	str	r2, [r3, #0]
     3fe:	697b      	ldr	r3, [r7, #20]
     400:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SDA, AM_BSP_GPIO_CFG_IOS_SDA);
     404:	f3ef 8310 	mrs	r3, PRIMASK
     408:	613b      	str	r3, [r7, #16]
     40a:	b672      	cpsid	i
     40c:	4b30      	ldr	r3, [pc, #192]	; (4d0 <ios_set_up+0x230>)
     40e:	2273      	movs	r2, #115	; 0x73
     410:	601a      	str	r2, [r3, #0]
     412:	4a30      	ldr	r2, [pc, #192]	; (4d4 <ios_set_up+0x234>)
     414:	4b2f      	ldr	r3, [pc, #188]	; (4d4 <ios_set_up+0x234>)
     416:	681b      	ldr	r3, [r3, #0]
     418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     420:	6013      	str	r3, [r2, #0]
     422:	4a2d      	ldr	r2, [pc, #180]	; (4d8 <ios_set_up+0x238>)
     424:	4b2c      	ldr	r3, [pc, #176]	; (4d8 <ios_set_up+0x238>)
     426:	681b      	ldr	r3, [r3, #0]
     428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     42c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     430:	6013      	str	r3, [r2, #0]
     432:	4a2a      	ldr	r2, [pc, #168]	; (4dc <ios_set_up+0x23c>)
     434:	4b29      	ldr	r3, [pc, #164]	; (4dc <ios_set_up+0x23c>)
     436:	681b      	ldr	r3, [r3, #0]
     438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     43c:	6013      	str	r3, [r2, #0]
     43e:	4b24      	ldr	r3, [pc, #144]	; (4d0 <ios_set_up+0x230>)
     440:	2200      	movs	r2, #0
     442:	601a      	str	r2, [r3, #0]
     444:	693b      	ldr	r3, [r7, #16]
     446:	f383 8810 	msr	PRIMASK, r3
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSI2cConfig);
     44a:	4826      	ldr	r0, [pc, #152]	; (4e4 <ios_set_up+0x244>)
     44c:	f001 fbc4 	bl	1bd8 <am_hal_ios_config>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     450:	f04f 30ff 	mov.w	r0, #4294967295
     454:	f001 fc20 	bl	1c98 <am_hal_ios_access_int_clear>
    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     458:	f04f 30ff 	mov.w	r0, #4294967295
     45c:	f001 fc38 	bl	1cd0 <am_hal_ios_int_clear>
    am_hal_ios_access_int_enable(AM_HAL_IOS_ACCESS_INT_00);
     460:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     464:	f001 fc10 	bl	1c88 <am_hal_ios_access_int_enable>
    am_hal_ios_int_enable(AM_HAL_IOS_INT_ERR | AM_HAL_IOS_INT_FSIZE);
     468:	200f      	movs	r0, #15
     46a:	f001 fc29 	bl	1cc0 <am_hal_ios_int_enable>

    // Preparation of FIFO
    am_hal_ios_fifo_buffer_init( &g_pui8TxFifoBuffer[0], AM_IOS_TX_BUFSIZE_MAX);
     46e:	f240 31ff 	movw	r1, #1023	; 0x3ff
     472:	481d      	ldr	r0, [pc, #116]	; (4e8 <ios_set_up+0x248>)
     474:	f002 f9c6 	bl	2804 <am_hal_ios_fifo_buffer_init>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     478:	2015      	movs	r0, #21
     47a:	f001 fb6b 	bl	1b54 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);
     47e:	2014      	movs	r0, #20
     480:	f001 fb68 	bl	1b54 <am_hal_interrupt_enable>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_INT, AM_BSP_GPIO_CFG_IOS_INT);
     484:	f3ef 8310 	mrs	r3, PRIMASK
     488:	60fb      	str	r3, [r7, #12]
     48a:	b672      	cpsid	i
     48c:	4b10      	ldr	r3, [pc, #64]	; (4d0 <ios_set_up+0x230>)
     48e:	2273      	movs	r2, #115	; 0x73
     490:	601a      	str	r2, [r3, #0]
     492:	4a10      	ldr	r2, [pc, #64]	; (4d4 <ios_set_up+0x234>)
     494:	4b0f      	ldr	r3, [pc, #60]	; (4d4 <ios_set_up+0x234>)
     496:	681b      	ldr	r3, [r3, #0]
     498:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     49c:	6013      	str	r3, [r2, #0]
     49e:	4a13      	ldr	r2, [pc, #76]	; (4ec <ios_set_up+0x24c>)
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <ios_set_up+0x24c>)
     4a2:	681b      	ldr	r3, [r3, #0]
     4a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     4a8:	f043 0308 	orr.w	r3, r3, #8
     4ac:	6013      	str	r3, [r2, #0]
     4ae:	4a10      	ldr	r2, [pc, #64]	; (4f0 <ios_set_up+0x250>)
     4b0:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <ios_set_up+0x250>)
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     4b8:	6013      	str	r3, [r2, #0]
     4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <ios_set_up+0x230>)
     4bc:	2200      	movs	r2, #0
     4be:	601a      	str	r2, [r3, #0]
     4c0:	68fb      	ldr	r3, [r7, #12]
     4c2:	f383 8810 	msr	PRIMASK, r3

}
     4c6:	bf00      	nop
     4c8:	3728      	adds	r7, #40	; 0x28
     4ca:	46bd      	mov	sp, r7
     4cc:	bd80      	pop	{r7, pc}
     4ce:	bf00      	nop
     4d0:	40010060 	.word	0x40010060
     4d4:	40010040 	.word	0x40010040
     4d8:	40010000 	.word	0x40010000
     4dc:	400100e0 	.word	0x400100e0
     4e0:	10001000 	.word	0x10001000
     4e4:	10001018 	.word	0x10001018
     4e8:	100013bc 	.word	0x100013bc
     4ec:	40010004 	.word	0x40010004
     4f0:	400100e4 	.word	0x400100e4

000004f4 <inform_host>:

// Inform host of new data available to read
void
inform_host(void)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	af00      	add	r7, sp, #0
    // Update FIFOCTR for host to read
    am_hal_ios_update_fifoctr();
     4f8:	f002 f9c0 	bl	287c <am_hal_ios_update_fifoctr>
    // Interrupt the host
    am_hal_ios_host_int_set(AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK);
     4fc:	2001      	movs	r0, #1
     4fe:	f001 fbbd 	bl	1c7c <am_hal_ios_host_int_set>
}
     502:	bf00      	nop
     504:	bd80      	pop	{r7, pc}
     506:	bf00      	nop

00000508 <am_ioslave_acc_isr>:
// IO Slave Register Access ISR.
//
//*****************************************************************************
void
am_ioslave_acc_isr(void)
{
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0

    //
    // Set up a pointer for writing 32-bit aligned packets through the IO slave
    // interface.
    //
    pui8Packet = (uint8_t *) am_hal_ios_pui8LRAM;
     50e:	4b19      	ldr	r3, [pc, #100]	; (574 <am_ioslave_acc_isr+0x6c>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	607b      	str	r3, [r7, #4]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_access_int_status_get(false);
     514:	2000      	movs	r0, #0
     516:	f001 fbc5 	bl	1ca4 <am_hal_ios_access_int_status_get>
     51a:	6038      	str	r0, [r7, #0]
    am_hal_ios_access_int_clear(ui32Status);
     51c:	6838      	ldr	r0, [r7, #0]
     51e:	f001 fbbb 	bl	1c98 <am_hal_ios_access_int_clear>

    if ( ui32Status & AM_HAL_IOS_ACCESS_INT_00 )
     522:	683b      	ldr	r3, [r7, #0]
     524:	2b00      	cmp	r3, #0
     526:	da20      	bge.n	56a <am_ioslave_acc_isr+0x62>
    {
        // Received command from Host
        // Figure out what to do next based on the command.
        //
        switch(pui8Packet[0])
     528:	687b      	ldr	r3, [r7, #4]
     52a:	781b      	ldrb	r3, [r3, #0]
     52c:	2b01      	cmp	r3, #1
     52e:	d007      	beq.n	540 <am_ioslave_acc_isr+0x38>
     530:	2b02      	cmp	r3, #2
     532:	d00b      	beq.n	54c <am_ioslave_acc_isr+0x44>
     534:	2b00      	cmp	r3, #0
     536:	d000      	beq.n	53a <am_ioslave_acc_isr+0x32>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
                }
                break;

            default:
                break;
     538:	e017      	b.n	56a <am_ioslave_acc_isr+0x62>
        switch(pui8Packet[0])
        {
            case AM_IOSTEST_CMD_START_DATA:
                // Host wants to start data exchange
                // Start the Sensor Emulation
                start_sensors();
     53a:	f7ff fe49 	bl	1d0 <start_sensors>
                break;
     53e:	e014      	b.n	56a <am_ioslave_acc_isr+0x62>

            case AM_IOSTEST_CMD_STOP_DATA:
                // Host no longer interested in data from us
                // Stop the Sensor emulation
                stop_sensors();
     540:	f7ff fe38 	bl	1b4 <stop_sensors>
                g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <am_ioslave_acc_isr+0x70>)
     546:	2200      	movs	r2, #0
     548:	701a      	strb	r2, [r3, #0]
                break;
     54a:	e00e      	b.n	56a <am_ioslave_acc_isr+0x62>

            case AM_IOSTEST_CMD_ACK_DATA:
                // Host done reading the last block signalled
                // Check if any more data available
                if (am_hal_ios_fifo_space_used())
     54c:	f001 fbd4 	bl	1cf8 <am_hal_ios_fifo_space_used>
     550:	4603      	mov	r3, r0
     552:	2b00      	cmp	r3, #0
     554:	d005      	beq.n	562 <am_ioslave_acc_isr+0x5a>
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <am_ioslave_acc_isr+0x70>)
     558:	2201      	movs	r2, #1
     55a:	701a      	strb	r2, [r3, #0]
                    inform_host();
     55c:	f7ff ffca 	bl	4f4 <inform_host>
                }
                else
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
                }
                break;
     560:	e002      	b.n	568 <am_ioslave_acc_isr+0x60>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
                    inform_host();
                }
                else
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     562:	4b05      	ldr	r3, [pc, #20]	; (578 <am_ioslave_acc_isr+0x70>)
     564:	2200      	movs	r2, #0
     566:	701a      	strb	r2, [r3, #0]
                }
                break;
     568:	bf00      	nop

            default:
                break;
        }
    }
}
     56a:	bf00      	nop
     56c:	3708      	adds	r7, #8
     56e:	46bd      	mov	sp, r7
     570:	bd80      	pop	{r7, pc}
     572:	bf00      	nop
     574:	000030a8 	.word	0x000030a8
     578:	100011b8 	.word	0x100011b8

0000057c <am_ioslave_ios_isr>:
// IO Slave Main ISR.
//
//*****************************************************************************
void
am_ioslave_ios_isr(void)
{
     57c:	b580      	push	{r7, lr}
     57e:	b082      	sub	sp, #8
     580:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_int_status_get(false);
     582:	2000      	movs	r0, #0
     584:	f001 fbaa 	bl	1cdc <am_hal_ios_int_status_get>
     588:	6078      	str	r0, [r7, #4]
    am_hal_ios_int_clear(ui32Status);
     58a:	6878      	ldr	r0, [r7, #4]
     58c:	f001 fba0 	bl	1cd0 <am_hal_ios_int_clear>

    if (ui32Status & AM_HAL_IOS_INT_FUNDFL)
     590:	687b      	ldr	r3, [r7, #4]
     592:	f003 0304 	and.w	r3, r3, #4
     596:	2b00      	cmp	r3, #0
     598:	d008      	beq.n	5ac <am_ioslave_ios_isr+0x30>
    {
        am_util_stdio_printf("Hitting underflow for the requested IOS FIFO transfer\n");
     59a:	4810      	ldr	r0, [pc, #64]	; (5dc <am_ioslave_ios_isr+0x60>)
     59c:	f000 fff0 	bl	1580 <am_util_stdio_printf>
        // We should never hit this case unless the threshold has beeen set
        // incorrect, or we are unable to handle the data rate
        // ERROR!
        am_hal_debug_assert_msg(0,
     5a0:	4a0f      	ldr	r2, [pc, #60]	; (5e0 <am_ioslave_ios_isr+0x64>)
     5a2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
     5a6:	480f      	ldr	r0, [pc, #60]	; (5e4 <am_ioslave_ios_isr+0x68>)
     5a8:	f001 facc 	bl	1b44 <am_hal_debug_error>
            "Hitting underflow for the requested IOS FIFO transfer.");
    }

    if (ui32Status & AM_HAL_IOS_INT_ERR)
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	f003 030e 	and.w	r3, r3, #14
     5b2:	2b00      	cmp	r3, #0
     5b4:	d005      	beq.n	5c2 <am_ioslave_ios_isr+0x46>
    {
        // We should never hit this case
        // ERROR!
        am_hal_debug_assert_msg(0,
     5b6:	4a0c      	ldr	r2, [pc, #48]	; (5e8 <am_ioslave_ios_isr+0x6c>)
     5b8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
     5bc:	4809      	ldr	r0, [pc, #36]	; (5e4 <am_ioslave_ios_isr+0x68>)
     5be:	f001 fac1 	bl	1b44 <am_hal_debug_error>
            "Hitting ERROR case.");
    }

    if (ui32Status & AM_HAL_IOS_INT_FSIZE)
     5c2:	687b      	ldr	r3, [r7, #4]
     5c4:	f003 0301 	and.w	r3, r3, #1
     5c8:	2b00      	cmp	r3, #0
     5ca:	d002      	beq.n	5d2 <am_ioslave_ios_isr+0x56>
    {
        //
        // Service the I2C slave FIFO if necessary.
        //
        am_hal_ios_fifo_service(ui32Status);
     5cc:	6878      	ldr	r0, [r7, #4]
     5ce:	f001 fba5 	bl	1d1c <am_hal_ios_fifo_service>
    }
}
     5d2:	bf00      	nop
     5d4:	3708      	adds	r7, #8
     5d6:	46bd      	mov	sp, r7
     5d8:	bd80      	pop	{r7, pc}
     5da:	bf00      	nop
     5dc:	00002edc 	.word	0x00002edc
     5e0:	00002f14 	.word	0x00002f14
     5e4:	00002f4c 	.word	0x00002f4c
     5e8:	00002f64 	.word	0x00002f64

000005ec <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b082      	sub	sp, #8
     5f0:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     5f2:	4817      	ldr	r0, [pc, #92]	; (650 <itm_start+0x64>)
     5f4:	f000 f952 	bl	89c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     5f8:	f3ef 8310 	mrs	r3, PRIMASK
     5fc:	607b      	str	r3, [r7, #4]
     5fe:	b672      	cpsid	i
     600:	4b14      	ldr	r3, [pc, #80]	; (654 <itm_start+0x68>)
     602:	2273      	movs	r2, #115	; 0x73
     604:	601a      	str	r2, [r3, #0]
     606:	4a14      	ldr	r2, [pc, #80]	; (658 <itm_start+0x6c>)
     608:	4b13      	ldr	r3, [pc, #76]	; (658 <itm_start+0x6c>)
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     610:	6013      	str	r3, [r2, #0]
     612:	4a12      	ldr	r2, [pc, #72]	; (65c <itm_start+0x70>)
     614:	4b11      	ldr	r3, [pc, #68]	; (65c <itm_start+0x70>)
     616:	681b      	ldr	r3, [r3, #0]
     618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     61c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     620:	6013      	str	r3, [r2, #0]
     622:	4a0f      	ldr	r2, [pc, #60]	; (660 <itm_start+0x74>)
     624:	4b0e      	ldr	r3, [pc, #56]	; (660 <itm_start+0x74>)
     626:	681b      	ldr	r3, [r3, #0]
     628:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     62c:	6013      	str	r3, [r2, #0]
     62e:	4b09      	ldr	r3, [pc, #36]	; (654 <itm_start+0x68>)
     630:	2200      	movs	r2, #0
     632:	601a      	str	r2, [r3, #0]
     634:	687b      	ldr	r3, [r7, #4]
     636:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     63a:	f002 f933 	bl	28a4 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     63e:	f000 ffd9 	bl	15f4 <am_bsp_debug_printf_enable>
    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     642:	f000 ffbb 	bl	15bc <am_util_stdio_terminal_clear>
}
     646:	bf00      	nop
     648:	3708      	adds	r7, #8
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}
     64e:	bf00      	nop
     650:	00001675 	.word	0x00001675
     654:	40010060 	.word	0x40010060
     658:	40010054 	.word	0x40010054
     65c:	40010028 	.word	0x40010028
     660:	40010108 	.word	0x40010108

00000664 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
    int i;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     66a:	2000      	movs	r0, #0
     66c:	f001 f89a 	bl	17a4 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     670:	4864      	ldr	r0, [pc, #400]	; (804 <main+0x1a0>)
     672:	f001 f801 	bl	1678 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     676:	f000 ffab 	bl	15d0 <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     67a:	f7ff ffb7 	bl	5ec <itm_start>
    am_hal_gpio_out_bit_clear(43);
    am_hal_gpio_pin_config(43, AM_HAL_GPIO_OUTPUT);
#endif

    // Initialize Test Data
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     67e:	2300      	movs	r3, #0
     680:	60fb      	str	r3, [r7, #12]
     682:	e009      	b.n	698 <main+0x34>
    {
        g_pui8TestBuf[i] = (i & 0xFF) ^ XOR_BYTE;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	b2d9      	uxtb	r1, r3
     688:	4a5f      	ldr	r2, [pc, #380]	; (808 <main+0x1a4>)
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	4413      	add	r3, r2
     68e:	460a      	mov	r2, r1
     690:	701a      	strb	r2, [r3, #0]
    am_hal_gpio_out_bit_clear(43);
    am_hal_gpio_pin_config(43, AM_HAL_GPIO_OUTPUT);
#endif

    // Initialize Test Data
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     692:	68fb      	ldr	r3, [r7, #12]
     694:	3301      	adds	r3, #1
     696:	60fb      	str	r3, [r7, #12]
     698:	68fb      	ldr	r3, [r7, #12]
     69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     69e:	dbf1      	blt.n	684 <main+0x20>
    {
        g_pui8TestBuf[i] = (i & 0xFF) ^ XOR_BYTE;
    }

    init_sensors();
     6a0:	f7ff fdb0 	bl	204 <init_sensors>
    //
    // Enable the IOS. Choose the correct protocol based on USE_SPI
    //
    ios_set_up(USE_SPI);
     6a4:	2001      	movs	r0, #1
     6a6:	f7ff fdfb 	bl	2a0 <ios_set_up>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
     6aa:	f001 fa7b 	bl	1ba4 <am_hal_interrupt_master_enable>
    //
    // Loop forever.
    //
    while(1)
    {
        uint32_t numWritten = 0;
     6ae:	2300      	movs	r3, #0
     6b0:	60bb      	str	r3, [r7, #8]
        uint32_t chunk1;
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     6b2:	f001 fa7b 	bl	1bac <am_hal_interrupt_master_disable>
     6b6:	6078      	str	r0, [r7, #4]
        if (g_bSensor0Data || g_bSensor1Data)
     6b8:	4b54      	ldr	r3, [pc, #336]	; (80c <main+0x1a8>)
     6ba:	781b      	ldrb	r3, [r3, #0]
     6bc:	b2db      	uxtb	r3, r3
     6be:	2b00      	cmp	r3, #0
     6c0:	d105      	bne.n	6ce <main+0x6a>
     6c2:	4b53      	ldr	r3, [pc, #332]	; (810 <main+0x1ac>)
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	b2db      	uxtb	r3, r3
     6c8:	2b00      	cmp	r3, #0
     6ca:	f000 8091 	beq.w	7f0 <main+0x18c>
        {
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     6ce:	6878      	ldr	r0, [r7, #4]
     6d0:	f001 fa70 	bl	1bb4 <am_hal_interrupt_master_set>
            if (g_bSensor0Data)
     6d4:	4b4d      	ldr	r3, [pc, #308]	; (80c <main+0x1a8>)
     6d6:	781b      	ldrb	r3, [r3, #0]
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d038      	beq.n	750 <main+0xec>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     6de:	4b4d      	ldr	r3, [pc, #308]	; (814 <main+0x1b0>)
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     6e6:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR0_DATA_SIZE)
     6e8:	683b      	ldr	r3, [r7, #0]
     6ea:	2bc8      	cmp	r3, #200	; 0xc8
     6ec:	d909      	bls.n	702 <main+0x9e>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR0_DATA_SIZE);
     6ee:	4b49      	ldr	r3, [pc, #292]	; (814 <main+0x1b0>)
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	4a45      	ldr	r2, [pc, #276]	; (808 <main+0x1a4>)
     6f4:	4413      	add	r3, r2
     6f6:	21c8      	movs	r1, #200	; 0xc8
     6f8:	4618      	mov	r0, r3
     6fa:	f001 fe1f 	bl	233c <am_hal_ios_fifo_write>
     6fe:	60b8      	str	r0, [r7, #8]
     700:	e017      	b.n	732 <main+0xce>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     702:	4b44      	ldr	r3, [pc, #272]	; (814 <main+0x1b0>)
     704:	681b      	ldr	r3, [r3, #0]
     706:	4a40      	ldr	r2, [pc, #256]	; (808 <main+0x1a4>)
     708:	4413      	add	r3, r2
     70a:	6839      	ldr	r1, [r7, #0]
     70c:	4618      	mov	r0, r3
     70e:	f001 fe15 	bl	233c <am_hal_ios_fifo_write>
     712:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     714:	68ba      	ldr	r2, [r7, #8]
     716:	683b      	ldr	r3, [r7, #0]
     718:	429a      	cmp	r2, r3
     71a:	d10a      	bne.n	732 <main+0xce>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR0_DATA_SIZE - chunk1);
     71c:	683b      	ldr	r3, [r7, #0]
     71e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
     722:	4619      	mov	r1, r3
     724:	4838      	ldr	r0, [pc, #224]	; (808 <main+0x1a4>)
     726:	f001 fe09 	bl	233c <am_hal_ios_fifo_write>
     72a:	4602      	mov	r2, r0
     72c:	68bb      	ldr	r3, [r7, #8]
     72e:	4413      	add	r3, r2
     730:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     732:	4b38      	ldr	r3, [pc, #224]	; (814 <main+0x1b0>)
     734:	681a      	ldr	r2, [r3, #0]
     736:	68bb      	ldr	r3, [r7, #8]
     738:	4413      	add	r3, r2
     73a:	4a36      	ldr	r2, [pc, #216]	; (814 <main+0x1b0>)
     73c:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     73e:	4b35      	ldr	r3, [pc, #212]	; (814 <main+0x1b0>)
     740:	681b      	ldr	r3, [r3, #0]
     742:	f3c3 0308 	ubfx	r3, r3, #0, #9
     746:	4a33      	ldr	r2, [pc, #204]	; (814 <main+0x1b0>)
     748:	6013      	str	r3, [r2, #0]
                g_bSensor0Data = false;
     74a:	4b30      	ldr	r3, [pc, #192]	; (80c <main+0x1a8>)
     74c:	2200      	movs	r2, #0
     74e:	701a      	strb	r2, [r3, #0]
            }
            if (g_bSensor1Data)
     750:	4b2f      	ldr	r3, [pc, #188]	; (810 <main+0x1ac>)
     752:	781b      	ldrb	r3, [r3, #0]
     754:	b2db      	uxtb	r3, r3
     756:	2b00      	cmp	r3, #0
     758:	d03a      	beq.n	7d0 <main+0x16c>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     75a:	4b2e      	ldr	r3, [pc, #184]	; (814 <main+0x1b0>)
     75c:	681b      	ldr	r3, [r3, #0]
     75e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     762:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR1_DATA_SIZE)
     764:	683b      	ldr	r3, [r7, #0]
     766:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     76a:	d90a      	bls.n	782 <main+0x11e>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR1_DATA_SIZE);
     76c:	4b29      	ldr	r3, [pc, #164]	; (814 <main+0x1b0>)
     76e:	681b      	ldr	r3, [r3, #0]
     770:	4a25      	ldr	r2, [pc, #148]	; (808 <main+0x1a4>)
     772:	4413      	add	r3, r2
     774:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     778:	4618      	mov	r0, r3
     77a:	f001 fddf 	bl	233c <am_hal_ios_fifo_write>
     77e:	60b8      	str	r0, [r7, #8]
     780:	e017      	b.n	7b2 <main+0x14e>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     782:	4b24      	ldr	r3, [pc, #144]	; (814 <main+0x1b0>)
     784:	681b      	ldr	r3, [r3, #0]
     786:	4a20      	ldr	r2, [pc, #128]	; (808 <main+0x1a4>)
     788:	4413      	add	r3, r2
     78a:	6839      	ldr	r1, [r7, #0]
     78c:	4618      	mov	r0, r3
     78e:	f001 fdd5 	bl	233c <am_hal_ios_fifo_write>
     792:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     794:	68ba      	ldr	r2, [r7, #8]
     796:	683b      	ldr	r3, [r7, #0]
     798:	429a      	cmp	r2, r3
     79a:	d10a      	bne.n	7b2 <main+0x14e>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR1_DATA_SIZE - chunk1);
     79c:	683b      	ldr	r3, [r7, #0]
     79e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
     7a2:	4619      	mov	r1, r3
     7a4:	4818      	ldr	r0, [pc, #96]	; (808 <main+0x1a4>)
     7a6:	f001 fdc9 	bl	233c <am_hal_ios_fifo_write>
     7aa:	4602      	mov	r2, r0
     7ac:	68bb      	ldr	r3, [r7, #8]
     7ae:	4413      	add	r3, r2
     7b0:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     7b2:	4b18      	ldr	r3, [pc, #96]	; (814 <main+0x1b0>)
     7b4:	681a      	ldr	r2, [r3, #0]
     7b6:	68bb      	ldr	r3, [r7, #8]
     7b8:	4413      	add	r3, r2
     7ba:	4a16      	ldr	r2, [pc, #88]	; (814 <main+0x1b0>)
     7bc:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     7be:	4b15      	ldr	r3, [pc, #84]	; (814 <main+0x1b0>)
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
     7c6:	4a13      	ldr	r2, [pc, #76]	; (814 <main+0x1b0>)
     7c8:	6013      	str	r3, [r2, #0]
                g_bSensor1Data = false;
     7ca:	4b11      	ldr	r3, [pc, #68]	; (810 <main+0x1ac>)
     7cc:	2200      	movs	r2, #0
     7ce:	701a      	strb	r2, [r3, #0]
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     7d0:	4b11      	ldr	r3, [pc, #68]	; (818 <main+0x1b4>)
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	b2db      	uxtb	r3, r3
     7d6:	2b00      	cmp	r3, #0
     7d8:	d111      	bne.n	7fe <main+0x19a>
            {
                if (am_hal_ios_fifo_space_used())
     7da:	f001 fa8d 	bl	1cf8 <am_hal_ios_fifo_space_used>
     7de:	4603      	mov	r3, r0
     7e0:	2b00      	cmp	r3, #0
     7e2:	d00c      	beq.n	7fe <main+0x19a>
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     7e4:	4b0c      	ldr	r3, [pc, #48]	; (818 <main+0x1b4>)
     7e6:	2201      	movs	r2, #1
     7e8:	701a      	strb	r2, [r3, #0]
                    inform_host();
     7ea:	f7ff fe83 	bl	4f4 <inform_host>
                g_sendIdx += numWritten;
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
                g_bSensor1Data = false;
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     7ee:	e006      	b.n	7fe <main+0x19a>
        else
        {
            //
            // Go to Deep Sleep.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
     7f0:	2000      	movs	r0, #0
     7f2:	f002 fa7d 	bl	2cf0 <am_hal_sysctrl_sleep>
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     7f6:	6878      	ldr	r0, [r7, #4]
     7f8:	f001 f9dc 	bl	1bb4 <am_hal_interrupt_master_set>
     7fc:	e757      	b.n	6ae <main+0x4a>
                g_sendIdx += numWritten;
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
                g_bSensor1Data = false;
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     7fe:	bf00      	nop
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
        }
    }
     800:	e755      	b.n	6ae <main+0x4a>
     802:	bf00      	nop
     804:	00002f8c 	.word	0x00002f8c
     808:	100011bc 	.word	0x100011bc
     80c:	100011b9 	.word	0x100011b9
     810:	100017bb 	.word	0x100017bb
     814:	10001098 	.word	0x10001098
     818:	100011b8 	.word	0x100011b8

0000081c <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     81c:	4811      	ldr	r0, [pc, #68]	; (864 <zero_loop+0x12>)
     81e:	4912      	ldr	r1, [pc, #72]	; (868 <zero_loop+0x16>)
     820:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     822:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     826:	4811      	ldr	r0, [pc, #68]	; (86c <zero_loop+0x1a>)
     828:	6801      	ldr	r1, [r0, #0]
     82a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     82e:	6001      	str	r1, [r0, #0]
     830:	f3bf 8f4f 	dsb	sy
     834:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     838:	480d      	ldr	r0, [pc, #52]	; (870 <zero_loop+0x1e>)
     83a:	490e      	ldr	r1, [pc, #56]	; (874 <zero_loop+0x22>)
     83c:	4a0e      	ldr	r2, [pc, #56]	; (878 <zero_loop+0x26>)

0000083e <copy_loop>:
     83e:	f850 3b04 	ldr.w	r3, [r0], #4
     842:	f841 3b04 	str.w	r3, [r1], #4
     846:	4291      	cmp	r1, r2
     848:	dbf9      	blt.n	83e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     84a:	480c      	ldr	r0, [pc, #48]	; (87c <zero_loop+0x2a>)
     84c:	490c      	ldr	r1, [pc, #48]	; (880 <zero_loop+0x2e>)
     84e:	f04f 0200 	mov.w	r2, #0

00000852 <zero_loop>:
     852:	4288      	cmp	r0, r1
     854:	bfb8      	it	lt
     856:	f840 2b04 	strlt.w	r2, [r0], #4
     85a:	dbfa      	blt.n	852 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     85c:	f7ff ff02 	bl	664 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     860:	be00      	bkpt	0x0000
}
     862:	bf00      	nop
     864:	e000ed08 	.word	0xe000ed08
     868:	00000000 	.word	0x00000000
     86c:	e000ed88 	.word	0xe000ed88
     870:	000030f8 	.word	0x000030f8
     874:	10001000 	.word	0x10001000
     878:	10001098 	.word	0x10001098
     87c:	10001098 	.word	0x10001098
     880:	10001818 	.word	0x10001818

00000884 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     884:	b480      	push	{r7}
     886:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     888:	e7fe      	b.n	888 <am_nmi_isr+0x4>
     88a:	bf00      	nop

0000088c <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     88c:	b480      	push	{r7}
     88e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     890:	e7fe      	b.n	890 <am_busfault_isr+0x4>
     892:	bf00      	nop

00000894 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     894:	b480      	push	{r7}
     896:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     898:	e7fe      	b.n	898 <am_adc_isr+0x4>
     89a:	bf00      	nop

0000089c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     89c:	b480      	push	{r7}
     89e:	b083      	sub	sp, #12
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     8a4:	4a04      	ldr	r2, [pc, #16]	; (8b8 <am_util_stdio_printf_init+0x1c>)
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	6013      	str	r3, [r2, #0]
}
     8aa:	bf00      	nop
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop
     8b8:	100017bc 	.word	0x100017bc

000008bc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     8bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     8c0:	b096      	sub	sp, #88	; 0x58
     8c2:	af00      	add	r7, sp, #0
     8c4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     8c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8cc:	0025      	movs	r5, r4
     8ce:	2600      	movs	r6, #0
     8d0:	ea55 0306 	orrs.w	r3, r5, r6
     8d4:	f000 809e 	beq.w	a14 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     8d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8dc:	0862      	lsrs	r2, r4, #1
     8de:	ea4f 0133 	mov.w	r1, r3, rrx
     8e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8e6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     8ea:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     8ee:	ea4f 0994 	mov.w	r9, r4, lsr #2
     8f2:	eb11 0308 	adds.w	r3, r1, r8
     8f6:	eb42 0409 	adc.w	r4, r2, r9
     8fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     8fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     902:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     906:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     90a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     90e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     912:	eb13 030a 	adds.w	r3, r3, sl
     916:	eb44 040b 	adc.w	r4, r4, fp
     91a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     91e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     922:	0a1a      	lsrs	r2, r3, #8
     924:	62ba      	str	r2, [r7, #40]	; 0x28
     926:	6aba      	ldr	r2, [r7, #40]	; 0x28
     928:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     92c:	62ba      	str	r2, [r7, #40]	; 0x28
     92e:	0a23      	lsrs	r3, r4, #8
     930:	62fb      	str	r3, [r7, #44]	; 0x2c
     932:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     936:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     93a:	18c9      	adds	r1, r1, r3
     93c:	eb42 0204 	adc.w	r2, r2, r4
     940:	460b      	mov	r3, r1
     942:	4614      	mov	r4, r2
     944:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     948:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     94c:	0c1a      	lsrs	r2, r3, #16
     94e:	623a      	str	r2, [r7, #32]
     950:	6a3a      	ldr	r2, [r7, #32]
     952:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     956:	623a      	str	r2, [r7, #32]
     958:	0c23      	lsrs	r3, r4, #16
     95a:	627b      	str	r3, [r7, #36]	; 0x24
     95c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     960:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     964:	18c9      	adds	r1, r1, r3
     966:	eb42 0204 	adc.w	r2, r2, r4
     96a:	460b      	mov	r3, r1
     96c:	4614      	mov	r4, r2
     96e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     972:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     976:	0023      	movs	r3, r4
     978:	603b      	str	r3, [r7, #0]
     97a:	2300      	movs	r3, #0
     97c:	607b      	str	r3, [r7, #4]
     97e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     982:	e897 0006 	ldmia.w	r7, {r1, r2}
     986:	18c9      	adds	r1, r1, r3
     988:	eb42 0204 	adc.w	r2, r2, r4
     98c:	460b      	mov	r3, r1
     98e:	4614      	mov	r4, r2
     990:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     994:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     998:	08da      	lsrs	r2, r3, #3
     99a:	613a      	str	r2, [r7, #16]
     99c:	693a      	ldr	r2, [r7, #16]
     99e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     9a2:	613a      	str	r2, [r7, #16]
     9a4:	08e3      	lsrs	r3, r4, #3
     9a6:	617b      	str	r3, [r7, #20]
     9a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     9ac:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     9b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9b4:	18db      	adds	r3, r3, r3
     9b6:	eb44 0404 	adc.w	r4, r4, r4
     9ba:	00a2      	lsls	r2, r4, #2
     9bc:	60fa      	str	r2, [r7, #12]
     9be:	68fa      	ldr	r2, [r7, #12]
     9c0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     9c4:	60fa      	str	r2, [r7, #12]
     9c6:	009a      	lsls	r2, r3, #2
     9c8:	60ba      	str	r2, [r7, #8]
     9ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     9ce:	18c9      	adds	r1, r1, r3
     9d0:	eb42 0204 	adc.w	r2, r2, r4
     9d4:	460b      	mov	r3, r1
     9d6:	4614      	mov	r4, r2
     9d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     9dc:	1acb      	subs	r3, r1, r3
     9de:	eb62 0404 	sbc.w	r4, r2, r4
     9e2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     9e6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     9ea:	3306      	adds	r3, #6
     9ec:	f144 0400 	adc.w	r4, r4, #0
     9f0:	091a      	lsrs	r2, r3, #4
     9f2:	61ba      	str	r2, [r7, #24]
     9f4:	69ba      	ldr	r2, [r7, #24]
     9f6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     9fa:	61ba      	str	r2, [r7, #24]
     9fc:	0923      	lsrs	r3, r4, #4
     9fe:	61fb      	str	r3, [r7, #28]
     a00:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     a08:	18c9      	adds	r1, r1, r3
     a0a:	eb42 0204 	adc.w	r2, r2, r4
     a0e:	460b      	mov	r3, r1
     a10:	4614      	mov	r4, r2
     a12:	e029      	b.n	a68 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a16:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a1a:	085a      	lsrs	r2, r3, #1
     a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a1e:	089b      	lsrs	r3, r3, #2
     a20:	4413      	add	r3, r2
     a22:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a26:	091b      	lsrs	r3, r3, #4
     a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a2a:	4413      	add	r3, r2
     a2c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a30:	0a1b      	lsrs	r3, r3, #8
     a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a34:	4413      	add	r3, r2
     a36:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a3a:	0c1b      	lsrs	r3, r3, #16
     a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a3e:	4413      	add	r3, r2
     a40:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a44:	08db      	lsrs	r3, r3, #3
     a46:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a4a:	4613      	mov	r3, r2
     a4c:	009b      	lsls	r3, r3, #2
     a4e:	4413      	add	r3, r2
     a50:	005b      	lsls	r3, r3, #1
     a52:	461a      	mov	r2, r3
     a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a56:	1a9b      	subs	r3, r3, r2
     a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a5c:	3306      	adds	r3, #6
     a5e:	091a      	lsrs	r2, r3, #4
     a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a62:	4413      	add	r3, r2
     a64:	f04f 0400 	mov.w	r4, #0
    }
}
     a68:	4618      	mov	r0, r3
     a6a:	4621      	mov	r1, r4
     a6c:	3758      	adds	r7, #88	; 0x58
     a6e:	46bd      	mov	sp, r7
     a70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     a74:	4770      	bx	lr
     a76:	bf00      	nop

00000a78 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     a78:	b590      	push	{r4, r7, lr}
     a7a:	b085      	sub	sp, #20
     a7c:	af00      	add	r7, sp, #0
     a7e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     a82:	683a      	ldr	r2, [r7, #0]
     a84:	687b      	ldr	r3, [r7, #4]
     a86:	4313      	orrs	r3, r2
     a88:	2b00      	cmp	r3, #0
     a8a:	bf0c      	ite	eq
     a8c:	2301      	moveq	r3, #1
     a8e:	2300      	movne	r3, #0
     a90:	b2db      	uxtb	r3, r3
     a92:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     a94:	e008      	b.n	aa8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     a96:	e9d7 0100 	ldrd	r0, r1, [r7]
     a9a:	f7ff ff0f 	bl	8bc <divu64_10>
     a9e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     aa2:	68fb      	ldr	r3, [r7, #12]
     aa4:	3301      	adds	r3, #1
     aa6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     aa8:	e897 0018 	ldmia.w	r7, {r3, r4}
     aac:	4323      	orrs	r3, r4
     aae:	d1f2      	bne.n	a96 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     ab0:	68fb      	ldr	r3, [r7, #12]
}
     ab2:	4618      	mov	r0, r3
     ab4:	3714      	adds	r7, #20
     ab6:	46bd      	mov	sp, r7
     ab8:	bd90      	pop	{r4, r7, pc}
     aba:	bf00      	nop

00000abc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     abc:	b590      	push	{r4, r7, lr}
     abe:	b083      	sub	sp, #12
     ac0:	af00      	add	r7, sp, #0
     ac2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     ac6:	e897 0018 	ldmia.w	r7, {r3, r4}
     aca:	2b00      	cmp	r3, #0
     acc:	f174 0300 	sbcs.w	r3, r4, #0
     ad0:	da06      	bge.n	ae0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     ad2:	e897 0018 	ldmia.w	r7, {r3, r4}
     ad6:	425b      	negs	r3, r3
     ad8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     adc:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     ae0:	e897 0018 	ldmia.w	r7, {r3, r4}
     ae4:	4618      	mov	r0, r3
     ae6:	4621      	mov	r1, r4
     ae8:	f7ff ffc6 	bl	a78 <ndigits_in_u64>
     aec:	4603      	mov	r3, r0
}
     aee:	4618      	mov	r0, r3
     af0:	370c      	adds	r7, #12
     af2:	46bd      	mov	sp, r7
     af4:	bd90      	pop	{r4, r7, pc}
     af6:	bf00      	nop

00000af8 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     af8:	b490      	push	{r4, r7}
     afa:	b084      	sub	sp, #16
     afc:	af00      	add	r7, sp, #0
     afe:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     b02:	6839      	ldr	r1, [r7, #0]
     b04:	687a      	ldr	r2, [r7, #4]
     b06:	430a      	orrs	r2, r1
     b08:	2a00      	cmp	r2, #0
     b0a:	bf0c      	ite	eq
     b0c:	2201      	moveq	r2, #1
     b0e:	2200      	movne	r2, #0
     b10:	b2d2      	uxtb	r2, r2
     b12:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     b14:	e00a      	b.n	b2c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     b16:	e897 0006 	ldmia.w	r7, {r1, r2}
     b1a:	090b      	lsrs	r3, r1, #4
     b1c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     b20:	0914      	lsrs	r4, r2, #4
     b22:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     b26:	68fa      	ldr	r2, [r7, #12]
     b28:	3201      	adds	r2, #1
     b2a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     b2c:	e897 0006 	ldmia.w	r7, {r1, r2}
     b30:	430a      	orrs	r2, r1
     b32:	d1f0      	bne.n	b16 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     b34:	68fb      	ldr	r3, [r7, #12]
}
     b36:	4618      	mov	r0, r3
     b38:	3710      	adds	r7, #16
     b3a:	46bd      	mov	sp, r7
     b3c:	bc90      	pop	{r4, r7}
     b3e:	4770      	bx	lr

00000b40 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     b40:	b480      	push	{r7}
     b42:	b087      	sub	sp, #28
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
     b48:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     b4a:	2300      	movs	r3, #0
     b4c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     b4e:	2300      	movs	r3, #0
     b50:	613b      	str	r3, [r7, #16]
     b52:	2300      	movs	r3, #0
     b54:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	781b      	ldrb	r3, [r3, #0]
     b5a:	2b2d      	cmp	r3, #45	; 0x2d
     b5c:	d11b      	bne.n	b96 <decstr_to_int+0x56>
    {
        bNeg = true;
     b5e:	2301      	movs	r3, #1
     b60:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	3301      	adds	r3, #1
     b66:	607b      	str	r3, [r7, #4]
        uCnt++;
     b68:	68fb      	ldr	r3, [r7, #12]
     b6a:	3301      	adds	r3, #1
     b6c:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b6e:	e012      	b.n	b96 <decstr_to_int+0x56>
    {
        ++uCnt;
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	3301      	adds	r3, #1
     b74:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     b76:	693a      	ldr	r2, [r7, #16]
     b78:	4613      	mov	r3, r2
     b7a:	009b      	lsls	r3, r3, #2
     b7c:	4413      	add	r3, r2
     b7e:	005b      	lsls	r3, r3, #1
     b80:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	461a      	mov	r2, r3
     b88:	693b      	ldr	r3, [r7, #16]
     b8a:	4413      	add	r3, r2
     b8c:	3b30      	subs	r3, #48	; 0x30
     b8e:	613b      	str	r3, [r7, #16]
        pcStr++;
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	3301      	adds	r3, #1
     b94:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	2b2f      	cmp	r3, #47	; 0x2f
     b9c:	d903      	bls.n	ba6 <decstr_to_int+0x66>
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	2b39      	cmp	r3, #57	; 0x39
     ba4:	d9e4      	bls.n	b70 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	2b00      	cmp	r3, #0
     baa:	d002      	beq.n	bb2 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     bac:	683b      	ldr	r3, [r7, #0]
     bae:	68fa      	ldr	r2, [r7, #12]
     bb0:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     bb2:	7dfb      	ldrb	r3, [r7, #23]
     bb4:	2b00      	cmp	r3, #0
     bb6:	d002      	beq.n	bbe <decstr_to_int+0x7e>
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	425b      	negs	r3, r3
     bbc:	e000      	b.n	bc0 <decstr_to_int+0x80>
     bbe:	693b      	ldr	r3, [r7, #16]
}
     bc0:	4618      	mov	r0, r3
     bc2:	371c      	adds	r7, #28
     bc4:	46bd      	mov	sp, r7
     bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bca:	4770      	bx	lr

00000bcc <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     bcc:	b590      	push	{r4, r7, lr}
     bce:	b091      	sub	sp, #68	; 0x44
     bd0:	af00      	add	r7, sp, #0
     bd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     bd6:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     bd8:	2300      	movs	r3, #0
     bda:	63fb      	str	r3, [r7, #60]	; 0x3c
     bdc:	2300      	movs	r3, #0
     bde:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     be4:	f7ff fe6a 	bl	8bc <divu64_10>
     be8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     bec:	68b9      	ldr	r1, [r7, #8]
     bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bf0:	4613      	mov	r3, r2
     bf2:	009b      	lsls	r3, r3, #2
     bf4:	4413      	add	r3, r2
     bf6:	005b      	lsls	r3, r3, #1
     bf8:	1acb      	subs	r3, r1, r3
     bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bfe:	1c5a      	adds	r2, r3, #1
     c00:	63fa      	str	r2, [r7, #60]	; 0x3c
     c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c04:	b2d2      	uxtb	r2, r2
     c06:	3230      	adds	r2, #48	; 0x30
     c08:	b2d2      	uxtb	r2, r2
     c0a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     c0e:	440b      	add	r3, r1
     c10:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c18:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     c1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     c20:	4323      	orrs	r3, r4
     c22:	d1dd      	bne.n	be0 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c26:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d011      	beq.n	c52 <uint64_to_str+0x86>
    {
        while ( ix-- )
     c2e:	e008      	b.n	c42 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	1c5a      	adds	r2, r3, #1
     c34:	607a      	str	r2, [r7, #4]
     c36:	f107 0110 	add.w	r1, r7, #16
     c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c3c:	440a      	add	r2, r1
     c3e:	7812      	ldrb	r2, [r2, #0]
     c40:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c44:	1e5a      	subs	r2, r3, #1
     c46:	63fa      	str	r2, [r7, #60]	; 0x3c
     c48:	2b00      	cmp	r3, #0
     c4a:	d1f1      	bne.n	c30 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	2200      	movs	r2, #0
     c50:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     c54:	4618      	mov	r0, r3
     c56:	3744      	adds	r7, #68	; 0x44
     c58:	46bd      	mov	sp, r7
     c5a:	bd90      	pop	{r4, r7, pc}

00000c5c <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     c5c:	b4b0      	push	{r4, r5, r7}
     c5e:	b08d      	sub	sp, #52	; 0x34
     c60:	af00      	add	r7, sp, #0
     c62:	e9c7 0102 	strd	r0, r1, [r7, #8]
     c66:	607a      	str	r2, [r7, #4]
     c68:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     c6a:	2300      	movs	r3, #0
     c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c72:	4313      	orrs	r3, r2
     c74:	d131      	bne.n	cda <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c78:	1c5a      	adds	r2, r3, #1
     c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
     c7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     c80:	4413      	add	r3, r2
     c82:	2230      	movs	r2, #48	; 0x30
     c84:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     c88:	e027      	b.n	cda <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     c8a:	7a3b      	ldrb	r3, [r7, #8]
     c8c:	f003 030f 	and.w	r3, r3, #15
     c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c98:	2b09      	cmp	r3, #9
     c9a:	d90a      	bls.n	cb2 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     c9c:	78fb      	ldrb	r3, [r7, #3]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d001      	beq.n	ca6 <uint64_to_hexstr+0x4a>
     ca2:	2227      	movs	r2, #39	; 0x27
     ca4:	e000      	b.n	ca8 <uint64_to_hexstr+0x4c>
     ca6:	2207      	movs	r2, #7
     ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     cac:	4413      	add	r3, r2
     cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb4:	1c5a      	adds	r2, r3, #1
     cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
     cb8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     cbc:	3230      	adds	r2, #48	; 0x30
     cbe:	b2d2      	uxtb	r2, r2
     cc0:	f107 0130 	add.w	r1, r7, #48	; 0x30
     cc4:	440b      	add	r3, r1
     cc6:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     cce:	0914      	lsrs	r4, r2, #4
     cd0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     cd4:	091d      	lsrs	r5, r3, #4
     cd6:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     cde:	4313      	orrs	r3, r2
     ce0:	d1d3      	bne.n	c8a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ce4:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	2b00      	cmp	r3, #0
     cea:	d011      	beq.n	d10 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     cec:	e008      	b.n	d00 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	1c5a      	adds	r2, r3, #1
     cf2:	607a      	str	r2, [r7, #4]
     cf4:	f107 0110 	add.w	r1, r7, #16
     cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cfa:	440a      	add	r2, r1
     cfc:	7812      	ldrb	r2, [r2, #0]
     cfe:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d02:	1e5a      	subs	r2, r3, #1
     d04:	62fa      	str	r2, [r7, #44]	; 0x2c
     d06:	2b00      	cmp	r3, #0
     d08:	d1f1      	bne.n	cee <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	2200      	movs	r2, #0
     d0e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     d12:	4618      	mov	r0, r3
     d14:	3734      	adds	r7, #52	; 0x34
     d16:	46bd      	mov	sp, r7
     d18:	bcb0      	pop	{r4, r5, r7}
     d1a:	4770      	bx	lr

00000d1c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     d1c:	b480      	push	{r7}
     d1e:	b085      	sub	sp, #20
     d20:	af00      	add	r7, sp, #0
     d22:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     d24:	2300      	movs	r3, #0
     d26:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d104      	bne.n	d38 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	e009      	b.n	d46 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	3301      	adds	r3, #1
     d36:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	1c5a      	adds	r2, r3, #1
     d3c:	607a      	str	r2, [r7, #4]
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b00      	cmp	r3, #0
     d42:	d1f6      	bne.n	d32 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     d44:	68fb      	ldr	r3, [r7, #12]
}
     d46:	4618      	mov	r0, r3
     d48:	3714      	adds	r7, #20
     d4a:	46bd      	mov	sp, r7
     d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d50:	4770      	bx	lr
     d52:	bf00      	nop

00000d54 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     d54:	b480      	push	{r7}
     d56:	b087      	sub	sp, #28
     d58:	af00      	add	r7, sp, #0
     d5a:	60f8      	str	r0, [r7, #12]
     d5c:	460b      	mov	r3, r1
     d5e:	607a      	str	r2, [r7, #4]
     d60:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     d62:	2300      	movs	r3, #0
     d64:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2b00      	cmp	r3, #0
     d6a:	dc0c      	bgt.n	d86 <padbuffer+0x32>
    {
        return i32Cnt;
     d6c:	697b      	ldr	r3, [r7, #20]
     d6e:	e010      	b.n	d92 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     d70:	68fb      	ldr	r3, [r7, #12]
     d72:	2b00      	cmp	r3, #0
     d74:	d004      	beq.n	d80 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	1c5a      	adds	r2, r3, #1
     d7a:	60fa      	str	r2, [r7, #12]
     d7c:	7afa      	ldrb	r2, [r7, #11]
     d7e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     d80:	697b      	ldr	r3, [r7, #20]
     d82:	3301      	adds	r3, #1
     d84:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	1e5a      	subs	r2, r3, #1
     d8a:	607a      	str	r2, [r7, #4]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d1ef      	bne.n	d70 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     d90:	697b      	ldr	r3, [r7, #20]
}
     d92:	4618      	mov	r0, r3
     d94:	371c      	adds	r7, #28
     d96:	46bd      	mov	sp, r7
     d98:	f85d 7b04 	ldr.w	r7, [sp], #4
     d9c:	4770      	bx	lr
     d9e:	bf00      	nop

00000da0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     da0:	b590      	push	{r4, r7, lr}
     da2:	b08f      	sub	sp, #60	; 0x3c
     da4:	af00      	add	r7, sp, #0
     da6:	60f8      	str	r0, [r7, #12]
     da8:	60b9      	str	r1, [r7, #8]
     daa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     dac:	68bb      	ldr	r3, [r7, #8]
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     db4:	2b03      	cmp	r3, #3
     db6:	dc02      	bgt.n	dbe <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     db8:	f06f 0302 	mvn.w	r3, #2
     dbc:	e0d4      	b.n	f68 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     dbe:	edd7 7a03 	vldr	s15, [r7, #12]
     dc2:	eef5 7a40 	vcmp.f32	s15, #0.0
     dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dca:	d104      	bne.n	dd6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     dcc:	68bb      	ldr	r3, [r7, #8]
     dce:	4a68      	ldr	r2, [pc, #416]	; (f70 <ftoa+0x1d0>)
     dd0:	601a      	str	r2, [r3, #0]
        return 3;
     dd2:	2303      	movs	r3, #3
     dd4:	e0c8      	b.n	f68 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     dd6:	68bb      	ldr	r3, [r7, #8]
     dd8:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     dde:	697b      	ldr	r3, [r7, #20]
     de0:	15db      	asrs	r3, r3, #23
     de2:	b2db      	uxtb	r3, r3
     de4:	3b7f      	subs	r3, #127	; 0x7f
     de6:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     de8:	697b      	ldr	r3, [r7, #20]
     dea:	f3c3 0316 	ubfx	r3, r3, #0, #23
     dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     df2:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     df4:	2300      	movs	r3, #0
     df6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     df8:	2300      	movs	r3, #0
     dfa:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     dfc:	6a3b      	ldr	r3, [r7, #32]
     dfe:	2b1e      	cmp	r3, #30
     e00:	dd02      	ble.n	e08 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     e02:	f06f 0301 	mvn.w	r3, #1
     e06:	e0af      	b.n	f68 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     e08:	6a3b      	ldr	r3, [r7, #32]
     e0a:	f113 0f17 	cmn.w	r3, #23
     e0e:	da02      	bge.n	e16 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     e10:	f04f 33ff 	mov.w	r3, #4294967295
     e14:	e0a8      	b.n	f68 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     e16:	6a3b      	ldr	r3, [r7, #32]
     e18:	2b16      	cmp	r3, #22
     e1a:	dd06      	ble.n	e2a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     e1c:	6a3b      	ldr	r3, [r7, #32]
     e1e:	3b17      	subs	r3, #23
     e20:	69fa      	ldr	r2, [r7, #28]
     e22:	fa02 f303 	lsl.w	r3, r2, r3
     e26:	637b      	str	r3, [r7, #52]	; 0x34
     e28:	e01a      	b.n	e60 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     e2a:	6a3b      	ldr	r3, [r7, #32]
     e2c:	2b00      	cmp	r3, #0
     e2e:	db0f      	blt.n	e50 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     e30:	6a3b      	ldr	r3, [r7, #32]
     e32:	f1c3 0317 	rsb	r3, r3, #23
     e36:	69fa      	ldr	r2, [r7, #28]
     e38:	fa42 f303 	asr.w	r3, r2, r3
     e3c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     e3e:	6a3b      	ldr	r3, [r7, #32]
     e40:	3301      	adds	r3, #1
     e42:	69fa      	ldr	r2, [r7, #28]
     e44:	fa02 f303 	lsl.w	r3, r2, r3
     e48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e4c:	633b      	str	r3, [r7, #48]	; 0x30
     e4e:	e007      	b.n	e60 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     e50:	69fb      	ldr	r3, [r7, #28]
     e52:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     e56:	6a3b      	ldr	r3, [r7, #32]
     e58:	43db      	mvns	r3, r3
     e5a:	fa42 f303 	asr.w	r3, r2, r3
     e5e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     e60:	697b      	ldr	r3, [r7, #20]
     e62:	2b00      	cmp	r3, #0
     e64:	da04      	bge.n	e70 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     e66:	68bb      	ldr	r3, [r7, #8]
     e68:	1c5a      	adds	r2, r3, #1
     e6a:	60ba      	str	r2, [r7, #8]
     e6c:	222d      	movs	r2, #45	; 0x2d
     e6e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e72:	2b00      	cmp	r3, #0
     e74:	d105      	bne.n	e82 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     e76:	68bb      	ldr	r3, [r7, #8]
     e78:	1c5a      	adds	r2, r3, #1
     e7a:	60ba      	str	r2, [r7, #8]
     e7c:	2230      	movs	r2, #48	; 0x30
     e7e:	701a      	strb	r2, [r3, #0]
     e80:	e021      	b.n	ec6 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e84:	2b00      	cmp	r3, #0
     e86:	dd08      	ble.n	e9a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e8a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e8e:	68ba      	ldr	r2, [r7, #8]
     e90:	4618      	mov	r0, r3
     e92:	4621      	mov	r1, r4
     e94:	f7ff fe9a 	bl	bcc <uint64_to_str>
     e98:	e011      	b.n	ebe <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     e9a:	68bb      	ldr	r3, [r7, #8]
     e9c:	1c5a      	adds	r2, r3, #1
     e9e:	60ba      	str	r2, [r7, #8]
     ea0:	222d      	movs	r2, #45	; 0x2d
     ea2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ea6:	425b      	negs	r3, r3
     ea8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     eac:	68ba      	ldr	r2, [r7, #8]
     eae:	4618      	mov	r0, r3
     eb0:	4621      	mov	r1, r4
     eb2:	f7ff fe8b 	bl	bcc <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     eb6:	e002      	b.n	ebe <ftoa+0x11e>
        {
            pcBuf++;
     eb8:	68bb      	ldr	r3, [r7, #8]
     eba:	3301      	adds	r3, #1
     ebc:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     ebe:	68bb      	ldr	r3, [r7, #8]
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d1f8      	bne.n	eb8 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     ec6:	68bb      	ldr	r3, [r7, #8]
     ec8:	1c5a      	adds	r2, r3, #1
     eca:	60ba      	str	r2, [r7, #8]
     ecc:	222e      	movs	r2, #46	; 0x2e
     ece:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ed2:	2b00      	cmp	r3, #0
     ed4:	d105      	bne.n	ee2 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     ed6:	68bb      	ldr	r3, [r7, #8]
     ed8:	1c5a      	adds	r2, r3, #1
     eda:	60ba      	str	r2, [r7, #8]
     edc:	2230      	movs	r2, #48	; 0x30
     ede:	701a      	strb	r2, [r3, #0]
     ee0:	e03c      	b.n	f5c <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     ee2:	68ba      	ldr	r2, [r7, #8]
     ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ee6:	1ad3      	subs	r3, r2, r3
     ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
     eea:	1ad3      	subs	r3, r2, r3
     eec:	3b01      	subs	r3, #1
     eee:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     ef0:	69ba      	ldr	r2, [r7, #24]
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	4293      	cmp	r3, r2
     ef6:	bfa8      	it	ge
     ef8:	4613      	movge	r3, r2
     efa:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     efc:	2300      	movs	r3, #0
     efe:	62fb      	str	r3, [r7, #44]	; 0x2c
     f00:	e015      	b.n	f2e <ftoa+0x18e>
        {
            i32FracPart *= 10;
     f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f04:	4613      	mov	r3, r2
     f06:	009b      	lsls	r3, r3, #2
     f08:	4413      	add	r3, r2
     f0a:	005b      	lsls	r3, r3, #1
     f0c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     f0e:	68bb      	ldr	r3, [r7, #8]
     f10:	1c5a      	adds	r2, r3, #1
     f12:	60ba      	str	r2, [r7, #8]
     f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f16:	1612      	asrs	r2, r2, #24
     f18:	b2d2      	uxtb	r2, r2
     f1a:	3230      	adds	r2, #48	; 0x30
     f1c:	b2d2      	uxtb	r2, r2
     f1e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f26:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f2a:	3301      	adds	r3, #1
     f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
     f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f30:	69bb      	ldr	r3, [r7, #24]
     f32:	429a      	cmp	r2, r3
     f34:	dbe5      	blt.n	f02 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	3b01      	subs	r3, #1
     f3a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     f3c:	e002      	b.n	f44 <ftoa+0x1a4>
        {
            --pcBuf;
     f3e:	68bb      	ldr	r3, [r7, #8]
     f40:	3b01      	subs	r3, #1
     f42:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     f44:	68bb      	ldr	r3, [r7, #8]
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	2b30      	cmp	r3, #48	; 0x30
     f4a:	d104      	bne.n	f56 <ftoa+0x1b6>
     f4c:	68bb      	ldr	r3, [r7, #8]
     f4e:	3b01      	subs	r3, #1
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	2b2e      	cmp	r3, #46	; 0x2e
     f54:	d1f3      	bne.n	f3e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     f56:	68bb      	ldr	r3, [r7, #8]
     f58:	3301      	adds	r3, #1
     f5a:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     f5c:	68bb      	ldr	r3, [r7, #8]
     f5e:	2200      	movs	r2, #0
     f60:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     f62:	68ba      	ldr	r2, [r7, #8]
     f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f66:	1ad3      	subs	r3, r2, r3
} // ftoa()
     f68:	4618      	mov	r0, r3
     f6a:	373c      	adds	r7, #60	; 0x3c
     f6c:	46bd      	mov	sp, r7
     f6e:	bd90      	pop	{r4, r7, pc}
     f70:	00302e30 	.word	0x00302e30

00000f74 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     f74:	b590      	push	{r4, r7, lr}
     f76:	b095      	sub	sp, #84	; 0x54
     f78:	af00      	add	r7, sp, #0
     f7a:	60f8      	str	r0, [r7, #12]
     f7c:	60b9      	str	r1, [r7, #8]
     f7e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     f80:	2300      	movs	r3, #0
     f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     f84:	2300      	movs	r3, #0
     f86:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     f88:	e2e3      	b.n	1552 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     f8a:	2306      	movs	r3, #6
     f8c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     f8e:	68bb      	ldr	r3, [r7, #8]
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	2b25      	cmp	r3, #37	; 0x25
     f94:	d01f      	beq.n	fd6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     f96:	68fb      	ldr	r3, [r7, #12]
     f98:	2b00      	cmp	r3, #0
     f9a:	d015      	beq.n	fc8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     f9c:	68bb      	ldr	r3, [r7, #8]
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b0a      	cmp	r3, #10
     fa2:	d10b      	bne.n	fbc <am_util_stdio_vsprintf+0x48>
     fa4:	4bb1      	ldr	r3, [pc, #708]	; (126c <am_util_stdio_vsprintf+0x2f8>)
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2b00      	cmp	r3, #0
     faa:	d007      	beq.n	fbc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	1c5a      	adds	r2, r3, #1
     fb0:	60fa      	str	r2, [r7, #12]
     fb2:	220d      	movs	r2, #13
     fb4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fb8:	3301      	adds	r3, #1
     fba:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	1c5a      	adds	r2, r3, #1
     fc0:	60fa      	str	r2, [r7, #12]
     fc2:	68ba      	ldr	r2, [r7, #8]
     fc4:	7812      	ldrb	r2, [r2, #0]
     fc6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	3301      	adds	r3, #1
     fcc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fd0:	3301      	adds	r3, #1
     fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     fd4:	e2bd      	b.n	1552 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     fd6:	68bb      	ldr	r3, [r7, #8]
     fd8:	3301      	adds	r3, #1
     fda:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     fdc:	2300      	movs	r3, #0
     fde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     fe2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fe6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     fea:	2320      	movs	r3, #32
     fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ff0:	68bb      	ldr	r3, [r7, #8]
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	2b30      	cmp	r3, #48	; 0x30
     ff6:	d105      	bne.n	1004 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     ff8:	2330      	movs	r3, #48	; 0x30
     ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     ffe:	68bb      	ldr	r3, [r7, #8]
    1000:	3301      	adds	r3, #1
    1002:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1004:	f107 0310 	add.w	r3, r7, #16
    1008:	4619      	mov	r1, r3
    100a:	68b8      	ldr	r0, [r7, #8]
    100c:	f7ff fd98 	bl	b40 <decstr_to_int>
    1010:	4603      	mov	r3, r0
    1012:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1014:	693b      	ldr	r3, [r7, #16]
    1016:	68ba      	ldr	r2, [r7, #8]
    1018:	4413      	add	r3, r2
    101a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    101c:	68bb      	ldr	r3, [r7, #8]
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2b73      	cmp	r3, #115	; 0x73
    1022:	d005      	beq.n	1030 <am_util_stdio_vsprintf+0xbc>
    1024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1026:	2b00      	cmp	r3, #0
    1028:	da02      	bge.n	1030 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    102c:	425b      	negs	r3, r3
    102e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1030:	68bb      	ldr	r3, [r7, #8]
    1032:	781b      	ldrb	r3, [r3, #0]
    1034:	2b2e      	cmp	r3, #46	; 0x2e
    1036:	d10e      	bne.n	1056 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	3301      	adds	r3, #1
    103c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    103e:	f107 0310 	add.w	r3, r7, #16
    1042:	4619      	mov	r1, r3
    1044:	68b8      	ldr	r0, [r7, #8]
    1046:	f7ff fd7b 	bl	b40 <decstr_to_int>
    104a:	4603      	mov	r3, r0
    104c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    104e:	693b      	ldr	r3, [r7, #16]
    1050:	68ba      	ldr	r2, [r7, #8]
    1052:	4413      	add	r3, r2
    1054:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	781b      	ldrb	r3, [r3, #0]
    105a:	2b6c      	cmp	r3, #108	; 0x6c
    105c:	d10c      	bne.n	1078 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    105e:	68bb      	ldr	r3, [r7, #8]
    1060:	3301      	adds	r3, #1
    1062:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1064:	68bb      	ldr	r3, [r7, #8]
    1066:	781b      	ldrb	r3, [r3, #0]
    1068:	2b6c      	cmp	r3, #108	; 0x6c
    106a:	d105      	bne.n	1078 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    106c:	68bb      	ldr	r3, [r7, #8]
    106e:	3301      	adds	r3, #1
    1070:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    1072:	2301      	movs	r3, #1
    1074:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    1078:	68bb      	ldr	r3, [r7, #8]
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	3b46      	subs	r3, #70	; 0x46
    107e:	2b32      	cmp	r3, #50	; 0x32
    1080:	f200 8254 	bhi.w	152c <am_util_stdio_vsprintf+0x5b8>
    1084:	a201      	add	r2, pc, #4	; (adr r2, 108c <am_util_stdio_vsprintf+0x118>)
    1086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    108a:	bf00      	nop
    108c:	000014b7 	.word	0x000014b7
    1090:	0000152d 	.word	0x0000152d
    1094:	0000152d 	.word	0x0000152d
    1098:	0000152d 	.word	0x0000152d
    109c:	0000152d 	.word	0x0000152d
    10a0:	0000152d 	.word	0x0000152d
    10a4:	0000152d 	.word	0x0000152d
    10a8:	0000152d 	.word	0x0000152d
    10ac:	0000152d 	.word	0x0000152d
    10b0:	0000152d 	.word	0x0000152d
    10b4:	0000152d 	.word	0x0000152d
    10b8:	0000152d 	.word	0x0000152d
    10bc:	0000152d 	.word	0x0000152d
    10c0:	0000152d 	.word	0x0000152d
    10c4:	0000152d 	.word	0x0000152d
    10c8:	0000152d 	.word	0x0000152d
    10cc:	0000152d 	.word	0x0000152d
    10d0:	0000152d 	.word	0x0000152d
    10d4:	00001253 	.word	0x00001253
    10d8:	0000152d 	.word	0x0000152d
    10dc:	0000152d 	.word	0x0000152d
    10e0:	0000152d 	.word	0x0000152d
    10e4:	0000152d 	.word	0x0000152d
    10e8:	0000152d 	.word	0x0000152d
    10ec:	0000152d 	.word	0x0000152d
    10f0:	0000152d 	.word	0x0000152d
    10f4:	0000152d 	.word	0x0000152d
    10f8:	0000152d 	.word	0x0000152d
    10fc:	0000152d 	.word	0x0000152d
    1100:	00001159 	.word	0x00001159
    1104:	0000137f 	.word	0x0000137f
    1108:	0000152d 	.word	0x0000152d
    110c:	000014b7 	.word	0x000014b7
    1110:	0000152d 	.word	0x0000152d
    1114:	0000152d 	.word	0x0000152d
    1118:	0000137f 	.word	0x0000137f
    111c:	0000152d 	.word	0x0000152d
    1120:	0000152d 	.word	0x0000152d
    1124:	0000152d 	.word	0x0000152d
    1128:	0000152d 	.word	0x0000152d
    112c:	0000152d 	.word	0x0000152d
    1130:	0000152d 	.word	0x0000152d
    1134:	0000152d 	.word	0x0000152d
    1138:	0000152d 	.word	0x0000152d
    113c:	0000152d 	.word	0x0000152d
    1140:	0000117f 	.word	0x0000117f
    1144:	0000152d 	.word	0x0000152d
    1148:	000012ed 	.word	0x000012ed
    114c:	0000152d 	.word	0x0000152d
    1150:	0000152d 	.word	0x0000152d
    1154:	0000124d 	.word	0x0000124d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	1d1a      	adds	r2, r3, #4
    115c:	607a      	str	r2, [r7, #4]
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	2b00      	cmp	r3, #0
    1168:	d005      	beq.n	1176 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	1c5a      	adds	r2, r3, #1
    116e:	60fa      	str	r2, [r7, #12]
    1170:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1174:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1178:	3301      	adds	r3, #1
    117a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    117c:	e1e6      	b.n	154c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	1d1a      	adds	r2, r3, #4
    1182:	607a      	str	r2, [r7, #4]
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1188:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    118a:	f7ff fdc7 	bl	d1c <simple_strlen>
    118e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1192:	2b00      	cmp	r3, #0
    1194:	dd2e      	ble.n	11f4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    119a:	429a      	cmp	r2, r3
    119c:	d22a      	bcs.n	11f4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    119e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11a2:	1ad3      	subs	r3, r2, r3
    11a4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11ac:	4619      	mov	r1, r3
    11ae:	68f8      	ldr	r0, [r7, #12]
    11b0:	f7ff fdd0 	bl	d54 <padbuffer>
    11b4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    11b6:	68fb      	ldr	r3, [r7, #12]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d001      	beq.n	11c0 <am_util_stdio_vsprintf+0x24c>
    11bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11be:	e000      	b.n	11c2 <am_util_stdio_vsprintf+0x24e>
    11c0:	2300      	movs	r3, #0
    11c2:	68fa      	ldr	r2, [r7, #12]
    11c4:	4413      	add	r3, r2
    11c6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    11c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11cc:	4413      	add	r3, r2
    11ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    11d0:	2300      	movs	r3, #0
    11d2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    11d4:	e00e      	b.n	11f4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	2b00      	cmp	r3, #0
    11da:	d005      	beq.n	11e8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    11dc:	68fb      	ldr	r3, [r7, #12]
    11de:	1c5a      	adds	r2, r3, #1
    11e0:	60fa      	str	r2, [r7, #12]
    11e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    11e4:	7812      	ldrb	r2, [r2, #0]
    11e6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    11e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11ea:	3301      	adds	r3, #1
    11ec:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    11ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f0:	3301      	adds	r3, #1
    11f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    11f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1ec      	bne.n	11d6 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    11fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11fe:	2b00      	cmp	r3, #0
    1200:	f000 81a1 	beq.w	1546 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1206:	425b      	negs	r3, r3
    1208:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    120e:	429a      	cmp	r2, r3
    1210:	f080 8199 	bcs.w	1546 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1214:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1218:	1ad3      	subs	r3, r2, r3
    121a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    121c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1220:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1222:	4619      	mov	r1, r3
    1224:	68f8      	ldr	r0, [r7, #12]
    1226:	f7ff fd95 	bl	d54 <padbuffer>
    122a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	2b00      	cmp	r3, #0
    1230:	d001      	beq.n	1236 <am_util_stdio_vsprintf+0x2c2>
    1232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1234:	e000      	b.n	1238 <am_util_stdio_vsprintf+0x2c4>
    1236:	2300      	movs	r3, #0
    1238:	68fa      	ldr	r2, [r7, #12]
    123a:	4413      	add	r3, r2
    123c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1242:	4413      	add	r3, r2
    1244:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1246:	2300      	movs	r3, #0
    1248:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    124a:	e17c      	b.n	1546 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    124c:	2301      	movs	r3, #1
    124e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1252:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1256:	2b00      	cmp	r3, #0
    1258:	d00a      	beq.n	1270 <am_util_stdio_vsprintf+0x2fc>
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	3307      	adds	r3, #7
    125e:	f023 0307 	bic.w	r3, r3, #7
    1262:	f103 0208 	add.w	r2, r3, #8
    1266:	607a      	str	r2, [r7, #4]
    1268:	cb18      	ldmia	r3, {r3, r4}
    126a:	e007      	b.n	127c <am_util_stdio_vsprintf+0x308>
    126c:	1000119c 	.word	0x1000119c
                                      va_arg(pArgs, uint32_t);
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	1d1a      	adds	r2, r3, #4
    1274:	607a      	str	r2, [r7, #4]
    1276:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1278:	f04f 0400 	mov.w	r4, #0
    127c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1282:	2b00      	cmp	r3, #0
    1284:	d01e      	beq.n	12c4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1286:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    128a:	f7ff fc35 	bl	af8 <ndigits_in_hex>
    128e:	4602      	mov	r2, r0
    1290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1292:	1a9b      	subs	r3, r3, r2
    1294:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    129a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    129c:	4619      	mov	r1, r3
    129e:	68f8      	ldr	r0, [r7, #12]
    12a0:	f7ff fd58 	bl	d54 <padbuffer>
    12a4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d001      	beq.n	12b0 <am_util_stdio_vsprintf+0x33c>
    12ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ae:	e000      	b.n	12b2 <am_util_stdio_vsprintf+0x33e>
    12b0:	2300      	movs	r3, #0
    12b2:	68fa      	ldr	r2, [r7, #12]
    12b4:	4413      	add	r3, r2
    12b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    12b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12bc:	4413      	add	r3, r2
    12be:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    12c0:	2300      	movs	r3, #0
    12c2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    12c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    12c8:	68fa      	ldr	r2, [r7, #12]
    12ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12ce:	f7ff fcc5 	bl	c5c <uint64_to_hexstr>
    12d2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12d4:	68fb      	ldr	r3, [r7, #12]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d003      	beq.n	12e2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    12da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12dc:	68fa      	ldr	r2, [r7, #12]
    12de:	4413      	add	r3, r2
    12e0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12e6:	4413      	add	r3, r2
    12e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12ea:	e12f      	b.n	154c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12f0:	2b00      	cmp	r3, #0
    12f2:	d008      	beq.n	1306 <am_util_stdio_vsprintf+0x392>
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	3307      	adds	r3, #7
    12f8:	f023 0307 	bic.w	r3, r3, #7
    12fc:	f103 0208 	add.w	r2, r3, #8
    1300:	607a      	str	r2, [r7, #4]
    1302:	cb18      	ldmia	r3, {r3, r4}
    1304:	e005      	b.n	1312 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	1d1a      	adds	r2, r3, #4
    130a:	607a      	str	r2, [r7, #4]
    130c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    130e:	f04f 0400 	mov.w	r4, #0
    1312:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1318:	2b00      	cmp	r3, #0
    131a:	d01e      	beq.n	135a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    131c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1320:	f7ff fbaa 	bl	a78 <ndigits_in_u64>
    1324:	4602      	mov	r2, r0
    1326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1328:	1a9b      	subs	r3, r3, r2
    132a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    132c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1330:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1332:	4619      	mov	r1, r3
    1334:	68f8      	ldr	r0, [r7, #12]
    1336:	f7ff fd0d 	bl	d54 <padbuffer>
    133a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	2b00      	cmp	r3, #0
    1340:	d001      	beq.n	1346 <am_util_stdio_vsprintf+0x3d2>
    1342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1344:	e000      	b.n	1348 <am_util_stdio_vsprintf+0x3d4>
    1346:	2300      	movs	r3, #0
    1348:	68fa      	ldr	r2, [r7, #12]
    134a:	4413      	add	r3, r2
    134c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1352:	4413      	add	r3, r2
    1354:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1356:	2300      	movs	r3, #0
    1358:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    135a:	68fa      	ldr	r2, [r7, #12]
    135c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1360:	f7ff fc34 	bl	bcc <uint64_to_str>
    1364:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	2b00      	cmp	r3, #0
    136a:	d003      	beq.n	1374 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    136e:	68fa      	ldr	r2, [r7, #12]
    1370:	4413      	add	r3, r2
    1372:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1378:	4413      	add	r3, r2
    137a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    137c:	e0e6      	b.n	154c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    137e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1382:	2b00      	cmp	r3, #0
    1384:	d008      	beq.n	1398 <am_util_stdio_vsprintf+0x424>
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	3307      	adds	r3, #7
    138a:	f023 0307 	bic.w	r3, r3, #7
    138e:	f103 0208 	add.w	r2, r3, #8
    1392:	607a      	str	r2, [r7, #4]
    1394:	cb18      	ldmia	r3, {r3, r4}
    1396:	e005      	b.n	13a4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	1d1a      	adds	r2, r3, #4
    139c:	607a      	str	r2, [r7, #4]
    139e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    13a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    13a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    13a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13ac:	2b00      	cmp	r3, #0
    13ae:	f174 0300 	sbcs.w	r3, r4, #0
    13b2:	da0a      	bge.n	13ca <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    13b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13b8:	425b      	negs	r3, r3
    13ba:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    13be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    13c2:	2301      	movs	r3, #1
    13c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    13c8:	e006      	b.n	13d8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    13ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    13d2:	2300      	movs	r3, #0
    13d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    13d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13da:	2b00      	cmp	r3, #0
    13dc:	d04a      	beq.n	1474 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    13de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    13e2:	4618      	mov	r0, r3
    13e4:	4621      	mov	r1, r4
    13e6:	f7ff fb69 	bl	abc <ndigits_in_i64>
    13ea:	4602      	mov	r2, r0
    13ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13ee:	1a9b      	subs	r3, r3, r2
    13f0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    13f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13f6:	2b00      	cmp	r3, #0
    13f8:	d011      	beq.n	141e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    13fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13fc:	3b01      	subs	r3, #1
    13fe:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1404:	2b30      	cmp	r3, #48	; 0x30
    1406:	d10a      	bne.n	141e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1408:	68fb      	ldr	r3, [r7, #12]
    140a:	2b00      	cmp	r3, #0
    140c:	d004      	beq.n	1418 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	1c5a      	adds	r2, r3, #1
    1412:	60fa      	str	r2, [r7, #12]
    1414:	222d      	movs	r2, #45	; 0x2d
    1416:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    141a:	3301      	adds	r3, #1
    141c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    141e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1422:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1424:	4619      	mov	r1, r3
    1426:	68f8      	ldr	r0, [r7, #12]
    1428:	f7ff fc94 	bl	d54 <padbuffer>
    142c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	2b00      	cmp	r3, #0
    1432:	d001      	beq.n	1438 <am_util_stdio_vsprintf+0x4c4>
    1434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1436:	e000      	b.n	143a <am_util_stdio_vsprintf+0x4c6>
    1438:	2300      	movs	r3, #0
    143a:	68fa      	ldr	r2, [r7, #12]
    143c:	4413      	add	r3, r2
    143e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1444:	4413      	add	r3, r2
    1446:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1448:	2300      	movs	r3, #0
    144a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    144c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1450:	2b00      	cmp	r3, #0
    1452:	d01e      	beq.n	1492 <am_util_stdio_vsprintf+0x51e>
    1454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1458:	2b20      	cmp	r3, #32
    145a:	d11a      	bne.n	1492 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	2b00      	cmp	r3, #0
    1460:	d004      	beq.n	146c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	1c5a      	adds	r2, r3, #1
    1466:	60fa      	str	r2, [r7, #12]
    1468:	222d      	movs	r2, #45	; 0x2d
    146a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    146c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    146e:	3301      	adds	r3, #1
    1470:	63fb      	str	r3, [r7, #60]	; 0x3c
    1472:	e00e      	b.n	1492 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1474:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1478:	2b00      	cmp	r3, #0
    147a:	d00a      	beq.n	1492 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	2b00      	cmp	r3, #0
    1480:	d004      	beq.n	148c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	1c5a      	adds	r2, r3, #1
    1486:	60fa      	str	r2, [r7, #12]
    1488:	222d      	movs	r2, #45	; 0x2d
    148a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    148e:	3301      	adds	r3, #1
    1490:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1492:	68fa      	ldr	r2, [r7, #12]
    1494:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1498:	f7ff fb98 	bl	bcc <uint64_to_str>
    149c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    149e:	68fb      	ldr	r3, [r7, #12]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d003      	beq.n	14ac <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    14a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14a6:	68fa      	ldr	r2, [r7, #12]
    14a8:	4413      	add	r3, r2
    14aa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    14ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14b0:	4413      	add	r3, r2
    14b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14b4:	e04a      	b.n	154c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d046      	beq.n	154a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	3307      	adds	r3, #7
    14c0:	f023 0307 	bic.w	r3, r3, #7
    14c4:	f103 0208 	add.w	r2, r3, #8
    14c8:	607a      	str	r2, [r7, #4]
    14ca:	cb18      	ldmia	r3, {r3, r4}
    14cc:	4618      	mov	r0, r3
    14ce:	4621      	mov	r1, r4
    14d0:	f7fe fdf6 	bl	c0 <__aeabi_d2f>
    14d4:	4603      	mov	r3, r0
    14d6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	2214      	movs	r2, #20
    14dc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    14de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    14e0:	68f9      	ldr	r1, [r7, #12]
    14e2:	6978      	ldr	r0, [r7, #20]
    14e4:	f7ff fc5c 	bl	da0 <ftoa>
    14e8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    14ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14ec:	2b00      	cmp	r3, #0
    14ee:	da14      	bge.n	151a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    14f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    14f6:	d102      	bne.n	14fe <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    14f8:	4b1e      	ldr	r3, [pc, #120]	; (1574 <am_util_stdio_vsprintf+0x600>)
    14fa:	62bb      	str	r3, [r7, #40]	; 0x28
    14fc:	e008      	b.n	1510 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    14fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1500:	f113 0f02 	cmn.w	r3, #2
    1504:	d102      	bne.n	150c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1506:	4b1c      	ldr	r3, [pc, #112]	; (1578 <am_util_stdio_vsprintf+0x604>)
    1508:	62bb      	str	r3, [r7, #40]	; 0x28
    150a:	e001      	b.n	1510 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    150c:	4b1b      	ldr	r3, [pc, #108]	; (157c <am_util_stdio_vsprintf+0x608>)
    150e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1514:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1516:	2303      	movs	r3, #3
    1518:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    151a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    151c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    151e:	4413      	add	r3, r2
    1520:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1524:	68fa      	ldr	r2, [r7, #12]
    1526:	4413      	add	r3, r2
    1528:	60fb      	str	r3, [r7, #12]
                }
                break;
    152a:	e00e      	b.n	154a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    152c:	68fb      	ldr	r3, [r7, #12]
    152e:	2b00      	cmp	r3, #0
    1530:	d005      	beq.n	153e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	1c5a      	adds	r2, r3, #1
    1536:	60fa      	str	r2, [r7, #12]
    1538:	68ba      	ldr	r2, [r7, #8]
    153a:	7812      	ldrb	r2, [r2, #0]
    153c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1540:	3301      	adds	r3, #1
    1542:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1544:	e002      	b.n	154c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1546:	bf00      	nop
    1548:	e000      	b.n	154c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    154a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    154c:	68bb      	ldr	r3, [r7, #8]
    154e:	3301      	adds	r3, #1
    1550:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    1552:	68bb      	ldr	r3, [r7, #8]
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	f47f ad17 	bne.w	f8a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	2b00      	cmp	r3, #0
    1560:	d002      	beq.n	1568 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	2200      	movs	r2, #0
    1566:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    156a:	4618      	mov	r0, r3
    156c:	3754      	adds	r7, #84	; 0x54
    156e:	46bd      	mov	sp, r7
    1570:	bd90      	pop	{r4, r7, pc}
    1572:	bf00      	nop
    1574:	00302e30 	.word	0x00302e30
    1578:	00232e23 	.word	0x00232e23
    157c:	003f2e3f 	.word	0x003f2e3f

00001580 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1580:	b40f      	push	{r0, r1, r2, r3}
    1582:	b580      	push	{r7, lr}
    1584:	b082      	sub	sp, #8
    1586:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1588:	f107 0314 	add.w	r3, r7, #20
    158c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    158e:	683a      	ldr	r2, [r7, #0]
    1590:	6939      	ldr	r1, [r7, #16]
    1592:	4808      	ldr	r0, [pc, #32]	; (15b4 <am_util_stdio_printf+0x34>)
    1594:	f7ff fcee 	bl	f74 <am_util_stdio_vsprintf>
    1598:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    159a:	4b07      	ldr	r3, [pc, #28]	; (15b8 <am_util_stdio_printf+0x38>)
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	4805      	ldr	r0, [pc, #20]	; (15b4 <am_util_stdio_printf+0x34>)
    15a0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    15a2:	687b      	ldr	r3, [r7, #4]
}
    15a4:	4618      	mov	r0, r3
    15a6:	3708      	adds	r7, #8
    15a8:	46bd      	mov	sp, r7
    15aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    15ae:	b004      	add	sp, #16
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	1000109c 	.word	0x1000109c
    15b8:	100017bc 	.word	0x100017bc

000015bc <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    15bc:	b580      	push	{r7, lr}
    15be:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    15c0:	4802      	ldr	r0, [pc, #8]	; (15cc <am_util_stdio_terminal_clear+0x10>)
    15c2:	f7ff ffdd 	bl	1580 <am_util_stdio_printf>
}
    15c6:	bf00      	nop
    15c8:	bd80      	pop	{r7, pc}
    15ca:	bf00      	nop
    15cc:	00002f78 	.word	0x00002f78

000015d0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    15d0:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    15d2:	f001 faf9 	bl	2bc8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    15d6:	f001 fb65 	bl	2ca4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    15da:	f001 fc79 	bl	2ed0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    15de:	2001      	movs	r0, #1
    15e0:	f001 fb70 	bl	2cc4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    15e4:	2001      	movs	r0, #1
    15e6:	f000 f905 	bl	17f4 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    15ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    15ee:	f001 bb77 	b.w	2ce0 <am_hal_rtc_osc_disable>
    15f2:	bf00      	nop

000015f4 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    15f4:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15f6:	4b17      	ldr	r3, [pc, #92]	; (1654 <am_bsp_debug_printf_enable+0x60>)
    15f8:	6818      	ldr	r0, [r3, #0]
    15fa:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    15fe:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1600:	d001      	beq.n	1606 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1602:	b007      	add	sp, #28
    1604:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1606:	4a14      	ldr	r2, [pc, #80]	; (1658 <am_bsp_debug_printf_enable+0x64>)
    1608:	4914      	ldr	r1, [pc, #80]	; (165c <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    160a:	4d15      	ldr	r5, [pc, #84]	; (1660 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    160c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    160e:	a806      	add	r0, sp, #24
    1610:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1614:	f001 fc06 	bl	2e24 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1618:	f3ef 8310 	mrs	r3, PRIMASK
    161c:	9300      	str	r3, [sp, #0]
    161e:	b672      	cpsid	i
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <am_bsp_debug_printf_enable+0x70>)
    1622:	4d11      	ldr	r5, [pc, #68]	; (1668 <am_bsp_debug_printf_enable+0x74>)
    1624:	4811      	ldr	r0, [pc, #68]	; (166c <am_bsp_debug_printf_enable+0x78>)
    1626:	4912      	ldr	r1, [pc, #72]	; (1670 <am_bsp_debug_printf_enable+0x7c>)
    1628:	2373      	movs	r3, #115	; 0x73
    162a:	6013      	str	r3, [r2, #0]
    162c:	682b      	ldr	r3, [r5, #0]
    162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1632:	602b      	str	r3, [r5, #0]
    1634:	6805      	ldr	r5, [r0, #0]
    1636:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    163a:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    163e:	6003      	str	r3, [r0, #0]
    1640:	6808      	ldr	r0, [r1, #0]
    1642:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1646:	600d      	str	r5, [r1, #0]
    1648:	6014      	str	r4, [r2, #0]
    164a:	9c00      	ldr	r4, [sp, #0]
    164c:	f384 8810 	msr	PRIMASK, r4
}
    1650:	b007      	add	sp, #28
    1652:	bd30      	pop	{r4, r5, pc}
    1654:	100011a0 	.word	0x100011a0
    1658:	e0000e80 	.word	0xe0000e80
    165c:	00150511 	.word	0x00150511
    1660:	000f4240 	.word	0x000f4240
    1664:	40010060 	.word	0x40010060
    1668:	40010054 	.word	0x40010054
    166c:	40010028 	.word	0x40010028
    1670:	40010108 	.word	0x40010108

00001674 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1674:	f001 b942 	b.w	28fc <am_hal_itm_print>

00001678 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    167c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1680:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1682:	7863      	ldrb	r3, [r4, #1]
    1684:	78e2      	ldrb	r2, [r4, #3]
    1686:	7925      	ldrb	r5, [r4, #4]
    1688:	79a1      	ldrb	r1, [r4, #6]
    168a:	00be      	lsls	r6, r7, #2
    168c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1690:	f006 0304 	and.w	r3, r6, #4
    1694:	f00e 0602 	and.w	r6, lr, #2
    1698:	431e      	orrs	r6, r3
    169a:	f042 0201 	orr.w	r2, r2, #1
    169e:	79e3      	ldrb	r3, [r4, #7]
    16a0:	01ed      	lsls	r5, r5, #7
    16a2:	4316      	orrs	r6, r2
    16a4:	b2ed      	uxtb	r5, r5
    16a6:	7a22      	ldrb	r2, [r4, #8]
    16a8:	0289      	lsls	r1, r1, #10
    16aa:	432e      	orrs	r6, r5
    16ac:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    16b0:	7a65      	ldrb	r5, [r4, #9]
    16b2:	02db      	lsls	r3, r3, #11
    16b4:	430e      	orrs	r6, r1
    16b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    16ba:	0312      	lsls	r2, r2, #12
    16bc:	7aa1      	ldrb	r1, [r4, #10]
    16be:	431e      	orrs	r6, r3
    16c0:	042d      	lsls	r5, r5, #16
    16c2:	b293      	uxth	r3, r2
    16c4:	7ae2      	ldrb	r2, [r4, #11]
    16c6:	431e      	orrs	r6, r3
    16c8:	0509      	lsls	r1, r1, #20
    16ca:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    16ce:	0612      	lsls	r2, r2, #24
    16d0:	4333      	orrs	r3, r6
    16d2:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    16d6:	00bf      	lsls	r7, r7, #2
    16d8:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    16dc:	4333      	orrs	r3, r6
    16de:	430b      	orrs	r3, r1
    16e0:	f007 0508 	and.w	r5, r7, #8
    16e4:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    16e6:	f001 f967 	bl	29b8 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    16ea:	482c      	ldr	r0, [pc, #176]	; (179c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16ec:	4b2c      	ldr	r3, [pc, #176]	; (17a0 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    16ee:	6005      	str	r5, [r0, #0]
    16f0:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16f2:	681e      	ldr	r6, [r3, #0]
    16f4:	0777      	lsls	r7, r6, #29
    16f6:	d41e      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    16f8:	681f      	ldr	r7, [r3, #0]
    16fa:	077e      	lsls	r6, r7, #29
    16fc:	f102 32ff 	add.w	r2, r2, #4294967295
    1700:	d419      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    1702:	6819      	ldr	r1, [r3, #0]
    1704:	074f      	lsls	r7, r1, #29
    1706:	d416      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    1708:	6818      	ldr	r0, [r3, #0]
    170a:	0746      	lsls	r6, r0, #29
    170c:	d413      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    170e:	681e      	ldr	r6, [r3, #0]
    1710:	0770      	lsls	r0, r6, #29
    1712:	d410      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    1714:	681f      	ldr	r7, [r3, #0]
    1716:	0779      	lsls	r1, r7, #29
    1718:	d40d      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    171a:	6819      	ldr	r1, [r3, #0]
    171c:	074f      	lsls	r7, r1, #29
    171e:	d40a      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    1720:	6818      	ldr	r0, [r3, #0]
    1722:	0746      	lsls	r6, r0, #29
    1724:	d407      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    1726:	681e      	ldr	r6, [r3, #0]
    1728:	0770      	lsls	r0, r6, #29
    172a:	d404      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    172c:	681f      	ldr	r7, [r3, #0]
    172e:	0779      	lsls	r1, r7, #29
    1730:	d401      	bmi.n	1736 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1732:	3a09      	subs	r2, #9
    1734:	d1dd      	bne.n	16f2 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1736:	4b1a      	ldr	r3, [pc, #104]	; (17a0 <am_hal_cachectrl_enable+0x128>)
    1738:	681a      	ldr	r2, [r3, #0]
    173a:	f042 0101 	orr.w	r1, r2, #1
    173e:	6019      	str	r1, [r3, #0]
    1740:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1742:	6818      	ldr	r0, [r3, #0]
    1744:	0740      	lsls	r0, r0, #29
    1746:	d41e      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1748:	681e      	ldr	r6, [r3, #0]
    174a:	0771      	lsls	r1, r6, #29
    174c:	f102 32ff 	add.w	r2, r2, #4294967295
    1750:	d419      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1752:	681f      	ldr	r7, [r3, #0]
    1754:	077f      	lsls	r7, r7, #29
    1756:	d416      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1758:	6819      	ldr	r1, [r3, #0]
    175a:	074e      	lsls	r6, r1, #29
    175c:	d413      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    175e:	6818      	ldr	r0, [r3, #0]
    1760:	0740      	lsls	r0, r0, #29
    1762:	d410      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1764:	681e      	ldr	r6, [r3, #0]
    1766:	0771      	lsls	r1, r6, #29
    1768:	d40d      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    176a:	681f      	ldr	r7, [r3, #0]
    176c:	077f      	lsls	r7, r7, #29
    176e:	d40a      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1770:	6819      	ldr	r1, [r3, #0]
    1772:	074e      	lsls	r6, r1, #29
    1774:	d407      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    1776:	6818      	ldr	r0, [r3, #0]
    1778:	0740      	lsls	r0, r0, #29
    177a:	d404      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    177c:	681e      	ldr	r6, [r3, #0]
    177e:	0771      	lsls	r1, r6, #29
    1780:	d401      	bmi.n	1786 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1782:	3a09      	subs	r2, #9
    1784:	d1dd      	bne.n	1742 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1786:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1788:	4f04      	ldr	r7, [pc, #16]	; (179c <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    178a:	0223      	lsls	r3, r4, #8
    178c:	f403 7100 	and.w	r1, r3, #512	; 0x200
    1790:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1794:	4311      	orrs	r1, r2
    1796:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1798:	6039      	str	r1, [r7, #0]
    179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    179c:	40018000 	.word	0x40018000
    17a0:	40018008 	.word	0x40018008

000017a4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    17a4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    17a6:	4604      	mov	r4, r0
    17a8:	b120      	cbz	r0, 17b4 <am_hal_clkgen_sysclk_select+0x10>
    17aa:	4a06      	ldr	r2, [pc, #24]	; (17c4 <am_hal_clkgen_sysclk_select+0x20>)
    17ac:	4806      	ldr	r0, [pc, #24]	; (17c8 <am_hal_clkgen_sysclk_select+0x24>)
    17ae:	2150      	movs	r1, #80	; 0x50
    17b0:	f000 f9c8 	bl	1b44 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17b6:	4906      	ldr	r1, [pc, #24]	; (17d0 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17b8:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    17ba:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17bc:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17be:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    17c0:	601a      	str	r2, [r3, #0]
    17c2:	bd10      	pop	{r4, pc}
    17c4:	00002f98 	.word	0x00002f98
    17c8:	00002fd0 	.word	0x00002fd0
    17cc:	40004014 	.word	0x40004014
    17d0:	40004018 	.word	0x40004018

000017d4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    17d6:	4905      	ldr	r1, [pc, #20]	; (17ec <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    17d8:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    17da:	4805      	ldr	r0, [pc, #20]	; (17f0 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    17dc:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    17e0:	bf08      	it	eq
    17e2:	4608      	moveq	r0, r1
    17e4:	4770      	bx	lr
    17e6:	bf00      	nop
    17e8:	40004018 	.word	0x40004018
    17ec:	02dc6c00 	.word	0x02dc6c00
    17f0:	016e3600 	.word	0x016e3600

000017f4 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    17f4:	0783      	lsls	r3, r0, #30
    17f6:	d003      	beq.n	1800 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    17f8:	4a02      	ldr	r2, [pc, #8]	; (1804 <am_hal_clkgen_osc_stop+0x10>)
    17fa:	6813      	ldr	r3, [r2, #0]
    17fc:	4318      	orrs	r0, r3
    17fe:	6010      	str	r0, [r2, #0]
    1800:	4770      	bx	lr
    1802:	bf00      	nop
    1804:	4000400c 	.word	0x4000400c

00001808 <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    1808:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    180a:	b284      	uxth	r4, r0

    while ( ui32Status )
    180c:	b184      	cbz	r4, 1830 <am_hal_ctimer_int_service+0x28>
    180e:	4e09      	ldr	r6, [pc, #36]	; (1834 <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1810:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        // Pick one of any remaining active interrupt bits
        //
#ifdef __IAR_SYSTEMS_ICC__
        ui32Clz = __CLZ(ui32Status);
#else
        ui32Clz = __builtin_clz(ui32Status);
    1814:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    1818:	f1c3 021f 	rsb	r2, r3, #31
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    181c:	fa25 f003 	lsr.w	r0, r5, r3

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    1820:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1824:	ea24 0400 	bic.w	r4, r4, r0
        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
        if ( pfnHandler )
    1828:	b101      	cbz	r1, 182c <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    182a:	4788      	blx	r1

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;

    while ( ui32Status )
    182c:	2c00      	cmp	r4, #0
    182e:	d1f1      	bne.n	1814 <am_hal_ctimer_int_service+0xc>
    1830:	bd70      	pop	{r4, r5, r6, pc}
    1832:	bf00      	nop
    1834:	100017c0 	.word	0x100017c0

00001838 <am_hal_ctimer_int_register>:
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1838:	2880      	cmp	r0, #128	; 0x80
//
//*****************************************************************************
void
am_hal_ctimer_int_register(uint32_t ui32Interrupt,
                           am_hal_ctimer_handler_t pfnHandler)
{
    183a:	b510      	push	{r4, lr}
    183c:	460c      	mov	r4, r1
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    183e:	d050      	beq.n	18e2 <am_hal_ctimer_int_register+0xaa>
    1840:	d913      	bls.n	186a <am_hal_ctimer_int_register+0x32>
    1842:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1846:	d02b      	beq.n	18a0 <am_hal_ctimer_int_register+0x68>
    1848:	d92e      	bls.n	18a8 <am_hal_ctimer_int_register+0x70>
    184a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    184e:	d025      	beq.n	189c <am_hal_ctimer_int_register+0x64>
    1850:	d935      	bls.n	18be <am_hal_ctimer_int_register+0x86>
    1852:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    1856:	d038      	beq.n	18ca <am_hal_ctimer_int_register+0x92>
    1858:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        case AM_REG_CTIMER_INTEN_CTMRA3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C1INT_S;
    185c:	bf08      	it	eq
    185e:	220f      	moveq	r2, #15
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1860:	d10c      	bne.n	187c <am_hal_ctimer_int_register+0x44>

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    }

    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1862:	4b23      	ldr	r3, [pc, #140]	; (18f0 <am_hal_ctimer_int_register+0xb8>)
    1864:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1868:	bd10      	pop	{r4, pc}
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    186a:	2808      	cmp	r0, #8
    186c:	d037      	beq.n	18de <am_hal_ctimer_int_register+0xa6>
    186e:	d90d      	bls.n	188c <am_hal_ctimer_int_register+0x54>
    1870:	2820      	cmp	r0, #32
    1872:	d032      	beq.n	18da <am_hal_ctimer_int_register+0xa2>
    1874:	2840      	cmp	r0, #64	; 0x40
    1876:	d02e      	beq.n	18d6 <am_hal_ctimer_int_register+0x9e>
    1878:	2810      	cmp	r0, #16
    187a:	d013      	beq.n	18a4 <am_hal_ctimer_int_register+0x6c>
        case AM_REG_CTIMER_INTEN_CTMRB3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C1INT_S;
            break;

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    187c:	4a1d      	ldr	r2, [pc, #116]	; (18f4 <am_hal_ctimer_int_register+0xbc>)
    187e:	481e      	ldr	r0, [pc, #120]	; (18f8 <am_hal_ctimer_int_register+0xc0>)
    1880:	f240 119b 	movw	r1, #411	; 0x19b
    1884:	f000 f95e 	bl	1b44 <am_hal_debug_error>
//*****************************************************************************
void
am_hal_ctimer_int_register(uint32_t ui32Interrupt,
                           am_hal_ctimer_handler_t pfnHandler)
{
    uint32_t intIdx = 0;
    1888:	2200      	movs	r2, #0
    188a:	e7ea      	b.n	1862 <am_hal_ctimer_int_register+0x2a>

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    188c:	2802      	cmp	r0, #2
    188e:	d02c      	beq.n	18ea <am_hal_ctimer_int_register+0xb2>
    1890:	2804      	cmp	r0, #4
    1892:	d028      	beq.n	18e6 <am_hal_ctimer_int_register+0xae>
    1894:	2801      	cmp	r0, #1
    1896:	d1f1      	bne.n	187c <am_hal_ctimer_int_register+0x44>
    {
        case AM_REG_CTIMER_INTEN_CTMRA0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C0INT_S;
    1898:	2200      	movs	r2, #0
    189a:	e7e2      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C1INT_S;
    189c:	220d      	movs	r2, #13
            break;
    189e:	e7e0      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C1INT_S;
    18a0:	220b      	movs	r2, #11
            break;
    18a2:	e7de      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C0INT_S;
    18a4:	2204      	movs	r2, #4
            break;
    18a6:	e7dc      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    18a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    18ac:	d011      	beq.n	18d2 <am_hal_ctimer_int_register+0x9a>
    18ae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    18b2:	d00c      	beq.n	18ce <am_hal_ctimer_int_register+0x96>
    18b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    18b8:	d1e0      	bne.n	187c <am_hal_ctimer_int_register+0x44>
        case AM_REG_CTIMER_INTEN_CTMRB3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C1INT_S;
    18ba:	2208      	movs	r2, #8
            break;
    18bc:	e7d1      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    18be:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
        case AM_REG_CTIMER_INTEN_CTMRB1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C1INT_S;
    18c2:	bf08      	it	eq
    18c4:	220c      	moveq	r2, #12
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    18c6:	d0cc      	beq.n	1862 <am_hal_ctimer_int_register+0x2a>
    18c8:	e7d8      	b.n	187c <am_hal_ctimer_int_register+0x44>
        case AM_REG_CTIMER_INTEN_CTMRB2C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
    18ca:	220e      	movs	r2, #14
            break;
    18cc:	e7c9      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA1C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C1INT_S;
    18ce:	220a      	movs	r2, #10
            break;
    18d0:	e7c7      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB0C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C1INT_S;
    18d2:	2209      	movs	r2, #9
            break;
    18d4:	e7c5      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C0INT_S;
    18d6:	2206      	movs	r2, #6
            break;
    18d8:	e7c3      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB2C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C0INT_S;
    18da:	2205      	movs	r2, #5
            break;
    18dc:	e7c1      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C0INT_S;
    18de:	2203      	movs	r2, #3
            break;
    18e0:	e7bf      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C0INT_S;
    18e2:	2207      	movs	r2, #7
            break;
    18e4:	e7bd      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRB0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRA1C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C0INT_S;
    18e6:	2202      	movs	r2, #2
            break;
    18e8:	e7bb      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
        case AM_REG_CTIMER_INTEN_CTMRA0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C0INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB0C0INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C0INT_S;
    18ea:	2201      	movs	r2, #1
    18ec:	e7b9      	b.n	1862 <am_hal_ctimer_int_register+0x2a>
    18ee:	bf00      	nop
    18f0:	100017c0 	.word	0x100017c0
    18f4:	00002fe8 	.word	0x00002fe8
    18f8:	00003010 	.word	0x00003010

000018fc <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    18fc:	b410      	push	{r4}
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    18fe:	680c      	ldr	r4, [r1, #0]
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1900:	688b      	ldr	r3, [r1, #8]
    1902:	684a      	ldr	r2, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1904:	f3ef 8110 	mrs	r1, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1908:	b083      	sub	sp, #12
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    190a:	2c00      	cmp	r4, #0
    190c:	bf18      	it	ne
    190e:	f04f 4400 	movne.w	r4, #2147483648	; 0x80000000
    // Start preparing the configuration word for this timer. The configuration
    // values for Timer A and Timer B provided in the config structure should
    // match the register definitions already, so we will mostly just need to
    // OR them together.
    //
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1912:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1916:	4323      	orrs	r3, r4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1918:	9101      	str	r1, [sp, #4]
    191a:	b672      	cpsid	i

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    191c:	4c29      	ldr	r4, [pc, #164]	; (19c4 <am_hal_ctimer_config+0xc8>)
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    191e:	4a2a      	ldr	r2, [pc, #168]	; (19c8 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1920:	0100      	lsls	r0, r0, #4
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1922:	5103      	str	r3, [r0, r4]
    uint32_t ui32TimerASrc, ui32CtimerNum;

    //
    // Check STimer to see if it is using HFRC.
    //
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1924:	6811      	ldr	r1, [r2, #0]
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1926:	f001 0c0f 	and.w	ip, r1, #15
    192a:	f10c 33ff 	add.w	r3, ip, #4294967295
    192e:	2b01      	cmp	r3, #1
    1930:	d941      	bls.n	19b6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1932:	6824      	ldr	r4, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1934:	f3c4 0244 	ubfx	r2, r4, #1, #5
    1938:	1e50      	subs	r0, r2, #1
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    193a:	f3c4 4144 	ubfx	r1, r4, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    193e:	2804      	cmp	r0, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1940:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1944:	d937      	bls.n	19b6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1946:	2b04      	cmp	r3, #4
    1948:	d935      	bls.n	19b6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    194a:	4c20      	ldr	r4, [pc, #128]	; (19cc <am_hal_ctimer_config+0xd0>)
    194c:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    194e:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1952:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1956:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    195a:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    195c:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1960:	d929      	bls.n	19b6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1962:	2b04      	cmp	r3, #4
    1964:	d927      	bls.n	19b6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1966:	4c1a      	ldr	r4, [pc, #104]	; (19d0 <am_hal_ctimer_config+0xd4>)
    1968:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    196a:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    196e:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1972:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1976:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1978:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    197c:	d91b      	bls.n	19b6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    197e:	2b04      	cmp	r3, #4
    1980:	d919      	bls.n	19b6 <am_hal_ctimer_config+0xba>
    //
    // Determine if this timer is using HFRC as the clock source.
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1982:	4c14      	ldr	r4, [pc, #80]	; (19d4 <am_hal_ctimer_config+0xd8>)
    1984:	6820      	ldr	r0, [r4, #0]
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1986:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    198a:	f10c 32ff 	add.w	r2, ip, #4294967295
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    198e:	f3c0 4144 	ubfx	r1, r0, #17, #5
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1992:	2a04      	cmp	r2, #4
    // The value we are looking for is HFRC_DIV4 to HFRC_DIV4K.
    // Get the clock sources and 0-base the extracted value.
    //
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
                    AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4);
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1994:	f101 33ff 	add.w	r3, r1, #4294967295
                    AM_ENUMX(CTIMER, CTRL0, TMRB0CLK, HFRC_DIV4);

    //
    // If the source value is 0 to (HFRC_DIV4K - HFRC_DIV4), then it's HFRC.
    //
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1998:	d90d      	bls.n	19b6 <am_hal_ctimer_config+0xba>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    199a:	2b04      	cmp	r3, #4
    199c:	d90b      	bls.n	19b6 <am_hal_ctimer_config+0xba>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    199e:	4c0e      	ldr	r4, [pc, #56]	; (19d8 <am_hal_ctimer_config+0xdc>)
    19a0:	6820      	ldr	r0, [r4, #0]
    19a2:	f040 0204 	orr.w	r2, r0, #4
    19a6:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19a8:	9801      	ldr	r0, [sp, #4]
    19aa:	f380 8810 	msr	PRIMASK, r0

} // am_hal_ctimer_config()
    19ae:	b003      	add	sp, #12
    19b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    19b4:	4770      	bx	lr
    //
    // If all of the clock sources are not HRFC disable LDO when sleeping if timers are enabled.
    //
    if ( timers_use_hfrc() )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    19b6:	4908      	ldr	r1, [pc, #32]	; (19d8 <am_hal_ctimer_config+0xdc>)
    19b8:	680b      	ldr	r3, [r1, #0]
    19ba:	f023 0404 	bic.w	r4, r3, #4
    19be:	600c      	str	r4, [r1, #0]
    19c0:	e7f2      	b.n	19a8 <am_hal_ctimer_config+0xac>
    19c2:	bf00      	nop
    19c4:	4000800c 	.word	0x4000800c
    19c8:	40008100 	.word	0x40008100
    19cc:	4000801c 	.word	0x4000801c
    19d0:	4000802c 	.word	0x4000802c
    19d4:	4000803c 	.word	0x4000803c
    19d8:	40021020 	.word	0x40021020

000019dc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    19dc:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    19de:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    19e2:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    19e4:	0100      	lsls	r0, r0, #4
    19e6:	4a09      	ldr	r2, [pc, #36]	; (1a0c <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    19e8:	9301      	str	r3, [sp, #4]
    19ea:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    19ec:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    19ee:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    19f2:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    19f6:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    19fa:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    19fc:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19fe:	9801      	ldr	r0, [sp, #4]
    1a00:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    1a04:	b003      	add	sp, #12
    1a06:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a0a:	4770      	bx	lr
    1a0c:	4000800c 	.word	0x4000800c

00001a10 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a10:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a12:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a16:	0100      	lsls	r0, r0, #4
    1a18:	4a06      	ldr	r2, [pc, #24]	; (1a34 <am_hal_ctimer_stop+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a1a:	9301      	str	r3, [sp, #4]
    1a1c:	b672      	cpsid	i

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    1a1e:	5883      	ldr	r3, [r0, r2]
    1a20:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1a24:	ea23 0301 	bic.w	r3, r3, r1
    1a28:	5083      	str	r3, [r0, r2]
                                    AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a2a:	9801      	ldr	r0, [sp, #4]
    1a2c:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_stop()
    1a30:	b002      	add	sp, #8
    1a32:	4770      	bx	lr
    1a34:	4000800c 	.word	0x4000800c

00001a38 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a38:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a3a:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a3e:	0100      	lsls	r0, r0, #4
    1a40:	4a06      	ldr	r2, [pc, #24]	; (1a5c <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a42:	9301      	str	r3, [sp, #4]
    1a44:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1a46:	5883      	ldr	r3, [r0, r2]
    1a48:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1a4c:	4319      	orrs	r1, r3
    1a4e:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a50:	9801      	ldr	r0, [sp, #4]
    1a52:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    1a56:	b002      	add	sp, #8
    1a58:	4770      	bx	lr
    1a5a:	bf00      	nop
    1a5c:	4000800c 	.word	0x4000800c

00001a60 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a60:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a62:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a66:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1a68:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a6a:	4d1c      	ldr	r5, [pc, #112]	; (1adc <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a6c:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    1a6e:	4e1c      	ldr	r6, [pc, #112]	; (1ae0 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1a70:	4f1c      	ldr	r7, [pc, #112]	; (1ae4 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a72:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a74:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    1a78:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a7a:	d01a      	beq.n	1ab2 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a7c:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    1a80:	2d80      	cmp	r5, #128	; 0x80
    1a82:	d01b      	beq.n	1abc <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a88:	2500      	movs	r5, #0
    1a8a:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1a8c:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a8e:	d01c      	beq.n	1aca <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a90:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    1a94:	d01e      	beq.n	1ad4 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a96:	0c21      	lsrs	r1, r4, #16
    1a98:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1a9a:	b291      	uxth	r1, r2
    1a9c:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1a9e:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1aa2:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1aa4:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1aa6:	9801      	ldr	r0, [sp, #4]
    1aa8:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    1aac:	b002      	add	sp, #8
    1aae:	bcf0      	pop	{r4, r5, r6, r7}
    1ab0:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ab2:	0c25      	lsrs	r5, r4, #16
    1ab4:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    1ab8:	2c80      	cmp	r4, #128	; 0x80
    1aba:	d10a      	bne.n	1ad2 <am_hal_ctimer_period_set+0x72>
    1abc:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    1abe:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    1ac0:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ac6:	4299      	cmp	r1, r3
    1ac8:	d1e2      	bne.n	1a90 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1aca:	b297      	uxth	r7, r2
    1acc:	433d      	orrs	r5, r7
    1ace:	5185      	str	r5, [r0, r6]
    1ad0:	e7e9      	b.n	1aa6 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ad2:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ad4:	b296      	uxth	r6, r2
    1ad6:	4335      	orrs	r5, r6
    1ad8:	51c5      	str	r5, [r0, r7]
    1ada:	e7e4      	b.n	1aa6 <am_hal_ctimer_period_set+0x46>
    1adc:	4000800c 	.word	0x4000800c
    1ae0:	40008004 	.word	0x40008004
    1ae4:	40008008 	.word	0x40008008

00001ae8 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1ae8:	b082      	sub	sp, #8
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1aea:	f3ef 8310 	mrs	r3, PRIMASK
    1aee:	9301      	str	r3, [sp, #4]
    1af0:	b672      	cpsid	i

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1af2:	4904      	ldr	r1, [pc, #16]	; (1b04 <am_hal_ctimer_int_enable+0x1c>)
    1af4:	680a      	ldr	r2, [r1, #0]
    1af6:	4310      	orrs	r0, r2
    1af8:	6008      	str	r0, [r1, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1afa:	9801      	ldr	r0, [sp, #4]
    1afc:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_int_enable()
    1b00:	b002      	add	sp, #8
    1b02:	4770      	bx	lr
    1b04:	40008200 	.word	0x40008200

00001b08 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1b08:	4b01      	ldr	r3, [pc, #4]	; (1b10 <am_hal_ctimer_int_clear+0x8>)
    1b0a:	6018      	str	r0, [r3, #0]
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop
    1b10:	40008208 	.word	0x40008208

00001b14 <am_hal_ctimer_int_status_get>:
{
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    1b14:	b910      	cbnz	r0, 1b1c <am_hal_ctimer_int_status_get+0x8>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    1b16:	4b09      	ldr	r3, [pc, #36]	; (1b3c <am_hal_ctimer_int_status_get+0x28>)
    1b18:	6818      	ldr	r0, [r3, #0]
    1b1a:	4770      	bx	lr
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    1b1c:	b082      	sub	sp, #8
        uint32_t u32RetVal;

        //
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM
    1b1e:	f3ef 8010 	mrs	r0, PRIMASK
    1b22:	9001      	str	r0, [sp, #4]
    1b24:	b672      	cpsid	i

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    1b26:	4a05      	ldr	r2, [pc, #20]	; (1b3c <am_hal_ctimer_int_status_get+0x28>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b28:	4905      	ldr	r1, [pc, #20]	; (1b40 <am_hal_ctimer_int_status_get+0x2c>)
        //
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    1b2a:	6810      	ldr	r0, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b2c:	680b      	ldr	r3, [r1, #0]

        //
        // Done with critical section.
        //
        AM_CRITICAL_END_ASM
    1b2e:	9a01      	ldr	r2, [sp, #4]
        // Begin critical section.
        //
        AM_CRITICAL_BEGIN_ASM

        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b30:	4018      	ands	r0, r3

        //
        // Done with critical section.
        //
        AM_CRITICAL_END_ASM
    1b32:	f382 8810 	msr	PRIMASK, r2
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    }
} // am_hal_ctimer_int_status_get()
    1b36:	b002      	add	sp, #8
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	40008204 	.word	0x40008204
    1b40:	40008200 	.word	0x40008200

00001b44 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1b44:	e7fe      	b.n	1b44 <am_hal_debug_error>
    1b46:	bf00      	nop

00001b48 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1b48:	4b01      	ldr	r3, [pc, #4]	; (1b50 <am_hal_flash_delay+0x8>)
    1b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b4c:	4708      	bx	r1
    1b4e:	bf00      	nop
    1b50:	1000103c 	.word	0x1000103c

00001b54 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1b54:	280f      	cmp	r0, #15
    1b56:	d80b      	bhi.n	1b70 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1b58:	2805      	cmp	r0, #5
    1b5a:	d013      	beq.n	1b84 <am_hal_interrupt_enable+0x30>
    1b5c:	2806      	cmp	r0, #6
    1b5e:	d017      	beq.n	1b90 <am_hal_interrupt_enable+0x3c>
    1b60:	2804      	cmp	r0, #4
    1b62:	d104      	bne.n	1b6e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1b64:	4a0d      	ldr	r2, [pc, #52]	; (1b9c <am_hal_interrupt_enable+0x48>)
    1b66:	6813      	ldr	r3, [r2, #0]
    1b68:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1b6c:	6010      	str	r0, [r2, #0]
    1b6e:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1b70:	f1a0 0310 	sub.w	r3, r0, #16
    1b74:	f003 0c1f 	and.w	ip, r3, #31
    1b78:	2001      	movs	r0, #1
    1b7a:	4909      	ldr	r1, [pc, #36]	; (1ba0 <am_hal_interrupt_enable+0x4c>)
    1b7c:	fa00 f20c 	lsl.w	r2, r0, ip
    1b80:	600a      	str	r2, [r1, #0]
    1b82:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1b84:	4805      	ldr	r0, [pc, #20]	; (1b9c <am_hal_interrupt_enable+0x48>)
    1b86:	6801      	ldr	r1, [r0, #0]
    1b88:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b8c:	6002      	str	r2, [r0, #0]
            break;
    1b8e:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1b90:	4902      	ldr	r1, [pc, #8]	; (1b9c <am_hal_interrupt_enable+0x48>)
    1b92:	680a      	ldr	r2, [r1, #0]
    1b94:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1b98:	600b      	str	r3, [r1, #0]
            break;
    1b9a:	4770      	bx	lr
    1b9c:	e000ed24 	.word	0xe000ed24
    1ba0:	e000e100 	.word	0xe000e100

00001ba4 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1ba4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1ba8:	b662      	cpsie	i
    __asm("    bx lr");
    1baa:	4770      	bx	lr

00001bac <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bac:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1bb0:	b672      	cpsid	i
    __asm("    bx lr");
    1bb2:	4770      	bx	lr

00001bb4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1bb4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1bb8:	4770      	bx	lr
    1bba:	bf00      	nop

00001bbc <internal_resync_fifoSize>:
#endif
__attribute__((naked))
static void
internal_resync_fifoSize(uint32_t wrOffset, uint32_t maxFifoSize, uint32_t hwFifoPtrRegAddr)
{
    __asm
    1bbc:	b418      	push	{r3, r4}

00001bbe <__internal_resync_fifoSize_loop>:
    1bbe:	6814      	ldr	r4, [r2, #0]
    1bc0:	f3c4 2307 	ubfx	r3, r4, #8, #8
    1bc4:	b2e4      	uxtb	r4, r4
    1bc6:	1b04      	subs	r4, r0, r4
    1bc8:	bf38      	it	cc
    1bca:	1864      	addcc	r4, r4, r1
    1bcc:	42a3      	cmp	r3, r4
    1bce:	d001      	beq.n	1bd4 <__internal_resync_fifosize_done>
    1bd0:	7054      	strb	r4, [r2, #1]
    1bd2:	e7f4      	b.n	1bbe <__internal_resync_fifoSize_loop>

00001bd4 <__internal_resync_fifosize_done>:
    1bd4:	bc18      	pop	{r3, r4}
    1bd6:	4770      	bx	lr

00001bd8 <am_hal_ios_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_config(am_hal_ios_config_t *psConfig)
{
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bda:	4604      	mov	r4, r0
    uint32_t ui32LRAMConfig;

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);
    1bdc:	2001      	movs	r0, #1
    1bde:	f000 fea7 	bl	2930 <am_hal_pwrctrl_periph_enable>

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1be2:	68a0      	ldr	r0, [r4, #8]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1be4:	68e3      	ldr	r3, [r4, #12]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1be6:	4a1c      	ldr	r2, [pc, #112]	; (1c58 <am_hal_ios_config+0x80>)
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1be8:	491c      	ldr	r1, [pc, #112]	; (1c5c <am_hal_ios_config+0x84>)
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1bea:	6010      	str	r0, [r2, #0]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1bec:	f103 45a0 	add.w	r5, r3, #1342177280	; 0x50000000
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1bf0:	f100 42a0 	add.w	r2, r0, #1342177280	; 0x50000000
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1bf4:	4f1a      	ldr	r7, [pc, #104]	; (1c60 <am_hal_ios_config+0x88>)
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1bf6:	600a      	str	r2, [r1, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1bf8:	1aa9      	subs	r1, r5, r2
    1bfa:	7039      	strb	r1, [r7, #0]
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1bfc:	4919      	ldr	r1, [pc, #100]	; (1c64 <am_hal_ios_config+0x8c>)
    1bfe:	6862      	ldr	r2, [r4, #4]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c00:	4e19      	ldr	r6, [pc, #100]	; (1c68 <am_hal_ios_config+0x90>)
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1c02:	680f      	ldr	r7, [r1, #0]

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c04:	6035      	str	r5, [r6, #0]
    1c06:	015b      	lsls	r3, r3, #5
    1c08:	0555      	lsls	r5, r2, #21
//
//*****************************************************************************
void
am_hal_ios_disable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1c0a:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
    1c0e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    1c12:	f005 537c 	and.w	r3, r5, #1056964608	; 0x3f000000
    1c16:	600f      	str	r7, [r1, #0]
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1c18:	4e14      	ldr	r6, [pc, #80]	; (1c6c <am_hal_ios_config+0x94>)

    //
    // Write the configuration register with the user's selected interface
    // characteristics.
    //
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    1c1a:	6825      	ldr	r5, [r4, #0]
    1c1c:	600d      	str	r5, [r1, #0]
    //
    // Caluclate the value for the IO Slave FIFO configuration register.
    //
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1c1e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
    1c22:	4313      	orrs	r3, r2
    1c24:	4303      	orrs	r3, r0
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1c26:	6033      	str	r3, [r6, #0]
//
//*****************************************************************************
void
am_hal_ios_enable(uint32_t ui32Module)
{
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    1c28:	680a      	ldr	r2, [r1, #0]
    1c2a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    1c2e:	600b      	str	r3, [r1, #0]
    am_hal_ios_enable(0);

    //
    // Initialize the FIFO pointer to the beginning of the FIFO section.
    //
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    1c30:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1c32:	f7ff ffbb 	bl	1bac <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1c36:	4b0e      	ldr	r3, [pc, #56]	; (1c70 <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1c38:	4a0e      	ldr	r2, [pc, #56]	; (1c74 <am_hal_ios_config+0x9c>)
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;

    //
    // Clear the FIFO update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1c3a:	2100      	movs	r1, #0
    ui32Primask = am_hal_interrupt_master_disable();

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1c3c:	2701      	movs	r7, #1
    1c3e:	601f      	str	r7, [r3, #0]

    //
    // Change the FIFO offset.
    //
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    1c40:	f846 5c04 	str.w	r5, [r6, #-4]

    //
    // Clear the FIFO update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1c44:	6019      	str	r1, [r3, #0]

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1c46:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    1c4a:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    1c4c:	f7ff ffb2 	bl	1bb4 <am_hal_interrupt_master_set>
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);

    //
    // Write the FIFO threshold register.
    //
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    1c50:	4809      	ldr	r0, [pc, #36]	; (1c78 <am_hal_ios_config+0xa0>)
    1c52:	6924      	ldr	r4, [r4, #16]
    1c54:	6004      	str	r4, [r0, #0]
    1c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c58:	100011a8 	.word	0x100011a8
    1c5c:	10001094 	.word	0x10001094
    1c60:	100011a4 	.word	0x100011a4
    1c64:	50000118 	.word	0x50000118
    1c68:	1000108c 	.word	0x1000108c
    1c6c:	50000104 	.word	0x50000104
    1c70:	5000010c 	.word	0x5000010c
    1c74:	10001090 	.word	0x10001090
    1c78:	50000108 	.word	0x50000108

00001c7c <am_hal_ios_host_int_set>:
am_hal_ios_host_int_set(uint32_t ui32Interrupt)
{
    //
    // Set a bit that will cause an interrupt to the host.
    //
    AM_REG(IOSLAVE, IOINTCTL) = AM_REG_IOSLAVE_IOINTCTL_IOINTSET(ui32Interrupt);
    1c7c:	4b01      	ldr	r3, [pc, #4]	; (1c84 <am_hal_ios_host_int_set+0x8>)
    1c7e:	0600      	lsls	r0, r0, #24
    1c80:	6018      	str	r0, [r3, #0]
    1c82:	4770      	bx	lr
    1c84:	50000120 	.word	0x50000120

00001c88 <am_hal_ios_access_int_enable>:
am_hal_ios_access_int_enable(uint32_t ui32Interrupt)
{
    //
    // OR the desired interrupt into the enable register.
    //
    AM_REG(IOSLAVE, REGACCINTEN) |= ui32Interrupt;
    1c88:	4a02      	ldr	r2, [pc, #8]	; (1c94 <am_hal_ios_access_int_enable+0xc>)
    1c8a:	6813      	ldr	r3, [r2, #0]
    1c8c:	4318      	orrs	r0, r3
    1c8e:	6010      	str	r0, [r2, #0]
    1c90:	4770      	bx	lr
    1c92:	bf00      	nop
    1c94:	50000210 	.word	0x50000210

00001c98 <am_hal_ios_access_int_clear>:
am_hal_ios_access_int_clear(uint32_t ui32Interrupt)
{
    //
    // Use the interrupt clear register to deactivate the chosen interrupt.
    //
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    1c98:	4b01      	ldr	r3, [pc, #4]	; (1ca0 <am_hal_ios_access_int_clear+0x8>)
    1c9a:	6018      	str	r0, [r3, #0]
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop
    1ca0:	50000218 	.word	0x50000218

00001ca4 <am_hal_ios_access_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    1ca4:	b910      	cbnz	r0, 1cac <am_hal_ios_access_int_status_get+0x8>
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);

    }
    else
    {
        return AM_REG(IOSLAVE, REGACCINTSTAT);
    1ca6:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <am_hal_ios_access_int_status_get+0x14>)
    1ca8:	6818      	ldr	r0, [r3, #0]
    }
}
    1caa:	4770      	bx	lr
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1cac:	4a02      	ldr	r2, [pc, #8]	; (1cb8 <am_hal_ios_access_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1cae:	4903      	ldr	r1, [pc, #12]	; (1cbc <am_hal_ios_access_int_status_get+0x18>)
uint32_t
am_hal_ios_access_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1cb0:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1cb2:	680b      	ldr	r3, [r1, #0]
    1cb4:	4018      	ands	r0, r3
    1cb6:	4770      	bx	lr
    1cb8:	50000214 	.word	0x50000214
    1cbc:	50000210 	.word	0x50000210

00001cc0 <am_hal_ios_int_enable>:
am_hal_ios_int_enable(uint32_t ui32Interrupt)
{
    //
    // OR the desired interrupt into the enable register.
    //
    AM_REG(IOSLAVE, INTEN) |= ui32Interrupt;
    1cc0:	4a02      	ldr	r2, [pc, #8]	; (1ccc <am_hal_ios_int_enable+0xc>)
    1cc2:	6813      	ldr	r3, [r2, #0]
    1cc4:	4318      	orrs	r0, r3
    1cc6:	6010      	str	r0, [r2, #0]
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	50000200 	.word	0x50000200

00001cd0 <am_hal_ios_int_clear>:
am_hal_ios_int_clear(uint32_t ui32Interrupt)
{
    //
    // Use the interrupt clear register to deactivate the chosen interrupt.
    //
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    1cd0:	4b01      	ldr	r3, [pc, #4]	; (1cd8 <am_hal_ios_int_clear+0x8>)
    1cd2:	6018      	str	r0, [r3, #0]
    1cd4:	4770      	bx	lr
    1cd6:	bf00      	nop
    1cd8:	50000208 	.word	0x50000208

00001cdc <am_hal_ios_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_ios_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    1cdc:	b910      	cbnz	r0, 1ce4 <am_hal_ios_int_status_get+0x8>
        return u32RetVal & AM_REG(IOSLAVE, INTEN);

    }
    else
    {
        return AM_REG(IOSLAVE, INTSTAT);
    1cde:	4b04      	ldr	r3, [pc, #16]	; (1cf0 <am_hal_ios_int_status_get+0x14>)
    1ce0:	6818      	ldr	r0, [r3, #0]
    }
}
    1ce2:	4770      	bx	lr
uint32_t
am_hal_ios_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1ce4:	4a02      	ldr	r2, [pc, #8]	; (1cf0 <am_hal_ios_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1ce6:	4903      	ldr	r1, [pc, #12]	; (1cf4 <am_hal_ios_int_status_get+0x18>)
uint32_t
am_hal_ios_int_status_get(bool bEnabledOnly)
{
    if ( bEnabledOnly )
    {
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1ce8:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1cea:	680b      	ldr	r3, [r1, #0]
    1cec:	4018      	ands	r0, r3
    1cee:	4770      	bx	lr
    1cf0:	50000204 	.word	0x50000204
    1cf4:	50000200 	.word	0x50000200

00001cf8 <am_hal_ios_fifo_space_used>:
//! @return Bytes used in the Overall FIFO.
//
//*****************************************************************************
uint32_t
am_hal_ios_fifo_space_used(void)
{
    1cf8:	b510      	push	{r4, lr}
    uint32_t ui32Val;
    uint32_t ui32Primask;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1cfa:	f7ff ff57 	bl	1bac <am_hal_interrupt_master_disable>
    ui32Val = g_sSRAMBuffer.ui32Length;
    1cfe:	4b05      	ldr	r3, [pc, #20]	; (1d14 <am_hal_ios_fifo_space_used+0x1c>)
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1d00:	4a05      	ldr	r2, [pc, #20]	; (1d18 <am_hal_ios_fifo_space_used+0x20>)
    uint32_t ui32Primask;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    ui32Val = g_sSRAMBuffer.ui32Length;
    1d02:	68d9      	ldr	r1, [r3, #12]
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1d04:	6814      	ldr	r4, [r2, #0]
    1d06:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1d0a:	440c      	add	r4, r1
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    1d0c:	f7ff ff52 	bl	1bb4 <am_hal_interrupt_master_set>
    return ui32Val;
}
    1d10:	4620      	mov	r0, r4
    1d12:	bd10      	pop	{r4, pc}
    1d14:	10001800 	.word	0x10001800
    1d18:	50000100 	.word	0x50000100

00001d1c <am_hal_ios_fifo_service>:
    uint32_t freeSpace, usedSpace, chunk1, chunk2, ui32WriteIndex;

    //
    // Check for FIFO size interrupts.
    //
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    1d1c:	07c3      	lsls	r3, r0, #31
    1d1e:	f140 830a 	bpl.w	2336 <am_hal_ios_fifo_service+0x61a>
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_fifo_service(uint32_t ui32Status)
{
    1d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //
    // Check for FIFO size interrupts.
    //
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    {
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d26:	4b7b      	ldr	r3, [pc, #492]	; (1f14 <am_hal_ios_fifo_service+0x1f8>)

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1d28:	4e7b      	ldr	r6, [pc, #492]	; (1f18 <am_hal_ios_fifo_service+0x1fc>)
    //
    // Check for FIFO size interrupts.
    //
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    {
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d2a:	681a      	ldr	r2, [r3, #0]

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1d2c:	68f1      	ldr	r1, [r6, #12]
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_fifo_service(uint32_t ui32Status)
{
    1d2e:	b085      	sub	sp, #20
    //
    // Check for FIFO size interrupts.
    //
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    {
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d30:	b2d0      	uxtb	r0, r2
    1d32:	9001      	str	r0, [sp, #4]

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1d34:	2900      	cmp	r1, #0
    1d36:	f000 80e6 	beq.w	1f06 <am_hal_ios_fifo_service+0x1ea>
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1d3a:	4d78      	ldr	r5, [pc, #480]	; (1f1c <am_hal_ios_fifo_service+0x200>)
    1d3c:	682f      	ldr	r7, [r5, #0]
    1d3e:	f3c7 2907 	ubfx	r9, r7, #8, #8

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1d42:	4548      	cmp	r0, r9
    1d44:	f0c0 80df 	bcc.w	1f06 <am_hal_ios_fifo_service+0x1ea>
    1d48:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 1f34 <am_hal_ios_fifo_service+0x218>
    1d4c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 1f38 <am_hal_ios_fifo_service+0x21c>
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1d50:	9502      	str	r5, [sp, #8]
            // So, we do have some data in SRAM which needs to be moved to FIFO.
            // A chunk of data is a continguous set of bytes in SRAM that can be
            //  written to FIFO. Determine the chunks of data from SRAM that can
            //  be written. Up to two chunks possible
            //
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
    1d52:	4637      	mov	r7, r6
    1d54:	464c      	mov	r4, r9
    1d56:	6873      	ldr	r3, [r6, #4]
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
    1d58:	68b2      	ldr	r2, [r6, #8]
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1d5a:	4293      	cmp	r3, r2
    1d5c:	f240 80d6 	bls.w	1f0c <am_hal_ios_fifo_service+0x1f0>
    1d60:	68bd      	ldr	r5, [r7, #8]
    1d62:	1b58      	subs	r0, r3, r5
                        (g_sSRAMBuffer.ui32Capacity - (uint32_t)g_sSRAMBuffer.ui32ReadIndex));
            chunk2 = g_sSRAMBuffer.ui32Length - chunk1;
            // We waste one byte in HW FIFO
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    1d64:	f89b c000 	ldrb.w	ip, [fp]
            //
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
                        (g_sSRAMBuffer.ui32Capacity - (uint32_t)g_sSRAMBuffer.ui32ReadIndex));
            chunk2 = g_sSRAMBuffer.ui32Length - chunk1;
    1d68:	f8d6 a00c 	ldr.w	sl, [r6, #12]
            // We waste one byte in HW FIFO
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    1d6c:	f10c 33ff 	add.w	r3, ip, #4294967295
    1d70:	1b1c      	subs	r4, r3, r4
            // Write data in chunks
            // Determine the chunks of data from SRAM that can be written
            if ( chunk1 > freeSpace )
    1d72:	42a0      	cmp	r0, r4
    1d74:	f240 80e2 	bls.w	1f3c <am_hal_ios_fifo_service+0x220>
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1d78:	68bd      	ldr	r5, [r7, #8]
    1d7a:	683a      	ldr	r2, [r7, #0]
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1d7c:	4968      	ldr	r1, [pc, #416]	; (1f20 <am_hal_ios_fifo_service+0x204>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1d7e:	4869      	ldr	r0, [pc, #420]	; (1f24 <am_hal_ios_fifo_service+0x208>)
//
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    1d80:	f8d8 3000 	ldr.w	r3, [r8]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1d84:	6809      	ldr	r1, [r1, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1d86:	6800      	ldr	r0, [r0, #0]
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
            // Write data in chunks
            // Determine the chunks of data from SRAM that can be written
            if ( chunk1 > freeSpace )
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1d88:	eb02 0e05 	add.w	lr, r2, r5
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1d8c:	2c00      	cmp	r4, #0
    1d8e:	f000 808d 	beq.w	1eac <am_hal_ios_fifo_service+0x190>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    1d92:	4672      	mov	r2, lr
    1d94:	eb0e 0a04 	add.w	sl, lr, r4
    1d98:	f812 5b01 	ldrb.w	r5, [r2], #1
    1d9c:	701d      	strb	r5, [r3, #0]
    1d9e:	ea6f 0e0e 	mvn.w	lr, lr
    1da2:	3301      	adds	r3, #1
    1da4:	44d6      	add	lr, sl
    1da6:	4298      	cmp	r0, r3
    1da8:	bf08      	it	eq
    1daa:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1dac:	4552      	cmp	r2, sl
    1dae:	f00e 0e07 	and.w	lr, lr, #7
    1db2:	d07b      	beq.n	1eac <am_hal_ios_fifo_service+0x190>
    1db4:	f1be 0f00 	cmp.w	lr, #0
    1db8:	d045      	beq.n	1e46 <am_hal_ios_fifo_service+0x12a>
    1dba:	f1be 0f01 	cmp.w	lr, #1
    1dbe:	d038      	beq.n	1e32 <am_hal_ios_fifo_service+0x116>
    1dc0:	f1be 0f02 	cmp.w	lr, #2
    1dc4:	d02e      	beq.n	1e24 <am_hal_ios_fifo_service+0x108>
    1dc6:	f1be 0f03 	cmp.w	lr, #3
    1dca:	d024      	beq.n	1e16 <am_hal_ios_fifo_service+0xfa>
    1dcc:	f1be 0f04 	cmp.w	lr, #4
    1dd0:	d01a      	beq.n	1e08 <am_hal_ios_fifo_service+0xec>
    1dd2:	f1be 0f05 	cmp.w	lr, #5
    1dd6:	d010      	beq.n	1dfa <am_hal_ios_fifo_service+0xde>
    1dd8:	f1be 0f06 	cmp.w	lr, #6
    1ddc:	d006      	beq.n	1dec <am_hal_ios_fifo_service+0xd0>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    1dde:	f812 5b01 	ldrb.w	r5, [r2], #1
    1de2:	701d      	strb	r5, [r3, #0]
    1de4:	3301      	adds	r3, #1
    1de6:	4298      	cmp	r0, r3
    1de8:	bf08      	it	eq
    1dea:	460b      	moveq	r3, r1
    1dec:	f812 5b01 	ldrb.w	r5, [r2], #1
    1df0:	701d      	strb	r5, [r3, #0]
    1df2:	3301      	adds	r3, #1
    1df4:	4298      	cmp	r0, r3
    1df6:	bf08      	it	eq
    1df8:	460b      	moveq	r3, r1
    1dfa:	f812 5b01 	ldrb.w	r5, [r2], #1
    1dfe:	701d      	strb	r5, [r3, #0]
    1e00:	3301      	adds	r3, #1
    1e02:	4298      	cmp	r0, r3
    1e04:	bf08      	it	eq
    1e06:	460b      	moveq	r3, r1
    1e08:	f812 5b01 	ldrb.w	r5, [r2], #1
    1e0c:	701d      	strb	r5, [r3, #0]
    1e0e:	3301      	adds	r3, #1
    1e10:	4298      	cmp	r0, r3
    1e12:	bf08      	it	eq
    1e14:	460b      	moveq	r3, r1
    1e16:	f812 5b01 	ldrb.w	r5, [r2], #1
    1e1a:	701d      	strb	r5, [r3, #0]
    1e1c:	3301      	adds	r3, #1
    1e1e:	4298      	cmp	r0, r3
    1e20:	bf08      	it	eq
    1e22:	460b      	moveq	r3, r1
    1e24:	f812 5b01 	ldrb.w	r5, [r2], #1
    1e28:	701d      	strb	r5, [r3, #0]
    1e2a:	3301      	adds	r3, #1
    1e2c:	4298      	cmp	r0, r3
    1e2e:	bf08      	it	eq
    1e30:	460b      	moveq	r3, r1
    1e32:	f812 eb01 	ldrb.w	lr, [r2], #1
    1e36:	f883 e000 	strb.w	lr, [r3]
    1e3a:	3301      	adds	r3, #1
    1e3c:	4298      	cmp	r0, r3
    1e3e:	bf08      	it	eq
    1e40:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1e42:	4552      	cmp	r2, sl
    1e44:	d032      	beq.n	1eac <am_hal_ios_fifo_service+0x190>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    1e46:	4694      	mov	ip, r2
    1e48:	1c5d      	adds	r5, r3, #1
    1e4a:	f81c eb01 	ldrb.w	lr, [ip], #1
    1e4e:	f883 e000 	strb.w	lr, [r3]
    1e52:	42a8      	cmp	r0, r5
    1e54:	bf0c      	ite	eq
    1e56:	460b      	moveq	r3, r1
    1e58:	462b      	movne	r3, r5
    1e5a:	f89c 5000 	ldrb.w	r5, [ip]
    1e5e:	701d      	strb	r5, [r3, #0]
    1e60:	3301      	adds	r3, #1
    1e62:	4298      	cmp	r0, r3
    1e64:	bf08      	it	eq
    1e66:	460b      	moveq	r3, r1
    1e68:	7895      	ldrb	r5, [r2, #2]
    1e6a:	701d      	strb	r5, [r3, #0]
    1e6c:	3301      	adds	r3, #1
    1e6e:	4298      	cmp	r0, r3
    1e70:	bf08      	it	eq
    1e72:	460b      	moveq	r3, r1
    1e74:	78d5      	ldrb	r5, [r2, #3]
    1e76:	701d      	strb	r5, [r3, #0]
    1e78:	3301      	adds	r3, #1
    1e7a:	4298      	cmp	r0, r3
    1e7c:	bf08      	it	eq
    1e7e:	460b      	moveq	r3, r1
    1e80:	7915      	ldrb	r5, [r2, #4]
    1e82:	701d      	strb	r5, [r3, #0]
    1e84:	3301      	adds	r3, #1
    1e86:	4298      	cmp	r0, r3
    1e88:	bf08      	it	eq
    1e8a:	460b      	moveq	r3, r1
    1e8c:	7955      	ldrb	r5, [r2, #5]
    1e8e:	701d      	strb	r5, [r3, #0]
    1e90:	3301      	adds	r3, #1
    1e92:	4298      	cmp	r0, r3
    1e94:	bf08      	it	eq
    1e96:	460b      	moveq	r3, r1
    1e98:	7995      	ldrb	r5, [r2, #6]
    1e9a:	701d      	strb	r5, [r3, #0]
    1e9c:	3208      	adds	r2, #8
    1e9e:	3301      	adds	r3, #1
    1ea0:	4298      	cmp	r0, r3
    1ea2:	bf08      	it	eq
    1ea4:	460b      	moveq	r3, r1
    1ea6:	f812 ec01 	ldrb.w	lr, [r2, #-1]
    1eaa:	e7c4      	b.n	1e36 <am_hal_ios_fifo_service+0x11a>
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);

                        //
                        // Advance the read index, wrapping if needed.
                        //
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1eac:	68b1      	ldr	r1, [r6, #8]
        if ( pFifoPtr == pFifoEnd )
        {
            pFifoPtr = pFifoBase;
        }
    }
    g_pui8FIFOPtr = pFifoPtr;
    1eae:	f8c8 3000 	str.w	r3, [r8]
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);

                        //
                        // Advance the read index, wrapping if needed.
                        //
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1eb2:	4421      	add	r1, r4
    1eb4:	60b1      	str	r1, [r6, #8]

                        // No need to check for wrap in chunk2
                        //
                        // Adjust the length value to reflect the change.
                        //
                        g_sSRAMBuffer.ui32Length -= freeSpace;
    1eb6:	68f0      	ldr	r0, [r6, #12]
    1eb8:	1b04      	subs	r4, r0, r4
    1eba:	469a      	mov	sl, r3
    1ebc:	60f4      	str	r4, [r6, #12]
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is 2.
    //
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    1ebe:	4b1a      	ldr	r3, [pc, #104]	; (1f28 <am_hal_ios_fifo_service+0x20c>)
    1ec0:	681a      	ldr	r2, [r3, #0]
                        //
                        g_sSRAMBuffer.ui32Length -= chunk2;
                    }
                }
            }
            if (!isRevB2())
    1ec2:	b2d5      	uxtb	r5, r2
    1ec4:	2d22      	cmp	r5, #34	; 0x22
    1ec6:	d00f      	beq.n	1ee8 <am_hal_ios_fifo_service+0x1cc>
    uint32_t ui32Primask;
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1ec8:	f7ff fe70 	bl	1bac <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1ecc:	f89b 1000 	ldrb.w	r1, [fp]
    1ed0:	4a12      	ldr	r2, [pc, #72]	; (1f1c <am_hal_ios_fifo_service+0x200>)
    uint32_t ui32Primask;
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1ed2:	4681      	mov	r9, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1ed4:	f10a 4030 	add.w	r0, sl, #2952790016	; 0xb0000000
    1ed8:	f7ff fe70 	bl	1bbc <internal_resync_fifoSize>
    // Clear interrupts for IOS which could be spuriously triggered
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1edc:	4913      	ldr	r1, [pc, #76]	; (1f2c <am_hal_ios_fifo_service+0x210>)
    1ede:	2407      	movs	r4, #7
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    1ee0:	4648      	mov	r0, r9
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    // Clear interrupts for IOS which could be spuriously triggered
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1ee2:	600c      	str	r4, [r1, #0]
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    1ee4:	f7ff fe66 	bl	1bb4 <am_hal_interrupt_master_set>

            //
            // Need to retake the FIFO space, after Threshold interrupt has been reenabled
            // Clear any spurious FSIZE interrupt that might have got raised
            //
            AM_BFW(IOSLAVE, INTCLR, FSIZE, 1);
    1ee8:	4811      	ldr	r0, [pc, #68]	; (1f30 <am_hal_ios_fifo_service+0x214>)
    1eea:	6803      	ldr	r3, [r0, #0]
    1eec:	f043 0201 	orr.w	r2, r3, #1
    1ef0:	6002      	str	r2, [r0, #0]

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1ef2:	68f5      	ldr	r5, [r6, #12]
    1ef4:	b13d      	cbz	r5, 1f06 <am_hal_ios_fifo_service+0x1ea>
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1ef6:	9902      	ldr	r1, [sp, #8]

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1ef8:	9801      	ldr	r0, [sp, #4]
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1efa:	680c      	ldr	r4, [r1, #0]
    1efc:	f3c4 2407 	ubfx	r4, r4, #8, #8

        //
        // While the FIFO is at or below threshold Add more data
        // If Fifo level is above threshold, we're guaranteed an FSIZ interrupt
        //
        while ( g_sSRAMBuffer.ui32Length &&
    1f00:	42a0      	cmp	r0, r4
    1f02:	f4bf af28 	bcs.w	1d56 <am_hal_ios_fifo_service+0x3a>
            // Clear any spurious FSIZE interrupt that might have got raised
            //
            AM_BFW(IOSLAVE, INTCLR, FSIZE, 1);
        }
    }
}
    1f06:	b005      	add	sp, #20
    1f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            //  be written. Up to two chunks possible
            //
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
                        (g_sSRAMBuffer.ui32Capacity - (uint32_t)g_sSRAMBuffer.ui32ReadIndex));
    1f0c:	68b9      	ldr	r1, [r7, #8]
            //  written to FIFO. Determine the chunks of data from SRAM that can
            //  be written. Up to two chunks possible
            //
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1f0e:	6978      	ldr	r0, [r7, #20]
    1f10:	1a40      	subs	r0, r0, r1
    1f12:	e727      	b.n	1d64 <am_hal_ios_fifo_service+0x48>
    1f14:	50000108 	.word	0x50000108
    1f18:	10001800 	.word	0x10001800
    1f1c:	50000100 	.word	0x50000100
    1f20:	10001094 	.word	0x10001094
    1f24:	1000108c 	.word	0x1000108c
    1f28:	4002000c 	.word	0x4002000c
    1f2c:	50000218 	.word	0x50000218
    1f30:	50000208 	.word	0x50000208
    1f34:	100011a4 	.word	0x100011a4
    1f38:	10001090 	.word	0x10001090
                //
                g_sSRAMBuffer.ui32Length -= freeSpace;
            }
            else
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f3c:	683a      	ldr	r2, [r7, #0]
    1f3e:	9203      	str	r2, [sp, #12]
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1f40:	4aad      	ldr	r2, [pc, #692]	; (21f8 <am_hal_ios_fifo_service+0x4dc>)
                //
                g_sSRAMBuffer.ui32Length -= freeSpace;
            }
            else
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f42:	68b9      	ldr	r1, [r7, #8]
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1f44:	4dad      	ldr	r5, [pc, #692]	; (21fc <am_hal_ios_fifo_service+0x4e0>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1f46:	f8d2 e000 	ldr.w	lr, [r2]
                //
                g_sSRAMBuffer.ui32Length -= freeSpace;
            }
            else
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f4a:	9a03      	ldr	r2, [sp, #12]
//
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    1f4c:	f8d8 3000 	ldr.w	r3, [r8]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1f50:	682d      	ldr	r5, [r5, #0]
                //
                g_sSRAMBuffer.ui32Length -= freeSpace;
            }
            else
            {
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f52:	440a      	add	r2, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1f54:	2800      	cmp	r0, #0
    1f56:	f000 808c 	beq.w	2072 <am_hal_ios_fifo_service+0x356>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    1f5a:	4611      	mov	r1, r2
    1f5c:	eb02 0c00 	add.w	ip, r2, r0
    1f60:	f811 9b01 	ldrb.w	r9, [r1], #1
    1f64:	f883 9000 	strb.w	r9, [r3]
    1f68:	43d2      	mvns	r2, r2
    1f6a:	3301      	adds	r3, #1
    1f6c:	4462      	add	r2, ip
    1f6e:	459e      	cmp	lr, r3
    1f70:	bf08      	it	eq
    1f72:	462b      	moveq	r3, r5
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1f74:	4561      	cmp	r1, ip
    1f76:	f002 0207 	and.w	r2, r2, #7
    1f7a:	d07a      	beq.n	2072 <am_hal_ios_fifo_service+0x356>
    1f7c:	2a00      	cmp	r2, #0
    1f7e:	d03e      	beq.n	1ffe <am_hal_ios_fifo_service+0x2e2>
    1f80:	2a01      	cmp	r2, #1
    1f82:	d033      	beq.n	1fec <am_hal_ios_fifo_service+0x2d0>
    1f84:	2a02      	cmp	r2, #2
    1f86:	d02a      	beq.n	1fde <am_hal_ios_fifo_service+0x2c2>
    1f88:	2a03      	cmp	r2, #3
    1f8a:	d021      	beq.n	1fd0 <am_hal_ios_fifo_service+0x2b4>
    1f8c:	2a04      	cmp	r2, #4
    1f8e:	d018      	beq.n	1fc2 <am_hal_ios_fifo_service+0x2a6>
    1f90:	2a05      	cmp	r2, #5
    1f92:	d00f      	beq.n	1fb4 <am_hal_ios_fifo_service+0x298>
    1f94:	2a06      	cmp	r2, #6
    1f96:	d006      	beq.n	1fa6 <am_hal_ios_fifo_service+0x28a>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    1f98:	f811 2b01 	ldrb.w	r2, [r1], #1
    1f9c:	701a      	strb	r2, [r3, #0]
    1f9e:	3301      	adds	r3, #1
    1fa0:	459e      	cmp	lr, r3
    1fa2:	bf08      	it	eq
    1fa4:	462b      	moveq	r3, r5
    1fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
    1faa:	701a      	strb	r2, [r3, #0]
    1fac:	3301      	adds	r3, #1
    1fae:	459e      	cmp	lr, r3
    1fb0:	bf08      	it	eq
    1fb2:	462b      	moveq	r3, r5
    1fb4:	f811 2b01 	ldrb.w	r2, [r1], #1
    1fb8:	701a      	strb	r2, [r3, #0]
    1fba:	3301      	adds	r3, #1
    1fbc:	459e      	cmp	lr, r3
    1fbe:	bf08      	it	eq
    1fc0:	462b      	moveq	r3, r5
    1fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
    1fc6:	701a      	strb	r2, [r3, #0]
    1fc8:	3301      	adds	r3, #1
    1fca:	459e      	cmp	lr, r3
    1fcc:	bf08      	it	eq
    1fce:	462b      	moveq	r3, r5
    1fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
    1fd4:	701a      	strb	r2, [r3, #0]
    1fd6:	3301      	adds	r3, #1
    1fd8:	459e      	cmp	lr, r3
    1fda:	bf08      	it	eq
    1fdc:	462b      	moveq	r3, r5
    1fde:	f811 2b01 	ldrb.w	r2, [r1], #1
    1fe2:	701a      	strb	r2, [r3, #0]
    1fe4:	3301      	adds	r3, #1
    1fe6:	459e      	cmp	lr, r3
    1fe8:	bf08      	it	eq
    1fea:	462b      	moveq	r3, r5
    1fec:	f811 2b01 	ldrb.w	r2, [r1], #1
    1ff0:	701a      	strb	r2, [r3, #0]
    1ff2:	3301      	adds	r3, #1
    1ff4:	459e      	cmp	lr, r3
    1ff6:	bf08      	it	eq
    1ff8:	462b      	moveq	r3, r5
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    1ffa:	4561      	cmp	r1, ip
    1ffc:	d039      	beq.n	2072 <am_hal_ios_fifo_service+0x356>
    1ffe:	9003      	str	r0, [sp, #12]
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2000:	4608      	mov	r0, r1
    2002:	1c5a      	adds	r2, r3, #1
    2004:	f810 9b01 	ldrb.w	r9, [r0], #1
    2008:	f883 9000 	strb.w	r9, [r3]
    200c:	4596      	cmp	lr, r2
    200e:	bf0c      	ite	eq
    2010:	462b      	moveq	r3, r5
    2012:	4613      	movne	r3, r2
    2014:	7800      	ldrb	r0, [r0, #0]
    2016:	7018      	strb	r0, [r3, #0]
    2018:	3301      	adds	r3, #1
    201a:	459e      	cmp	lr, r3
    201c:	bf08      	it	eq
    201e:	462b      	moveq	r3, r5
    2020:	788a      	ldrb	r2, [r1, #2]
    2022:	701a      	strb	r2, [r3, #0]
    2024:	3301      	adds	r3, #1
    2026:	459e      	cmp	lr, r3
    2028:	bf08      	it	eq
    202a:	462b      	moveq	r3, r5
    202c:	78c8      	ldrb	r0, [r1, #3]
    202e:	7018      	strb	r0, [r3, #0]
    2030:	3301      	adds	r3, #1
    2032:	459e      	cmp	lr, r3
    2034:	bf08      	it	eq
    2036:	462b      	moveq	r3, r5
    2038:	790a      	ldrb	r2, [r1, #4]
    203a:	701a      	strb	r2, [r3, #0]
    203c:	3301      	adds	r3, #1
    203e:	459e      	cmp	lr, r3
    2040:	bf08      	it	eq
    2042:	462b      	moveq	r3, r5
    2044:	7948      	ldrb	r0, [r1, #5]
    2046:	7018      	strb	r0, [r3, #0]
    2048:	3301      	adds	r3, #1
    204a:	459e      	cmp	lr, r3
    204c:	bf08      	it	eq
    204e:	462b      	moveq	r3, r5
    2050:	798a      	ldrb	r2, [r1, #6]
    2052:	701a      	strb	r2, [r3, #0]
    2054:	3108      	adds	r1, #8
    2056:	3301      	adds	r3, #1
    2058:	459e      	cmp	lr, r3
    205a:	bf08      	it	eq
    205c:	462b      	moveq	r3, r5
    205e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    2062:	7018      	strb	r0, [r3, #0]
    2064:	3301      	adds	r3, #1
    2066:	459e      	cmp	lr, r3
    2068:	bf08      	it	eq
    206a:	462b      	moveq	r3, r5
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    206c:	4561      	cmp	r1, ip
    206e:	d1c7      	bne.n	2000 <am_hal_ios_fifo_service+0x2e4>
    2070:	9803      	ldr	r0, [sp, #12]
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);

                //
                // Update the read index - wrapping as needed
                //
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    2072:	68b5      	ldr	r5, [r6, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    2074:	6972      	ldr	r2, [r6, #20]
        if ( pFifoPtr == pFifoEnd )
        {
            pFifoPtr = pFifoBase;
        }
    }
    g_pui8FIFOPtr = pFifoPtr;
    2076:	f8c8 3000 	str.w	r3, [r8]
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);

                //
                // Update the read index - wrapping as needed
                //
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    207a:	4405      	add	r5, r0
    207c:	60b5      	str	r5, [r6, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    207e:	68b5      	ldr	r5, [r6, #8]
    2080:	fbb5 f1f2 	udiv	r1, r5, r2
    2084:	fb02 5211 	mls	r2, r2, r1, r5
    2088:	60b2      	str	r2, [r6, #8]
                //
                // Adjust the length value to reflect the change.
                //
                g_sSRAMBuffer.ui32Length -= chunk1;
    208a:	68f5      	ldr	r5, [r6, #12]
                freeSpace -= chunk1;

                if ( freeSpace && chunk2 )
    208c:	1a24      	subs	r4, r4, r0
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
                //
                // Adjust the length value to reflect the change.
                //
                g_sSRAMBuffer.ui32Length -= chunk1;
    208e:	eba5 0100 	sub.w	r1, r5, r0
    2092:	60f1      	str	r1, [r6, #12]
                freeSpace -= chunk1;

                if ( freeSpace && chunk2 )
    2094:	f000 80ae 	beq.w	21f4 <am_hal_ios_fifo_service+0x4d8>
    2098:	ebba 0000 	subs.w	r0, sl, r0
    209c:	f000 80aa 	beq.w	21f4 <am_hal_ios_fifo_service+0x4d8>
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    20a0:	4956      	ldr	r1, [pc, #344]	; (21fc <am_hal_ios_fifo_service+0x4e0>)

                if ( freeSpace && chunk2 )
                {
                    if ( chunk2 > freeSpace )
                    {
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    20a2:	68bd      	ldr	r5, [r7, #8]
    20a4:	683a      	ldr	r2, [r7, #0]
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    20a6:	6809      	ldr	r1, [r1, #0]
                g_sSRAMBuffer.ui32Length -= chunk1;
                freeSpace -= chunk1;

                if ( freeSpace && chunk2 )
                {
                    if ( chunk2 > freeSpace )
    20a8:	42a0      	cmp	r0, r4
    20aa:	f240 80a9 	bls.w	2200 <am_hal_ios_fifo_service+0x4e4>
                    {
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    20ae:	4415      	add	r5, r2
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    20b0:	462a      	mov	r2, r5
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    20b2:	4851      	ldr	r0, [pc, #324]	; (21f8 <am_hal_ios_fifo_service+0x4dc>)
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    20b4:	f812 eb01 	ldrb.w	lr, [r2], #1
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    20b8:	6800      	ldr	r0, [r0, #0]
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    20ba:	f883 e000 	strb.w	lr, [r3]
    20be:	4425      	add	r5, r4
    20c0:	3301      	adds	r3, #1
    20c2:	f104 3aff 	add.w	sl, r4, #4294967295
    20c6:	4298      	cmp	r0, r3
    20c8:	bf08      	it	eq
    20ca:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    20cc:	4295      	cmp	r5, r2
    20ce:	f00a 0e07 	and.w	lr, sl, #7
    20d2:	f43f aeeb 	beq.w	1eac <am_hal_ios_fifo_service+0x190>
    20d6:	f1be 0f00 	cmp.w	lr, #0
    20da:	d04c      	beq.n	2176 <am_hal_ios_fifo_service+0x45a>
    20dc:	f1be 0f01 	cmp.w	lr, #1
    20e0:	d03e      	beq.n	2160 <am_hal_ios_fifo_service+0x444>
    20e2:	f1be 0f02 	cmp.w	lr, #2
    20e6:	d033      	beq.n	2150 <am_hal_ios_fifo_service+0x434>
    20e8:	f1be 0f03 	cmp.w	lr, #3
    20ec:	d028      	beq.n	2140 <am_hal_ios_fifo_service+0x424>
    20ee:	f1be 0f04 	cmp.w	lr, #4
    20f2:	d01d      	beq.n	2130 <am_hal_ios_fifo_service+0x414>
    20f4:	f1be 0f05 	cmp.w	lr, #5
    20f8:	d012      	beq.n	2120 <am_hal_ios_fifo_service+0x404>
    20fa:	f1be 0f06 	cmp.w	lr, #6
    20fe:	d007      	beq.n	2110 <am_hal_ios_fifo_service+0x3f4>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2100:	f812 cb01 	ldrb.w	ip, [r2], #1
    2104:	f883 c000 	strb.w	ip, [r3]
    2108:	3301      	adds	r3, #1
    210a:	4298      	cmp	r0, r3
    210c:	bf08      	it	eq
    210e:	460b      	moveq	r3, r1
    2110:	f812 9b01 	ldrb.w	r9, [r2], #1
    2114:	f883 9000 	strb.w	r9, [r3]
    2118:	3301      	adds	r3, #1
    211a:	4298      	cmp	r0, r3
    211c:	bf08      	it	eq
    211e:	460b      	moveq	r3, r1
    2120:	f812 eb01 	ldrb.w	lr, [r2], #1
    2124:	f883 e000 	strb.w	lr, [r3]
    2128:	3301      	adds	r3, #1
    212a:	4298      	cmp	r0, r3
    212c:	bf08      	it	eq
    212e:	460b      	moveq	r3, r1
    2130:	f812 ab01 	ldrb.w	sl, [r2], #1
    2134:	f883 a000 	strb.w	sl, [r3]
    2138:	3301      	adds	r3, #1
    213a:	4298      	cmp	r0, r3
    213c:	bf08      	it	eq
    213e:	460b      	moveq	r3, r1
    2140:	f812 cb01 	ldrb.w	ip, [r2], #1
    2144:	f883 c000 	strb.w	ip, [r3]
    2148:	3301      	adds	r3, #1
    214a:	4298      	cmp	r0, r3
    214c:	bf08      	it	eq
    214e:	460b      	moveq	r3, r1
    2150:	f812 9b01 	ldrb.w	r9, [r2], #1
    2154:	f883 9000 	strb.w	r9, [r3]
    2158:	3301      	adds	r3, #1
    215a:	4298      	cmp	r0, r3
    215c:	bf08      	it	eq
    215e:	460b      	moveq	r3, r1
    2160:	f812 eb01 	ldrb.w	lr, [r2], #1
    2164:	f883 e000 	strb.w	lr, [r3]
    2168:	3301      	adds	r3, #1
    216a:	4298      	cmp	r0, r3
    216c:	bf08      	it	eq
    216e:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    2170:	4295      	cmp	r5, r2
    2172:	f43f ae9b 	beq.w	1eac <am_hal_ios_fifo_service+0x190>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2176:	4692      	mov	sl, r2
    2178:	f103 0e01 	add.w	lr, r3, #1
    217c:	f81a cb01 	ldrb.w	ip, [sl], #1
    2180:	f883 c000 	strb.w	ip, [r3]
    2184:	4570      	cmp	r0, lr
    2186:	bf0c      	ite	eq
    2188:	460b      	moveq	r3, r1
    218a:	4673      	movne	r3, lr
    218c:	f89a 9000 	ldrb.w	r9, [sl]
    2190:	f883 9000 	strb.w	r9, [r3]
    2194:	3301      	adds	r3, #1
    2196:	4298      	cmp	r0, r3
    2198:	bf08      	it	eq
    219a:	460b      	moveq	r3, r1
    219c:	f892 a002 	ldrb.w	sl, [r2, #2]
    21a0:	f883 a000 	strb.w	sl, [r3]
    21a4:	3301      	adds	r3, #1
    21a6:	4298      	cmp	r0, r3
    21a8:	bf08      	it	eq
    21aa:	460b      	moveq	r3, r1
    21ac:	f892 e003 	ldrb.w	lr, [r2, #3]
    21b0:	f883 e000 	strb.w	lr, [r3]
    21b4:	3301      	adds	r3, #1
    21b6:	4298      	cmp	r0, r3
    21b8:	bf08      	it	eq
    21ba:	460b      	moveq	r3, r1
    21bc:	f892 c004 	ldrb.w	ip, [r2, #4]
    21c0:	f883 c000 	strb.w	ip, [r3]
    21c4:	3301      	adds	r3, #1
    21c6:	4298      	cmp	r0, r3
    21c8:	bf08      	it	eq
    21ca:	460b      	moveq	r3, r1
    21cc:	f892 9005 	ldrb.w	r9, [r2, #5]
    21d0:	f883 9000 	strb.w	r9, [r3]
    21d4:	3301      	adds	r3, #1
    21d6:	4298      	cmp	r0, r3
    21d8:	bf08      	it	eq
    21da:	460b      	moveq	r3, r1
    21dc:	f892 a006 	ldrb.w	sl, [r2, #6]
    21e0:	f883 a000 	strb.w	sl, [r3]
    21e4:	3208      	adds	r2, #8
    21e6:	3301      	adds	r3, #1
    21e8:	4298      	cmp	r0, r3
    21ea:	bf08      	it	eq
    21ec:	460b      	moveq	r3, r1
    21ee:	f812 ec01 	ldrb.w	lr, [r2, #-1]
    21f2:	e7b7      	b.n	2164 <am_hal_ios_fifo_service+0x448>
    21f4:	469a      	mov	sl, r3
    21f6:	e662      	b.n	1ebe <am_hal_ios_fifo_service+0x1a2>
    21f8:	1000108c 	.word	0x1000108c
    21fc:	10001094 	.word	0x10001094
                        //
                        g_sSRAMBuffer.ui32Length -= freeSpace;
                    }
                    else
                    {
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
    2200:	eb02 0e05 	add.w	lr, r2, r5
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2204:	4672      	mov	r2, lr
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2206:	4c4c      	ldr	r4, [pc, #304]	; (2338 <am_hal_ios_fifo_service+0x61c>)
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2208:	f812 5b01 	ldrb.w	r5, [r2], #1
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    220c:	6824      	ldr	r4, [r4, #0]
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    220e:	701d      	strb	r5, [r3, #0]
    2210:	eb0e 0a00 	add.w	sl, lr, r0
    2214:	ea6f 0c0e 	mvn.w	ip, lr
    2218:	3301      	adds	r3, #1
    221a:	44d4      	add	ip, sl
    221c:	429c      	cmp	r4, r3
    221e:	bf08      	it	eq
    2220:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    2222:	4552      	cmp	r2, sl
    2224:	f00c 0e07 	and.w	lr, ip, #7
    2228:	d07b      	beq.n	2322 <am_hal_ios_fifo_service+0x606>
    222a:	f1be 0f00 	cmp.w	lr, #0
    222e:	d045      	beq.n	22bc <am_hal_ios_fifo_service+0x5a0>
    2230:	f1be 0f01 	cmp.w	lr, #1
    2234:	d038      	beq.n	22a8 <am_hal_ios_fifo_service+0x58c>
    2236:	f1be 0f02 	cmp.w	lr, #2
    223a:	d02e      	beq.n	229a <am_hal_ios_fifo_service+0x57e>
    223c:	f1be 0f03 	cmp.w	lr, #3
    2240:	d024      	beq.n	228c <am_hal_ios_fifo_service+0x570>
    2242:	f1be 0f04 	cmp.w	lr, #4
    2246:	d01a      	beq.n	227e <am_hal_ios_fifo_service+0x562>
    2248:	f1be 0f05 	cmp.w	lr, #5
    224c:	d010      	beq.n	2270 <am_hal_ios_fifo_service+0x554>
    224e:	f1be 0f06 	cmp.w	lr, #6
    2252:	d006      	beq.n	2262 <am_hal_ios_fifo_service+0x546>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2254:	f812 5b01 	ldrb.w	r5, [r2], #1
    2258:	701d      	strb	r5, [r3, #0]
    225a:	3301      	adds	r3, #1
    225c:	429c      	cmp	r4, r3
    225e:	bf08      	it	eq
    2260:	460b      	moveq	r3, r1
    2262:	f812 5b01 	ldrb.w	r5, [r2], #1
    2266:	701d      	strb	r5, [r3, #0]
    2268:	3301      	adds	r3, #1
    226a:	429c      	cmp	r4, r3
    226c:	bf08      	it	eq
    226e:	460b      	moveq	r3, r1
    2270:	f812 5b01 	ldrb.w	r5, [r2], #1
    2274:	701d      	strb	r5, [r3, #0]
    2276:	3301      	adds	r3, #1
    2278:	429c      	cmp	r4, r3
    227a:	bf08      	it	eq
    227c:	460b      	moveq	r3, r1
    227e:	f812 5b01 	ldrb.w	r5, [r2], #1
    2282:	701d      	strb	r5, [r3, #0]
    2284:	3301      	adds	r3, #1
    2286:	429c      	cmp	r4, r3
    2288:	bf08      	it	eq
    228a:	460b      	moveq	r3, r1
    228c:	f812 5b01 	ldrb.w	r5, [r2], #1
    2290:	701d      	strb	r5, [r3, #0]
    2292:	3301      	adds	r3, #1
    2294:	429c      	cmp	r4, r3
    2296:	bf08      	it	eq
    2298:	460b      	moveq	r3, r1
    229a:	f812 5b01 	ldrb.w	r5, [r2], #1
    229e:	701d      	strb	r5, [r3, #0]
    22a0:	3301      	adds	r3, #1
    22a2:	429c      	cmp	r4, r3
    22a4:	bf08      	it	eq
    22a6:	460b      	moveq	r3, r1
    22a8:	f812 eb01 	ldrb.w	lr, [r2], #1
    22ac:	f883 e000 	strb.w	lr, [r3]
    22b0:	3301      	adds	r3, #1
    22b2:	429c      	cmp	r4, r3
    22b4:	bf08      	it	eq
    22b6:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    22b8:	4552      	cmp	r2, sl
    22ba:	d032      	beq.n	2322 <am_hal_ios_fifo_service+0x606>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    22bc:	4694      	mov	ip, r2
    22be:	1c5d      	adds	r5, r3, #1
    22c0:	f81c 9b01 	ldrb.w	r9, [ip], #1
    22c4:	f883 9000 	strb.w	r9, [r3]
    22c8:	42ac      	cmp	r4, r5
    22ca:	bf0c      	ite	eq
    22cc:	460b      	moveq	r3, r1
    22ce:	462b      	movne	r3, r5
    22d0:	f89c 5000 	ldrb.w	r5, [ip]
    22d4:	701d      	strb	r5, [r3, #0]
    22d6:	3301      	adds	r3, #1
    22d8:	429c      	cmp	r4, r3
    22da:	bf08      	it	eq
    22dc:	460b      	moveq	r3, r1
    22de:	7895      	ldrb	r5, [r2, #2]
    22e0:	701d      	strb	r5, [r3, #0]
    22e2:	3301      	adds	r3, #1
    22e4:	429c      	cmp	r4, r3
    22e6:	bf08      	it	eq
    22e8:	460b      	moveq	r3, r1
    22ea:	78d5      	ldrb	r5, [r2, #3]
    22ec:	701d      	strb	r5, [r3, #0]
    22ee:	3301      	adds	r3, #1
    22f0:	429c      	cmp	r4, r3
    22f2:	bf08      	it	eq
    22f4:	460b      	moveq	r3, r1
    22f6:	7915      	ldrb	r5, [r2, #4]
    22f8:	701d      	strb	r5, [r3, #0]
    22fa:	3301      	adds	r3, #1
    22fc:	429c      	cmp	r4, r3
    22fe:	bf08      	it	eq
    2300:	460b      	moveq	r3, r1
    2302:	7955      	ldrb	r5, [r2, #5]
    2304:	701d      	strb	r5, [r3, #0]
    2306:	3301      	adds	r3, #1
    2308:	429c      	cmp	r4, r3
    230a:	bf08      	it	eq
    230c:	460b      	moveq	r3, r1
    230e:	7995      	ldrb	r5, [r2, #6]
    2310:	701d      	strb	r5, [r3, #0]
    2312:	3208      	adds	r2, #8
    2314:	3301      	adds	r3, #1
    2316:	429c      	cmp	r4, r3
    2318:	bf08      	it	eq
    231a:	460b      	moveq	r3, r1
    231c:	f812 ec01 	ldrb.w	lr, [r2, #-1]
    2320:	e7c4      	b.n	22ac <am_hal_ios_fifo_service+0x590>
                    {
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
                        //
                        // Advance the read index, wrapping if needed.
                        //
                        g_sSRAMBuffer.ui32ReadIndex += chunk2;
    2322:	68b1      	ldr	r1, [r6, #8]
        if ( pFifoPtr == pFifoEnd )
        {
            pFifoPtr = pFifoBase;
        }
    }
    g_pui8FIFOPtr = pFifoPtr;
    2324:	f8c8 3000 	str.w	r3, [r8]
                    {
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
                        //
                        // Advance the read index, wrapping if needed.
                        //
                        g_sSRAMBuffer.ui32ReadIndex += chunk2;
    2328:	4401      	add	r1, r0
    232a:	60b1      	str	r1, [r6, #8]

                        // No need to check for wrap in chunk2
                        //
                        // Adjust the length value to reflect the change.
                        //
                        g_sSRAMBuffer.ui32Length -= chunk2;
    232c:	68f4      	ldr	r4, [r6, #12]
    232e:	1a20      	subs	r0, r4, r0
    2330:	469a      	mov	sl, r3
    2332:	60f0      	str	r0, [r6, #12]
    2334:	e5c3      	b.n	1ebe <am_hal_ios_fifo_service+0x1a2>
    2336:	4770      	bx	lr
    2338:	1000108c 	.word	0x1000108c

0000233c <am_hal_ios_fifo_write>:
//! @return Number of bytes written (could be less than ui32NumBytes, if not enough space)
//
//*****************************************************************************
uint32_t
am_hal_ios_fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    233c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //
    // This operation will only work properly if an SRAM buffer has been
    // allocated. Make sure that am_hal_ios_fifo_buffer_init() has been called,
    // and the buffer pointer looks valid.
    //
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    2340:	4cc5      	ldr	r4, [pc, #788]	; (2658 <am_hal_ios_fifo_write+0x31c>)
    2342:	6822      	ldr	r2, [r4, #0]
//! @return Number of bytes written (could be less than ui32NumBytes, if not enough space)
//
//*****************************************************************************
uint32_t
am_hal_ios_fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    2344:	4681      	mov	r9, r0
    2346:	460f      	mov	r7, r1
    //
    // This operation will only work properly if an SRAM buffer has been
    // allocated. Make sure that am_hal_ios_fifo_buffer_init() has been called,
    // and the buffer pointer looks valid.
    //
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    2348:	2a00      	cmp	r2, #0
    234a:	f000 8160 	beq.w	260e <am_hal_ios_fifo_write+0x2d2>

    if ( ui32NumBytes == 0 )
    234e:	b917      	cbnz	r7, 2356 <am_hal_ios_fifo_write+0x1a>
    {
        return 0;
    2350:	4638      	mov	r0, r7
    }

    // Number of bytes written
    g_sSRAMBuffer.ui32FifoInc += totalBytes - ui32NumBytes;
    return (totalBytes - ui32NumBytes);
}
    2352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    2356:	f7ff fc29 	bl	1bac <am_hal_interrupt_master_disable>

    ui32SRAMLength = g_sSRAMBuffer.ui32Length;
    235a:	68e5      	ldr	r5, [r4, #12]
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    235c:	f7ff fc2a 	bl	1bb4 <am_hal_interrupt_master_set>

    //
    // If the SRAM buffer is empty, we should just write directly to the FIFO.
    //
    if ( ui32SRAMLength == 0 )
    2360:	2d00      	cmp	r5, #0
    2362:	f000 809d 	beq.w	24a0 <am_hal_ios_fifo_write+0x164>
    2366:	46b8      	mov	r8, r7
    // If there's still data, write it to the SRAM buffer.
    //
    if ( ui32NumBytes )
    {
        uint32_t idx, writeIdx, capacity, fifoSize;
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    2368:	6966      	ldr	r6, [r4, #20]

        writeIdx = g_sSRAMBuffer.ui32WriteIndex;
    236a:	f8d4 a004 	ldr.w	sl, [r4, #4]
    // If there's still data, write it to the SRAM buffer.
    //
    if ( ui32NumBytes )
    {
        uint32_t idx, writeIdx, capacity, fifoSize;
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    236e:	1b75      	subs	r5, r6, r5
    2370:	4545      	cmp	r5, r8
    2372:	bf28      	it	cs
    2374:	4645      	movcs	r5, r8
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    2376:	2d00      	cmp	r5, #0
    2378:	d06f      	beq.n	245a <am_hal_ios_fifo_write+0x11e>
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    237a:	464b      	mov	r3, r9
    237c:	ebc9 010a 	rsb	r1, r9, sl
    2380:	eb09 0001 	add.w	r0, r9, r1
    2384:	f813 bb01 	ldrb.w	fp, [r3], #1
    2388:	fbb0 fcf6 	udiv	ip, r0, r6
    238c:	eb09 0205 	add.w	r2, r9, r5
    2390:	fb06 0c1c 	mls	ip, r6, ip, r0
    2394:	6820      	ldr	r0, [r4, #0]
    2396:	f105 39ff 	add.w	r9, r5, #4294967295
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    239a:	429a      	cmp	r2, r3
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    239c:	f800 b00c 	strb.w	fp, [r0, ip]
    23a0:	f009 0003 	and.w	r0, r9, #3
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23a4:	d059      	beq.n	245a <am_hal_ios_fifo_write+0x11e>
    23a6:	b330      	cbz	r0, 23f6 <am_hal_ios_fifo_write+0xba>
    23a8:	2801      	cmp	r0, #1
    23aa:	d017      	beq.n	23dc <am_hal_ios_fifo_write+0xa0>
    23ac:	2802      	cmp	r0, #2
    23ae:	d00a      	beq.n	23c6 <am_hal_ios_fifo_write+0x8a>
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    23b0:	eb01 0b03 	add.w	fp, r1, r3
    23b4:	6820      	ldr	r0, [r4, #0]
    23b6:	fbbb fcf6 	udiv	ip, fp, r6
    23ba:	fb06 b91c 	mls	r9, r6, ip, fp
    23be:	f813 eb01 	ldrb.w	lr, [r3], #1
    23c2:	f800 e009 	strb.w	lr, [r0, r9]
    23c6:	eb01 0b03 	add.w	fp, r1, r3
    23ca:	6820      	ldr	r0, [r4, #0]
    23cc:	fbbb fcf6 	udiv	ip, fp, r6
    23d0:	fb06 b91c 	mls	r9, r6, ip, fp
    23d4:	f813 eb01 	ldrb.w	lr, [r3], #1
    23d8:	f800 e009 	strb.w	lr, [r0, r9]
    23dc:	eb01 0b03 	add.w	fp, r1, r3
    23e0:	f813 eb01 	ldrb.w	lr, [r3], #1
    23e4:	6820      	ldr	r0, [r4, #0]
    23e6:	fbbb fcf6 	udiv	ip, fp, r6
    23ea:	fb06 b91c 	mls	r9, r6, ip, fp
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23ee:	429a      	cmp	r2, r3
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    23f0:	f800 e009 	strb.w	lr, [r0, r9]
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23f4:	d031      	beq.n	245a <am_hal_ios_fifo_write+0x11e>
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    23f6:	469e      	mov	lr, r3
    23f8:	eb01 0903 	add.w	r9, r1, r3
    23fc:	6820      	ldr	r0, [r4, #0]
    23fe:	fbb9 fcf6 	udiv	ip, r9, r6
    2402:	fb06 991c 	mls	r9, r6, ip, r9
    2406:	f81e bb01 	ldrb.w	fp, [lr], #1
    240a:	f800 b009 	strb.w	fp, [r0, r9]
    240e:	eb01 0c0e 	add.w	ip, r1, lr
    2412:	6820      	ldr	r0, [r4, #0]
    2414:	fbbc f9f6 	udiv	r9, ip, r6
    2418:	fb06 c919 	mls	r9, r6, r9, ip
    241c:	f893 b001 	ldrb.w	fp, [r3, #1]
    2420:	f800 b009 	strb.w	fp, [r0, r9]
    2424:	f10e 0c01 	add.w	ip, lr, #1
    2428:	448c      	add	ip, r1
    242a:	6820      	ldr	r0, [r4, #0]
    242c:	fbbc fbf6 	udiv	fp, ip, r6
    2430:	fb06 c91b 	mls	r9, r6, fp, ip
    2434:	f89e e001 	ldrb.w	lr, [lr, #1]
    2438:	f800 e009 	strb.w	lr, [r0, r9]
    243c:	f103 0b03 	add.w	fp, r3, #3
    2440:	448b      	add	fp, r1
    2442:	f893 e003 	ldrb.w	lr, [r3, #3]
    2446:	6820      	ldr	r0, [r4, #0]
    2448:	fbbb fcf6 	udiv	ip, fp, r6
    244c:	3304      	adds	r3, #4
    244e:	fb06 b91c 	mls	r9, r6, ip, fp
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    2452:	429a      	cmp	r2, r3
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    2454:	f800 e009 	strb.w	lr, [r0, r9]
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    2458:	d1cd      	bne.n	23f6 <am_hal_ios_fifo_write+0xba>
        //
        ui32Primask = am_hal_interrupt_master_disable();
        //
        // Advance the write index, making sure to wrap if necessary.
        //
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    245a:	44aa      	add	sl, r5

        ui32NumBytes -= idx;
        //
        // Start a critical section for thread safety before updating length & wrIdx.
        //
        ui32Primask = am_hal_interrupt_master_disable();
    245c:	f7ff fba6 	bl	1bac <am_hal_interrupt_master_disable>
        //
        // Advance the write index, making sure to wrap if necessary.
        //
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    2460:	fbba f1f6 	udiv	r1, sl, r6
    2464:	fb06 a311 	mls	r3, r6, r1, sl
    2468:	6063      	str	r3, [r4, #4]

        //
        // Update the length value appropriately.
        //
        g_sSRAMBuffer.ui32Length += idx;
    246a:	68e2      	ldr	r2, [r4, #12]
        // gone below the threshold by the time we set the wrIdx above, and hence
        // we may never get the threshold interrupt to serve the SRAM data we
        // just wrote

        // If that is the case, explicitly generate the FSIZE interrupt from here
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    246c:	4e7b      	ldr	r6, [pc, #492]	; (265c <am_hal_ios_fifo_write+0x320>)
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;

        //
        // Update the length value appropriately.
        //
        g_sSRAMBuffer.ui32Length += idx;
    246e:	442a      	add	r2, r5
    2470:	60e2      	str	r2, [r4, #12]
        //
        // End the critical section
        //
        am_hal_interrupt_master_set(ui32Primask);
    2472:	f7ff fb9f 	bl	1bb4 <am_hal_interrupt_master_set>
        // we may never get the threshold interrupt to serve the SRAM data we
        // just wrote

        // If that is the case, explicitly generate the FSIZE interrupt from here
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    2476:	487a      	ldr	r0, [pc, #488]	; (2660 <am_hal_ios_fifo_write+0x324>)
        // gone below the threshold by the time we set the wrIdx above, and hence
        // we may never get the threshold interrupt to serve the SRAM data we
        // just wrote

        // If that is the case, explicitly generate the FSIZE interrupt from here
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    2478:	6831      	ldr	r1, [r6, #0]
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    247a:	6803      	ldr	r3, [r0, #0]
    247c:	f3c1 2a07 	ubfx	sl, r1, #8, #8
    2480:	b2da      	uxtb	r2, r3
    2482:	4592      	cmp	sl, r2
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
        {
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
        }

        ui32NumBytes -= idx;
    2484:	ebc5 0508 	rsb	r5, r5, r8
        // we may never get the threshold interrupt to serve the SRAM data we
        // just wrote

        // If that is the case, explicitly generate the FSIZE interrupt from here
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    2488:	d804      	bhi.n	2494 <am_hal_ios_fifo_write+0x158>
        {
            AM_BFW(IOSLAVE, INTSET, FSIZE, 1);
    248a:	4e76      	ldr	r6, [pc, #472]	; (2664 <am_hal_ios_fifo_write+0x328>)
    248c:	6830      	ldr	r0, [r6, #0]
    248e:	f040 0101 	orr.w	r1, r0, #1
    2492:	6031      	str	r1, [r6, #0]
        }
    }

    // Number of bytes written
    g_sSRAMBuffer.ui32FifoInc += totalBytes - ui32NumBytes;
    2494:	6923      	ldr	r3, [r4, #16]
    2496:	1b78      	subs	r0, r7, r5
    2498:	4403      	add	r3, r0
    249a:	6123      	str	r3, [r4, #16]
    return (totalBytes - ui32NumBytes);
    249c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
fifo_space_left(void)
{
    //
    // We waste one byte in HW FIFO
    //
    return ((uint32_t)g_ui32HwFifoSize- AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ) - 1);
    24a0:	4b6e      	ldr	r3, [pc, #440]	; (265c <am_hal_ios_fifo_write+0x320>)
    24a2:	4e71      	ldr	r6, [pc, #452]	; (2668 <am_hal_ios_fifo_write+0x32c>)
    24a4:	6818      	ldr	r0, [r3, #0]
    24a6:	f896 8000 	ldrb.w	r8, [r6]
//
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    24aa:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 2680 <am_hal_ios_fifo_write+0x344>
fifo_space_left(void)
{
    //
    // We waste one byte in HW FIFO
    //
    return ((uint32_t)g_ui32HwFifoSize- AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ) - 1);
    24ae:	f3c0 2107 	ubfx	r1, r0, #8, #8
    24b2:	f108 32ff 	add.w	r2, r8, #4294967295
    24b6:	ebc1 0802 	rsb	r8, r1, r2
        ui32FIFOSpace = fifo_space_left();

        //
        // If the whole message fits, send it now.
        //
        if ( ui32NumBytes <= ui32FIFOSpace )
    24ba:	4547      	cmp	r7, r8
    24bc:	f200 80e2 	bhi.w	2684 <am_hal_ios_fifo_write+0x348>
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    24c0:	486a      	ldr	r0, [pc, #424]	; (266c <am_hal_ios_fifo_write+0x330>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    24c2:	4b6b      	ldr	r3, [pc, #428]	; (2670 <am_hal_ios_fifo_write+0x334>)
//
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    24c4:	f8dc e000 	ldr.w	lr, [ip]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    24c8:	6801      	ldr	r1, [r0, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    24ca:	6818      	ldr	r0, [r3, #0]
    while ( ui32NumBytes )
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    24cc:	464a      	mov	r2, r9
    24ce:	f10e 0301 	add.w	r3, lr, #1
    24d2:	f812 8b01 	ldrb.w	r8, [r2], #1
    24d6:	f88e 8000 	strb.w	r8, [lr]
    24da:	eb09 0e07 	add.w	lr, r9, r7
    24de:	f107 3aff 	add.w	sl, r7, #4294967295
    24e2:	4298      	cmp	r0, r3
    24e4:	bf08      	it	eq
    24e6:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    24e8:	4596      	cmp	lr, r2
    24ea:	f00a 0b07 	and.w	fp, sl, #7
    24ee:	f000 8094 	beq.w	261a <am_hal_ios_fifo_write+0x2de>
    24f2:	f1bb 0f00 	cmp.w	fp, #0
    24f6:	d04b      	beq.n	2590 <am_hal_ios_fifo_write+0x254>
    24f8:	f1bb 0f01 	cmp.w	fp, #1
    24fc:	d03e      	beq.n	257c <am_hal_ios_fifo_write+0x240>
    24fe:	f1bb 0f02 	cmp.w	fp, #2
    2502:	d033      	beq.n	256c <am_hal_ios_fifo_write+0x230>
    2504:	f1bb 0f03 	cmp.w	fp, #3
    2508:	d028      	beq.n	255c <am_hal_ios_fifo_write+0x220>
    250a:	f1bb 0f04 	cmp.w	fp, #4
    250e:	d01d      	beq.n	254c <am_hal_ios_fifo_write+0x210>
    2510:	f1bb 0f05 	cmp.w	fp, #5
    2514:	d012      	beq.n	253c <am_hal_ios_fifo_write+0x200>
    2516:	f1bb 0f06 	cmp.w	fp, #6
    251a:	d007      	beq.n	252c <am_hal_ios_fifo_write+0x1f0>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    251c:	f812 8b01 	ldrb.w	r8, [r2], #1
    2520:	f883 8000 	strb.w	r8, [r3]
    2524:	3301      	adds	r3, #1
    2526:	4298      	cmp	r0, r3
    2528:	bf08      	it	eq
    252a:	460b      	moveq	r3, r1
    252c:	f812 ab01 	ldrb.w	sl, [r2], #1
    2530:	f883 a000 	strb.w	sl, [r3]
    2534:	3301      	adds	r3, #1
    2536:	4298      	cmp	r0, r3
    2538:	bf08      	it	eq
    253a:	460b      	moveq	r3, r1
    253c:	f812 bb01 	ldrb.w	fp, [r2], #1
    2540:	f883 b000 	strb.w	fp, [r3]
    2544:	3301      	adds	r3, #1
    2546:	4298      	cmp	r0, r3
    2548:	bf08      	it	eq
    254a:	460b      	moveq	r3, r1
    254c:	f812 8b01 	ldrb.w	r8, [r2], #1
    2550:	f883 8000 	strb.w	r8, [r3]
    2554:	3301      	adds	r3, #1
    2556:	4298      	cmp	r0, r3
    2558:	bf08      	it	eq
    255a:	460b      	moveq	r3, r1
    255c:	f812 ab01 	ldrb.w	sl, [r2], #1
    2560:	f883 a000 	strb.w	sl, [r3]
    2564:	3301      	adds	r3, #1
    2566:	4298      	cmp	r0, r3
    2568:	bf08      	it	eq
    256a:	460b      	moveq	r3, r1
    256c:	f812 bb01 	ldrb.w	fp, [r2], #1
    2570:	f883 b000 	strb.w	fp, [r3]
    2574:	3301      	adds	r3, #1
    2576:	4298      	cmp	r0, r3
    2578:	bf08      	it	eq
    257a:	460b      	moveq	r3, r1
    257c:	f812 8b01 	ldrb.w	r8, [r2], #1
    2580:	f883 8000 	strb.w	r8, [r3]
    2584:	3301      	adds	r3, #1
    2586:	4298      	cmp	r0, r3
    2588:	bf08      	it	eq
    258a:	460b      	moveq	r3, r1
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    258c:	4596      	cmp	lr, r2
    258e:	d044      	beq.n	261a <am_hal_ios_fifo_write+0x2de>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    2590:	4692      	mov	sl, r2
    2592:	f103 0801 	add.w	r8, r3, #1
    2596:	f81a bb01 	ldrb.w	fp, [sl], #1
    259a:	f883 b000 	strb.w	fp, [r3]
    259e:	4540      	cmp	r0, r8
    25a0:	bf0c      	ite	eq
    25a2:	460b      	moveq	r3, r1
    25a4:	4643      	movne	r3, r8
    25a6:	f89a a000 	ldrb.w	sl, [sl]
    25aa:	f883 a000 	strb.w	sl, [r3]
    25ae:	3301      	adds	r3, #1
    25b0:	4298      	cmp	r0, r3
    25b2:	bf08      	it	eq
    25b4:	460b      	moveq	r3, r1
    25b6:	f892 8002 	ldrb.w	r8, [r2, #2]
    25ba:	f883 8000 	strb.w	r8, [r3]
    25be:	3301      	adds	r3, #1
    25c0:	4298      	cmp	r0, r3
    25c2:	bf08      	it	eq
    25c4:	460b      	moveq	r3, r1
    25c6:	f892 b003 	ldrb.w	fp, [r2, #3]
    25ca:	f883 b000 	strb.w	fp, [r3]
    25ce:	3301      	adds	r3, #1
    25d0:	4298      	cmp	r0, r3
    25d2:	bf08      	it	eq
    25d4:	460b      	moveq	r3, r1
    25d6:	f892 a004 	ldrb.w	sl, [r2, #4]
    25da:	f883 a000 	strb.w	sl, [r3]
    25de:	3301      	adds	r3, #1
    25e0:	4298      	cmp	r0, r3
    25e2:	bf08      	it	eq
    25e4:	460b      	moveq	r3, r1
    25e6:	f892 8005 	ldrb.w	r8, [r2, #5]
    25ea:	f883 8000 	strb.w	r8, [r3]
    25ee:	3301      	adds	r3, #1
    25f0:	4298      	cmp	r0, r3
    25f2:	bf08      	it	eq
    25f4:	460b      	moveq	r3, r1
    25f6:	f892 b006 	ldrb.w	fp, [r2, #6]
    25fa:	f883 b000 	strb.w	fp, [r3]
    25fe:	3208      	adds	r2, #8
    2600:	3301      	adds	r3, #1
    2602:	4298      	cmp	r0, r3
    2604:	bf08      	it	eq
    2606:	460b      	moveq	r3, r1
    2608:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    260c:	e7b8      	b.n	2580 <am_hal_ios_fifo_write+0x244>
    //
    // This operation will only work properly if an SRAM buffer has been
    // allocated. Make sure that am_hal_ios_fifo_buffer_init() has been called,
    // and the buffer pointer looks valid.
    //
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    260e:	f240 4102 	movw	r1, #1026	; 0x402
    2612:	4818      	ldr	r0, [pc, #96]	; (2674 <am_hal_ios_fifo_write+0x338>)
    2614:	f7ff fa96 	bl	1b44 <am_hal_debug_error>
    2618:	e699      	b.n	234e <am_hal_ios_fifo_write+0x12>
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is 2.
    //
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    261a:	4917      	ldr	r1, [pc, #92]	; (2678 <am_hal_ios_fifo_write+0x33c>)
        if ( pFifoPtr == pFifoEnd )
        {
            pFifoPtr = pFifoBase;
        }
    }
    g_pui8FIFOPtr = pFifoPtr;
    261c:	f8cc 3000 	str.w	r3, [ip]
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is 2.
    //
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    2620:	6808      	ldr	r0, [r1, #0]
        {
            fifo_write(pui8Data, ui32FIFOSpace);
            ui32NumBytes -= ui32FIFOSpace;
            pui8Data += ui32FIFOSpace;
        };
        if (!isRevB2())
    2622:	b2c2      	uxtb	r2, r0
    2624:	2a22      	cmp	r2, #34	; 0x22
    2626:	d015      	beq.n	2654 <am_hal_ios_fifo_write+0x318>
    2628:	469b      	mov	fp, r3
        // If the whole message fits, send it now.
        //
        if ( ui32NumBytes <= ui32FIFOSpace )
        {
            fifo_write(pui8Data, ui32NumBytes);
            ui32NumBytes = 0;
    262a:	f04f 0800 	mov.w	r8, #0
    uint32_t ui32Primask;
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    262e:	f7ff fabd 	bl	1bac <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    2632:	7831      	ldrb	r1, [r6, #0]
    2634:	4a09      	ldr	r2, [pc, #36]	; (265c <am_hal_ios_fifo_write+0x320>)
    // Clear interrupts for IOS which could be spuriously triggered
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    2636:	4e11      	ldr	r6, [pc, #68]	; (267c <am_hal_ios_fifo_write+0x340>)
    uint32_t ui32Primask;
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    2638:	4682      	mov	sl, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    263a:	f10b 4030 	add.w	r0, fp, #2952790016	; 0xb0000000
    263e:	f7ff fabd 	bl	1bbc <internal_resync_fifoSize>
    // Clear interrupts for IOS which could be spuriously triggered
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    2642:	2307      	movs	r3, #7
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    2644:	4650      	mov	r0, sl
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    // Clear interrupts for IOS which could be spuriously triggered
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    2646:	6033      	str	r3, [r6, #0]
    //
    // End the critical section
    //
    am_hal_interrupt_master_set(ui32Primask);
    2648:	f7ff fab4 	bl	1bb4 <am_hal_interrupt_master_set>
    }

    //
    // If there's still data, write it to the SRAM buffer.
    //
    if ( ui32NumBytes )
    264c:	f1b8 0f00 	cmp.w	r8, #0
    2650:	f47f ae8a 	bne.w	2368 <am_hal_ios_fifo_write+0x2c>
        }

        //
        // If the data will fit, write it to the SRAM buffer.
        //
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    2654:	2500      	movs	r5, #0
    2656:	e71d      	b.n	2494 <am_hal_ios_fifo_write+0x158>
    2658:	10001800 	.word	0x10001800
    265c:	50000100 	.word	0x50000100
    2660:	50000108 	.word	0x50000108
    2664:	5000020c 	.word	0x5000020c
    2668:	100011a4 	.word	0x100011a4
    266c:	10001094 	.word	0x10001094
    2670:	1000108c 	.word	0x1000108c
    2674:	00003038 	.word	0x00003038
    2678:	4002000c 	.word	0x4002000c
    267c:	50000218 	.word	0x50000218
    2680:	10001090 	.word	0x10001090
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    2684:	485c      	ldr	r0, [pc, #368]	; (27f8 <am_hal_ios_fifo_write+0x4bc>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2686:	495d      	ldr	r1, [pc, #372]	; (27fc <am_hal_ios_fifo_write+0x4c0>)
//
//*****************************************************************************
static void
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    2688:	f8dc 3000 	ldr.w	r3, [ip]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    268c:	6800      	ldr	r0, [r0, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    268e:	680a      	ldr	r2, [r1, #0]
    2690:	46ce      	mov	lr, r9
    while ( ui32NumBytes )
    2692:	f1b8 0f00 	cmp.w	r8, #0
    2696:	f000 80a1 	beq.w	27dc <am_hal_ios_fifo_write+0x4a0>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    269a:	4649      	mov	r1, r9
    269c:	eb09 0e08 	add.w	lr, r9, r8
    26a0:	f811 ab01 	ldrb.w	sl, [r1], #1
    26a4:	f883 a000 	strb.w	sl, [r3]
    26a8:	ea6f 0b09 	mvn.w	fp, r9
    26ac:	3301      	adds	r3, #1
    26ae:	44f3      	add	fp, lr
    26b0:	429a      	cmp	r2, r3
    26b2:	bf08      	it	eq
    26b4:	4603      	moveq	r3, r0
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    26b6:	4571      	cmp	r1, lr
    26b8:	f00b 0907 	and.w	r9, fp, #7
    26bc:	f000 808e 	beq.w	27dc <am_hal_ios_fifo_write+0x4a0>
    26c0:	f1b9 0f00 	cmp.w	r9, #0
    26c4:	d04b      	beq.n	275e <am_hal_ios_fifo_write+0x422>
    26c6:	f1b9 0f01 	cmp.w	r9, #1
    26ca:	d03e      	beq.n	274a <am_hal_ios_fifo_write+0x40e>
    26cc:	f1b9 0f02 	cmp.w	r9, #2
    26d0:	d033      	beq.n	273a <am_hal_ios_fifo_write+0x3fe>
    26d2:	f1b9 0f03 	cmp.w	r9, #3
    26d6:	d028      	beq.n	272a <am_hal_ios_fifo_write+0x3ee>
    26d8:	f1b9 0f04 	cmp.w	r9, #4
    26dc:	d01d      	beq.n	271a <am_hal_ios_fifo_write+0x3de>
    26de:	f1b9 0f05 	cmp.w	r9, #5
    26e2:	d012      	beq.n	270a <am_hal_ios_fifo_write+0x3ce>
    26e4:	f1b9 0f06 	cmp.w	r9, #6
    26e8:	d007      	beq.n	26fa <am_hal_ios_fifo_write+0x3be>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    26ea:	f811 ab01 	ldrb.w	sl, [r1], #1
    26ee:	f883 a000 	strb.w	sl, [r3]
    26f2:	3301      	adds	r3, #1
    26f4:	429a      	cmp	r2, r3
    26f6:	bf08      	it	eq
    26f8:	4603      	moveq	r3, r0
    26fa:	f811 bb01 	ldrb.w	fp, [r1], #1
    26fe:	f883 b000 	strb.w	fp, [r3]
    2702:	3301      	adds	r3, #1
    2704:	429a      	cmp	r2, r3
    2706:	bf08      	it	eq
    2708:	4603      	moveq	r3, r0
    270a:	f811 9b01 	ldrb.w	r9, [r1], #1
    270e:	f883 9000 	strb.w	r9, [r3]
    2712:	3301      	adds	r3, #1
    2714:	429a      	cmp	r2, r3
    2716:	bf08      	it	eq
    2718:	4603      	moveq	r3, r0
    271a:	f811 ab01 	ldrb.w	sl, [r1], #1
    271e:	f883 a000 	strb.w	sl, [r3]
    2722:	3301      	adds	r3, #1
    2724:	429a      	cmp	r2, r3
    2726:	bf08      	it	eq
    2728:	4603      	moveq	r3, r0
    272a:	f811 bb01 	ldrb.w	fp, [r1], #1
    272e:	f883 b000 	strb.w	fp, [r3]
    2732:	3301      	adds	r3, #1
    2734:	429a      	cmp	r2, r3
    2736:	bf08      	it	eq
    2738:	4603      	moveq	r3, r0
    273a:	f811 9b01 	ldrb.w	r9, [r1], #1
    273e:	f883 9000 	strb.w	r9, [r3]
    2742:	3301      	adds	r3, #1
    2744:	429a      	cmp	r2, r3
    2746:	bf08      	it	eq
    2748:	4603      	moveq	r3, r0
    274a:	f811 ab01 	ldrb.w	sl, [r1], #1
    274e:	f883 a000 	strb.w	sl, [r3]
    2752:	3301      	adds	r3, #1
    2754:	429a      	cmp	r2, r3
    2756:	bf08      	it	eq
    2758:	4603      	moveq	r3, r0
fifo_write(uint8_t *pui8Data, uint32_t ui32NumBytes)
{
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    uint8_t *pFifoBase = g_pui8FIFOBase;
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    while ( ui32NumBytes )
    275a:	4571      	cmp	r1, lr
    275c:	d03e      	beq.n	27dc <am_hal_ios_fifo_write+0x4a0>
    {
        //
        // Write the data to the FIFO
        //
        *pFifoPtr++ = *pui8Data++;
    275e:	468a      	mov	sl, r1
    2760:	f103 0901 	add.w	r9, r3, #1
    2764:	f81a bb01 	ldrb.w	fp, [sl], #1
    2768:	f883 b000 	strb.w	fp, [r3]
    276c:	454a      	cmp	r2, r9
    276e:	bf0c      	ite	eq
    2770:	4603      	moveq	r3, r0
    2772:	464b      	movne	r3, r9
    2774:	f89a a000 	ldrb.w	sl, [sl]
    2778:	f883 a000 	strb.w	sl, [r3]
    277c:	3301      	adds	r3, #1
    277e:	429a      	cmp	r2, r3
    2780:	bf08      	it	eq
    2782:	4603      	moveq	r3, r0
    2784:	f891 9002 	ldrb.w	r9, [r1, #2]
    2788:	f883 9000 	strb.w	r9, [r3]
    278c:	3301      	adds	r3, #1
    278e:	429a      	cmp	r2, r3
    2790:	bf08      	it	eq
    2792:	4603      	moveq	r3, r0
    2794:	f891 b003 	ldrb.w	fp, [r1, #3]
    2798:	f883 b000 	strb.w	fp, [r3]
    279c:	3301      	adds	r3, #1
    279e:	429a      	cmp	r2, r3
    27a0:	bf08      	it	eq
    27a2:	4603      	moveq	r3, r0
    27a4:	f891 a004 	ldrb.w	sl, [r1, #4]
    27a8:	f883 a000 	strb.w	sl, [r3]
    27ac:	3301      	adds	r3, #1
    27ae:	429a      	cmp	r2, r3
    27b0:	bf08      	it	eq
    27b2:	4603      	moveq	r3, r0
    27b4:	f891 9005 	ldrb.w	r9, [r1, #5]
    27b8:	f883 9000 	strb.w	r9, [r3]
    27bc:	3301      	adds	r3, #1
    27be:	429a      	cmp	r2, r3
    27c0:	bf08      	it	eq
    27c2:	4603      	moveq	r3, r0
    27c4:	f891 b006 	ldrb.w	fp, [r1, #6]
    27c8:	f883 b000 	strb.w	fp, [r3]
    27cc:	3108      	adds	r1, #8
    27ce:	3301      	adds	r3, #1
    27d0:	429a      	cmp	r2, r3
    27d2:	bf08      	it	eq
    27d4:	4603      	moveq	r3, r0
    27d6:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    27da:	e7b8      	b.n	274e <am_hal_ios_fifo_write+0x412>
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is 2.
    //
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    27dc:	4808      	ldr	r0, [pc, #32]	; (2800 <am_hal_ios_fifo_write+0x4c4>)
        if ( pFifoPtr == pFifoEnd )
        {
            pFifoPtr = pFifoBase;
        }
    }
    g_pui8FIFOPtr = pFifoPtr;
    27de:	f8cc 3000 	str.w	r3, [ip]
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is 2.
    //
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    27e2:	6802      	ldr	r2, [r0, #0]
        {
            fifo_write(pui8Data, ui32FIFOSpace);
            ui32NumBytes -= ui32FIFOSpace;
            pui8Data += ui32FIFOSpace;
        };
        if (!isRevB2())
    27e4:	b2d1      	uxtb	r1, r2
    27e6:	2922      	cmp	r1, #34	; 0x22
            ui32NumBytes = 0;
        }
        else
        {
            fifo_write(pui8Data, ui32FIFOSpace);
            ui32NumBytes -= ui32FIFOSpace;
    27e8:	ebc8 0807 	rsb	r8, r8, r7
            pui8Data += ui32FIFOSpace;
    27ec:	46f1      	mov	r9, lr
        };
        if (!isRevB2())
    27ee:	f43f adbb 	beq.w	2368 <am_hal_ios_fifo_write+0x2c>
    27f2:	469b      	mov	fp, r3
    27f4:	e71b      	b.n	262e <am_hal_ios_fifo_write+0x2f2>
    27f6:	bf00      	nop
    27f8:	10001094 	.word	0x10001094
    27fc:	1000108c 	.word	0x1000108c
    2800:	4002000c 	.word	0x4002000c

00002804 <am_hal_ios_fifo_buffer_init>:
//*****************************************************************************
static void
am_hal_ios_buffer_init(am_hal_ios_buffer_t *psBuffer, void *pvArray,
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    2804:	4b16      	ldr	r3, [pc, #88]	; (2860 <am_hal_ios_fifo_buffer_init+0x5c>)
    //
    // Initialize the global SRAM buffer
    // Total size, which is SRAM Buffer plus the hardware FIFO needs to be
    // limited to 1023
    //
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    2806:	4a17      	ldr	r2, [pc, #92]	; (2864 <am_hal_ios_fifo_buffer_init+0x60>)
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_fifo_buffer_init(uint8_t *pui8Buffer, uint32_t ui32NumBytes)
{
    2808:	b570      	push	{r4, r5, r6, lr}
//*****************************************************************************
static void
am_hal_ios_buffer_init(am_hal_ios_buffer_t *psBuffer, void *pvArray,
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    280a:	2400      	movs	r4, #0
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    280c:	4e16      	ldr	r6, [pc, #88]	; (2868 <am_hal_ios_fifo_buffer_init+0x64>)
//*****************************************************************************
static void
am_hal_ios_buffer_init(am_hal_ios_buffer_t *psBuffer, void *pvArray,
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    280e:	605c      	str	r4, [r3, #4]
    psBuffer->ui32ReadIndex = 0;
    2810:	609c      	str	r4, [r3, #8]
    psBuffer->ui32Length = 0;
    2812:	60dc      	str	r4, [r3, #12]
    psBuffer->ui32Capacity = ui32Bytes;
    psBuffer->ui32FifoInc = 0;
    psBuffer->pui8Data = (uint8_t *)pvArray;
    2814:	6018      	str	r0, [r3, #0]
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2816:	6830      	ldr	r0, [r6, #0]
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2818:	4d14      	ldr	r5, [pc, #80]	; (286c <am_hal_ios_fifo_buffer_init+0x68>)
{
    psBuffer->ui32WriteIndex = 0;
    psBuffer->ui32ReadIndex = 0;
    psBuffer->ui32Length = 0;
    psBuffer->ui32Capacity = ui32Bytes;
    psBuffer->ui32FifoInc = 0;
    281a:	611c      	str	r4, [r3, #16]
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    281c:	f420 7e7f 	bic.w	lr, r0, #1020	; 0x3fc
    2820:	f02e 0003 	bic.w	r0, lr, #3
    //
    // Initialize the global SRAM buffer
    // Total size, which is SRAM Buffer plus the hardware FIFO needs to be
    // limited to 1023
    //
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    2824:	f892 c000 	ldrb.w	ip, [r2]
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2828:	6030      	str	r0, [r6, #0]
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    282a:	6828      	ldr	r0, [r5, #0]

    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    282c:	4e10      	ldr	r6, [pc, #64]	; (2870 <am_hal_ios_fifo_buffer_init+0x6c>)
    //
    // Initialize the global SRAM buffer
    // Total size, which is SRAM Buffer plus the hardware FIFO needs to be
    // limited to 1023
    //
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    282e:	f5cc 6280 	rsb	r2, ip, #1024	; 0x400
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    psBuffer->ui32ReadIndex = 0;
    psBuffer->ui32Length = 0;
    psBuffer->ui32Capacity = ui32Bytes;
    2832:	4291      	cmp	r1, r2

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2834:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    psBuffer->ui32ReadIndex = 0;
    psBuffer->ui32Length = 0;
    psBuffer->ui32Capacity = ui32Bytes;
    2838:	bf28      	it	cs
    283a:	4611      	movcs	r1, r2

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    283c:	6028      	str	r0, [r5, #0]

    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    283e:	6836      	ldr	r6, [r6, #0]
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    psBuffer->ui32ReadIndex = 0;
    psBuffer->ui32Length = 0;
    psBuffer->ui32Capacity = ui32Bytes;
    2840:	6159      	str	r1, [r3, #20]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    2842:	f7ff f9b3 	bl	1bac <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    2846:	4b0b      	ldr	r3, [pc, #44]	; (2874 <am_hal_ios_fifo_buffer_init+0x70>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2848:	4a0b      	ldr	r2, [pc, #44]	; (2878 <am_hal_ios_fifo_buffer_init+0x74>)
    ui32Primask = am_hal_interrupt_master_disable();

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    284a:	2101      	movs	r1, #1
    284c:	6019      	str	r1, [r3, #0]

    //
    // Change the FIFO offset.
    //
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    284e:	602e      	str	r6, [r5, #0]
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2850:	f106 41a0 	add.w	r1, r6, #1342177280	; 0x50000000
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;

    //
    // Clear the FIFO update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x0;
    2854:	601c      	str	r4, [r3, #0]
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);

    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
}
    2856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    285a:	6011      	str	r1, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    285c:	f7ff b9aa 	b.w	1bb4 <am_hal_interrupt_master_set>
    2860:	10001800 	.word	0x10001800
    2864:	100011a4 	.word	0x100011a4
    2868:	50000110 	.word	0x50000110
    286c:	50000100 	.word	0x50000100
    2870:	100011a8 	.word	0x100011a8
    2874:	5000010c 	.word	0x5000010c
    2878:	10001090 	.word	0x10001090

0000287c <am_hal_ios_update_fifoctr>:
//*****************************************************************************
void
am_hal_ios_update_fifoctr(void)
{
    // Write FIFOINC
    AM_BFW(IOSLAVE, FIFOINC, FIFOINC, g_sSRAMBuffer.ui32FifoInc);
    287c:	4807      	ldr	r0, [pc, #28]	; (289c <am_hal_ios_update_fifoctr+0x20>)
    287e:	4908      	ldr	r1, [pc, #32]	; (28a0 <am_hal_ios_update_fifoctr+0x24>)
    2880:	6803      	ldr	r3, [r0, #0]
    2882:	690a      	ldr	r2, [r1, #16]
    2884:	f423 7c7f 	bic.w	ip, r3, #1020	; 0x3fc
    2888:	f3c2 0209 	ubfx	r2, r2, #0, #10
    288c:	f02c 0303 	bic.w	r3, ip, #3
    2890:	4313      	orrs	r3, r2
    g_sSRAMBuffer.ui32FifoInc = 0;
    2892:	2200      	movs	r2, #0
//*****************************************************************************
void
am_hal_ios_update_fifoctr(void)
{
    // Write FIFOINC
    AM_BFW(IOSLAVE, FIFOINC, FIFOINC, g_sSRAMBuffer.ui32FifoInc);
    2894:	6003      	str	r3, [r0, #0]
    g_sSRAMBuffer.ui32FifoInc = 0;
    2896:	610a      	str	r2, [r1, #16]
    2898:	4770      	bx	lr
    289a:	bf00      	nop
    289c:	50000114 	.word	0x50000114
    28a0:	10001800 	.word	0x10001800

000028a4 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    28a4:	4b0d      	ldr	r3, [pc, #52]	; (28dc <am_hal_itm_enable+0x38>)
    28a6:	6818      	ldr	r0, [r3, #0]
    28a8:	07c2      	lsls	r2, r0, #31
    28aa:	d416      	bmi.n	28da <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    28ac:	4a0c      	ldr	r2, [pc, #48]	; (28e0 <am_hal_itm_enable+0x3c>)
    28ae:	6811      	ldr	r1, [r2, #0]
    28b0:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    28b4:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    28b6:	6810      	ldr	r0, [r2, #0]
    28b8:	01c3      	lsls	r3, r0, #7
    28ba:	d5fc      	bpl.n	28b6 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    28bc:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    28be:	4809      	ldr	r0, [pc, #36]	; (28e4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    28c0:	4c09      	ldr	r4, [pc, #36]	; (28e8 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    28c2:	4d0a      	ldr	r5, [pc, #40]	; (28ec <am_hal_itm_enable+0x48>)
    28c4:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    28c6:	250f      	movs	r5, #15
    28c8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    28ca:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    28cc:	4908      	ldr	r1, [pc, #32]	; (28f0 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    28ce:	4b09      	ldr	r3, [pc, #36]	; (28f4 <am_hal_itm_enable+0x50>)
    28d0:	4a09      	ldr	r2, [pc, #36]	; (28f8 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    28d2:	f04f 30ff 	mov.w	r0, #4294967295
    28d6:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    28d8:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    28da:	4770      	bx	lr
    28dc:	100011a0 	.word	0x100011a0
    28e0:	e000edfc 	.word	0xe000edfc
    28e4:	e0000fb0 	.word	0xe0000fb0
    28e8:	e0000e40 	.word	0xe0000e40
    28ec:	c5acce55 	.word	0xc5acce55
    28f0:	e0000e00 	.word	0xe0000e00
    28f4:	e0000e80 	.word	0xe0000e80
    28f8:	00150511 	.word	0x00150511

000028fc <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    28fc:	7803      	ldrb	r3, [r0, #0]
    28fe:	b1ab      	cbz	r3, 292c <am_hal_itm_print+0x30>
    2900:	4602      	mov	r2, r0
    2902:	2300      	movs	r3, #0
    2904:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    2908:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    290a:	2900      	cmp	r1, #0
    290c:	d1fa      	bne.n	2904 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    290e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    2912:	b430      	push	{r4, r5}
    2914:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    2916:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    2918:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    291c:	f8dc 3000 	ldr.w	r3, [ip]
    2920:	2b00      	cmp	r3, #0
    2922:	d0fb      	beq.n	291c <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    2924:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    2926:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    2928:	d1f6      	bne.n	2918 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    292a:	bc30      	pop	{r4, r5}
    292c:	4770      	bx	lr
    292e:	bf00      	nop

00002930 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2930:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    2932:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2934:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    2936:	b1c0      	cbz	r0, 296a <am_hal_pwrctrl_periph_enable+0x3a>
    2938:	1e43      	subs	r3, r0, #1
    293a:	4203      	tst	r3, r0
    293c:	d115      	bne.n	296a <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    293e:	f3ef 8010 	mrs	r0, PRIMASK
    2942:	9001      	str	r0, [sp, #4]
    2944:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    2946:	4a18      	ldr	r2, [pc, #96]	; (29a8 <am_hal_pwrctrl_periph_enable+0x78>)
    2948:	6811      	ldr	r1, [r2, #0]
    294a:	4321      	orrs	r1, r4
    294c:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    294e:	9b01      	ldr	r3, [sp, #4]
    2950:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    2954:	200e      	movs	r0, #14
    2956:	f7ff f8f7 	bl	1b48 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    295a:	f014 0f0e 	tst.w	r4, #14
    295e:	d10a      	bne.n	2976 <am_hal_pwrctrl_periph_enable+0x46>
    2960:	f014 0f70 	tst.w	r4, #112	; 0x70
    2964:	d00e      	beq.n	2984 <am_hal_pwrctrl_periph_enable+0x54>
    2966:	2408      	movs	r4, #8
    2968:	e006      	b.n	2978 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    296a:	4a10      	ldr	r2, [pc, #64]	; (29ac <am_hal_pwrctrl_periph_enable+0x7c>)
    296c:	4810      	ldr	r0, [pc, #64]	; (29b0 <am_hal_pwrctrl_periph_enable+0x80>)
    296e:	215d      	movs	r1, #93	; 0x5d
    2970:	f7ff f8e8 	bl	1b44 <am_hal_debug_error>
    2974:	e7e3      	b.n	293e <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    2976:	2404      	movs	r4, #4
    2978:	4a0e      	ldr	r2, [pc, #56]	; (29b4 <am_hal_pwrctrl_periph_enable+0x84>)
    297a:	6811      	ldr	r1, [r2, #0]
    297c:	420c      	tst	r4, r1
    297e:	d0fc      	beq.n	297a <am_hal_pwrctrl_periph_enable+0x4a>
}
    2980:	b002      	add	sp, #8
    2982:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    2984:	f240 1081 	movw	r0, #385	; 0x181
    2988:	4020      	ands	r0, r4
    298a:	b940      	cbnz	r0, 299e <am_hal_pwrctrl_periph_enable+0x6e>
    298c:	05a3      	lsls	r3, r4, #22
    298e:	d408      	bmi.n	29a2 <am_hal_pwrctrl_periph_enable+0x72>
    2990:	f414 6f80 	tst.w	r4, #1024	; 0x400
    2994:	bf14      	ite	ne
    2996:	2410      	movne	r4, #16
    2998:	f04f 34ff 	moveq.w	r4, #4294967295
    299c:	e7ec      	b.n	2978 <am_hal_pwrctrl_periph_enable+0x48>
    299e:	2402      	movs	r4, #2
    29a0:	e7ea      	b.n	2978 <am_hal_pwrctrl_periph_enable+0x48>
    29a2:	2480      	movs	r4, #128	; 0x80
    29a4:	e7e8      	b.n	2978 <am_hal_pwrctrl_periph_enable+0x48>
    29a6:	bf00      	nop
    29a8:	40021008 	.word	0x40021008
    29ac:	000030ac 	.word	0x000030ac
    29b0:	000030e0 	.word	0x000030e0
    29b4:	40021014 	.word	0x40021014

000029b8 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    29b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    29bc:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    29be:	d03a      	beq.n	2a36 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    29c0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    29c4:	f000 809d 	beq.w	2b02 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    29c8:	2801      	cmp	r0, #1
    29ca:	f000 809d 	beq.w	2b08 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    29ce:	2803      	cmp	r0, #3
    29d0:	f000 80a6 	beq.w	2b20 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    29d4:	2807      	cmp	r0, #7
    29d6:	f000 809c 	beq.w	2b12 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    29da:	280f      	cmp	r0, #15
    29dc:	f000 80a5 	beq.w	2b2a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    29e0:	281f      	cmp	r0, #31
    29e2:	f000 80b1 	beq.w	2b48 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    29e6:	283f      	cmp	r0, #63	; 0x3f
    29e8:	f000 80b5 	beq.w	2b56 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    29ec:	287f      	cmp	r0, #127	; 0x7f
    29ee:	f000 80b9 	beq.w	2b64 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    29f2:	28ff      	cmp	r0, #255	; 0xff
    29f4:	f000 80a0 	beq.w	2b38 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    29f8:	f240 13ff 	movw	r3, #511	; 0x1ff
    29fc:	4298      	cmp	r0, r3
    29fe:	f000 80b8 	beq.w	2b72 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    2a02:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2a06:	4288      	cmp	r0, r1
    2a08:	f000 80b9 	beq.w	2b7e <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    2a0c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2a10:	4290      	cmp	r0, r2
    2a12:	d00e      	beq.n	2a32 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    2a14:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    2a18:	f000 80b7 	beq.w	2b8a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    2a1c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    2a20:	42a0      	cmp	r0, r4
    2a22:	f000 80b5 	beq.w	2b90 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    2a26:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    2a2a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    2a2e:	4560      	cmp	r0, ip
    2a30:	d132      	bne.n	2a98 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    2a32:	495c      	ldr	r1, [pc, #368]	; (2ba4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    2a34:	e066      	b.n	2b04 <am_hal_pwrctrl_memory_enable+0x14c>
    2a36:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    2a3a:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    2a3c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2a3e:	4c5a      	ldr	r4, [pc, #360]	; (2ba8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2a40:	6822      	ldr	r2, [r4, #0]
    2a42:	402a      	ands	r2, r5
    2a44:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    2a46:	4d58      	ldr	r5, [pc, #352]	; (2ba8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2a48:	682c      	ldr	r4, [r5, #0]
    2a4a:	4320      	orrs	r0, r4
    2a4c:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d029      	beq.n	2aa6 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a52:	4a56      	ldr	r2, [pc, #344]	; (2bac <am_hal_pwrctrl_memory_enable+0x1f4>)
    2a54:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a56:	4203      	tst	r3, r0
    2a58:	bf18      	it	ne
    2a5a:	20c6      	movne	r0, #198	; 0xc6
    2a5c:	d01f      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a5e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a60:	422b      	tst	r3, r5
    2a62:	d01c      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a64:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a66:	4223      	tst	r3, r4
    2a68:	d019      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a6a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a6c:	422b      	tst	r3, r5
    2a6e:	d016      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a70:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a72:	4223      	tst	r3, r4
    2a74:	d013      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a76:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a78:	422b      	tst	r3, r5
    2a7a:	d010      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a7c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a7e:	4223      	tst	r3, r4
    2a80:	d00d      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a82:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a84:	422b      	tst	r3, r5
    2a86:	d00a      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a88:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a8a:	4223      	tst	r3, r4
    2a8c:	d007      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2a8e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    2a90:	422b      	tst	r3, r5
    2a92:	d004      	beq.n	2a9e <am_hal_pwrctrl_memory_enable+0xe6>
    2a94:	3809      	subs	r0, #9
    2a96:	d1e2      	bne.n	2a5e <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    2a98:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    2a9a:	bc30      	pop	{r4, r5}
    2a9c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    2a9e:	b911      	cbnz	r1, 2aa6 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    2aa0:	2001      	movs	r0, #1
}
    2aa2:	bc30      	pop	{r4, r5}
    2aa4:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2aa6:	4b41      	ldr	r3, [pc, #260]	; (2bac <am_hal_pwrctrl_memory_enable+0x1f4>)
    2aa8:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2aaa:	ea31 0402 	bics.w	r4, r1, r2
    2aae:	bf18      	it	ne
    2ab0:	24c6      	movne	r4, #198	; 0xc6
    2ab2:	d0f5      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2ab4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ab6:	ea31 0000 	bics.w	r0, r1, r0
    2aba:	d0f1      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2abc:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2abe:	ea31 0005 	bics.w	r0, r1, r5
    2ac2:	d0ed      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2ac4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ac6:	ea31 0002 	bics.w	r0, r1, r2
    2aca:	d0e9      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2acc:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ace:	ea31 0000 	bics.w	r0, r1, r0
    2ad2:	d0e5      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2ad4:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ad6:	ea31 0005 	bics.w	r0, r1, r5
    2ada:	d0e1      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2adc:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ade:	ea31 0002 	bics.w	r0, r1, r2
    2ae2:	d0dd      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2ae4:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2ae6:	ea31 0000 	bics.w	r0, r1, r0
    2aea:	d0d9      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2aec:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2aee:	ea31 0005 	bics.w	r0, r1, r5
    2af2:	d0d5      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2af4:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    2af6:	ea31 0002 	bics.w	r0, r1, r2
    2afa:	d0d1      	beq.n	2aa0 <am_hal_pwrctrl_memory_enable+0xe8>
    2afc:	3c09      	subs	r4, #9
    2afe:	d1d9      	bne.n	2ab4 <am_hal_pwrctrl_memory_enable+0xfc>
    2b00:	e7ca      	b.n	2a98 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    2b02:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    2b04:	2300      	movs	r3, #0
    2b06:	e79e      	b.n	2a46 <am_hal_pwrctrl_memory_enable+0x8e>
    2b08:	4d29      	ldr	r5, [pc, #164]	; (2bb0 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b0a:	4b2a      	ldr	r3, [pc, #168]	; (2bb4 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    2b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2b10:	e795      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b12:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b16:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    2b1a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2b1e:	e78e      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b20:	4d25      	ldr	r5, [pc, #148]	; (2bb8 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b22:	4b26      	ldr	r3, [pc, #152]	; (2bbc <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    2b24:	f44f 7140 	mov.w	r1, #768	; 0x300
    2b28:	e789      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b2a:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b2e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    2b32:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    2b36:	e782      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b38:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b3c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    2b40:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    2b44:	20ff      	movs	r0, #255	; 0xff
    2b46:	e77a      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b48:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b4c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    2b50:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    2b54:	e773      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b56:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b5a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    2b5e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    2b62:	e76c      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b64:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b68:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    2b6c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    2b70:	e765      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    2b72:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b76:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    2b7a:	4911      	ldr	r1, [pc, #68]	; (2bc0 <am_hal_pwrctrl_memory_enable+0x208>)
    2b7c:	e75f      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    2b7e:	4911      	ldr	r1, [pc, #68]	; (2bc4 <am_hal_pwrctrl_memory_enable+0x20c>)
    2b80:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    2b88:	e759      	b.n	2a3e <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2b8a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2b8e:	e7b9      	b.n	2b04 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2b90:	4805      	ldr	r0, [pc, #20]	; (2ba8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2b92:	6803      	ldr	r3, [r0, #0]
    2b94:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    2b98:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2b9a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    2b9e:	2100      	movs	r1, #0
    2ba0:	e757      	b.n	2a52 <am_hal_pwrctrl_memory_enable+0x9a>
    2ba2:	bf00      	nop
    2ba4:	0007ff00 	.word	0x0007ff00
    2ba8:	40021010 	.word	0x40021010
    2bac:	40021014 	.word	0x40021014
    2bb0:	fffff801 	.word	0xfffff801
    2bb4:	0007fe00 	.word	0x0007fe00
    2bb8:	fffff803 	.word	0xfffff803
    2bbc:	0007fc00 	.word	0x0007fc00
    2bc0:	0001ff00 	.word	0x0001ff00
    2bc4:	0003ff00 	.word	0x0003ff00

00002bc8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2bc8:	4b0f      	ldr	r3, [pc, #60]	; (2c08 <am_hal_pwrctrl_bucks_init+0x40>)
    2bca:	681a      	ldr	r2, [r3, #0]
    2bcc:	0792      	lsls	r2, r2, #30
    2bce:	d502      	bpl.n	2bd6 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2bd0:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2bd2:	07c3      	lsls	r3, r0, #31
    2bd4:	d40e      	bmi.n	2bf4 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2bd6:	4b0d      	ldr	r3, [pc, #52]	; (2c0c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2bd8:	4a0b      	ldr	r2, [pc, #44]	; (2c08 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2bda:	6819      	ldr	r1, [r3, #0]
    2bdc:	f041 0002 	orr.w	r0, r1, #2
    2be0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2be2:	6819      	ldr	r1, [r3, #0]
    2be4:	f041 0001 	orr.w	r0, r1, #1
    2be8:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2bea:	6813      	ldr	r3, [r2, #0]
    2bec:	f003 0103 	and.w	r1, r3, #3
    2bf0:	2903      	cmp	r1, #3
    2bf2:	d1fa      	bne.n	2bea <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2bf4:	4a04      	ldr	r2, [pc, #16]	; (2c08 <am_hal_pwrctrl_bucks_init+0x40>)
    2bf6:	6810      	ldr	r0, [r2, #0]
    2bf8:	f000 0303 	and.w	r3, r0, #3
    2bfc:	2b03      	cmp	r3, #3
    2bfe:	d1fa      	bne.n	2bf6 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    2c00:	2042      	movs	r0, #66	; 0x42
    2c02:	f7fe bfa1 	b.w	1b48 <am_hal_flash_delay>
    2c06:	bf00      	nop
    2c08:	40021004 	.word	0x40021004
    2c0c:	40021000 	.word	0x40021000

00002c10 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c10:	4b0b      	ldr	r3, [pc, #44]	; (2c40 <am_hal_pwrctrl_bucks_enable+0x30>)
    2c12:	681a      	ldr	r2, [r3, #0]
    2c14:	0792      	lsls	r2, r2, #30
    2c16:	d502      	bpl.n	2c1e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2c18:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c1a:	07c3      	lsls	r3, r0, #31
    2c1c:	d40e      	bmi.n	2c3c <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c1e:	4b09      	ldr	r3, [pc, #36]	; (2c44 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c20:	4a07      	ldr	r2, [pc, #28]	; (2c40 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c22:	6819      	ldr	r1, [r3, #0]
    2c24:	f041 0002 	orr.w	r0, r1, #2
    2c28:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2c2a:	6819      	ldr	r1, [r3, #0]
    2c2c:	f041 0001 	orr.w	r0, r1, #1
    2c30:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c32:	6813      	ldr	r3, [r2, #0]
    2c34:	f003 0103 	and.w	r1, r3, #3
    2c38:	2903      	cmp	r1, #3
    2c3a:	d1fa      	bne.n	2c32 <am_hal_pwrctrl_bucks_enable+0x22>
    2c3c:	4770      	bx	lr
    2c3e:	bf00      	nop
    2c40:	40021004 	.word	0x40021004
    2c44:	40021000 	.word	0x40021000

00002c48 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    2c48:	4b12      	ldr	r3, [pc, #72]	; (2c94 <am_hal_pwrctrl_bucks_disable+0x4c>)
    2c4a:	681a      	ldr	r2, [r3, #0]
    2c4c:	0792      	lsls	r2, r2, #30
    2c4e:	d402      	bmi.n	2c56 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    2c50:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    2c52:	07c3      	lsls	r3, r0, #31
    2c54:	d51c      	bpl.n	2c90 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2c56:	4910      	ldr	r1, [pc, #64]	; (2c98 <am_hal_pwrctrl_bucks_disable+0x50>)
    2c58:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    2c5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    2c5e:	2a20      	cmp	r2, #32
    2c60:	d00b      	beq.n	2c7a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    2c62:	4b0e      	ldr	r3, [pc, #56]	; (2c9c <am_hal_pwrctrl_bucks_disable+0x54>)
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	f022 0002 	bic.w	r0, r2, #2
    2c6a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    2c6c:	6819      	ldr	r1, [r3, #0]
    2c6e:	f021 0201 	bic.w	r2, r1, #1
    2c72:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    2c74:	200a      	movs	r0, #10
    2c76:	f7fe bf67 	b.w	1b48 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    2c7a:	4809      	ldr	r0, [pc, #36]	; (2ca0 <am_hal_pwrctrl_bucks_disable+0x58>)
    2c7c:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    2c7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2c82:	d1ee      	bne.n	2c62 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    2c84:	4805      	ldr	r0, [pc, #20]	; (2c9c <am_hal_pwrctrl_bucks_disable+0x54>)
    2c86:	6803      	ldr	r3, [r0, #0]
    2c88:	f003 0105 	and.w	r1, r3, #5
    2c8c:	6001      	str	r1, [r0, #0]
    2c8e:	e7f1      	b.n	2c74 <am_hal_pwrctrl_bucks_disable+0x2c>
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	40021004 	.word	0x40021004
    2c98:	4002000c 	.word	0x4002000c
    2c9c:	40021000 	.word	0x40021000
    2ca0:	40021008 	.word	0x40021008

00002ca4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2ca4:	4905      	ldr	r1, [pc, #20]	; (2cbc <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2ca6:	4a06      	ldr	r2, [pc, #24]	; (2cc0 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2ca8:	680b      	ldr	r3, [r1, #0]
    2caa:	f043 0006 	orr.w	r0, r3, #6
    2cae:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2cb0:	6811      	ldr	r1, [r2, #0]
    2cb2:	f021 0304 	bic.w	r3, r1, #4
    2cb6:	6013      	str	r3, [r2, #0]
    2cb8:	4770      	bx	lr
    2cba:	bf00      	nop
    2cbc:	40021018 	.word	0x40021018
    2cc0:	40021000 	.word	0x40021000

00002cc4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2cc4:	4a05      	ldr	r2, [pc, #20]	; (2cdc <am_hal_rtc_osc_select+0x18>)
    2cc6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    2cc8:	b918      	cbnz	r0, 2cd2 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2cca:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2cce:	6010      	str	r0, [r2, #0]
    2cd0:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2cd2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2cd6:	6011      	str	r1, [r2, #0]
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	4000400c 	.word	0x4000400c

00002ce0 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2ce0:	4a02      	ldr	r2, [pc, #8]	; (2cec <am_hal_rtc_osc_disable+0xc>)
    2ce2:	6813      	ldr	r3, [r2, #0]
    2ce4:	f043 0010 	orr.w	r0, r3, #16
    2ce8:	6010      	str	r0, [r2, #0]
    2cea:	4770      	bx	lr
    2cec:	40004050 	.word	0x40004050

00002cf0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf2:	b083      	sub	sp, #12
    2cf4:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2cf6:	f7fe ff59 	bl	1bac <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2cfa:	4a41      	ldr	r2, [pc, #260]	; (2e00 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2cfc:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2cfe:	b11d      	cbz	r5, 2d08 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2d00:	4b40      	ldr	r3, [pc, #256]	; (2e04 <am_hal_sysctrl_sleep+0x114>)
    2d02:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2d04:	07c3      	lsls	r3, r0, #31
    2d06:	d509      	bpl.n	2d1c <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2d08:	6811      	ldr	r1, [r2, #0]
    2d0a:	f021 0604 	bic.w	r6, r1, #4
    2d0e:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2d10:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2d12:	4620      	mov	r0, r4
    2d14:	f7fe ff4e 	bl	1bb4 <am_hal_interrupt_master_set>
}
    2d18:	b003      	add	sp, #12
    2d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2d1c:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d1e:	493a      	ldr	r1, [pc, #232]	; (2e08 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2d20:	4f3a      	ldr	r7, [pc, #232]	; (2e0c <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2d22:	4d3b      	ldr	r5, [pc, #236]	; (2e10 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2d24:	483b      	ldr	r0, [pc, #236]	; (2e14 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2d26:	f043 0604 	orr.w	r6, r3, #4
    2d2a:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d2c:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2d2e:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2d30:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2d32:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d34:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2d38:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2d3a:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d3e:	bf14      	ite	ne
    2d40:	2500      	movne	r5, #0
    2d42:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2d44:	2e03      	cmp	r6, #3
    2d46:	bf8c      	ite	hi
    2d48:	2100      	movhi	r1, #0
    2d4a:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2d4c:	f012 0303 	ands.w	r3, r2, #3
    2d50:	bf18      	it	ne
    2d52:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2d54:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2d58:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2d5a:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2d5c:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2d60:	b91e      	cbnz	r6, 2d6a <am_hal_sysctrl_sleep+0x7a>
    2d62:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    2d66:	2d0f      	cmp	r5, #15
    2d68:	d00a      	beq.n	2d80 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    2d6a:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    2d6c:	2d0f      	cmp	r5, #15
    2d6e:	d01a      	beq.n	2da6 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    2d70:	4f29      	ldr	r7, [pc, #164]	; (2e18 <am_hal_sysctrl_sleep+0x128>)
    2d72:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2d74:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    2d76:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2d78:	f7fe ff1c 	bl	1bb4 <am_hal_interrupt_master_set>
}
    2d7c:	b003      	add	sp, #12
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2d80:	683a      	ldr	r2, [r7, #0]
    2d82:	1e50      	subs	r0, r2, #1
    2d84:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2d86:	9800      	ldr	r0, [sp, #0]
    2d88:	f04f 31ff 	mov.w	r1, #4294967295
    2d8c:	f7fe fe54 	bl	1a38 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    2d90:	9800      	ldr	r0, [sp, #0]
    2d92:	4633      	mov	r3, r6
    2d94:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2d98:	f04f 31ff 	mov.w	r1, #4294967295
    2d9c:	f7fe fe60 	bl	1a60 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    2da0:	f7ff ff52 	bl	2c48 <am_hal_pwrctrl_bucks_disable>
    2da4:	e7e1      	b.n	2d6a <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2da6:	f3ef 8310 	mrs	r3, PRIMASK
    2daa:	9301      	str	r3, [sp, #4]
    2dac:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2dae:	4e1b      	ldr	r6, [pc, #108]	; (2e1c <am_hal_sysctrl_sleep+0x12c>)
    2db0:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    2db2:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2db4:	6835      	ldr	r5, [r6, #0]
    2db6:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    2dba:	f04c 021c 	orr.w	r2, ip, #28
    2dbe:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2dc0:	6830      	ldr	r0, [r6, #0]
    2dc2:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    2dc6:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    2dca:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2dcc:	9e01      	ldr	r6, [sp, #4]
    2dce:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2dd2:	201c      	movs	r0, #28
    2dd4:	f7fe feb8 	bl	1b48 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    2dd8:	f7ff ff1a 	bl	2c10 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2ddc:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2dde:	4910      	ldr	r1, [pc, #64]	; (2e20 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2de0:	4d0d      	ldr	r5, [pc, #52]	; (2e18 <am_hal_sysctrl_sleep+0x128>)
    2de2:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2de4:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2de6:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2de8:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    2dea:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    2dec:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2dee:	f7fe feab 	bl	1b48 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2df2:	9800      	ldr	r0, [sp, #0]
    2df4:	f04f 31ff 	mov.w	r1, #4294967295
    2df8:	f7fe fdf0 	bl	19dc <am_hal_ctimer_start>
    2dfc:	e789      	b.n	2d12 <am_hal_sysctrl_sleep+0x22>
    2dfe:	bf00      	nop
    2e00:	e000ed10 	.word	0xe000ed10
    2e04:	40020250 	.word	0x40020250
    2e08:	4002000c 	.word	0x4002000c
    2e0c:	100011b4 	.word	0x100011b4
    2e10:	40021000 	.word	0x40021000
    2e14:	40021008 	.word	0x40021008
    2e18:	100011ac 	.word	0x100011ac
    2e1c:	40020068 	.word	0x40020068
    2e20:	100011b0 	.word	0x100011b0

00002e24 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2e24:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2e26:	4a22      	ldr	r2, [pc, #136]	; (2eb0 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2e28:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2e2a:	2100      	movs	r1, #0
    2e2c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    2e2e:	b333      	cbz	r3, 2e7e <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2e30:	4d20      	ldr	r5, [pc, #128]	; (2eb4 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2e32:	4921      	ldr	r1, [pc, #132]	; (2eb8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2e34:	4a21      	ldr	r2, [pc, #132]	; (2ebc <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2e36:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2e38:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2e3c:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2e3e:	458c      	cmp	ip, r1
    2e40:	bf94      	ite	ls
    2e42:	461d      	movls	r5, r3
    2e44:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2e46:	f7fe fcc5 	bl	17d4 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2e4a:	1c43      	adds	r3, r0, #1
    2e4c:	d02e      	beq.n	2eac <am_hal_tpiu_enable+0x88>
    2e4e:	08c3      	lsrs	r3, r0, #3
    2e50:	fbb3 fef5 	udiv	lr, r3, r5
    2e54:	f10e 31ff 	add.w	r1, lr, #4294967295
    2e58:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2e5a:	4a19      	ldr	r2, [pc, #100]	; (2ec0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2e5c:	4c19      	ldr	r4, [pc, #100]	; (2ec4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2e5e:	4b1a      	ldr	r3, [pc, #104]	; (2ec8 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2e60:	491a      	ldr	r1, [pc, #104]	; (2ecc <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2e62:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2e64:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2e66:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2e68:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2e6c:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2e6e:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2e70:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2e72:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2e7a:	f7fe be65 	b.w	1b48 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    2e7e:	4c10      	ldr	r4, [pc, #64]	; (2ec0 <am_hal_tpiu_enable+0x9c>)
    2e80:	6905      	ldr	r5, [r0, #16]
    2e82:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2e84:	6882      	ldr	r2, [r0, #8]
    2e86:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2e8a:	68c3      	ldr	r3, [r0, #12]
    2e8c:	4c09      	ldr	r4, [pc, #36]	; (2eb4 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2e8e:	490e      	ldr	r1, [pc, #56]	; (2ec8 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2e90:	1e5d      	subs	r5, r3, #1
    2e92:	2201      	movs	r2, #1
    2e94:	40aa      	lsls	r2, r5
    2e96:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2e98:	680b      	ldr	r3, [r1, #0]
    2e9a:	6840      	ldr	r0, [r0, #4]
    2e9c:	4318      	orrs	r0, r3
    2e9e:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    2ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2ea4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    2ea8:	f7fe be4e 	b.w	1b48 <am_hal_flash_delay>
    2eac:	2005      	movs	r0, #5
    2eae:	e7d4      	b.n	2e5a <am_hal_tpiu_enable+0x36>
    2eb0:	e0040304 	.word	0xe0040304
    2eb4:	e0040004 	.word	0xe0040004
    2eb8:	001da380 	.word	0x001da380
    2ebc:	000f4240 	.word	0x000f4240
    2ec0:	e0040010 	.word	0xe0040010
    2ec4:	e00400f0 	.word	0xe00400f0
    2ec8:	40020250 	.word	0x40020250
    2ecc:	e0040f00 	.word	0xe0040f00

00002ed0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2ed0:	4b01      	ldr	r3, [pc, #4]	; (2ed8 <am_hal_vcomp_disable+0x8>)
    2ed2:	2237      	movs	r2, #55	; 0x37
    2ed4:	601a      	str	r2, [r3, #0]
    2ed6:	4770      	bx	lr
    2ed8:	4000c008 	.word	0x4000c008
    2edc:	74746948 	.word	0x74746948
    2ee0:	20676e69 	.word	0x20676e69
    2ee4:	65646e75 	.word	0x65646e75
    2ee8:	6f6c6672 	.word	0x6f6c6672
    2eec:	6f662077 	.word	0x6f662077
    2ef0:	68742072 	.word	0x68742072
    2ef4:	65722065 	.word	0x65722065
    2ef8:	73657571 	.word	0x73657571
    2efc:	20646574 	.word	0x20646574
    2f00:	20534f49 	.word	0x20534f49
    2f04:	4f464946 	.word	0x4f464946
    2f08:	61727420 	.word	0x61727420
    2f0c:	6566736e 	.word	0x6566736e
    2f10:	00000a72 	.word	0x00000a72
    2f14:	74746948 	.word	0x74746948
    2f18:	20676e69 	.word	0x20676e69
    2f1c:	65646e75 	.word	0x65646e75
    2f20:	6f6c6672 	.word	0x6f6c6672
    2f24:	6f662077 	.word	0x6f662077
    2f28:	68742072 	.word	0x68742072
    2f2c:	65722065 	.word	0x65722065
    2f30:	73657571 	.word	0x73657571
    2f34:	20646574 	.word	0x20646574
    2f38:	20534f49 	.word	0x20534f49
    2f3c:	4f464946 	.word	0x4f464946
    2f40:	61727420 	.word	0x61727420
    2f44:	6566736e 	.word	0x6566736e
    2f48:	00002e72 	.word	0x00002e72
    2f4c:	2e5c2e2e 	.word	0x2e5c2e2e
    2f50:	72735c2e 	.word	0x72735c2e
    2f54:	6f695c63 	.word	0x6f695c63
    2f58:	69665f73 	.word	0x69665f73
    2f5c:	632e6f66 	.word	0x632e6f66
    2f60:	00000000 	.word	0x00000000
    2f64:	74746948 	.word	0x74746948
    2f68:	20676e69 	.word	0x20676e69
    2f6c:	4f525245 	.word	0x4f525245
    2f70:	61632052 	.word	0x61632052
    2f74:	002e6573 	.word	0x002e6573
    2f78:	0a0a0a0a 	.word	0x0a0a0a0a
    2f7c:	0a0a0a0a 	.word	0x0a0a0a0a
    2f80:	0a0a0a0a 	.word	0x0a0a0a0a
    2f84:	0a0a0a0a 	.word	0x0a0a0a0a
    2f88:	00000a0a 	.word	0x00000a0a

00002f8c <am_hal_cachectrl_defaults>:
    2f8c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2f9c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2fac:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2fbc:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2fcc:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2fdc:	6b6c635f 2e6e6567 00000063 6d695443     _clkgen.c...CTim
    2fec:	69207265 7265746e 74707572 6d756e20     er interrupt num
    2ffc:	20726562 2074756f 7220666f 65676e61     ber out of range
    300c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    301c:	6974635f 2e72656d 00000063 20646142     _ctimer.c...Bad 
    302c:	4d495443 72205245 00646165 2e5c2e2e     CTIMER read...\.
    303c:	6d615c2e 6c61685f 736f695f 0000632e     .\am_hal_ios.c..
    304c:	20656854 75716572 65747365 4f492064     The requested IO
    305c:	72742053 66736e61 64207265 276e6469     S transfer didn'
    306c:	69662074 6e692074 20656874 4d41524c     t fit inthe LRAM
    307c:	46494620 54202e4f 75207972 676e6973      FIFO. Try using
    308c:	5f6d6120 5f6c6168 5f736f69 6f666966      am_hal_ios_fifo
    309c:	6972775f 29286574 0000002e              _write()....

000030a8 <am_hal_ios_pui8LRAM>:
    30a8:	50000000 6e6e6143 6520746f 6c62616e     ...PCannot enabl
    30b8:	6f6d2065 74206572 206e6168 20656e6f     e more than one 
    30c8:	69726570 72656870 61206c61 20612074     peripheral at a 
    30d8:	656d6974 0000002e 2e5c2e2e 6d615c2e     time......\..\am
    30e8:	6c61685f 7277705f 6c727463 0000632e     _hal_pwrctrl.c..
