
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\ios_fifo_host\atollic_gcc\bin\ios_fifo_host_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006470  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000006c  10001000  00006470  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000007f4  1000106c  000064dc  0002106c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002106c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000ee9d  00000000  00000000  000210a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022d5  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000a78  00000000  00000000  00032215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001d10  00000000  00000000  00032c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006346  00000000  00000000  0003499d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003aff  00000000  00000000  0003ace3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0003e7e2  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002110  00000000  00000000  0003e860  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010ff4  00000000  00000000  00040970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 cd 0b 00 00 35 0c 00 00 3d 0c 00 00     ........5...=...
      10:	3d 0c 00 00 3d 0c 00 00 3d 0c 00 00 00 00 00 00     =...=...=.......
	...
      2c:	45 0c 00 00 45 0c 00 00 00 00 00 00 45 0c 00 00     E...E.......E...
      3c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      4c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      5c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      6c:	45 0c 00 00 19 02 00 00 45 0c 00 00 45 0c 00 00     E.......E...E...
      7c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      8c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      9c:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      ac:	45 0c 00 00 45 0c 00 00 45 0c 00 00 45 0c 00 00     E...E...E...E...
      bc:	45 0c 00 00                                         E...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <clear_rx_buf>:
// Clear Rx Buffer for comparison
//
//*****************************************************************************
void
clear_rx_buf(void)
{
     160:	b480      	push	{r7}
     162:	b083      	sub	sp, #12
     164:	af00      	add	r7, sp, #0
    uint32_t i;
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
     166:	2300      	movs	r3, #0
     168:	607b      	str	r3, [r7, #4]
     16a:	e007      	b.n	17c <clear_rx_buf+0x1c>
    {
        g_pui8RcvBuf[i] = EMPTY_BYTE;
     16c:	4a08      	ldr	r2, [pc, #32]	; (190 <clear_rx_buf+0x30>)
     16e:	687b      	ldr	r3, [r7, #4]
     170:	4413      	add	r3, r2
     172:	22ee      	movs	r2, #238	; 0xee
     174:	701a      	strb	r2, [r3, #0]
//*****************************************************************************
void
clear_rx_buf(void)
{
    uint32_t i;
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
     176:	687b      	ldr	r3, [r7, #4]
     178:	3301      	adds	r3, #1
     17a:	607b      	str	r3, [r7, #4]
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     182:	d3f3      	bcc.n	16c <clear_rx_buf+0xc>
    {
        g_pui8RcvBuf[i] = EMPTY_BYTE;
    }
}
     184:	bf00      	nop
     186:	370c      	adds	r7, #12
     188:	46bd      	mov	sp, r7
     18a:	f85d 7b04 	ldr.w	r7, [sp], #4
     18e:	4770      	bx	lr
     190:	100011c4 	.word	0x100011c4

00000194 <validate_rx_buf>:
// Returns 0 for success case
//
//*****************************************************************************
uint32_t
validate_rx_buf(uint32_t rxSize)
{
     194:	b580      	push	{r7, lr}
     196:	b084      	sub	sp, #16
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for ( i = 0; i < rxSize; i++ )
     19c:	2300      	movs	r3, #0
     19e:	60fb      	str	r3, [r7, #12]
     1a0:	e013      	b.n	1ca <validate_rx_buf+0x36>
    {
        if ( g_pui8RcvBuf[i] != (((g_startIdx + i) & 0xFF) ^ XOR_BYTE) )
     1a2:	4a14      	ldr	r2, [pc, #80]	; (1f4 <validate_rx_buf+0x60>)
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4413      	add	r3, r2
     1a8:	781b      	ldrb	r3, [r3, #0]
     1aa:	4619      	mov	r1, r3
     1ac:	4b12      	ldr	r3, [pc, #72]	; (1f8 <validate_rx_buf+0x64>)
     1ae:	681a      	ldr	r2, [r3, #0]
     1b0:	68fb      	ldr	r3, [r7, #12]
     1b2:	4413      	add	r3, r2
     1b4:	b2db      	uxtb	r3, r3
     1b6:	4299      	cmp	r1, r3
     1b8:	d004      	beq.n	1c4 <validate_rx_buf+0x30>
        {
            am_util_stdio_printf("Failed to compare buffers at index %d \n", i);
     1ba:	68f9      	ldr	r1, [r7, #12]
     1bc:	480f      	ldr	r0, [pc, #60]	; (1fc <validate_rx_buf+0x68>)
     1be:	f001 fbb7 	bl	1930 <am_util_stdio_printf>
            break;
     1c2:	e006      	b.n	1d2 <validate_rx_buf+0x3e>
//*****************************************************************************
uint32_t
validate_rx_buf(uint32_t rxSize)
{
    uint32_t i;
    for ( i = 0; i < rxSize; i++ )
     1c4:	68fb      	ldr	r3, [r7, #12]
     1c6:	3301      	adds	r3, #1
     1c8:	60fb      	str	r3, [r7, #12]
     1ca:	68fa      	ldr	r2, [r7, #12]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	429a      	cmp	r2, r3
     1d0:	d3e7      	bcc.n	1a2 <validate_rx_buf+0xe>
            am_util_stdio_printf("Failed to compare buffers at index %d \n", i);
            break;
        }
    }
    // Set the reference for next chunk
    g_startIdx += rxSize;
     1d2:	4b09      	ldr	r3, [pc, #36]	; (1f8 <validate_rx_buf+0x64>)
     1d4:	681a      	ldr	r2, [r3, #0]
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	4413      	add	r3, r2
     1da:	4a07      	ldr	r2, [pc, #28]	; (1f8 <validate_rx_buf+0x64>)
     1dc:	6013      	str	r3, [r2, #0]
    return (i == rxSize);
     1de:	68fa      	ldr	r2, [r7, #12]
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	429a      	cmp	r2, r3
     1e4:	bf0c      	ite	eq
     1e6:	2301      	moveq	r3, #1
     1e8:	2300      	movne	r3, #0
     1ea:	b2db      	uxtb	r3, r3
}
     1ec:	4618      	mov	r0, r3
     1ee:	3710      	adds	r7, #16
     1f0:	46bd      	mov	sp, r7
     1f2:	bd80      	pop	{r7, pc}
     1f4:	100011c4 	.word	0x100011c4
     1f8:	1000106c 	.word	0x1000106c
     1fc:	00006104 	.word	0x00006104

00000200 <hostint_handler>:

// ISR callback for the host IOINT
static void hostint_handler(void)
{
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
    bIosInt = true;
     204:	4b03      	ldr	r3, [pc, #12]	; (214 <hostint_handler+0x14>)
     206:	2201      	movs	r2, #1
     208:	701a      	strb	r2, [r3, #0]
}
     20a:	bf00      	nop
     20c:	46bd      	mov	sp, r7
     20e:	f85d 7b04 	ldr.w	r7, [sp], #4
     212:	4770      	bx	lr
     214:	10001070 	.word	0x10001070

00000218 <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
     21e:	2000      	movs	r0, #0
     220:	f002 f828 	bl	2274 <am_hal_gpio_int_status_get>
     224:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     228:	e9d7 0100 	ldrd	r0, r1, [r7]
     22c:	f002 f810 	bl	2250 <am_hal_gpio_int_clear>
    am_hal_gpio_int_service(ui64Status);
     230:	e9d7 0100 	ldrd	r0, r1, [r7]
     234:	f002 f84a 	bl	22cc <am_hal_gpio_int_service>
}
     238:	bf00      	nop
     23a:	3708      	adds	r7, #8
     23c:	46bd      	mov	sp, r7
     23e:	bd80      	pop	{r7, pc}

00000240 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     240:	b580      	push	{r7, lr}
     242:	b082      	sub	sp, #8
     244:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     246:	4817      	ldr	r0, [pc, #92]	; (2a4 <itm_start+0x64>)
     248:	f000 fd00 	bl	c4c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     24c:	f3ef 8310 	mrs	r3, PRIMASK
     250:	607b      	str	r3, [r7, #4]
     252:	b672      	cpsid	i
     254:	4b14      	ldr	r3, [pc, #80]	; (2a8 <itm_start+0x68>)
     256:	2273      	movs	r2, #115	; 0x73
     258:	601a      	str	r2, [r3, #0]
     25a:	4a14      	ldr	r2, [pc, #80]	; (2ac <itm_start+0x6c>)
     25c:	4b13      	ldr	r3, [pc, #76]	; (2ac <itm_start+0x6c>)
     25e:	681b      	ldr	r3, [r3, #0]
     260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     264:	6013      	str	r3, [r2, #0]
     266:	4a12      	ldr	r2, [pc, #72]	; (2b0 <itm_start+0x70>)
     268:	4b11      	ldr	r3, [pc, #68]	; (2b0 <itm_start+0x70>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     274:	6013      	str	r3, [r2, #0]
     276:	4a0f      	ldr	r2, [pc, #60]	; (2b4 <itm_start+0x74>)
     278:	4b0e      	ldr	r3, [pc, #56]	; (2b4 <itm_start+0x74>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     280:	6013      	str	r3, [r2, #0]
     282:	4b09      	ldr	r3, [pc, #36]	; (2a8 <itm_start+0x68>)
     284:	2200      	movs	r2, #0
     286:	601a      	str	r2, [r3, #0]
     288:	687b      	ldr	r3, [r7, #4]
     28a:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     28e:	f004 fb47 	bl	4920 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     292:	f001 fdf9 	bl	1e88 <am_bsp_debug_printf_enable>
    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     296:	f001 fb69 	bl	196c <am_util_stdio_terminal_clear>
}
     29a:	bf00      	nop
     29c:	3708      	adds	r7, #8
     29e:	46bd      	mov	sp, r7
     2a0:	bd80      	pop	{r7, pc}
     2a2:	bf00      	nop
     2a4:	00001f09 	.word	0x00001f09
     2a8:	40010060 	.word	0x40010060
     2ac:	40010054 	.word	0x40010054
     2b0:	40010028 	.word	0x40010028
     2b4:	40010108 	.word	0x40010108

000002b8 <iom_slave_read>:

void
iom_slave_read(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b086      	sub	sp, #24
     2bc:	af02      	add	r7, sp, #8
     2be:	60f8      	str	r0, [r7, #12]
     2c0:	607a      	str	r2, [r7, #4]
     2c2:	603b      	str	r3, [r7, #0]
     2c4:	460b      	mov	r3, r1
     2c6:	72fb      	strb	r3, [r7, #11]
    if ( bSpi )
     2c8:	7afb      	ldrb	r3, [r7, #11]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d00a      	beq.n	2e4 <iom_slave_read+0x2c>
    {
        am_hal_iom_spi_read(iom, 0,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	021b      	lsls	r3, r3, #8
void
iom_slave_read(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    if ( bSpi )
    {
        am_hal_iom_spi_read(iom, 0,
     2d2:	b29b      	uxth	r3, r3
     2d4:	9300      	str	r3, [sp, #0]
     2d6:	69bb      	ldr	r3, [r7, #24]
     2d8:	683a      	ldr	r2, [r7, #0]
     2da:	2100      	movs	r1, #0
     2dc:	68f8      	ldr	r0, [r7, #12]
     2de:	f003 fdcb 	bl	3e78 <am_hal_iom_spi_read>
    else
    {
        am_hal_iom_i2c_read(iom, I2C_ADDR,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
}
     2e2:	e009      	b.n	2f8 <iom_slave_read+0x40>
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
    else
    {
        am_hal_iom_i2c_read(iom, I2C_ADDR,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	021b      	lsls	r3, r3, #8
        am_hal_iom_spi_read(iom, 0,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
    else
    {
        am_hal_iom_i2c_read(iom, I2C_ADDR,
     2e8:	b29b      	uxth	r3, r3
     2ea:	9300      	str	r3, [sp, #0]
     2ec:	69bb      	ldr	r3, [r7, #24]
     2ee:	683a      	ldr	r2, [r7, #0]
     2f0:	2110      	movs	r1, #16
     2f2:	68f8      	ldr	r0, [r7, #12]
     2f4:	f004 fa68 	bl	47c8 <am_hal_iom_i2c_read>
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
}
     2f8:	bf00      	nop
     2fa:	3710      	adds	r7, #16
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}

00000300 <iom_slave_write>:

void
iom_slave_write(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
     300:	b580      	push	{r7, lr}
     302:	b086      	sub	sp, #24
     304:	af02      	add	r7, sp, #8
     306:	60f8      	str	r0, [r7, #12]
     308:	607a      	str	r2, [r7, #4]
     30a:	603b      	str	r3, [r7, #0]
     30c:	460b      	mov	r3, r1
     30e:	72fb      	strb	r3, [r7, #11]
    if ( bSpi )
     310:	7afb      	ldrb	r3, [r7, #11]
     312:	2b00      	cmp	r3, #0
     314:	d00a      	beq.n	32c <iom_slave_write+0x2c>
    {
        am_hal_iom_spi_write(iom, 0,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset));
     316:	687b      	ldr	r3, [r7, #4]
     318:	021b      	lsls	r3, r3, #8
void
iom_slave_write(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    if ( bSpi )
    {
        am_hal_iom_spi_write(iom, 0,
     31a:	b29b      	uxth	r3, r3
     31c:	9300      	str	r3, [sp, #0]
     31e:	69bb      	ldr	r3, [r7, #24]
     320:	683a      	ldr	r2, [r7, #0]
     322:	2100      	movs	r1, #0
     324:	68f8      	ldr	r0, [r7, #12]
     326:	f003 fb49 	bl	39bc <am_hal_iom_spi_write>
    else
    {
        am_hal_iom_i2c_write(iom, I2C_ADDR,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset) );
    }
}
     32a:	e009      	b.n	340 <iom_slave_write+0x40>
                             pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
    else
    {
        am_hal_iom_i2c_write(iom, I2C_ADDR,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset) );
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	021b      	lsls	r3, r3, #8
        am_hal_iom_spi_write(iom, 0,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
    else
    {
        am_hal_iom_i2c_write(iom, I2C_ADDR,
     330:	b29b      	uxth	r3, r3
     332:	9300      	str	r3, [sp, #0]
     334:	69bb      	ldr	r3, [r7, #24]
     336:	683a      	ldr	r2, [r7, #0]
     338:	2110      	movs	r1, #16
     33a:	68f8      	ldr	r0, [r7, #12]
     33c:	f004 f99a 	bl	4674 <am_hal_iom_i2c_write>
                             pBuf, size, AM_HAL_IOM_OFFSET(offset) );
    }
}
     340:	bf00      	nop
     342:	3710      	adds	r7, #16
     344:	46bd      	mov	sp, r7
     346:	bd80      	pop	{r7, pc}

00000348 <i2c_pins_enable>:
// Internal Helper functions
//
//*****************************************************************************
void
i2c_pins_enable(uint32_t ui32Module)
{
     348:	b480      	push	{r7}
     34a:	b08f      	sub	sp, #60	; 0x3c
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
    switch(ui32Module)
     350:	687b      	ldr	r3, [r7, #4]
     352:	2b05      	cmp	r3, #5
     354:	f200 8205 	bhi.w	762 <i2c_pins_enable+0x41a>
     358:	a201      	add	r2, pc, #4	; (adr r2, 360 <i2c_pins_enable+0x18>)
     35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     35e:	bf00      	nop
     360:	00000379 	.word	0x00000379
     364:	00000413 	.word	0x00000413
     368:	000004b1 	.word	0x000004b1
     36c:	0000054f 	.word	0x0000054f
     370:	00000629 	.word	0x00000629
     374:	000006c5 	.word	0x000006c5
    {
        case 0:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM0_SCL);
     378:	4b9c      	ldr	r3, [pc, #624]	; (5ec <i2c_pins_enable+0x2a4>)
     37a:	2220      	movs	r2, #32
     37c:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM0_SDA);
     37e:	4b9b      	ldr	r3, [pc, #620]	; (5ec <i2c_pins_enable+0x2a4>)
     380:	2240      	movs	r2, #64	; 0x40
     382:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_SCL, AM_HAL_PIN_5_M0SCL | AM_HAL_GPIO_PULLUP);
     384:	f3ef 8310 	mrs	r3, PRIMASK
     388:	637b      	str	r3, [r7, #52]	; 0x34
     38a:	b672      	cpsid	i
     38c:	4b98      	ldr	r3, [pc, #608]	; (5f0 <i2c_pins_enable+0x2a8>)
     38e:	2273      	movs	r2, #115	; 0x73
     390:	601a      	str	r2, [r3, #0]
     392:	4a98      	ldr	r2, [pc, #608]	; (5f4 <i2c_pins_enable+0x2ac>)
     394:	4b97      	ldr	r3, [pc, #604]	; (5f4 <i2c_pins_enable+0x2ac>)
     396:	681b      	ldr	r3, [r3, #0]
     398:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
     39c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     3a0:	6013      	str	r3, [r2, #0]
     3a2:	4a95      	ldr	r2, [pc, #596]	; (5f8 <i2c_pins_enable+0x2b0>)
     3a4:	4b94      	ldr	r3, [pc, #592]	; (5f8 <i2c_pins_enable+0x2b0>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     3ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     3b0:	6013      	str	r3, [r2, #0]
     3b2:	4a92      	ldr	r2, [pc, #584]	; (5fc <i2c_pins_enable+0x2b4>)
     3b4:	4b91      	ldr	r3, [pc, #580]	; (5fc <i2c_pins_enable+0x2b4>)
     3b6:	681b      	ldr	r3, [r3, #0]
     3b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     3bc:	6013      	str	r3, [r2, #0]
     3be:	4b8c      	ldr	r3, [pc, #560]	; (5f0 <i2c_pins_enable+0x2a8>)
     3c0:	2200      	movs	r2, #0
     3c2:	601a      	str	r2, [r3, #0]
     3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     3c6:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_SDA, AM_HAL_PIN_6_M0SDA | AM_HAL_GPIO_PULLUP);
     3ca:	f3ef 8310 	mrs	r3, PRIMASK
     3ce:	633b      	str	r3, [r7, #48]	; 0x30
     3d0:	b672      	cpsid	i
     3d2:	4b87      	ldr	r3, [pc, #540]	; (5f0 <i2c_pins_enable+0x2a8>)
     3d4:	2273      	movs	r2, #115	; 0x73
     3d6:	601a      	str	r2, [r3, #0]
     3d8:	4a86      	ldr	r2, [pc, #536]	; (5f4 <i2c_pins_enable+0x2ac>)
     3da:	4b86      	ldr	r3, [pc, #536]	; (5f4 <i2c_pins_enable+0x2ac>)
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     3e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     3e6:	6013      	str	r3, [r2, #0]
     3e8:	4a83      	ldr	r2, [pc, #524]	; (5f8 <i2c_pins_enable+0x2b0>)
     3ea:	4b83      	ldr	r3, [pc, #524]	; (5f8 <i2c_pins_enable+0x2b0>)
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     3f2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     3f6:	6013      	str	r3, [r2, #0]
     3f8:	4a80      	ldr	r2, [pc, #512]	; (5fc <i2c_pins_enable+0x2b4>)
     3fa:	4b80      	ldr	r3, [pc, #512]	; (5fc <i2c_pins_enable+0x2b4>)
     3fc:	681b      	ldr	r3, [r3, #0]
     3fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     402:	6013      	str	r3, [r2, #0]
     404:	4b7a      	ldr	r3, [pc, #488]	; (5f0 <i2c_pins_enable+0x2a8>)
     406:	2200      	movs	r2, #0
     408:	601a      	str	r2, [r3, #0]
     40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     40c:	f383 8810 	msr	PRIMASK, r3
            break;
     410:	e1a8      	b.n	764 <i2c_pins_enable+0x41c>

        case 1:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM1_SCL);
     412:	4b76      	ldr	r3, [pc, #472]	; (5ec <i2c_pins_enable+0x2a4>)
     414:	f44f 7280 	mov.w	r2, #256	; 0x100
     418:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM1_SDA);
     41a:	4b74      	ldr	r3, [pc, #464]	; (5ec <i2c_pins_enable+0x2a4>)
     41c:	f44f 7200 	mov.w	r2, #512	; 0x200
     420:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM1_SCL, AM_HAL_PIN_8_M1SCL | AM_HAL_GPIO_PULLUP);
     422:	f3ef 8310 	mrs	r3, PRIMASK
     426:	62fb      	str	r3, [r7, #44]	; 0x2c
     428:	b672      	cpsid	i
     42a:	4b71      	ldr	r3, [pc, #452]	; (5f0 <i2c_pins_enable+0x2a8>)
     42c:	2273      	movs	r2, #115	; 0x73
     42e:	601a      	str	r2, [r3, #0]
     430:	4a73      	ldr	r2, [pc, #460]	; (600 <i2c_pins_enable+0x2b8>)
     432:	4b73      	ldr	r3, [pc, #460]	; (600 <i2c_pins_enable+0x2b8>)
     434:	681b      	ldr	r3, [r3, #0]
     436:	f023 0307 	bic.w	r3, r3, #7
     43a:	f043 0304 	orr.w	r3, r3, #4
     43e:	6013      	str	r3, [r2, #0]
     440:	4a70      	ldr	r2, [pc, #448]	; (604 <i2c_pins_enable+0x2bc>)
     442:	4b70      	ldr	r3, [pc, #448]	; (604 <i2c_pins_enable+0x2bc>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     44a:	f043 0303 	orr.w	r3, r3, #3
     44e:	6013      	str	r3, [r2, #0]
     450:	4a6d      	ldr	r2, [pc, #436]	; (608 <i2c_pins_enable+0x2c0>)
     452:	4b6d      	ldr	r3, [pc, #436]	; (608 <i2c_pins_enable+0x2c0>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     45a:	6013      	str	r3, [r2, #0]
     45c:	4b64      	ldr	r3, [pc, #400]	; (5f0 <i2c_pins_enable+0x2a8>)
     45e:	2200      	movs	r2, #0
     460:	601a      	str	r2, [r3, #0]
     462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     464:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM1_SDA, AM_HAL_PIN_9_M1SDA | AM_HAL_GPIO_PULLUP);
     468:	f3ef 8310 	mrs	r3, PRIMASK
     46c:	62bb      	str	r3, [r7, #40]	; 0x28
     46e:	b672      	cpsid	i
     470:	4b5f      	ldr	r3, [pc, #380]	; (5f0 <i2c_pins_enable+0x2a8>)
     472:	2273      	movs	r2, #115	; 0x73
     474:	601a      	str	r2, [r3, #0]
     476:	4a62      	ldr	r2, [pc, #392]	; (600 <i2c_pins_enable+0x2b8>)
     478:	4b61      	ldr	r3, [pc, #388]	; (600 <i2c_pins_enable+0x2b8>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     484:	6013      	str	r3, [r2, #0]
     486:	4a5f      	ldr	r2, [pc, #380]	; (604 <i2c_pins_enable+0x2bc>)
     488:	4b5e      	ldr	r3, [pc, #376]	; (604 <i2c_pins_enable+0x2bc>)
     48a:	681b      	ldr	r3, [r3, #0]
     48c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     490:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     494:	6013      	str	r3, [r2, #0]
     496:	4a5c      	ldr	r2, [pc, #368]	; (608 <i2c_pins_enable+0x2c0>)
     498:	4b5b      	ldr	r3, [pc, #364]	; (608 <i2c_pins_enable+0x2c0>)
     49a:	681b      	ldr	r3, [r3, #0]
     49c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     4a0:	6013      	str	r3, [r2, #0]
     4a2:	4b53      	ldr	r3, [pc, #332]	; (5f0 <i2c_pins_enable+0x2a8>)
     4a4:	2200      	movs	r2, #0
     4a6:	601a      	str	r2, [r3, #0]
     4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4aa:	f383 8810 	msr	PRIMASK, r3
            break;
     4ae:	e159      	b.n	764 <i2c_pins_enable+0x41c>
#ifndef AM_PART_APOLLO
        case 2:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM2_SCL);
     4b0:	4b4e      	ldr	r3, [pc, #312]	; (5ec <i2c_pins_enable+0x2a4>)
     4b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     4b6:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM2_SDA);
     4b8:	4b4c      	ldr	r3, [pc, #304]	; (5ec <i2c_pins_enable+0x2a4>)
     4ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4be:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM2_SCL, AM_HAL_PIN_27_M2SCL | AM_HAL_GPIO_PULLUP);
     4c0:	f3ef 8310 	mrs	r3, PRIMASK
     4c4:	627b      	str	r3, [r7, #36]	; 0x24
     4c6:	b672      	cpsid	i
     4c8:	4b49      	ldr	r3, [pc, #292]	; (5f0 <i2c_pins_enable+0x2a8>)
     4ca:	2273      	movs	r2, #115	; 0x73
     4cc:	601a      	str	r2, [r3, #0]
     4ce:	4a4f      	ldr	r2, [pc, #316]	; (60c <i2c_pins_enable+0x2c4>)
     4d0:	4b4e      	ldr	r3, [pc, #312]	; (60c <i2c_pins_enable+0x2c4>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     4d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     4dc:	6013      	str	r3, [r2, #0]
     4de:	4a4c      	ldr	r2, [pc, #304]	; (610 <i2c_pins_enable+0x2c8>)
     4e0:	4b4b      	ldr	r3, [pc, #300]	; (610 <i2c_pins_enable+0x2c8>)
     4e2:	681b      	ldr	r3, [r3, #0]
     4e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     4e8:	f043 530c 	orr.w	r3, r3, #587202560	; 0x23000000
     4ec:	6013      	str	r3, [r2, #0]
     4ee:	4a49      	ldr	r2, [pc, #292]	; (614 <i2c_pins_enable+0x2cc>)
     4f0:	4b48      	ldr	r3, [pc, #288]	; (614 <i2c_pins_enable+0x2cc>)
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     4f8:	6013      	str	r3, [r2, #0]
     4fa:	4b3d      	ldr	r3, [pc, #244]	; (5f0 <i2c_pins_enable+0x2a8>)
     4fc:	2200      	movs	r2, #0
     4fe:	601a      	str	r2, [r3, #0]
     500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     502:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM2_SDA, AM_HAL_PIN_25_M2SDA | AM_HAL_GPIO_PULLUP);
     506:	f3ef 8310 	mrs	r3, PRIMASK
     50a:	623b      	str	r3, [r7, #32]
     50c:	b672      	cpsid	i
     50e:	4b38      	ldr	r3, [pc, #224]	; (5f0 <i2c_pins_enable+0x2a8>)
     510:	2273      	movs	r2, #115	; 0x73
     512:	601a      	str	r2, [r3, #0]
     514:	4a3d      	ldr	r2, [pc, #244]	; (60c <i2c_pins_enable+0x2c4>)
     516:	4b3d      	ldr	r3, [pc, #244]	; (60c <i2c_pins_enable+0x2c4>)
     518:	681b      	ldr	r3, [r3, #0]
     51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     522:	6013      	str	r3, [r2, #0]
     524:	4a3a      	ldr	r2, [pc, #232]	; (610 <i2c_pins_enable+0x2c8>)
     526:	4b3a      	ldr	r3, [pc, #232]	; (610 <i2c_pins_enable+0x2c8>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     52e:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
     532:	6013      	str	r3, [r2, #0]
     534:	4a37      	ldr	r2, [pc, #220]	; (614 <i2c_pins_enable+0x2cc>)
     536:	4b37      	ldr	r3, [pc, #220]	; (614 <i2c_pins_enable+0x2cc>)
     538:	681b      	ldr	r3, [r3, #0]
     53a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     53e:	6013      	str	r3, [r2, #0]
     540:	4b2b      	ldr	r3, [pc, #172]	; (5f0 <i2c_pins_enable+0x2a8>)
     542:	2200      	movs	r2, #0
     544:	601a      	str	r2, [r3, #0]
     546:	6a3b      	ldr	r3, [r7, #32]
     548:	f383 8810 	msr	PRIMASK, r3
            break;
     54c:	e10a      	b.n	764 <i2c_pins_enable+0x41c>
        case 3:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM3_SCL);
     54e:	4b32      	ldr	r3, [pc, #200]	; (618 <i2c_pins_enable+0x2d0>)
     550:	f44f 6280 	mov.w	r2, #1024	; 0x400
     554:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM3_SDA);
     556:	4b30      	ldr	r3, [pc, #192]	; (618 <i2c_pins_enable+0x2d0>)
     558:	f44f 6200 	mov.w	r2, #2048	; 0x800
     55c:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM3_SCL, AM_HAL_PIN_42_M3SCL | AM_HAL_GPIO_PULLUP);
     55e:	f3ef 8310 	mrs	r3, PRIMASK
     562:	61fb      	str	r3, [r7, #28]
     564:	b672      	cpsid	i
     566:	4b22      	ldr	r3, [pc, #136]	; (5f0 <i2c_pins_enable+0x2a8>)
     568:	2273      	movs	r2, #115	; 0x73
     56a:	601a      	str	r2, [r3, #0]
     56c:	4a2b      	ldr	r2, [pc, #172]	; (61c <i2c_pins_enable+0x2d4>)
     56e:	4b2b      	ldr	r3, [pc, #172]	; (61c <i2c_pins_enable+0x2d4>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     57a:	6013      	str	r3, [r2, #0]
     57c:	4a28      	ldr	r2, [pc, #160]	; (620 <i2c_pins_enable+0x2d8>)
     57e:	4b28      	ldr	r3, [pc, #160]	; (620 <i2c_pins_enable+0x2d8>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     586:	f443 130c 	orr.w	r3, r3, #2293760	; 0x230000
     58a:	6013      	str	r3, [r2, #0]
     58c:	4a25      	ldr	r2, [pc, #148]	; (624 <i2c_pins_enable+0x2dc>)
     58e:	4b25      	ldr	r3, [pc, #148]	; (624 <i2c_pins_enable+0x2dc>)
     590:	681b      	ldr	r3, [r3, #0]
     592:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     596:	6013      	str	r3, [r2, #0]
     598:	4b15      	ldr	r3, [pc, #84]	; (5f0 <i2c_pins_enable+0x2a8>)
     59a:	2200      	movs	r2, #0
     59c:	601a      	str	r2, [r3, #0]
     59e:	69fb      	ldr	r3, [r7, #28]
     5a0:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM3_SDA, AM_HAL_PIN_43_M3SDA | AM_HAL_GPIO_PULLUP);
     5a4:	f3ef 8310 	mrs	r3, PRIMASK
     5a8:	61bb      	str	r3, [r7, #24]
     5aa:	b672      	cpsid	i
     5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <i2c_pins_enable+0x2a8>)
     5ae:	2273      	movs	r2, #115	; 0x73
     5b0:	601a      	str	r2, [r3, #0]
     5b2:	4a1a      	ldr	r2, [pc, #104]	; (61c <i2c_pins_enable+0x2d4>)
     5b4:	4b19      	ldr	r3, [pc, #100]	; (61c <i2c_pins_enable+0x2d4>)
     5b6:	681b      	ldr	r3, [r3, #0]
     5b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     5bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5c0:	6013      	str	r3, [r2, #0]
     5c2:	4a17      	ldr	r2, [pc, #92]	; (620 <i2c_pins_enable+0x2d8>)
     5c4:	4b16      	ldr	r3, [pc, #88]	; (620 <i2c_pins_enable+0x2d8>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     5cc:	f043 530c 	orr.w	r3, r3, #587202560	; 0x23000000
     5d0:	6013      	str	r3, [r2, #0]
     5d2:	4a14      	ldr	r2, [pc, #80]	; (624 <i2c_pins_enable+0x2dc>)
     5d4:	4b13      	ldr	r3, [pc, #76]	; (624 <i2c_pins_enable+0x2dc>)
     5d6:	681b      	ldr	r3, [r3, #0]
     5d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     5dc:	6013      	str	r3, [r2, #0]
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <i2c_pins_enable+0x2a8>)
     5e0:	2200      	movs	r2, #0
     5e2:	601a      	str	r2, [r3, #0]
     5e4:	69bb      	ldr	r3, [r7, #24]
     5e6:	f383 8810 	msr	PRIMASK, r3
            break;
     5ea:	e0bb      	b.n	764 <i2c_pins_enable+0x41c>
     5ec:	40010090 	.word	0x40010090
     5f0:	40010060 	.word	0x40010060
     5f4:	40010040 	.word	0x40010040
     5f8:	40010004 	.word	0x40010004
     5fc:	400100e4 	.word	0x400100e4
     600:	40010044 	.word	0x40010044
     604:	40010008 	.word	0x40010008
     608:	400100e8 	.word	0x400100e8
     60c:	4001004c 	.word	0x4001004c
     610:	40010018 	.word	0x40010018
     614:	400100f8 	.word	0x400100f8
     618:	40010094 	.word	0x40010094
     61c:	40010054 	.word	0x40010054
     620:	40010028 	.word	0x40010028
     624:	40010108 	.word	0x40010108
        case 4:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM4_SCL);
     628:	4b51      	ldr	r3, [pc, #324]	; (770 <i2c_pins_enable+0x428>)
     62a:	2280      	movs	r2, #128	; 0x80
     62c:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM4_SDA);
     62e:	4b50      	ldr	r3, [pc, #320]	; (770 <i2c_pins_enable+0x428>)
     630:	f44f 7280 	mov.w	r2, #256	; 0x100
     634:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM4_SCL, AM_HAL_PIN_39_M4SCL | AM_HAL_GPIO_PULLUP);
     636:	f3ef 8310 	mrs	r3, PRIMASK
     63a:	617b      	str	r3, [r7, #20]
     63c:	b672      	cpsid	i
     63e:	4b4d      	ldr	r3, [pc, #308]	; (774 <i2c_pins_enable+0x42c>)
     640:	2273      	movs	r2, #115	; 0x73
     642:	601a      	str	r2, [r3, #0]
     644:	4a4c      	ldr	r2, [pc, #304]	; (778 <i2c_pins_enable+0x430>)
     646:	4b4c      	ldr	r3, [pc, #304]	; (778 <i2c_pins_enable+0x430>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     64e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     652:	6013      	str	r3, [r2, #0]
     654:	4a49      	ldr	r2, [pc, #292]	; (77c <i2c_pins_enable+0x434>)
     656:	4b49      	ldr	r3, [pc, #292]	; (77c <i2c_pins_enable+0x434>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     65e:	f043 530c 	orr.w	r3, r3, #587202560	; 0x23000000
     662:	6013      	str	r3, [r2, #0]
     664:	4a46      	ldr	r2, [pc, #280]	; (780 <i2c_pins_enable+0x438>)
     666:	4b46      	ldr	r3, [pc, #280]	; (780 <i2c_pins_enable+0x438>)
     668:	681b      	ldr	r3, [r3, #0]
     66a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     66e:	6013      	str	r3, [r2, #0]
     670:	4b40      	ldr	r3, [pc, #256]	; (774 <i2c_pins_enable+0x42c>)
     672:	2200      	movs	r2, #0
     674:	601a      	str	r2, [r3, #0]
     676:	697b      	ldr	r3, [r7, #20]
     678:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM4_SDA, AM_HAL_PIN_40_M4SDA | AM_HAL_GPIO_PULLUP);
     67c:	f3ef 8310 	mrs	r3, PRIMASK
     680:	613b      	str	r3, [r7, #16]
     682:	b672      	cpsid	i
     684:	4b3b      	ldr	r3, [pc, #236]	; (774 <i2c_pins_enable+0x42c>)
     686:	2273      	movs	r2, #115	; 0x73
     688:	601a      	str	r2, [r3, #0]
     68a:	4a3e      	ldr	r2, [pc, #248]	; (784 <i2c_pins_enable+0x43c>)
     68c:	4b3d      	ldr	r3, [pc, #244]	; (784 <i2c_pins_enable+0x43c>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	f023 0307 	bic.w	r3, r3, #7
     694:	f043 0304 	orr.w	r3, r3, #4
     698:	6013      	str	r3, [r2, #0]
     69a:	4a3b      	ldr	r2, [pc, #236]	; (788 <i2c_pins_enable+0x440>)
     69c:	4b3a      	ldr	r3, [pc, #232]	; (788 <i2c_pins_enable+0x440>)
     69e:	681b      	ldr	r3, [r3, #0]
     6a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     6a4:	f043 0323 	orr.w	r3, r3, #35	; 0x23
     6a8:	6013      	str	r3, [r2, #0]
     6aa:	4a38      	ldr	r2, [pc, #224]	; (78c <i2c_pins_enable+0x444>)
     6ac:	4b37      	ldr	r3, [pc, #220]	; (78c <i2c_pins_enable+0x444>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     6b4:	6013      	str	r3, [r2, #0]
     6b6:	4b2f      	ldr	r3, [pc, #188]	; (774 <i2c_pins_enable+0x42c>)
     6b8:	2200      	movs	r2, #0
     6ba:	601a      	str	r2, [r3, #0]
     6bc:	693b      	ldr	r3, [r7, #16]
     6be:	f383 8810 	msr	PRIMASK, r3
            break;
     6c2:	e04f      	b.n	764 <i2c_pins_enable+0x41c>
        case 5:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM5_SCL);
     6c4:	4b2a      	ldr	r3, [pc, #168]	; (770 <i2c_pins_enable+0x428>)
     6c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     6ca:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM5_SDA);
     6cc:	4b28      	ldr	r3, [pc, #160]	; (770 <i2c_pins_enable+0x428>)
     6ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     6d2:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM5_SCL, AM_HAL_PIN_48_M5SCL | AM_HAL_GPIO_PULLUP);
     6d4:	f3ef 8310 	mrs	r3, PRIMASK
     6d8:	60fb      	str	r3, [r7, #12]
     6da:	b672      	cpsid	i
     6dc:	4b25      	ldr	r3, [pc, #148]	; (774 <i2c_pins_enable+0x42c>)
     6de:	2273      	movs	r2, #115	; 0x73
     6e0:	601a      	str	r2, [r3, #0]
     6e2:	4a2b      	ldr	r2, [pc, #172]	; (790 <i2c_pins_enable+0x448>)
     6e4:	4b2a      	ldr	r3, [pc, #168]	; (790 <i2c_pins_enable+0x448>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f023 0307 	bic.w	r3, r3, #7
     6ec:	f043 0304 	orr.w	r3, r3, #4
     6f0:	6013      	str	r3, [r2, #0]
     6f2:	4a28      	ldr	r2, [pc, #160]	; (794 <i2c_pins_enable+0x44c>)
     6f4:	4b27      	ldr	r3, [pc, #156]	; (794 <i2c_pins_enable+0x44c>)
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     6fc:	f043 0323 	orr.w	r3, r3, #35	; 0x23
     700:	6013      	str	r3, [r2, #0]
     702:	4a25      	ldr	r2, [pc, #148]	; (798 <i2c_pins_enable+0x450>)
     704:	4b24      	ldr	r3, [pc, #144]	; (798 <i2c_pins_enable+0x450>)
     706:	681b      	ldr	r3, [r3, #0]
     708:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     70c:	6013      	str	r3, [r2, #0]
     70e:	4b19      	ldr	r3, [pc, #100]	; (774 <i2c_pins_enable+0x42c>)
     710:	2200      	movs	r2, #0
     712:	601a      	str	r2, [r3, #0]
     714:	68fb      	ldr	r3, [r7, #12]
     716:	f383 8810 	msr	PRIMASK, r3
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM5_SDA, AM_HAL_PIN_49_M5SDA | AM_HAL_GPIO_PULLUP);
     71a:	f3ef 8310 	mrs	r3, PRIMASK
     71e:	60bb      	str	r3, [r7, #8]
     720:	b672      	cpsid	i
     722:	4b14      	ldr	r3, [pc, #80]	; (774 <i2c_pins_enable+0x42c>)
     724:	2273      	movs	r2, #115	; 0x73
     726:	601a      	str	r2, [r3, #0]
     728:	4a19      	ldr	r2, [pc, #100]	; (790 <i2c_pins_enable+0x448>)
     72a:	4b19      	ldr	r3, [pc, #100]	; (790 <i2c_pins_enable+0x448>)
     72c:	681b      	ldr	r3, [r3, #0]
     72e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     736:	6013      	str	r3, [r2, #0]
     738:	4a16      	ldr	r2, [pc, #88]	; (794 <i2c_pins_enable+0x44c>)
     73a:	4b16      	ldr	r3, [pc, #88]	; (794 <i2c_pins_enable+0x44c>)
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     742:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
     746:	6013      	str	r3, [r2, #0]
     748:	4a13      	ldr	r2, [pc, #76]	; (798 <i2c_pins_enable+0x450>)
     74a:	4b13      	ldr	r3, [pc, #76]	; (798 <i2c_pins_enable+0x450>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     752:	6013      	str	r3, [r2, #0]
     754:	4b07      	ldr	r3, [pc, #28]	; (774 <i2c_pins_enable+0x42c>)
     756:	2200      	movs	r2, #0
     758:	601a      	str	r2, [r3, #0]
     75a:	68bb      	ldr	r3, [r7, #8]
     75c:	f383 8810 	msr	PRIMASK, r3
            break;
     760:	e000      	b.n	764 <i2c_pins_enable+0x41c>
        // If we get here, the caller's selected IOM interface couldn't be
        // found in the BSP GPIO definitions. Halt program execution for
        // debugging.
        //
        default:
            while (1);
     762:	e7fe      	b.n	762 <i2c_pins_enable+0x41a>
    }
}
     764:	bf00      	nop
     766:	373c      	adds	r7, #60	; 0x3c
     768:	46bd      	mov	sp, r7
     76a:	f85d 7b04 	ldr.w	r7, [sp], #4
     76e:	4770      	bx	lr
     770:	40010094 	.word	0x40010094
     774:	40010060 	.word	0x40010060
     778:	40010050 	.word	0x40010050
     77c:	40010024 	.word	0x40010024
     780:	40010104 	.word	0x40010104
     784:	40010054 	.word	0x40010054
     788:	40010028 	.word	0x40010028
     78c:	40010108 	.word	0x40010108
     790:	40010058 	.word	0x40010058
     794:	40010030 	.word	0x40010030
     798:	40010110 	.word	0x40010110

0000079c <iom_set_up>:

static void
iom_set_up(uint32_t iomModule, bool bSpi)
{
     79c:	b590      	push	{r4, r7, lr}
     79e:	b089      	sub	sp, #36	; 0x24
     7a0:	af02      	add	r7, sp, #8
     7a2:	6078      	str	r0, [r7, #4]
     7a4:	460b      	mov	r3, r1
     7a6:	70fb      	strb	r3, [r7, #3]
    uint32_t ioIntEnable = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
     7a8:	2301      	movs	r3, #1
     7aa:	617b      	str	r3, [r7, #20]
    //
    // Enable power to IOM.
    //
    am_hal_iom_pwrctrl_enable(iomModule);
     7ac:	6878      	ldr	r0, [r7, #4]
     7ae:	f002 f89b 	bl	28e8 <am_hal_iom_pwrctrl_enable>

    if ( bSpi )
     7b2:	78fb      	ldrb	r3, [r7, #3]
     7b4:	2b00      	cmp	r3, #0
     7b6:	f000 80af 	beq.w	918 <iom_set_up+0x17c>
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_config(iomModule, &g_sIOMSpiConfig);
     7ba:	4987      	ldr	r1, [pc, #540]	; (9d8 <iom_set_up+0x23c>)
     7bc:	6878      	ldr	r0, [r7, #4]
     7be:	f002 f8bd 	bl	293c <am_hal_iom_config>

        //
        // Set up IOM SPI pins. Attributes are set in am_bsp_gpio.h.
        //
        am_bsp_iom_spi_pins_enable(iomModule);
     7c2:	6878      	ldr	r0, [r7, #4]
     7c4:	f001 f8dc 	bl	1980 <am_bsp_iom_spi_pins_enable>

        //
        // Enable the chip-select and data-ready pin.
        //! @note You can enable pins in the HAL or BSP.
        //
        am_hal_gpio_pin_config(apollo2_iomce0[iomModule][0],
     7c8:	4a84      	ldr	r2, [pc, #528]	; (9dc <iom_set_up+0x240>)
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     7d0:	2b31      	cmp	r3, #49	; 0x31
     7d2:	f200 80a8 	bhi.w	926 <iom_set_up+0x18a>
     7d6:	f3ef 8310 	mrs	r3, PRIMASK
     7da:	613b      	str	r3, [r7, #16]
     7dc:	b672      	cpsid	i
     7de:	4b80      	ldr	r3, [pc, #512]	; (9e0 <iom_set_up+0x244>)
     7e0:	2273      	movs	r2, #115	; 0x73
     7e2:	601a      	str	r2, [r3, #0]
     7e4:	4a7d      	ldr	r2, [pc, #500]	; (9dc <iom_set_up+0x240>)
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     7ec:	085b      	lsrs	r3, r3, #1
     7ee:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     7f2:	4b7c      	ldr	r3, [pc, #496]	; (9e4 <iom_set_up+0x248>)
     7f4:	4413      	add	r3, r2
     7f6:	461c      	mov	r4, r3
     7f8:	4a78      	ldr	r2, [pc, #480]	; (9dc <iom_set_up+0x240>)
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	00db      	lsls	r3, r3, #3
     7fe:	4413      	add	r3, r2
     800:	685b      	ldr	r3, [r3, #4]
     802:	0a1b      	lsrs	r3, r3, #8
     804:	f003 0207 	and.w	r2, r3, #7
     808:	4974      	ldr	r1, [pc, #464]	; (9dc <iom_set_up+0x240>)
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     810:	009b      	lsls	r3, r3, #2
     812:	f003 031c 	and.w	r3, r3, #28
     816:	409a      	lsls	r2, r3
     818:	4970      	ldr	r1, [pc, #448]	; (9dc <iom_set_up+0x240>)
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     820:	085b      	lsrs	r3, r3, #1
     822:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     826:	4b6f      	ldr	r3, [pc, #444]	; (9e4 <iom_set_up+0x248>)
     828:	440b      	add	r3, r1
     82a:	6819      	ldr	r1, [r3, #0]
     82c:	486b      	ldr	r0, [pc, #428]	; (9dc <iom_set_up+0x240>)
     82e:	687b      	ldr	r3, [r7, #4]
     830:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
     834:	009b      	lsls	r3, r3, #2
     836:	f003 031c 	and.w	r3, r3, #28
     83a:	2007      	movs	r0, #7
     83c:	fa00 f303 	lsl.w	r3, r0, r3
     840:	43db      	mvns	r3, r3
     842:	400b      	ands	r3, r1
     844:	4313      	orrs	r3, r2
     846:	6023      	str	r3, [r4, #0]
     848:	4a64      	ldr	r2, [pc, #400]	; (9dc <iom_set_up+0x240>)
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     850:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     858:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     85c:	461c      	mov	r4, r3
     85e:	4a5f      	ldr	r2, [pc, #380]	; (9dc <iom_set_up+0x240>)
     860:	687b      	ldr	r3, [r7, #4]
     862:	00db      	lsls	r3, r3, #3
     864:	4413      	add	r3, r2
     866:	685b      	ldr	r3, [r3, #4]
     868:	b2da      	uxtb	r2, r3
     86a:	495c      	ldr	r1, [pc, #368]	; (9dc <iom_set_up+0x240>)
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     872:	00db      	lsls	r3, r3, #3
     874:	f003 0318 	and.w	r3, r3, #24
     878:	409a      	lsls	r2, r3
     87a:	4958      	ldr	r1, [pc, #352]	; (9dc <iom_set_up+0x240>)
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     882:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     88a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     88e:	6819      	ldr	r1, [r3, #0]
     890:	4852      	ldr	r0, [pc, #328]	; (9dc <iom_set_up+0x240>)
     892:	687b      	ldr	r3, [r7, #4]
     894:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
     898:	00db      	lsls	r3, r3, #3
     89a:	f003 0318 	and.w	r3, r3, #24
     89e:	20ff      	movs	r0, #255	; 0xff
     8a0:	fa00 f303 	lsl.w	r3, r0, r3
     8a4:	43db      	mvns	r3, r3
     8a6:	400b      	ands	r3, r1
     8a8:	4313      	orrs	r3, r2
     8aa:	6023      	str	r3, [r4, #0]
     8ac:	4a4b      	ldr	r2, [pc, #300]	; (9dc <iom_set_up+0x240>)
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     8b4:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     8b8:	4b4b      	ldr	r3, [pc, #300]	; (9e8 <iom_set_up+0x24c>)
     8ba:	4413      	add	r3, r2
     8bc:	461c      	mov	r4, r3
     8be:	4a47      	ldr	r2, [pc, #284]	; (9dc <iom_set_up+0x240>)
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	00db      	lsls	r3, r3, #3
     8c4:	4413      	add	r3, r2
     8c6:	685b      	ldr	r3, [r3, #4]
     8c8:	0c1b      	lsrs	r3, r3, #16
     8ca:	b2da      	uxtb	r2, r3
     8cc:	4943      	ldr	r1, [pc, #268]	; (9dc <iom_set_up+0x240>)
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     8d4:	00db      	lsls	r3, r3, #3
     8d6:	f003 0318 	and.w	r3, r3, #24
     8da:	409a      	lsls	r2, r3
     8dc:	493f      	ldr	r1, [pc, #252]	; (9dc <iom_set_up+0x240>)
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     8e4:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
     8e8:	4b3f      	ldr	r3, [pc, #252]	; (9e8 <iom_set_up+0x24c>)
     8ea:	440b      	add	r3, r1
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	483b      	ldr	r0, [pc, #236]	; (9dc <iom_set_up+0x240>)
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
     8f6:	00db      	lsls	r3, r3, #3
     8f8:	f003 0318 	and.w	r3, r3, #24
     8fc:	20ff      	movs	r0, #255	; 0xff
     8fe:	fa00 f303 	lsl.w	r3, r0, r3
     902:	43db      	mvns	r3, r3
     904:	400b      	ands	r3, r1
     906:	4313      	orrs	r3, r2
     908:	6023      	str	r3, [r4, #0]
     90a:	4b35      	ldr	r3, [pc, #212]	; (9e0 <iom_set_up+0x244>)
     90c:	2200      	movs	r2, #0
     90e:	601a      	str	r2, [r3, #0]
     910:	693b      	ldr	r3, [r7, #16]
     912:	f383 8810 	msr	PRIMASK, r3
     916:	e006      	b.n	926 <iom_set_up+0x18a>
    else
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_config(iomModule, &g_sIOMI2cConfig);
     918:	4934      	ldr	r1, [pc, #208]	; (9ec <iom_set_up+0x250>)
     91a:	6878      	ldr	r0, [r7, #4]
     91c:	f002 f80e 	bl	293c <am_hal_iom_config>

        i2c_pins_enable(iomModule);
     920:	6878      	ldr	r0, [r7, #4]
     922:	f7ff fd11 	bl	348 <i2c_pins_enable>
    }
    //
    // Turn on the IOM for this operation.
    //
    am_bsp_iom_enable(iomModule);
     926:	6878      	ldr	r0, [r7, #4]
     928:	f001 fa38 	bl	1d9c <am_bsp_iom_enable>

    // Set up the host IO interrupt
    am_hal_gpio_pin_config(HANDSHAKE_PIN, AM_HAL_GPIO_INPUT);
     92c:	f3ef 8310 	mrs	r3, PRIMASK
     930:	60fb      	str	r3, [r7, #12]
     932:	b672      	cpsid	i
     934:	4b2a      	ldr	r3, [pc, #168]	; (9e0 <iom_set_up+0x244>)
     936:	2273      	movs	r2, #115	; 0x73
     938:	601a      	str	r2, [r3, #0]
     93a:	4a2d      	ldr	r2, [pc, #180]	; (9f0 <iom_set_up+0x254>)
     93c:	4b2c      	ldr	r3, [pc, #176]	; (9f0 <iom_set_up+0x254>)
     93e:	681b      	ldr	r3, [r3, #0]
     940:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     944:	6013      	str	r3, [r2, #0]
     946:	4a2b      	ldr	r2, [pc, #172]	; (9f4 <iom_set_up+0x258>)
     948:	4b2a      	ldr	r3, [pc, #168]	; (9f4 <iom_set_up+0x258>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     950:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
     954:	6013      	str	r3, [r2, #0]
     956:	4a28      	ldr	r2, [pc, #160]	; (9f8 <iom_set_up+0x25c>)
     958:	4b27      	ldr	r3, [pc, #156]	; (9f8 <iom_set_up+0x25c>)
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     960:	6013      	str	r3, [r2, #0]
     962:	4b1f      	ldr	r3, [pc, #124]	; (9e0 <iom_set_up+0x244>)
     964:	2200      	movs	r2, #0
     966:	601a      	str	r2, [r3, #0]
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_polarity_bit_set(HANDSHAKE_PIN, AM_HAL_GPIO_RISING);
     96e:	f3ef 8310 	mrs	r3, PRIMASK
     972:	60bb      	str	r3, [r7, #8]
     974:	b672      	cpsid	i
     976:	4b1a      	ldr	r3, [pc, #104]	; (9e0 <iom_set_up+0x244>)
     978:	2273      	movs	r2, #115	; 0x73
     97a:	601a      	str	r2, [r3, #0]
     97c:	4a1c      	ldr	r2, [pc, #112]	; (9f0 <iom_set_up+0x254>)
     97e:	4b1c      	ldr	r3, [pc, #112]	; (9f0 <iom_set_up+0x254>)
     980:	681b      	ldr	r3, [r3, #0]
     982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     986:	6013      	str	r3, [r2, #0]
     988:	4b15      	ldr	r3, [pc, #84]	; (9e0 <iom_set_up+0x244>)
     98a:	2200      	movs	r2, #0
     98c:	601a      	str	r2, [r3, #0]
     98e:	68bb      	ldr	r3, [r7, #8]
     990:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(HANDSHAKE_PIN));
     994:	f44f 6080 	mov.w	r0, #1024	; 0x400
     998:	f04f 0100 	mov.w	r1, #0
     99c:	f001 fc58 	bl	2250 <am_hal_gpio_int_clear>
    // Register handler for IOS => IOM interrupt
    am_hal_gpio_int_register(HANDSHAKE_PIN, hostint_handler);
     9a0:	4916      	ldr	r1, [pc, #88]	; (9fc <iom_set_up+0x260>)
     9a2:	200a      	movs	r0, #10
     9a4:	f001 fcc2 	bl	232c <am_hal_gpio_int_register>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(HANDSHAKE_PIN));
     9a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
     9ac:	f04f 0100 	mov.w	r1, #0
     9b0:	f001 fc3e 	bl	2230 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     9b4:	201c      	movs	r0, #28
     9b6:	f001 fccf 	bl	2358 <am_hal_interrupt_enable>

    // Set up IOCTL interrupts
    // IOS ==> IOM
    iom_slave_write(iomModule, bSpi, IOSOFFSET_WRITE_INTEN, &ioIntEnable, 1);
     9ba:	f107 0214 	add.w	r2, r7, #20
     9be:	78f9      	ldrb	r1, [r7, #3]
     9c0:	2301      	movs	r3, #1
     9c2:	9300      	str	r3, [sp, #0]
     9c4:	4613      	mov	r3, r2
     9c6:	22f8      	movs	r2, #248	; 0xf8
     9c8:	6878      	ldr	r0, [r7, #4]
     9ca:	f7ff fc99 	bl	300 <iom_slave_write>
}
     9ce:	bf00      	nop
     9d0:	371c      	adds	r7, #28
     9d2:	46bd      	mov	sp, r7
     9d4:	bd90      	pop	{r4, r7, pc}
     9d6:	bf00      	nop
     9d8:	10001000 	.word	0x10001000
     9dc:	000061d4 	.word	0x000061d4
     9e0:	40010060 	.word	0x40010060
     9e4:	40010040 	.word	0x40010040
     9e8:	400100e0 	.word	0x400100e0
     9ec:	1000100c 	.word	0x1000100c
     9f0:	40010044 	.word	0x40010044
     9f4:	40010008 	.word	0x40010008
     9f8:	400100e8 	.word	0x400100e8
     9fc:	00000201 	.word	0x00000201

00000a00 <update_progress>:
// Print a progress message.
//
//*****************************************************************************
void
update_progress(uint32_t ui32NumPackets)
{
     a00:	b580      	push	{r7, lr}
     a02:	b082      	sub	sp, #8
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
    //
    // Print a dot every 10000 packets.
    //
    if ( (ui32NumPackets - g_ui32LastUpdate) > 1000 )
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <update_progress+0x2c>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	687a      	ldr	r2, [r7, #4]
     a0e:	1ad3      	subs	r3, r2, r3
     a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     a14:	d905      	bls.n	a22 <update_progress+0x22>
    {
        am_util_stdio_printf(".");
     a16:	4806      	ldr	r0, [pc, #24]	; (a30 <update_progress+0x30>)
     a18:	f000 ff8a 	bl	1930 <am_util_stdio_printf>
        g_ui32LastUpdate = ui32NumPackets;
     a1c:	4a03      	ldr	r2, [pc, #12]	; (a2c <update_progress+0x2c>)
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	6013      	str	r3, [r2, #0]
    }
}
     a22:	bf00      	nop
     a24:	3708      	adds	r7, #8
     a26:	46bd      	mov	sp, r7
     a28:	bd80      	pop	{r7, pc}
     a2a:	bf00      	nop
     a2c:	10001074 	.word	0x10001074
     a30:	0000612c 	.word	0x0000612c

00000a34 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     a34:	b580      	push	{r7, lr}
     a36:	b08a      	sub	sp, #40	; 0x28
     a38:	af02      	add	r7, sp, #8
    uint32_t iom = IOM_MODULE;
     a3a:	2300      	movs	r3, #0
     a3c:	61bb      	str	r3, [r7, #24]
    bool bSpi = USE_SPI;
     a3e:	2301      	movs	r3, #1
     a40:	75fb      	strb	r3, [r7, #23]
    bool bReadIosData = false;
     a42:	2300      	movs	r3, #0
     a44:	77fb      	strb	r3, [r7, #31]
    bool bDone = false;
     a46:	2300      	movs	r3, #0
     a48:	77bb      	strb	r3, [r7, #30]
    uint32_t data;
    uint32_t maxSize = (bSpi) ? MAX_SPI_SIZE: MAX_I2C_SIZE;
     a4a:	7dfb      	ldrb	r3, [r7, #23]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d002      	beq.n	a56 <main+0x22>
     a50:	f240 33ff 	movw	r3, #1023	; 0x3ff
     a54:	e000      	b.n	a58 <main+0x24>
     a56:	23ff      	movs	r3, #255	; 0xff
     a58:	613b      	str	r3, [r7, #16]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     a5a:	2000      	movs	r0, #0
     a5c:	f001 faec 	bl	2038 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     a60:	4853      	ldr	r0, [pc, #332]	; (bb0 <main+0x17c>)
     a62:	f001 fa53 	bl	1f0c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     a66:	f001 f9fd 	bl	1e64 <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     a6a:	f7ff fbe9 	bl	240 <itm_start>

    //
    // IOS test start message.
    //
    am_util_stdio_printf("IOS Test Host: Waiting for at least %d bytes from the slave.", MAX_SIZE);
     a6e:	f242 7110 	movw	r1, #10000	; 0x2710
     a72:	4850      	ldr	r0, [pc, #320]	; (bb4 <main+0x180>)
     a74:	f000 ff5c 	bl	1930 <am_util_stdio_printf>


    // Set up IOM & Enable interrupt for IOS
    iom_set_up(iom, bSpi);
     a78:	7dfb      	ldrb	r3, [r7, #23]
     a7a:	4619      	mov	r1, r3
     a7c:	69b8      	ldr	r0, [r7, #24]
     a7e:	f7ff fe8d 	bl	79c <iom_set_up>

    // Send the START
    data = AM_IOSTEST_CMD_START_DATA;
     a82:	2300      	movs	r3, #0
     a84:	60bb      	str	r3, [r7, #8]
    iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
     a86:	f107 0208 	add.w	r2, r7, #8
     a8a:	7df9      	ldrb	r1, [r7, #23]
     a8c:	2301      	movs	r3, #1
     a8e:	9300      	str	r3, [sp, #0]
     a90:	4613      	mov	r3, r2
     a92:	2280      	movs	r2, #128	; 0x80
     a94:	69b8      	ldr	r0, [r7, #24]
     a96:	f7ff fc33 	bl	300 <iom_slave_write>

    //
    // Loop forever.
    //
    while ( !bDone )
     a9a:	e07a      	b.n	b92 <main+0x15e>
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     a9c:	f001 fc84 	bl	23a8 <am_hal_interrupt_master_disable>
     aa0:	60f8      	str	r0, [r7, #12]

        if ( bIosInt == true )
     aa2:	4b45      	ldr	r3, [pc, #276]	; (bb8 <main+0x184>)
     aa4:	781b      	ldrb	r3, [r3, #0]
     aa6:	b2db      	uxtb	r3, r3
     aa8:	2b00      	cmp	r3, #0
     aaa:	d06c      	beq.n	b86 <main+0x152>
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
     aac:	68f8      	ldr	r0, [r7, #12]
     aae:	f001 fc7f 	bl	23b0 <am_hal_interrupt_master_set>
            bIosInt = false;
     ab2:	4b41      	ldr	r3, [pc, #260]	; (bb8 <main+0x184>)
     ab4:	2200      	movs	r2, #0
     ab6:	701a      	strb	r2, [r3, #0]
            // Read & Clear the IOINT status
            iom_slave_read(iom, bSpi, IOSOFFSET_READ_INTSTAT, &data, 1);
     ab8:	f107 0208 	add.w	r2, r7, #8
     abc:	7df9      	ldrb	r1, [r7, #23]
     abe:	2301      	movs	r3, #1
     ac0:	9300      	str	r3, [sp, #0]
     ac2:	4613      	mov	r3, r2
     ac4:	2279      	movs	r2, #121	; 0x79
     ac6:	69b8      	ldr	r0, [r7, #24]
     ac8:	f7ff fbf6 	bl	2b8 <iom_slave_read>
            // We need to clear the bit by writing to IOS
            if ( data & AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK )
     acc:	68bb      	ldr	r3, [r7, #8]
     ace:	f003 0301 	and.w	r3, r3, #1
     ad2:	2b00      	cmp	r3, #0
     ad4:	d00d      	beq.n	af2 <main+0xbe>
            {
                data = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
     ad6:	2301      	movs	r3, #1
     ad8:	60bb      	str	r3, [r7, #8]
                iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_INTCLR, &data, 1);
     ada:	f107 0208 	add.w	r2, r7, #8
     ade:	7df9      	ldrb	r1, [r7, #23]
     ae0:	2301      	movs	r3, #1
     ae2:	9300      	str	r3, [sp, #0]
     ae4:	4613      	mov	r3, r2
     ae6:	22fa      	movs	r2, #250	; 0xfa
     ae8:	69b8      	ldr	r0, [r7, #24]
     aea:	f7ff fc09 	bl	300 <iom_slave_write>
                // Set bReadIosData
                bReadIosData = true;
     aee:	2301      	movs	r3, #1
     af0:	77fb      	strb	r3, [r7, #31]
            }
            if ( bReadIosData )
     af2:	7ffb      	ldrb	r3, [r7, #31]
     af4:	2b00      	cmp	r3, #0
     af6:	d04c      	beq.n	b92 <main+0x15e>
            {
                uint32_t iosSize = 0;
     af8:	2300      	movs	r3, #0
     afa:	607b      	str	r3, [r7, #4]

                bReadIosData = false;
     afc:	2300      	movs	r3, #0
     afe:	77fb      	strb	r3, [r7, #31]

                // Read the Data Size
                iom_slave_read(iom, bSpi, IOSOFFSET_READ_FIFOCTR, &iosSize, 2);
     b00:	1d3a      	adds	r2, r7, #4
     b02:	7df9      	ldrb	r1, [r7, #23]
     b04:	2302      	movs	r3, #2
     b06:	9300      	str	r3, [sp, #0]
     b08:	4613      	mov	r3, r2
     b0a:	227c      	movs	r2, #124	; 0x7c
     b0c:	69b8      	ldr	r0, [r7, #24]
     b0e:	f7ff fbd3 	bl	2b8 <iom_slave_read>
                iosSize = (iosSize > maxSize)? maxSize: iosSize;
     b12:	687a      	ldr	r2, [r7, #4]
     b14:	693b      	ldr	r3, [r7, #16]
     b16:	4293      	cmp	r3, r2
     b18:	bf28      	it	cs
     b1a:	4613      	movcs	r3, r2
     b1c:	607b      	str	r3, [r7, #4]
                // Initialize Rx Buffer for later comparison
                clear_rx_buf();
     b1e:	f7ff fb1f 	bl	160 <clear_rx_buf>
                // Read the data
                iom_slave_read(iom, bSpi, IOSOFFSET_READ_FIFO,
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	7df9      	ldrb	r1, [r7, #23]
     b26:	9300      	str	r3, [sp, #0]
     b28:	4b24      	ldr	r3, [pc, #144]	; (bbc <main+0x188>)
     b2a:	227f      	movs	r2, #127	; 0x7f
     b2c:	69b8      	ldr	r0, [r7, #24]
     b2e:	f7ff fbc3 	bl	2b8 <iom_slave_read>
                    (uint32_t *)g_pui8RcvBuf, iosSize);
                // Validate Content
                if ( !validate_rx_buf(iosSize) )
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	4618      	mov	r0, r3
     b36:	f7ff fb2d 	bl	194 <validate_rx_buf>
     b3a:	4603      	mov	r3, r0
     b3c:	2b00      	cmp	r3, #0
     b3e:	d106      	bne.n	b4e <main+0x11a>
                {
                    am_util_stdio_printf("\nData Verification failed Accum:%lu rx=%d\n",
     b40:	4b1f      	ldr	r3, [pc, #124]	; (bc0 <main+0x18c>)
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	687a      	ldr	r2, [r7, #4]
     b46:	4619      	mov	r1, r3
     b48:	481e      	ldr	r0, [pc, #120]	; (bc4 <main+0x190>)
     b4a:	f000 fef1 	bl	1930 <am_util_stdio_printf>
                        g_startIdx, iosSize);
                }
                // Send the ACK/STOP
                data = AM_IOSTEST_CMD_ACK_DATA;
     b4e:	2302      	movs	r3, #2
     b50:	60bb      	str	r3, [r7, #8]

                update_progress(g_startIdx);
     b52:	4b1b      	ldr	r3, [pc, #108]	; (bc0 <main+0x18c>)
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	4618      	mov	r0, r3
     b58:	f7ff ff52 	bl	a00 <update_progress>

                if ( g_startIdx >= MAX_SIZE )
     b5c:	4b18      	ldr	r3, [pc, #96]	; (bc0 <main+0x18c>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	f242 720f 	movw	r2, #9999	; 0x270f
     b64:	4293      	cmp	r3, r2
     b66:	d903      	bls.n	b70 <main+0x13c>
                {
                    bDone = true;
     b68:	2301      	movs	r3, #1
     b6a:	77bb      	strb	r3, [r7, #30]
                    data = AM_IOSTEST_CMD_STOP_DATA;
     b6c:	2301      	movs	r3, #1
     b6e:	60bb      	str	r3, [r7, #8]
                }
                iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
     b70:	f107 0208 	add.w	r2, r7, #8
     b74:	7df9      	ldrb	r1, [r7, #23]
     b76:	2301      	movs	r3, #1
     b78:	9300      	str	r3, [sp, #0]
     b7a:	4613      	mov	r3, r2
     b7c:	2280      	movs	r2, #128	; 0x80
     b7e:	69b8      	ldr	r0, [r7, #24]
     b80:	f7ff fbbe 	bl	300 <iom_slave_write>
     b84:	e005      	b.n	b92 <main+0x15e>
            }
        }
        else
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     b86:	2001      	movs	r0, #1
     b88:	f004 f97e 	bl	4e88 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
     b8c:	68f8      	ldr	r0, [r7, #12]
     b8e:	f001 fc0f 	bl	23b0 <am_hal_interrupt_master_set>
    iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_CMD, &data, 1);

    //
    // Loop forever.
    //
    while ( !bDone )
     b92:	7fbb      	ldrb	r3, [r7, #30]
     b94:	f083 0301 	eor.w	r3, r3, #1
     b98:	b2db      	uxtb	r3, r3
     b9a:	2b00      	cmp	r3, #0
     b9c:	f47f af7e 	bne.w	a9c <main+0x68>
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
        }
    }
    am_util_stdio_printf("\nTest Done - Total Received = =%d\n", g_startIdx);
     ba0:	4b07      	ldr	r3, [pc, #28]	; (bc0 <main+0x18c>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	4619      	mov	r1, r3
     ba6:	4808      	ldr	r0, [pc, #32]	; (bc8 <main+0x194>)
     ba8:	f000 fec2 	bl	1930 <am_util_stdio_printf>
    while (1);
     bac:	e7fe      	b.n	bac <main+0x178>
     bae:	bf00      	nop
     bb0:	00006234 	.word	0x00006234
     bb4:	00006130 	.word	0x00006130
     bb8:	10001070 	.word	0x10001070
     bbc:	100011c4 	.word	0x100011c4
     bc0:	1000106c 	.word	0x1000106c
     bc4:	00006170 	.word	0x00006170
     bc8:	0000619c 	.word	0x0000619c

00000bcc <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     bcc:	4811      	ldr	r0, [pc, #68]	; (c14 <zero_loop+0x12>)
     bce:	4912      	ldr	r1, [pc, #72]	; (c18 <zero_loop+0x16>)
     bd0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     bd2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     bd6:	4811      	ldr	r0, [pc, #68]	; (c1c <zero_loop+0x1a>)
     bd8:	6801      	ldr	r1, [r0, #0]
     bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     bde:	6001      	str	r1, [r0, #0]
     be0:	f3bf 8f4f 	dsb	sy
     be4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     be8:	480d      	ldr	r0, [pc, #52]	; (c20 <zero_loop+0x1e>)
     bea:	490e      	ldr	r1, [pc, #56]	; (c24 <zero_loop+0x22>)
     bec:	4a0e      	ldr	r2, [pc, #56]	; (c28 <zero_loop+0x26>)

00000bee <copy_loop>:
     bee:	f850 3b04 	ldr.w	r3, [r0], #4
     bf2:	f841 3b04 	str.w	r3, [r1], #4
     bf6:	4291      	cmp	r1, r2
     bf8:	dbf9      	blt.n	bee <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     bfa:	480c      	ldr	r0, [pc, #48]	; (c2c <zero_loop+0x2a>)
     bfc:	490c      	ldr	r1, [pc, #48]	; (c30 <zero_loop+0x2e>)
     bfe:	f04f 0200 	mov.w	r2, #0

00000c02 <zero_loop>:
     c02:	4288      	cmp	r0, r1
     c04:	bfb8      	it	lt
     c06:	f840 2b04 	strlt.w	r2, [r0], #4
     c0a:	dbfa      	blt.n	c02 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     c0c:	f7ff ff12 	bl	a34 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     c10:	be00      	bkpt	0x0000
}
     c12:	bf00      	nop
     c14:	e000ed08 	.word	0xe000ed08
     c18:	00000000 	.word	0x00000000
     c1c:	e000ed88 	.word	0xe000ed88
     c20:	00006470 	.word	0x00006470
     c24:	10001000 	.word	0x10001000
     c28:	1000106c 	.word	0x1000106c
     c2c:	1000106c 	.word	0x1000106c
     c30:	10001860 	.word	0x10001860

00000c34 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     c34:	b480      	push	{r7}
     c36:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     c38:	e7fe      	b.n	c38 <am_nmi_isr+0x4>
     c3a:	bf00      	nop

00000c3c <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     c3c:	b480      	push	{r7}
     c3e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     c40:	e7fe      	b.n	c40 <am_busfault_isr+0x4>
     c42:	bf00      	nop

00000c44 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     c44:	b480      	push	{r7}
     c46:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     c48:	e7fe      	b.n	c48 <am_adc_isr+0x4>
     c4a:	bf00      	nop

00000c4c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     c4c:	b480      	push	{r7}
     c4e:	b083      	sub	sp, #12
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     c54:	4a04      	ldr	r2, [pc, #16]	; (c68 <am_util_stdio_printf_init+0x1c>)
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	6013      	str	r3, [r2, #0]
}
     c5a:	bf00      	nop
     c5c:	370c      	adds	r7, #12
     c5e:	46bd      	mov	sp, r7
     c60:	f85d 7b04 	ldr.w	r7, [sp], #4
     c64:	4770      	bx	lr
     c66:	bf00      	nop
     c68:	100015c4 	.word	0x100015c4

00000c6c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     c6c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c70:	b096      	sub	sp, #88	; 0x58
     c72:	af00      	add	r7, sp, #0
     c74:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     c78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c7c:	0025      	movs	r5, r4
     c7e:	2600      	movs	r6, #0
     c80:	ea55 0306 	orrs.w	r3, r5, r6
     c84:	f000 809e 	beq.w	dc4 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     c88:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c8c:	0862      	lsrs	r2, r4, #1
     c8e:	ea4f 0133 	mov.w	r1, r3, rrx
     c92:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c96:	ea4f 0893 	mov.w	r8, r3, lsr #2
     c9a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     c9e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     ca2:	eb11 0308 	adds.w	r3, r1, r8
     ca6:	eb42 0409 	adc.w	r4, r2, r9
     caa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     cae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     cb2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     cb6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     cba:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     cbe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     cc2:	eb13 030a 	adds.w	r3, r3, sl
     cc6:	eb44 040b 	adc.w	r4, r4, fp
     cca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     cce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     cd2:	0a1a      	lsrs	r2, r3, #8
     cd4:	62ba      	str	r2, [r7, #40]	; 0x28
     cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     cd8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     cdc:	62ba      	str	r2, [r7, #40]	; 0x28
     cde:	0a23      	lsrs	r3, r4, #8
     ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
     ce2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ce6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     cea:	18c9      	adds	r1, r1, r3
     cec:	eb42 0204 	adc.w	r2, r2, r4
     cf0:	460b      	mov	r3, r1
     cf2:	4614      	mov	r4, r2
     cf4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     cf8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     cfc:	0c1a      	lsrs	r2, r3, #16
     cfe:	623a      	str	r2, [r7, #32]
     d00:	6a3a      	ldr	r2, [r7, #32]
     d02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     d06:	623a      	str	r2, [r7, #32]
     d08:	0c23      	lsrs	r3, r4, #16
     d0a:	627b      	str	r3, [r7, #36]	; 0x24
     d0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     d10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     d14:	18c9      	adds	r1, r1, r3
     d16:	eb42 0204 	adc.w	r2, r2, r4
     d1a:	460b      	mov	r3, r1
     d1c:	4614      	mov	r4, r2
     d1e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     d22:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     d26:	0023      	movs	r3, r4
     d28:	603b      	str	r3, [r7, #0]
     d2a:	2300      	movs	r3, #0
     d2c:	607b      	str	r3, [r7, #4]
     d2e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     d32:	e897 0006 	ldmia.w	r7, {r1, r2}
     d36:	18c9      	adds	r1, r1, r3
     d38:	eb42 0204 	adc.w	r2, r2, r4
     d3c:	460b      	mov	r3, r1
     d3e:	4614      	mov	r4, r2
     d40:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     d44:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     d48:	08da      	lsrs	r2, r3, #3
     d4a:	613a      	str	r2, [r7, #16]
     d4c:	693a      	ldr	r2, [r7, #16]
     d4e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     d52:	613a      	str	r2, [r7, #16]
     d54:	08e3      	lsrs	r3, r4, #3
     d56:	617b      	str	r3, [r7, #20]
     d58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     d5c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     d60:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     d64:	18db      	adds	r3, r3, r3
     d66:	eb44 0404 	adc.w	r4, r4, r4
     d6a:	00a2      	lsls	r2, r4, #2
     d6c:	60fa      	str	r2, [r7, #12]
     d6e:	68fa      	ldr	r2, [r7, #12]
     d70:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     d74:	60fa      	str	r2, [r7, #12]
     d76:	009a      	lsls	r2, r3, #2
     d78:	60ba      	str	r2, [r7, #8]
     d7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     d7e:	18c9      	adds	r1, r1, r3
     d80:	eb42 0204 	adc.w	r2, r2, r4
     d84:	460b      	mov	r3, r1
     d86:	4614      	mov	r4, r2
     d88:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     d8c:	1acb      	subs	r3, r1, r3
     d8e:	eb62 0404 	sbc.w	r4, r2, r4
     d92:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     d96:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     d9a:	3306      	adds	r3, #6
     d9c:	f144 0400 	adc.w	r4, r4, #0
     da0:	091a      	lsrs	r2, r3, #4
     da2:	61ba      	str	r2, [r7, #24]
     da4:	69ba      	ldr	r2, [r7, #24]
     da6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     daa:	61ba      	str	r2, [r7, #24]
     dac:	0923      	lsrs	r3, r4, #4
     dae:	61fb      	str	r3, [r7, #28]
     db0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     db4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     db8:	18c9      	adds	r1, r1, r3
     dba:	eb42 0204 	adc.w	r2, r2, r4
     dbe:	460b      	mov	r3, r1
     dc0:	4614      	mov	r4, r2
     dc2:	e029      	b.n	e18 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dc6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     dca:	085a      	lsrs	r2, r3, #1
     dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     dce:	089b      	lsrs	r3, r3, #2
     dd0:	4413      	add	r3, r2
     dd2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     dd6:	091b      	lsrs	r3, r3, #4
     dd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     dda:	4413      	add	r3, r2
     ddc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     de0:	0a1b      	lsrs	r3, r3, #8
     de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     de4:	4413      	add	r3, r2
     de6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     dea:	0c1b      	lsrs	r3, r3, #16
     dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     dee:	4413      	add	r3, r2
     df0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     df4:	08db      	lsrs	r3, r3, #3
     df6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     df8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     dfa:	4613      	mov	r3, r2
     dfc:	009b      	lsls	r3, r3, #2
     dfe:	4413      	add	r3, r2
     e00:	005b      	lsls	r3, r3, #1
     e02:	461a      	mov	r2, r3
     e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e06:	1a9b      	subs	r3, r3, r2
     e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e0c:	3306      	adds	r3, #6
     e0e:	091a      	lsrs	r2, r3, #4
     e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     e12:	4413      	add	r3, r2
     e14:	f04f 0400 	mov.w	r4, #0
    }
}
     e18:	4618      	mov	r0, r3
     e1a:	4621      	mov	r1, r4
     e1c:	3758      	adds	r7, #88	; 0x58
     e1e:	46bd      	mov	sp, r7
     e20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     e24:	4770      	bx	lr
     e26:	bf00      	nop

00000e28 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     e28:	b590      	push	{r4, r7, lr}
     e2a:	b085      	sub	sp, #20
     e2c:	af00      	add	r7, sp, #0
     e2e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     e32:	683a      	ldr	r2, [r7, #0]
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	4313      	orrs	r3, r2
     e38:	2b00      	cmp	r3, #0
     e3a:	bf0c      	ite	eq
     e3c:	2301      	moveq	r3, #1
     e3e:	2300      	movne	r3, #0
     e40:	b2db      	uxtb	r3, r3
     e42:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     e44:	e008      	b.n	e58 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     e46:	e9d7 0100 	ldrd	r0, r1, [r7]
     e4a:	f7ff ff0f 	bl	c6c <divu64_10>
     e4e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     e52:	68fb      	ldr	r3, [r7, #12]
     e54:	3301      	adds	r3, #1
     e56:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     e58:	e897 0018 	ldmia.w	r7, {r3, r4}
     e5c:	4323      	orrs	r3, r4
     e5e:	d1f2      	bne.n	e46 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     e60:	68fb      	ldr	r3, [r7, #12]
}
     e62:	4618      	mov	r0, r3
     e64:	3714      	adds	r7, #20
     e66:	46bd      	mov	sp, r7
     e68:	bd90      	pop	{r4, r7, pc}
     e6a:	bf00      	nop

00000e6c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     e6c:	b590      	push	{r4, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	af00      	add	r7, sp, #0
     e72:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     e76:	e897 0018 	ldmia.w	r7, {r3, r4}
     e7a:	2b00      	cmp	r3, #0
     e7c:	f174 0300 	sbcs.w	r3, r4, #0
     e80:	da06      	bge.n	e90 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     e82:	e897 0018 	ldmia.w	r7, {r3, r4}
     e86:	425b      	negs	r3, r3
     e88:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     e8c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     e90:	e897 0018 	ldmia.w	r7, {r3, r4}
     e94:	4618      	mov	r0, r3
     e96:	4621      	mov	r1, r4
     e98:	f7ff ffc6 	bl	e28 <ndigits_in_u64>
     e9c:	4603      	mov	r3, r0
}
     e9e:	4618      	mov	r0, r3
     ea0:	370c      	adds	r7, #12
     ea2:	46bd      	mov	sp, r7
     ea4:	bd90      	pop	{r4, r7, pc}
     ea6:	bf00      	nop

00000ea8 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     ea8:	b490      	push	{r4, r7}
     eaa:	b084      	sub	sp, #16
     eac:	af00      	add	r7, sp, #0
     eae:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     eb2:	6839      	ldr	r1, [r7, #0]
     eb4:	687a      	ldr	r2, [r7, #4]
     eb6:	430a      	orrs	r2, r1
     eb8:	2a00      	cmp	r2, #0
     eba:	bf0c      	ite	eq
     ebc:	2201      	moveq	r2, #1
     ebe:	2200      	movne	r2, #0
     ec0:	b2d2      	uxtb	r2, r2
     ec2:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     ec4:	e00a      	b.n	edc <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     ec6:	e897 0006 	ldmia.w	r7, {r1, r2}
     eca:	090b      	lsrs	r3, r1, #4
     ecc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     ed0:	0914      	lsrs	r4, r2, #4
     ed2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     ed6:	68fa      	ldr	r2, [r7, #12]
     ed8:	3201      	adds	r2, #1
     eda:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     edc:	e897 0006 	ldmia.w	r7, {r1, r2}
     ee0:	430a      	orrs	r2, r1
     ee2:	d1f0      	bne.n	ec6 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     ee4:	68fb      	ldr	r3, [r7, #12]
}
     ee6:	4618      	mov	r0, r3
     ee8:	3710      	adds	r7, #16
     eea:	46bd      	mov	sp, r7
     eec:	bc90      	pop	{r4, r7}
     eee:	4770      	bx	lr

00000ef0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     ef0:	b480      	push	{r7}
     ef2:	b087      	sub	sp, #28
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
     ef8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     efa:	2300      	movs	r3, #0
     efc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     efe:	2300      	movs	r3, #0
     f00:	613b      	str	r3, [r7, #16]
     f02:	2300      	movs	r3, #0
     f04:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	2b2d      	cmp	r3, #45	; 0x2d
     f0c:	d11b      	bne.n	f46 <decstr_to_int+0x56>
    {
        bNeg = true;
     f0e:	2301      	movs	r3, #1
     f10:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	3301      	adds	r3, #1
     f16:	607b      	str	r3, [r7, #4]
        uCnt++;
     f18:	68fb      	ldr	r3, [r7, #12]
     f1a:	3301      	adds	r3, #1
     f1c:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     f1e:	e012      	b.n	f46 <decstr_to_int+0x56>
    {
        ++uCnt;
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	3301      	adds	r3, #1
     f24:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     f26:	693a      	ldr	r2, [r7, #16]
     f28:	4613      	mov	r3, r2
     f2a:	009b      	lsls	r3, r3, #2
     f2c:	4413      	add	r3, r2
     f2e:	005b      	lsls	r3, r3, #1
     f30:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	461a      	mov	r2, r3
     f38:	693b      	ldr	r3, [r7, #16]
     f3a:	4413      	add	r3, r2
     f3c:	3b30      	subs	r3, #48	; 0x30
     f3e:	613b      	str	r3, [r7, #16]
        pcStr++;
     f40:	687b      	ldr	r3, [r7, #4]
     f42:	3301      	adds	r3, #1
     f44:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	2b2f      	cmp	r3, #47	; 0x2f
     f4c:	d903      	bls.n	f56 <decstr_to_int+0x66>
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	2b39      	cmp	r3, #57	; 0x39
     f54:	d9e4      	bls.n	f20 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     f56:	683b      	ldr	r3, [r7, #0]
     f58:	2b00      	cmp	r3, #0
     f5a:	d002      	beq.n	f62 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	68fa      	ldr	r2, [r7, #12]
     f60:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     f62:	7dfb      	ldrb	r3, [r7, #23]
     f64:	2b00      	cmp	r3, #0
     f66:	d002      	beq.n	f6e <decstr_to_int+0x7e>
     f68:	693b      	ldr	r3, [r7, #16]
     f6a:	425b      	negs	r3, r3
     f6c:	e000      	b.n	f70 <decstr_to_int+0x80>
     f6e:	693b      	ldr	r3, [r7, #16]
}
     f70:	4618      	mov	r0, r3
     f72:	371c      	adds	r7, #28
     f74:	46bd      	mov	sp, r7
     f76:	f85d 7b04 	ldr.w	r7, [sp], #4
     f7a:	4770      	bx	lr

00000f7c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     f7c:	b590      	push	{r4, r7, lr}
     f7e:	b091      	sub	sp, #68	; 0x44
     f80:	af00      	add	r7, sp, #0
     f82:	e9c7 0102 	strd	r0, r1, [r7, #8]
     f86:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     f88:	2300      	movs	r3, #0
     f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
     f8c:	2300      	movs	r3, #0
     f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     f94:	f7ff fe6a 	bl	c6c <divu64_10>
     f98:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     f9c:	68b9      	ldr	r1, [r7, #8]
     f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     fa0:	4613      	mov	r3, r2
     fa2:	009b      	lsls	r3, r3, #2
     fa4:	4413      	add	r3, r2
     fa6:	005b      	lsls	r3, r3, #1
     fa8:	1acb      	subs	r3, r1, r3
     faa:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fae:	1c5a      	adds	r2, r3, #1
     fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
     fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     fb4:	b2d2      	uxtb	r2, r2
     fb6:	3230      	adds	r2, #48	; 0x30
     fb8:	b2d2      	uxtb	r2, r2
     fba:	f107 0140 	add.w	r1, r7, #64	; 0x40
     fbe:	440b      	add	r3, r1
     fc0:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     fc4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     fc8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     fcc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     fd0:	4323      	orrs	r3, r4
     fd2:	d1dd      	bne.n	f90 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fd6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	2b00      	cmp	r3, #0
     fdc:	d011      	beq.n	1002 <uint64_to_str+0x86>
    {
        while ( ix-- )
     fde:	e008      	b.n	ff2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	1c5a      	adds	r2, r3, #1
     fe4:	607a      	str	r2, [r7, #4]
     fe6:	f107 0110 	add.w	r1, r7, #16
     fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fec:	440a      	add	r2, r1
     fee:	7812      	ldrb	r2, [r2, #0]
     ff0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ff4:	1e5a      	subs	r2, r3, #1
     ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
     ff8:	2b00      	cmp	r3, #0
     ffa:	d1f1      	bne.n	fe0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	2200      	movs	r2, #0
    1000:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    1002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    1004:	4618      	mov	r0, r3
    1006:	3744      	adds	r7, #68	; 0x44
    1008:	46bd      	mov	sp, r7
    100a:	bd90      	pop	{r4, r7, pc}

0000100c <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    100c:	b4b0      	push	{r4, r5, r7}
    100e:	b08d      	sub	sp, #52	; 0x34
    1010:	af00      	add	r7, sp, #0
    1012:	e9c7 0102 	strd	r0, r1, [r7, #8]
    1016:	607a      	str	r2, [r7, #4]
    1018:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    101a:	2300      	movs	r3, #0
    101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    101e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1022:	4313      	orrs	r3, r2
    1024:	d131      	bne.n	108a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    1026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1028:	1c5a      	adds	r2, r3, #1
    102a:	62fa      	str	r2, [r7, #44]	; 0x2c
    102c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1030:	4413      	add	r3, r2
    1032:	2230      	movs	r2, #48	; 0x30
    1034:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    1038:	e027      	b.n	108a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    103a:	7a3b      	ldrb	r3, [r7, #8]
    103c:	f003 030f 	and.w	r3, r3, #15
    1040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    1044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    1048:	2b09      	cmp	r3, #9
    104a:	d90a      	bls.n	1062 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    104c:	78fb      	ldrb	r3, [r7, #3]
    104e:	2b00      	cmp	r3, #0
    1050:	d001      	beq.n	1056 <uint64_to_hexstr+0x4a>
    1052:	2227      	movs	r2, #39	; 0x27
    1054:	e000      	b.n	1058 <uint64_to_hexstr+0x4c>
    1056:	2207      	movs	r2, #7
    1058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    105c:	4413      	add	r3, r2
    105e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    1062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1064:	1c5a      	adds	r2, r3, #1
    1066:	62fa      	str	r2, [r7, #44]	; 0x2c
    1068:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    106c:	3230      	adds	r2, #48	; 0x30
    106e:	b2d2      	uxtb	r2, r2
    1070:	f107 0130 	add.w	r1, r7, #48	; 0x30
    1074:	440b      	add	r3, r1
    1076:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    107a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    107e:	0914      	lsrs	r4, r2, #4
    1080:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    1084:	091d      	lsrs	r5, r3, #4
    1086:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    108a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    108e:	4313      	orrs	r3, r2
    1090:	d1d3      	bne.n	103a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1094:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2b00      	cmp	r3, #0
    109a:	d011      	beq.n	10c0 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    109c:	e008      	b.n	10b0 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	607a      	str	r2, [r7, #4]
    10a4:	f107 0110 	add.w	r1, r7, #16
    10a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    10aa:	440a      	add	r2, r1
    10ac:	7812      	ldrb	r2, [r2, #0]
    10ae:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    10b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10b2:	1e5a      	subs	r2, r3, #1
    10b4:	62fa      	str	r2, [r7, #44]	; 0x2c
    10b6:	2b00      	cmp	r3, #0
    10b8:	d1f1      	bne.n	109e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	2200      	movs	r2, #0
    10be:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    10c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    10c2:	4618      	mov	r0, r3
    10c4:	3734      	adds	r7, #52	; 0x34
    10c6:	46bd      	mov	sp, r7
    10c8:	bcb0      	pop	{r4, r5, r7}
    10ca:	4770      	bx	lr

000010cc <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    10cc:	b480      	push	{r7}
    10ce:	b085      	sub	sp, #20
    10d0:	af00      	add	r7, sp, #0
    10d2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    10d4:	2300      	movs	r3, #0
    10d6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	2b00      	cmp	r3, #0
    10dc:	d104      	bne.n	10e8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    10de:	68fb      	ldr	r3, [r7, #12]
    10e0:	e009      	b.n	10f6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	3301      	adds	r3, #1
    10e6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	1c5a      	adds	r2, r3, #1
    10ec:	607a      	str	r2, [r7, #4]
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d1f6      	bne.n	10e2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
    10f4:	68fb      	ldr	r3, [r7, #12]
}
    10f6:	4618      	mov	r0, r3
    10f8:	3714      	adds	r7, #20
    10fa:	46bd      	mov	sp, r7
    10fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1100:	4770      	bx	lr
    1102:	bf00      	nop

00001104 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    1104:	b480      	push	{r7}
    1106:	b087      	sub	sp, #28
    1108:	af00      	add	r7, sp, #0
    110a:	60f8      	str	r0, [r7, #12]
    110c:	460b      	mov	r3, r1
    110e:	607a      	str	r2, [r7, #4]
    1110:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    1112:	2300      	movs	r3, #0
    1114:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	2b00      	cmp	r3, #0
    111a:	dc0c      	bgt.n	1136 <padbuffer+0x32>
    {
        return i32Cnt;
    111c:	697b      	ldr	r3, [r7, #20]
    111e:	e010      	b.n	1142 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	2b00      	cmp	r3, #0
    1124:	d004      	beq.n	1130 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    1126:	68fb      	ldr	r3, [r7, #12]
    1128:	1c5a      	adds	r2, r3, #1
    112a:	60fa      	str	r2, [r7, #12]
    112c:	7afa      	ldrb	r2, [r7, #11]
    112e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    1130:	697b      	ldr	r3, [r7, #20]
    1132:	3301      	adds	r3, #1
    1134:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	1e5a      	subs	r2, r3, #1
    113a:	607a      	str	r2, [r7, #4]
    113c:	2b00      	cmp	r3, #0
    113e:	d1ef      	bne.n	1120 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
    1140:	697b      	ldr	r3, [r7, #20]
}
    1142:	4618      	mov	r0, r3
    1144:	371c      	adds	r7, #28
    1146:	46bd      	mov	sp, r7
    1148:	f85d 7b04 	ldr.w	r7, [sp], #4
    114c:	4770      	bx	lr
    114e:	bf00      	nop

00001150 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    1150:	b590      	push	{r4, r7, lr}
    1152:	b08f      	sub	sp, #60	; 0x3c
    1154:	af00      	add	r7, sp, #0
    1156:	60f8      	str	r0, [r7, #12]
    1158:	60b9      	str	r1, [r7, #8]
    115a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
    115c:	68bb      	ldr	r3, [r7, #8]
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
    1162:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1164:	2b03      	cmp	r3, #3
    1166:	dc02      	bgt.n	116e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    1168:	f06f 0302 	mvn.w	r3, #2
    116c:	e0d4      	b.n	1318 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
    116e:	edd7 7a03 	vldr	s15, [r7, #12]
    1172:	eef5 7a40 	vcmp.f32	s15, #0.0
    1176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    117a:	d104      	bne.n	1186 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    117c:	68bb      	ldr	r3, [r7, #8]
    117e:	4a68      	ldr	r2, [pc, #416]	; (1320 <ftoa+0x1d0>)
    1180:	601a      	str	r2, [r3, #0]
        return 3;
    1182:	2303      	movs	r3, #3
    1184:	e0c8      	b.n	1318 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    118e:	697b      	ldr	r3, [r7, #20]
    1190:	15db      	asrs	r3, r3, #23
    1192:	b2db      	uxtb	r3, r3
    1194:	3b7f      	subs	r3, #127	; 0x7f
    1196:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    1198:	697b      	ldr	r3, [r7, #20]
    119a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    119e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    11a2:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
    11a4:	2300      	movs	r3, #0
    11a6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    11a8:	2300      	movs	r3, #0
    11aa:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    11ac:	6a3b      	ldr	r3, [r7, #32]
    11ae:	2b1e      	cmp	r3, #30
    11b0:	dd02      	ble.n	11b8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    11b2:	f06f 0301 	mvn.w	r3, #1
    11b6:	e0af      	b.n	1318 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
    11b8:	6a3b      	ldr	r3, [r7, #32]
    11ba:	f113 0f17 	cmn.w	r3, #23
    11be:	da02      	bge.n	11c6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    11c0:	f04f 33ff 	mov.w	r3, #4294967295
    11c4:	e0a8      	b.n	1318 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
    11c6:	6a3b      	ldr	r3, [r7, #32]
    11c8:	2b16      	cmp	r3, #22
    11ca:	dd06      	ble.n	11da <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    11cc:	6a3b      	ldr	r3, [r7, #32]
    11ce:	3b17      	subs	r3, #23
    11d0:	69fa      	ldr	r2, [r7, #28]
    11d2:	fa02 f303 	lsl.w	r3, r2, r3
    11d6:	637b      	str	r3, [r7, #52]	; 0x34
    11d8:	e01a      	b.n	1210 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    11da:	6a3b      	ldr	r3, [r7, #32]
    11dc:	2b00      	cmp	r3, #0
    11de:	db0f      	blt.n	1200 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    11e0:	6a3b      	ldr	r3, [r7, #32]
    11e2:	f1c3 0317 	rsb	r3, r3, #23
    11e6:	69fa      	ldr	r2, [r7, #28]
    11e8:	fa42 f303 	asr.w	r3, r2, r3
    11ec:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    11ee:	6a3b      	ldr	r3, [r7, #32]
    11f0:	3301      	adds	r3, #1
    11f2:	69fa      	ldr	r2, [r7, #28]
    11f4:	fa02 f303 	lsl.w	r3, r2, r3
    11f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    11fc:	633b      	str	r3, [r7, #48]	; 0x30
    11fe:	e007      	b.n	1210 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    1200:	69fb      	ldr	r3, [r7, #28]
    1202:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    1206:	6a3b      	ldr	r3, [r7, #32]
    1208:	43db      	mvns	r3, r3
    120a:	fa42 f303 	asr.w	r3, r2, r3
    120e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    1210:	697b      	ldr	r3, [r7, #20]
    1212:	2b00      	cmp	r3, #0
    1214:	da04      	bge.n	1220 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    1216:	68bb      	ldr	r3, [r7, #8]
    1218:	1c5a      	adds	r2, r3, #1
    121a:	60ba      	str	r2, [r7, #8]
    121c:	222d      	movs	r2, #45	; 0x2d
    121e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    1220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1222:	2b00      	cmp	r3, #0
    1224:	d105      	bne.n	1232 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    1226:	68bb      	ldr	r3, [r7, #8]
    1228:	1c5a      	adds	r2, r3, #1
    122a:	60ba      	str	r2, [r7, #8]
    122c:	2230      	movs	r2, #48	; 0x30
    122e:	701a      	strb	r2, [r3, #0]
    1230:	e021      	b.n	1276 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    1232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1234:	2b00      	cmp	r3, #0
    1236:	dd08      	ble.n	124a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    1238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    123a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    123e:	68ba      	ldr	r2, [r7, #8]
    1240:	4618      	mov	r0, r3
    1242:	4621      	mov	r1, r4
    1244:	f7ff fe9a 	bl	f7c <uint64_to_str>
    1248:	e011      	b.n	126e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	1c5a      	adds	r2, r3, #1
    124e:	60ba      	str	r2, [r7, #8]
    1250:	222d      	movs	r2, #45	; 0x2d
    1252:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    1254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1256:	425b      	negs	r3, r3
    1258:	ea4f 74e3 	mov.w	r4, r3, asr #31
    125c:	68ba      	ldr	r2, [r7, #8]
    125e:	4618      	mov	r0, r3
    1260:	4621      	mov	r1, r4
    1262:	f7ff fe8b 	bl	f7c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1266:	e002      	b.n	126e <ftoa+0x11e>
        {
            pcBuf++;
    1268:	68bb      	ldr	r3, [r7, #8]
    126a:	3301      	adds	r3, #1
    126c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	2b00      	cmp	r3, #0
    1274:	d1f8      	bne.n	1268 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    1276:	68bb      	ldr	r3, [r7, #8]
    1278:	1c5a      	adds	r2, r3, #1
    127a:	60ba      	str	r2, [r7, #8]
    127c:	222e      	movs	r2, #46	; 0x2e
    127e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1282:	2b00      	cmp	r3, #0
    1284:	d105      	bne.n	1292 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    1286:	68bb      	ldr	r3, [r7, #8]
    1288:	1c5a      	adds	r2, r3, #1
    128a:	60ba      	str	r2, [r7, #8]
    128c:	2230      	movs	r2, #48	; 0x30
    128e:	701a      	strb	r2, [r3, #0]
    1290:	e03c      	b.n	130c <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1292:	68ba      	ldr	r2, [r7, #8]
    1294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1296:	1ad3      	subs	r3, r2, r3
    1298:	6aba      	ldr	r2, [r7, #40]	; 0x28
    129a:	1ad3      	subs	r3, r2, r3
    129c:	3b01      	subs	r3, #1
    129e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    12a0:	69ba      	ldr	r2, [r7, #24]
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	4293      	cmp	r3, r2
    12a6:	bfa8      	it	ge
    12a8:	4613      	movge	r3, r2
    12aa:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    12ac:	2300      	movs	r3, #0
    12ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    12b0:	e015      	b.n	12de <ftoa+0x18e>
        {
            i32FracPart *= 10;
    12b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12b4:	4613      	mov	r3, r2
    12b6:	009b      	lsls	r3, r3, #2
    12b8:	4413      	add	r3, r2
    12ba:	005b      	lsls	r3, r3, #1
    12bc:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    12be:	68bb      	ldr	r3, [r7, #8]
    12c0:	1c5a      	adds	r2, r3, #1
    12c2:	60ba      	str	r2, [r7, #8]
    12c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12c6:	1612      	asrs	r2, r2, #24
    12c8:	b2d2      	uxtb	r2, r2
    12ca:	3230      	adds	r2, #48	; 0x30
    12cc:	b2d2      	uxtb	r2, r2
    12ce:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    12d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    12d6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    12d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12da:	3301      	adds	r3, #1
    12dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    12de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    12e0:	69bb      	ldr	r3, [r7, #24]
    12e2:	429a      	cmp	r2, r3
    12e4:	dbe5      	blt.n	12b2 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    12e6:	68bb      	ldr	r3, [r7, #8]
    12e8:	3b01      	subs	r3, #1
    12ea:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    12ec:	e002      	b.n	12f4 <ftoa+0x1a4>
        {
            --pcBuf;
    12ee:	68bb      	ldr	r3, [r7, #8]
    12f0:	3b01      	subs	r3, #1
    12f2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    12f4:	68bb      	ldr	r3, [r7, #8]
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	2b30      	cmp	r3, #48	; 0x30
    12fa:	d104      	bne.n	1306 <ftoa+0x1b6>
    12fc:	68bb      	ldr	r3, [r7, #8]
    12fe:	3b01      	subs	r3, #1
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	2b2e      	cmp	r3, #46	; 0x2e
    1304:	d1f3      	bne.n	12ee <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    1306:	68bb      	ldr	r3, [r7, #8]
    1308:	3301      	adds	r3, #1
    130a:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    130c:	68bb      	ldr	r3, [r7, #8]
    130e:	2200      	movs	r2, #0
    1310:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    1312:	68ba      	ldr	r2, [r7, #8]
    1314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1316:	1ad3      	subs	r3, r2, r3
} // ftoa()
    1318:	4618      	mov	r0, r3
    131a:	373c      	adds	r7, #60	; 0x3c
    131c:	46bd      	mov	sp, r7
    131e:	bd90      	pop	{r4, r7, pc}
    1320:	00302e30 	.word	0x00302e30

00001324 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    1324:	b590      	push	{r4, r7, lr}
    1326:	b095      	sub	sp, #84	; 0x54
    1328:	af00      	add	r7, sp, #0
    132a:	60f8      	str	r0, [r7, #12]
    132c:	60b9      	str	r1, [r7, #8]
    132e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    1330:	2300      	movs	r3, #0
    1332:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1334:	2300      	movs	r3, #0
    1336:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1338:	e2e3      	b.n	1902 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    133a:	2306      	movs	r3, #6
    133c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    133e:	68bb      	ldr	r3, [r7, #8]
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	2b25      	cmp	r3, #37	; 0x25
    1344:	d01f      	beq.n	1386 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	2b00      	cmp	r3, #0
    134a:	d015      	beq.n	1378 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    134c:	68bb      	ldr	r3, [r7, #8]
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	2b0a      	cmp	r3, #10
    1352:	d10b      	bne.n	136c <am_util_stdio_vsprintf+0x48>
    1354:	4bb1      	ldr	r3, [pc, #708]	; (161c <am_util_stdio_vsprintf+0x2f8>)
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	2b00      	cmp	r3, #0
    135a:	d007      	beq.n	136c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	1c5a      	adds	r2, r3, #1
    1360:	60fa      	str	r2, [r7, #12]
    1362:	220d      	movs	r2, #13
    1364:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1368:	3301      	adds	r3, #1
    136a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	1c5a      	adds	r2, r3, #1
    1370:	60fa      	str	r2, [r7, #12]
    1372:	68ba      	ldr	r2, [r7, #8]
    1374:	7812      	ldrb	r2, [r2, #0]
    1376:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1378:	68bb      	ldr	r3, [r7, #8]
    137a:	3301      	adds	r3, #1
    137c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1380:	3301      	adds	r3, #1
    1382:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1384:	e2bd      	b.n	1902 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1386:	68bb      	ldr	r3, [r7, #8]
    1388:	3301      	adds	r3, #1
    138a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    138c:	2300      	movs	r3, #0
    138e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    139a:	2320      	movs	r3, #32
    139c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2b30      	cmp	r3, #48	; 0x30
    13a6:	d105      	bne.n	13b4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    13a8:	2330      	movs	r3, #48	; 0x30
    13aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    13ae:	68bb      	ldr	r3, [r7, #8]
    13b0:	3301      	adds	r3, #1
    13b2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    13b4:	f107 0310 	add.w	r3, r7, #16
    13b8:	4619      	mov	r1, r3
    13ba:	68b8      	ldr	r0, [r7, #8]
    13bc:	f7ff fd98 	bl	ef0 <decstr_to_int>
    13c0:	4603      	mov	r3, r0
    13c2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    13c4:	693b      	ldr	r3, [r7, #16]
    13c6:	68ba      	ldr	r2, [r7, #8]
    13c8:	4413      	add	r3, r2
    13ca:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    13cc:	68bb      	ldr	r3, [r7, #8]
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	2b73      	cmp	r3, #115	; 0x73
    13d2:	d005      	beq.n	13e0 <am_util_stdio_vsprintf+0xbc>
    13d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13d6:	2b00      	cmp	r3, #0
    13d8:	da02      	bge.n	13e0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    13da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13dc:	425b      	negs	r3, r3
    13de:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    13e0:	68bb      	ldr	r3, [r7, #8]
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	2b2e      	cmp	r3, #46	; 0x2e
    13e6:	d10e      	bne.n	1406 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    13e8:	68bb      	ldr	r3, [r7, #8]
    13ea:	3301      	adds	r3, #1
    13ec:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    13ee:	f107 0310 	add.w	r3, r7, #16
    13f2:	4619      	mov	r1, r3
    13f4:	68b8      	ldr	r0, [r7, #8]
    13f6:	f7ff fd7b 	bl	ef0 <decstr_to_int>
    13fa:	4603      	mov	r3, r0
    13fc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    13fe:	693b      	ldr	r3, [r7, #16]
    1400:	68ba      	ldr	r2, [r7, #8]
    1402:	4413      	add	r3, r2
    1404:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1406:	68bb      	ldr	r3, [r7, #8]
    1408:	781b      	ldrb	r3, [r3, #0]
    140a:	2b6c      	cmp	r3, #108	; 0x6c
    140c:	d10c      	bne.n	1428 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    140e:	68bb      	ldr	r3, [r7, #8]
    1410:	3301      	adds	r3, #1
    1412:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1414:	68bb      	ldr	r3, [r7, #8]
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	2b6c      	cmp	r3, #108	; 0x6c
    141a:	d105      	bne.n	1428 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    141c:	68bb      	ldr	r3, [r7, #8]
    141e:	3301      	adds	r3, #1
    1420:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    1422:	2301      	movs	r3, #1
    1424:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    1428:	68bb      	ldr	r3, [r7, #8]
    142a:	781b      	ldrb	r3, [r3, #0]
    142c:	3b46      	subs	r3, #70	; 0x46
    142e:	2b32      	cmp	r3, #50	; 0x32
    1430:	f200 8254 	bhi.w	18dc <am_util_stdio_vsprintf+0x5b8>
    1434:	a201      	add	r2, pc, #4	; (adr r2, 143c <am_util_stdio_vsprintf+0x118>)
    1436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    143a:	bf00      	nop
    143c:	00001867 	.word	0x00001867
    1440:	000018dd 	.word	0x000018dd
    1444:	000018dd 	.word	0x000018dd
    1448:	000018dd 	.word	0x000018dd
    144c:	000018dd 	.word	0x000018dd
    1450:	000018dd 	.word	0x000018dd
    1454:	000018dd 	.word	0x000018dd
    1458:	000018dd 	.word	0x000018dd
    145c:	000018dd 	.word	0x000018dd
    1460:	000018dd 	.word	0x000018dd
    1464:	000018dd 	.word	0x000018dd
    1468:	000018dd 	.word	0x000018dd
    146c:	000018dd 	.word	0x000018dd
    1470:	000018dd 	.word	0x000018dd
    1474:	000018dd 	.word	0x000018dd
    1478:	000018dd 	.word	0x000018dd
    147c:	000018dd 	.word	0x000018dd
    1480:	000018dd 	.word	0x000018dd
    1484:	00001603 	.word	0x00001603
    1488:	000018dd 	.word	0x000018dd
    148c:	000018dd 	.word	0x000018dd
    1490:	000018dd 	.word	0x000018dd
    1494:	000018dd 	.word	0x000018dd
    1498:	000018dd 	.word	0x000018dd
    149c:	000018dd 	.word	0x000018dd
    14a0:	000018dd 	.word	0x000018dd
    14a4:	000018dd 	.word	0x000018dd
    14a8:	000018dd 	.word	0x000018dd
    14ac:	000018dd 	.word	0x000018dd
    14b0:	00001509 	.word	0x00001509
    14b4:	0000172f 	.word	0x0000172f
    14b8:	000018dd 	.word	0x000018dd
    14bc:	00001867 	.word	0x00001867
    14c0:	000018dd 	.word	0x000018dd
    14c4:	000018dd 	.word	0x000018dd
    14c8:	0000172f 	.word	0x0000172f
    14cc:	000018dd 	.word	0x000018dd
    14d0:	000018dd 	.word	0x000018dd
    14d4:	000018dd 	.word	0x000018dd
    14d8:	000018dd 	.word	0x000018dd
    14dc:	000018dd 	.word	0x000018dd
    14e0:	000018dd 	.word	0x000018dd
    14e4:	000018dd 	.word	0x000018dd
    14e8:	000018dd 	.word	0x000018dd
    14ec:	000018dd 	.word	0x000018dd
    14f0:	0000152f 	.word	0x0000152f
    14f4:	000018dd 	.word	0x000018dd
    14f8:	0000169d 	.word	0x0000169d
    14fc:	000018dd 	.word	0x000018dd
    1500:	000018dd 	.word	0x000018dd
    1504:	000015fd 	.word	0x000015fd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	1d1a      	adds	r2, r3, #4
    150c:	607a      	str	r2, [r7, #4]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	2b00      	cmp	r3, #0
    1518:	d005      	beq.n	1526 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	1c5a      	adds	r2, r3, #1
    151e:	60fa      	str	r2, [r7, #12]
    1520:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1524:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1528:	3301      	adds	r3, #1
    152a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    152c:	e1e6      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	1d1a      	adds	r2, r3, #4
    1532:	607a      	str	r2, [r7, #4]
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1538:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    153a:	f7ff fdc7 	bl	10cc <simple_strlen>
    153e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1542:	2b00      	cmp	r3, #0
    1544:	dd2e      	ble.n	15a4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    154a:	429a      	cmp	r2, r3
    154c:	d22a      	bcs.n	15a4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    154e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1552:	1ad3      	subs	r3, r2, r3
    1554:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    155a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    155c:	4619      	mov	r1, r3
    155e:	68f8      	ldr	r0, [r7, #12]
    1560:	f7ff fdd0 	bl	1104 <padbuffer>
    1564:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	2b00      	cmp	r3, #0
    156a:	d001      	beq.n	1570 <am_util_stdio_vsprintf+0x24c>
    156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    156e:	e000      	b.n	1572 <am_util_stdio_vsprintf+0x24e>
    1570:	2300      	movs	r3, #0
    1572:	68fa      	ldr	r2, [r7, #12]
    1574:	4413      	add	r3, r2
    1576:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    157a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    157c:	4413      	add	r3, r2
    157e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1580:	2300      	movs	r3, #0
    1582:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1584:	e00e      	b.n	15a4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2b00      	cmp	r3, #0
    158a:	d005      	beq.n	1598 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	1c5a      	adds	r2, r3, #1
    1590:	60fa      	str	r2, [r7, #12]
    1592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1594:	7812      	ldrb	r2, [r2, #0]
    1596:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    159a:	3301      	adds	r3, #1
    159c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15a0:	3301      	adds	r3, #1
    15a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    15a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d1ec      	bne.n	1586 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    15ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15ae:	2b00      	cmp	r3, #0
    15b0:	f000 81a1 	beq.w	18f6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    15b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15b6:	425b      	negs	r3, r3
    15b8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    15ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    15be:	429a      	cmp	r2, r3
    15c0:	f080 8199 	bcs.w	18f6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    15c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    15c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15c8:	1ad3      	subs	r3, r2, r3
    15ca:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    15cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    15d2:	4619      	mov	r1, r3
    15d4:	68f8      	ldr	r0, [r7, #12]
    15d6:	f7ff fd95 	bl	1104 <padbuffer>
    15da:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	2b00      	cmp	r3, #0
    15e0:	d001      	beq.n	15e6 <am_util_stdio_vsprintf+0x2c2>
    15e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15e4:	e000      	b.n	15e8 <am_util_stdio_vsprintf+0x2c4>
    15e6:	2300      	movs	r3, #0
    15e8:	68fa      	ldr	r2, [r7, #12]
    15ea:	4413      	add	r3, r2
    15ec:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    15ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15f2:	4413      	add	r3, r2
    15f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    15f6:	2300      	movs	r3, #0
    15f8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    15fa:	e17c      	b.n	18f6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    15fc:	2301      	movs	r3, #1
    15fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1602:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1606:	2b00      	cmp	r3, #0
    1608:	d00a      	beq.n	1620 <am_util_stdio_vsprintf+0x2fc>
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	3307      	adds	r3, #7
    160e:	f023 0307 	bic.w	r3, r3, #7
    1612:	f103 0208 	add.w	r2, r3, #8
    1616:	607a      	str	r2, [r7, #4]
    1618:	cb18      	ldmia	r3, {r3, r4}
    161a:	e007      	b.n	162c <am_util_stdio_vsprintf+0x308>
    161c:	10001178 	.word	0x10001178
                                      va_arg(pArgs, uint32_t);
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	1d1a      	adds	r2, r3, #4
    1624:	607a      	str	r2, [r7, #4]
    1626:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1628:	f04f 0400 	mov.w	r4, #0
    162c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1632:	2b00      	cmp	r3, #0
    1634:	d01e      	beq.n	1674 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1636:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    163a:	f7ff fc35 	bl	ea8 <ndigits_in_hex>
    163e:	4602      	mov	r2, r0
    1640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1642:	1a9b      	subs	r3, r3, r2
    1644:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    164a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    164c:	4619      	mov	r1, r3
    164e:	68f8      	ldr	r0, [r7, #12]
    1650:	f7ff fd58 	bl	1104 <padbuffer>
    1654:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	2b00      	cmp	r3, #0
    165a:	d001      	beq.n	1660 <am_util_stdio_vsprintf+0x33c>
    165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    165e:	e000      	b.n	1662 <am_util_stdio_vsprintf+0x33e>
    1660:	2300      	movs	r3, #0
    1662:	68fa      	ldr	r2, [r7, #12]
    1664:	4413      	add	r3, r2
    1666:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    166a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    166c:	4413      	add	r3, r2
    166e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1670:	2300      	movs	r3, #0
    1672:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1674:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1678:	68fa      	ldr	r2, [r7, #12]
    167a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    167e:	f7ff fcc5 	bl	100c <uint64_to_hexstr>
    1682:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1684:	68fb      	ldr	r3, [r7, #12]
    1686:	2b00      	cmp	r3, #0
    1688:	d003      	beq.n	1692 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    168c:	68fa      	ldr	r2, [r7, #12]
    168e:	4413      	add	r3, r2
    1690:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1696:	4413      	add	r3, r2
    1698:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    169a:	e12f      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    169c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    16a0:	2b00      	cmp	r3, #0
    16a2:	d008      	beq.n	16b6 <am_util_stdio_vsprintf+0x392>
    16a4:	687b      	ldr	r3, [r7, #4]
    16a6:	3307      	adds	r3, #7
    16a8:	f023 0307 	bic.w	r3, r3, #7
    16ac:	f103 0208 	add.w	r2, r3, #8
    16b0:	607a      	str	r2, [r7, #4]
    16b2:	cb18      	ldmia	r3, {r3, r4}
    16b4:	e005      	b.n	16c2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	1d1a      	adds	r2, r3, #4
    16ba:	607a      	str	r2, [r7, #4]
    16bc:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    16be:	f04f 0400 	mov.w	r4, #0
    16c2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    16c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16c8:	2b00      	cmp	r3, #0
    16ca:	d01e      	beq.n	170a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    16cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    16d0:	f7ff fbaa 	bl	e28 <ndigits_in_u64>
    16d4:	4602      	mov	r2, r0
    16d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16d8:	1a9b      	subs	r3, r3, r2
    16da:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    16dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    16e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    16e2:	4619      	mov	r1, r3
    16e4:	68f8      	ldr	r0, [r7, #12]
    16e6:	f7ff fd0d 	bl	1104 <padbuffer>
    16ea:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    16ec:	68fb      	ldr	r3, [r7, #12]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d001      	beq.n	16f6 <am_util_stdio_vsprintf+0x3d2>
    16f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16f4:	e000      	b.n	16f8 <am_util_stdio_vsprintf+0x3d4>
    16f6:	2300      	movs	r3, #0
    16f8:	68fa      	ldr	r2, [r7, #12]
    16fa:	4413      	add	r3, r2
    16fc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    16fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1702:	4413      	add	r3, r2
    1704:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1706:	2300      	movs	r3, #0
    1708:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    170a:	68fa      	ldr	r2, [r7, #12]
    170c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1710:	f7ff fc34 	bl	f7c <uint64_to_str>
    1714:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	2b00      	cmp	r3, #0
    171a:	d003      	beq.n	1724 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171e:	68fa      	ldr	r2, [r7, #12]
    1720:	4413      	add	r3, r2
    1722:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1728:	4413      	add	r3, r2
    172a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    172c:	e0e6      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    172e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1732:	2b00      	cmp	r3, #0
    1734:	d008      	beq.n	1748 <am_util_stdio_vsprintf+0x424>
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	3307      	adds	r3, #7
    173a:	f023 0307 	bic.w	r3, r3, #7
    173e:	f103 0208 	add.w	r2, r3, #8
    1742:	607a      	str	r2, [r7, #4]
    1744:	cb18      	ldmia	r3, {r3, r4}
    1746:	e005      	b.n	1754 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	1d1a      	adds	r2, r3, #4
    174c:	607a      	str	r2, [r7, #4]
    174e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1750:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1754:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1758:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    175c:	2b00      	cmp	r3, #0
    175e:	f174 0300 	sbcs.w	r3, r4, #0
    1762:	da0a      	bge.n	177a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1764:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1768:	425b      	negs	r3, r3
    176a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    176e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1772:	2301      	movs	r3, #1
    1774:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1778:	e006      	b.n	1788 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    177a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    177e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1782:	2300      	movs	r3, #0
    1784:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    178a:	2b00      	cmp	r3, #0
    178c:	d04a      	beq.n	1824 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    178e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1792:	4618      	mov	r0, r3
    1794:	4621      	mov	r1, r4
    1796:	f7ff fb69 	bl	e6c <ndigits_in_i64>
    179a:	4602      	mov	r2, r0
    179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    179e:	1a9b      	subs	r3, r3, r2
    17a0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    17a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    17a6:	2b00      	cmp	r3, #0
    17a8:	d011      	beq.n	17ce <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    17aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17ac:	3b01      	subs	r3, #1
    17ae:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    17b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    17b4:	2b30      	cmp	r3, #48	; 0x30
    17b6:	d10a      	bne.n	17ce <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    17b8:	68fb      	ldr	r3, [r7, #12]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d004      	beq.n	17c8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	1c5a      	adds	r2, r3, #1
    17c2:	60fa      	str	r2, [r7, #12]
    17c4:	222d      	movs	r2, #45	; 0x2d
    17c6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    17c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17ca:	3301      	adds	r3, #1
    17cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    17ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    17d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    17d4:	4619      	mov	r1, r3
    17d6:	68f8      	ldr	r0, [r7, #12]
    17d8:	f7ff fc94 	bl	1104 <padbuffer>
    17dc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    17de:	68fb      	ldr	r3, [r7, #12]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d001      	beq.n	17e8 <am_util_stdio_vsprintf+0x4c4>
    17e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17e6:	e000      	b.n	17ea <am_util_stdio_vsprintf+0x4c6>
    17e8:	2300      	movs	r3, #0
    17ea:	68fa      	ldr	r2, [r7, #12]
    17ec:	4413      	add	r3, r2
    17ee:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    17f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    17f4:	4413      	add	r3, r2
    17f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    17f8:	2300      	movs	r3, #0
    17fa:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    17fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1800:	2b00      	cmp	r3, #0
    1802:	d01e      	beq.n	1842 <am_util_stdio_vsprintf+0x51e>
    1804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1808:	2b20      	cmp	r3, #32
    180a:	d11a      	bne.n	1842 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	2b00      	cmp	r3, #0
    1810:	d004      	beq.n	181c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	1c5a      	adds	r2, r3, #1
    1816:	60fa      	str	r2, [r7, #12]
    1818:	222d      	movs	r2, #45	; 0x2d
    181a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    181c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    181e:	3301      	adds	r3, #1
    1820:	63fb      	str	r3, [r7, #60]	; 0x3c
    1822:	e00e      	b.n	1842 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1828:	2b00      	cmp	r3, #0
    182a:	d00a      	beq.n	1842 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    182c:	68fb      	ldr	r3, [r7, #12]
    182e:	2b00      	cmp	r3, #0
    1830:	d004      	beq.n	183c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	1c5a      	adds	r2, r3, #1
    1836:	60fa      	str	r2, [r7, #12]
    1838:	222d      	movs	r2, #45	; 0x2d
    183a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    183c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    183e:	3301      	adds	r3, #1
    1840:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1842:	68fa      	ldr	r2, [r7, #12]
    1844:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1848:	f7ff fb98 	bl	f7c <uint64_to_str>
    184c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	2b00      	cmp	r3, #0
    1852:	d003      	beq.n	185c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1856:	68fa      	ldr	r2, [r7, #12]
    1858:	4413      	add	r3, r2
    185a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    185e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1860:	4413      	add	r3, r2
    1862:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1864:	e04a      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	2b00      	cmp	r3, #0
    186a:	d046      	beq.n	18fa <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	3307      	adds	r3, #7
    1870:	f023 0307 	bic.w	r3, r3, #7
    1874:	f103 0208 	add.w	r2, r3, #8
    1878:	607a      	str	r2, [r7, #4]
    187a:	cb18      	ldmia	r3, {r3, r4}
    187c:	4618      	mov	r0, r3
    187e:	4621      	mov	r1, r4
    1880:	f7fe fc1e 	bl	c0 <__aeabi_d2f>
    1884:	4603      	mov	r3, r0
    1886:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1888:	68fb      	ldr	r3, [r7, #12]
    188a:	2214      	movs	r2, #20
    188c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    188e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1890:	68f9      	ldr	r1, [r7, #12]
    1892:	6978      	ldr	r0, [r7, #20]
    1894:	f7ff fc5c 	bl	1150 <ftoa>
    1898:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    189c:	2b00      	cmp	r3, #0
    189e:	da14      	bge.n	18ca <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    18a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    18a6:	d102      	bne.n	18ae <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    18a8:	4b1e      	ldr	r3, [pc, #120]	; (1924 <am_util_stdio_vsprintf+0x600>)
    18aa:	62bb      	str	r3, [r7, #40]	; 0x28
    18ac:	e008      	b.n	18c0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    18ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18b0:	f113 0f02 	cmn.w	r3, #2
    18b4:	d102      	bne.n	18bc <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    18b6:	4b1c      	ldr	r3, [pc, #112]	; (1928 <am_util_stdio_vsprintf+0x604>)
    18b8:	62bb      	str	r3, [r7, #40]	; 0x28
    18ba:	e001      	b.n	18c0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    18bc:	4b1b      	ldr	r3, [pc, #108]	; (192c <am_util_stdio_vsprintf+0x608>)
    18be:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    18c0:	68fb      	ldr	r3, [r7, #12]
    18c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    18c4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    18c6:	2303      	movs	r3, #3
    18c8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    18ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18ce:	4413      	add	r3, r2
    18d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    18d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18d4:	68fa      	ldr	r2, [r7, #12]
    18d6:	4413      	add	r3, r2
    18d8:	60fb      	str	r3, [r7, #12]
                }
                break;
    18da:	e00e      	b.n	18fa <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	2b00      	cmp	r3, #0
    18e0:	d005      	beq.n	18ee <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    18e2:	68fb      	ldr	r3, [r7, #12]
    18e4:	1c5a      	adds	r2, r3, #1
    18e6:	60fa      	str	r2, [r7, #12]
    18e8:	68ba      	ldr	r2, [r7, #8]
    18ea:	7812      	ldrb	r2, [r2, #0]
    18ec:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    18ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18f0:	3301      	adds	r3, #1
    18f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    18f4:	e002      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    18f6:	bf00      	nop
    18f8:	e000      	b.n	18fc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    18fa:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    18fc:	68bb      	ldr	r3, [r7, #8]
    18fe:	3301      	adds	r3, #1
    1900:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    1902:	68bb      	ldr	r3, [r7, #8]
    1904:	781b      	ldrb	r3, [r3, #0]
    1906:	2b00      	cmp	r3, #0
    1908:	f47f ad17 	bne.w	133a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	2b00      	cmp	r3, #0
    1910:	d002      	beq.n	1918 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1912:	68fb      	ldr	r3, [r7, #12]
    1914:	2200      	movs	r2, #0
    1916:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    191a:	4618      	mov	r0, r3
    191c:	3754      	adds	r7, #84	; 0x54
    191e:	46bd      	mov	sp, r7
    1920:	bd90      	pop	{r4, r7, pc}
    1922:	bf00      	nop
    1924:	00302e30 	.word	0x00302e30
    1928:	00232e23 	.word	0x00232e23
    192c:	003f2e3f 	.word	0x003f2e3f

00001930 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1930:	b40f      	push	{r0, r1, r2, r3}
    1932:	b580      	push	{r7, lr}
    1934:	b082      	sub	sp, #8
    1936:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1938:	f107 0314 	add.w	r3, r7, #20
    193c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    193e:	683a      	ldr	r2, [r7, #0]
    1940:	6939      	ldr	r1, [r7, #16]
    1942:	4808      	ldr	r0, [pc, #32]	; (1964 <am_util_stdio_printf+0x34>)
    1944:	f7ff fcee 	bl	1324 <am_util_stdio_vsprintf>
    1948:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    194a:	4b07      	ldr	r3, [pc, #28]	; (1968 <am_util_stdio_printf+0x38>)
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	4805      	ldr	r0, [pc, #20]	; (1964 <am_util_stdio_printf+0x34>)
    1950:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1952:	687b      	ldr	r3, [r7, #4]
}
    1954:	4618      	mov	r0, r3
    1956:	3708      	adds	r7, #8
    1958:	46bd      	mov	sp, r7
    195a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    195e:	b004      	add	sp, #16
    1960:	4770      	bx	lr
    1962:	bf00      	nop
    1964:	10001078 	.word	0x10001078
    1968:	100015c4 	.word	0x100015c4

0000196c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    196c:	b580      	push	{r7, lr}
    196e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1970:	4802      	ldr	r0, [pc, #8]	; (197c <am_util_stdio_terminal_clear+0x10>)
    1972:	f7ff ffdd 	bl	1930 <am_util_stdio_printf>
}
    1976:	bf00      	nop
    1978:	bd80      	pop	{r7, pc}
    197a:	bf00      	nop
    197c:	000061c0 	.word	0x000061c0

00001980 <am_bsp_iom_spi_pins_enable>:
    defined(AM_BSP_GPIO_IOM2_SCK) || defined(AM_BSP_GPIO_IOM3_SCK) || \
    defined(AM_BSP_GPIO_IOM4_SCK) || defined(AM_BSP_GPIO_IOM5_SCK)

void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
    1980:	b4f0      	push	{r4, r5, r6, r7}
    1982:	b092      	sub	sp, #72	; 0x48
    switch(ui32Module)
    1984:	2805      	cmp	r0, #5
    1986:	f200 81f9 	bhi.w	1d7c <am_bsp_iom_spi_pins_enable+0x3fc>
    198a:	e8df f010 	tbh	[pc, r0, lsl #1]
    198e:	01ab      	.short	0x01ab
    1990:	00f80161 	.word	0x00f80161
    1994:	005600a8 	.word	0x005600a8
    1998:	0006      	.short	0x0006
            break;
#endif

#ifdef AM_BSP_GPIO_IOM5_SCK
        case 5:
            am_bsp_pin_enable(IOM5_SCK);
    199a:	f3ef 8710 	mrs	r7, PRIMASK
    199e:	970f      	str	r7, [sp, #60]	; 0x3c
    19a0:	b672      	cpsid	i
    19a2:	4b9c      	ldr	r3, [pc, #624]	; (1c14 <am_bsp_iom_spi_pins_enable+0x294>)
    19a4:	4c9c      	ldr	r4, [pc, #624]	; (1c18 <am_bsp_iom_spi_pins_enable+0x298>)
    19a6:	489d      	ldr	r0, [pc, #628]	; (1c1c <am_bsp_iom_spi_pins_enable+0x29c>)
    19a8:	499d      	ldr	r1, [pc, #628]	; (1c20 <am_bsp_iom_spi_pins_enable+0x2a0>)
    19aa:	2673      	movs	r6, #115	; 0x73
    19ac:	601e      	str	r6, [r3, #0]
    19ae:	6822      	ldr	r2, [r4, #0]
    19b0:	f022 0507 	bic.w	r5, r2, #7
    19b4:	6025      	str	r5, [r4, #0]
    19b6:	6802      	ldr	r2, [r0, #0]
    19b8:	f022 05ff 	bic.w	r5, r2, #255	; 0xff
    19bc:	f045 022a 	orr.w	r2, r5, #42	; 0x2a
    19c0:	6002      	str	r2, [r0, #0]
    19c2:	680a      	ldr	r2, [r1, #0]
    19c4:	2500      	movs	r5, #0
    19c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    19ca:	600a      	str	r2, [r1, #0]
    19cc:	601d      	str	r5, [r3, #0]
    19ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    19d0:	f382 8810 	msr	PRIMASK, r2
            am_bsp_pin_enable(IOM5_MISO);
    19d4:	9710      	str	r7, [sp, #64]	; 0x40
    19d6:	b672      	cpsid	i
    19d8:	601e      	str	r6, [r3, #0]
    19da:	6822      	ldr	r2, [r4, #0]
    19dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    19e0:	6022      	str	r2, [r4, #0]
    19e2:	6802      	ldr	r2, [r0, #0]
    19e4:	f422 4c7f 	bic.w	ip, r2, #65280	; 0xff00
    19e8:	f44c 5228 	orr.w	r2, ip, #10752	; 0x2a00
    19ec:	6002      	str	r2, [r0, #0]
    19ee:	680a      	ldr	r2, [r1, #0]
    19f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
    19f4:	600a      	str	r2, [r1, #0]
    19f6:	601d      	str	r5, [r3, #0]
    19f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19fa:	f382 8810 	msr	PRIMASK, r2
            am_bsp_pin_enable(IOM5_MOSI);
    19fe:	9711      	str	r7, [sp, #68]	; 0x44
    1a00:	b672      	cpsid	i
    1a02:	601e      	str	r6, [r3, #0]
    1a04:	f854 7c04 	ldr.w	r7, [r4, #-4]
    1a08:	f027 46e0 	bic.w	r6, r7, #1879048192	; 0x70000000
    1a0c:	f844 6c04 	str.w	r6, [r4, #-4]
    1a10:	f850 4c04 	ldr.w	r4, [r0, #-4]
    1a14:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
    1a18:	f04c 5220 	orr.w	r2, ip, #671088640	; 0x28000000
    1a1c:	f840 2c04 	str.w	r2, [r0, #-4]
    1a20:	f851 0c04 	ldr.w	r0, [r1, #-4]
    1a24:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    1a28:	f841 7c04 	str.w	r7, [r1, #-4]
    1a2c:	601d      	str	r5, [r3, #0]
    1a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a30:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1a34:	b012      	add	sp, #72	; 0x48
    1a36:	bcf0      	pop	{r4, r5, r6, r7}
    1a38:	4770      	bx	lr
            break;
#endif

#ifdef AM_BSP_GPIO_IOM4_SCK
        case 4:
            am_bsp_pin_enable(IOM4_SCK);
    1a3a:	f3ef 8510 	mrs	r5, PRIMASK
    1a3e:	950c      	str	r5, [sp, #48]	; 0x30
    1a40:	b672      	cpsid	i
    1a42:	4b74      	ldr	r3, [pc, #464]	; (1c14 <am_bsp_iom_spi_pins_enable+0x294>)
    1a44:	4e77      	ldr	r6, [pc, #476]	; (1c24 <am_bsp_iom_spi_pins_enable+0x2a4>)
    1a46:	4878      	ldr	r0, [pc, #480]	; (1c28 <am_bsp_iom_spi_pins_enable+0x2a8>)
    1a48:	4978      	ldr	r1, [pc, #480]	; (1c2c <am_bsp_iom_spi_pins_enable+0x2ac>)
    1a4a:	2473      	movs	r4, #115	; 0x73
    1a4c:	601c      	str	r4, [r3, #0]
    1a4e:	6832      	ldr	r2, [r6, #0]
    1a50:	f022 47e0 	bic.w	r7, r2, #1879048192	; 0x70000000
    1a54:	f047 5200 	orr.w	r2, r7, #536870912	; 0x20000000
    1a58:	6032      	str	r2, [r6, #0]
    1a5a:	6807      	ldr	r7, [r0, #0]
    1a5c:	f027 4c7f 	bic.w	ip, r7, #4278190080	; 0xff000000
    1a60:	f04c 5228 	orr.w	r2, ip, #704643072	; 0x2a000000
    1a64:	6002      	str	r2, [r0, #0]
    1a66:	680f      	ldr	r7, [r1, #0]
    1a68:	2000      	movs	r0, #0
    1a6a:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    1a6e:	600a      	str	r2, [r1, #0]
    1a70:	6018      	str	r0, [r3, #0]
    1a72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    1a74:	f387 8810 	msr	PRIMASK, r7
            am_bsp_pin_enable(IOM4_MISO);
    1a78:	950d      	str	r5, [sp, #52]	; 0x34
    1a7a:	b672      	cpsid	i
    1a7c:	39b0      	subs	r1, #176	; 0xb0
    1a7e:	601c      	str	r4, [r3, #0]
    1a80:	680a      	ldr	r2, [r1, #0]
    1a82:	4f6b      	ldr	r7, [pc, #428]	; (1c30 <am_bsp_iom_spi_pins_enable+0x2b0>)
    1a84:	f022 0207 	bic.w	r2, r2, #7
    1a88:	600a      	str	r2, [r1, #0]
    1a8a:	683a      	ldr	r2, [r7, #0]
    1a8c:	f022 0cff 	bic.w	ip, r2, #255	; 0xff
    1a90:	f04c 022a 	orr.w	r2, ip, #42	; 0x2a
    1a94:	603a      	str	r2, [r7, #0]
    1a96:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
    1a9a:	f027 02ff 	bic.w	r2, r7, #255	; 0xff
    1a9e:	f8c6 20b8 	str.w	r2, [r6, #184]	; 0xb8
    1aa2:	6018      	str	r0, [r3, #0]
    1aa4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1aa6:	f386 8810 	msr	PRIMASK, r6
            am_bsp_pin_enable(IOM4_MOSI);
    1aaa:	950e      	str	r5, [sp, #56]	; 0x38
    1aac:	b672      	cpsid	i
    1aae:	601c      	str	r4, [r3, #0]
    1ab0:	680f      	ldr	r7, [r1, #0]
    1ab2:	4d60      	ldr	r5, [pc, #384]	; (1c34 <am_bsp_iom_spi_pins_enable+0x2b4>)
    1ab4:	4c60      	ldr	r4, [pc, #384]	; (1c38 <am_bsp_iom_spi_pins_enable+0x2b8>)
    1ab6:	f427 22e0 	bic.w	r2, r7, #458752	; 0x70000
    1aba:	600a      	str	r2, [r1, #0]
    1abc:	6829      	ldr	r1, [r5, #0]
    1abe:	f021 06ff 	bic.w	r6, r1, #255	; 0xff
    1ac2:	f046 0728 	orr.w	r7, r6, #40	; 0x28
    1ac6:	602f      	str	r7, [r5, #0]
    1ac8:	6825      	ldr	r5, [r4, #0]
    1aca:	f025 02ff 	bic.w	r2, r5, #255	; 0xff
    1ace:	6022      	str	r2, [r4, #0]
    1ad0:	6018      	str	r0, [r3, #0]
    1ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1ad4:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1ad8:	b012      	add	sp, #72	; 0x48
    1ada:	bcf0      	pop	{r4, r5, r6, r7}
    1adc:	4770      	bx	lr
            break;
#endif

#ifdef AM_BSP_GPIO_IOM3_SCK
        case 3:
            am_bsp_pin_enable(IOM3_SCK);
    1ade:	f3ef 8710 	mrs	r7, PRIMASK
    1ae2:	9709      	str	r7, [sp, #36]	; 0x24
    1ae4:	b672      	cpsid	i
    1ae6:	4b4b      	ldr	r3, [pc, #300]	; (1c14 <am_bsp_iom_spi_pins_enable+0x294>)
    1ae8:	4c54      	ldr	r4, [pc, #336]	; (1c3c <am_bsp_iom_spi_pins_enable+0x2bc>)
    1aea:	4851      	ldr	r0, [pc, #324]	; (1c30 <am_bsp_iom_spi_pins_enable+0x2b0>)
    1aec:	4954      	ldr	r1, [pc, #336]	; (1c40 <am_bsp_iom_spi_pins_enable+0x2c0>)
    1aee:	2673      	movs	r6, #115	; 0x73
    1af0:	601e      	str	r6, [r3, #0]
    1af2:	6825      	ldr	r5, [r4, #0]
    1af4:	f425 62e0 	bic.w	r2, r5, #1792	; 0x700
    1af8:	6022      	str	r2, [r4, #0]
    1afa:	6805      	ldr	r5, [r0, #0]
    1afc:	f425 0c7f 	bic.w	ip, r5, #16711680	; 0xff0000
    1b00:	f44c 1228 	orr.w	r2, ip, #2752512	; 0x2a0000
    1b04:	6002      	str	r2, [r0, #0]
    1b06:	680a      	ldr	r2, [r1, #0]
    1b08:	2500      	movs	r5, #0
    1b0a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
    1b0e:	600a      	str	r2, [r1, #0]
    1b10:	601d      	str	r5, [r3, #0]
    1b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b14:	f382 8810 	msr	PRIMASK, r2
            am_bsp_pin_enable(IOM3_MISO);
    1b18:	970a      	str	r7, [sp, #40]	; 0x28
    1b1a:	b672      	cpsid	i
    1b1c:	601e      	str	r6, [r3, #0]
    1b1e:	6822      	ldr	r2, [r4, #0]
    1b20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    1b24:	6022      	str	r2, [r4, #0]
    1b26:	6802      	ldr	r2, [r0, #0]
    1b28:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    1b2c:	f04c 5228 	orr.w	r2, ip, #704643072	; 0x2a000000
    1b30:	6002      	str	r2, [r0, #0]
    1b32:	680a      	ldr	r2, [r1, #0]
    1b34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1b38:	600a      	str	r2, [r1, #0]
    1b3a:	601d      	str	r5, [r3, #0]
    1b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b3e:	f382 8810 	msr	PRIMASK, r2
            am_bsp_pin_enable(IOM3_MOSI);
    1b42:	970b      	str	r7, [sp, #44]	; 0x2c
    1b44:	b672      	cpsid	i
    1b46:	601e      	str	r6, [r3, #0]
    1b48:	f854 7c04 	ldr.w	r7, [r4, #-4]
    1b4c:	f027 66e0 	bic.w	r6, r7, #117440512	; 0x7000000
    1b50:	f844 6c04 	str.w	r6, [r4, #-4]
    1b54:	f850 4c04 	ldr.w	r4, [r0, #-4]
    1b58:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
    1b5c:	f44c 1220 	orr.w	r2, ip, #2621440	; 0x280000
    1b60:	f840 2c04 	str.w	r2, [r0, #-4]
    1b64:	f851 0c04 	ldr.w	r0, [r1, #-4]
    1b68:	f420 077f 	bic.w	r7, r0, #16711680	; 0xff0000
    1b6c:	f841 7c04 	str.w	r7, [r1, #-4]
    1b70:	601d      	str	r5, [r3, #0]
    1b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b74:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1b78:	b012      	add	sp, #72	; 0x48
    1b7a:	bcf0      	pop	{r4, r5, r6, r7}
    1b7c:	4770      	bx	lr
            break;
#endif

#ifdef AM_BSP_GPIO_IOM2_SCK
        case 2:
            am_bsp_pin_enable(IOM2_SCK);
    1b7e:	f3ef 8710 	mrs	r7, PRIMASK
    1b82:	9706      	str	r7, [sp, #24]
    1b84:	b672      	cpsid	i
    1b86:	4b23      	ldr	r3, [pc, #140]	; (1c14 <am_bsp_iom_spi_pins_enable+0x294>)
    1b88:	4a2e      	ldr	r2, [pc, #184]	; (1c44 <am_bsp_iom_spi_pins_enable+0x2c4>)
    1b8a:	4c2f      	ldr	r4, [pc, #188]	; (1c48 <am_bsp_iom_spi_pins_enable+0x2c8>)
    1b8c:	482f      	ldr	r0, [pc, #188]	; (1c4c <am_bsp_iom_spi_pins_enable+0x2cc>)
    1b8e:	2673      	movs	r6, #115	; 0x73
    1b90:	601e      	str	r6, [r3, #0]
    1b92:	6811      	ldr	r1, [r2, #0]
    1b94:	f421 45e0 	bic.w	r5, r1, #28672	; 0x7000
    1b98:	6015      	str	r5, [r2, #0]
    1b9a:	6821      	ldr	r1, [r4, #0]
    1b9c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1ba0:	f045 5138 	orr.w	r1, r5, #771751936	; 0x2e000000
    1ba4:	6021      	str	r1, [r4, #0]
    1ba6:	6801      	ldr	r1, [r0, #0]
    1ba8:	2500      	movs	r5, #0
    1baa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1bae:	6001      	str	r1, [r0, #0]
    1bb0:	601d      	str	r5, [r3, #0]
    1bb2:	9906      	ldr	r1, [sp, #24]
    1bb4:	f381 8810 	msr	PRIMASK, r1
            am_bsp_pin_enable(IOM2_MISO);
    1bb8:	9707      	str	r7, [sp, #28]
    1bba:	b672      	cpsid	i
    1bbc:	601e      	str	r6, [r3, #0]
    1bbe:	6811      	ldr	r1, [r2, #0]
    1bc0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    1bc4:	6011      	str	r1, [r2, #0]
    1bc6:	6821      	ldr	r1, [r4, #0]
    1bc8:	f421 4c7f 	bic.w	ip, r1, #65280	; 0xff00
    1bcc:	f44c 5128 	orr.w	r1, ip, #10752	; 0x2a00
    1bd0:	6021      	str	r1, [r4, #0]
    1bd2:	6801      	ldr	r1, [r0, #0]
    1bd4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    1bd8:	6001      	str	r1, [r0, #0]
    1bda:	601d      	str	r5, [r3, #0]
    1bdc:	9907      	ldr	r1, [sp, #28]
    1bde:	f381 8810 	msr	PRIMASK, r1
            am_bsp_pin_enable(IOM2_MOSI);
    1be2:	9708      	str	r7, [sp, #32]
    1be4:	b672      	cpsid	i
    1be6:	601e      	str	r6, [r3, #0]
    1be8:	6817      	ldr	r7, [r2, #0]
    1bea:	f427 26e0 	bic.w	r6, r7, #458752	; 0x70000
    1bee:	6016      	str	r6, [r2, #0]
    1bf0:	6862      	ldr	r2, [r4, #4]
    1bf2:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
    1bf6:	f041 0728 	orr.w	r7, r1, #40	; 0x28
    1bfa:	6067      	str	r7, [r4, #4]
    1bfc:	6844      	ldr	r4, [r0, #4]
    1bfe:	f024 06ff 	bic.w	r6, r4, #255	; 0xff
    1c02:	6046      	str	r6, [r0, #4]
    1c04:	601d      	str	r5, [r3, #0]
    1c06:	9b08      	ldr	r3, [sp, #32]
    1c08:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1c0c:	b012      	add	sp, #72	; 0x48
    1c0e:	bcf0      	pop	{r4, r5, r6, r7}
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop
    1c14:	40010060 	.word	0x40010060
    1c18:	40010058 	.word	0x40010058
    1c1c:	40010030 	.word	0x40010030
    1c20:	40010110 	.word	0x40010110
    1c24:	40010050 	.word	0x40010050
    1c28:	40010024 	.word	0x40010024
    1c2c:	40010104 	.word	0x40010104
    1c30:	40010028 	.word	0x40010028
    1c34:	4001002c 	.word	0x4001002c
    1c38:	4001010c 	.word	0x4001010c
    1c3c:	40010054 	.word	0x40010054
    1c40:	40010108 	.word	0x40010108
    1c44:	4001004c 	.word	0x4001004c
    1c48:	40010018 	.word	0x40010018
    1c4c:	400100f8 	.word	0x400100f8
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_enable(IOM1_SCK);
    1c50:	f3ef 8710 	mrs	r7, PRIMASK
    1c54:	9703      	str	r7, [sp, #12]
    1c56:	b672      	cpsid	i
    1c58:	4b49      	ldr	r3, [pc, #292]	; (1d80 <am_bsp_iom_spi_pins_enable+0x400>)
    1c5a:	484a      	ldr	r0, [pc, #296]	; (1d84 <am_bsp_iom_spi_pins_enable+0x404>)
    1c5c:	494a      	ldr	r1, [pc, #296]	; (1d88 <am_bsp_iom_spi_pins_enable+0x408>)
    1c5e:	4a4b      	ldr	r2, [pc, #300]	; (1d8c <am_bsp_iom_spi_pins_enable+0x40c>)
    1c60:	2673      	movs	r6, #115	; 0x73
    1c62:	601e      	str	r6, [r3, #0]
    1c64:	6805      	ldr	r5, [r0, #0]
    1c66:	f025 0407 	bic.w	r4, r5, #7
    1c6a:	6004      	str	r4, [r0, #0]
    1c6c:	680d      	ldr	r5, [r1, #0]
    1c6e:	f025 0cff 	bic.w	ip, r5, #255	; 0xff
    1c72:	f04c 040e 	orr.w	r4, ip, #14
    1c76:	600c      	str	r4, [r1, #0]
    1c78:	6814      	ldr	r4, [r2, #0]
    1c7a:	2500      	movs	r5, #0
    1c7c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    1c80:	6014      	str	r4, [r2, #0]
    1c82:	601d      	str	r5, [r3, #0]
    1c84:	9c03      	ldr	r4, [sp, #12]
    1c86:	f384 8810 	msr	PRIMASK, r4
            am_bsp_pin_enable(IOM1_MISO);
    1c8a:	9704      	str	r7, [sp, #16]
    1c8c:	b672      	cpsid	i
    1c8e:	601e      	str	r6, [r3, #0]
    1c90:	6804      	ldr	r4, [r0, #0]
    1c92:	f024 0470 	bic.w	r4, r4, #112	; 0x70
    1c96:	6004      	str	r4, [r0, #0]
    1c98:	680c      	ldr	r4, [r1, #0]
    1c9a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
    1c9e:	f44c 6420 	orr.w	r4, ip, #2560	; 0xa00
    1ca2:	600c      	str	r4, [r1, #0]
    1ca4:	6814      	ldr	r4, [r2, #0]
    1ca6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
    1caa:	6014      	str	r4, [r2, #0]
    1cac:	601d      	str	r5, [r3, #0]
    1cae:	9c04      	ldr	r4, [sp, #16]
    1cb0:	f384 8810 	msr	PRIMASK, r4
            am_bsp_pin_enable(IOM1_MOSI);
    1cb4:	9705      	str	r7, [sp, #20]
    1cb6:	b672      	cpsid	i
    1cb8:	601e      	str	r6, [r3, #0]
    1cba:	6807      	ldr	r7, [r0, #0]
    1cbc:	f427 66e0 	bic.w	r6, r7, #1792	; 0x700
    1cc0:	6006      	str	r6, [r0, #0]
    1cc2:	6808      	ldr	r0, [r1, #0]
    1cc4:	f420 047f 	bic.w	r4, r0, #16711680	; 0xff0000
    1cc8:	f444 2700 	orr.w	r7, r4, #524288	; 0x80000
    1ccc:	600f      	str	r7, [r1, #0]
    1cce:	6811      	ldr	r1, [r2, #0]
    1cd0:	f421 067f 	bic.w	r6, r1, #16711680	; 0xff0000
    1cd4:	6016      	str	r6, [r2, #0]
    1cd6:	601d      	str	r5, [r3, #0]
    1cd8:	9b05      	ldr	r3, [sp, #20]
    1cda:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1cde:	b012      	add	sp, #72	; 0x48
    1ce0:	bcf0      	pop	{r4, r5, r6, r7}
    1ce2:	4770      	bx	lr
{
    switch(ui32Module)
    {
#ifdef AM_BSP_GPIO_IOM0_SCK
        case 0:
            am_bsp_pin_enable(IOM0_SCK);
    1ce4:	f3ef 8610 	mrs	r6, PRIMASK
    1ce8:	9600      	str	r6, [sp, #0]
    1cea:	b672      	cpsid	i
    1cec:	4b24      	ldr	r3, [pc, #144]	; (1d80 <am_bsp_iom_spi_pins_enable+0x400>)
    1cee:	4828      	ldr	r0, [pc, #160]	; (1d90 <am_bsp_iom_spi_pins_enable+0x410>)
    1cf0:	4928      	ldr	r1, [pc, #160]	; (1d94 <am_bsp_iom_spi_pins_enable+0x414>)
    1cf2:	4a29      	ldr	r2, [pc, #164]	; (1d98 <am_bsp_iom_spi_pins_enable+0x418>)
    1cf4:	2573      	movs	r5, #115	; 0x73
    1cf6:	601d      	str	r5, [r3, #0]
    1cf8:	6804      	ldr	r4, [r0, #0]
    1cfa:	f424 07e0 	bic.w	r7, r4, #7340032	; 0x700000
    1cfe:	f447 1400 	orr.w	r4, r7, #2097152	; 0x200000
    1d02:	6004      	str	r4, [r0, #0]
    1d04:	680f      	ldr	r7, [r1, #0]
    1d06:	f427 4c7f 	bic.w	ip, r7, #65280	; 0xff00
    1d0a:	f44c 6460 	orr.w	r4, ip, #3584	; 0xe00
    1d0e:	600c      	str	r4, [r1, #0]
    1d10:	6814      	ldr	r4, [r2, #0]
    1d12:	2700      	movs	r7, #0
    1d14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
    1d18:	6014      	str	r4, [r2, #0]
    1d1a:	601f      	str	r7, [r3, #0]
    1d1c:	9c00      	ldr	r4, [sp, #0]
    1d1e:	f384 8810 	msr	PRIMASK, r4
            am_bsp_pin_enable(IOM0_MISO);
    1d22:	9601      	str	r6, [sp, #4]
    1d24:	b672      	cpsid	i
    1d26:	601d      	str	r5, [r3, #0]
    1d28:	6804      	ldr	r4, [r0, #0]
    1d2a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
    1d2e:	6004      	str	r4, [r0, #0]
    1d30:	680c      	ldr	r4, [r1, #0]
    1d32:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
    1d36:	f44c 2420 	orr.w	r4, ip, #655360	; 0xa0000
    1d3a:	600c      	str	r4, [r1, #0]
    1d3c:	6814      	ldr	r4, [r2, #0]
    1d3e:	f424 047f 	bic.w	r4, r4, #16711680	; 0xff0000
    1d42:	6014      	str	r4, [r2, #0]
    1d44:	601f      	str	r7, [r3, #0]
    1d46:	9c01      	ldr	r4, [sp, #4]
    1d48:	f384 8810 	msr	PRIMASK, r4
            am_bsp_pin_enable(IOM0_MOSI);
    1d4c:	9602      	str	r6, [sp, #8]
    1d4e:	b672      	cpsid	i
    1d50:	601d      	str	r5, [r3, #0]
    1d52:	6806      	ldr	r6, [r0, #0]
    1d54:	f026 45e0 	bic.w	r5, r6, #1879048192	; 0x70000000
    1d58:	6005      	str	r5, [r0, #0]
    1d5a:	6808      	ldr	r0, [r1, #0]
    1d5c:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1d60:	f044 6600 	orr.w	r6, r4, #134217728	; 0x8000000
    1d64:	600e      	str	r6, [r1, #0]
    1d66:	6811      	ldr	r1, [r2, #0]
    1d68:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1d6c:	6015      	str	r5, [r2, #0]
    1d6e:	601f      	str	r7, [r3, #0]
    1d70:	9b02      	ldr	r3, [sp, #8]
    1d72:	f383 8810 	msr	PRIMASK, r3
        // debugging.
        //
        default:
            while(1);
    }
}
    1d76:	b012      	add	sp, #72	; 0x48
    1d78:	bcf0      	pop	{r4, r5, r6, r7}
    1d7a:	4770      	bx	lr
    1d7c:	e7fe      	b.n	1d7c <am_bsp_iom_spi_pins_enable+0x3fc>
    1d7e:	bf00      	nop
    1d80:	40010060 	.word	0x40010060
    1d84:	40010044 	.word	0x40010044
    1d88:	40010008 	.word	0x40010008
    1d8c:	400100e8 	.word	0x400100e8
    1d90:	40010040 	.word	0x40010040
    1d94:	40010004 	.word	0x40010004
    1d98:	400100e4 	.word	0x400100e4

00001d9c <am_bsp_iom_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_enable(uint32_t ui32Module)
{
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	b083      	sub	sp, #12
    1da0:	4604      	mov	r4, r0
    am_hal_iom_enable(ui32Module);
    1da2:	f000 fdb5 	bl	2910 <am_hal_iom_enable>

    //
    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    //
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    1da6:	492a      	ldr	r1, [pc, #168]	; (1e50 <am_bsp_iom_enable+0xb4>)
    1da8:	4a2a      	ldr	r2, [pc, #168]	; (1e54 <am_bsp_iom_enable+0xb8>)
    1daa:	f851 3034 	ldr.w	r3, [r1, r4, lsl #3]
    1dae:	4293      	cmp	r3, r2
    1db0:	d04c      	beq.n	1e4c <am_bsp_iom_enable+0xb0>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
    1db2:	f504 20a0 	add.w	r0, r4, #327680	; 0x50000
    1db6:	3004      	adds	r0, #4
    1db8:	0305      	lsls	r5, r0, #12
    1dba:	f8d5 611c 	ldr.w	r6, [r5, #284]	; 0x11c
    am_hal_iom_enable(ui32Module);

    //
    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    //
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    1dbe:	07f2      	lsls	r2, r6, #31
    1dc0:	d544      	bpl.n	1e4c <am_bsp_iom_enable+0xb0>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
    {
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
    1dc2:	2b31      	cmp	r3, #49	; 0x31
    1dc4:	d842      	bhi.n	1e4c <am_bsp_iom_enable+0xb0>
    1dc6:	f3ef 8710 	mrs	r7, PRIMASK
    1dca:	9701      	str	r7, [sp, #4]
    1dcc:	b672      	cpsid	i
    1dce:	eb01 0ec4 	add.w	lr, r1, r4, lsl #3
    1dd2:	4821      	ldr	r0, [pc, #132]	; (1e58 <am_bsp_iom_enable+0xbc>)
    1dd4:	f8de 2004 	ldr.w	r2, [lr, #4]
    1dd8:	f8df c084 	ldr.w	ip, [pc, #132]	; 1e60 <am_bsp_iom_enable+0xc4>
    1ddc:	4d1f      	ldr	r5, [pc, #124]	; (1e5c <am_bsp_iom_enable+0xc0>)
    1dde:	085c      	lsrs	r4, r3, #1
    1de0:	f004 077c 	and.w	r7, r4, #124	; 0x7c
    1de4:	009e      	lsls	r6, r3, #2
    1de6:	2173      	movs	r1, #115	; 0x73
    1de8:	6001      	str	r1, [r0, #0]
    1dea:	f006 041c 	and.w	r4, r6, #28
    1dee:	f3c2 2102 	ubfx	r1, r2, #8, #3
    1df2:	2607      	movs	r6, #7
    1df4:	fa01 fe04 	lsl.w	lr, r1, r4
    1df8:	40a6      	lsls	r6, r4
    1dfa:	f857 400c 	ldr.w	r4, [r7, ip]
    1dfe:	ea24 0106 	bic.w	r1, r4, r6
    1e02:	f003 06fc 	and.w	r6, r3, #252	; 0xfc
    1e06:	ea4e 0401 	orr.w	r4, lr, r1
    1e0a:	f106 4e80 	add.w	lr, r6, #1073741824	; 0x40000000
    1e0e:	f847 400c 	str.w	r4, [r7, ip]
    1e12:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
    1e16:	00db      	lsls	r3, r3, #3
    1e18:	f003 0318 	and.w	r3, r3, #24
    1e1c:	21ff      	movs	r1, #255	; 0xff
    1e1e:	f8de 7000 	ldr.w	r7, [lr]
    1e22:	4099      	lsls	r1, r3
    1e24:	43c9      	mvns	r1, r1
    1e26:	b2d4      	uxtb	r4, r2
    1e28:	400f      	ands	r7, r1
    1e2a:	409c      	lsls	r4, r3
    1e2c:	433c      	orrs	r4, r7
    1e2e:	f8ce 4000 	str.w	r4, [lr]
    1e32:	5977      	ldr	r7, [r6, r5]
    1e34:	f3c2 4c07 	ubfx	ip, r2, #16, #8
    1e38:	fa0c f303 	lsl.w	r3, ip, r3
    1e3c:	4039      	ands	r1, r7
    1e3e:	430b      	orrs	r3, r1
    1e40:	2200      	movs	r2, #0
    1e42:	5173      	str	r3, [r6, r5]
    1e44:	6002      	str	r2, [r0, #0]
    1e46:	9801      	ldr	r0, [sp, #4]
    1e48:	f380 8810 	msr	PRIMASK, r0
                               g_SPIpins[ui32Module][1]);
    }
}
    1e4c:	b003      	add	sp, #12
    1e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e50:	00006204 	.word	0x00006204
    1e54:	deadbeef 	.word	0xdeadbeef
    1e58:	40010060 	.word	0x40010060
    1e5c:	400100e0 	.word	0x400100e0
    1e60:	40010040 	.word	0x40010040

00001e64 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1e64:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1e66:	f002 feed 	bl	4c44 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1e6a:	f002 ff59 	bl	4d20 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1e6e:	f003 f8fb 	bl	5068 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1e72:	2001      	movs	r0, #1
    1e74:	f002 fff2 	bl	4e5c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1e78:	2001      	movs	r0, #1
    1e7a:	f000 f905 	bl	2088 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1e82:	f002 bff9 	b.w	4e78 <am_hal_rtc_osc_disable>
    1e86:	bf00      	nop

00001e88 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1e88:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1e8a:	4b17      	ldr	r3, [pc, #92]	; (1ee8 <am_bsp_debug_printf_enable+0x60>)
    1e8c:	6818      	ldr	r0, [r3, #0]
    1e8e:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1e92:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1e94:	d001      	beq.n	1e9a <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1e96:	b007      	add	sp, #28
    1e98:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1e9a:	4a14      	ldr	r2, [pc, #80]	; (1eec <am_bsp_debug_printf_enable+0x64>)
    1e9c:	4914      	ldr	r1, [pc, #80]	; (1ef0 <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1e9e:	4d15      	ldr	r5, [pc, #84]	; (1ef4 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1ea0:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1ea2:	a806      	add	r0, sp, #24
    1ea4:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1ea8:	f003 f888 	bl	4fbc <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1eac:	f3ef 8310 	mrs	r3, PRIMASK
    1eb0:	9300      	str	r3, [sp, #0]
    1eb2:	b672      	cpsid	i
    1eb4:	4a10      	ldr	r2, [pc, #64]	; (1ef8 <am_bsp_debug_printf_enable+0x70>)
    1eb6:	4d11      	ldr	r5, [pc, #68]	; (1efc <am_bsp_debug_printf_enable+0x74>)
    1eb8:	4811      	ldr	r0, [pc, #68]	; (1f00 <am_bsp_debug_printf_enable+0x78>)
    1eba:	4912      	ldr	r1, [pc, #72]	; (1f04 <am_bsp_debug_printf_enable+0x7c>)
    1ebc:	2373      	movs	r3, #115	; 0x73
    1ebe:	6013      	str	r3, [r2, #0]
    1ec0:	682b      	ldr	r3, [r5, #0]
    1ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1ec6:	602b      	str	r3, [r5, #0]
    1ec8:	6805      	ldr	r5, [r0, #0]
    1eca:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1ece:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1ed2:	6003      	str	r3, [r0, #0]
    1ed4:	6808      	ldr	r0, [r1, #0]
    1ed6:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1eda:	600d      	str	r5, [r1, #0]
    1edc:	6014      	str	r4, [r2, #0]
    1ede:	9c00      	ldr	r4, [sp, #0]
    1ee0:	f384 8810 	msr	PRIMASK, r4
}
    1ee4:	b007      	add	sp, #28
    1ee6:	bd30      	pop	{r4, r5, pc}
    1ee8:	1000117c 	.word	0x1000117c
    1eec:	e0000e80 	.word	0xe0000e80
    1ef0:	00150511 	.word	0x00150511
    1ef4:	000f4240 	.word	0x000f4240
    1ef8:	40010060 	.word	0x40010060
    1efc:	40010054 	.word	0x40010054
    1f00:	40010028 	.word	0x40010028
    1f04:	40010108 	.word	0x40010108

00001f08 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1f08:	f002 bd36 	b.w	4978 <am_hal_itm_print>

00001f0c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f0e:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1f10:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1f14:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1f16:	7863      	ldrb	r3, [r4, #1]
    1f18:	78e2      	ldrb	r2, [r4, #3]
    1f1a:	7925      	ldrb	r5, [r4, #4]
    1f1c:	79a1      	ldrb	r1, [r4, #6]
    1f1e:	00be      	lsls	r6, r7, #2
    1f20:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    1f24:	f006 0304 	and.w	r3, r6, #4
    1f28:	f00e 0602 	and.w	r6, lr, #2
    1f2c:	431e      	orrs	r6, r3
    1f2e:	f042 0201 	orr.w	r2, r2, #1
    1f32:	79e3      	ldrb	r3, [r4, #7]
    1f34:	01ed      	lsls	r5, r5, #7
    1f36:	4316      	orrs	r6, r2
    1f38:	b2ed      	uxtb	r5, r5
    1f3a:	7a22      	ldrb	r2, [r4, #8]
    1f3c:	0289      	lsls	r1, r1, #10
    1f3e:	432e      	orrs	r6, r5
    1f40:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    1f44:	7a65      	ldrb	r5, [r4, #9]
    1f46:	02db      	lsls	r3, r3, #11
    1f48:	430e      	orrs	r6, r1
    1f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1f4e:	0312      	lsls	r2, r2, #12
    1f50:	7aa1      	ldrb	r1, [r4, #10]
    1f52:	431e      	orrs	r6, r3
    1f54:	042d      	lsls	r5, r5, #16
    1f56:	b293      	uxth	r3, r2
    1f58:	7ae2      	ldrb	r2, [r4, #11]
    1f5a:	431e      	orrs	r6, r3
    1f5c:	0509      	lsls	r1, r1, #20
    1f5e:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    1f62:	0612      	lsls	r2, r2, #24
    1f64:	4333      	orrs	r3, r6
    1f66:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1f6a:	00bf      	lsls	r7, r7, #2
    1f6c:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1f70:	4333      	orrs	r3, r6
    1f72:	430b      	orrs	r3, r1
    1f74:	f007 0508 	and.w	r5, r7, #8
    1f78:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1f7a:	f002 fd5b 	bl	4a34 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1f7e:	482c      	ldr	r0, [pc, #176]	; (2030 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1f80:	4b2c      	ldr	r3, [pc, #176]	; (2034 <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1f82:	6005      	str	r5, [r0, #0]
    1f84:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1f86:	681e      	ldr	r6, [r3, #0]
    1f88:	0777      	lsls	r7, r6, #29
    1f8a:	d41e      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1f8c:	681f      	ldr	r7, [r3, #0]
    1f8e:	077e      	lsls	r6, r7, #29
    1f90:	f102 32ff 	add.w	r2, r2, #4294967295
    1f94:	d419      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1f96:	6819      	ldr	r1, [r3, #0]
    1f98:	074f      	lsls	r7, r1, #29
    1f9a:	d416      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1f9c:	6818      	ldr	r0, [r3, #0]
    1f9e:	0746      	lsls	r6, r0, #29
    1fa0:	d413      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fa2:	681e      	ldr	r6, [r3, #0]
    1fa4:	0770      	lsls	r0, r6, #29
    1fa6:	d410      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fa8:	681f      	ldr	r7, [r3, #0]
    1faa:	0779      	lsls	r1, r7, #29
    1fac:	d40d      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fae:	6819      	ldr	r1, [r3, #0]
    1fb0:	074f      	lsls	r7, r1, #29
    1fb2:	d40a      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fb4:	6818      	ldr	r0, [r3, #0]
    1fb6:	0746      	lsls	r6, r0, #29
    1fb8:	d407      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fba:	681e      	ldr	r6, [r3, #0]
    1fbc:	0770      	lsls	r0, r6, #29
    1fbe:	d404      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    1fc0:	681f      	ldr	r7, [r3, #0]
    1fc2:	0779      	lsls	r1, r7, #29
    1fc4:	d401      	bmi.n	1fca <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1fc6:	3a09      	subs	r2, #9
    1fc8:	d1dd      	bne.n	1f86 <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1fca:	4b1a      	ldr	r3, [pc, #104]	; (2034 <am_hal_cachectrl_enable+0x128>)
    1fcc:	681a      	ldr	r2, [r3, #0]
    1fce:	f042 0101 	orr.w	r1, r2, #1
    1fd2:	6019      	str	r1, [r3, #0]
    1fd4:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1fd6:	6818      	ldr	r0, [r3, #0]
    1fd8:	0740      	lsls	r0, r0, #29
    1fda:	d41e      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1fdc:	681e      	ldr	r6, [r3, #0]
    1fde:	0771      	lsls	r1, r6, #29
    1fe0:	f102 32ff 	add.w	r2, r2, #4294967295
    1fe4:	d419      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1fe6:	681f      	ldr	r7, [r3, #0]
    1fe8:	077f      	lsls	r7, r7, #29
    1fea:	d416      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1fec:	6819      	ldr	r1, [r3, #0]
    1fee:	074e      	lsls	r6, r1, #29
    1ff0:	d413      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1ff2:	6818      	ldr	r0, [r3, #0]
    1ff4:	0740      	lsls	r0, r0, #29
    1ff6:	d410      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1ff8:	681e      	ldr	r6, [r3, #0]
    1ffa:	0771      	lsls	r1, r6, #29
    1ffc:	d40d      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    1ffe:	681f      	ldr	r7, [r3, #0]
    2000:	077f      	lsls	r7, r7, #29
    2002:	d40a      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    2004:	6819      	ldr	r1, [r3, #0]
    2006:	074e      	lsls	r6, r1, #29
    2008:	d407      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    200a:	6818      	ldr	r0, [r3, #0]
    200c:	0740      	lsls	r0, r0, #29
    200e:	d404      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    2010:	681e      	ldr	r6, [r3, #0]
    2012:	0771      	lsls	r1, r6, #29
    2014:	d401      	bmi.n	201a <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    2016:	3a09      	subs	r2, #9
    2018:	d1dd      	bne.n	1fd6 <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    201a:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    201c:	4f04      	ldr	r7, [pc, #16]	; (2030 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    201e:	0223      	lsls	r3, r4, #8
    2020:	f403 7100 	and.w	r1, r3, #512	; 0x200
    2024:	f403 7280 	and.w	r2, r3, #256	; 0x100
    2028:	4311      	orrs	r1, r2
    202a:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    202c:	6039      	str	r1, [r7, #0]
    202e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2030:	40018000 	.word	0x40018000
    2034:	40018008 	.word	0x40018008

00002038 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    2038:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    203a:	4604      	mov	r4, r0
    203c:	b120      	cbz	r0, 2048 <am_hal_clkgen_sysclk_select+0x10>
    203e:	4a06      	ldr	r2, [pc, #24]	; (2058 <am_hal_clkgen_sysclk_select+0x20>)
    2040:	4806      	ldr	r0, [pc, #24]	; (205c <am_hal_clkgen_sysclk_select+0x24>)
    2042:	2150      	movs	r1, #80	; 0x50
    2044:	f000 f82a 	bl	209c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2048:	4b05      	ldr	r3, [pc, #20]	; (2060 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    204a:	4906      	ldr	r1, [pc, #24]	; (2064 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    204c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    204e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2050:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    2052:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    2054:	601a      	str	r2, [r3, #0]
    2056:	bd10      	pop	{r4, pc}
    2058:	00006240 	.word	0x00006240
    205c:	00006278 	.word	0x00006278
    2060:	40004014 	.word	0x40004014
    2064:	40004018 	.word	0x40004018

00002068 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    2068:	4b04      	ldr	r3, [pc, #16]	; (207c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    206a:	4905      	ldr	r1, [pc, #20]	; (2080 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    206c:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    206e:	4805      	ldr	r0, [pc, #20]	; (2084 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    2070:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    2074:	bf08      	it	eq
    2076:	4608      	moveq	r0, r1
    2078:	4770      	bx	lr
    207a:	bf00      	nop
    207c:	40004018 	.word	0x40004018
    2080:	02dc6c00 	.word	0x02dc6c00
    2084:	016e3600 	.word	0x016e3600

00002088 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    2088:	0783      	lsls	r3, r0, #30
    208a:	d003      	beq.n	2094 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    208c:	4a02      	ldr	r2, [pc, #8]	; (2098 <am_hal_clkgen_osc_stop+0x10>)
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	4318      	orrs	r0, r3
    2092:	6010      	str	r0, [r2, #0]
    2094:	4770      	bx	lr
    2096:	bf00      	nop
    2098:	4000400c 	.word	0x4000400c

0000209c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    209c:	e7fe      	b.n	209c <am_hal_debug_error>
    209e:	bf00      	nop

000020a0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    20a0:	4b01      	ldr	r3, [pc, #4]	; (20a8 <am_hal_flash_delay+0x8>)
    20a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    20a4:	4708      	bx	r1
    20a6:	bf00      	nop
    20a8:	10001018 	.word	0x10001018

000020ac <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    20ac:	2800      	cmp	r0, #0
    20ae:	f000 80bb 	beq.w	2228 <am_hal_flash_delay_status_change+0x17c>
//
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    20b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20b6:	f100 3aff 	add.w	sl, r0, #4294967295
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    20ba:	6808      	ldr	r0, [r1, #0]
    20bc:	4010      	ands	r0, r2
    20be:	4283      	cmp	r3, r0
    20c0:	f000 80ac 	beq.w	221c <am_hal_flash_delay_status_change+0x170>
    20c4:	f01a 0907 	ands.w	r9, sl, #7
    20c8:	461c      	mov	r4, r3
    20ca:	4615      	mov	r5, r2
    20cc:	460e      	mov	r6, r1
    20ce:	f04f 0700 	mov.w	r7, #0
    20d2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 222c <am_hal_flash_delay_status_change+0x180>
    20d6:	d056      	beq.n	2186 <am_hal_flash_delay_status_change+0xda>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    20d8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    20dc:	200c      	movs	r0, #12
    20de:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    20e0:	6831      	ldr	r1, [r6, #0]
    20e2:	4029      	ands	r1, r5
    20e4:	42a1      	cmp	r1, r4
    20e6:	f04f 0701 	mov.w	r7, #1
    20ea:	f000 8097 	beq.w	221c <am_hal_flash_delay_status_change+0x170>
    20ee:	45b9      	cmp	r9, r7
    20f0:	d049      	beq.n	2186 <am_hal_flash_delay_status_change+0xda>
    20f2:	f1b9 0f02 	cmp.w	r9, #2
    20f6:	d03c      	beq.n	2172 <am_hal_flash_delay_status_change+0xc6>
    20f8:	f1b9 0f03 	cmp.w	r9, #3
    20fc:	d02f      	beq.n	215e <am_hal_flash_delay_status_change+0xb2>
    20fe:	f1b9 0f04 	cmp.w	r9, #4
    2102:	d022      	beq.n	214a <am_hal_flash_delay_status_change+0x9e>
    2104:	f1b9 0f05 	cmp.w	r9, #5
    2108:	d015      	beq.n	2136 <am_hal_flash_delay_status_change+0x8a>
    210a:	f1b9 0f06 	cmp.w	r9, #6
    210e:	d008      	beq.n	2122 <am_hal_flash_delay_status_change+0x76>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2110:	200c      	movs	r0, #12
    2112:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    2116:	4790      	blx	r2
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    2118:	6830      	ldr	r0, [r6, #0]
    211a:	4028      	ands	r0, r5
    211c:	42a0      	cmp	r0, r4
    211e:	443f      	add	r7, r7
    2120:	d07c      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2122:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    2126:	200c      	movs	r0, #12
    2128:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    212a:	6831      	ldr	r1, [r6, #0]
    212c:	4029      	ands	r1, r5
    212e:	42a1      	cmp	r1, r4
    2130:	f107 0701 	add.w	r7, r7, #1
    2134:	d072      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2136:	200c      	movs	r0, #12
    2138:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    213c:	4790      	blx	r2
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    213e:	6830      	ldr	r0, [r6, #0]
    2140:	4028      	ands	r0, r5
    2142:	42a0      	cmp	r0, r4
    2144:	f107 0701 	add.w	r7, r7, #1
    2148:	d068      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    214a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    214e:	200c      	movs	r0, #12
    2150:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    2152:	6831      	ldr	r1, [r6, #0]
    2154:	4029      	ands	r1, r5
    2156:	42a1      	cmp	r1, r4
    2158:	f107 0701 	add.w	r7, r7, #1
    215c:	d05e      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    215e:	200c      	movs	r0, #12
    2160:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    2164:	4790      	blx	r2
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    2166:	6830      	ldr	r0, [r6, #0]
    2168:	4028      	ands	r0, r5
    216a:	42a0      	cmp	r0, r4
    216c:	f107 0701 	add.w	r7, r7, #1
    2170:	d054      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2172:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    2176:	200c      	movs	r0, #12
    2178:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    217a:	6831      	ldr	r1, [r6, #0]
    217c:	4029      	ands	r1, r5
    217e:	42a1      	cmp	r1, r4
    2180:	f107 0701 	add.w	r7, r7, #1
    2184:	d04a      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2186:	200c      	movs	r0, #12
    2188:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    218c:	4790      	blx	r2
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    218e:	4557      	cmp	r7, sl
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2190:	f04f 000c 	mov.w	r0, #12
    2194:	f107 0708 	add.w	r7, r7, #8
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    2198:	d043      	beq.n	2222 <am_hal_flash_delay_status_change+0x176>
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    219a:	6833      	ldr	r3, [r6, #0]
    219c:	402b      	ands	r3, r5
    219e:	42a3      	cmp	r3, r4
    21a0:	d03c      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21a2:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    21a6:	4788      	blx	r1
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21a8:	6832      	ldr	r2, [r6, #0]
    21aa:	402a      	ands	r2, r5
    21ac:	42a2      	cmp	r2, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21ae:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21b2:	d033      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21b4:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    21b8:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21ba:	6831      	ldr	r1, [r6, #0]
    21bc:	4029      	ands	r1, r5
    21be:	42a1      	cmp	r1, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21c0:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21c4:	d02a      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21c6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    21ca:	4790      	blx	r2
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21cc:	6833      	ldr	r3, [r6, #0]
    21ce:	402b      	ands	r3, r5
    21d0:	42a3      	cmp	r3, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21d2:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21d6:	d021      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21d8:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    21dc:	4788      	blx	r1
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21de:	6832      	ldr	r2, [r6, #0]
    21e0:	402a      	ands	r2, r5
    21e2:	42a2      	cmp	r2, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21e4:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21e8:	d018      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21ea:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    21ee:	4798      	blx	r3
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21f0:	6831      	ldr	r1, [r6, #0]
    21f2:	4029      	ands	r1, r5
    21f4:	42a1      	cmp	r1, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21f6:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    21fa:	d00f      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    21fc:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    2200:	4790      	blx	r2
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    2202:	6833      	ldr	r3, [r6, #0]
    2204:	402b      	ands	r3, r5
    2206:	42a3      	cmp	r3, r4
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2208:	f04f 000c 	mov.w	r0, #12
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    220c:	d006      	beq.n	221c <am_hal_flash_delay_status_change+0x170>
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    220e:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    2212:	4788      	blx	r1
    while ( ui32usMaxDelay-- )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    2214:	6830      	ldr	r0, [r6, #0]
    2216:	4028      	ands	r0, r5
    2218:	42a0      	cmp	r0, r4
    221a:	d1b4      	bne.n	2186 <am_hal_flash_delay_status_change+0xda>
        {
            return 1;
    221c:	2001      	movs	r0, #1
    221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
    2222:	2000      	movs	r0, #0
    2224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2228:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    222a:	4770      	bx	lr
    222c:	10001018 	.word	0x10001018

00002230 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    2230:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    2232:	4c05      	ldr	r4, [pc, #20]	; (2248 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    2234:	4a05      	ldr	r2, [pc, #20]	; (224c <am_hal_gpio_int_enable+0x1c>)
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    2236:	6823      	ldr	r3, [r4, #0]
    2238:	4319      	orrs	r1, r3
    223a:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    223c:	6811      	ldr	r1, [r2, #0]
}
    223e:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    2242:	4308      	orrs	r0, r1
    2244:	6010      	str	r0, [r2, #0]
}
    2246:	4770      	bx	lr
    2248:	40010210 	.word	0x40010210
    224c:	40010200 	.word	0x40010200

00002250 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    2250:	b082      	sub	sp, #8
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    2252:	f3ef 8310 	mrs	r3, PRIMASK
    2256:	9301      	str	r3, [sp, #4]
    2258:	b672      	cpsid	i
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    225a:	4a04      	ldr	r2, [pc, #16]	; (226c <am_hal_gpio_int_clear+0x1c>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <am_hal_gpio_int_clear+0x20>)
{
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    225e:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    2260:	6018      	str	r0, [r3, #0]
    AM_CRITICAL_END_ASM
    2262:	9801      	ldr	r0, [sp, #4]
    2264:	f380 8810 	msr	PRIMASK, r0
}
    2268:	b002      	add	sp, #8
    226a:	4770      	bx	lr
    226c:	40010218 	.word	0x40010218
    2270:	40010208 	.word	0x40010208

00002274 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    2274:	b4f0      	push	{r4, r5, r6, r7}
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    2276:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    227a:	b082      	sub	sp, #8
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    227c:	9301      	str	r3, [sp, #4]
    227e:	b672      	cpsid	i
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    2280:	4a0e      	ldr	r2, [pc, #56]	; (22bc <am_hal_gpio_int_status_get+0x48>)
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    2282:	490f      	ldr	r1, [pc, #60]	; (22c0 <am_hal_gpio_int_status_get+0x4c>)
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    2284:	6814      	ldr	r4, [r2, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    2286:	680d      	ldr	r5, [r1, #0]
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    2288:	f04f 0c00 	mov.w	ip, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    228c:	ea4c 0605 	orr.w	r6, ip, r5
    2290:	4627      	mov	r7, r4

    if ( bEnabledOnly )
    2292:	b170      	cbz	r0, 22b2 <am_hal_gpio_int_status_get+0x3e>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    2294:	480b      	ldr	r0, [pc, #44]	; (22c4 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    2296:	4b0c      	ldr	r3, [pc, #48]	; (22c8 <am_hal_gpio_int_status_get+0x54>)
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;

    if ( bEnabledOnly )
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    2298:	6802      	ldr	r2, [r0, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    229a:	6819      	ldr	r1, [r3, #0]
    229c:	ea4c 0001 	orr.w	r0, ip, r1
    22a0:	4611      	mov	r1, r2
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
    22a2:	9b01      	ldr	r3, [sp, #4]
    22a4:	f383 8810 	msr	PRIMASK, r3

    return ui64RetVal;
}
    22a8:	4030      	ands	r0, r6
    22aa:	4039      	ands	r1, r7
    22ac:	b002      	add	sp, #8
    22ae:	bcf0      	pop	{r4, r5, r6, r7}
    22b0:	4770      	bx	lr
    uint64_t ui64RetVal, ui64Mask;

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    22b2:	f04f 30ff 	mov.w	r0, #4294967295
    22b6:	f04f 31ff 	mov.w	r1, #4294967295
    22ba:	e7f2      	b.n	22a2 <am_hal_gpio_int_status_get+0x2e>
    22bc:	40010214 	.word	0x40010214
    22c0:	40010204 	.word	0x40010204
    22c4:	40010210 	.word	0x40010210
    22c8:	40010200 	.word	0x40010200

000022cc <am_hal_gpio_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_gpio_int_service(uint64_t ui64Status)
{
    22cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ce:	460f      	mov	r7, r1

    //
    // Handle any active interrupts in the lower 32 bits
    //
    ui32Status = (uint32_t) ui64Status;
    while ( ui32Status )
    22d0:	b188      	cbz	r0, 22f6 <am_hal_gpio_int_service+0x2a>
    22d2:	4e15      	ldr	r6, [pc, #84]	; (2328 <am_hal_gpio_int_service+0x5c>)
    22d4:	4604      	mov	r4, r0
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    22d6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        // Pick one of any remaining active interrupt bits
        //
#ifdef __IAR_SYSTEMS_ICC__
        ui32Clz = __CLZ(ui32Status);
#else
        ui32Clz = __builtin_clz(ui32Status);
    22da:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    22de:	f1c3 021f 	rsb	r2, r3, #31
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    22e2:	fa25 f003 	lsr.w	r0, r5, r3

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    22e6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    22ea:	ea24 0400 	bic.w	r4, r4, r0
        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
        if ( pfnHandler )
    22ee:	b101      	cbz	r1, 22f2 <am_hal_gpio_int_service+0x26>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    22f0:	4788      	blx	r1

    //
    // Handle any active interrupts in the lower 32 bits
    //
    ui32Status = (uint32_t) ui64Status;
    while ( ui32Status )
    22f2:	2c00      	cmp	r4, #0
    22f4:	d1f1      	bne.n	22da <am_hal_gpio_int_service+0xe>
    }

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    22f6:	463a      	mov	r2, r7
    22f8:	2300      	movs	r3, #0
    while ( ui32Status )
    22fa:	4313      	orrs	r3, r2
    }

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    22fc:	463c      	mov	r4, r7
    while ( ui32Status )
    22fe:	d011      	beq.n	2324 <am_hal_gpio_int_service+0x58>
    2300:	4f09      	ldr	r7, [pc, #36]	; (2328 <am_hal_gpio_int_service+0x5c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    2302:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        // Pick one of any remaining active interrupt bits
        //
#ifdef __IAR_SYSTEMS_ICC__
        ui32Clz = __CLZ(ui32Status);
#else
        ui32Clz = __builtin_clz(ui32Status);
    2306:	fab4 f584 	clz	r5, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    230a:	f1c5 0c3f 	rsb	ip, r5, #63	; 0x3f
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    230e:	fa26 f305 	lsr.w	r3, r6, r5

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    2312:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    2316:	ea24 0403 	bic.w	r4, r4, r3
        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
        if ( pfnHandler )
    231a:	b102      	cbz	r2, 231e <am_hal_gpio_int_service+0x52>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    231c:	4790      	blx	r2

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    while ( ui32Status )
    231e:	2c00      	cmp	r4, #0
    2320:	d1f1      	bne.n	2306 <am_hal_gpio_int_service+0x3a>
    2322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2326:	bf00      	nop
    2328:	100015c8 	.word	0x100015c8

0000232c <am_hal_gpio_int_register>:
                         am_hal_gpio_handler_t pfnHandler)
{
    //
    // Check to make sure the GPIO number is valid. (Debug builds only)
    //
    am_hal_debug_assert_msg(ui32GPIONumber < 64, "GPIO number out of range.");
    232c:	283f      	cmp	r0, #63	; 0x3f
//
//*****************************************************************************
void
am_hal_gpio_int_register(uint32_t ui32GPIONumber,
                         am_hal_gpio_handler_t pfnHandler)
{
    232e:	b538      	push	{r3, r4, r5, lr}
    2330:	4604      	mov	r4, r0
    2332:	460d      	mov	r5, r1
    //
    // Check to make sure the GPIO number is valid. (Debug builds only)
    //
    am_hal_debug_assert_msg(ui32GPIONumber < 64, "GPIO number out of range.");
    2334:	d905      	bls.n	2342 <am_hal_gpio_int_register+0x16>
    2336:	4a05      	ldr	r2, [pc, #20]	; (234c <am_hal_gpio_int_register+0x20>)
    2338:	4805      	ldr	r0, [pc, #20]	; (2350 <am_hal_gpio_int_register+0x24>)
    233a:	f240 11d5 	movw	r1, #469	; 0x1d5
    233e:	f7ff fead 	bl	209c <am_hal_debug_error>

    am_hal_gpio_ppfnHandlers[ui32GPIONumber] = pfnHandler;
    2342:	4b04      	ldr	r3, [pc, #16]	; (2354 <am_hal_gpio_int_register+0x28>)
    2344:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    2348:	bd38      	pop	{r3, r4, r5, pc}
    234a:	bf00      	nop
    234c:	000062bc 	.word	0x000062bc
    2350:	000062a8 	.word	0x000062a8
    2354:	100015c8 	.word	0x100015c8

00002358 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    2358:	280f      	cmp	r0, #15
    235a:	d80b      	bhi.n	2374 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    235c:	2805      	cmp	r0, #5
    235e:	d013      	beq.n	2388 <am_hal_interrupt_enable+0x30>
    2360:	2806      	cmp	r0, #6
    2362:	d017      	beq.n	2394 <am_hal_interrupt_enable+0x3c>
    2364:	2804      	cmp	r0, #4
    2366:	d104      	bne.n	2372 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    2368:	4a0d      	ldr	r2, [pc, #52]	; (23a0 <am_hal_interrupt_enable+0x48>)
    236a:	6813      	ldr	r3, [r2, #0]
    236c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    2370:	6010      	str	r0, [r2, #0]
    2372:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    2374:	f1a0 0310 	sub.w	r3, r0, #16
    2378:	f003 0c1f 	and.w	ip, r3, #31
    237c:	2001      	movs	r0, #1
    237e:	4909      	ldr	r1, [pc, #36]	; (23a4 <am_hal_interrupt_enable+0x4c>)
    2380:	fa00 f20c 	lsl.w	r2, r0, ip
    2384:	600a      	str	r2, [r1, #0]
    2386:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    2388:	4805      	ldr	r0, [pc, #20]	; (23a0 <am_hal_interrupt_enable+0x48>)
    238a:	6801      	ldr	r1, [r0, #0]
    238c:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    2390:	6002      	str	r2, [r0, #0]
            break;
    2392:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    2394:	4902      	ldr	r1, [pc, #8]	; (23a0 <am_hal_interrupt_enable+0x48>)
    2396:	680a      	ldr	r2, [r1, #0]
    2398:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    239c:	600b      	str	r3, [r1, #0]
            break;
    239e:	4770      	bx	lr
    23a0:	e000ed24 	.word	0xe000ed24
    23a4:	e000e100 	.word	0xe000e100

000023a8 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    23a8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    23ac:	b672      	cpsid	i
    __asm("    bx lr");
    23ae:	4770      	bx	lr

000023b0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    23b0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop

000023b8 <iom_workaround_loop>:
                    bool bRising)
{
    //
    // Check to see if this is a "rising edge" or "falling edge" detector.
    //
    __asm("    cbz      r2, falling_edge");
    23b8:	b132      	cbz	r2, 23c8 <falling_edge>

000023ba <rising_edge>:

    //
    // Read GPIO pin 44, and loop until it's HIGH.
    //
    __asm("rising_edge:");
    __asm("    ldr      r2, =0x40010084");
    23ba:	4a07      	ldr	r2, [pc, #28]	; (23d8 <falling_check_mosi+0xe>)

000023bc <rising_check_mosi>:
    __asm("rising_check_mosi:");
    __asm("    ldr      r3, [r2]");
    23bc:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    23be:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    beq      rising_check_mosi");
    23c2:	d0fb      	beq.n	23bc <rising_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    23c4:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    23c6:	4770      	bx	lr

000023c8 <falling_edge>:

    //
    // Read GPIO pin 44, and loop until it's LOW.
    //
    __asm("falling_edge:");
    __asm("    ldr      r2, =0x40010084");
    23c8:	4a03      	ldr	r2, [pc, #12]	; (23d8 <falling_check_mosi+0xe>)

000023ca <falling_check_mosi>:
    __asm("falling_check_mosi:");
    __asm("    ldr      r3, [r2]");
    23ca:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    23cc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    bne      falling_check_mosi");
    23d0:	d1fb      	bne.n	23ca <falling_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    23d2:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    23d4:	4770      	bx	lr
    23d6:	0000      	.short	0x0000
    23d8:	40010084 	.word	0x40010084

000023dc <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    23dc:	2805      	cmp	r0, #5
    23de:	d819      	bhi.n	2414 <am_hal_iom_sleeping_queue_flush+0x38>
//! implementations expect to control sleep behavior).
//
//*****************************************************************************
void
am_hal_iom_sleeping_queue_flush(uint32_t ui32Module)
{
    23e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e2:	4b0d      	ldr	r3, [pc, #52]	; (2418 <am_hal_iom_sleeping_queue_flush+0x3c>)
    23e4:	4e0d      	ldr	r6, [pc, #52]	; (241c <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    23e6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
    23ea:	4604      	mov	r4, r0
    23ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    while ( bWaiting )
    {
        //
        // Start a critical section.
        //
        ui32Critical = am_hal_interrupt_master_disable();
    23f0:	f7ff ffda 	bl	23a8 <am_hal_interrupt_master_disable>

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
    23f4:	5d31      	ldrb	r1, [r6, r4]
    while ( bWaiting )
    {
        //
        // Start a critical section.
        //
        ui32Critical = am_hal_interrupt_master_disable();
    23f6:	4605      	mov	r5, r0

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
    23f8:	b929      	cbnz	r1, 2406 <am_hal_iom_sleeping_queue_flush+0x2a>
    23fa:	68ba      	ldr	r2, [r7, #8]
    23fc:	b91a      	cbnz	r2, 2406 <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    23fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        }

        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    2402:	f7ff bfd5 	b.w	23b0 <am_hal_interrupt_master_set>
        else
        {
            //
            // Otherwise, we should sleep until the interface is actually free.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    2406:	2000      	movs	r0, #0
    2408:	f002 fd3e 	bl	4e88 <am_hal_sysctrl_sleep>
        }

        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    240c:	4628      	mov	r0, r5
    240e:	f7ff ffcf 	bl	23b0 <am_hal_interrupt_master_set>
    2412:	e7ed      	b.n	23f0 <am_hal_iom_sleeping_queue_flush+0x14>
    2414:	4770      	bx	lr
    2416:	bf00      	nop
    2418:	10001758 	.word	0x10001758
    241c:	10001188 	.word	0x10001188

00002420 <am_hal_iom_i2c_cmd_run.part.1>:
//!
//! @return 0 on success
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_cmd_run(uint32_t ui32Operation, uint32_t ui32Module,
    2420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2424:	b089      	sub	sp, #36	; 0x24
    for ( index = 0; index < (sizeof(g_I2CPads) / sizeof(I2CPad_t)); index++ )
    {
        //
        //  Is this for the IOM that we are using?
        //
        if ( g_I2CPads[index].module == ui32Module )
    2426:	2900      	cmp	r1, #0
    2428:	d06a      	beq.n	2500 <am_hal_iom_i2c_cmd_run.part.1+0xe0>
    242a:	2901      	cmp	r1, #1
    242c:	d00d      	beq.n	244a <am_hal_iom_i2c_cmd_run.part.1+0x2a>
    242e:	2902      	cmp	r1, #2
    2430:	d01a      	beq.n	2468 <am_hal_iom_i2c_cmd_run.part.1+0x48>
    2432:	2903      	cmp	r1, #3
    2434:	d030      	beq.n	2498 <am_hal_iom_i2c_cmd_run.part.1+0x78>
    2436:	2904      	cmp	r1, #4
    2438:	d040      	beq.n	24bc <am_hal_iom_i2c_cmd_run.part.1+0x9c>
    243a:	2905      	cmp	r1, #5
    243c:	d050      	beq.n	24e0 <am_hal_iom_i2c_cmd_run.part.1+0xc0>
    243e:	2902      	cmp	r1, #2
    2440:	d019      	beq.n	2476 <am_hal_iom_i2c_cmd_run.part.1+0x56>
        }
    }
    if (0xDEADBEEF == ui32IOMGPIO)
    {
        // SCL has not been configured
        return AM_HAL_IOM_ERR_INVALID_CFG;
    2442:	2004      	movs	r0, #4
        // Write the complete command word to the IOM command register.
        //
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    }
    return ui32Status;
}
    2444:	b009      	add	sp, #36	; 0x24
    2446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    244a:	4d6f      	ldr	r5, [pc, #444]	; (2608 <am_hal_iom_i2c_cmd_run.part.1+0x1e8>)
    244c:	682f      	ldr	r7, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    244e:	f3c7 04c2 	ubfx	r4, r7, #3, #3
    2452:	2c00      	cmp	r4, #0
    2454:	d1f5      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2456:	f04f 0e08 	mov.w	lr, #8
    245a:	26ff      	movs	r6, #255	; 0xff
    245c:	9403      	str	r4, [sp, #12]
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    245e:	46f3      	mov	fp, lr
    2460:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2464:	9604      	str	r6, [sp, #16]
    2466:	e05b      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2468:	4d68      	ldr	r5, [pc, #416]	; (260c <am_hal_iom_i2c_cmd_run.part.1+0x1ec>)
    246a:	682c      	ldr	r4, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    246c:	f3c4 06c2 	ubfx	r6, r4, #3, #3
    2470:	2e07      	cmp	r6, #7
    2472:	f000 80c1 	beq.w	25f8 <am_hal_iom_i2c_cmd_run.part.1+0x1d8>
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2476:	4d66      	ldr	r5, [pc, #408]	; (2610 <am_hal_iom_i2c_cmd_run.part.1+0x1f0>)
    2478:	682f      	ldr	r7, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    247a:	f3c7 64c2 	ubfx	r4, r7, #27, #3
    247e:	2c04      	cmp	r4, #4
    2480:	d1df      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2482:	2618      	movs	r6, #24
    2484:	f04f 0e1b 	mov.w	lr, #27
    2488:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
    248c:	9603      	str	r6, [sp, #12]
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    248e:	46b3      	mov	fp, r6
    2490:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2494:	9704      	str	r7, [sp, #16]
    2496:	e043      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2498:	4d5e      	ldr	r5, [pc, #376]	; (2614 <am_hal_iom_i2c_cmd_run.part.1+0x1f4>)
    249a:	682f      	ldr	r7, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    249c:	f3c7 44c2 	ubfx	r4, r7, #19, #3
    24a0:	2c04      	cmp	r4, #4
    24a2:	d1ce      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24a4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
    24a8:	f44f 067f 	mov.w	r6, #16711680	; 0xff0000
    24ac:	2710      	movs	r7, #16
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    24ae:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24b2:	9604      	str	r6, [sp, #16]
    24b4:	9703      	str	r7, [sp, #12]
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    24b6:	f04f 0b28 	mov.w	fp, #40	; 0x28
    24ba:	e031      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
    24bc:	4d56      	ldr	r5, [pc, #344]	; (2618 <am_hal_iom_i2c_cmd_run.part.1+0x1f8>)
    24be:	682e      	ldr	r6, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    24c0:	f3c6 67c2 	ubfx	r7, r6, #27, #3
    24c4:	2f04      	cmp	r7, #4
    24c6:	d1bc      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24c8:	f04f 0e27 	mov.w	lr, #39	; 0x27
    24cc:	f04f 447f 	mov.w	r4, #4278190080	; 0xff000000
    24d0:	2618      	movs	r6, #24
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    24d2:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24d6:	9404      	str	r4, [sp, #16]
    24d8:	9603      	str	r6, [sp, #12]
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    24da:	f04f 0b24 	mov.w	fp, #36	; 0x24
    24de:	e01f      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
    24e0:	4d4e      	ldr	r5, [pc, #312]	; (261c <am_hal_iom_i2c_cmd_run.part.1+0x1fc>)
    24e2:	682c      	ldr	r4, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    24e4:	f3c4 06c2 	ubfx	r6, r4, #3, #3
    24e8:	2e04      	cmp	r6, #4
    24ea:	d1aa      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24ec:	f04f 0e30 	mov.w	lr, #48	; 0x30
    24f0:	27ff      	movs	r7, #255	; 0xff
    24f2:	2400      	movs	r4, #0
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    24f4:	46f3      	mov	fp, lr
    24f6:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    24fa:	9704      	str	r7, [sp, #16]
    24fc:	9403      	str	r4, [sp, #12]
    24fe:	e00f      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2500:	4d47      	ldr	r5, [pc, #284]	; (2620 <am_hal_iom_i2c_cmd_run.part.1+0x200>)
    2502:	682f      	ldr	r7, [r5, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    2504:	f417 5f60 	tst.w	r7, #14336	; 0x3800
    2508:	d19b      	bne.n	2442 <am_hal_iom_i2c_cmd_run.part.1+0x22>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    250a:	f04f 0e05 	mov.w	lr, #5
    250e:	f44f 447f 	mov.w	r4, #65280	; 0xff00
    2512:	2608      	movs	r6, #8
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2514:	f8cd e014 	str.w	lr, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2518:	9404      	str	r4, [sp, #16]
    251a:	9603      	str	r6, [sp, #12]
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    251c:	f04f 0b04 	mov.w	fp, #4
    2520:	461e      	mov	r6, r3
    //
    // Save the locations and values of the SCL pin configuration
    // information.
    //
    pui32SCLPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    ui32SCLPadregVal = *pui32SCLPadreg;
    2522:	682b      	ldr	r3, [r5, #0]
    2524:	9001      	str	r0, [sp, #4]
    2526:	460c      	mov	r4, r1
    //
    // Temporarily configure the override pin as an input.
    //
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_PIN_INPUT);
    2528:	f3ef 8010 	mrs	r0, PRIMASK
    252c:	4690      	mov	r8, r2
    //
    // Save the locations and values of the SCL pin configuration
    // information.
    //
    pui32SCLPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    ui32SCLPadregVal = *pui32SCLPadreg;
    252e:	9302      	str	r3, [sp, #8]
    //
    // Temporarily configure the override pin as an input.
    //
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_PIN_INPUT);
    2530:	9007      	str	r0, [sp, #28]
    2532:	b672      	cpsid	i
    2534:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2634 <am_hal_iom_i2c_cmd_run.part.1+0x214>
    2538:	4f3a      	ldr	r7, [pc, #232]	; (2624 <am_hal_iom_i2c_cmd_run.part.1+0x204>)
    253a:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 2638 <am_hal_iom_i2c_cmd_run.part.1+0x218>
    253e:	ea4f 015e 	mov.w	r1, lr, lsr #1
    2542:	f001 037c 	and.w	r3, r1, #124	; 0x7c
    2546:	f04f 0a73 	mov.w	sl, #115	; 0x73
    254a:	f8c9 a000 	str.w	sl, [r9]
    254e:	ea4f 008e 	mov.w	r0, lr, lsl #2
    2552:	59da      	ldr	r2, [r3, r7]
    2554:	f000 001c 	and.w	r0, r0, #28
    2558:	2107      	movs	r1, #7
    255a:	4081      	lsls	r1, r0
    255c:	ea22 0201 	bic.w	r2, r2, r1
    2560:	51da      	str	r2, [r3, r7]
    2562:	9b04      	ldr	r3, [sp, #16]
    2564:	682f      	ldr	r7, [r5, #0]
    2566:	9803      	ldr	r0, [sp, #12]
    2568:	43da      	mvns	r2, r3
    256a:	211a      	movs	r1, #26
    256c:	4017      	ands	r7, r2
    256e:	4081      	lsls	r1, r0
    2570:	4339      	orrs	r1, r7
    2572:	6029      	str	r1, [r5, #0]
    2574:	f85b 300c 	ldr.w	r3, [fp, ip]
    2578:	2700      	movs	r7, #0
    257a:	401a      	ands	r2, r3
    257c:	f84b 200c 	str.w	r2, [fp, ip]
    2580:	f8c9 7000 	str.w	r7, [r9]
    2584:	9a07      	ldr	r2, [sp, #28]
    2586:	f382 8810 	msr	PRIMASK, r2

    //
    // Make sure SCL is high within standard timeout
    //
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    258a:	9b05      	ldr	r3, [sp, #20]
    258c:	4926      	ldr	r1, [pc, #152]	; (2628 <am_hal_iom_i2c_cmd_run.part.1+0x208>)
    258e:	4827      	ldr	r0, [pc, #156]	; (262c <am_hal_iom_i2c_cmd_run.part.1+0x20c>)
    2590:	f003 021f 	and.w	r2, r3, #31
    2594:	f04f 0b01 	mov.w	fp, #1
    2598:	ea4f 03de 	mov.w	r3, lr, lsr #3
    259c:	f003 0e04 	and.w	lr, r3, #4
    25a0:	fa0b f302 	lsl.w	r3, fp, r2
    25a4:	4471      	add	r1, lr
    25a6:	461a      	mov	r2, r3
    25a8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    25ac:	f7ff fd7e 	bl	20ac <am_hal_flash_delay_status_change>
    //
    // Write the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    // Revert back the original settings
    *pui32SCLPadreg = ui32SCLPadregVal;
    25b0:	9902      	ldr	r1, [sp, #8]
                 AM_HAL_GPIO_RD_M(ui32IOMGPIO));

    //
    // Write the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    25b2:	f8c9 a000 	str.w	sl, [r9]
    //
    // Re-lock the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = 0;

    if (waitStatus != 1)
    25b6:	4558      	cmp	r0, fp
    //
    // Write the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    // Revert back the original settings
    *pui32SCLPadreg = ui32SCLPadregVal;
    25b8:	6029      	str	r1, [r5, #0]
    //
    // Re-lock the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = 0;
    25ba:	f8c9 7000 	str.w	r7, [r9]

    if (waitStatus != 1)
    25be:	d003      	beq.n	25c8 <am_hal_iom_i2c_cmd_run.part.1+0x1a8>
    {
        return AM_HAL_IOM_ERR_TIMEOUT;
    25c0:	4658      	mov	r0, fp
        // Write the complete command word to the IOM command register.
        //
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    }
    return ui32Status;
}
    25c2:	b009      	add	sp, #36	; 0x24
    25c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= (ui32Options & 0x5C00FF00);
    25c8:	9812      	ldr	r0, [sp, #72]	; 0x48
    25ca:	4d19      	ldr	r5, [pc, #100]	; (2630 <am_hal_iom_i2c_cmd_run.part.1+0x210>)
    25cc:	f020 4223 	bic.w	r2, r0, #2734686208	; 0xa3000000
    25d0:	9801      	ldr	r0, [sp, #4]
    25d2:	ea4f 4308 	mov.w	r3, r8, lsl #16
    25d6:	f002 21ff 	and.w	r1, r2, #4278255360	; 0xff00ff00
    if (ui32Status == AM_HAL_IOM_SUCCESS)
    {
        //
        // Write the complete command word to the IOM command register.
        //
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    25da:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    25de:	3404      	adds	r4, #4
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= (ui32Options & 0x5C00FF00);
    25e0:	401d      	ands	r5, r3
    25e2:	4301      	orrs	r1, r0
    if (ui32Status == AM_HAL_IOM_SUCCESS)
    {
        //
        // Write the complete command word to the IOM command register.
        //
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    25e4:	0322      	lsls	r2, r4, #12
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= (ui32Options & 0x5C00FF00);
    25e6:	4329      	orrs	r1, r5
    25e8:	b2f6      	uxtb	r6, r6
    25ea:	430e      	orrs	r6, r1
    if (ui32Status == AM_HAL_IOM_SUCCESS)
    {
        //
        // Write the complete command word to the IOM command register.
        //
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    25ec:	4638      	mov	r0, r7
    25ee:	f8c2 6110 	str.w	r6, [r2, #272]	; 0x110
    }
    return ui32Status;
}
    25f2:	b009      	add	sp, #36	; 0x24
    25f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    25f8:	2400      	movs	r4, #0
    25fa:	26ff      	movs	r6, #255	; 0xff
    25fc:	9403      	str	r4, [sp, #12]
    25fe:	46a6      	mov	lr, r4
        if ( g_I2CPads[index].module == ui32Module )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    2600:	46a3      	mov	fp, r4
    2602:	9405      	str	r4, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    2604:	9604      	str	r6, [sp, #16]
    2606:	e78b      	b.n	2520 <am_hal_iom_i2c_cmd_run.part.1+0x100>
    2608:	40010008 	.word	0x40010008
    260c:	40010000 	.word	0x40010000
    2610:	40010018 	.word	0x40010018
    2614:	40010028 	.word	0x40010028
    2618:	40010024 	.word	0x40010024
    261c:	40010030 	.word	0x40010030
    2620:	40010004 	.word	0x40010004
    2624:	40010040 	.word	0x40010040
    2628:	40010080 	.word	0x40010080
    262c:	100016c8 	.word	0x100016c8
    2630:	03ff0000 	.word	0x03ff0000
    2634:	40010060 	.word	0x40010060
    2638:	400100e0 	.word	0x400100e0

0000263c <am_hal_iom_i2c_read_nb.part.9>:
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_read_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    263c:	b5f0      	push	{r4, r5, r6, r7, lr}

    //
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    263e:	2806      	cmp	r0, #6
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_read_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    2640:	b083      	sub	sp, #12
    2642:	461d      	mov	r5, r3

    //
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    2644:	d02b      	beq.n	269e <am_hal_iom_i2c_read_nb.part.9+0x62>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    2646:	2bff      	cmp	r3, #255	; 0xff
    2648:	4604      	mov	r4, r0
    264a:	d904      	bls.n	2656 <am_hal_iom_i2c_read_nb.part.9+0x1a>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    264c:	492d      	ldr	r1, [pc, #180]	; (2704 <am_hal_iom_i2c_read_nb.part.9+0xc8>)
    264e:	2003      	movs	r0, #3
    2650:	5508      	strb	r0, [r1, r4]
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    }
    return ui32Status;
}
    2652:	b003      	add	sp, #12
    2654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2656:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    265a:	4e2b      	ldr	r6, [pc, #172]	; (2708 <am_hal_iom_i2c_read_nb.part.9+0xcc>)
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    265c:	4f2b      	ldr	r7, [pc, #172]	; (270c <am_hal_iom_i2c_read_nb.part.9+0xd0>)
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    265e:	3004      	adds	r0, #4
    2660:	4696      	mov	lr, r2
    2662:	0300      	lsls	r0, r0, #12

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    2664:	f04f 0c01 	mov.w	ip, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2668:	eb04 0284 	add.w	r2, r4, r4, lsl #2

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    266c:	f806 c004 	strb.w	ip, [r6, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2670:	0092      	lsls	r2, r2, #2
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2672:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2676:	f8c0 6208 	str.w	r6, [r0, #520]	; 0x208

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    267a:	18be      	adds	r6, r7, r2
    267c:	f04f 0c02 	mov.w	ip, #2
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2680:	9809      	ldr	r0, [sp, #36]	; 0x24

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    2682:	f8c6 e004 	str.w	lr, [r6, #4]
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2686:	2c05      	cmp	r4, #5
    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    2688:	60b3      	str	r3, [r6, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    268a:	6130      	str	r0, [r6, #16]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    268c:	f847 c002 	str.w	ip, [r7, r2]
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2690:	d829      	bhi.n	26e6 <am_hal_iom_i2c_read_nb.part.9+0xaa>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    if (ui32NumBytes == 0)
    2692:	bb63      	cbnz	r3, 26ee <am_hal_iom_i2c_read_nb.part.9+0xb2>
    {
        return AM_HAL_IOM_ERR_INVALID_PARAM;
    2694:	2003      	movs	r0, #3
    //
    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_READ, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    2696:	4b1b      	ldr	r3, [pc, #108]	; (2704 <am_hal_iom_i2c_read_nb.part.9+0xc8>)
    2698:	5518      	strb	r0, [r3, r4]
    }
    return ui32Status;
}
    269a:	b003      	add	sp, #12
    269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    269e:	9f08      	ldr	r7, [sp, #32]
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    26a0:	004c      	lsls	r4, r1, #1
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    26a2:	007b      	lsls	r3, r7, #1
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    26a4:	f044 0601 	orr.w	r6, r4, #1
    26a8:	f3c7 7400 	ubfx	r4, r7, #28, #1
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    26ac:	d413      	bmi.n	26d6 <am_hal_iom_i2c_read_nb.part.9+0x9a>
                                        (uint8_t *)pui32Data, 0, false,
                                        (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    26ae:	4629      	mov	r1, r5
    26b0:	9d08      	ldr	r5, [sp, #32]
    26b2:	2301      	movs	r3, #1
    26b4:	e88d 0018 	stmia.w	sp, {r3, r4}
    26b8:	b2f0      	uxtb	r0, r6
    26ba:	f3c5 2307 	ubfx	r3, r5, #8, #8
    26be:	f002 fd4b 	bl	5158 <am_hal_i2c_bit_bang_receive>
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    26c2:	4a13      	ldr	r2, [pc, #76]	; (2710 <am_hal_iom_i2c_read_nb.part.9+0xd4>)
    26c4:	4b0f      	ldr	r3, [pc, #60]	; (2704 <am_hal_iom_i2c_read_nb.part.9+0xc8>)
    26c6:	5c17      	ldrb	r7, [r2, r0]
        //
        // The I2C bit-bang interface is actually a blocking transfer, and it
        // doesn't trigger the interrupt handler, so we have to call the
        // callback function manually.
        //
        if ( pfnCallback )
    26c8:	9809      	ldr	r0, [sp, #36]	; 0x24
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    26ca:	719f      	strb	r7, [r3, #6]
        //
        // The I2C bit-bang interface is actually a blocking transfer, and it
        // doesn't trigger the interrupt handler, so we have to call the
        // callback function manually.
        //
        if ( pfnCallback )
    26cc:	b168      	cbz	r0, 26ea <am_hal_iom_i2c_read_nb.part.9+0xae>
        {
            pfnCallback();
    26ce:	4780      	blx	r0
        }

        return ui32Status;
    26d0:	4638      	mov	r0, r7
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    }
    return ui32Status;
}
    26d2:	b003      	add	sp, #12
    26d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    26d6:	2300      	movs	r3, #0
    26d8:	b2f0      	uxtb	r0, r6
    26da:	4629      	mov	r1, r5
    26dc:	e88d 0018 	stmia.w	sp, {r3, r4}
    26e0:	f002 fd3a 	bl	5158 <am_hal_i2c_bit_bang_receive>
    26e4:	e7ed      	b.n	26c2 <am_hal_iom_i2c_read_nb.part.9+0x86>
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    26e6:	4660      	mov	r0, ip
    26e8:	e7d5      	b.n	2696 <am_hal_iom_i2c_read_nb.part.9+0x5a>
        if ( pfnCallback )
        {
            pfnCallback();
        }

        return ui32Status;
    26ea:	4638      	mov	r0, r7
    26ec:	e7b1      	b.n	2652 <am_hal_iom_i2c_read_nb.part.9+0x16>
    26ee:	9d08      	ldr	r5, [sp, #32]
    26f0:	9500      	str	r5, [sp, #0]
    26f2:	460a      	mov	r2, r1
    26f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    26f8:	4621      	mov	r1, r4
    26fa:	f7ff fe91 	bl	2420 <am_hal_iom_i2c_cmd_run.part.1>
    //
    // Start the read transaction on the bus.
    //
    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_READ, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    26fe:	2800      	cmp	r0, #0
    2700:	d0a7      	beq.n	2652 <am_hal_iom_i2c_read_nb.part.9+0x16>
    2702:	e7c8      	b.n	2696 <am_hal_iom_i2c_read_nb.part.9+0x5a>
    2704:	10001180 	.word	0x10001180
    2708:	10001188 	.word	0x10001188
    270c:	100016e0 	.word	0x100016e0
    2710:	0000641c 	.word	0x0000641c

00002714 <am_hal_iom_i2c_write_nb.part.8>:
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    2714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    //
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    2718:	2806      	cmp	r0, #6
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    271a:	b084      	sub	sp, #16
    271c:	460e      	mov	r6, r1

    //
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    271e:	d024      	beq.n	276a <am_hal_iom_i2c_write_nb.part.8+0x56>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    2720:	2bff      	cmp	r3, #255	; 0xff
    2722:	4604      	mov	r4, r0
    2724:	d905      	bls.n	2732 <am_hal_iom_i2c_write_nb.part.8+0x1e>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    2726:	4e6a      	ldr	r6, [pc, #424]	; (28d0 <am_hal_iom_i2c_write_nb.part.8+0x1bc>)
    2728:	2003      	movs	r0, #3
    272a:	5530      	strb	r0, [r6, r4]
        {
            g_iom_error_status[ui32Module] = ui32Status;
        }
    }
    return ui32Status;
}
    272c:	b004      	add	sp, #16
    272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2732:	f500 25a0 	add.w	r5, r0, #327680	; 0x50000
    2736:	3504      	adds	r5, #4
    2738:	032d      	lsls	r5, r5, #12
    273a:	4617      	mov	r7, r2
    273c:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
                        ui32MaxFifoSize);

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    g_bIomBusy[ui32Module] = true;
    2740:	4964      	ldr	r1, [pc, #400]	; (28d4 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2742:	f012 0f08 	tst.w	r2, #8
                        ui32MaxFifoSize);

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    g_bIomBusy[ui32Module] = true;
    2746:	f04f 0001 	mov.w	r0, #1

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    274a:	f240 72ff 	movw	r2, #2047	; 0x7ff
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    274e:	bf0c      	ite	eq
    2750:	f04f 0880 	moveq.w	r8, #128	; 0x80
    2754:	f04f 0840 	movne.w	r8, #64	; 0x40
    uint32_t ui32Index;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2758:	2c05      	cmp	r4, #5
                        ui32MaxFifoSize);

    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    g_bIomBusy[ui32Module] = true;
    275a:	5508      	strb	r0, [r1, r4]

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    275c:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
    uint32_t ui32Index;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2760:	d92b      	bls.n	27ba <am_hal_iom_i2c_write_nb.part.8+0xa6>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2762:	2000      	movs	r0, #0
        {
            g_iom_error_status[ui32Module] = ui32Status;
        }
    }
    return ui32Status;
}
    2764:	b004      	add	sp, #16
    2766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    276a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    276c:	0048      	lsls	r0, r1, #1
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    276e:	0061      	lsls	r1, r4, #1
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2770:	f3c4 7500 	ubfx	r5, r4, #28, #1
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
    2774:	d415      	bmi.n	27a2 <am_hal_iom_i2c_write_nb.part.8+0x8e>
                                     (uint8_t *)pui32Data, 0, false,
                                     (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2776:	2401      	movs	r4, #1
    2778:	e88d 0030 	stmia.w	sp, {r4, r5}
    277c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    277e:	4619      	mov	r1, r3
    2780:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2784:	f3c5 2307 	ubfx	r3, r5, #8, #8
    2788:	f003 f93e 	bl	5a08 <am_hal_i2c_bit_bang_send>
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    278c:	4952      	ldr	r1, [pc, #328]	; (28d8 <am_hal_iom_i2c_write_nb.part.8+0x1c4>)
    278e:	4a50      	ldr	r2, [pc, #320]	; (28d0 <am_hal_iom_i2c_write_nb.part.8+0x1bc>)
        //
        // The I2C bit-bang interface is actually a blocking transfer, and it
        // doesn't trigger the interrupt handler, so we have to call the
        // callback function manually.
        //
        if ( pfnCallback )
    2790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    2792:	5c0f      	ldrb	r7, [r1, r0]
    2794:	7197      	strb	r7, [r2, #6]
        //
        // The I2C bit-bang interface is actually a blocking transfer, and it
        // doesn't trigger the interrupt handler, so we have to call the
        // callback function manually.
        //
        if ( pfnCallback )
    2796:	b173      	cbz	r3, 27b6 <am_hal_iom_i2c_write_nb.part.8+0xa2>
        {
            pfnCallback();
    2798:	4798      	blx	r3
        }
        return ui32Status;
    279a:	4638      	mov	r0, r7
        {
            g_iom_error_status[ui32Module] = ui32Status;
        }
    }
    return ui32Status;
}
    279c:	b004      	add	sp, #16
    279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
        // Reset the error status for non-blocking transfer
        g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
        if ( ui32Options & AM_HAL_IOM_RAW )
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    27a2:	2400      	movs	r4, #0
    27a4:	4619      	mov	r1, r3
    27a6:	e88d 0030 	stmia.w	sp, {r4, r5}
    27aa:	4623      	mov	r3, r4
    27ac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    27b0:	f003 f92a 	bl	5a08 <am_hal_i2c_bit_bang_send>
    27b4:	e7ea      	b.n	278c <am_hal_iom_i2c_write_nb.part.8+0x78>
        //
        if ( pfnCallback )
        {
            pfnCallback();
        }
        return ui32Status;
    27b6:	4638      	mov	r0, r7
    27b8:	e7b8      	b.n	272c <am_hal_iom_i2c_write_nb.part.8+0x18>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    27ba:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    27be:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    27c2:	f010 0f08 	tst.w	r0, #8
    27c6:	bf14      	ite	ne
    27c8:	2040      	movne	r0, #64	; 0x40
    27ca:	2080      	moveq	r0, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    27cc:	1a42      	subs	r2, r0, r1
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);

    //
    // Figure out how many bytes we can write to the FIFO immediately.
    //
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    27ce:	4598      	cmp	r8, r3
    27d0:	bf28      	it	cs
    27d2:	4698      	movcs	r8, r3
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    27d4:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    27d8:	4540      	cmp	r0, r8
    27da:	d370      	bcc.n	28be <am_hal_iom_i2c_write_nb.part.8+0x1aa>

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    27dc:	f1b8 0f00 	cmp.w	r8, #0
    27e0:	d0bf      	beq.n	2762 <am_hal_iom_i2c_write_nb.part.8+0x4e>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    27e2:	463a      	mov	r2, r7
    27e4:	43f9      	mvns	r1, r7
    27e6:	f852 0b04 	ldr.w	r0, [r2], #4
    27ea:	6028      	str	r0, [r5, #0]
    27ec:	4439      	add	r1, r7

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    27ee:	1bd0      	subs	r0, r2, r7
    27f0:	4441      	add	r1, r8
    27f2:	4540      	cmp	r0, r8
    27f4:	f3c1 0182 	ubfx	r1, r1, #2, #3
    27f8:	d241      	bcs.n	287e <am_hal_iom_i2c_write_nb.part.8+0x16a>
    27fa:	b319      	cbz	r1, 2844 <am_hal_iom_i2c_write_nb.part.8+0x130>
    27fc:	2901      	cmp	r1, #1
    27fe:	d01b      	beq.n	2838 <am_hal_iom_i2c_write_nb.part.8+0x124>
    2800:	2902      	cmp	r1, #2
    2802:	d016      	beq.n	2832 <am_hal_iom_i2c_write_nb.part.8+0x11e>
    2804:	2903      	cmp	r1, #3
    2806:	d011      	beq.n	282c <am_hal_iom_i2c_write_nb.part.8+0x118>
    2808:	2904      	cmp	r1, #4
    280a:	d00c      	beq.n	2826 <am_hal_iom_i2c_write_nb.part.8+0x112>
    280c:	2905      	cmp	r1, #5
    280e:	d007      	beq.n	2820 <am_hal_iom_i2c_write_nb.part.8+0x10c>
    2810:	2906      	cmp	r1, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2812:	bf1c      	itt	ne
    2814:	f852 1b04 	ldrne.w	r1, [r2], #4
    2818:	6029      	strne	r1, [r5, #0]
    281a:	f852 0b04 	ldr.w	r0, [r2], #4
    281e:	6028      	str	r0, [r5, #0]
    2820:	f852 1b04 	ldr.w	r1, [r2], #4
    2824:	6029      	str	r1, [r5, #0]
    2826:	f852 0b04 	ldr.w	r0, [r2], #4
    282a:	6028      	str	r0, [r5, #0]
    282c:	f852 1b04 	ldr.w	r1, [r2], #4
    2830:	6029      	str	r1, [r5, #0]
    2832:	f852 0b04 	ldr.w	r0, [r2], #4
    2836:	6028      	str	r0, [r5, #0]
    2838:	f852 1b04 	ldr.w	r1, [r2], #4
    283c:	6029      	str	r1, [r5, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    283e:	1bd0      	subs	r0, r2, r7
    2840:	4540      	cmp	r0, r8
    2842:	d21c      	bcs.n	287e <am_hal_iom_i2c_write_nb.part.8+0x16a>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2844:	4694      	mov	ip, r2
    2846:	3220      	adds	r2, #32
    2848:	f85c 1b04 	ldr.w	r1, [ip], #4
    284c:	6029      	str	r1, [r5, #0]
    284e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    2852:	6028      	str	r0, [r5, #0]
    2854:	f8dc 1004 	ldr.w	r1, [ip, #4]
    2858:	6029      	str	r1, [r5, #0]
    285a:	f852 0c14 	ldr.w	r0, [r2, #-20]
    285e:	6028      	str	r0, [r5, #0]
    2860:	f852 1c10 	ldr.w	r1, [r2, #-16]
    2864:	6029      	str	r1, [r5, #0]
    2866:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    286a:	6028      	str	r0, [r5, #0]
    286c:	f852 1c08 	ldr.w	r1, [r2, #-8]
    2870:	6029      	str	r1, [r5, #0]
    2872:	f852 0c04 	ldr.w	r0, [r2, #-4]
    2876:	6028      	str	r0, [r5, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2878:	1bd1      	subs	r1, r2, r7
    287a:	4541      	cmp	r1, r8
    287c:	d3e2      	bcc.n	2844 <am_hal_iom_i2c_write_nb.part.8+0x130>
    if ( am_hal_iom_fifo_write(ui32Module, pui32Data, ui32TransferSize) > 0 )
    {
        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    287e:	4817      	ldr	r0, [pc, #92]	; (28dc <am_hal_iom_i2c_write_nb.part.8+0x1c8>)
    2880:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    2884:	00aa      	lsls	r2, r5, #2
    2886:	1881      	adds	r1, r0, r2
    2888:	2501      	movs	r5, #1
        //
        // Update the pointer and the byte counter based on the portion of the
        // transfer we just sent to the fifo.
        //
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    288a:	f028 0c03 	bic.w	ip, r8, #3
    if ( am_hal_iom_fifo_write(ui32Module, pui32Data, ui32TransferSize) > 0 )
    {
        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    288e:	5085      	str	r5, [r0, r2]
        //
        // Update the pointer and the byte counter based on the portion of the
        // transfer we just sent to the fifo.
        //
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2890:	4467      	add	r7, ip

        //
        // Update the pointer and the byte counter based on the portion of the
        // transfer we just sent to the fifo.
        //
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    2892:	ebc8 0003 	rsb	r0, r8, r3
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2898:	610a      	str	r2, [r1, #16]

        //
        // Update the pointer and the byte counter based on the portion of the
        // transfer we just sent to the fifo.
        //
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    289a:	6088      	str	r0, [r1, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    289c:	604f      	str	r7, [r1, #4]
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    if (ui32NumBytes == 0)
    289e:	b91b      	cbnz	r3, 28a8 <am_hal_iom_i2c_write_nb.part.8+0x194>
    28a0:	2003      	movs	r0, #3
        //
        ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32BusAddress,
                               ui32NumBytes, ui32Options);
        if (ui32Status != AM_HAL_IOM_SUCCESS)
        {
            g_iom_error_status[ui32Module] = ui32Status;
    28a2:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <am_hal_iom_i2c_write_nb.part.8+0x1bc>)
    28a4:	5518      	strb	r0, [r3, r4]
    28a6:	e741      	b.n	272c <am_hal_iom_i2c_write_nb.part.8+0x18>
    28a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    28aa:	9700      	str	r7, [sp, #0]
    28ac:	4632      	mov	r2, r6
    28ae:	4621      	mov	r1, r4
    28b0:	2000      	movs	r0, #0
    28b2:	f7ff fdb5 	bl	2420 <am_hal_iom_i2c_cmd_run.part.1>
        //
        // Start the write on the bus.
        //
        ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32BusAddress,
                               ui32NumBytes, ui32Options);
        if (ui32Status != AM_HAL_IOM_SUCCESS)
    28b6:	2800      	cmp	r0, #0
    28b8:	f43f af53 	beq.w	2762 <am_hal_iom_i2c_write_nb.part.8+0x4e>
    28bc:	e7f1      	b.n	28a2 <am_hal_iom_i2c_write_nb.part.8+0x18e>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    28be:	4a08      	ldr	r2, [pc, #32]	; (28e0 <am_hal_iom_i2c_write_nb.part.8+0x1cc>)
    28c0:	4808      	ldr	r0, [pc, #32]	; (28e4 <am_hal_iom_i2c_write_nb.part.8+0x1d0>)
    28c2:	9303      	str	r3, [sp, #12]
    28c4:	f640 7107 	movw	r1, #3847	; 0xf07
    28c8:	f7ff fbe8 	bl	209c <am_hal_debug_error>
    28cc:	9b03      	ldr	r3, [sp, #12]
    28ce:	e788      	b.n	27e2 <am_hal_iom_i2c_write_nb.part.8+0xce>
    28d0:	10001180 	.word	0x10001180
    28d4:	10001188 	.word	0x10001188
    28d8:	0000641c 	.word	0x0000641c
    28dc:	100016e0 	.word	0x100016e0
    28e0:	000062d8 	.word	0x000062d8
    28e4:	0000630c 	.word	0x0000630c

000028e8 <am_hal_iom_pwrctrl_enable>:
//
//*****************************************************************************
void
am_hal_iom_pwrctrl_enable(uint32_t ui32Module)
{
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    28e8:	2805      	cmp	r0, #5
//! @return None.
//
//*****************************************************************************
void
am_hal_iom_pwrctrl_enable(uint32_t ui32Module)
{
    28ea:	b510      	push	{r4, lr}
    28ec:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    28ee:	d905      	bls.n	28fc <am_hal_iom_pwrctrl_enable+0x14>
    28f0:	4a05      	ldr	r2, [pc, #20]	; (2908 <am_hal_iom_pwrctrl_enable+0x20>)
    28f2:	4806      	ldr	r0, [pc, #24]	; (290c <am_hal_iom_pwrctrl_enable+0x24>)
    28f4:	f240 21d2 	movw	r1, #722	; 0x2d2
    28f8:	f7ff fbd0 	bl	209c <am_hal_debug_error>
                            "Trying to enable an IOM module that doesn't exist.");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    28fc:	2002      	movs	r0, #2
    28fe:	40a0      	lsls	r0, r4
}
    2900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
am_hal_iom_pwrctrl_enable(uint32_t ui32Module)
{
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
                            "Trying to enable an IOM module that doesn't exist.");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2904:	f002 b852 	b.w	49ac <am_hal_pwrctrl_periph_enable>
    2908:	00006320 	.word	0x00006320
    290c:	0000630c 	.word	0x0000630c

00002910 <am_hal_iom_enable>:
//
//*****************************************************************************
void
am_hal_iom_enable(uint32_t ui32Module)
{
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    2910:	2805      	cmp	r0, #5
    2912:	d80f      	bhi.n	2934 <am_hal_iom_enable+0x24>
    {
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2914:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    2918:	3304      	adds	r3, #4
    291a:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    291c:	4906      	ldr	r1, [pc, #24]	; (2938 <am_hal_iom_enable+0x28>)
void
am_hal_iom_enable(uint32_t ui32Module)
{
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    {
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    291e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
//! @return None.
//
//*****************************************************************************
void
am_hal_iom_enable(uint32_t ui32Module)
{
    2922:	b410      	push	{r4}
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    {
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2924:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
    2928:	2400      	movs	r4, #0
void
am_hal_iom_enable(uint32_t ui32Module)
{
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    {
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    292a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    292e:	540c      	strb	r4, [r1, r0]
    }
}
    2930:	f85d 4b04 	ldr.w	r4, [sp], #4
    2934:	4770      	bx	lr
    2936:	bf00      	nop
    2938:	10001188 	.word	0x10001188

0000293c <am_hal_iom_config>:
    // Start by checking the interface mode (I2C or SPI), and writing it to the
    // configuration word.
    //
    ui32Config = psConfig->ui32InterfaceMode;

    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    293c:	2805      	cmp	r0, #5
    293e:	f200 80ec 	bhi.w	2b1a <am_hal_iom_config+0x1de>
//! @return None.
//
//*****************************************************************************
void
am_hal_iom_config(uint32_t ui32Module, const am_hal_iom_config_t *psConfig)
{
    2942:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //
    // Check the SPI format, and OR in the bits for SPHA (clock phase) and SPOL
    // (polarity). These shouldn't have any effect in I2C mode, so it should be
    // ok to write them without checking exactly which mode we're in.
    //
    if ( psConfig->bSPHA )
    2946:	7a0d      	ldrb	r5, [r1, #8]

    //
    // Start by checking the interface mode (I2C or SPI), and writing it to the
    // configuration word.
    //
    ui32Config = psConfig->ui32InterfaceMode;
    2948:	680b      	ldr	r3, [r1, #0]
    //
    // Check the SPI format, and OR in the bits for SPHA (clock phase) and SPOL
    // (polarity). These shouldn't have any effect in I2C mode, so it should be
    // ok to write them without checking exactly which mode we're in.
    //
    if ( psConfig->bSPHA )
    294a:	b10d      	cbz	r5, 2950 <am_hal_iom_config+0x14>
    {
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    294c:	f043 0304 	orr.w	r3, r3, #4
    }

    if ( psConfig->bSPOL )
    2950:	7a4a      	ldrb	r2, [r1, #9]
    2952:	b10a      	cbz	r2, 2958 <am_hal_iom_config+0x1c>
    {
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    2954:	f043 0302 	orr.w	r3, r3, #2
    // For all I2C frequencies and SPI frequencies below 16 MHz, the STARTRD
    // field should be set to 0 to minimize the potential of the IO transfer
    // holding off a bus access to the FIFO. For SPI frequencies of 16 MHz
    // or 24 MHz, the STARTRD field must be set to a value of 2 to insure
    // enough time for the IO preread.
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    2958:	684c      	ldr	r4, [r1, #4]
    295a:	4a8d      	ldr	r2, [pc, #564]	; (2b90 <am_hal_iom_config+0x254>)

    //
    // Write the resulting configuration word to the IO master CFG register for
    // the module number we were provided.
    //
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    295c:	f500 26a0 	add.w	r6, r0, #327680	; 0x50000
    2960:	3604      	adds	r6, #4
    // For all I2C frequencies and SPI frequencies below 16 MHz, the STARTRD
    // field should be set to 0 to minimize the potential of the IO transfer
    // holding off a bus access to the FIFO. For SPI frequencies of 16 MHz
    // or 24 MHz, the STARTRD field must be set to a value of 2 to insure
    // enough time for the IO preread.
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    2962:	4294      	cmp	r4, r2

    //
    // Write the resulting configuration word to the IO master CFG register for
    // the module number we were provided.
    //
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    2964:	ea4f 3406 	mov.w	r4, r6, lsl #12
    // holding off a bus access to the FIFO. For SPI frequencies of 16 MHz
    // or 24 MHz, the STARTRD field must be set to a value of 2 to insure
    // enough time for the IO preread.
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    {
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
    2968:	bf88      	it	hi
    296a:	f043 0320 	orrhi.w	r3, r3, #32

    //
    // Write the resulting configuration word to the IO master CFG register for
    // the module number we were provided.
    //
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    296e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
#elif   (AM_ASSERT_INVALID_THRESHOLD == 0)
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    2972:	7a8f      	ldrb	r7, [r1, #10]
#if (AM_ASSERT_INVALID_THRESHOLD == 0)
static uint8_t check_iom_threshold(const uint8_t iom_threshold)
{
    uint8_t corrected_threshold = iom_threshold;

    if ( corrected_threshold < MIN_RW_THRESHOLD )
    2974:	2f03      	cmp	r7, #3
    2976:	f240 80c8 	bls.w	2b0a <am_hal_iom_config+0x1ce>
    {
        corrected_threshold = MIN_RW_THRESHOLD;
    }

    if ( corrected_threshold > MAX_RW_THRESHOLD )
    297a:	2f7c      	cmp	r7, #124	; 0x7c
    297c:	bf88      	it	hi
    297e:	f44f 42f8 	movhi.w	r2, #31744	; 0x7c00
    2982:	f240 8101 	bls.w	2b88 <am_hal_iom_config+0x24c>
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
#elif   (AM_ASSERT_INVALID_THRESHOLD == 0)
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    2986:	7acb      	ldrb	r3, [r1, #11]
#if (AM_ASSERT_INVALID_THRESHOLD == 0)
static uint8_t check_iom_threshold(const uint8_t iom_threshold)
{
    uint8_t corrected_threshold = iom_threshold;

    if ( corrected_threshold < MIN_RW_THRESHOLD )
    2988:	2b03      	cmp	r3, #3
    298a:	f240 80c4 	bls.w	2b16 <am_hal_iom_config+0x1da>
    298e:	2b7c      	cmp	r3, #124	; 0x7c
    2990:	bf28      	it	cs
    2992:	237c      	movcs	r3, #124	; 0x7c
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
#elif   (AM_ASSERT_INVALID_THRESHOLD == 0)
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    2994:	4313      	orrs	r3, r2

    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
#elif   (AM_ASSERT_INVALID_THRESHOLD == 0)
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    2996:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

    // Apply I2C clock stretching workaround if B2 silicon and IOM 1,2,3, or 5
    // Note: Only I2C clock speeds of AM_HAL_IOM_800KHZ, AM_HAL_IOM_400KHZ,
    // AM_HAL_IOM_200KHZ, and AM_HAL_IOM_100KHZ are allowed.  Other values will
    // result in the default of AM_HAL_IOM_100KHZ.
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) && 
    299a:	f030 0304 	bics.w	r3, r0, #4
    299e:	d005      	beq.n	29ac <am_hal_iom_config+0x70>
isRevB2(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    29a0:	4e7c      	ldr	r6, [pc, #496]	; (2b94 <am_hal_iom_config+0x258>)
    29a2:	6837      	ldr	r7, [r6, #0]
    29a4:	b2fa      	uxtb	r2, r7
    29a6:	2a22      	cmp	r2, #34	; 0x22
    29a8:	f000 80bc 	beq.w	2b24 <am_hal_iom_config+0x1e8>
      //  is being selected.
      // If SPHA=0 the low period must be 60%. If SPHA=1 high period must be 60%.
      // Note that the predetermined frequency parameters use the formula
      //  lowper = (totper-1)/2, which results in a 60% low period.
      //
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    29ac:	f8d1 e004 	ldr.w	lr, [r1, #4]
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
    29b0:	f1be 0f00 	cmp.w	lr, #0
    29b4:	f000 8099 	beq.w	2aea <am_hal_iom_config+0x1ae>
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    29b8:	4e77      	ldr	r6, [pc, #476]	; (2b98 <am_hal_iom_config+0x25c>)
    29ba:	fbb6 f7fe 	udiv	r7, r6, lr
    29be:	fb0e f207 	mul.w	r2, lr, r7
    29c2:	f1c2 7937 	rsb	r9, r2, #47972352	; 0x2dc0000
    29c6:	f509 4ad8 	add.w	sl, r9, #27648	; 0x6c00
    29ca:	f1ba 0f00 	cmp.w	sl, #0
    29ce:	bf18      	it	ne
    29d0:	3701      	addne	r7, #1

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    29d2:	427b      	negs	r3, r7
    29d4:	403b      	ands	r3, r7
    29d6:	fab3 f683 	clz	r6, r3
    29da:	f1c6 031f 	rsb	r3, r6, #31
    29de:	2b06      	cmp	r3, #6
    29e0:	bfa8      	it	ge
    29e2:	2306      	movge	r3, #6
        i32N = 6;
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    29e4:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    29e8:	f240 8098 	bls.w	2b1c <am_hal_iom_config+0x1e0>
    29ec:	4e6b      	ldr	r6, [pc, #428]	; (2b9c <am_hal_iom_config+0x260>)
    29ee:	f5ae 0b74 	sub.w	fp, lr, #15990784	; 0xf40000
    29f2:	f5ab 5c10 	sub.w	ip, fp, #9216	; 0x2400
    29f6:	45b4      	cmp	ip, r6
    29f8:	bf8b      	itete	hi
    29fa:	f04f 0800 	movhi.w	r8, #0
    29fe:	f44f 6800 	movls.w	r8, #2048	; 0x800
    2a02:	2601      	movhi	r6, #1
    2a04:	2603      	movls	r6, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    2a06:	fa06 f903 	lsl.w	r9, r6, r3
    ui32TotPer = i32Div / ui32Denom;
    2a0a:	fbb7 f2f9 	udiv	r2, r7, r9
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    2a0e:	fb09 7a12 	mls	sl, r9, r2, r7
    2a12:	f1ba 0f00 	cmp.w	sl, #0
    2a16:	bf18      	it	ne
    2a18:	3201      	addne	r2, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    2a1a:	fab2 fb82 	clz	fp, r2
    2a1e:	f1cb 0c1f 	rsb	ip, fp, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    2a22:	f1bc 0f07 	cmp.w	ip, #7
    2a26:	f240 809b 	bls.w	2b60 <am_hal_iom_config+0x224>
    2a2a:	3b07      	subs	r3, #7
    2a2c:	4463      	add	r3, ip
    ui32Fsel++;
    2a2e:	f103 0901 	add.w	r9, r3, #1

    if ( ui32Fsel > 7 )
    2a32:	f1b9 0f07 	cmp.w	r9, #7
    2a36:	d858      	bhi.n	2aea <am_hal_iom_config+0x1ae>
    }

    if ( ui32v1 > 7 )
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    2a38:	f1ac 0b07 	sub.w	fp, ip, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    2a3c:	f04f 0a01 	mov.w	sl, #1
    2a40:	fa0a fc0b 	lsl.w	ip, sl, fp
    2a44:	f10c 3aff 	add.w	sl, ip, #4294967295
    2a48:	ea0a 0c02 	and.w	ip, sl, r2
    }

    if ( ui32v1 > 7 )
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    2a4c:	fa22 f20b 	lsr.w	r2, r2, fp
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2a50:	f8df b16c 	ldr.w	fp, [pc, #364]	; 2bc0 <am_hal_iom_config+0x284>

    if ( ui32v1 > 7 )
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    2a54:	f1bc 0f00 	cmp.w	ip, #0
    2a58:	bf18      	it	ne
    2a5a:	3201      	addne	r2, #1
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2a5c:	45de      	cmp	lr, fp
    2a5e:	f200 8086 	bhi.w	2b6e <am_hal_iom_config+0x232>
    2a62:	f04f 0e01 	mov.w	lr, #1
    2a66:	fa0e fa03 	lsl.w	sl, lr, r3
    2a6a:	4557      	cmp	r7, sl
    2a6c:	d07f      	beq.n	2b6e <am_hal_iom_config+0x232>
    2a6e:	f102 3eff 	add.w	lr, r2, #4294967295
    2a72:	4694      	mov	ip, r2
    2a74:	f44f 5780 	mov.w	r7, #4096	; 0x1000

    if (ui32Phase == 1)
    2a78:	2d00      	cmp	r5, #0
    2a7a:	d17e      	bne.n	2b7a <am_hal_iom_config+0x23e>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    2a7c:	ea4f 025e 	mov.w	r2, lr, lsr #1
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2a80:	409e      	lsls	r6, r3
    2a82:	fb0c f606 	mul.w	r6, ip, r6
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2a86:	f8df b110 	ldr.w	fp, [pc, #272]	; 2b98 <am_hal_iom_config+0x25c>
    2a8a:	fbbb f3f6 	udiv	r3, fp, r6
    2a8e:	fb06 fa03 	mul.w	sl, r6, r3
    2a92:	f1ca 7c37 	rsb	ip, sl, #47972352	; 0x2dc0000
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    }

    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2a96:	ea4f 2509 	mov.w	r5, r9, lsl #8
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2a9a:	f50c 4bd8 	add.w	fp, ip, #27648	; 0x6c00
    2a9e:	0876      	lsrs	r6, r6, #1
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
    2aa0:	f8df a120 	ldr.w	sl, [pc, #288]	; 2bc4 <am_hal_iom_config+0x288>
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2aa4:	455e      	cmp	r6, fp
    2aa6:	bf38      	it	cc
    2aa8:	3301      	addcc	r3, #1
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    }

    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2aaa:	f405 69e0 	and.w	r9, r5, #1792	; 0x700
    2aae:	ea49 0608 	orr.w	r6, r9, r8
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
    2ab2:	fbaa bc03 	umull	fp, ip, sl, r3
    2ab6:	4d3a      	ldr	r5, [pc, #232]	; (2ba0 <am_hal_iom_config+0x264>)
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    }

    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2ab8:	433e      	orrs	r6, r7
    2aba:	0412      	lsls	r2, r2, #16
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
    2abc:	ea4f 471c 	mov.w	r7, ip, lsr #16
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    }

    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2ac0:	ea46 680e 	orr.w	r8, r6, lr, lsl #24
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
    2ac4:	fb05 3317 	mls	r3, r5, r7, r3
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    }

    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2ac8:	f402 0e7f 	and.w	lr, r2, #16711680	; 0xff0000
    2acc:	ea48 060e 	orr.w	r6, r8, lr
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
    2ad0:	b91b      	cbnz	r3, 2ada <am_hal_iom_config+0x19e>
// A power of 2?
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    2ad2:	b117      	cbz	r7, 2ada <am_hal_iom_config+0x19e>
    2ad4:	1e7d      	subs	r5, r7, #1
    2ad6:	423d      	tst	r5, r7
    2ad8:	d03f      	beq.n	2b5a <am_hal_iom_config+0x21e>
      //  is being selected.
      // If SPHA=0 the low period must be 60%. If SPHA=1 high period must be 60%.
      // Note that the predetermined frequency parameters use the formula
      //  lowper = (totper-1)/2, which results in a 60% low period.
      //
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    2ada:	f04f 0b00 	mov.w	fp, #0
    2ade:	ea4b 0206 	orr.w	r2, fp, r6
    2ae2:	4617      	mov	r7, r2
                                               psConfig->bSPHA );
    }

    if ( ui32ClkCfg )
    2ae4:	b10a      	cbz	r2, 2aea <am_hal_iom_config+0x1ae>
    {
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
    2ae6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    2aea:	4688      	mov	r8, r1
    2aec:	4604      	mov	r4, r0

    //
    // Compute the status timeout value.
    //
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
      IOM_OVERHEAD_FACTOR * (am_hal_clkgen_sysclk_get() / psConfig->ui32ClockFrequency);
    2aee:	f7ff fabb 	bl	2068 <am_hal_clkgen_sysclk_get>
    }

    //
    // Compute the status timeout value.
    //
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    2af2:	4f2c      	ldr	r7, [pc, #176]	; (2ba4 <am_hal_iom_config+0x268>)
    2af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2af8:	fbb0 f0f1 	udiv	r0, r0, r1
    2afc:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    2b00:	0215      	lsls	r5, r2, #8
    2b02:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    2b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
#elif   (AM_ASSERT_INVALID_THRESHOLD == 0)
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    2b0a:	7acb      	ldrb	r3, [r1, #11]
#if (AM_ASSERT_INVALID_THRESHOLD == 0)
static uint8_t check_iom_threshold(const uint8_t iom_threshold)
{
    uint8_t corrected_threshold = iom_threshold;

    if ( corrected_threshold < MIN_RW_THRESHOLD )
    2b0c:	2b03      	cmp	r3, #3
    2b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2b12:	f63f af3c 	bhi.w	298e <am_hal_iom_config+0x52>
    2b16:	2304      	movs	r3, #4
    2b18:	e73c      	b.n	2994 <am_hal_iom_config+0x58>
    2b1a:	4770      	bx	lr
        i32N = 6;
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    2b1c:	f44f 6800 	mov.w	r8, #2048	; 0x800
    2b20:	2603      	movs	r6, #3
    2b22:	e770      	b.n	2a06 <am_hal_iom_config+0xca>
    // Apply I2C clock stretching workaround if B2 silicon and IOM 1,2,3, or 5
    // Note: Only I2C clock speeds of AM_HAL_IOM_800KHZ, AM_HAL_IOM_400KHZ,
    // AM_HAL_IOM_200KHZ, and AM_HAL_IOM_100KHZ are allowed.  Other values will
    // result in the default of AM_HAL_IOM_100KHZ.
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) && 
			isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    2b24:	680b      	ldr	r3, [r1, #0]
    2b26:	2b00      	cmp	r3, #0
    2b28:	f47f af40 	bne.w	29ac <am_hal_iom_config+0x70>
    {
      // Set SPHA field to 1 on B2 silicon to enable the feature;
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    2b2c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
uint64_t iom_get_i2c_workaround_clock_cfg(uint32_t ui32FreqHz)
{
  uint32_t      ui32Fsel;

  // Only allow certain SCL frequencies for clock stretching devices.
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2b30:	4a1d      	ldr	r2, [pc, #116]	; (2ba8 <am_hal_iom_config+0x26c>)
    // result in the default of AM_HAL_IOM_100KHZ.
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) && 
			isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    {
      // Set SPHA field to 1 on B2 silicon to enable the feature;
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    2b32:	f043 0504 	orr.w	r5, r3, #4
    2b36:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
    2b3a:	684d      	ldr	r5, [r1, #4]
uint64_t iom_get_i2c_workaround_clock_cfg(uint32_t ui32FreqHz)
{
  uint32_t      ui32Fsel;

  // Only allow certain SCL frequencies for clock stretching devices.
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2b3c:	4295      	cmp	r5, r2
    2b3e:	d01f      	beq.n	2b80 <am_hal_iom_config+0x244>
  {
    ui32Fsel = 2;
  }
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    2b40:	4e1a      	ldr	r6, [pc, #104]	; (2bac <am_hal_iom_config+0x270>)
    2b42:	42b5      	cmp	r5, r6
    2b44:	d01e      	beq.n	2b84 <am_hal_iom_config+0x248>
  {
    ui32Fsel = 3;
  }
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
    2b46:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <am_hal_iom_config+0x274>)
    2b48:	4f1a      	ldr	r7, [pc, #104]	; (2bb4 <am_hal_iom_config+0x278>)
    2b4a:	f102 59e8 	add.w	r9, r2, #486539264	; 0x1d000000
    2b4e:	f509 3af0 	add.w	sl, r9, #122880	; 0x1e000
    2b52:	429d      	cmp	r5, r3
    2b54:	bf18      	it	ne
    2b56:	4657      	movne	r7, sl
    2b58:	e7c5      	b.n	2ae6 <am_hal_iom_config+0x1aa>
            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);

            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
    2b5a:	f449 6600 	orr.w	r6, r9, #2048	; 0x800
    2b5e:	e7bc      	b.n	2ada <am_hal_iom_config+0x19e>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2b60:	f8df b05c 	ldr.w	fp, [pc, #92]	; 2bc0 <am_hal_iom_config+0x284>
    2b64:	45de      	cmp	lr, fp
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    ui32TotPer = i32Div / ui32Denom;
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    ui32Fsel++;
    2b66:	f103 0901 	add.w	r9, r3, #1
        ui32TotPer = ui32TotPer>>(ui32v1-7);
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2b6a:	f67f af7a 	bls.w	2a62 <am_hal_iom_config+0x126>
    2b6e:	f102 3eff 	add.w	lr, r2, #4294967295
    2b72:	f04f 0c01 	mov.w	ip, #1
    2b76:	2700      	movs	r7, #0
    2b78:	e77e      	b.n	2a78 <am_hal_iom_config+0x13c>

    if (ui32Phase == 1)
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    2b7a:	1e95      	subs	r5, r2, #2
    2b7c:	086a      	lsrs	r2, r5, #1
    2b7e:	e77f      	b.n	2a80 <am_hal_iom_config+0x144>
uint64_t iom_get_i2c_workaround_clock_cfg(uint32_t ui32FreqHz)
{
  uint32_t      ui32Fsel;

  // Only allow certain SCL frequencies for clock stretching devices.
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2b80:	4f0d      	ldr	r7, [pc, #52]	; (2bb8 <am_hal_iom_config+0x27c>)
    2b82:	e7b0      	b.n	2ae6 <am_hal_iom_config+0x1aa>
  {
    ui32Fsel = 2;
  }
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    2b84:	4f0d      	ldr	r7, [pc, #52]	; (2bbc <am_hal_iom_config+0x280>)
    2b86:	e7ae      	b.n	2ae6 <am_hal_iom_config+0x1aa>
    2b88:	023a      	lsls	r2, r7, #8
    2b8a:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
    2b8e:	e6fa      	b.n	2986 <am_hal_iom_config+0x4a>
    2b90:	00f423ff 	.word	0x00f423ff
    2b94:	4002000c 	.word	0x4002000c
    2b98:	02dc6c00 	.word	0x02dc6c00
    2b9c:	007a11ff 	.word	0x007a11ff
    2ba0:	0003d090 	.word	0x0003d090
    2ba4:	100016c8 	.word	0x100016c8
    2ba8:	000c3500 	.word	0x000c3500
    2bac:	00061a80 	.word	0x00061a80
    2bb0:	00030d40 	.word	0x00030d40
    2bb4:	1d0e1400 	.word	0x1d0e1400
    2bb8:	1d0e1200 	.word	0x1d0e1200
    2bbc:	1d0e1300 	.word	0x1d0e1300
    2bc0:	00b71aff 	.word	0x00b71aff
    2bc4:	431bde83 	.word	0x431bde83

00002bc8 <am_hal_iom_workaround_word_write>:
//*****************************************************************************
void
am_hal_iom_workaround_word_write(uint32_t ui32ChipSelect,
                                 uint32_t *pui32Data, uint32_t ui32NumBytes,
                                 uint32_t ui32Options)
{
    2bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t ui32HiFreq = 0, ui32NormalFreq = 0;
    uint32_t ui32DelayTime = 0;
    uint32_t ui32LowFsel = 0;
    uint32_t ui32HiFsel = 0;
    uint32_t ui32FirstWord = 0;
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    2bcc:	4cc9      	ldr	r4, [pc, #804]	; (2ef4 <am_hal_iom_workaround_word_write+0x32c>)
    2bce:	6825      	ldr	r5, [r4, #0]
//*****************************************************************************
void
am_hal_iom_workaround_word_write(uint32_t ui32ChipSelect,
                                 uint32_t *pui32Data, uint32_t ui32NumBytes,
                                 uint32_t ui32Options)
{
    2bd0:	4691      	mov	r9, r2
    uint32_t ui32HiFreq = 0, ui32NormalFreq = 0;
    uint32_t ui32DelayTime = 0;
    uint32_t ui32LowFsel = 0;
    uint32_t ui32HiFsel = 0;
    uint32_t ui32FirstWord = 0;
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    2bd2:	f015 0f08 	tst.w	r5, #8
//*****************************************************************************
void
am_hal_iom_workaround_word_write(uint32_t ui32ChipSelect,
                                 uint32_t *pui32Data, uint32_t ui32NumBytes,
                                 uint32_t ui32Options)
{
    2bd6:	b08d      	sub	sp, #52	; 0x34
    // Make sure the transfer isn't too long for the hardware to support.
    //
    // Note: This is a little shorter than usual, since the workaround
    // consumes an extra byte at the beginning of the transfer.
    //
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2bd8:	f640 72fb 	movw	r2, #4091	; 0xffb
    uint32_t ui32HiFreq = 0, ui32NormalFreq = 0;
    uint32_t ui32DelayTime = 0;
    uint32_t ui32LowFsel = 0;
    uint32_t ui32HiFsel = 0;
    uint32_t ui32FirstWord = 0;
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    2bdc:	bf14      	ite	ne
    2bde:	2740      	movne	r7, #64	; 0x40
    2be0:	2780      	moveq	r7, #128	; 0x80
    // Make sure the transfer isn't too long for the hardware to support.
    //
    // Note: This is a little shorter than usual, since the workaround
    // consumes an extra byte at the beginning of the transfer.
    //
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2be2:	4591      	cmp	r9, r2
//*****************************************************************************
void
am_hal_iom_workaround_word_write(uint32_t ui32ChipSelect,
                                 uint32_t *pui32Data, uint32_t ui32NumBytes,
                                 uint32_t ui32Options)
{
    2be4:	4604      	mov	r4, r0
    2be6:	4688      	mov	r8, r1
    2be8:	9301      	str	r3, [sp, #4]
    // Make sure the transfer isn't too long for the hardware to support.
    //
    // Note: This is a little shorter than usual, since the workaround
    // consumes an extra byte at the beginning of the transfer.
    //
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2bea:	f200 834e 	bhi.w	328a <am_hal_iom_workaround_word_write+0x6c2>

    // We want to slow down the clock to help us count edges more
    // accurately. Save it first, then slow it down. Also, we will
    // pre-calculate a delay for when we need to restore the SPI settings.
    //
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    2bee:	4bc2      	ldr	r3, [pc, #776]	; (2ef8 <am_hal_iom_workaround_word_write+0x330>)
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2bf0:	4ec2      	ldr	r6, [pc, #776]	; (2efc <am_hal_iom_workaround_word_write+0x334>)

    // We want to slow down the clock to help us count edges more
    // accurately. Save it first, then slow it down. Also, we will
    // pre-calculate a delay for when we need to restore the SPI settings.
    //
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    2bf2:	681d      	ldr	r5, [r3, #0]
//*****************************************************************************
static uint32_t
iom_get_workaround_fsel(uint32_t maxFreq)
{
    uint32_t ui32Freq, ui32Fsel;
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    2bf4:	681a      	ldr	r2, [r3, #0]
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2bf6:	49c2      	ldr	r1, [pc, #776]	; (2f00 <am_hal_iom_workaround_word_write+0x338>)
    2bf8:	f3c2 3000 	ubfx	r0, r2, #12, #1
    2bfc:	f3c2 23c0 	ubfx	r3, r2, #11, #1
    2c00:	0e12      	lsrs	r2, r2, #24
    2c02:	fb02 f200 	mul.w	r2, r2, r0
    2c06:	005b      	lsls	r3, r3, #1
    2c08:	3301      	adds	r3, #1
    2c0a:	3201      	adds	r2, #1
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2c0c:	fb02 fe03 	mul.w	lr, r2, r3
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2c10:	fbb6 fcfe 	udiv	ip, r6, lr
    2c14:	fb0e fa0c 	mul.w	sl, lr, ip
    2c18:	f1ca 7b37 	rsb	fp, sl, #47972352	; 0x2dc0000
    2c1c:	f50b 40d8 	add.w	r0, fp, #27648	; 0x6c00
    2c20:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
    2c24:	4586      	cmp	lr, r0
    2c26:	bf2c      	ite	cs
    2c28:	4660      	movcs	r0, ip
    2c2a:	f10c 0001 	addcc.w	r0, ip, #1
    2c2e:	4288      	cmp	r0, r1
    2c30:	f240 8378 	bls.w	3324 <am_hal_iom_workaround_word_write+0x75c>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2c34:	005b      	lsls	r3, r3, #1
    2c36:	fb02 f303 	mul.w	r3, r2, r3
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2c3a:	fbb6 f6f3 	udiv	r6, r6, r3
    2c3e:	fb03 f206 	mul.w	r2, r3, r6
    2c42:	f1c2 7c37 	rsb	ip, r2, #47972352	; 0x2dc0000
    2c46:	f50c 40d8 	add.w	r0, ip, #27648	; 0x6c00
    2c4a:	085b      	lsrs	r3, r3, #1
    2c4c:	4283      	cmp	r3, r0
    2c4e:	bf38      	it	cc
    2c50:	3601      	addcc	r6, #1

    //
    // Starting with the current clock configuration parameters, find a value
    // of FSEL that will bring our total frequency down to or below maxFreq.
    //
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    2c52:	428e      	cmp	r6, r1
    2c54:	bf8c      	ite	hi
    2c56:	f04f 0e03 	movhi.w	lr, #3
    2c5a:	f04f 0e02 	movls.w	lr, #2
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2c5e:	f3c5 21c0 	ubfx	r1, r5, #11, #1
    2c62:	004e      	lsls	r6, r1, #1
    2c64:	f3c5 2a02 	ubfx	sl, r5, #8, #3
    2c68:	f3c5 3c00 	ubfx	ip, r5, #12, #1
    2c6c:	f10a 3bff 	add.w	fp, sl, #4294967295
    2c70:	4663      	mov	r3, ip
    2c72:	3601      	adds	r6, #1
    2c74:	0e28      	lsrs	r0, r5, #24
    2c76:	fa06 f20b 	lsl.w	r2, r6, fp
    2c7a:	fb00 f003 	mul.w	r0, r0, r3
    2c7e:	fb00 2102 	mla	r1, r0, r2, r2
    // Need to make sure we wait long enough for the hi clock to be effective
    // Delay 2 cycles based on previous frequency
    ui32NormalFreq = am_hal_iom_frequency_get(ui32ClkCfg);
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2c82:	f8df b278 	ldr.w	fp, [pc, #632]	; 2efc <am_hal_iom_workaround_word_write+0x334>
    2c86:	fbbb f6f1 	udiv	r6, fp, r1
    2c8a:	fb01 fa06 	mul.w	sl, r1, r6
    2c8e:	f1ca 7c37 	rsb	ip, sl, #47972352	; 0x2dc0000
    2c92:	f50c 40d8 	add.w	r0, ip, #27648	; 0x6c00
    2c96:	084a      	lsrs	r2, r1, #1
    // pre-calculate a delay for when we need to restore the SPI settings.
    //
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    // Get the largest speed we can configure within our rated speed of 16MHz
    ui32HiFsel = iom_get_workaround_fsel(16000000);
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2c98:	f425 6ae0 	bic.w	sl, r5, #1792	; 0x700
                     AM_BFV(IOMSTR, CLKCFG, FSEL, ui32HiFsel));
    // Switch to Hi Freq
    // Need to make sure we wait long enough for the hi clock to be effective
    // Delay 2 cycles based on previous frequency
    ui32NormalFreq = am_hal_iom_frequency_get(ui32ClkCfg);
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    2c9c:	4996      	ldr	r1, [pc, #600]	; (2ef8 <am_hal_iom_workaround_word_write+0x330>)
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2c9e:	4282      	cmp	r2, r0
    2ca0:	bf2c      	ite	cs
    2ca2:	4633      	movcs	r3, r6
    2ca4:	1c73      	addcc	r3, r6, #1
    // pre-calculate a delay for when we need to restore the SPI settings.
    //
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    // Get the largest speed we can configure within our rated speed of 16MHz
    ui32HiFsel = iom_get_workaround_fsel(16000000);
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2ca6:	ea4a 260e 	orr.w	r6, sl, lr, lsl #8
    // Need to make sure we wait long enough for the hi clock to be effective
    // Delay 2 cycles based on previous frequency
    ui32NormalFreq = am_hal_iom_frequency_get(ui32ClkCfg);
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2caa:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
                     AM_BFV(IOMSTR, CLKCFG, FSEL, ui32HiFsel));
    // Switch to Hi Freq
    // Need to make sure we wait long enough for the hi clock to be effective
    // Delay 2 cycles based on previous frequency
    ui32NormalFreq = am_hal_iom_frequency_get(ui32ClkCfg);
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    2cae:	600e      	str	r6, [r1, #0]
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2cb0:	4a94      	ldr	r2, [pc, #592]	; (2f04 <am_hal_iom_workaround_word_write+0x33c>)
    2cb2:	4895      	ldr	r0, [pc, #596]	; (2f08 <am_hal_iom_workaround_word_write+0x340>)
    2cb4:	fbb0 f0fc 	udiv	r0, r0, ip
    2cb8:	4790      	blx	r2
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2cba:	f3c6 23c0 	ubfx	r3, r6, #11, #1
    2cbe:	0058      	lsls	r0, r3, #1
    2cc0:	f3c6 2101 	ubfx	r1, r6, #8, #2
    2cc4:	1c42      	adds	r2, r0, #1
    2cc6:	f101 3cff 	add.w	ip, r1, #4294967295
    2cca:	f3c6 3000 	ubfx	r0, r6, #12, #1
    2cce:	0e36      	lsrs	r6, r6, #24
    2cd0:	fa02 f30c 	lsl.w	r3, r2, ip
    2cd4:	fb06 f600 	mul.w	r6, r6, r0
    2cd8:	fb06 3103 	mla	r1, r6, r3, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2cdc:	fbbb f2f1 	udiv	r2, fp, r1
    2ce0:	fb01 f002 	mul.w	r0, r1, r2
    2ce4:	f1c0 7b37 	rsb	fp, r0, #47972352	; 0x2dc0000
    2ce8:	f50b 4cd8 	add.w	ip, fp, #27648	; 0x6c00
    2cec:	084e      	lsrs	r6, r1, #1
    2cee:	4566      	cmp	r6, ip
    2cf0:	bf2c      	ite	cs
    2cf2:	4616      	movcs	r6, r2
    2cf4:	1c56      	addcc	r6, r2, #1
    ui32HiFreq = am_hal_iom_frequency_get(ui32HiClkCfg);

    //
    // Validate return value to prevent DIVBY0 errors.
    //
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    2cf6:	2e00      	cmp	r6, #0
    2cf8:	f000 82c0 	beq.w	327c <am_hal_iom_workaround_word_write+0x6b4>
//*****************************************************************************
static uint32_t
iom_get_workaround_fsel(uint32_t maxFreq)
{
    uint32_t ui32Freq, ui32Fsel;
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    2cfc:	4b7e      	ldr	r3, [pc, #504]	; (2ef8 <am_hal_iom_workaround_word_write+0x330>)
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2cfe:	4a7f      	ldr	r2, [pc, #508]	; (2efc <am_hal_iom_workaround_word_write+0x334>)
//*****************************************************************************
static uint32_t
iom_get_workaround_fsel(uint32_t maxFreq)
{
    uint32_t ui32Freq, ui32Fsel;
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    2d00:	6818      	ldr	r0, [r3, #0]
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2d02:	f8df e214 	ldr.w	lr, [pc, #532]	; 2f18 <am_hal_iom_workaround_word_write+0x350>
    2d06:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    2d0a:	f3c0 3300 	ubfx	r3, r0, #12, #1
    2d0e:	0e00      	lsrs	r0, r0, #24
    2d10:	fb00 f303 	mul.w	r3, r0, r3
    2d14:	0049      	lsls	r1, r1, #1
    2d16:	3101      	adds	r1, #1
    2d18:	3301      	adds	r3, #1
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2d1a:	fb03 f001 	mul.w	r0, r3, r1
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2d1e:	fbb2 fbf0 	udiv	fp, r2, r0
    2d22:	fb00 fc0b 	mul.w	ip, r0, fp
    2d26:	f1cc 7c37 	rsb	ip, ip, #47972352	; 0x2dc0000
    2d2a:	f50c 4cd8 	add.w	ip, ip, #27648	; 0x6c00
    2d2e:	0840      	lsrs	r0, r0, #1
    2d30:	4560      	cmp	r0, ip
    2d32:	bf38      	it	cc
    2d34:	f10b 0b01 	addcc.w	fp, fp, #1
    2d38:	45f3      	cmp	fp, lr
    2d3a:	f240 82f1 	bls.w	3320 <am_hal_iom_workaround_word_write+0x758>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2d3e:	0048      	lsls	r0, r1, #1
    2d40:	fb03 f000 	mul.w	r0, r3, r0
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2d44:	fbb2 fbf0 	udiv	fp, r2, r0
    2d48:	fb00 fc0b 	mul.w	ip, r0, fp
    2d4c:	f1cc 7c37 	rsb	ip, ip, #47972352	; 0x2dc0000
    2d50:	f50c 4cd8 	add.w	ip, ip, #27648	; 0x6c00
    2d54:	0840      	lsrs	r0, r0, #1
    2d56:	4560      	cmp	r0, ip
    2d58:	bf38      	it	cc
    2d5a:	f10b 0b01 	addcc.w	fp, fp, #1
    2d5e:	45f3      	cmp	fp, lr
    2d60:	f240 82e3 	bls.w	332a <am_hal_iom_workaround_word_write+0x762>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2d64:	0088      	lsls	r0, r1, #2
    2d66:	fb03 f000 	mul.w	r0, r3, r0
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2d6a:	fbb2 fbf0 	udiv	fp, r2, r0
    2d6e:	fb00 fc0b 	mul.w	ip, r0, fp
    2d72:	f1cc 7c37 	rsb	ip, ip, #47972352	; 0x2dc0000
    2d76:	f50c 4cd8 	add.w	ip, ip, #27648	; 0x6c00
    2d7a:	0840      	lsrs	r0, r0, #1
    2d7c:	4560      	cmp	r0, ip
    2d7e:	bf38      	it	cc
    2d80:	f10b 0b01 	addcc.w	fp, fp, #1
    2d84:	45f3      	cmp	fp, lr
    2d86:	f240 82d2 	bls.w	332e <am_hal_iom_workaround_word_write+0x766>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2d8a:	00c8      	lsls	r0, r1, #3
    2d8c:	fb03 f000 	mul.w	r0, r3, r0
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2d90:	fbb2 fbf0 	udiv	fp, r2, r0
    2d94:	fb00 fc0b 	mul.w	ip, r0, fp
    2d98:	f1cc 7c37 	rsb	ip, ip, #47972352	; 0x2dc0000
    2d9c:	f50c 4cd8 	add.w	ip, ip, #27648	; 0x6c00
    2da0:	0840      	lsrs	r0, r0, #1
    2da2:	4560      	cmp	r0, ip
    2da4:	bf38      	it	cc
    2da6:	f10b 0b01 	addcc.w	fp, fp, #1
    2daa:	45f3      	cmp	fp, lr
    2dac:	f240 82c1 	bls.w	3332 <am_hal_iom_workaround_word_write+0x76a>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2db0:	0108      	lsls	r0, r1, #4
    2db2:	fb03 f000 	mul.w	r0, r3, r0
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2db6:	fbb2 fbf0 	udiv	fp, r2, r0
    2dba:	fb00 fc0b 	mul.w	ip, r0, fp
    2dbe:	f1cc 7c37 	rsb	ip, ip, #47972352	; 0x2dc0000
    2dc2:	f50c 4cd8 	add.w	ip, ip, #27648	; 0x6c00
    2dc6:	0840      	lsrs	r0, r0, #1
    2dc8:	4560      	cmp	r0, ip
    2dca:	bf38      	it	cc
    2dcc:	f10b 0b01 	addcc.w	fp, fp, #1
    2dd0:	45f3      	cmp	fp, lr
    2dd2:	f240 82b0 	bls.w	3336 <am_hal_iom_workaround_word_write+0x76e>
                             uint32_t ui32Fsel, uint32_t ui32Div3,
                             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2dd6:	0149      	lsls	r1, r1, #5
    2dd8:	fb03 f301 	mul.w	r3, r3, r1
        ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ, ui32Fsel,
                                AM_BFX(IOMSTR, CLKCFG, DIV3, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, DIVEN, ui32ClkCfg),
                                AM_BFX(IOMSTR, CLKCFG, TOTPER, ui32ClkCfg));

        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2ddc:	fbb2 f2f3 	udiv	r2, r2, r3
    2de0:	fb03 f002 	mul.w	r0, r3, r2
    2de4:	f1c0 7c37 	rsb	ip, r0, #47972352	; 0x2dc0000
    2de8:	f50c 4bd8 	add.w	fp, ip, #27648	; 0x6c00
    2dec:	085b      	lsrs	r3, r3, #1
    2dee:	455b      	cmp	r3, fp
    2df0:	bf38      	it	cc
    2df2:	3201      	addcc	r2, #1

    //
    // Starting with the current clock configuration parameters, find a value
    // of FSEL that will bring our total frequency down to or below maxFreq.
    //
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    2df4:	4572      	cmp	r2, lr
    2df6:	bf8c      	ite	hi
    2df8:	2107      	movhi	r1, #7
    2dfa:	2106      	movls	r1, #6
    // Get a reasonably slow speed (~1MHz) we can safely poll for the transition
    ui32LowFsel = iom_get_workaround_fsel(1000000);
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
                     AM_BFV(IOMSTR, CLKCFG, FSEL, ui32LowFsel));

    if ( ui32Options & AM_HAL_IOM_RAW )
    2dfc:	9801      	ldr	r0, [sp, #4]
    //
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");

    // Get a reasonably slow speed (~1MHz) we can safely poll for the transition
    ui32LowFsel = iom_get_workaround_fsel(1000000);
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2dfe:	ea4a 2201 	orr.w	r2, sl, r1, lsl #8
                     AM_BFV(IOMSTR, CLKCFG, FSEL, ui32LowFsel));

    if ( ui32Options & AM_HAL_IOM_RAW )
    2e02:	f010 4180 	ands.w	r1, r0, #1073741824	; 0x40000000
    //
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");

    // Get a reasonably slow speed (~1MHz) we can safely poll for the transition
    ui32LowFsel = iom_get_workaround_fsel(1000000);
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2e06:	9203      	str	r2, [sp, #12]
                     AM_BFV(IOMSTR, CLKCFG, FSEL, ui32LowFsel));

    if ( ui32Options & AM_HAL_IOM_RAW )
    2e08:	f000 813f 	beq.w	308a <am_hal_iom_workaround_word_write+0x4c2>
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));

        if ( pui32Data[0] & 0x80 )
    2e0c:	f8d8 3000 	ldr.w	r3, [r8]
        // The transition we care for is on 33rd bit.
        // Prepare to delay 27 bits past the start of the transaction
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2e10:	4a3e      	ldr	r2, [pc, #248]	; (2f0c <am_hal_iom_workaround_word_write+0x344>)

        if ( pui32Data[0] & 0x80 )
    2e12:	f003 0080 	and.w	r0, r3, #128	; 0x80
        {
            ui32FirstWord = 0x00000000;
    2e16:	2800      	cmp	r0, #0
        // The transition we care for is on 33rd bit.
        // Prepare to delay 27 bits past the start of the transaction
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2e18:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2e1c:	fbb2 f3f1 	udiv	r3, r2, r1
    2e20:	9307      	str	r3, [sp, #28]

        if ( pui32Data[0] & 0x80 )
        {
            ui32FirstWord = 0x00000000;
    2e22:	bf0b      	itete	eq
    2e24:	2300      	moveq	r3, #0
    2e26:	2301      	movne	r3, #1
    2e28:	f06f 06ff 	mvneq.w	r6, #255	; 0xff
    2e2c:	2600      	movne	r6, #0
    2e2e:	9306      	str	r3, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e30:	4a30      	ldr	r2, [pc, #192]	; (2ef4 <am_hal_iom_workaround_word_write+0x32c>)
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2e32:	4837      	ldr	r0, [pc, #220]	; (2f10 <am_hal_iom_workaround_word_write+0x348>)
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e34:	6812      	ldr	r2, [r2, #0]
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2e36:	6801      	ldr	r1, [r0, #0]
    // Now that weve taken care of the offset byte, we can run the
    // transaction in RAW mode.
    //
    ui32Options |= AM_HAL_IOM_RAW;

    ui32NumBytes += 4;
    2e38:	f109 0304 	add.w	r3, r9, #4

    //
    // Figure out how many bytes we can write to the FIFO immediately.
    //
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    2e3c:	429f      	cmp	r7, r3
    2e3e:	bf28      	it	cs
    2e40:	461f      	movcs	r7, r3
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e42:	f012 0f08 	tst.w	r2, #8
    2e46:	bf14      	ite	ne
    2e48:	2240      	movne	r2, #64	; 0x40
    2e4a:	2280      	moveq	r2, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2e4c:	1a50      	subs	r0, r2, r1
    2e4e:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
    2e52:	2a03      	cmp	r2, #3
    2e54:	f240 8209 	bls.w	326a <am_hal_iom_workaround_word_write+0x6a2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2e58:	492e      	ldr	r1, [pc, #184]	; (2f14 <am_hal_iom_workaround_word_write+0x34c>)
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e5a:	4826      	ldr	r0, [pc, #152]	; (2ef4 <am_hal_iom_workaround_word_write+0x32c>)
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2e5c:	600e      	str	r6, [r1, #0]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e5e:	6806      	ldr	r6, [r0, #0]
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2e60:	f850 1c1c 	ldr.w	r1, [r0, #-28]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e64:	f016 0f08 	tst.w	r6, #8
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2e68:	f1a0 021c 	sub.w	r2, r0, #28
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2e6c:	bf14      	ite	ne
    2e6e:	2240      	movne	r2, #64	; 0x40
    2e70:	2280      	moveq	r2, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2e72:	1a50      	subs	r0, r2, r1
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
                        ui32MaxFifoSize);

    am_hal_iom_fifo_write(WORKAROUND_IOM, &ui32FirstWord, 4);

    am_hal_iom_fifo_write(WORKAROUND_IOM, pui32Data, ui32TransferSize - 4);
    2e74:	3f04      	subs	r7, #4
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2e76:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
    2e7a:	42b7      	cmp	r7, r6
    2e7c:	f200 81ec 	bhi.w	3258 <am_hal_iom_workaround_word_write+0x690>

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2e80:	2f00      	cmp	r7, #0
    2e82:	d069      	beq.n	2f58 <am_hal_iom_workaround_word_write+0x390>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2e84:	4642      	mov	r2, r8
    2e86:	ea6f 0908 	mvn.w	r9, r8
    2e8a:	f852 cb04 	ldr.w	ip, [r2], #4
    2e8e:	4921      	ldr	r1, [pc, #132]	; (2f14 <am_hal_iom_workaround_word_write+0x34c>)
    2e90:	44c1      	add	r9, r8

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2e92:	ebc8 0b02 	rsb	fp, r8, r2
    2e96:	44b9      	add	r9, r7
    2e98:	455f      	cmp	r7, fp
    2e9a:	f3c9 0082 	ubfx	r0, r9, #2, #3
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2e9e:	f8c1 c000 	str.w	ip, [r1]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2ea2:	d959      	bls.n	2f58 <am_hal_iom_workaround_word_write+0x390>
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d039      	beq.n	2f1c <am_hal_iom_workaround_word_write+0x354>
    2ea8:	2801      	cmp	r0, #1
    2eaa:	d01b      	beq.n	2ee4 <am_hal_iom_workaround_word_write+0x31c>
    2eac:	2802      	cmp	r0, #2
    2eae:	d016      	beq.n	2ede <am_hal_iom_workaround_word_write+0x316>
    2eb0:	2803      	cmp	r0, #3
    2eb2:	d011      	beq.n	2ed8 <am_hal_iom_workaround_word_write+0x310>
    2eb4:	2804      	cmp	r0, #4
    2eb6:	d00c      	beq.n	2ed2 <am_hal_iom_workaround_word_write+0x30a>
    2eb8:	2805      	cmp	r0, #5
    2eba:	d007      	beq.n	2ecc <am_hal_iom_workaround_word_write+0x304>
    2ebc:	2806      	cmp	r0, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2ebe:	bf1c      	itt	ne
    2ec0:	f852 0b04 	ldrne.w	r0, [r2], #4
    2ec4:	6008      	strne	r0, [r1, #0]
    2ec6:	f852 6b04 	ldr.w	r6, [r2], #4
    2eca:	600e      	str	r6, [r1, #0]
    2ecc:	f852 0b04 	ldr.w	r0, [r2], #4
    2ed0:	6008      	str	r0, [r1, #0]
    2ed2:	f852 6b04 	ldr.w	r6, [r2], #4
    2ed6:	600e      	str	r6, [r1, #0]
    2ed8:	f852 0b04 	ldr.w	r0, [r2], #4
    2edc:	6008      	str	r0, [r1, #0]
    2ede:	f852 6b04 	ldr.w	r6, [r2], #4
    2ee2:	600e      	str	r6, [r1, #0]
    2ee4:	f852 0b04 	ldr.w	r0, [r2], #4
    2ee8:	6008      	str	r0, [r1, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2eea:	ebc8 0602 	rsb	r6, r8, r2
    2eee:	42b7      	cmp	r7, r6
    2ef0:	d932      	bls.n	2f58 <am_hal_iom_workaround_word_write+0x390>
    2ef2:	e013      	b.n	2f1c <am_hal_iom_workaround_word_write+0x354>
    2ef4:	5000811c 	.word	0x5000811c
    2ef8:	5000810c 	.word	0x5000810c
    2efc:	02dc6c00 	.word	0x02dc6c00
    2f00:	00f42400 	.word	0x00f42400
    2f04:	0800009d 	.word	0x0800009d
    2f08:	05b8d800 	.word	0x05b8d800
    2f0c:	4d3f6400 	.word	0x4d3f6400
    2f10:	50008100 	.word	0x50008100
    2f14:	50008000 	.word	0x50008000
    2f18:	000f4240 	.word	0x000f4240
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2f1c:	4692      	mov	sl, r2
    2f1e:	3220      	adds	r2, #32
    2f20:	f85a 0b04 	ldr.w	r0, [sl], #4
    2f24:	6008      	str	r0, [r1, #0]
    2f26:	f852 6c1c 	ldr.w	r6, [r2, #-28]
    2f2a:	600e      	str	r6, [r1, #0]
    2f2c:	f8da 0004 	ldr.w	r0, [sl, #4]
    2f30:	6008      	str	r0, [r1, #0]
    2f32:	f852 6c14 	ldr.w	r6, [r2, #-20]
    2f36:	600e      	str	r6, [r1, #0]
    2f38:	f852 0c10 	ldr.w	r0, [r2, #-16]
    2f3c:	6008      	str	r0, [r1, #0]
    2f3e:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    2f42:	600e      	str	r6, [r1, #0]
    2f44:	f852 0c08 	ldr.w	r0, [r2, #-8]
    2f48:	6008      	str	r0, [r1, #0]
    2f4a:	f852 6c04 	ldr.w	r6, [r2, #-4]
    2f4e:	600e      	str	r6, [r1, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2f50:	ebc8 0e02 	rsb	lr, r8, r2
    2f54:	4577      	cmp	r7, lr
    2f56:	d8e1      	bhi.n	2f1c <am_hal_iom_workaround_word_write+0x354>
    for ( index = 0; index < (sizeof(g_IOMPads) / sizeof(IOMPad_t)); index++ )
    {
        //
        //  Is this one of the CEn that we are using?
        //
        if ( g_IOMPads[index].channel == ui32ChipSelect )
    2f58:	2c00      	cmp	r4, #0
    2f5a:	f000 81c7 	beq.w	32ec <am_hal_iom_workaround_word_write+0x724>
    2f5e:	2c01      	cmp	r4, #1
    2f60:	f000 80a4 	beq.w	30ac <am_hal_iom_workaround_word_write+0x4e4>
    2f64:	2c02      	cmp	r4, #2
    2f66:	f000 80b9 	beq.w	30dc <am_hal_iom_workaround_word_write+0x514>
    2f6a:	2c03      	cmp	r4, #3
    2f6c:	f000 80c7 	beq.w	30fe <am_hal_iom_workaround_word_write+0x536>
    2f70:	2c04      	cmp	r4, #4
    2f72:	f000 811f 	beq.w	31b4 <am_hal_iom_workaround_word_write+0x5ec>
    2f76:	2c05      	cmp	r4, #5
    2f78:	f000 8134 	beq.w	31e4 <am_hal_iom_workaround_word_write+0x61c>
    2f7c:	2c06      	cmp	r4, #6
    2f7e:	f000 8149 	beq.w	3214 <am_hal_iom_workaround_word_write+0x64c>
    2f82:	2c07      	cmp	r4, #7
    2f84:	f000 8157 	beq.w	3236 <am_hal_iom_workaround_word_write+0x66e>
    //
    // Save the locations and values of the CS pin configuration
    // information.
    //
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    ui32CSPadregVal = *pui32CSPadreg;
    2f88:	4ec3      	ldr	r6, [pc, #780]	; (3298 <am_hal_iom_workaround_word_write+0x6d0>)
    //
    // Calculate the GPIO to be controlled until the initial shift is
    // complete. Make sure we get a valid value.
    //
    ui32IOMGPIO = iom_calc_gpio(ui32ChipSelect);
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    2f8a:	48c4      	ldr	r0, [pc, #784]	; (329c <am_hal_iom_workaround_word_write+0x6d4>)
    2f8c:	9304      	str	r3, [sp, #16]
    2f8e:	f240 5126 	movw	r1, #1318	; 0x526
    2f92:	2200      	movs	r2, #0
    2f94:	f7ff f882 	bl	209c <am_hal_debug_error>
    ui32CSPadregVal = *pui32CSPadreg;

    //
    // Switch CS to a GPIO.
    //
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    2f98:	4fc1      	ldr	r7, [pc, #772]	; (32a0 <am_hal_iom_workaround_word_write+0x6d8>)
    //
    // Save the locations and values of the CS pin configuration
    // information.
    //
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    ui32CSPadregVal = *pui32CSPadreg;
    2f9a:	6833      	ldr	r3, [r6, #0]
    2f9c:	9302      	str	r3, [sp, #8]

    //
    // Switch CS to a GPIO.
    //
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    2f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2fa2:	9b04      	ldr	r3, [sp, #16]
    2fa4:	6039      	str	r1, [r7, #0]

    //
    // Save the locations and values of the CS pin configuration
    // information.
    //
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    2fa6:	46b3      	mov	fp, r6
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);

    //
    // Enable the input buffer on MOSI.
    //
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG | AM_HAL_PIN_DIR_INPUT);
    2fa8:	f3ef 8210 	mrs	r2, PRIMASK
    2fac:	9204      	str	r2, [sp, #16]
    2fae:	920a      	str	r2, [sp, #40]	; 0x28
    2fb0:	b672      	cpsid	i
    2fb2:	4ebc      	ldr	r6, [pc, #752]	; (32a4 <am_hal_iom_workaround_word_write+0x6dc>)
    2fb4:	f8df 9324 	ldr.w	r9, [pc, #804]	; 32dc <am_hal_iom_workaround_word_write+0x714>
    2fb8:	f8df 8324 	ldr.w	r8, [pc, #804]	; 32e0 <am_hal_iom_workaround_word_write+0x718>
    2fbc:	4fba      	ldr	r7, [pc, #744]	; (32a8 <am_hal_iom_workaround_word_write+0x6e0>)
    2fbe:	2173      	movs	r1, #115	; 0x73
    2fc0:	6031      	str	r1, [r6, #0]
    2fc2:	f8d9 0000 	ldr.w	r0, [r9]
    2fc6:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    2fca:	f8c9 2000 	str.w	r2, [r9]
    2fce:	f8d8 1000 	ldr.w	r1, [r8]
    2fd2:	f021 00ff 	bic.w	r0, r1, #255	; 0xff
    2fd6:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    2fda:	f8c8 2000 	str.w	r2, [r8]
    2fde:	6839      	ldr	r1, [r7, #0]
    2fe0:	f04f 0a00 	mov.w	sl, #0
    2fe4:	f021 00ff 	bic.w	r0, r1, #255	; 0xff
    2fe8:	6038      	str	r0, [r7, #0]
    2fea:	f8c6 a000 	str.w	sl, [r6]
    2fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2ff0:	f382 8810 	msr	PRIMASK, r2
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    2ff4:	9901      	ldr	r1, [sp, #4]
    2ff6:	0424      	lsls	r4, r4, #16
    2ff8:	f021 4c23 	bic.w	ip, r1, #2734686208	; 0xa3000000
    2ffc:	f404 20e0 	and.w	r0, r4, #458752	; 0x70000
    3000:	f00c 22ff 	and.w	r2, ip, #4278255360	; 0xff00ff00
    3004:	f040 4480 	orr.w	r4, r0, #1073741824	; 0x40000000
    3008:	b2d9      	uxtb	r1, r3
    300a:	4322      	orrs	r2, r4
    300c:	03db      	lsls	r3, r3, #15
    300e:	f003 64f0 	and.w	r4, r3, #125829120	; 0x7800000
    3012:	430a      	orrs	r2, r1

    //
    // Write the GPIO PADKEY register to allow the workaround loop to
    // reconfigure chip enable.
    //
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    3014:	2073      	movs	r0, #115	; 0x73
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    3016:	4322      	orrs	r2, r4

    //
    // Write the GPIO PADKEY register to allow the workaround loop to
    // reconfigure chip enable.
    //
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    3018:	6030      	str	r0, [r6, #0]
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    301a:	9205      	str	r2, [sp, #20]
{
    uint32_t ui32Critical = 0;
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    301c:	f7ff f9c4 	bl	23a8 <am_hal_interrupt_master_disable>

    //
    // Start the write on the bus.
    //
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    3020:	4ba2      	ldr	r3, [pc, #648]	; (32ac <am_hal_iom_workaround_word_write+0x6e4>)
{
    uint32_t ui32Critical = 0;
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3022:	9001      	str	r0, [sp, #4]

    //
    // Start the write on the bus.
    //
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    3024:	9805      	ldr	r0, [sp, #20]
    // loop runs an edge-detector on MOSI, and triggers a falling edge on
    // chip-enable on the first bit of our real data.
    //
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    // Switch to Low Freq
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    3026:	4ca2      	ldr	r4, [pc, #648]	; (32b0 <am_hal_iom_workaround_word_write+0x6e8>)
    ui32Critical = am_hal_interrupt_master_disable();

    //
    // Start the write on the bus.
    //
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    3028:	6018      	str	r0, [r3, #0]
    //
    // Slow down the clock, and run the workaround loop. The workaround
    // loop runs an edge-detector on MOSI, and triggers a falling edge on
    // chip-enable on the first bit of our real data.
    //
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    302a:	49a2      	ldr	r1, [pc, #648]	; (32b4 <am_hal_iom_workaround_word_write+0x6ec>)
    302c:	9807      	ldr	r0, [sp, #28]
    302e:	4788      	blx	r1
    // Switch to Low Freq
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    3030:	9b03      	ldr	r3, [sp, #12]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    3032:	9a06      	ldr	r2, [sp, #24]
    3034:	9802      	ldr	r0, [sp, #8]
    // loop runs an edge-detector on MOSI, and triggers a falling edge on
    // chip-enable on the first bit of our real data.
    //
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    // Switch to Low Freq
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    3036:	6023      	str	r3, [r4, #0]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    3038:	4659      	mov	r1, fp
    303a:	f7ff f9bd 	bl	23b8 <iom_workaround_loop>
    //
    // Restore the clock frequency and the normal MOSI pin function.
    //
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32ClkCfg;
    303e:	6025      	str	r5, [r4, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG);
    3040:	9d04      	ldr	r5, [sp, #16]
    3042:	950b      	str	r5, [sp, #44]	; 0x2c
    3044:	b672      	cpsid	i
    3046:	2473      	movs	r4, #115	; 0x73
    3048:	6034      	str	r4, [r6, #0]
    304a:	f8d9 2000 	ldr.w	r2, [r9]
    304e:	f422 21e0 	bic.w	r1, r2, #458752	; 0x70000
    3052:	f8c9 1000 	str.w	r1, [r9]
    3056:	f8d8 0000 	ldr.w	r0, [r8]
    305a:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
    305e:	f043 0528 	orr.w	r5, r3, #40	; 0x28
    3062:	f8c8 5000 	str.w	r5, [r8]
    3066:	683c      	ldr	r4, [r7, #0]
    3068:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
    306c:	603a      	str	r2, [r7, #0]
    306e:	f8c6 a000 	str.w	sl, [r6]
    3072:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3074:	f387 8810 	msr	PRIMASK, r7

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3078:	9901      	ldr	r1, [sp, #4]
    307a:	4608      	mov	r0, r1
    307c:	f7ff f998 	bl	23b0 <am_hal_interrupt_master_set>
            ui32DelayTime, ui32ClkCfg,
            ui32LowClkCfg, bRising);
    //
    // Re-lock the GPIO PADKEY register
    //
    AM_REGn(GPIO, 0, PADKEY) = 0;
    3080:	f8c6 a000 	str.w	sl, [r6]
    //
    // Update the pointer and data counter.
    //
    ui32NumBytes -= ui32TransferSize;
    pui32Data += (ui32TransferSize - 4) >> 2;
}
    3084:	b00d      	add	sp, #52	; 0x34
    3086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        // Prepare to delay 19 bits past the start of the transaction
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
    308a:	0402      	lsls	r2, r0, #16
        // The transition we care for is on 25th bit.
        // Prepare to delay 19 bits past the start of the transaction
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    308c:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
    3090:	4e89      	ldr	r6, [pc, #548]	; (32b8 <am_hal_iom_workaround_word_write+0x6f0>)
    3092:	fbb6 f3fa 	udiv	r3, r6, sl
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
        if ( ui32FirstWord & 0x80000000 )
    3096:	f012 467f 	ands.w	r6, r2, #4278190080	; 0xff000000
        // The transition we care for is on 25th bit.
        // Prepare to delay 19 bits past the start of the transaction
        // before getting into polling - to leave some
        // margin for compiler related variations
        //
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    309a:	9307      	str	r3, [sp, #28]
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
        if ( ui32FirstWord & 0x80000000 )
    309c:	f100 813d 	bmi.w	331a <am_hal_iom_workaround_word_write+0x752>
        {
            bRising = true;
        }
        else
        {
            ui32FirstWord |= 0x00FFFF00;
    30a0:	f446 007f 	orr.w	r0, r6, #16711680	; 0xff0000
    30a4:	f440 467f 	orr.w	r6, r0, #65280	; 0xff00
            bRising = false;
    30a8:	9106      	str	r1, [sp, #24]
    30aa:	e6c1      	b.n	2e30 <am_hal_iom_workaround_word_write+0x268>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30ac:	4e83      	ldr	r6, [pc, #524]	; (32bc <am_hal_iom_workaround_word_write+0x6f4>)
    30ae:	6837      	ldr	r7, [r6, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    30b0:	f3c7 41c2 	ubfx	r1, r7, #19, #3
    30b4:	2904      	cmp	r1, #4
    30b6:	f000 814a 	beq.w	334e <am_hal_iom_workaround_word_write+0x786>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30ba:	3614      	adds	r6, #20
    30bc:	6832      	ldr	r2, [r6, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    30be:	f3c2 20c2 	ubfx	r0, r2, #11, #3
    30c2:	2805      	cmp	r0, #5
    30c4:	f47f af60 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    30c8:	2225      	movs	r2, #37	; 0x25
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30ca:	46b3      	mov	fp, r6
    30cc:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    30ce:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    30d2:	f04f 0a08 	mov.w	sl, #8
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30d6:	f04f 0824 	mov.w	r8, #36	; 0x24
    30da:	e027      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    30dc:	4978      	ldr	r1, [pc, #480]	; (32c0 <am_hal_iom_workaround_word_write+0x6f8>)
    30de:	680a      	ldr	r2, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    30e0:	f3c2 20c2 	ubfx	r0, r2, #11, #3
    30e4:	2806      	cmp	r0, #6
    30e6:	f47f af4f 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    30ea:	2229      	movs	r2, #41	; 0x29
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30ec:	468b      	mov	fp, r1
    30ee:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    30f0:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    30f4:	f04f 0a08 	mov.w	sl, #8
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    30f8:	f04f 0828 	mov.w	r8, #40	; 0x28
    30fc:	e016      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    30fe:	496f      	ldr	r1, [pc, #444]	; (32bc <am_hal_iom_workaround_word_write+0x6f4>)
    3100:	680a      	ldr	r2, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    3102:	f3c2 20c2 	ubfx	r0, r2, #11, #3
    3106:	2804      	cmp	r0, #4
    3108:	f000 812a 	beq.w	3360 <am_hal_iom_workaround_word_write+0x798>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    310c:	311c      	adds	r1, #28
    310e:	680e      	ldr	r6, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    3110:	f3c6 27c2 	ubfx	r7, r6, #11, #3
    3114:	2f04      	cmp	r7, #4
    3116:	f47f af37 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    311a:	222d      	movs	r2, #45	; 0x2d
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    311c:	468b      	mov	fp, r1
    311e:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3120:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    3124:	f04f 0a08 	mov.w	sl, #8
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3128:	f04f 082c 	mov.w	r8, #44	; 0x2c
    ui32CSPadregVal = *pui32CSPadreg;

    //
    // Switch CS to a GPIO.
    //
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    312c:	08d0      	lsrs	r0, r2, #3
    312e:	f00c 071f 	and.w	r7, ip, #31
    3132:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 32e4 <am_hal_iom_workaround_word_write+0x71c>
    //
    // Save the locations and values of the CS pin configuration
    // information.
    //
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    ui32CSPadregVal = *pui32CSPadreg;
    3136:	f8db 1000 	ldr.w	r1, [fp]
    313a:	9102      	str	r1, [sp, #8]

    //
    // Switch CS to a GPIO.
    //
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    313c:	f000 0c04 	and.w	ip, r0, #4
    3140:	2601      	movs	r6, #1
    3142:	40be      	lsls	r6, r7
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    3144:	f3ef 8010 	mrs	r0, PRIMASK
    ui32CSPadregVal = *pui32CSPadreg;

    //
    // Switch CS to a GPIO.
    //
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    3148:	f84c 600e 	str.w	r6, [ip, lr]
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    314c:	9009      	str	r0, [sp, #36]	; 0x24
    314e:	b672      	cpsid	i
    3150:	4f54      	ldr	r7, [pc, #336]	; (32a4 <am_hal_iom_workaround_word_write+0x6dc>)
    3152:	f8df c194 	ldr.w	ip, [pc, #404]	; 32e8 <am_hal_iom_workaround_word_write+0x720>
    3156:	0856      	lsrs	r6, r2, #1
    3158:	f006 067c 	and.w	r6, r6, #124	; 0x7c
    315c:	2173      	movs	r1, #115	; 0x73
    315e:	6039      	str	r1, [r7, #0]
    3160:	0092      	lsls	r2, r2, #2
    3162:	f856 000c 	ldr.w	r0, [r6, ip]
    3166:	f002 021c 	and.w	r2, r2, #28
    316a:	2107      	movs	r1, #7
    316c:	4091      	lsls	r1, r2
    316e:	ea20 0001 	bic.w	r0, r0, r1
    3172:	2102      	movs	r1, #2
    3174:	fa01 f202 	lsl.w	r2, r1, r2
    3178:	4302      	orrs	r2, r0
    317a:	f846 200c 	str.w	r2, [r6, ip]
    317e:	f8db 6000 	ldr.w	r6, [fp]
    3182:	ea6f 0009 	mvn.w	r0, r9
    3186:	f04f 0918 	mov.w	r9, #24
    318a:	fa09 f10a 	lsl.w	r1, r9, sl
    318e:	ea06 0a00 	and.w	sl, r6, r0
    3192:	f10e 0e50 	add.w	lr, lr, #80	; 0x50
    3196:	ea41 020a 	orr.w	r2, r1, sl
    319a:	f8cb 2000 	str.w	r2, [fp]
    319e:	f858 600e 	ldr.w	r6, [r8, lr]
    31a2:	2100      	movs	r1, #0
    31a4:	4030      	ands	r0, r6
    31a6:	f848 000e 	str.w	r0, [r8, lr]
    31aa:	6039      	str	r1, [r7, #0]
    31ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
    31ae:	f387 8810 	msr	PRIMASK, r7
    31b2:	e6f9      	b.n	2fa8 <am_hal_iom_workaround_word_write+0x3e0>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    31b4:	4943      	ldr	r1, [pc, #268]	; (32c4 <am_hal_iom_workaround_word_write+0x6fc>)
    31b6:	680a      	ldr	r2, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    31b8:	f3c2 40c2 	ubfx	r0, r2, #19, #3
    31bc:	2806      	cmp	r0, #6
    31be:	f000 80d9 	beq.w	3374 <am_hal_iom_workaround_word_write+0x7ac>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    31c2:	3124      	adds	r1, #36	; 0x24
    31c4:	680e      	ldr	r6, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    31c6:	f3c6 47c2 	ubfx	r7, r6, #19, #3
    31ca:	2f06      	cmp	r7, #6
    31cc:	f47f aedc 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    31d0:	222e      	movs	r2, #46	; 0x2e
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    31d2:	468b      	mov	fp, r1
    31d4:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    31d6:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    31da:	f04f 0a10 	mov.w	sl, #16
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    31de:	f04f 082c 	mov.w	r8, #44	; 0x2c
    31e2:	e7a3      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    31e4:	4937      	ldr	r1, [pc, #220]	; (32c4 <am_hal_iom_workaround_word_write+0x6fc>)
    31e6:	680a      	ldr	r2, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    31e8:	f3c2 20c2 	ubfx	r0, r2, #11, #3
    31ec:	2804      	cmp	r0, #4
    31ee:	f000 80cb 	beq.w	3388 <am_hal_iom_workaround_word_write+0x7c0>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    31f2:	3124      	adds	r1, #36	; 0x24
    31f4:	680e      	ldr	r6, [r1, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    31f6:	f3c6 67c2 	ubfx	r7, r6, #27, #3
    31fa:	2f06      	cmp	r7, #6
    31fc:	f47f aec4 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3200:	222f      	movs	r2, #47	; 0x2f
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3202:	468b      	mov	fp, r1
    3204:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3206:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    320a:	f04f 0a18 	mov.w	sl, #24
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    320e:	f04f 082c 	mov.w	r8, #44	; 0x2c
    3212:	e78b      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    3214:	482c      	ldr	r0, [pc, #176]	; (32c8 <am_hal_iom_workaround_word_write+0x700>)
    3216:	6806      	ldr	r6, [r0, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    3218:	f3c6 67c2 	ubfx	r7, r6, #27, #3
    321c:	2f04      	cmp	r7, #4
    321e:	f47f aeb3 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3222:	2223      	movs	r2, #35	; 0x23
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3224:	4683      	mov	fp, r0
    3226:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3228:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    322c:	f04f 0a18 	mov.w	sl, #24
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3230:	f04f 0820 	mov.w	r8, #32
    3234:	e77a      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    3236:	4f25      	ldr	r7, [pc, #148]	; (32cc <am_hal_iom_workaround_word_write+0x704>)
    3238:	683a      	ldr	r2, [r7, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    323a:	f3c2 41c2 	ubfx	r1, r2, #19, #3
    323e:	2906      	cmp	r1, #6
    3240:	f47f aea2 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3244:	2226      	movs	r2, #38	; 0x26
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3246:	46bb      	mov	fp, r7
    3248:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    324a:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    324e:	f04f 0a10 	mov.w	sl, #16
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3252:	f04f 0824 	mov.w	r8, #36	; 0x24
    3256:	e769      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3258:	4a1d      	ldr	r2, [pc, #116]	; (32d0 <am_hal_iom_workaround_word_write+0x708>)
    325a:	4810      	ldr	r0, [pc, #64]	; (329c <am_hal_iom_workaround_word_write+0x6d4>)
    325c:	9302      	str	r3, [sp, #8]
    325e:	f640 7107 	movw	r1, #3847	; 0xf07
    3262:	f7fe ff1b 	bl	209c <am_hal_debug_error>
    3266:	9b02      	ldr	r3, [sp, #8]
    3268:	e60c      	b.n	2e84 <am_hal_iom_workaround_word_write+0x2bc>
    326a:	4a19      	ldr	r2, [pc, #100]	; (32d0 <am_hal_iom_workaround_word_write+0x708>)
    326c:	480b      	ldr	r0, [pc, #44]	; (329c <am_hal_iom_workaround_word_write+0x6d4>)
    326e:	9302      	str	r3, [sp, #8]
    3270:	f640 7107 	movw	r1, #3847	; 0xf07
    3274:	f7fe ff12 	bl	209c <am_hal_debug_error>
    3278:	9b02      	ldr	r3, [sp, #8]
    327a:	e5ed      	b.n	2e58 <am_hal_iom_workaround_word_write+0x290>
    ui32HiFreq = am_hal_iom_frequency_get(ui32HiClkCfg);

    //
    // Validate return value to prevent DIVBY0 errors.
    //
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    327c:	4a15      	ldr	r2, [pc, #84]	; (32d4 <am_hal_iom_workaround_word_write+0x70c>)
    327e:	4807      	ldr	r0, [pc, #28]	; (329c <am_hal_iom_workaround_word_write+0x6d4>)
    3280:	f240 41de 	movw	r1, #1246	; 0x4de
    3284:	f7fe ff0a 	bl	209c <am_hal_debug_error>
    3288:	e538      	b.n	2cfc <am_hal_iom_workaround_word_write+0x134>
    // Make sure the transfer isn't too long for the hardware to support.
    //
    // Note: This is a little shorter than usual, since the workaround
    // consumes an extra byte at the beginning of the transfer.
    //
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    328a:	4a13      	ldr	r2, [pc, #76]	; (32d8 <am_hal_iom_workaround_word_write+0x710>)
    328c:	4803      	ldr	r0, [pc, #12]	; (329c <am_hal_iom_workaround_word_write+0x6d4>)
    328e:	f240 41b3 	movw	r1, #1203	; 0x4b3
    3292:	f7fe ff03 	bl	209c <am_hal_debug_error>
    3296:	e4aa      	b.n	2bee <am_hal_iom_workaround_word_write+0x26>
    3298:	400100ec 	.word	0x400100ec
    329c:	0000630c 	.word	0x0000630c
    32a0:	40010094 	.word	0x40010094
    32a4:	40010060 	.word	0x40010060
    32a8:	4001010c 	.word	0x4001010c
    32ac:	50008110 	.word	0x50008110
    32b0:	5000810c 	.word	0x5000810c
    32b4:	0800009d 	.word	0x0800009d
    32b8:	365c0400 	.word	0x365c0400
    32bc:	40010010 	.word	0x40010010
    32c0:	40010028 	.word	0x40010028
    32c4:	40010008 	.word	0x40010008
    32c8:	40010020 	.word	0x40010020
    32cc:	40010024 	.word	0x40010024
    32d0:	000062d8 	.word	0x000062d8
    32d4:	000063a0 	.word	0x000063a0
    32d8:	00006388 	.word	0x00006388
    32dc:	40010054 	.word	0x40010054
    32e0:	4001002c 	.word	0x4001002c
    32e4:	40010090 	.word	0x40010090
    32e8:	40010040 	.word	0x40010040
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    32ec:	4e2b      	ldr	r6, [pc, #172]	; (339c <am_hal_iom_workaround_word_write+0x7d4>)
    32ee:	6837      	ldr	r7, [r6, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    32f0:	f3c7 21c2 	ubfx	r1, r7, #11, #3
    32f4:	2906      	cmp	r1, #6
    32f6:	d020      	beq.n	333a <am_hal_iom_workaround_word_write+0x772>
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    32f8:	3604      	adds	r6, #4
    32fa:	6832      	ldr	r2, [r6, #0]
            ui8FncSelVal = (ui8PadRegVal & 0x38) >> 3;

            //
            // Is the FNCSEL filed for this pad set to the expected value?
            //
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    32fc:	f3c2 40c2 	ubfx	r0, r2, #19, #3
    3300:	2806      	cmp	r0, #6
    3302:	f47f ae41 	bne.w	2f88 <am_hal_iom_workaround_word_write+0x3c0>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3306:	2222      	movs	r2, #34	; 0x22
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3308:	46b3      	mov	fp, r6
    330a:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    330c:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    3310:	f04f 0a10 	mov.w	sl, #16
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3314:	f04f 0820 	mov.w	r8, #32
    3318:	e708      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
        //
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
        if ( ui32FirstWord & 0x80000000 )
        {
            bRising = true;
    331a:	2101      	movs	r1, #1
    331c:	9106      	str	r1, [sp, #24]
    331e:	e587      	b.n	2e30 <am_hal_iom_workaround_word_write+0x268>

    //
    // Starting with the current clock configuration parameters, find a value
    // of FSEL that will bring our total frequency down to or below maxFreq.
    //
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    3320:	2101      	movs	r1, #1
    3322:	e56b      	b.n	2dfc <am_hal_iom_workaround_word_write+0x234>
    3324:	f04f 0e01 	mov.w	lr, #1
    3328:	e499      	b.n	2c5e <am_hal_iom_workaround_word_write+0x96>
    332a:	2102      	movs	r1, #2
    332c:	e566      	b.n	2dfc <am_hal_iom_workaround_word_write+0x234>
    332e:	2103      	movs	r1, #3
    3330:	e564      	b.n	2dfc <am_hal_iom_workaround_word_write+0x234>
    3332:	2104      	movs	r1, #4
    3334:	e562      	b.n	2dfc <am_hal_iom_workaround_word_write+0x234>
    3336:	2105      	movs	r1, #5
    3338:	e560      	b.n	2dfc <am_hal_iom_workaround_word_write+0x234>
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    333a:	221d      	movs	r2, #29
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    333c:	46b3      	mov	fp, r6
    333e:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3340:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    3344:	f04f 0a08 	mov.w	sl, #8
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3348:	f04f 081c 	mov.w	r8, #28
    334c:	e6ee      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    334e:	f04f 0a10 	mov.w	sl, #16
    3352:	2212      	movs	r2, #18
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3354:	46b3      	mov	fp, r6
    3356:	46d0      	mov	r8, sl
    3358:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    335a:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    335e:	e6e5      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    3360:	2211      	movs	r2, #17
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3362:	468b      	mov	fp, r1
    3364:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3366:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    336a:	f04f 0a08 	mov.w	sl, #8
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    336e:	f04f 0810 	mov.w	r8, #16
    3372:	e6db      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3374:	220a      	movs	r2, #10
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3376:	468b      	mov	fp, r1
    3378:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    337a:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    337e:	f04f 0a10 	mov.w	sl, #16
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    3382:	f04f 0808 	mov.w	r8, #8
    3386:	e6d1      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3388:	f04f 0a08 	mov.w	sl, #8
    338c:	2209      	movs	r2, #9
        if ( g_IOMPads[index].channel == ui32ChipSelect )
        {
            //
            // Get the PAD register value
            //
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    338e:	468b      	mov	fp, r1
    3390:	46d0      	mov	r8, sl
    3392:	4694      	mov	ip, r2
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    3394:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    3398:	e6c8      	b.n	312c <am_hal_iom_workaround_word_write+0x564>
    339a:	bf00      	nop
    339c:	4001001c 	.word	0x4001001c

000033a0 <am_hal_iom_spi_write_nb.part.6>:
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    33a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    33a4:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    33a8:	3404      	adds	r4, #4
    33aa:	0324      	lsls	r4, r4, #12
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    33ac:	4607      	mov	r7, r0
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    33ae:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    //
    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    33b2:	4e68      	ldr	r6, [pc, #416]	; (3554 <am_hal_iom_spi_write_nb.part.6+0x1b4>)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    33b4:	f3c0 05c0 	ubfx	r5, r0, #3, #1
    33b8:	2d00      	cmp	r5, #0
    //
    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    33ba:	f04f 0e01 	mov.w	lr, #1
    33be:	f806 e007 	strb.w	lr, [r6, r7]
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    33c2:	461d      	mov	r5, r3
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    33c4:	f240 70ff 	movw	r0, #2047	; 0x7ff
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    33c8:	bf15      	itete	ne
    33ca:	233c      	movne	r3, #60	; 0x3c
    33cc:	237c      	moveq	r3, #124	; 0x7c
    33ce:	2640      	movne	r6, #64	; 0x40
    33d0:	2680      	moveq	r6, #128	; 0x80
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Check to see if we need to do the workaround.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    33d2:	2f04      	cmp	r7, #4
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    33d4:	4689      	mov	r9, r1
    33d6:	4690      	mov	r8, r2
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    33d8:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208

    //
    // Check to see if we need to do the workaround.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    33dc:	d004      	beq.n	33e8 <am_hal_iom_spi_write_nb.part.6+0x48>
    uint32_t ui32Index;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    33de:	2f05      	cmp	r7, #5
    33e0:	d908      	bls.n	33f4 <am_hal_iom_spi_write_nb.part.6+0x54>
            am_hal_iom_spi_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32ChipSelect,
                                   ui32NumBytes, ui32Options);
        }
    }
    return ui32Status;
}
    33e2:	2000      	movs	r0, #0
    33e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
isRevB0(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    33e8:	4a5b      	ldr	r2, [pc, #364]	; (3558 <am_hal_iom_spi_write_nb.part.6+0x1b8>)
    33ea:	6811      	ldr	r1, [r2, #0]
    33ec:	b2c8      	uxtb	r0, r1
    33ee:	2820      	cmp	r0, #32
    33f0:	f000 8093 	beq.w	351a <am_hal_iom_spi_write_nb.part.6+0x17a>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    33f4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    33f8:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    else
    {
        //
        // Figure out how many bytes we can write to the FIFO immediately.
        //
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    33fc:	42ae      	cmp	r6, r5
    33fe:	bf28      	it	cs
    3400:	462e      	movcs	r6, r5
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3402:	f013 0f08 	tst.w	r3, #8
    3406:	bf14      	ite	ne
    3408:	2340      	movne	r3, #64	; 0x40
    340a:	2380      	moveq	r3, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    340c:	1a99      	subs	r1, r3, r2
    340e:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    3412:	4286      	cmp	r6, r0
    3414:	f200 8097 	bhi.w	3546 <am_hal_iom_spi_write_nb.part.6+0x1a6>

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3418:	2e00      	cmp	r6, #0
    341a:	d0e2      	beq.n	33e2 <am_hal_iom_spi_write_nb.part.6+0x42>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    341c:	4642      	mov	r2, r8
    341e:	ea6f 0c08 	mvn.w	ip, r8
    3422:	f852 3b04 	ldr.w	r3, [r2], #4
    3426:	6023      	str	r3, [r4, #0]
    3428:	44c4      	add	ip, r8

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    342a:	ebc8 0102 	rsb	r1, r8, r2
    342e:	44b4      	add	ip, r6
    3430:	428e      	cmp	r6, r1
    3432:	f3cc 0082 	ubfx	r0, ip, #2, #3
    3436:	d942      	bls.n	34be <am_hal_iom_spi_write_nb.part.6+0x11e>
    3438:	b320      	cbz	r0, 3484 <am_hal_iom_spi_write_nb.part.6+0xe4>
    343a:	2801      	cmp	r0, #1
    343c:	d01b      	beq.n	3476 <am_hal_iom_spi_write_nb.part.6+0xd6>
    343e:	2802      	cmp	r0, #2
    3440:	d016      	beq.n	3470 <am_hal_iom_spi_write_nb.part.6+0xd0>
    3442:	2803      	cmp	r0, #3
    3444:	d011      	beq.n	346a <am_hal_iom_spi_write_nb.part.6+0xca>
    3446:	2804      	cmp	r0, #4
    3448:	d00c      	beq.n	3464 <am_hal_iom_spi_write_nb.part.6+0xc4>
    344a:	2805      	cmp	r0, #5
    344c:	d007      	beq.n	345e <am_hal_iom_spi_write_nb.part.6+0xbe>
    344e:	2806      	cmp	r0, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3450:	bf1c      	itt	ne
    3452:	f852 0b04 	ldrne.w	r0, [r2], #4
    3456:	6020      	strne	r0, [r4, #0]
    3458:	f852 3b04 	ldr.w	r3, [r2], #4
    345c:	6023      	str	r3, [r4, #0]
    345e:	f852 1b04 	ldr.w	r1, [r2], #4
    3462:	6021      	str	r1, [r4, #0]
    3464:	f852 0b04 	ldr.w	r0, [r2], #4
    3468:	6020      	str	r0, [r4, #0]
    346a:	f852 3b04 	ldr.w	r3, [r2], #4
    346e:	6023      	str	r3, [r4, #0]
    3470:	f852 1b04 	ldr.w	r1, [r2], #4
    3474:	6021      	str	r1, [r4, #0]
    3476:	f852 0b04 	ldr.w	r0, [r2], #4
    347a:	6020      	str	r0, [r4, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    347c:	ebc8 0c02 	rsb	ip, r8, r2
    3480:	4566      	cmp	r6, ip
    3482:	d91c      	bls.n	34be <am_hal_iom_spi_write_nb.part.6+0x11e>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3484:	4611      	mov	r1, r2
    3486:	3220      	adds	r2, #32
    3488:	f851 3b04 	ldr.w	r3, [r1], #4
    348c:	6023      	str	r3, [r4, #0]
    348e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    3492:	6020      	str	r0, [r4, #0]
    3494:	6849      	ldr	r1, [r1, #4]
    3496:	6021      	str	r1, [r4, #0]
    3498:	f852 3c14 	ldr.w	r3, [r2, #-20]
    349c:	6023      	str	r3, [r4, #0]
    349e:	f852 0c10 	ldr.w	r0, [r2, #-16]
    34a2:	6020      	str	r0, [r4, #0]
    34a4:	f852 1c0c 	ldr.w	r1, [r2, #-12]
    34a8:	6021      	str	r1, [r4, #0]
    34aa:	f852 3c08 	ldr.w	r3, [r2, #-8]
    34ae:	6023      	str	r3, [r4, #0]
    34b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
    34b4:	6020      	str	r0, [r4, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    34b6:	ebc8 0102 	rsb	r1, r8, r2
    34ba:	428e      	cmp	r6, r1
    34bc:	d8e2      	bhi.n	3484 <am_hal_iom_spi_write_nb.part.6+0xe4>
        if ( am_hal_iom_fifo_write(ui32Module, pui32Data, ui32TransferSize) > 0 )
        {
            //
            // Prepare the global IOM buffer structure.
            //
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    34be:	4a27      	ldr	r2, [pc, #156]	; (355c <am_hal_iom_spi_write_nb.part.6+0x1bc>)
    34c0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    34c4:	00b8      	lsls	r0, r7, #2
    34c6:	1813      	adds	r3, r2, r0
            //
            // Update the pointer and the byte counter based on the portion of
            // the transfer we just sent to the fifo.
            //
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    34c8:	f026 0703 	bic.w	r7, r6, #3
        if ( am_hal_iom_fifo_write(ui32Module, pui32Data, ui32TransferSize) > 0 )
        {
            //
            // Prepare the global IOM buffer structure.
            //
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    34cc:	2101      	movs	r1, #1
    34ce:	5011      	str	r1, [r2, r0]

            //
            // Update the pointer and the byte counter based on the portion of
            // the transfer we just sent to the fifo.
            //
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    34d0:	1bae      	subs	r6, r5, r6
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    34d2:	4447      	add	r7, r8
            // Prepare the global IOM buffer structure.
            //
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
            g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
            g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    34d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    34d6:	9808      	ldr	r0, [sp, #32]
            // Prepare the global IOM buffer structure.
            //
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
            g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
            g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    34d8:	611a      	str	r2, [r3, #16]
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    34da:	60d8      	str	r0, [r3, #12]

            //
            // Update the pointer and the byte counter based on the portion of
            // the transfer we just sent to the fifo.
            //
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    34dc:	609e      	str	r6, [r3, #8]
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    34de:	605f      	str	r7, [r3, #4]
                       uint32_t ui32ChipSelect, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    uint32_t ui32Command;

    am_hal_debug_assert_msg(ui32NumBytes > 0,
    34e0:	b92d      	cbnz	r5, 34ee <am_hal_iom_spi_write_nb.part.6+0x14e>
    34e2:	4a1f      	ldr	r2, [pc, #124]	; (3560 <am_hal_iom_spi_write_nb.part.6+0x1c0>)
    34e4:	481f      	ldr	r0, [pc, #124]	; (3564 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    34e6:	f640 219c 	movw	r1, #2716	; 0xa9c
    34ea:	f7fe fdd7 	bl	209c <am_hal_debug_error>
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    34ee:	9b08      	ldr	r3, [sp, #32]
    34f0:	ea4f 4109 	mov.w	r1, r9, lsl #16
    34f4:	f023 4723 	bic.w	r7, r3, #2734686208	; 0xa3000000
    34f8:	f401 26e0 	and.w	r6, r1, #458752	; 0x70000
    34fc:	f007 22ff 	and.w	r2, r7, #4278255360	; 0xff00ff00
    3500:	b2e9      	uxtb	r1, r5
    3502:	ea46 0002 	orr.w	r0, r6, r2
    3506:	03ed      	lsls	r5, r5, #15
    3508:	4308      	orrs	r0, r1
    350a:	f005 63f0 	and.w	r3, r5, #125829120	; 0x7800000
    350e:	4303      	orrs	r3, r0


    //
    // Write the complete command word to the IOM command register.
    //
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    3510:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            am_hal_iom_spi_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32ChipSelect,
                                   ui32NumBytes, ui32Options);
        }
    }
    return ui32Status;
}
    3514:	2000      	movs	r0, #0
    3516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    {
        //
        // Figure out how many bytes we can write to the FIFO immediately,
        // accounting for the extra word from the workaround.
        //
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ?  ui32NumBytes :
    351a:	42ab      	cmp	r3, r5
    351c:	bf28      	it	cs
    351e:	462b      	movcs	r3, r5
                            (ui32MaxFifoSize - 4));

        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    3520:	4e0e      	ldr	r6, [pc, #56]	; (355c <am_hal_iom_spi_write_nb.part.6+0x1bc>)
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    3522:	f023 0703 	bic.w	r7, r3, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    3526:	1aec      	subs	r4, r5, r3

        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    3528:	4447      	add	r7, r8
        //
        // Start the write on the bus using the workaround. This includes both
        // the command write and the first fifo write, so we won't need to do
        // either of those things manually.
        //
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    352a:	462a      	mov	r2, r5
    352c:	9b08      	ldr	r3, [sp, #32]
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    352e:	9d09      	ldr	r5, [sp, #36]	; 0x24

        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    3530:	6577      	str	r7, [r6, #84]	; 0x54
        //
        // Start the write on the bus using the workaround. This includes both
        // the command write and the first fifo write, so we won't need to do
        // either of those things manually.
        //
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3532:	4648      	mov	r0, r9
    3534:	4641      	mov	r1, r8
        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    3536:	65b4      	str	r4, [r6, #88]	; 0x58
                            (ui32MaxFifoSize - 4));

        //
        // Prepare the global IOM buffer structure.
        //
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    3538:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    353c:	6635      	str	r5, [r6, #96]	; 0x60
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    353e:	65f3      	str	r3, [r6, #92]	; 0x5c
        //
        // Start the write on the bus using the workaround. This includes both
        // the command write and the first fifo write, so we won't need to do
        // either of those things manually.
        //
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3540:	f7ff fb42 	bl	2bc8 <am_hal_iom_workaround_word_write>
    3544:	e74d      	b.n	33e2 <am_hal_iom_spi_write_nb.part.6+0x42>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3546:	4a08      	ldr	r2, [pc, #32]	; (3568 <am_hal_iom_spi_write_nb.part.6+0x1c8>)
    3548:	4806      	ldr	r0, [pc, #24]	; (3564 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    354a:	f640 7107 	movw	r1, #3847	; 0xf07
    354e:	f7fe fda5 	bl	209c <am_hal_debug_error>
    3552:	e763      	b.n	341c <am_hal_iom_spi_write_nb.part.6+0x7c>
    3554:	10001188 	.word	0x10001188
    3558:	4002000c 	.word	0x4002000c
    355c:	100016e0 	.word	0x100016e0
    3560:	000063c0 	.word	0x000063c0
    3564:	0000630c 	.word	0x0000630c
    3568:	000062d8 	.word	0x000062d8

0000356c <am_hal_iom_spi_read_nb.part.7>:
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3570:	f500 26a0 	add.w	r6, r0, #327680	; 0x50000
    3574:	3604      	adds	r6, #4
    3576:	0336      	lsls	r6, r6, #12
    //
    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    3578:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 3674 <am_hal_iom_spi_read_nb.part.7+0x108>
    357c:	f04f 0801 	mov.w	r8, #1

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3580:	f240 7bff 	movw	fp, #2047	; 0x7ff
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3584:	2804      	cmp	r0, #4
    //
    // Need to mark IOM busy to avoid another transaction to be scheduled.
    // This is to take care of a race condition in Queue mode, where the IDLE
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;
    3586:	f80a 8000 	strb.w	r8, [sl, r0]
//! successfully initiated. The status of the transaction is not known till the
//! callback is called on completion
//
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    358a:	b083      	sub	sp, #12
    358c:	4605      	mov	r5, r0
    358e:	460f      	mov	r7, r1
    3590:	4691      	mov	r9, r2
    3592:	461c      	mov	r4, r3
    // set is not a guarantee that the CMDCMP has been received
    //
    g_bIomBusy[ui32Module] = true;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3594:	f8c6 b208 	str.w	fp, [r6, #520]	; 0x208
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3598:	d02c      	beq.n	35f4 <am_hal_iom_spi_read_nb.part.7+0x88>
    }

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    359a:	482f      	ldr	r0, [pc, #188]	; (3658 <am_hal_iom_spi_read_nb.part.7+0xec>)
    359c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    35a0:	00aa      	lsls	r2, r5, #2
    35a2:	1883      	adds	r3, r0, r2
    35a4:	2102      	movs	r1, #2
    35a6:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    35a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    35aa:	980c      	ldr	r0, [sp, #48]	; 0x30

    //
    // Prepare the global IOM buffer structure.
    //
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    35ac:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    35b0:	609c      	str	r4, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    35b2:	611d      	str	r5, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    35b4:	60d8      	str	r0, [r3, #12]
                       uint32_t ui32ChipSelect, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    uint32_t ui32Command;

    am_hal_debug_assert_msg(ui32NumBytes > 0,
    35b6:	b92c      	cbnz	r4, 35c4 <am_hal_iom_spi_read_nb.part.7+0x58>
    35b8:	4a28      	ldr	r2, [pc, #160]	; (365c <am_hal_iom_spi_read_nb.part.7+0xf0>)
    35ba:	4829      	ldr	r0, [pc, #164]	; (3660 <am_hal_iom_spi_read_nb.part.7+0xf4>)
    35bc:	f640 219c 	movw	r1, #2716	; 0xa9c
    35c0:	f7fe fd6c 	bl	209c <am_hal_debug_error>
    //
    // Set the transfer length (the length field is split, so this requires
    // some swizzling).
    //
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ui32Command |= (ui32NumBytes & 0xFF);
    35c4:	03e2      	lsls	r2, r4, #15
    35c6:	fa5f fc84 	uxtb.w	ip, r4
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    35ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    //
    // Set the transfer length (the length field is split, so this requires
    // some swizzling).
    //
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ui32Command |= (ui32NumBytes & 0xFF);
    35cc:	f002 61f0 	and.w	r1, r2, #125829120	; 0x7800000
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    35d0:	043f      	lsls	r7, r7, #16
    //
    // Set the transfer length (the length field is split, so this requires
    // some swizzling).
    //
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ui32Command |= (ui32NumBytes & 0xFF);
    35d2:	f04c 4400 	orr.w	r4, ip, #2147483648	; 0x80000000
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    35d6:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    35da:	f407 25e0 	and.w	r5, r7, #458752	; 0x70000
    //
    // Set the transfer length (the length field is split, so this requires
    // some swizzling).
    //
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ui32Command |= (ui32NumBytes & 0xFF);
    35de:	430c      	orrs	r4, r1
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    35e0:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    35e4:	4325      	orrs	r5, r4
    35e6:	4315      	orrs	r5, r2


    //
    // Write the complete command word to the IOM command register.
    //
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    35e8:	f8c6 5110 	str.w	r5, [r6, #272]	; 0x110
    // Start the read transaction on the bus.
    //
    am_hal_iom_spi_cmd_run(AM_HAL_IOM_READ, ui32Module, ui32ChipSelect,
                           ui32NumBytes, ui32Options);

    return ui32Status;
    35ec:	2000      	movs	r0, #0
}
    35ee:	b003      	add	sp, #12
    35f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    35f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35f6:	f013 4180 	ands.w	r1, r3, #1073741824	; 0x40000000
    35fa:	d1ce      	bne.n	359a <am_hal_iom_spi_read_nb.part.7+0x2e>
isRevB0(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    35fc:	4819      	ldr	r0, [pc, #100]	; (3664 <am_hal_iom_spi_read_nb.part.7+0xf8>)
    35fe:	6802      	ldr	r2, [r0, #0]
    3600:	b2d3      	uxtb	r3, r2
    3602:	2b20      	cmp	r3, #32
    3604:	d1c9      	bne.n	359a <am_hal_iom_spi_read_nb.part.7+0x2e>
        //
        // We might mess up the interrupt handler behavior if we allow this
        // polled transaction to complete with interrupts enabled. We'll
        // briefly turn them off here.
        //
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    3606:	4818      	ldr	r0, [pc, #96]	; (3668 <am_hal_iom_spi_read_nb.part.7+0xfc>)
    3608:	6803      	ldr	r3, [r0, #0]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    360a:	4817      	ldr	r0, [pc, #92]	; (3668 <am_hal_iom_spi_read_nb.part.7+0xfc>)
        //
        // We might mess up the interrupt handler behavior if we allow this
        // polled transaction to complete with interrupts enabled. We'll
        // briefly turn them off here.
        //
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    360c:	9301      	str	r3, [sp, #4]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    360e:	6001      	str	r1, [r0, #0]

        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3610:	460a      	mov	r2, r1
    3612:	990c      	ldr	r1, [sp, #48]	; 0x30
    3614:	4638      	mov	r0, r7
    3616:	f041 5380 	orr.w	r3, r1, #268435456	; 0x10000000
    361a:	4649      	mov	r1, r9
    361c:	f7ff fad4 	bl	2bc8 <am_hal_iom_workaround_word_write>

        //
        // Wait for the dummy word to go out over the bus.
        //
        // Make sure the command complete has also been raised
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3620:	4a12      	ldr	r2, [pc, #72]	; (366c <am_hal_iom_spi_read_nb.part.7+0x100>)
    3622:	4643      	mov	r3, r8
    3624:	6910      	ldr	r0, [r2, #16]
    3626:	f506 7101 	add.w	r1, r6, #516	; 0x204
    362a:	4642      	mov	r2, r8
    362c:	f7fe fd3e 	bl	20ac <am_hal_flash_delay_status_change>
                     AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                     AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

        if (waitStatus != 1)
    3630:	2801      	cmp	r0, #1
    3632:	d004      	beq.n	363e <am_hal_iom_spi_read_nb.part.7+0xd2>
        {
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3634:	4e0e      	ldr	r6, [pc, #56]	; (3670 <am_hal_iom_spi_read_nb.part.7+0x104>)
            return ui32Status;
    3636:	4640      	mov	r0, r8
                     AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                     AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

        if (waitStatus != 1)
        {
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3638:	f886 8004 	strb.w	r8, [r6, #4]
    363c:	e7d7      	b.n	35ee <am_hal_iom_spi_read_nb.part.7+0x82>

        //
        // The workaround will send our offset for us, so we can run a RAW
        // command after.
        //
        ui32Options |= AM_HAL_IOM_RAW;
    363e:	9b0c      	ldr	r3, [sp, #48]	; 0x30

        //
        // Re-enable IOM interrupts. Make sure CMDCMP is cleared
        //
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    3640:	4909      	ldr	r1, [pc, #36]	; (3668 <am_hal_iom_spi_read_nb.part.7+0xfc>)

        //
        // Re-mark IOM as busy
        //

        g_bIomBusy[ui32Module] = true;
    3642:	f88a 0004 	strb.w	r0, [sl, #4]

        //
        // Re-enable IOM interrupts. Make sure CMDCMP is cleared
        //
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    3646:	9a01      	ldr	r2, [sp, #4]
        g_bIomBusy[ui32Module] = true;

        //
        // Re-enable IOM interrupts. Make sure CMDCMP is cleared
        //
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3648:	f8c6 b208 	str.w	fp, [r6, #520]	; 0x208

        //
        // The workaround will send our offset for us, so we can run a RAW
        // command after.
        //
        ui32Options |= AM_HAL_IOM_RAW;
    364c:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    3650:	900c      	str	r0, [sp, #48]	; 0x30

        //
        // Re-enable IOM interrupts. Make sure CMDCMP is cleared
        //
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    3652:	600a      	str	r2, [r1, #0]
    3654:	e7a1      	b.n	359a <am_hal_iom_spi_read_nb.part.7+0x2e>
    3656:	bf00      	nop
    3658:	100016e0 	.word	0x100016e0
    365c:	000063c0 	.word	0x000063c0
    3660:	0000630c 	.word	0x0000630c
    3664:	4002000c 	.word	0x4002000c
    3668:	50008200 	.word	0x50008200
    366c:	100016c8 	.word	0x100016c8
    3670:	10001180 	.word	0x10001180
    3674:	10001188 	.word	0x10001188

00003678 <am_hal_iom_spi_write_nq>:
    uint32_t waitStatus;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3678:	2805      	cmp	r0, #5
    367a:	d901      	bls.n	3680 <am_hal_iom_spi_write_nq+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    367c:	2002      	movs	r0, #2
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;

    return ui32Status;
}
    367e:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write_nq(uint32_t ui32Module, uint32_t ui32ChipSelect,
                        uint32_t *pui32Data, uint32_t ui32NumBytes,
                        uint32_t ui32Options)
{
    3680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3684:	4cbf      	ldr	r4, [pc, #764]	; (3984 <am_hal_iom_spi_write_nq+0x30c>)
    3686:	b083      	sub	sp, #12
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    3688:	5c25      	ldrb	r5, [r4, r0]
    368a:	f005 06ff 	and.w	r6, r5, #255	; 0xff
    368e:	2d00      	cmp	r5, #0
    3690:	d1fa      	bne.n	3688 <am_hal_iom_spi_write_nq+0x10>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3692:	f8df 9304 	ldr.w	r9, [pc, #772]	; 3998 <am_hal_iom_spi_write_nq+0x320>
    if (ui32NumBytes == 0)
    3696:	1e5f      	subs	r7, r3, #1
    3698:	f640 78fe 	movw	r8, #4094	; 0xffe
    369c:	4547      	cmp	r7, r8
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    369e:	f809 6000 	strb.w	r6, [r9, r0]
    if (ui32NumBytes == 0)
    36a2:	d907      	bls.n	36b4 <am_hal_iom_spi_write_nq+0x3c>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    36a4:	f04f 0b03 	mov.w	fp, #3
    36a8:	f809 b000 	strb.w	fp, [r9, r0]
        return ui32Status;
    36ac:	4658      	mov	r0, fp
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;

    return ui32Status;
}
    36ae:	b003      	add	sp, #12
    36b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36b4:	4604      	mov	r4, r0
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    36b6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    36ba:	3004      	adds	r0, #4
    36bc:	0307      	lsls	r7, r0, #12
    36be:	461d      	mov	r5, r3
    36c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
    36c4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    36c8:	2800      	cmp	r0, #0
    36ca:	4690      	mov	r8, r2
    36cc:	468b      	mov	fp, r1
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    36ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    36d2:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    36d6:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    36da:	bf15      	itete	ne
    36dc:	f04f 0e3c 	movne.w	lr, #60	; 0x3c
    36e0:	f04f 0e7c 	moveq.w	lr, #124	; 0x7c
    36e4:	2640      	movne	r6, #64	; 0x40
    36e6:	2680      	moveq	r6, #128	; 0x80
    // get that first byte out of the way.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    36e8:	2c04      	cmp	r4, #4
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    36ea:	9100      	str	r1, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    36ec:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    36f0:	f507 7a8e 	add.w	sl, r7, #284	; 0x11c
    // get that first byte out of the way.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    36f4:	f000 8122 	beq.w	393c <am_hal_iom_spi_write_nq+0x2c4>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    36f8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    36fc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3700:	f010 0f08 	tst.w	r0, #8
    3704:	bf14      	ite	ne
    3706:	2040      	movne	r0, #64	; 0x40
    3708:	2080      	moveq	r0, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    370a:	1a83      	subs	r3, r0, r2
    else
    {
        //
        // Figure out how many bytes we can write to the FIFO immediately.
        //
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    370c:	42ae      	cmp	r6, r5
    370e:	bf28      	it	cs
    3710:	462e      	movcs	r6, r5
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3712:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
    3716:	428e      	cmp	r6, r1
    3718:	f200 8140 	bhi.w	399c <am_hal_iom_spi_write_nq+0x324>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    371c:	4640      	mov	r0, r8
    371e:	ea6f 0c08 	mvn.w	ip, r8
    3722:	f850 2b04 	ldr.w	r2, [r0], #4
    3726:	603a      	str	r2, [r7, #0]
    3728:	44c4      	add	ip, r8

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    372a:	ebc8 0300 	rsb	r3, r8, r0
    372e:	44b4      	add	ip, r6
    3730:	429e      	cmp	r6, r3
    3732:	f3cc 0182 	ubfx	r1, ip, #2, #3
    3736:	d943      	bls.n	37c0 <am_hal_iom_spi_write_nq+0x148>
    3738:	b321      	cbz	r1, 3784 <am_hal_iom_spi_write_nq+0x10c>
    373a:	2901      	cmp	r1, #1
    373c:	d01b      	beq.n	3776 <am_hal_iom_spi_write_nq+0xfe>
    373e:	2902      	cmp	r1, #2
    3740:	d016      	beq.n	3770 <am_hal_iom_spi_write_nq+0xf8>
    3742:	2903      	cmp	r1, #3
    3744:	d011      	beq.n	376a <am_hal_iom_spi_write_nq+0xf2>
    3746:	2904      	cmp	r1, #4
    3748:	d00c      	beq.n	3764 <am_hal_iom_spi_write_nq+0xec>
    374a:	2905      	cmp	r1, #5
    374c:	d007      	beq.n	375e <am_hal_iom_spi_write_nq+0xe6>
    374e:	2906      	cmp	r1, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3750:	bf1c      	itt	ne
    3752:	f850 1b04 	ldrne.w	r1, [r0], #4
    3756:	6039      	strne	r1, [r7, #0]
    3758:	f850 2b04 	ldr.w	r2, [r0], #4
    375c:	603a      	str	r2, [r7, #0]
    375e:	f850 3b04 	ldr.w	r3, [r0], #4
    3762:	603b      	str	r3, [r7, #0]
    3764:	f850 1b04 	ldr.w	r1, [r0], #4
    3768:	6039      	str	r1, [r7, #0]
    376a:	f850 2b04 	ldr.w	r2, [r0], #4
    376e:	603a      	str	r2, [r7, #0]
    3770:	f850 3b04 	ldr.w	r3, [r0], #4
    3774:	603b      	str	r3, [r7, #0]
    3776:	f850 1b04 	ldr.w	r1, [r0], #4
    377a:	6039      	str	r1, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    377c:	ebc8 0e00 	rsb	lr, r8, r0
    3780:	4576      	cmp	r6, lr
    3782:	d91d      	bls.n	37c0 <am_hal_iom_spi_write_nq+0x148>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3784:	4684      	mov	ip, r0
    3786:	3020      	adds	r0, #32
    3788:	f85c 2b04 	ldr.w	r2, [ip], #4
    378c:	603a      	str	r2, [r7, #0]
    378e:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    3792:	603b      	str	r3, [r7, #0]
    3794:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3798:	6039      	str	r1, [r7, #0]
    379a:	f850 2c14 	ldr.w	r2, [r0, #-20]
    379e:	603a      	str	r2, [r7, #0]
    37a0:	f850 3c10 	ldr.w	r3, [r0, #-16]
    37a4:	603b      	str	r3, [r7, #0]
    37a6:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    37aa:	6039      	str	r1, [r7, #0]
    37ac:	f850 2c08 	ldr.w	r2, [r0, #-8]
    37b0:	603a      	str	r2, [r7, #0]
    37b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    37b6:	603b      	str	r3, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    37b8:	ebc8 0100 	rsb	r1, r8, r0
    37bc:	428e      	cmp	r6, r1
    37be:	d8e1      	bhi.n	3784 <am_hal_iom_spi_write_nq+0x10c>
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    37c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37c2:	ea4f 400b 	mov.w	r0, fp, lsl #16
    37c6:	f400 23e0 	and.w	r3, r0, #458752	; 0x70000
    37ca:	b2e9      	uxtb	r1, r5
    37cc:	f022 4023 	bic.w	r0, r2, #2734686208	; 0xa3000000
    37d0:	4319      	orrs	r1, r3
    37d2:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    37d6:	03eb      	lsls	r3, r5, #15
    37d8:	430a      	orrs	r2, r1
    37da:	f003 61f0 	and.w	r1, r3, #125829120	; 0x7800000
    37de:	4311      	orrs	r1, r2


    //
    // Write the complete command word to the IOM command register.
    //
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    37e0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110

    //
    // Update the pointer and data counter.
    //
    ui32NumBytes -= ui32TransferSize;
    pui32Data += ui32TransferSize >> 2;
    37e4:	f026 0e03 	bic.w	lr, r6, #3

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    37e8:	1bae      	subs	r6, r5, r6

    //
    // Update the pointer and data counter.
    //
    ui32NumBytes -= ui32TransferSize;
    pui32Data += ui32TransferSize >> 2;
    37ea:	44f0      	add	r8, lr

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    37ec:	f000 80df 	beq.w	39ae <am_hal_iom_spi_write_nq+0x336>
    37f0:	f8d7 5204 	ldr.w	r5, [r7, #516]	; 0x204
    37f4:	07e9      	lsls	r1, r5, #31
    37f6:	f507 7b01 	add.w	fp, r7, #516	; 0x204
    37fa:	f100 8081 	bmi.w	3900 <am_hal_iom_spi_write_nq+0x288>
    37fe:	4620      	mov	r0, r4
    3800:	f507 7c80 	add.w	ip, r7, #256	; 0x100
    3804:	4664      	mov	r4, ip
    3806:	4603      	mov	r3, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3808:	f8da 2000 	ldr.w	r2, [sl]
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    380c:	6821      	ldr	r1, [r4, #0]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    380e:	f8da 0000 	ldr.w	r0, [sl]
    3812:	f012 0f08 	tst.w	r2, #8
    3816:	bf14      	ite	ne
    3818:	2240      	movne	r2, #64	; 0x40
    381a:	2280      	moveq	r2, #128	; 0x80
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    {
        //
        // This will always return a multiple of four.
        //
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    381c:	1a55      	subs	r5, r2, r1
    381e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc

        if ( ui32NumBytes <= ui32SpaceInFifo )
    3822:	42b5      	cmp	r5, r6
        {
            //
            // If only a portion of the message will fit in the fifo, prepare
            // to copy the largest number of 4-byte blocks possible.
            //
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
    3824:	bf35      	itete	cc
    3826:	f025 0503 	biccc.w	r5, r5, #3
        //
        // This will always return a multiple of four.
        //
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);

        if ( ui32NumBytes <= ui32SpaceInFifo )
    382a:	4635      	movcs	r5, r6
    382c:	1b76      	subcc	r6, r6, r5
    382e:	2600      	movcs	r6, #0
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3830:	6822      	ldr	r2, [r4, #0]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3832:	f010 0f08 	tst.w	r0, #8
    3836:	bf14      	ite	ne
    3838:	2040      	movne	r0, #64	; 0x40
    383a:	2080      	moveq	r0, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    383c:	1a81      	subs	r1, r0, r2
    383e:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    3842:	4285      	cmp	r5, r0
    3844:	d871      	bhi.n	392a <am_hal_iom_spi_write_nq+0x2b2>

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3846:	2d00      	cmp	r5, #0
    3848:	d051      	beq.n	38ee <am_hal_iom_spi_write_nq+0x276>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    384a:	4642      	mov	r2, r8
    384c:	ea6f 0e08 	mvn.w	lr, r8
    3850:	f852 1b04 	ldr.w	r1, [r2], #4
    3854:	6039      	str	r1, [r7, #0]
    3856:	44c6      	add	lr, r8

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3858:	ebc8 0c02 	rsb	ip, r8, r2
    385c:	44ae      	add	lr, r5
    385e:	4565      	cmp	r5, ip
    3860:	f3ce 0082 	ubfx	r0, lr, #2, #3
    3864:	d943      	bls.n	38ee <am_hal_iom_spi_write_nq+0x276>
    3866:	b320      	cbz	r0, 38b2 <am_hal_iom_spi_write_nq+0x23a>
    3868:	2801      	cmp	r0, #1
    386a:	d01b      	beq.n	38a4 <am_hal_iom_spi_write_nq+0x22c>
    386c:	2802      	cmp	r0, #2
    386e:	d016      	beq.n	389e <am_hal_iom_spi_write_nq+0x226>
    3870:	2803      	cmp	r0, #3
    3872:	d011      	beq.n	3898 <am_hal_iom_spi_write_nq+0x220>
    3874:	2804      	cmp	r0, #4
    3876:	d00c      	beq.n	3892 <am_hal_iom_spi_write_nq+0x21a>
    3878:	2805      	cmp	r0, #5
    387a:	d007      	beq.n	388c <am_hal_iom_spi_write_nq+0x214>
    387c:	2806      	cmp	r0, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    387e:	bf1c      	itt	ne
    3880:	f852 0b04 	ldrne.w	r0, [r2], #4
    3884:	6038      	strne	r0, [r7, #0]
    3886:	f852 1b04 	ldr.w	r1, [r2], #4
    388a:	6039      	str	r1, [r7, #0]
    388c:	f852 0b04 	ldr.w	r0, [r2], #4
    3890:	6038      	str	r0, [r7, #0]
    3892:	f852 1b04 	ldr.w	r1, [r2], #4
    3896:	6039      	str	r1, [r7, #0]
    3898:	f852 0b04 	ldr.w	r0, [r2], #4
    389c:	6038      	str	r0, [r7, #0]
    389e:	f852 1b04 	ldr.w	r1, [r2], #4
    38a2:	6039      	str	r1, [r7, #0]
    38a4:	f852 0b04 	ldr.w	r0, [r2], #4
    38a8:	6038      	str	r0, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    38aa:	ebc8 0e02 	rsb	lr, r8, r2
    38ae:	4575      	cmp	r5, lr
    38b0:	d91d      	bls.n	38ee <am_hal_iom_spi_write_nq+0x276>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    38b2:	4694      	mov	ip, r2
    38b4:	3220      	adds	r2, #32
    38b6:	f85c 1b04 	ldr.w	r1, [ip], #4
    38ba:	6039      	str	r1, [r7, #0]
    38bc:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    38c0:	6038      	str	r0, [r7, #0]
    38c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    38c6:	6039      	str	r1, [r7, #0]
    38c8:	f852 0c14 	ldr.w	r0, [r2, #-20]
    38cc:	6038      	str	r0, [r7, #0]
    38ce:	f852 1c10 	ldr.w	r1, [r2, #-16]
    38d2:	6039      	str	r1, [r7, #0]
    38d4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    38d8:	6038      	str	r0, [r7, #0]
    38da:	f852 1c08 	ldr.w	r1, [r2, #-8]
    38de:	6039      	str	r1, [r7, #0]
    38e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
    38e4:	6038      	str	r0, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    38e6:	ebc8 0e02 	rsb	lr, r8, r2
    38ea:	4575      	cmp	r5, lr
    38ec:	d8e1      	bhi.n	38b2 <am_hal_iom_spi_write_nq+0x23a>

        //
        // Update the data pointer and bytes-left count.
        //
        ui32NumBytes -= ui32TransferSize;
        pui32Data += ui32TransferSize >> 2;
    38ee:	f025 0203 	bic.w	r2, r5, #3
    38f2:	4490      	add	r8, r2
    pui32Data += ui32TransferSize >> 2;

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    38f4:	b11e      	cbz	r6, 38fe <am_hal_iom_spi_write_nq+0x286>
    38f6:	f8db 5000 	ldr.w	r5, [fp]
    38fa:	07ea      	lsls	r2, r5, #31
    38fc:	d584      	bpl.n	3808 <am_hal_iom_spi_write_nq+0x190>
    38fe:	461c      	mov	r4, r3
    }

    //
    // Make sure CMDCMP was raised with standard timeout
    //
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3900:	4e21      	ldr	r6, [pc, #132]	; (3988 <am_hal_iom_spi_write_nq+0x310>)
    3902:	2301      	movs	r3, #1
    3904:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    3908:	461a      	mov	r2, r3
    390a:	4659      	mov	r1, fp
    390c:	f7fe fbce 	bl	20ac <am_hal_flash_delay_status_change>
                 AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                 AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

    if (waitStatus != 1)
    3910:	2801      	cmp	r0, #1
    3912:	d024      	beq.n	395e <am_hal_iom_spi_write_nq+0x2e6>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3914:	2001      	movs	r0, #1
    3916:	f809 0004 	strb.w	r0, [r9, r4]

    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    391a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    391e:	9a00      	ldr	r2, [sp, #0]

    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3920:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3924:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
    3928:	e6c1      	b.n	36ae <am_hal_iom_spi_write_nq+0x36>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    392a:	4a18      	ldr	r2, [pc, #96]	; (398c <am_hal_iom_spi_write_nq+0x314>)
    392c:	4818      	ldr	r0, [pc, #96]	; (3990 <am_hal_iom_spi_write_nq+0x318>)
    392e:	9301      	str	r3, [sp, #4]
    3930:	f640 7107 	movw	r1, #3847	; 0xf07
    3934:	f7fe fbb2 	bl	209c <am_hal_debug_error>
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	e786      	b.n	384a <am_hal_iom_spi_write_nq+0x1d2>
isRevB0(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    393c:	4a15      	ldr	r2, [pc, #84]	; (3994 <am_hal_iom_spi_write_nq+0x31c>)
    393e:	6813      	ldr	r3, [r2, #0]
    3940:	b2d9      	uxtb	r1, r3
    3942:	2920      	cmp	r1, #32
    3944:	f47f aed8 	bne.w	36f8 <am_hal_iom_spi_write_nq+0x80>
        // The workaround function is going to a partial transfer for us, but
        // we have to keep our own data-tracking variables updated. Here, we're
        // subtracting 4 bytes from the effective transfer size to account for
        // the 4 bytes of "dummy" word that we sent instead of the actual data.
        //
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    3948:	45ae      	cmp	lr, r5
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    {
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    394a:	4658      	mov	r0, fp
    394c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    394e:	462a      	mov	r2, r5
    3950:	4641      	mov	r1, r8
        // The workaround function is going to a partial transfer for us, but
        // we have to keep our own data-tracking variables updated. Here, we're
        // subtracting 4 bytes from the effective transfer size to account for
        // the 4 bytes of "dummy" word that we sent instead of the actual data.
        //
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    3952:	4676      	mov	r6, lr
    3954:	bf28      	it	cs
    3956:	462e      	movcs	r6, r5
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    {
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3958:	f7ff f936 	bl	2bc8 <am_hal_iom_workaround_word_write>
    395c:	e742      	b.n	37e4 <am_hal_iom_spi_write_nq+0x16c>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    395e:	f8db 3000 	ldr.w	r3, [fp]
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3962:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3966:	bf18      	it	ne
    3968:	2005      	movne	r0, #5
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    396a:	d002      	beq.n	3972 <am_hal_iom_spi_write_nq+0x2fa>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    }
    else
    {
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    396c:	f809 0004 	strb.w	r0, [r9, r4]
    3970:	e7d3      	b.n	391a <am_hal_iom_spi_write_nq+0x2a2>
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    3972:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    3976:	d118      	bne.n	39aa <am_hal_iom_spi_write_nq+0x332>
//!
//*****************************************************************************
static am_hal_iom_status_e
internal_iom_get_int_err(uint32_t ui32Module, uint32_t ui32IntStatus)
{
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    3978:	f013 0f10 	tst.w	r3, #16
    397c:	bf14      	ite	ne
    397e:	2006      	movne	r0, #6
    3980:	2000      	moveq	r0, #0
    3982:	e7f3      	b.n	396c <am_hal_iom_spi_write_nq+0x2f4>
    3984:	10001188 	.word	0x10001188
    3988:	100016c8 	.word	0x100016c8
    398c:	000062d8 	.word	0x000062d8
    3990:	0000630c 	.word	0x0000630c
    3994:	4002000c 	.word	0x4002000c
    3998:	10001180 	.word	0x10001180
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    399c:	4a05      	ldr	r2, [pc, #20]	; (39b4 <am_hal_iom_spi_write_nq+0x33c>)
    399e:	4806      	ldr	r0, [pc, #24]	; (39b8 <am_hal_iom_spi_write_nq+0x340>)
    39a0:	f640 7107 	movw	r1, #3847	; 0xf07
    39a4:	f7fe fb7a 	bl	209c <am_hal_debug_error>
    39a8:	e6b8      	b.n	371c <am_hal_iom_spi_write_nq+0xa4>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    {
        // Loss of I2C multi-master arbitration
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    39aa:	2007      	movs	r0, #7
    39ac:	e7de      	b.n	396c <am_hal_iom_spi_write_nq+0x2f4>
    39ae:	f507 7b01 	add.w	fp, r7, #516	; 0x204
    39b2:	e7a5      	b.n	3900 <am_hal_iom_spi_write_nq+0x288>
    39b4:	000062d8 	.word	0x000062d8
    39b8:	0000630c 	.word	0x0000630c

000039bc <am_hal_iom_spi_write>:
{
    am_hal_iom_status_e ui32Status;
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    39bc:	2805      	cmp	r0, #5
    39be:	d901      	bls.n	39c4 <am_hal_iom_spi_write+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    39c0:	2002      	movs	r0, #2
        //
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
                                ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    39c2:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write(uint32_t ui32Module, uint32_t ui32ChipSelect,
                     uint32_t *pui32Data, uint32_t ui32NumBytes,
                     uint32_t ui32Options)
{
    39c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    39c8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3aa4 <am_hal_iom_spi_write+0xe8>
    39cc:	f04f 0e00 	mov.w	lr, #0
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_write(uint32_t ui32Module, uint32_t ui32ChipSelect,
                     uint32_t *pui32Data, uint32_t ui32NumBytes,
                     uint32_t ui32Options)
{
    39d0:	b08d      	sub	sp, #52	; 0x34
    39d2:	4604      	mov	r4, r0
    39d4:	461d      	mov	r5, r3
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    39d6:	f808 e000 	strb.w	lr, [r8, r0]
    if (ui32NumBytes == 0)
    39da:	b92b      	cbnz	r3, 39e8 <am_hal_iom_spi_write+0x2c>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    39dc:	2003      	movs	r0, #3
    39de:	f808 0004 	strb.w	r0, [r8, r4]
        //
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
                                ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    39e2:	b00d      	add	sp, #52	; 0x34
    39e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    //
    // Check to see if queues have been enabled. If they are, we'll actually
    // switch to the queued interface.
    //
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    39e8:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    39ec:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 3aa8 <am_hal_iom_spi_write+0xec>
    39f0:	9103      	str	r1, [sp, #12]
    39f2:	eb0a 0700 	add.w	r7, sl, r0
    39f6:	eb0b 09c7 	add.w	r9, fp, r7, lsl #3
    39fa:	f8d9 6014 	ldr.w	r6, [r9, #20]
    39fe:	2e00      	cmp	r6, #0
    3a00:	d046      	beq.n	3a90 <am_hal_iom_spi_write+0xd4>
    3a02:	4617      	mov	r7, r2
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3a04:	f7fe fcd0 	bl	23a8 <am_hal_interrupt_master_disable>
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    3a08:	4b24      	ldr	r3, [pc, #144]	; (3a9c <am_hal_iom_spi_write+0xe0>)
    3a0a:	5d1a      	ldrb	r2, [r3, r4]
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3a0c:	4606      	mov	r6, r0
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    3a0e:	b912      	cbnz	r2, 3a16 <am_hal_iom_spi_write+0x5a>
    3a10:	f8d9 0008 	ldr.w	r0, [r9, #8]
    3a14:	b1d0      	cbz	r0, 3a4c <am_hal_iom_spi_write+0x90>
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3a16:	eb0a 0104 	add.w	r1, sl, r4
    3a1a:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    3a1e:	9903      	ldr	r1, [sp, #12]
    3a20:	9107      	str	r1, [sp, #28]
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    3a22:	2300      	movs	r3, #0
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    3a24:	9509      	str	r5, [sp, #36]	; 0x24
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3a26:	2201      	movs	r2, #1
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    3a28:	9d16      	ldr	r5, [sp, #88]	; 0x58
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
    3a2a:	9406      	str	r4, [sp, #24]
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3a2c:	a905      	add	r1, sp, #20
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
    3a2e:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    3a30:	950a      	str	r5, [sp, #40]	; 0x28
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    3a32:	9305      	str	r3, [sp, #20]
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    3a34:	930b      	str	r3, [sp, #44]	; 0x2c

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3a36:	f001 f983 	bl	4d40 <am_hal_queue_item_add>
    3a3a:	b9f8      	cbnz	r0, 3a7c <am_hal_iom_spi_write+0xc0>
        {
            //
            // Didn't have enough memory.
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    3a3c:	2508      	movs	r5, #8
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3a3e:	4630      	mov	r0, r6
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    3a40:	f808 5004 	strb.w	r5, [r8, r4]
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3a44:	f7fe fcb4 	bl	23b0 <am_hal_interrupt_master_set>
    3a48:	4628      	mov	r0, r5
    3a4a:	e7ca      	b.n	39e2 <am_hal_iom_spi_write+0x26>
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    3a4c:	5d1a      	ldrb	r2, [r3, r4]
    3a4e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3a52:	2a00      	cmp	r2, #0
    3a54:	d1fa      	bne.n	3a4c <am_hal_iom_spi_write+0x90>
        return ui32Status;
    }
    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 4096)
    3a56:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status for non-blocking transfer
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3a5a:	f808 0004 	strb.w	r0, [r8, r4]
        return ui32Status;
    }
    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 4096)
    3a5e:	d301      	bcc.n	3a64 <am_hal_iom_spi_write+0xa8>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    3a60:	2503      	movs	r5, #3
    3a62:	e7ec      	b.n	3a3e <am_hal_iom_spi_write+0x82>
    3a64:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3a66:	9001      	str	r0, [sp, #4]
    3a68:	9300      	str	r3, [sp, #0]
    3a6a:	463a      	mov	r2, r7
    3a6c:	462b      	mov	r3, r5
    3a6e:	9903      	ldr	r1, [sp, #12]
    3a70:	4620      	mov	r0, r4
    3a72:	f7ff fc95 	bl	33a0 <am_hal_iom_spi_write_nb.part.6>
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3a76:	4605      	mov	r5, r0
    3a78:	2800      	cmp	r0, #0
    3a7a:	d1e0      	bne.n	3a3e <am_hal_iom_spi_write+0x82>
        if (ui32Status == AM_HAL_IOM_SUCCESS)
        {
            //
            // Wait until the transaction actually clears.
            //
            am_hal_iom_queue_flush(ui32Module);
    3a7c:	4f08      	ldr	r7, [pc, #32]	; (3aa0 <am_hal_iom_spi_write+0xe4>)
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3a7e:	4630      	mov	r0, r6
    3a80:	f7fe fc96 	bl	23b0 <am_hal_interrupt_master_set>
        if (ui32Status == AM_HAL_IOM_SUCCESS)
        {
            //
            // Wait until the transaction actually clears.
            //
            am_hal_iom_queue_flush(ui32Module);
    3a84:	4620      	mov	r0, r4
    3a86:	683e      	ldr	r6, [r7, #0]
    3a88:	47b0      	blx	r6
            // g_iom_error_status gets set in the isr handling
            ui32Status = g_iom_error_status[ui32Module];
    3a8a:	f818 0004 	ldrb.w	r0, [r8, r4]
    3a8e:	e7a8      	b.n	39e2 <am_hal_iom_spi_write+0x26>
    else
    {
        //
        // Otherwise, we'll just do a polled transaction.
        //
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    3a90:	9c16      	ldr	r4, [sp, #88]	; 0x58
    3a92:	9400      	str	r4, [sp, #0]
    3a94:	f7ff fdf0 	bl	3678 <am_hal_iom_spi_write_nq>
    3a98:	e7a3      	b.n	39e2 <am_hal_iom_spi_write+0x26>
    3a9a:	bf00      	nop
    3a9c:	10001188 	.word	0x10001188
    3aa0:	10001068 	.word	0x10001068
    3aa4:	10001180 	.word	0x10001180
    3aa8:	10001758 	.word	0x10001758

00003aac <am_hal_iom_spi_read_nq>:
    uint32_t waitStatus;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3aac:	2805      	cmp	r0, #5
    3aae:	d901      	bls.n	3ab4 <am_hal_iom_spi_read_nq+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3ab0:	2002      	movs	r0, #2
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;

    return ui32Status;

}
    3ab2:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_read_nq(uint32_t ui32Module, uint32_t ui32ChipSelect,
                       uint32_t *pui32Data, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    3ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab8:	4688      	mov	r8, r1
    3aba:	49b9      	ldr	r1, [pc, #740]	; (3da0 <am_hal_iom_spi_read_nq+0x2f4>)
    3abc:	b085      	sub	sp, #20
    3abe:	4604      	mov	r4, r0
    3ac0:	4617      	mov	r7, r2
    3ac2:	461d      	mov	r5, r3
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    3ac4:	5d0b      	ldrb	r3, [r1, r4]
    3ac6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3aca:	2b00      	cmp	r3, #0
    3acc:	d1fa      	bne.n	3ac4 <am_hal_iom_spi_read_nq+0x18>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3ace:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 3db0 <am_hal_iom_spi_read_nq+0x304>
    if (ui32NumBytes == 0)
    3ad2:	1e68      	subs	r0, r5, #1
    3ad4:	f640 76fe 	movw	r6, #4094	; 0xffe
    3ad8:	42b0      	cmp	r0, r6
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3ada:	f80a 2004 	strb.w	r2, [sl, r4]
    if (ui32NumBytes == 0)
    3ade:	d905      	bls.n	3aec <am_hal_iom_spi_read_nq+0x40>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3ae0:	2003      	movs	r0, #3
    3ae2:	f80a 0004 	strb.w	r0, [sl, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;

    return ui32Status;

}
    3ae6:	b005      	add	sp, #20
    3ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    3aec:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
    3af0:	3104      	adds	r1, #4
    3af2:	030b      	lsls	r3, r1, #12
    // Disable IOM interrupts as we'll be polling
    //
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3af4:	f240 79ff 	movw	r9, #2047	; 0x7ff
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    3af8:	f8d3 6200 	ldr.w	r6, [r3, #512]	; 0x200
    3afc:	9300      	str	r3, [sp, #0]
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3afe:	2c04      	cmp	r4, #4
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);

    //
    // Disable IOM interrupts as we'll be polling
    //
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    3b00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    3b04:	4618      	mov	r0, r3
    3b06:	9602      	str	r6, [sp, #8]
    // Disable IOM interrupts as we'll be polling
    //
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3b08:	f8c3 9208 	str.w	r9, [r3, #520]	; 0x208
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3b0c:	f000 8152 	beq.w	3db4 <am_hal_iom_spi_read_nq+0x308>
    3b10:	4aa4      	ldr	r2, [pc, #656]	; (3da4 <am_hal_iom_spi_read_nq+0x2f8>)
    3b12:	9203      	str	r2, [sp, #12]
    3b14:	f503 7b01 	add.w	fp, r3, #516	; 0x204
    3b18:	461e      	mov	r6, r3
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    3b1a:	ea4f 4108 	mov.w	r1, r8, lsl #16
    3b1e:	f401 20e0 	and.w	r0, r1, #458752	; 0x70000
    3b22:	f040 4100 	orr.w	r1, r0, #2147483648	; 0x80000000
    3b26:	b2eb      	uxtb	r3, r5
    3b28:	430b      	orrs	r3, r1
    3b2a:	990e      	ldr	r1, [sp, #56]	; 0x38
                       uint32_t *pui32Data, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    uint32_t ui32BytesInFifo;
    uint32_t ui32IntConfig;
    uint32_t bCmdCmp = false;
    3b2c:	9401      	str	r4, [sp, #4]
    //
    // Finally, OR in the rest of the options. This mask should make sure that
    // erroneous option values won't interfere with the other transfer
    // parameters.
    //
    ui32Command |= ui32Options & 0x5C00FF00;
    3b2e:	03ea      	lsls	r2, r5, #15
    3b30:	f002 60f0 	and.w	r0, r2, #125829120	; 0x7800000
    3b34:	f021 4223 	bic.w	r2, r1, #2734686208	; 0xa3000000
    3b38:	4303      	orrs	r3, r0
    3b3a:	f002 20ff 	and.w	r0, r2, #4278255360	; 0xff00ff00
    3b3e:	4303      	orrs	r3, r0


    //
    // Write the complete command word to the IOM command register.
    //
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    3b40:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    3b44:	f506 7980 	add.w	r9, r6, #256	; 0x100
                       uint32_t *pui32Data, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    uint32_t ui32BytesInFifo;
    uint32_t ui32IntConfig;
    uint32_t bCmdCmp = false;
    3b48:	2300      	movs	r3, #0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3b4a:	f8d9 2000 	ldr.w	r2, [r9]
    3b4e:	b2d4      	uxtb	r4, r2
    //
    while ( ui32NumBytes )
    {
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);

        if ( ui32BytesInFifo >= ui32NumBytes )
    3b50:	42ac      	cmp	r4, r5
    3b52:	f080 8096 	bcs.w	3c82 <am_hal_iom_spi_read_nq+0x1d6>
            // thing out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32NumBytes);
            ui32NumBytes = 0;
        }
        else if ( ui32BytesInFifo >= 4 )
    3b56:	2c03      	cmp	r4, #3
    3b58:	d972      	bls.n	3c40 <am_hal_iom_spi_read_nq+0x194>

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3b5a:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
        {
            //
            // If the fifo has at least one 32-bit word in it, copy whole
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    3b5e:	f002 08fc 	and.w	r8, r2, #252	; 0xfc

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3b62:	070a      	lsls	r2, r1, #28
    3b64:	d406      	bmi.n	3b74 <am_hal_iom_spi_read_nq+0xc8>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3b66:	f8d9 0000 	ldr.w	r0, [r9]
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    3b6a:	fa5f fc80 	uxtb.w	ip, r0
    3b6e:	45e0      	cmp	r8, ip
    3b70:	f200 8142 	bhi.w	3df8 <am_hal_iom_spi_read_nq+0x34c>

    //
    // Figure out how many whole words we're reading from the fifo, and how
    // many bytes will be left over when we're done.
    //
    ui32NumWords = ui32NumBytes / 4;
    3b74:	ea4f 0298 	mov.w	r2, r8, lsr #2
    3b78:	9200      	str	r2, [sp, #0]
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);
    3b7a:	0091      	lsls	r1, r2, #2

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3b7c:	2a00      	cmp	r2, #0
    3b7e:	d049      	beq.n	3c14 <am_hal_iom_spi_read_nq+0x168>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3b80:	463a      	mov	r2, r7
    3b82:	6830      	ldr	r0, [r6, #0]
    3b84:	f842 0b04 	str.w	r0, [r2], #4
    3b88:	eb07 0e01 	add.w	lr, r7, r1
    3b8c:	f1a1 0c04 	sub.w	ip, r1, #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3b90:	4596      	cmp	lr, r2
    3b92:	f3cc 0082 	ubfx	r0, ip, #2, #3
    3b96:	d03d      	beq.n	3c14 <am_hal_iom_spi_read_nq+0x168>
    3b98:	b310      	cbz	r0, 3be0 <am_hal_iom_spi_read_nq+0x134>
    3b9a:	2801      	cmp	r0, #1
    3b9c:	d01b      	beq.n	3bd6 <am_hal_iom_spi_read_nq+0x12a>
    3b9e:	2802      	cmp	r0, #2
    3ba0:	d016      	beq.n	3bd0 <am_hal_iom_spi_read_nq+0x124>
    3ba2:	2803      	cmp	r0, #3
    3ba4:	d011      	beq.n	3bca <am_hal_iom_spi_read_nq+0x11e>
    3ba6:	2804      	cmp	r0, #4
    3ba8:	d00c      	beq.n	3bc4 <am_hal_iom_spi_read_nq+0x118>
    3baa:	2805      	cmp	r0, #5
    3bac:	d007      	beq.n	3bbe <am_hal_iom_spi_read_nq+0x112>
    3bae:	2806      	cmp	r0, #6
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3bb0:	bf1c      	itt	ne
    3bb2:	6830      	ldrne	r0, [r6, #0]
    3bb4:	f842 0b04 	strne.w	r0, [r2], #4
    3bb8:	6830      	ldr	r0, [r6, #0]
    3bba:	f842 0b04 	str.w	r0, [r2], #4
    3bbe:	6830      	ldr	r0, [r6, #0]
    3bc0:	f842 0b04 	str.w	r0, [r2], #4
    3bc4:	6830      	ldr	r0, [r6, #0]
    3bc6:	f842 0b04 	str.w	r0, [r2], #4
    3bca:	6830      	ldr	r0, [r6, #0]
    3bcc:	f842 0b04 	str.w	r0, [r2], #4
    3bd0:	6830      	ldr	r0, [r6, #0]
    3bd2:	f842 0b04 	str.w	r0, [r2], #4
    3bd6:	6830      	ldr	r0, [r6, #0]
    3bd8:	f842 0b04 	str.w	r0, [r2], #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3bdc:	4596      	cmp	lr, r2
    3bde:	d019      	beq.n	3c14 <am_hal_iom_spi_read_nq+0x168>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3be0:	4610      	mov	r0, r2
    3be2:	f8d6 c000 	ldr.w	ip, [r6]
    3be6:	f840 cb04 	str.w	ip, [r0], #4
    3bea:	f8d6 c000 	ldr.w	ip, [r6]
    3bee:	f8c2 c004 	str.w	ip, [r2, #4]
    3bf2:	f8d6 c000 	ldr.w	ip, [r6]
    3bf6:	f8c0 c004 	str.w	ip, [r0, #4]
    3bfa:	6830      	ldr	r0, [r6, #0]
    3bfc:	60d0      	str	r0, [r2, #12]
    3bfe:	6830      	ldr	r0, [r6, #0]
    3c00:	6110      	str	r0, [r2, #16]
    3c02:	6830      	ldr	r0, [r6, #0]
    3c04:	6150      	str	r0, [r2, #20]
    3c06:	6830      	ldr	r0, [r6, #0]
    3c08:	6190      	str	r0, [r2, #24]
    3c0a:	6830      	ldr	r0, [r6, #0]
    3c0c:	61d0      	str	r0, [r2, #28]
    3c0e:	3220      	adds	r2, #32
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3c10:	4596      	cmp	lr, r2
    3c12:	d1e5      	bne.n	3be0 <am_hal_iom_spi_read_nq+0x134>
    // definition requests, we wouldn't need to do this. It's possible to call
    // this function with a re-cast or packed pointer instead though. If that
    // happens, we want to be careful not to overwrite any data that might be
    // sitting just past the end of the destination array.
    //
    if ( ui32Leftovers )
    3c14:	4588      	cmp	r8, r1
    3c16:	d00e      	beq.n	3c36 <am_hal_iom_spi_read_nq+0x18a>
    {
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3c18:	6832      	ldr	r2, [r6, #0]
        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    3c1a:	9800      	ldr	r0, [sp, #0]
    3c1c:	4439      	add	r1, r7
    3c1e:	f807 2020 	strb.w	r2, [r7, r0, lsl #2]
    3c22:	f3c2 2e07 	ubfx	lr, r2, #8, #8
    3c26:	f3c2 4007 	ubfx	r0, r2, #16, #8
    3c2a:	f3c2 6207 	ubfx	r2, r2, #24, #8
    3c2e:	f881 e001 	strb.w	lr, [r1, #1]
    3c32:	7088      	strb	r0, [r1, #2]
    3c34:	70ca      	strb	r2, [r1, #3]
            // If the fifo has at least one 32-bit word in it, copy whole
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
            pui32Data += ui32BytesInFifo >> 2;
    3c36:	f004 01fc 	and.w	r1, r4, #252	; 0xfc
    3c3a:	440f      	add	r7, r1
            //
            // If the fifo has at least one 32-bit word in it, copy whole
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    3c3c:	ebc8 0505 	rsb	r5, r8, r5
            pui32Data += ui32BytesInFifo >> 2;
        }
        if ( bCmdCmp == true )
    3c40:	b933      	cbnz	r3, 3c50 <am_hal_iom_spi_read_nq+0x1a4>
            // No more data expected. Get out of the loop
            //
            break;
        }

        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    3c42:	f8db 3000 	ldr.w	r3, [fp]
    3c46:	f003 0301 	and.w	r3, r3, #1
                           ui32NumBytes, ui32Options);

    //
    // Start a loop to catch the Rx data.
    //
    while ( ui32NumBytes )
    3c4a:	2d00      	cmp	r5, #0
    3c4c:	f47f af7d 	bne.w	3b4a <am_hal_iom_spi_read_nq+0x9e>
    3c50:	9c01      	ldr	r4, [sp, #4]
    3c52:	9600      	str	r6, [sp, #0]
    }

    //
    // Make sure CMDCMP was raised,
    //
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3c54:	9f03      	ldr	r7, [sp, #12]
    3c56:	2301      	movs	r3, #1
    3c58:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    3c5c:	461a      	mov	r2, r3
    3c5e:	4659      	mov	r1, fp
    3c60:	f7fe fa24 	bl	20ac <am_hal_flash_delay_status_change>
                 AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                 AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

    if (waitStatus != 1)
    3c64:	2801      	cmp	r0, #1
    3c66:	f000 80b4 	beq.w	3dd2 <am_hal_iom_spi_read_nq+0x326>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3c6a:	2001      	movs	r0, #1
    3c6c:	f80a 0004 	strb.w	r0, [sl, r4]

    //
    // Re-enable IOM interrupts. Make sure CMDCMP is cleared
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3c70:	9d00      	ldr	r5, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3c72:	9a02      	ldr	r2, [sp, #8]

    //
    // Re-enable IOM interrupts. Make sure CMDCMP is cleared
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3c74:	f240 74ff 	movw	r4, #2047	; 0x7ff
    3c78:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3c7c:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    3c80:	e731      	b.n	3ae6 <am_hal_iom_spi_read_nq+0x3a>

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3c82:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
    3c86:	9600      	str	r6, [sp, #0]
    3c88:	0700      	lsls	r0, r0, #28
    3c8a:	9c01      	ldr	r4, [sp, #4]
    3c8c:	d40c      	bmi.n	3ca8 <am_hal_iom_spi_read_nq+0x1fc>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3c8e:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    3c92:	b2d1      	uxtb	r1, r2
    3c94:	42a9      	cmp	r1, r5
    3c96:	d207      	bcs.n	3ca8 <am_hal_iom_spi_read_nq+0x1fc>
    3c98:	4a43      	ldr	r2, [pc, #268]	; (3da8 <am_hal_iom_spi_read_nq+0x2fc>)
    3c9a:	4844      	ldr	r0, [pc, #272]	; (3dac <am_hal_iom_spi_read_nq+0x300>)
    3c9c:	9301      	str	r3, [sp, #4]
    3c9e:	f640 7142 	movw	r1, #3906	; 0xf42
    3ca2:	f7fe f9fb 	bl	209c <am_hal_debug_error>
    3ca6:	9b01      	ldr	r3, [sp, #4]

    //
    // Figure out how many whole words we're reading from the fifo, and how
    // many bytes will be left over when we're done.
    //
    ui32NumWords = ui32NumBytes / 4;
    3ca8:	ea4f 0c95 	mov.w	ip, r5, lsr #2
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);
    3cac:	ea4f 018c 	mov.w	r1, ip, lsl #2
    3cb0:	1a6d      	subs	r5, r5, r1

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3cb2:	f1bc 0f00 	cmp.w	ip, #0
    3cb6:	d057      	beq.n	3d68 <am_hal_iom_spi_read_nq+0x2bc>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3cb8:	9e00      	ldr	r6, [sp, #0]
    3cba:	463a      	mov	r2, r7
    3cbc:	6830      	ldr	r0, [r6, #0]
    3cbe:	f842 0b04 	str.w	r0, [r2], #4
    3cc2:	eb07 0e01 	add.w	lr, r7, r1
    3cc6:	1f0e      	subs	r6, r1, #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3cc8:	4596      	cmp	lr, r2
    3cca:	f3c6 0082 	ubfx	r0, r6, #2, #3
    3cce:	d04b      	beq.n	3d68 <am_hal_iom_spi_read_nq+0x2bc>
    3cd0:	b348      	cbz	r0, 3d26 <am_hal_iom_spi_read_nq+0x27a>
    3cd2:	2801      	cmp	r0, #1
    3cd4:	d021      	beq.n	3d1a <am_hal_iom_spi_read_nq+0x26e>
    3cd6:	2802      	cmp	r0, #2
    3cd8:	d01b      	beq.n	3d12 <am_hal_iom_spi_read_nq+0x266>
    3cda:	2803      	cmp	r0, #3
    3cdc:	d015      	beq.n	3d0a <am_hal_iom_spi_read_nq+0x25e>
    3cde:	2804      	cmp	r0, #4
    3ce0:	d00f      	beq.n	3d02 <am_hal_iom_spi_read_nq+0x256>
    3ce2:	2805      	cmp	r0, #5
    3ce4:	d009      	beq.n	3cfa <am_hal_iom_spi_read_nq+0x24e>
    3ce6:	2806      	cmp	r0, #6
    3ce8:	d003      	beq.n	3cf2 <am_hal_iom_spi_read_nq+0x246>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3cea:	9e00      	ldr	r6, [sp, #0]
    3cec:	6830      	ldr	r0, [r6, #0]
    3cee:	f842 0b04 	str.w	r0, [r2], #4
    3cf2:	9e00      	ldr	r6, [sp, #0]
    3cf4:	6830      	ldr	r0, [r6, #0]
    3cf6:	f842 0b04 	str.w	r0, [r2], #4
    3cfa:	9e00      	ldr	r6, [sp, #0]
    3cfc:	6830      	ldr	r0, [r6, #0]
    3cfe:	f842 0b04 	str.w	r0, [r2], #4
    3d02:	9e00      	ldr	r6, [sp, #0]
    3d04:	6830      	ldr	r0, [r6, #0]
    3d06:	f842 0b04 	str.w	r0, [r2], #4
    3d0a:	9e00      	ldr	r6, [sp, #0]
    3d0c:	6830      	ldr	r0, [r6, #0]
    3d0e:	f842 0b04 	str.w	r0, [r2], #4
    3d12:	9e00      	ldr	r6, [sp, #0]
    3d14:	6830      	ldr	r0, [r6, #0]
    3d16:	f842 0b04 	str.w	r0, [r2], #4
    3d1a:	9e00      	ldr	r6, [sp, #0]
    3d1c:	6830      	ldr	r0, [r6, #0]
    3d1e:	f842 0b04 	str.w	r0, [r2], #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3d22:	4596      	cmp	lr, r2
    3d24:	d020      	beq.n	3d68 <am_hal_iom_spi_read_nq+0x2bc>
    3d26:	9e00      	ldr	r6, [sp, #0]
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3d28:	f8d6 8000 	ldr.w	r8, [r6]
    3d2c:	4691      	mov	r9, r2
    3d2e:	3220      	adds	r2, #32
    3d30:	f849 8b04 	str.w	r8, [r9], #4
    3d34:	f8d6 8000 	ldr.w	r8, [r6]
    3d38:	f842 8c1c 	str.w	r8, [r2, #-28]
    3d3c:	f8d6 8000 	ldr.w	r8, [r6]
    3d40:	f8c9 8004 	str.w	r8, [r9, #4]
    3d44:	6830      	ldr	r0, [r6, #0]
    3d46:	f842 0c14 	str.w	r0, [r2, #-20]
    3d4a:	6830      	ldr	r0, [r6, #0]
    3d4c:	f842 0c10 	str.w	r0, [r2, #-16]
    3d50:	6830      	ldr	r0, [r6, #0]
    3d52:	f842 0c0c 	str.w	r0, [r2, #-12]
    3d56:	6830      	ldr	r0, [r6, #0]
    3d58:	f842 0c08 	str.w	r0, [r2, #-8]
    3d5c:	6830      	ldr	r0, [r6, #0]
    3d5e:	f842 0c04 	str.w	r0, [r2, #-4]
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    3d62:	4596      	cmp	lr, r2
    3d64:	d1e0      	bne.n	3d28 <am_hal_iom_spi_read_nq+0x27c>
    3d66:	9600      	str	r6, [sp, #0]
    // definition requests, we wouldn't need to do this. It's possible to call
    // this function with a re-cast or packed pointer instead though. If that
    // happens, we want to be careful not to overwrite any data that might be
    // sitting just past the end of the destination array.
    //
    if ( ui32Leftovers )
    3d68:	b1a5      	cbz	r5, 3d94 <am_hal_iom_spi_read_nq+0x2e8>
    {
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3d6a:	9a00      	ldr	r2, [sp, #0]
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    3d6c:	2d01      	cmp	r5, #1
    // happens, we want to be careful not to overwrite any data that might be
    // sitting just past the end of the destination array.
    //
    if ( ui32Leftovers )
    {
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3d6e:	6816      	ldr	r6, [r2, #0]
        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    3d70:	f807 602c 	strb.w	r6, [r7, ip, lsl #2]
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    3d74:	d00e      	beq.n	3d94 <am_hal_iom_spi_read_nq+0x2e8>
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    3d76:	440f      	add	r7, r1
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    3d78:	2d02      	cmp	r5, #2
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    3d7a:	f3c6 2107 	ubfx	r1, r6, #8, #8
    3d7e:	7079      	strb	r1, [r7, #1]
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    3d80:	d008      	beq.n	3d94 <am_hal_iom_spi_read_nq+0x2e8>
    3d82:	2d03      	cmp	r5, #3
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    3d84:	f3c6 4007 	ubfx	r0, r6, #16, #8
    3d88:	bf18      	it	ne
    3d8a:	f3c6 6607 	ubfxne	r6, r6, #24, #8
    3d8e:	70b8      	strb	r0, [r7, #2]
    3d90:	bf18      	it	ne
    3d92:	70fe      	strbne	r6, [r7, #3]
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
            pui32Data += ui32BytesInFifo >> 2;
        }
        if ( bCmdCmp == true )
    3d94:	2b00      	cmp	r3, #0
    3d96:	f47f af5d 	bne.w	3c54 <am_hal_iom_spi_read_nq+0x1a8>
            // No more data expected. Get out of the loop
            //
            break;
        }

        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    3d9a:	f8db 3000 	ldr.w	r3, [fp]
    3d9e:	e759      	b.n	3c54 <am_hal_iom_spi_read_nq+0x1a8>
    3da0:	10001188 	.word	0x10001188
    3da4:	100016c8 	.word	0x100016c8
    3da8:	000063e4 	.word	0x000063e4
    3dac:	0000630c 	.word	0x0000630c
    3db0:	10001180 	.word	0x10001180
    // OFFSET values.
    //
    // That operation is tricky and detailed, so we'll call a function to do it
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3db4:	990e      	ldr	r1, [sp, #56]	; 0x38
    3db6:	f011 4280 	ands.w	r2, r1, #1073741824	; 0x40000000
    3dba:	d104      	bne.n	3dc6 <am_hal_iom_spi_read_nq+0x31a>
isRevB0(void)
{
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    3dbc:	4b2a      	ldr	r3, [pc, #168]	; (3e68 <am_hal_iom_spi_read_nq+0x3bc>)
    3dbe:	681e      	ldr	r6, [r3, #0]
    3dc0:	b2f1      	uxtb	r1, r6
    3dc2:	2920      	cmp	r1, #32
    3dc4:	d021      	beq.n	3e0a <am_hal_iom_spi_read_nq+0x35e>
    3dc6:	f500 7b01 	add.w	fp, r0, #516	; 0x204
    3dca:	4828      	ldr	r0, [pc, #160]	; (3e6c <am_hal_iom_spi_read_nq+0x3c0>)
    3dcc:	9003      	str	r0, [sp, #12]
    3dce:	9e00      	ldr	r6, [sp, #0]
    3dd0:	e6a3      	b.n	3b1a <am_hal_iom_spi_read_nq+0x6e>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3dd2:	f8db 3000 	ldr.w	r3, [fp]
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3dd6:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3dda:	bf18      	it	ne
    3ddc:	2005      	movne	r0, #5
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3dde:	d002      	beq.n	3de6 <am_hal_iom_spi_read_nq+0x33a>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    }
    else
    {
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    3de0:	f80a 0004 	strb.w	r0, [sl, r4]
    3de4:	e744      	b.n	3c70 <am_hal_iom_spi_read_nq+0x1c4>
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    3de6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    3dea:	d12d      	bne.n	3e48 <am_hal_iom_spi_read_nq+0x39c>
//!
//*****************************************************************************
static am_hal_iom_status_e
internal_iom_get_int_err(uint32_t ui32Module, uint32_t ui32IntStatus)
{
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    3dec:	f013 0f10 	tst.w	r3, #16
    3df0:	bf14      	ite	ne
    3df2:	2006      	movne	r0, #6
    3df4:	2000      	moveq	r0, #0
    3df6:	e7f3      	b.n	3de0 <am_hal_iom_spi_read_nq+0x334>
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    3df8:	4a1d      	ldr	r2, [pc, #116]	; (3e70 <am_hal_iom_spi_read_nq+0x3c4>)
    3dfa:	481e      	ldr	r0, [pc, #120]	; (3e74 <am_hal_iom_spi_read_nq+0x3c8>)
    3dfc:	9300      	str	r3, [sp, #0]
    3dfe:	f640 7142 	movw	r1, #3906	; 0xf42
    3e02:	f7fe f94b 	bl	209c <am_hal_debug_error>
    3e06:	9b00      	ldr	r3, [sp, #0]
    3e08:	e6b4      	b.n	3b74 <am_hal_iom_spi_read_nq+0xc8>
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
        isRevB0() )
    {
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    3e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        ui32Options |= AM_HAL_IOM_RAW;
        //
        // Wait for the dummy word to go out over the bus.
        //
        // Make sure the command complete has also been raised
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3e0c:	4e17      	ldr	r6, [pc, #92]	; (3e6c <am_hal_iom_spi_read_nq+0x3c0>)
    3e0e:	9603      	str	r6, [sp, #12]
    // for us.
    //
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
        isRevB0() )
    {
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    3e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e14:	4639      	mov	r1, r7
    3e16:	4640      	mov	r0, r8
    3e18:	f7fe fed6 	bl	2bc8 <am_hal_iom_workaround_word_write>
        ui32Options |= AM_HAL_IOM_RAW;
        //
        // Wait for the dummy word to go out over the bus.
        //
        // Make sure the command complete has also been raised
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3e1c:	9a00      	ldr	r2, [sp, #0]
    3e1e:	6930      	ldr	r0, [r6, #16]
    3e20:	f502 7b01 	add.w	fp, r2, #516	; 0x204
    3e24:	2301      	movs	r3, #1
    3e26:	4659      	mov	r1, fp
    3e28:	461a      	mov	r2, r3
    3e2a:	f7fe f93f 	bl	20ac <am_hal_flash_delay_status_change>
                     AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                     AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

        if (waitStatus != 1)
    3e2e:	2801      	cmp	r0, #1
    3e30:	d00c      	beq.n	3e4c <am_hal_iom_spi_read_nq+0x3a0>
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
            //
            // Re-enable IOM interrupts.
            //
            // Clear interrupts
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3e32:	9e00      	ldr	r6, [sp, #0]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3e34:	9902      	ldr	r1, [sp, #8]
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
            //
            // Re-enable IOM interrupts.
            //
            // Clear interrupts
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3e36:	f8c6 9208 	str.w	r9, [r6, #520]	; 0x208
                     AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                     AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

        if (waitStatus != 1)
        {
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3e3a:	2001      	movs	r0, #1
    3e3c:	f88a 0004 	strb.w	r0, [sl, #4]
            //
            // Re-enable IOM interrupts.
            //
            // Clear interrupts
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3e40:	46b6      	mov	lr, r6
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3e42:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    3e46:	e64e      	b.n	3ae6 <am_hal_iom_spi_read_nq+0x3a>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    {
        // Loss of I2C multi-master arbitration
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    3e48:	2007      	movs	r0, #7
    3e4a:	e7c9      	b.n	3de0 <am_hal_iom_spi_read_nq+0x334>
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
            return ui32Status;
        }

        // Clear CMDCMP status
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3e4c:	9900      	ldr	r1, [sp, #0]

        //
        // The workaround will send our offset for us, so we can run a RAW
        // command after.
        //
        ui32Options |= AM_HAL_IOM_RAW;
    3e4e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
            return ui32Status;
        }

        // Clear CMDCMP status
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3e50:	f8d1 0208 	ldr.w	r0, [r1, #520]	; 0x208

        //
        // The workaround will send our offset for us, so we can run a RAW
        // command after.
        //
        ui32Options |= AM_HAL_IOM_RAW;
    3e54:	f046 4280 	orr.w	r2, r6, #1073741824	; 0x40000000
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
            return ui32Status;
        }

        // Clear CMDCMP status
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3e58:	f040 0301 	orr.w	r3, r0, #1

        //
        // The workaround will send our offset for us, so we can run a RAW
        // command after.
        //
        ui32Options |= AM_HAL_IOM_RAW;
    3e5c:	920e      	str	r2, [sp, #56]	; 0x38
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
            return ui32Status;
        }

        // Clear CMDCMP status
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3e5e:	f8c1 3208 	str.w	r3, [r1, #520]	; 0x208
    3e62:	460e      	mov	r6, r1
    3e64:	e659      	b.n	3b1a <am_hal_iom_spi_read_nq+0x6e>
    3e66:	bf00      	nop
    3e68:	4002000c 	.word	0x4002000c
    3e6c:	100016c8 	.word	0x100016c8
    3e70:	000063e4 	.word	0x000063e4
    3e74:	0000630c 	.word	0x0000630c

00003e78 <am_hal_iom_spi_read>:
{
    am_hal_iom_status_e ui32Status;
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3e78:	2805      	cmp	r0, #5
    3e7a:	d901      	bls.n	3e80 <am_hal_iom_spi_read+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3e7c:	2002      	movs	r0, #2
        //
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
                               ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    3e7e:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_read(uint32_t ui32Module, uint32_t ui32ChipSelect,
                    uint32_t *pui32Data, uint32_t ui32NumBytes,
                    uint32_t ui32Options)
{
    3e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3e84:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    3e88:	3704      	adds	r7, #4
    3e8a:	033d      	lsls	r5, r7, #12
    3e8c:	f240 7cff 	movw	ip, #2047	; 0x7ff
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3e90:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3f70 <am_hal_iom_spi_read+0xf8>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3e94:	f8c5 c208 	str.w	ip, [r5, #520]	; 0x208
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    if (ui32NumBytes == 0)
    3e98:	f640 79fe 	movw	r9, #4094	; 0xffe
    3e9c:	1e5d      	subs	r5, r3, #1
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3e9e:	2600      	movs	r6, #0
    if (ui32NumBytes == 0)
    3ea0:	454d      	cmp	r5, r9
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_spi_read(uint32_t ui32Module, uint32_t ui32ChipSelect,
                    uint32_t *pui32Data, uint32_t ui32NumBytes,
                    uint32_t ui32Options)
{
    3ea2:	b08d      	sub	sp, #52	; 0x34
    3ea4:	4604      	mov	r4, r0
    3ea6:	469e      	mov	lr, r3
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    }
    // Reset the error status
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3ea8:	f808 6000 	strb.w	r6, [r8, r0]
    if (ui32NumBytes == 0)
    3eac:	d905      	bls.n	3eba <am_hal_iom_spi_read+0x42>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3eae:	2003      	movs	r0, #3
    3eb0:	f808 0004 	strb.w	r0, [r8, r4]
        //
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
                               ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    3eb4:	b00d      	add	sp, #52	; 0x34
    3eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    //
    // Check to see if queues have been enabled. If they are, we'll actually
    // switch to the queued interface.
    //
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    3eba:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    3ebe:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 3f74 <am_hal_iom_spi_read+0xfc>
    3ec2:	9202      	str	r2, [sp, #8]
    3ec4:	eb0a 0500 	add.w	r5, sl, r0
    3ec8:	eb0b 09c5 	add.w	r9, fp, r5, lsl #3
    3ecc:	461f      	mov	r7, r3
    3ece:	f8d9 6014 	ldr.w	r6, [r9, #20]
    3ed2:	2e00      	cmp	r6, #0
    3ed4:	d043      	beq.n	3f5e <am_hal_iom_spi_read+0xe6>
    3ed6:	460d      	mov	r5, r1
        return ui32Status;
    }

    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3ed8:	f7fe fa66 	bl	23a8 <am_hal_interrupt_master_disable>
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    3edc:	4b22      	ldr	r3, [pc, #136]	; (3f68 <am_hal_iom_spi_read+0xf0>)
        return ui32Status;
    }

    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3ede:	9003      	str	r0, [sp, #12]
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    3ee0:	5d1a      	ldrb	r2, [r3, r4]
    3ee2:	b912      	cbnz	r2, 3eea <am_hal_iom_spi_read+0x72>
    3ee4:	f8d9 0008 	ldr.w	r0, [r9, #8]
    3ee8:	b1d8      	cbz	r0, 3f22 <am_hal_iom_spi_read+0xaa>
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3eea:	eb0a 0104 	add.w	r1, sl, r4
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    3eee:	2301      	movs	r3, #1
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3ef0:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    3ef4:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    3ef6:	2600      	movs	r6, #0
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
    3ef8:	9d02      	ldr	r5, [sp, #8]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    3efa:	9709      	str	r7, [sp, #36]	; 0x24
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3efc:	461a      	mov	r2, r3
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    3efe:	9f16      	ldr	r7, [sp, #88]	; 0x58
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
        sIOMTransaction.ui32Module = ui32Module;
    3f00:	9406      	str	r4, [sp, #24]
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3f02:	a905      	add	r1, sp, #20
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
    3f04:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    3f06:	970a      	str	r7, [sp, #40]	; 0x28
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    3f08:	9305      	str	r3, [sp, #20]
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    3f0a:	960b      	str	r6, [sp, #44]	; 0x2c

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3f0c:	f000 ff18 	bl	4d40 <am_hal_queue_item_add>
    3f10:	b9d8      	cbnz	r0, 3f4a <am_hal_iom_spi_read+0xd2>
        {
            //
            // Didn't have enough memory.
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    3f12:	2608      	movs	r6, #8
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3f14:	9803      	ldr	r0, [sp, #12]
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    3f16:	f808 6004 	strb.w	r6, [r8, r4]
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3f1a:	f7fe fa49 	bl	23b0 <am_hal_interrupt_master_set>
    3f1e:	4630      	mov	r0, r6
    3f20:	e7c8      	b.n	3eb4 <am_hal_iom_spi_read+0x3c>
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    3f22:	5d1a      	ldrb	r2, [r3, r4]
    3f24:	f002 0eff 	and.w	lr, r2, #255	; 0xff
    3f28:	2a00      	cmp	r2, #0
    3f2a:	d1fa      	bne.n	3f22 <am_hal_iom_spi_read+0xaa>
    3f2c:	9816      	ldr	r0, [sp, #88]	; 0x58
    3f2e:	9000      	str	r0, [sp, #0]
    3f30:	f8cd e004 	str.w	lr, [sp, #4]
    3f34:	463b      	mov	r3, r7
    3f36:	9a02      	ldr	r2, [sp, #8]
    //
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);
    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3f38:	f808 e004 	strb.w	lr, [r8, r4]
    3f3c:	4629      	mov	r1, r5
    3f3e:	4620      	mov	r0, r4
    3f40:	f7ff fb14 	bl	356c <am_hal_iom_spi_read_nb.part.7>
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3f44:	4606      	mov	r6, r0
    3f46:	2800      	cmp	r0, #0
    3f48:	d1e4      	bne.n	3f14 <am_hal_iom_spi_read+0x9c>
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3f4a:	9803      	ldr	r0, [sp, #12]
    3f4c:	f7fe fa30 	bl	23b0 <am_hal_interrupt_master_set>
        if (ui32Status == AM_HAL_IOM_SUCCESS)
        {
            //
            // Wait until the transaction actually clears.
            //
            am_hal_iom_queue_flush(ui32Module);
    3f50:	4906      	ldr	r1, [pc, #24]	; (3f6c <am_hal_iom_spi_read+0xf4>)
    3f52:	4620      	mov	r0, r4
    3f54:	680b      	ldr	r3, [r1, #0]
    3f56:	4798      	blx	r3
            // g_iom_error_status gets set in the isr handling
            ui32Status = g_iom_error_status[ui32Module];
    3f58:	f818 0004 	ldrb.w	r0, [r8, r4]
    3f5c:	e7aa      	b.n	3eb4 <am_hal_iom_spi_read+0x3c>
    else
    {
        //
        // Otherwise, just perform a polled transaction.
        //
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    3f5e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    3f60:	9400      	str	r4, [sp, #0]
    3f62:	f7ff fda3 	bl	3aac <am_hal_iom_spi_read_nq>
    3f66:	e7a5      	b.n	3eb4 <am_hal_iom_spi_read+0x3c>
    3f68:	10001188 	.word	0x10001188
    3f6c:	10001068 	.word	0x10001068
    3f70:	10001180 	.word	0x10001180
    3f74:	10001758 	.word	0x10001758

00003f78 <am_hal_iom_i2c_write_nq>:
    am_hal_i2c_bit_bang_enum_e i2cBBStatus;

    //
    // Validate parameters
    //
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    3f78:	2806      	cmp	r0, #6
    3f7a:	d901      	bls.n	3f80 <am_hal_iom_i2c_write_nq+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3f7c:	2002      	movs	r0, #2
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    return ui32Status;
}
    3f7e:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_write_nq(uint32_t ui32Module, uint32_t ui32BusAddress,
                        uint32_t *pui32Data, uint32_t ui32NumBytes,
                        uint32_t ui32Options)
{
    3f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f84:	461e      	mov	r6, r3
    3f86:	b085      	sub	sp, #20
    3f88:	460b      	mov	r3, r1
    3f8a:	4604      	mov	r4, r0
am_hal_iom_poll_complete(uint32_t ui32Module)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3f8c:	d013      	beq.n	3fb6 <am_hal_iom_i2c_write_nq+0x3e>
    3f8e:	48be      	ldr	r0, [pc, #760]	; (4288 <am_hal_iom_i2c_write_nq+0x310>)
    3f90:	4615      	mov	r5, r2
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    3f92:	5d02      	ldrb	r2, [r0, r4]
    3f94:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    3f98:	2a00      	cmp	r2, #0
    3f9a:	d1fa      	bne.n	3f92 <am_hal_iom_i2c_write_nq+0x1a>
    // Wait until any earlier transactions have completed.
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3f9c:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 429c <am_hal_iom_i2c_write_nq+0x324>
    3fa0:	f808 1004 	strb.w	r1, [r8, r4]
    if (ui32NumBytes == 0)
    3fa4:	b10e      	cbz	r6, 3faa <am_hal_iom_i2c_write_nq+0x32>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    3fa6:	2eff      	cmp	r6, #255	; 0xff
    3fa8:	d923      	bls.n	3ff2 <am_hal_iom_i2c_write_nq+0x7a>

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    if (ui32NumBytes == 0)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3faa:	2003      	movs	r0, #3
    3fac:	f808 0004 	strb.w	r0, [r8, r4]
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    return ui32Status;
}
    3fb0:	b005      	add	sp, #20
    3fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Wait until any earlier transactions have completed.
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3fb6:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 429c <am_hal_iom_i2c_write_nq+0x324>
    3fba:	2700      	movs	r7, #0
    3fbc:	f888 7006 	strb.w	r7, [r8, #6]
    if (ui32NumBytes == 0)
    3fc0:	2e00      	cmp	r6, #0
    3fc2:	d0f2      	beq.n	3faa <am_hal_iom_i2c_write_nq+0x32>
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        if ( ui32Options & AM_HAL_IOM_RAW )
    3fc4:	980e      	ldr	r0, [sp, #56]	; 0x38
    3fc6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3fca:	ea4f 0143 	mov.w	r1, r3, lsl #1
    3fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        if ( ui32Options & AM_HAL_IOM_RAW )
    3fd0:	f000 8131 	beq.w	4236 <am_hal_iom_i2c_write_nq+0x2be>
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3fd4:	f3c3 7500 	ubfx	r5, r3, #28, #1
    3fd8:	f001 00fe 	and.w	r0, r1, #254	; 0xfe
    3fdc:	9700      	str	r7, [sp, #0]
    3fde:	463b      	mov	r3, r7
    3fe0:	4631      	mov	r1, r6
    3fe2:	9501      	str	r5, [sp, #4]
    3fe4:	f001 fd10 	bl	5a08 <am_hal_i2c_bit_bang_send>
        }

        //
        // Return. convert BB retCode to proper retCode here
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    3fe8:	4ca8      	ldr	r4, [pc, #672]	; (428c <am_hal_iom_i2c_write_nq+0x314>)
    3fea:	5c20      	ldrb	r0, [r4, r0]
    3fec:	f888 0006 	strb.w	r0, [r8, #6]
    3ff0:	e7de      	b.n	3fb0 <am_hal_iom_i2c_write_nq+0x38>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    3ff2:	f504 27a0 	add.w	r7, r4, #327680	; 0x50000
    3ff6:	3704      	adds	r7, #4
    3ff8:	033f      	lsls	r7, r7, #12
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3ffa:	f240 7eff 	movw	lr, #2047	; 0x7ff
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    3ffe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    4002:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    4006:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    400a:	f8c7 e208 	str.w	lr, [r7, #520]	; 0x208
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    400e:	9202      	str	r2, [sp, #8]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4010:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    4014:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    4018:	f010 0f08 	tst.w	r0, #8
    401c:	bf14      	ite	ne
    401e:	f04f 0940 	movne.w	r9, #64	; 0x40
    4022:	f04f 0980 	moveq.w	r9, #128	; 0x80
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4026:	f012 0f08 	tst.w	r2, #8
    402a:	bf14      	ite	ne
    402c:	2240      	movne	r2, #64	; 0x40
    402e:	2280      	moveq	r2, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4030:	1a50      	subs	r0, r2, r1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;

    //
    // Figure out how many bytes we can write to the FIFO immediately.
    //
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    4032:	45b1      	cmp	r9, r6
    4034:	bf28      	it	cs
    4036:	46b1      	movcs	r9, r6
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4038:	f000 0cfc 	and.w	ip, r0, #252	; 0xfc
    403c:	45e1      	cmp	r9, ip
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
        return ui32Status;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    403e:	f507 7a8e 	add.w	sl, r7, #284	; 0x11c
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    4042:	f507 7b80 	add.w	fp, r7, #256	; 0x100
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4046:	f200 8116 	bhi.w	4276 <am_hal_iom_i2c_write_nq+0x2fe>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    404a:	462a      	mov	r2, r5
    404c:	43e9      	mvns	r1, r5
    404e:	f852 0b04 	ldr.w	r0, [r2], #4
    4052:	6038      	str	r0, [r7, #0]
    4054:	4429      	add	r1, r5

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    4056:	1b50      	subs	r0, r2, r5
    4058:	4449      	add	r1, r9
    405a:	4581      	cmp	r9, r0
    405c:	f3c1 0182 	ubfx	r1, r1, #2, #3
    4060:	d941      	bls.n	40e6 <am_hal_iom_i2c_write_nq+0x16e>
    4062:	b319      	cbz	r1, 40ac <am_hal_iom_i2c_write_nq+0x134>
    4064:	2901      	cmp	r1, #1
    4066:	d01b      	beq.n	40a0 <am_hal_iom_i2c_write_nq+0x128>
    4068:	2902      	cmp	r1, #2
    406a:	d016      	beq.n	409a <am_hal_iom_i2c_write_nq+0x122>
    406c:	2903      	cmp	r1, #3
    406e:	d011      	beq.n	4094 <am_hal_iom_i2c_write_nq+0x11c>
    4070:	2904      	cmp	r1, #4
    4072:	d00c      	beq.n	408e <am_hal_iom_i2c_write_nq+0x116>
    4074:	2905      	cmp	r1, #5
    4076:	d007      	beq.n	4088 <am_hal_iom_i2c_write_nq+0x110>
    4078:	2906      	cmp	r1, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    407a:	bf1c      	itt	ne
    407c:	f852 1b04 	ldrne.w	r1, [r2], #4
    4080:	6039      	strne	r1, [r7, #0]
    4082:	f852 0b04 	ldr.w	r0, [r2], #4
    4086:	6038      	str	r0, [r7, #0]
    4088:	f852 1b04 	ldr.w	r1, [r2], #4
    408c:	6039      	str	r1, [r7, #0]
    408e:	f852 0b04 	ldr.w	r0, [r2], #4
    4092:	6038      	str	r0, [r7, #0]
    4094:	f852 1b04 	ldr.w	r1, [r2], #4
    4098:	6039      	str	r1, [r7, #0]
    409a:	f852 0b04 	ldr.w	r0, [r2], #4
    409e:	6038      	str	r0, [r7, #0]
    40a0:	f852 1b04 	ldr.w	r1, [r2], #4
    40a4:	6039      	str	r1, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    40a6:	1b50      	subs	r0, r2, r5
    40a8:	4581      	cmp	r9, r0
    40aa:	d91c      	bls.n	40e6 <am_hal_iom_i2c_write_nq+0x16e>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    40ac:	4696      	mov	lr, r2
    40ae:	3220      	adds	r2, #32
    40b0:	f85e 1b04 	ldr.w	r1, [lr], #4
    40b4:	6039      	str	r1, [r7, #0]
    40b6:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    40ba:	6038      	str	r0, [r7, #0]
    40bc:	f8de 1004 	ldr.w	r1, [lr, #4]
    40c0:	6039      	str	r1, [r7, #0]
    40c2:	f852 0c14 	ldr.w	r0, [r2, #-20]
    40c6:	6038      	str	r0, [r7, #0]
    40c8:	f852 1c10 	ldr.w	r1, [r2, #-16]
    40cc:	6039      	str	r1, [r7, #0]
    40ce:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    40d2:	6038      	str	r0, [r7, #0]
    40d4:	f852 1c08 	ldr.w	r1, [r2, #-8]
    40d8:	6039      	str	r1, [r7, #0]
    40da:	f852 0c04 	ldr.w	r0, [r2, #-4]
    40de:	6038      	str	r0, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    40e0:	1b51      	subs	r1, r2, r5
    40e2:	4589      	cmp	r9, r1
    40e4:	d8e2      	bhi.n	40ac <am_hal_iom_i2c_write_nq+0x134>
    40e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    40e8:	9200      	str	r2, [sp, #0]
    40ea:	4621      	mov	r1, r4
    40ec:	461a      	mov	r2, r3
    40ee:	2000      	movs	r0, #0
    40f0:	4633      	mov	r3, r6
    40f2:	f7fe f995 	bl	2420 <am_hal_iom_i2c_cmd_run.part.1>
    // Start the write on the bus.
    //
    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    40f6:	2800      	cmp	r0, #0
    40f8:	f040 80b3 	bne.w	4262 <am_hal_iom_i2c_write_nq+0x2ea>
    }
    //
    // Update the pointer and data counter.
    //
    ui32NumBytes -= ui32TransferSize;
    pui32Data += ui32TransferSize >> 2;
    40fc:	f029 0303 	bic.w	r3, r9, #3

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    4100:	ebb6 0609 	subs.w	r6, r6, r9
    }
    //
    // Update the pointer and data counter.
    //
    ui32NumBytes -= ui32TransferSize;
    pui32Data += ui32TransferSize >> 2;
    4104:	441d      	add	r5, r3

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    4106:	f000 80e0 	beq.w	42ca <am_hal_iom_i2c_write_nq+0x352>
    410a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
    410e:	07c1      	lsls	r1, r0, #31
    4110:	f507 7901 	add.w	r9, r7, #516	; 0x204
    4114:	d47a      	bmi.n	420c <am_hal_iom_i2c_write_nq+0x294>
    4116:	46a4      	mov	ip, r4
    4118:	4663      	mov	r3, ip
    411a:	465c      	mov	r4, fp
    411c:	46d3      	mov	fp, sl
    411e:	46b2      	mov	sl, r6
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4120:	f8db 1000 	ldr.w	r1, [fp]
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    4124:	6826      	ldr	r6, [r4, #0]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4126:	f8db 2000 	ldr.w	r2, [fp]
    //
    // Calculate the FIFO Remaining from the FIFO size. This will be different
    // depending on whether the IOM is configured for half-duplex or
    // full-duplex.
    //
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    412a:	6820      	ldr	r0, [r4, #0]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    412c:	f011 0f08 	tst.w	r1, #8
    4130:	bf14      	ite	ne
    4132:	2140      	movne	r1, #64	; 0x40
    4134:	2180      	moveq	r1, #128	; 0x80
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    {
        //
        // This will always return a multiple of four.
        //
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    4136:	1b89      	subs	r1, r1, r6
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4138:	f012 0f08 	tst.w	r2, #8
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    {
        //
        // This will always return a multiple of four.
        //
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    413c:	f001 06fc 	and.w	r6, r1, #252	; 0xfc
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    4140:	bf14      	ite	ne
    4142:	2240      	movne	r2, #64	; 0x40
    4144:	2280      	moveq	r2, #128	; 0x80
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4146:	1a12      	subs	r2, r2, r0
    4148:	4556      	cmp	r6, sl
    414a:	bf28      	it	cs
    414c:	4656      	movcs	r6, sl
    414e:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    4152:	4286      	cmp	r6, r0
    4154:	d87c      	bhi.n	4250 <am_hal_iom_i2c_write_nq+0x2d8>

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    4156:	2e00      	cmp	r6, #0
    4158:	d04d      	beq.n	41f6 <am_hal_iom_i2c_write_nq+0x27e>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    415a:	462a      	mov	r2, r5
    415c:	43e9      	mvns	r1, r5
    415e:	f852 0b04 	ldr.w	r0, [r2], #4
    4162:	6038      	str	r0, [r7, #0]
    4164:	4429      	add	r1, r5

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    4166:	1b50      	subs	r0, r2, r5
    4168:	4431      	add	r1, r6
    416a:	4286      	cmp	r6, r0
    416c:	f3c1 0182 	ubfx	r1, r1, #2, #3
    4170:	d941      	bls.n	41f6 <am_hal_iom_i2c_write_nq+0x27e>
    4172:	b319      	cbz	r1, 41bc <am_hal_iom_i2c_write_nq+0x244>
    4174:	2901      	cmp	r1, #1
    4176:	d01b      	beq.n	41b0 <am_hal_iom_i2c_write_nq+0x238>
    4178:	2902      	cmp	r1, #2
    417a:	d016      	beq.n	41aa <am_hal_iom_i2c_write_nq+0x232>
    417c:	2903      	cmp	r1, #3
    417e:	d011      	beq.n	41a4 <am_hal_iom_i2c_write_nq+0x22c>
    4180:	2904      	cmp	r1, #4
    4182:	d00c      	beq.n	419e <am_hal_iom_i2c_write_nq+0x226>
    4184:	2905      	cmp	r1, #5
    4186:	d007      	beq.n	4198 <am_hal_iom_i2c_write_nq+0x220>
    4188:	2906      	cmp	r1, #6
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    418a:	bf1c      	itt	ne
    418c:	f852 1b04 	ldrne.w	r1, [r2], #4
    4190:	6039      	strne	r1, [r7, #0]
    4192:	f852 0b04 	ldr.w	r0, [r2], #4
    4196:	6038      	str	r0, [r7, #0]
    4198:	f852 1b04 	ldr.w	r1, [r2], #4
    419c:	6039      	str	r1, [r7, #0]
    419e:	f852 0b04 	ldr.w	r0, [r2], #4
    41a2:	6038      	str	r0, [r7, #0]
    41a4:	f852 1b04 	ldr.w	r1, [r2], #4
    41a8:	6039      	str	r1, [r7, #0]
    41aa:	f852 0b04 	ldr.w	r0, [r2], #4
    41ae:	6038      	str	r0, [r7, #0]
    41b0:	f852 1b04 	ldr.w	r1, [r2], #4
    41b4:	6039      	str	r1, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    41b6:	1b50      	subs	r0, r2, r5
    41b8:	4286      	cmp	r6, r0
    41ba:	d91c      	bls.n	41f6 <am_hal_iom_i2c_write_nq+0x27e>
    {
        //
        // Write the word to the FIFO.
        //
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    41bc:	4696      	mov	lr, r2
    41be:	3220      	adds	r2, #32
    41c0:	f85e 1b04 	ldr.w	r1, [lr], #4
    41c4:	6039      	str	r1, [r7, #0]
    41c6:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    41ca:	6038      	str	r0, [r7, #0]
    41cc:	f8de 1004 	ldr.w	r1, [lr, #4]
    41d0:	6039      	str	r1, [r7, #0]
    41d2:	f852 0c14 	ldr.w	r0, [r2, #-20]
    41d6:	6038      	str	r0, [r7, #0]
    41d8:	f852 1c10 	ldr.w	r1, [r2, #-16]
    41dc:	6039      	str	r1, [r7, #0]
    41de:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    41e2:	6038      	str	r0, [r7, #0]
    41e4:	f852 1c08 	ldr.w	r1, [r2, #-8]
    41e8:	6039      	str	r1, [r7, #0]
    41ea:	f852 0c04 	ldr.w	r0, [r2, #-4]
    41ee:	6038      	str	r0, [r7, #0]

    //
    // Loop over the words in the array until we have the correct number of
    // bytes.
    //
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    41f0:	1b51      	subs	r1, r2, r5
    41f2:	428e      	cmp	r6, r1
    41f4:	d8e2      	bhi.n	41bc <am_hal_iom_i2c_write_nq+0x244>

        //
        // Update the data pointer and bytes-left count.
        //
        ui32NumBytes -= ui32TransferSize;
        pui32Data += ui32TransferSize >> 2;
    41f6:	f026 0c03 	bic.w	ip, r6, #3
    pui32Data += ui32TransferSize >> 2;

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    41fa:	ebba 0a06 	subs.w	sl, sl, r6

        //
        // Update the data pointer and bytes-left count.
        //
        ui32NumBytes -= ui32TransferSize;
        pui32Data += ui32TransferSize >> 2;
    41fe:	4465      	add	r5, ip
    pui32Data += ui32TransferSize >> 2;

    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    4200:	d003      	beq.n	420a <am_hal_iom_i2c_write_nq+0x292>
    4202:	f8d9 2000 	ldr.w	r2, [r9]
    4206:	07d2      	lsls	r2, r2, #31
    4208:	d58a      	bpl.n	4120 <am_hal_iom_i2c_write_nq+0x1a8>
    420a:	461c      	mov	r4, r3
    }

    //
    // Make sure CMDCMP was raised,
    //
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    420c:	4d20      	ldr	r5, [pc, #128]	; (4290 <am_hal_iom_i2c_write_nq+0x318>)
    420e:	2301      	movs	r3, #1
    4210:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4214:	461a      	mov	r2, r3
    4216:	4649      	mov	r1, r9
    4218:	f7fd ff48 	bl	20ac <am_hal_flash_delay_status_change>
                 AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                 AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

    if (waitStatus != 1)
    421c:	2801      	cmp	r0, #1
    421e:	d03f      	beq.n	42a0 <am_hal_iom_i2c_write_nq+0x328>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    4220:	2001      	movs	r0, #1
    4222:	f808 0004 	strb.w	r0, [r8, r4]

    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    4226:	f240 74ff 	movw	r4, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    422a:	9e02      	ldr	r6, [sp, #8]

    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    422c:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    4230:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
    4234:	e6bc      	b.n	3fb0 <am_hal_iom_i2c_write_nq+0x38>
                                     (uint8_t *)pui32Data, 0, false,
                                     (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    4236:	f3c3 7500 	ubfx	r5, r3, #28, #1
    423a:	2401      	movs	r4, #1
    423c:	f001 00fe 	and.w	r0, r1, #254	; 0xfe
    4240:	e88d 0030 	stmia.w	sp, {r4, r5}
    4244:	4631      	mov	r1, r6
    4246:	f3c3 2307 	ubfx	r3, r3, #8, #8
    424a:	f001 fbdd 	bl	5a08 <am_hal_i2c_bit_bang_send>
    424e:	e6cb      	b.n	3fe8 <am_hal_iom_i2c_write_nq+0x70>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4250:	4a10      	ldr	r2, [pc, #64]	; (4294 <am_hal_iom_i2c_write_nq+0x31c>)
    4252:	4811      	ldr	r0, [pc, #68]	; (4298 <am_hal_iom_i2c_write_nq+0x320>)
    4254:	9303      	str	r3, [sp, #12]
    4256:	f640 7107 	movw	r1, #3847	; 0xf07
    425a:	f7fd ff1f 	bl	209c <am_hal_debug_error>
    425e:	9b03      	ldr	r3, [sp, #12]
    4260:	e77b      	b.n	415a <am_hal_iom_i2c_write_nq+0x1e2>
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
        //
        // Re-enable IOM interrupts.
        //
        // Clear interrupts
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    4262:	f240 71ff 	movw	r1, #2047	; 0x7ff
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    4266:	9a02      	ldr	r2, [sp, #8]
    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_WRITE, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
    4268:	f808 0004 	strb.w	r0, [r8, r4]
        //
        // Re-enable IOM interrupts.
        //
        // Clear interrupts
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    426c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    4270:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
    4274:	e69c      	b.n	3fb0 <am_hal_iom_i2c_write_nq+0x38>
    }

    //
    // Make sure we check the number of bytes we're writing to the FIFO.
    //
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    4276:	4a07      	ldr	r2, [pc, #28]	; (4294 <am_hal_iom_i2c_write_nq+0x31c>)
    4278:	4807      	ldr	r0, [pc, #28]	; (4298 <am_hal_iom_i2c_write_nq+0x320>)
    427a:	9303      	str	r3, [sp, #12]
    427c:	f640 7107 	movw	r1, #3847	; 0xf07
    4280:	f7fd ff0c 	bl	209c <am_hal_debug_error>
    4284:	9b03      	ldr	r3, [sp, #12]
    4286:	e6e0      	b.n	404a <am_hal_iom_i2c_write_nq+0xd2>
    4288:	10001188 	.word	0x10001188
    428c:	0000641c 	.word	0x0000641c
    4290:	100016c8 	.word	0x100016c8
    4294:	000062d8 	.word	0x000062d8
    4298:	0000630c 	.word	0x0000630c
    429c:	10001180 	.word	0x10001180
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    42a0:	f8d9 3000 	ldr.w	r3, [r9]
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    42a4:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    42a8:	bf18      	it	ne
    42aa:	2005      	movne	r0, #5
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    42ac:	d002      	beq.n	42b4 <am_hal_iom_i2c_write_nq+0x33c>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    }
    else
    {
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    42ae:	f808 0004 	strb.w	r0, [r8, r4]
    42b2:	e7b8      	b.n	4226 <am_hal_iom_i2c_write_nq+0x2ae>
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    42b4:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    42b8:	d105      	bne.n	42c6 <am_hal_iom_i2c_write_nq+0x34e>
//!
//*****************************************************************************
static am_hal_iom_status_e
internal_iom_get_int_err(uint32_t ui32Module, uint32_t ui32IntStatus)
{
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    42ba:	f013 0f10 	tst.w	r3, #16
    42be:	bf14      	ite	ne
    42c0:	2006      	movne	r0, #6
    42c2:	2000      	moveq	r0, #0
    42c4:	e7f3      	b.n	42ae <am_hal_iom_i2c_write_nq+0x336>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    {
        // Loss of I2C multi-master arbitration
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    42c6:	2007      	movs	r0, #7
    42c8:	e7f1      	b.n	42ae <am_hal_iom_i2c_write_nq+0x336>
    42ca:	f507 7901 	add.w	r9, r7, #516	; 0x204
    42ce:	e79d      	b.n	420c <am_hal_iom_i2c_write_nq+0x294>

000042d0 <am_hal_iom_i2c_read_nq>:
    am_hal_i2c_bit_bang_enum_e i2cBBStatus;

    //
    // Validate parameters
    //
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    42d0:	2806      	cmp	r0, #6
    42d2:	d901      	bls.n	42d8 <am_hal_iom_i2c_read_nq+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    42d4:	2002      	movs	r0, #2
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    return ui32Status;
}
    42d6:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_read_nq(uint32_t ui32Module, uint32_t ui32BusAddress,
                       uint32_t *pui32Data, uint32_t ui32NumBytes,
                       uint32_t ui32Options)
{
    42d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42dc:	4604      	mov	r4, r0
    42de:	b087      	sub	sp, #28
    42e0:	461e      	mov	r6, r3
am_hal_iom_poll_complete(uint32_t ui32Module)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    42e2:	d013      	beq.n	430c <am_hal_iom_i2c_read_nq+0x3c>
    42e4:	4617      	mov	r7, r2
    42e6:	4acc      	ldr	r2, [pc, #816]	; (4618 <am_hal_iom_i2c_read_nq+0x348>)
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    42e8:	5d13      	ldrb	r3, [r2, r4]
    42ea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    42ee:	2b00      	cmp	r3, #0
    42f0:	d1fa      	bne.n	42e8 <am_hal_iom_i2c_read_nq+0x18>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    42f2:	f8df 8338 	ldr.w	r8, [pc, #824]	; 462c <am_hal_iom_i2c_read_nq+0x35c>
    42f6:	f808 0004 	strb.w	r0, [r8, r4]
    if (ui32NumBytes == 0)
    42fa:	b10e      	cbz	r6, 4300 <am_hal_iom_i2c_read_nq+0x30>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    42fc:	2eff      	cmp	r6, #255	; 0xff
    42fe:	d921      	bls.n	4344 <am_hal_iom_i2c_read_nq+0x74>

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    if (ui32NumBytes == 0)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    4300:	2003      	movs	r0, #3
    4302:	f808 0004 	strb.w	r0, [r8, r4]
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    return ui32Status;
}
    4306:	b007      	add	sp, #28
    4308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    430c:	f8df 831c 	ldr.w	r8, [pc, #796]	; 462c <am_hal_iom_i2c_read_nq+0x35c>
    4310:	2300      	movs	r3, #0
    4312:	f888 3006 	strb.w	r3, [r8, #6]
    if (ui32NumBytes == 0)
    4316:	2e00      	cmp	r6, #0
    4318:	d0f2      	beq.n	4300 <am_hal_iom_i2c_read_nq+0x30>
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        if ( ui32Options & AM_HAL_IOM_RAW )
    431a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    431c:	007c      	lsls	r4, r7, #1
    431e:	f140 8161 	bpl.w	45e4 <am_hal_iom_i2c_read_nq+0x314>
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    4322:	0048      	lsls	r0, r1, #1
    4324:	9910      	ldr	r1, [sp, #64]	; 0x40
    4326:	9300      	str	r3, [sp, #0]
    4328:	f3c1 7400 	ubfx	r4, r1, #28, #1
    432c:	f040 0701 	orr.w	r7, r0, #1
    4330:	b2f8      	uxtb	r0, r7
    4332:	4631      	mov	r1, r6
    4334:	9401      	str	r4, [sp, #4]
    4336:	f000 ff0f 	bl	5158 <am_hal_i2c_bit_bang_receive>
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    433a:	4eb8      	ldr	r6, [pc, #736]	; (461c <am_hal_iom_i2c_read_nq+0x34c>)
    433c:	5c30      	ldrb	r0, [r6, r0]
    433e:	f888 0006 	strb.w	r0, [r8, #6]
    4342:	e7e0      	b.n	4306 <am_hal_iom_i2c_read_nq+0x36>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    4344:	f504 29a0 	add.w	r9, r4, #327680	; 0x50000
    4348:	f109 0504 	add.w	r5, r9, #4
    434c:	ea4f 3905 	mov.w	r9, r5, lsl #12
    4350:	460a      	mov	r2, r1
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    4352:	f240 75ff 	movw	r5, #2047	; 0x7ff
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    4356:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    435a:	f8c9 0200 	str.w	r0, [r9, #512]	; 0x200
    435e:	9810      	ldr	r0, [sp, #64]	; 0x40
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    4360:	9104      	str	r1, [sp, #16]
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;

    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    4362:	f8c9 5208 	str.w	r5, [r9, #520]	; 0x208
    4366:	4633      	mov	r3, r6
    4368:	9000      	str	r0, [sp, #0]
    436a:	4621      	mov	r1, r4
    436c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4370:	f7fe f856 	bl	2420 <am_hal_iom_i2c_cmd_run.part.1>

    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_READ, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    4374:	2800      	cmp	r0, #0
    4376:	f040 8146 	bne.w	4606 <am_hal_iom_i2c_read_nq+0x336>
    437a:	4605      	mov	r5, r0
    437c:	f509 7b01 	add.w	fp, r9, #516	; 0x204
    4380:	f509 7a80 	add.w	sl, r9, #256	; 0x100
    4384:	9403      	str	r4, [sp, #12]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    4386:	f8da 4000 	ldr.w	r4, [sl]
    438a:	b2e2      	uxtb	r2, r4
    //
    while ( ui32NumBytes )
    {
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);

        if ( ui32BytesInFifo >= ui32NumBytes )
    438c:	42b2      	cmp	r2, r6
    438e:	f080 80a1 	bcs.w	44d4 <am_hal_iom_i2c_read_nq+0x204>
            // thing out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32NumBytes);
            ui32NumBytes = 0;
        }
        else if ( ui32BytesInFifo >= 4 )
    4392:	2a03      	cmp	r2, #3
    4394:	d97e      	bls.n	4494 <am_hal_iom_i2c_read_nq+0x1c4>

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    4396:	f8d9 111c 	ldr.w	r1, [r9, #284]	; 0x11c
    439a:	070a      	lsls	r2, r1, #28
        {
            //
            // If the fifo has at least one 32-bit word in it, copy whole
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    439c:	f004 03fc 	and.w	r3, r4, #252	; 0xfc

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    43a0:	d406      	bmi.n	43b0 <am_hal_iom_i2c_read_nq+0xe0>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    43a2:	f8da 0000 	ldr.w	r0, [sl]
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    43a6:	fa5f fc80 	uxtb.w	ip, r0
    43aa:	4563      	cmp	r3, ip
    43ac:	f200 8153 	bhi.w	4656 <am_hal_iom_i2c_read_nq+0x386>

    //
    // Figure out how many whole words we're reading from the fifo, and how
    // many bytes will be left over when we're done.
    //
    ui32NumWords = ui32NumBytes / 4;
    43b0:	089a      	lsrs	r2, r3, #2
    43b2:	9205      	str	r2, [sp, #20]
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);
    43b4:	0091      	lsls	r1, r2, #2

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    43b6:	2a00      	cmp	r2, #0
    43b8:	d056      	beq.n	4468 <am_hal_iom_i2c_read_nq+0x198>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    43ba:	463a      	mov	r2, r7
    43bc:	f8d9 0000 	ldr.w	r0, [r9]
    43c0:	f842 0b04 	str.w	r0, [r2], #4
    43c4:	eb07 0e01 	add.w	lr, r7, r1
    43c8:	f1a1 0c04 	sub.w	ip, r1, #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    43cc:	4572      	cmp	r2, lr
    43ce:	f3cc 0082 	ubfx	r0, ip, #2, #3
    43d2:	d049      	beq.n	4468 <am_hal_iom_i2c_read_nq+0x198>
    43d4:	b348      	cbz	r0, 442a <am_hal_iom_i2c_read_nq+0x15a>
    43d6:	2801      	cmp	r0, #1
    43d8:	d021      	beq.n	441e <am_hal_iom_i2c_read_nq+0x14e>
    43da:	2802      	cmp	r0, #2
    43dc:	d01b      	beq.n	4416 <am_hal_iom_i2c_read_nq+0x146>
    43de:	2803      	cmp	r0, #3
    43e0:	d015      	beq.n	440e <am_hal_iom_i2c_read_nq+0x13e>
    43e2:	2804      	cmp	r0, #4
    43e4:	d00f      	beq.n	4406 <am_hal_iom_i2c_read_nq+0x136>
    43e6:	2805      	cmp	r0, #5
    43e8:	d009      	beq.n	43fe <am_hal_iom_i2c_read_nq+0x12e>
    43ea:	2806      	cmp	r0, #6
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    43ec:	bf1c      	itt	ne
    43ee:	f8d9 0000 	ldrne.w	r0, [r9]
    43f2:	f842 0b04 	strne.w	r0, [r2], #4
    43f6:	f8d9 0000 	ldr.w	r0, [r9]
    43fa:	f842 0b04 	str.w	r0, [r2], #4
    43fe:	f8d9 0000 	ldr.w	r0, [r9]
    4402:	f842 0b04 	str.w	r0, [r2], #4
    4406:	f8d9 0000 	ldr.w	r0, [r9]
    440a:	f842 0b04 	str.w	r0, [r2], #4
    440e:	f8d9 0000 	ldr.w	r0, [r9]
    4412:	f842 0b04 	str.w	r0, [r2], #4
    4416:	f8d9 0000 	ldr.w	r0, [r9]
    441a:	f842 0b04 	str.w	r0, [r2], #4
    441e:	f8d9 0000 	ldr.w	r0, [r9]
    4422:	f842 0b04 	str.w	r0, [r2], #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    4426:	4572      	cmp	r2, lr
    4428:	d01e      	beq.n	4468 <am_hal_iom_i2c_read_nq+0x198>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    442a:	4610      	mov	r0, r2
    442c:	f8d9 c000 	ldr.w	ip, [r9]
    4430:	f840 cb04 	str.w	ip, [r0], #4
    4434:	f8d9 c000 	ldr.w	ip, [r9]
    4438:	f8c2 c004 	str.w	ip, [r2, #4]
    443c:	f8d9 c000 	ldr.w	ip, [r9]
    4440:	f8c0 c004 	str.w	ip, [r0, #4]
    4444:	f8d9 0000 	ldr.w	r0, [r9]
    4448:	60d0      	str	r0, [r2, #12]
    444a:	f8d9 0000 	ldr.w	r0, [r9]
    444e:	6110      	str	r0, [r2, #16]
    4450:	f8d9 0000 	ldr.w	r0, [r9]
    4454:	6150      	str	r0, [r2, #20]
    4456:	f8d9 0000 	ldr.w	r0, [r9]
    445a:	6190      	str	r0, [r2, #24]
    445c:	f8d9 0000 	ldr.w	r0, [r9]
    4460:	61d0      	str	r0, [r2, #28]
    4462:	3220      	adds	r2, #32
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    4464:	4572      	cmp	r2, lr
    4466:	d1e0      	bne.n	442a <am_hal_iom_i2c_read_nq+0x15a>
    // definition requests, we wouldn't need to do this. It's possible to call
    // this function with a re-cast or packed pointer instead though. If that
    // happens, we want to be careful not to overwrite any data that might be
    // sitting just past the end of the destination array.
    //
    if ( ui32Leftovers )
    4468:	428b      	cmp	r3, r1
    446a:	d00f      	beq.n	448c <am_hal_iom_i2c_read_nq+0x1bc>
    {
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    446c:	f8d9 2000 	ldr.w	r2, [r9]
        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    4470:	9805      	ldr	r0, [sp, #20]
    4472:	4439      	add	r1, r7
    4474:	f807 2020 	strb.w	r2, [r7, r0, lsl #2]
    4478:	f3c2 2e07 	ubfx	lr, r2, #8, #8
    447c:	f3c2 4007 	ubfx	r0, r2, #16, #8
    4480:	f3c2 6207 	ubfx	r2, r2, #24, #8
    4484:	f881 e001 	strb.w	lr, [r1, #1]
    4488:	7088      	strb	r0, [r1, #2]
    448a:	70ca      	strb	r2, [r1, #3]
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);

            ui32NumBytes -= ui32BytesInFifo & ~0x3;
            pui32Data += ui32BytesInFifo >> 2;
    448c:	f004 01fc 	and.w	r1, r4, #252	; 0xfc
    4490:	440f      	add	r7, r1
            // If the fifo has at least one 32-bit word in it, copy whole
            // words out.
            //
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);

            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    4492:	1af6      	subs	r6, r6, r3
            pui32Data += ui32BytesInFifo >> 2;
        }

        if ( bCmdCmp == true )
    4494:	2d01      	cmp	r5, #1
    4496:	d006      	beq.n	44a6 <am_hal_iom_i2c_read_nq+0x1d6>
        {
            // No more data expected - exit out of loop
            break;
        }

        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    4498:	f8db 5000 	ldr.w	r5, [fp]
    449c:	f005 0501 	and.w	r5, r5, #1
    }

    //
    // Start a loop to catch the Rx data.
    //
    while ( ui32NumBytes )
    44a0:	2e00      	cmp	r6, #0
    44a2:	f47f af70 	bne.w	4386 <am_hal_iom_i2c_read_nq+0xb6>
    44a6:	9c03      	ldr	r4, [sp, #12]
    }

    //
    // Make sure CMDCMP was raised,
    //
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    44a8:	4d5d      	ldr	r5, [pc, #372]	; (4620 <am_hal_iom_i2c_read_nq+0x350>)
    44aa:	2301      	movs	r3, #1
    44ac:	4659      	mov	r1, fp
    44ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    44b2:	461a      	mov	r2, r3
    44b4:	f7fd fdfa 	bl	20ac <am_hal_flash_delay_status_change>
                 AM_REG_IOMSTRn(ui32Module) + AM_REG_IOMSTR_INTSTAT_O,
                 AM_REG_IOMSTR_INTEN_CMDCMP_M, AM_REG_IOMSTR_INTEN_CMDCMP_M);

    if (waitStatus != 1)
    44b8:	2801      	cmp	r0, #1
    44ba:	f000 80b9 	beq.w	4630 <am_hal_iom_i2c_read_nq+0x360>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    44be:	2001      	movs	r0, #1
    44c0:	f808 0004 	strb.w	r0, [r8, r4]
    }
    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    44c4:	f240 74ff 	movw	r4, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    44c8:	9e04      	ldr	r6, [sp, #16]
    }
    //
    // Re-enable IOM interrupts.
    //
    // Clear interrupts
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    44ca:	f8c9 4208 	str.w	r4, [r9, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    44ce:	f8c9 6200 	str.w	r6, [r9, #512]	; 0x200
    44d2:	e718      	b.n	4306 <am_hal_iom_i2c_read_nq+0x36>

    //
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    44d4:	f8d9 311c 	ldr.w	r3, [r9, #284]	; 0x11c
    44d8:	9c03      	ldr	r4, [sp, #12]
    44da:	0719      	lsls	r1, r3, #28
    44dc:	d40a      	bmi.n	44f4 <am_hal_iom_i2c_read_nq+0x224>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    {
        return 0;
    }

    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    44de:	f8d9 0100 	ldr.w	r0, [r9, #256]	; 0x100
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    44e2:	b2c2      	uxtb	r2, r0
    44e4:	42b2      	cmp	r2, r6
    44e6:	d205      	bcs.n	44f4 <am_hal_iom_i2c_read_nq+0x224>
    44e8:	4a4e      	ldr	r2, [pc, #312]	; (4624 <am_hal_iom_i2c_read_nq+0x354>)
    44ea:	484f      	ldr	r0, [pc, #316]	; (4628 <am_hal_iom_i2c_read_nq+0x358>)
    44ec:	f640 7142 	movw	r1, #3906	; 0xf42
    44f0:	f7fd fdd4 	bl	209c <am_hal_debug_error>

    //
    // Figure out how many whole words we're reading from the fifo, and how
    // many bytes will be left over when we're done.
    //
    ui32NumWords = ui32NumBytes / 4;
    44f4:	08b0      	lsrs	r0, r6, #2
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);
    44f6:	0081      	lsls	r1, r0, #2
    44f8:	1a76      	subs	r6, r6, r1

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    44fa:	2800      	cmp	r0, #0
    44fc:	d056      	beq.n	45ac <am_hal_iom_i2c_read_nq+0x2dc>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    44fe:	463b      	mov	r3, r7
    4500:	f8d9 2000 	ldr.w	r2, [r9]
    4504:	f843 2b04 	str.w	r2, [r3], #4
    4508:	eb07 0e01 	add.w	lr, r7, r1
    450c:	f1a1 0a04 	sub.w	sl, r1, #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    4510:	459e      	cmp	lr, r3
    4512:	f3ca 0282 	ubfx	r2, sl, #2, #3
    4516:	d049      	beq.n	45ac <am_hal_iom_i2c_read_nq+0x2dc>
    4518:	b34a      	cbz	r2, 456e <am_hal_iom_i2c_read_nq+0x29e>
    451a:	2a01      	cmp	r2, #1
    451c:	d021      	beq.n	4562 <am_hal_iom_i2c_read_nq+0x292>
    451e:	2a02      	cmp	r2, #2
    4520:	d01b      	beq.n	455a <am_hal_iom_i2c_read_nq+0x28a>
    4522:	2a03      	cmp	r2, #3
    4524:	d015      	beq.n	4552 <am_hal_iom_i2c_read_nq+0x282>
    4526:	2a04      	cmp	r2, #4
    4528:	d00f      	beq.n	454a <am_hal_iom_i2c_read_nq+0x27a>
    452a:	2a05      	cmp	r2, #5
    452c:	d009      	beq.n	4542 <am_hal_iom_i2c_read_nq+0x272>
    452e:	2a06      	cmp	r2, #6
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    4530:	bf1c      	itt	ne
    4532:	f8d9 2000 	ldrne.w	r2, [r9]
    4536:	f843 2b04 	strne.w	r2, [r3], #4
    453a:	f8d9 2000 	ldr.w	r2, [r9]
    453e:	f843 2b04 	str.w	r2, [r3], #4
    4542:	f8d9 2000 	ldr.w	r2, [r9]
    4546:	f843 2b04 	str.w	r2, [r3], #4
    454a:	f8d9 2000 	ldr.w	r2, [r9]
    454e:	f843 2b04 	str.w	r2, [r3], #4
    4552:	f8d9 2000 	ldr.w	r2, [r9]
    4556:	f843 2b04 	str.w	r2, [r3], #4
    455a:	f8d9 2000 	ldr.w	r2, [r9]
    455e:	f843 2b04 	str.w	r2, [r3], #4
    4562:	f8d9 2000 	ldr.w	r2, [r9]
    4566:	f843 2b04 	str.w	r2, [r3], #4
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    456a:	459e      	cmp	lr, r3
    456c:	d01e      	beq.n	45ac <am_hal_iom_i2c_read_nq+0x2dc>
    {
        //
        // Copy data out of the FIFO, one word at a time.
        //
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    456e:	469a      	mov	sl, r3
    4570:	f8d9 c000 	ldr.w	ip, [r9]
    4574:	f84a cb04 	str.w	ip, [sl], #4
    4578:	f8d9 c000 	ldr.w	ip, [r9]
    457c:	f8c3 c004 	str.w	ip, [r3, #4]
    4580:	f8d9 c000 	ldr.w	ip, [r9]
    4584:	f8ca c004 	str.w	ip, [sl, #4]
    4588:	f8d9 2000 	ldr.w	r2, [r9]
    458c:	60da      	str	r2, [r3, #12]
    458e:	f8d9 2000 	ldr.w	r2, [r9]
    4592:	611a      	str	r2, [r3, #16]
    4594:	f8d9 2000 	ldr.w	r2, [r9]
    4598:	615a      	str	r2, [r3, #20]
    459a:	f8d9 2000 	ldr.w	r2, [r9]
    459e:	619a      	str	r2, [r3, #24]
    45a0:	f8d9 2000 	ldr.w	r2, [r9]
    45a4:	61da      	str	r2, [r3, #28]
    45a6:	3320      	adds	r3, #32
    ui32Leftovers = ui32NumBytes - (ui32NumWords * 4);

    //
    // Copy out as many full words as we can.
    //
    for ( i = 0; i < ui32NumWords; i++ )
    45a8:	459e      	cmp	lr, r3
    45aa:	d1e0      	bne.n	456e <am_hal_iom_i2c_read_nq+0x29e>
    // definition requests, we wouldn't need to do this. It's possible to call
    // this function with a re-cast or packed pointer instead though. If that
    // happens, we want to be careful not to overwrite any data that might be
    // sitting just past the end of the destination array.
    //
    if ( ui32Leftovers )
    45ac:	b1a6      	cbz	r6, 45d8 <am_hal_iom_i2c_read_nq+0x308>
    {
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    45ae:	f8d9 3000 	ldr.w	r3, [r9]
        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    45b2:	f807 3020 	strb.w	r3, [r7, r0, lsl #2]
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    45b6:	2e01      	cmp	r6, #1
    45b8:	d00e      	beq.n	45d8 <am_hal_iom_i2c_read_nq+0x308>
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    45ba:	4439      	add	r1, r7
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    45bc:	2e02      	cmp	r6, #2
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    45be:	f3c3 2707 	ubfx	r7, r3, #8, #8
    45c2:	704f      	strb	r7, [r1, #1]
        pui8Data = (uint8_t *) (&pui32Data[i]);

        //
        // If we had leftover bytes, copy them out one byte at a time.
        //
        for ( j = 0; j < ui32Leftovers; j++ )
    45c4:	d008      	beq.n	45d8 <am_hal_iom_i2c_read_nq+0x308>
    45c6:	2e03      	cmp	r6, #3
        {
            pui8Data[j] = sTempBuffer.bytes[j];
    45c8:	f3c3 4007 	ubfx	r0, r3, #16, #8
    45cc:	bf18      	it	ne
    45ce:	f3c3 6307 	ubfxne	r3, r3, #24, #8
    45d2:	7088      	strb	r0, [r1, #2]
    45d4:	bf18      	it	ne
    45d6:	70cb      	strbne	r3, [r1, #3]

            ui32NumBytes -= ui32BytesInFifo & ~0x3;
            pui32Data += ui32BytesInFifo >> 2;
        }

        if ( bCmdCmp == true )
    45d8:	2d01      	cmp	r5, #1
    45da:	f43f af65 	beq.w	44a8 <am_hal_iom_i2c_read_nq+0x1d8>
        {
            // No more data expected - exit out of loop
            break;
        }

        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    45de:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
    45e2:	e761      	b.n	44a8 <am_hal_iom_i2c_read_nq+0x1d8>
                                        (uint8_t *)pui32Data, 0, false,
                                        (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    45e4:	004b      	lsls	r3, r1, #1
    45e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    45e8:	f043 0b01 	orr.w	fp, r3, #1
    45ec:	f3c7 7400 	ubfx	r4, r7, #28, #1
    45f0:	2301      	movs	r3, #1
    45f2:	e88d 0018 	stmia.w	sp, {r3, r4}
    45f6:	fa5f f08b 	uxtb.w	r0, fp
    45fa:	4631      	mov	r1, r6
    45fc:	f3c5 2307 	ubfx	r3, r5, #8, #8
    4600:	f000 fdaa 	bl	5158 <am_hal_i2c_bit_bang_receive>
    4604:	e699      	b.n	433a <am_hal_iom_i2c_read_nq+0x6a>
        //
        // Re-enable IOM interrupts.
        //
        // Clear interrupts
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    4606:	9a04      	ldr	r2, [sp, #16]
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
        //
        // Re-enable IOM interrupts.
        //
        // Clear interrupts
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    4608:	f8c9 5208 	str.w	r5, [r9, #520]	; 0x208
    ui32Status = am_hal_iom_i2c_cmd_run(AM_HAL_IOM_READ, ui32Module, ui32BusAddress,
                           ui32NumBytes, ui32Options);

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
    460c:	f808 0004 	strb.w	r0, [r8, r4]
        //
        // Re-enable IOM interrupts.
        //
        // Clear interrupts
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    4610:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    4614:	e677      	b.n	4306 <am_hal_iom_i2c_read_nq+0x36>
    4616:	bf00      	nop
    4618:	10001188 	.word	0x10001188
    461c:	0000641c 	.word	0x0000641c
    4620:	100016c8 	.word	0x100016c8
    4624:	000063e4 	.word	0x000063e4
    4628:	0000630c 	.word	0x0000630c
    462c:	10001180 	.word	0x10001180
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    4630:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    4634:	f011 0fcc 	tst.w	r1, #204	; 0xcc
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    4638:	bf18      	it	ne
    463a:	2005      	movne	r0, #5
    //
    // Let's accumulate the errors
    //
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);

    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    463c:	d002      	beq.n	4644 <am_hal_iom_i2c_read_nq+0x374>
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    }
    else
    {
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    463e:	f808 0004 	strb.w	r0, [r8, r4]
    4642:	e73f      	b.n	44c4 <am_hal_iom_i2c_read_nq+0x1f4>
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    {
        // Error in hardware command issued or illegal access by SW
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    4644:	f411 6fe0 	tst.w	r1, #1792	; 0x700
    4648:	d10e      	bne.n	4668 <am_hal_iom_i2c_read_nq+0x398>
//!
//*****************************************************************************
static am_hal_iom_status_e
internal_iom_get_int_err(uint32_t ui32Module, uint32_t ui32IntStatus)
{
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    464a:	f011 0f10 	tst.w	r1, #16
    464e:	bf14      	ite	ne
    4650:	2006      	movne	r0, #6
    4652:	2000      	moveq	r0, #0
    4654:	e7f3      	b.n	463e <am_hal_iom_i2c_read_nq+0x36e>
    // Make sure we check the number of bytes we're reading from the FIFO.
    // This doesn't make sense for Full-Duplex operations.
    //
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    {
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    4656:	4a05      	ldr	r2, [pc, #20]	; (466c <am_hal_iom_i2c_read_nq+0x39c>)
    4658:	4805      	ldr	r0, [pc, #20]	; (4670 <am_hal_iom_i2c_read_nq+0x3a0>)
    465a:	9305      	str	r3, [sp, #20]
    465c:	f640 7142 	movw	r1, #3906	; 0xf42
    4660:	f7fd fd1c 	bl	209c <am_hal_debug_error>
    4664:	9b05      	ldr	r3, [sp, #20]
    4666:	e6a3      	b.n	43b0 <am_hal_iom_i2c_read_nq+0xe0>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    }
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    {
        // Loss of I2C multi-master arbitration
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    4668:	2007      	movs	r0, #7
    466a:	e7e8      	b.n	463e <am_hal_iom_i2c_read_nq+0x36e>
    466c:	000063e4 	.word	0x000063e4
    4670:	0000630c 	.word	0x0000630c

00004674 <am_hal_iom_i2c_write>:
    am_hal_iom_status_e ui32Status;
    am_hal_i2c_bit_bang_enum_e i2cBBStatus;
    //
    // Validate parameters
    //
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    4674:	2806      	cmp	r0, #6
    4676:	d901      	bls.n	467c <am_hal_iom_i2c_write+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    4678:	2002      	movs	r0, #2
        //
        ui32Status = am_hal_iom_i2c_write_nq(ui32Module, ui32BusAddress, pui32Data,
                                ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    467a:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_write(uint32_t ui32Module, uint32_t ui32BusAddress,
                     uint32_t *pui32Data, uint32_t ui32NumBytes,
                     uint32_t ui32Options)
{
    467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4680:	461e      	mov	r6, r3
    4682:	b08f      	sub	sp, #60	; 0x3c
    4684:	4605      	mov	r5, r0
am_hal_iom_poll_complete(uint32_t ui32Module)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    4686:	d014      	beq.n	46b2 <am_hal_iom_i2c_write+0x3e>
    4688:	4f4a      	ldr	r7, [pc, #296]	; (47b4 <am_hal_iom_i2c_write+0x140>)
    468a:	4691      	mov	r9, r2
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    468c:	5d7c      	ldrb	r4, [r7, r5]
    468e:	4a49      	ldr	r2, [pc, #292]	; (47b4 <am_hal_iom_i2c_write+0x140>)
    4690:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    4694:	2c00      	cmp	r4, #0
    4696:	d1f9      	bne.n	468c <am_hal_iom_i2c_write+0x18>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    4698:	f8df 8128 	ldr.w	r8, [pc, #296]	; 47c4 <am_hal_iom_i2c_write+0x150>
    469c:	f808 3005 	strb.w	r3, [r8, r5]
    if (ui32NumBytes == 0)
    46a0:	b10e      	cbz	r6, 46a6 <am_hal_iom_i2c_write+0x32>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    46a2:	2eff      	cmp	r6, #255	; 0xff
    46a4:	d91f      	bls.n	46e6 <am_hal_iom_i2c_write+0x72>

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    if (ui32NumBytes == 0)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    46a6:	2003      	movs	r0, #3
    46a8:	f808 0005 	strb.w	r0, [r8, r5]
        //
        ui32Status = am_hal_iom_i2c_write_nq(ui32Module, ui32BusAddress, pui32Data,
                                ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    46ac:	b00f      	add	sp, #60	; 0x3c
    46ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    46b2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 47c4 <am_hal_iom_i2c_write+0x150>
    46b6:	2300      	movs	r3, #0
    46b8:	f888 3006 	strb.w	r3, [r8, #6]
    if (ui32NumBytes == 0)
    46bc:	2e00      	cmp	r6, #0
    46be:	d0f2      	beq.n	46a6 <am_hal_iom_i2c_write+0x32>
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        if ( ui32Options & AM_HAL_IOM_RAW )
    46c0:	9d18      	ldr	r5, [sp, #96]	; 0x60
    46c2:	006c      	lsls	r4, r5, #1
    46c4:	d55e      	bpl.n	4784 <am_hal_iom_i2c_write+0x110>
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    46c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
    46c8:	9300      	str	r3, [sp, #0]
    46ca:	004f      	lsls	r7, r1, #1
    46cc:	f3c4 7500 	ubfx	r5, r4, #28, #1
    46d0:	f007 00fe 	and.w	r0, r7, #254	; 0xfe
    46d4:	4631      	mov	r1, r6
    46d6:	9501      	str	r5, [sp, #4]
    46d8:	f001 f996 	bl	5a08 <am_hal_i2c_bit_bang_send>
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    46dc:	4e36      	ldr	r6, [pc, #216]	; (47b8 <am_hal_iom_i2c_write+0x144>)
    46de:	5c30      	ldrb	r0, [r6, r0]
    46e0:	f888 0006 	strb.w	r0, [r8, #6]
        return ui32Status;
    46e4:	e7e2      	b.n	46ac <am_hal_iom_i2c_write+0x38>

    //
    // Check to see if queues have been enabled. If they are, we'll actually
    // switch to the queued interface.
    //
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    46e6:	4835      	ldr	r0, [pc, #212]	; (47bc <am_hal_iom_i2c_write+0x148>)
    46e8:	9204      	str	r2, [sp, #16]
    46ea:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    46ee:	eb0b 0a05 	add.w	sl, fp, r5
    46f2:	eb00 04ca 	add.w	r4, r0, sl, lsl #3
    46f6:	9003      	str	r0, [sp, #12]
    46f8:	6962      	ldr	r2, [r4, #20]
    46fa:	2a00      	cmp	r2, #0
    46fc:	d051      	beq.n	47a2 <am_hal_iom_i2c_write+0x12e>
    46fe:	9105      	str	r1, [sp, #20]
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4700:	f7fd fe52 	bl	23a8 <am_hal_interrupt_master_disable>
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    4704:	9904      	ldr	r1, [sp, #16]
    4706:	9b03      	ldr	r3, [sp, #12]
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4708:	4682      	mov	sl, r0
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    470a:	5d48      	ldrb	r0, [r1, r5]
    470c:	9905      	ldr	r1, [sp, #20]
    470e:	b908      	cbnz	r0, 4714 <am_hal_iom_i2c_write+0xa0>
    4710:	68a4      	ldr	r4, [r4, #8]
    4712:	b1dc      	cbz	r4, 474c <am_hal_iom_i2c_write+0xd8>
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    4714:	eb0b 0205 	add.w	r2, fp, r5
    4718:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    471c:	2702      	movs	r7, #2
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    471e:	2300      	movs	r3, #0
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    4720:	9109      	str	r1, [sp, #36]	; 0x24
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    4722:	960b      	str	r6, [sp, #44]	; 0x2c
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    4724:	2201      	movs	r2, #1
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    4726:	9e18      	ldr	r6, [sp, #96]	; 0x60
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
    4728:	9508      	str	r5, [sp, #32]
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    472a:	a907      	add	r1, sp, #28
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
    472c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    4730:	960c      	str	r6, [sp, #48]	; 0x30
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    4732:	9707      	str	r7, [sp, #28]
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    4734:	930d      	str	r3, [sp, #52]	; 0x34

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    4736:	f000 fb03 	bl	4d40 <am_hal_queue_item_add>
    473a:	b9c8      	cbnz	r0, 4770 <am_hal_iom_i2c_write+0xfc>
        {
            //
            // Didn't have enough memory.
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    473c:	2408      	movs	r4, #8
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    473e:	4650      	mov	r0, sl
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    4740:	f808 4005 	strb.w	r4, [r8, r5]
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4744:	f7fd fe34 	bl	23b0 <am_hal_interrupt_master_set>
    4748:	4620      	mov	r0, r4
    474a:	e7af      	b.n	46ac <am_hal_iom_i2c_write+0x38>
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    474c:	5d78      	ldrb	r0, [r7, r5]
    474e:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    4752:	2800      	cmp	r0, #0
    4754:	d1fa      	bne.n	474c <am_hal_iom_i2c_write+0xd8>
    4756:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4758:	9401      	str	r4, [sp, #4]
    475a:	9200      	str	r2, [sp, #0]
    475c:	4633      	mov	r3, r6
    475e:	464a      	mov	r2, r9
    4760:	4628      	mov	r0, r5
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    4762:	f808 4005 	strb.w	r4, [r8, r5]
    4766:	f7fd ffd5 	bl	2714 <am_hal_iom_i2c_write_nb.part.8>
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    476a:	4604      	mov	r4, r0
    476c:	2800      	cmp	r0, #0
    476e:	d1e6      	bne.n	473e <am_hal_iom_i2c_write+0xca>
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4770:	4650      	mov	r0, sl
    4772:	f7fd fe1d 	bl	23b0 <am_hal_interrupt_master_set>
        if (ui32Status == AM_HAL_IOM_SUCCESS)
        {
            //
            // Wait until the transaction actually clears.
            //
            am_hal_iom_queue_flush(ui32Module);
    4776:	4912      	ldr	r1, [pc, #72]	; (47c0 <am_hal_iom_i2c_write+0x14c>)
    4778:	4628      	mov	r0, r5
    477a:	680f      	ldr	r7, [r1, #0]
    477c:	47b8      	blx	r7
            // g_iom_error_status gets set in the isr handling
            ui32Status = g_iom_error_status[ui32Module];
    477e:	f818 0005 	ldrb.w	r0, [r8, r5]
    4782:	e793      	b.n	46ac <am_hal_iom_i2c_write+0x38>
                                     (uint8_t *)pui32Data, 0, false,
                                     (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    4784:	f3c5 7400 	ubfx	r4, r5, #28, #1
    4788:	2301      	movs	r3, #1
    478a:	e88d 0018 	stmia.w	sp, {r3, r4}
    478e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4790:	0048      	lsls	r0, r1, #1
    4792:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4796:	4631      	mov	r1, r6
    4798:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    479c:	f001 f934 	bl	5a08 <am_hal_i2c_bit_bang_send>
    47a0:	e79c      	b.n	46dc <am_hal_iom_i2c_write+0x68>
    else
    {
        //
        // Otherwise, we'll just do a polled transaction.
        //
        ui32Status = am_hal_iom_i2c_write_nq(ui32Module, ui32BusAddress, pui32Data,
    47a2:	9f18      	ldr	r7, [sp, #96]	; 0x60
    47a4:	9700      	str	r7, [sp, #0]
    47a6:	4633      	mov	r3, r6
    47a8:	464a      	mov	r2, r9
    47aa:	4628      	mov	r0, r5
    47ac:	f7ff fbe4 	bl	3f78 <am_hal_iom_i2c_write_nq>
    47b0:	e77c      	b.n	46ac <am_hal_iom_i2c_write+0x38>
    47b2:	bf00      	nop
    47b4:	10001188 	.word	0x10001188
    47b8:	0000641c 	.word	0x0000641c
    47bc:	10001758 	.word	0x10001758
    47c0:	10001068 	.word	0x10001068
    47c4:	10001180 	.word	0x10001180

000047c8 <am_hal_iom_i2c_read>:
    am_hal_iom_status_e ui32Status;
    am_hal_i2c_bit_bang_enum_e i2cBBStatus;
    //
    // Validate parameters
    //
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    47c8:	2806      	cmp	r0, #6
    47ca:	d901      	bls.n	47d0 <am_hal_iom_i2c_read+0x8>
    {
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    47cc:	2002      	movs	r0, #2
        //
        ui32Status = am_hal_iom_i2c_read_nq(ui32Module, ui32BusAddress, pui32Data,
                               ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    47ce:	4770      	bx	lr
//*****************************************************************************
am_hal_iom_status_e
am_hal_iom_i2c_read(uint32_t ui32Module, uint32_t ui32BusAddress,
                    uint32_t *pui32Data, uint32_t ui32NumBytes,
                    uint32_t ui32Options)
{
    47d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d4:	461e      	mov	r6, r3
    47d6:	b08f      	sub	sp, #60	; 0x3c
    47d8:	4605      	mov	r5, r0
am_hal_iom_poll_complete(uint32_t ui32Module)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    47da:	d014      	beq.n	4806 <am_hal_iom_i2c_read+0x3e>
    47dc:	4f4b      	ldr	r7, [pc, #300]	; (490c <am_hal_iom_i2c_read+0x144>)
    47de:	4691      	mov	r9, r2
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    47e0:	5d7c      	ldrb	r4, [r7, r5]
    47e2:	4a4a      	ldr	r2, [pc, #296]	; (490c <am_hal_iom_i2c_read+0x144>)
    47e4:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    47e8:	2c00      	cmp	r4, #0
    47ea:	d1f9      	bne.n	47e0 <am_hal_iom_i2c_read+0x18>
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    47ec:	f8df 812c 	ldr.w	r8, [pc, #300]	; 491c <am_hal_iom_i2c_read+0x154>
    47f0:	f808 3005 	strb.w	r3, [r8, r5]
    if (ui32NumBytes == 0)
    47f4:	b10e      	cbz	r6, 47fa <am_hal_iom_i2c_read+0x32>
    }

    //
    // Make sure the transfer isn't too long for the hardware to support.
    //
    if (ui32NumBytes >= 256)
    47f6:	2eff      	cmp	r6, #255	; 0xff
    47f8:	d920      	bls.n	483c <am_hal_iom_i2c_read+0x74>

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    if (ui32NumBytes == 0)
    {
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    47fa:	2003      	movs	r0, #3
    47fc:	f808 0005 	strb.w	r0, [r8, r5]
        //
        ui32Status = am_hal_iom_i2c_read_nq(ui32Module, ui32BusAddress, pui32Data,
                               ui32NumBytes, ui32Options);
    }
    return ui32Status;
}
    4800:	b00f      	add	sp, #60	; 0x3c
    4802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    4806:	f8df 8114 	ldr.w	r8, [pc, #276]	; 491c <am_hal_iom_i2c_read+0x154>
    480a:	2300      	movs	r3, #0
    480c:	f888 3006 	strb.w	r3, [r8, #6]
    if (ui32NumBytes == 0)
    4810:	2e00      	cmp	r6, #0
    4812:	d0f2      	beq.n	47fa <am_hal_iom_i2c_read+0x32>
    // Redirect to the bit-bang interface if the module number matches the
    // software I2C module.
    //
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    {
        if ( ui32Options & AM_HAL_IOM_RAW )
    4814:	9d18      	ldr	r5, [sp, #96]	; 0x60
    4816:	006c      	lsls	r4, r5, #1
    4818:	d55f      	bpl.n	48da <am_hal_iom_i2c_read+0x112>
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    481a:	9c18      	ldr	r4, [sp, #96]	; 0x60
    481c:	9300      	str	r3, [sp, #0]
    481e:	0048      	lsls	r0, r1, #1
    4820:	f040 0701 	orr.w	r7, r0, #1
    4824:	f3c4 7500 	ubfx	r5, r4, #28, #1
    4828:	b2f8      	uxtb	r0, r7
    482a:	4631      	mov	r1, r6
    482c:	9501      	str	r5, [sp, #4]
    482e:	f000 fc93 	bl	5158 <am_hal_i2c_bit_bang_receive>
        }

        //
        // Return. convert i2c bb retCode
        //
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    4832:	4a37      	ldr	r2, [pc, #220]	; (4910 <am_hal_iom_i2c_read+0x148>)
    4834:	5c10      	ldrb	r0, [r2, r0]
    4836:	f888 0006 	strb.w	r0, [r8, #6]
        return ui32Status;
    483a:	e7e1      	b.n	4800 <am_hal_iom_i2c_read+0x38>

    //
    // Check to see if queues have been enabled. If they are, we'll actually
    // switch to the queued interface.
    //
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    483c:	4835      	ldr	r0, [pc, #212]	; (4914 <am_hal_iom_i2c_read+0x14c>)
    483e:	9204      	str	r2, [sp, #16]
    4840:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    4844:	eb0b 0a05 	add.w	sl, fp, r5
    4848:	eb00 04ca 	add.w	r4, r0, sl, lsl #3
    484c:	9003      	str	r0, [sp, #12]
    484e:	6962      	ldr	r2, [r4, #20]
    4850:	2a00      	cmp	r2, #0
    4852:	d053      	beq.n	48fc <am_hal_iom_i2c_read+0x134>
    4854:	9105      	str	r1, [sp, #20]
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4856:	f7fd fda7 	bl	23a8 <am_hal_interrupt_master_disable>
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    485a:	9904      	ldr	r1, [sp, #16]
    485c:	9b03      	ldr	r3, [sp, #12]
    }

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    485e:	4682      	mov	sl, r0
    // there's nothing in the queue already, we can go ahead and start the
    // transaction in the physical IOM. Need to check for the g_bIomBusy to
    // avoid a race condition where IDLE is set - but the command complete
    // for previous transaction has not been processed yet
    //
    if ( (g_bIomBusy[ui32Module] == false) &&
    4860:	5d48      	ldrb	r0, [r1, r5]
    4862:	9905      	ldr	r1, [sp, #20]
    4864:	b908      	cbnz	r0, 486a <am_hal_iom_i2c_read+0xa2>
    4866:	68a4      	ldr	r4, [r4, #8]
    4868:	b1dc      	cbz	r4, 48a2 <am_hal_iom_i2c_read+0xda>
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    486a:	eb0b 0205 	add.w	r2, fp, r5
    486e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    4872:	2703      	movs	r7, #3
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    4874:	2300      	movs	r3, #0
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    4876:	9109      	str	r1, [sp, #36]	; 0x24
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    4878:	960b      	str	r6, [sp, #44]	; 0x2c
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    487a:	2201      	movs	r2, #1
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    487c:	9e18      	ldr	r6, [sp, #96]	; 0x60
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
        sIOMTransaction.ui32Module = ui32Module;
    487e:	9508      	str	r5, [sp, #32]
        sIOMTransaction.pfnCallback = pfnCallback;

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    4880:	a907      	add	r1, sp, #28
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
    4882:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
    4886:	960c      	str	r6, [sp, #48]	; 0x30
        //
        // Otherwise, we'll build a transaction structure and add it to the queue.
        //
        am_hal_iom_queue_entry_t sIOMTransaction;

        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    4888:	9707      	str	r7, [sp, #28]
        sIOMTransaction.ui32Module = ui32Module;
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
        sIOMTransaction.pui32Data = pui32Data;
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
        sIOMTransaction.ui32Options = ui32Options;
        sIOMTransaction.pfnCallback = pfnCallback;
    488a:	930d      	str	r3, [sp, #52]	; 0x34

        //
        // Make sure the item actually makes it into the queue
        //
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    488c:	f000 fa58 	bl	4d40 <am_hal_queue_item_add>
    4890:	b9c8      	cbnz	r0, 48c6 <am_hal_iom_i2c_read+0xfe>
        {
            //
            // Didn't have enough memory.
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    4892:	2408      	movs	r4, #8
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4894:	4650      	mov	r0, sl
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    {
        g_iom_error_status[ui32Module] = ui32Status;
    4896:	f808 4005 	strb.w	r4, [r8, r5]
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    489a:	f7fd fd89 	bl	23b0 <am_hal_interrupt_master_set>
    489e:	4620      	mov	r0, r4
    48a0:	e7ae      	b.n	4800 <am_hal_iom_i2c_read+0x38>
    }

    //
    // Poll on the IDLE bit in the status register.
    //
    while ( g_bIomBusy[ui32Module] );
    48a2:	5d78      	ldrb	r0, [r7, r5]
    48a4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    48a8:	2800      	cmp	r0, #0
    48aa:	d1fa      	bne.n	48a2 <am_hal_iom_i2c_read+0xda>
    48ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    48ae:	9401      	str	r4, [sp, #4]
    48b0:	9200      	str	r2, [sp, #0]
    48b2:	4633      	mov	r3, r6
    48b4:	464a      	mov	r2, r9
    48b6:	4628      	mov	r0, r5
    // Wait until the bus is idle
    //
    am_hal_iom_poll_complete(ui32Module);

    // Reset the error status
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    48b8:	f808 4005 	strb.w	r4, [r8, r5]
    48bc:	f7fd febe 	bl	263c <am_hal_iom_i2c_read_nb.part.9>
            //
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
        }
    }

    if (ui32Status != AM_HAL_IOM_SUCCESS)
    48c0:	4604      	mov	r4, r0
    48c2:	2800      	cmp	r0, #0
    48c4:	d1e6      	bne.n	4894 <am_hal_iom_i2c_read+0xcc>
        g_iom_error_status[ui32Module] = ui32Status;
    }
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
    48c6:	4650      	mov	r0, sl
    48c8:	f7fd fd72 	bl	23b0 <am_hal_interrupt_master_set>
        if (ui32Status == AM_HAL_IOM_SUCCESS)
        {
            //
            // Wait until the transaction actually clears.
            //
            am_hal_iom_queue_flush(ui32Module);
    48cc:	4912      	ldr	r1, [pc, #72]	; (4918 <am_hal_iom_i2c_read+0x150>)
    48ce:	4628      	mov	r0, r5
    48d0:	680f      	ldr	r7, [r1, #0]
    48d2:	47b8      	blx	r7
            // g_iom_error_status gets set in the isr handling
            ui32Status = g_iom_error_status[ui32Module];
    48d4:	f818 0005 	ldrb.w	r0, [r8, r5]
    48d8:	e792      	b.n	4800 <am_hal_iom_i2c_read+0x38>
                                        (uint8_t *)pui32Data, 0, false,
                                        (ui32Options & AM_HAL_IOM_NO_STOP));
        }
        else
        {
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    48da:	004b      	lsls	r3, r1, #1
    48dc:	4631      	mov	r1, r6
    48de:	9e18      	ldr	r6, [sp, #96]	; 0x60
    48e0:	f043 0e01 	orr.w	lr, r3, #1
    48e4:	f3c5 7400 	ubfx	r4, r5, #28, #1
    48e8:	2301      	movs	r3, #1
    48ea:	e88d 0018 	stmia.w	sp, {r3, r4}
    48ee:	fa5f f08e 	uxtb.w	r0, lr
    48f2:	f3c6 2307 	ubfx	r3, r6, #8, #8
    48f6:	f000 fc2f 	bl	5158 <am_hal_i2c_bit_bang_receive>
    48fa:	e79a      	b.n	4832 <am_hal_iom_i2c_read+0x6a>
    else
    {
        //
        // Otherwise, just perform a polled transaction.
        //
        ui32Status = am_hal_iom_i2c_read_nq(ui32Module, ui32BusAddress, pui32Data,
    48fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
    48fe:	9700      	str	r7, [sp, #0]
    4900:	4633      	mov	r3, r6
    4902:	464a      	mov	r2, r9
    4904:	4628      	mov	r0, r5
    4906:	f7ff fce3 	bl	42d0 <am_hal_iom_i2c_read_nq>
    490a:	e779      	b.n	4800 <am_hal_iom_i2c_read+0x38>
    490c:	10001188 	.word	0x10001188
    4910:	0000641c 	.word	0x0000641c
    4914:	10001758 	.word	0x10001758
    4918:	10001068 	.word	0x10001068
    491c:	10001180 	.word	0x10001180

00004920 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4920:	4b0d      	ldr	r3, [pc, #52]	; (4958 <am_hal_itm_enable+0x38>)
    4922:	6818      	ldr	r0, [r3, #0]
    4924:	07c2      	lsls	r2, r0, #31
    4926:	d416      	bmi.n	4956 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    4928:	4a0c      	ldr	r2, [pc, #48]	; (495c <am_hal_itm_enable+0x3c>)
    492a:	6811      	ldr	r1, [r2, #0]
    492c:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    4930:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    4932:	6810      	ldr	r0, [r2, #0]
    4934:	01c3      	lsls	r3, r0, #7
    4936:	d5fc      	bpl.n	4932 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    4938:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    493a:	4809      	ldr	r0, [pc, #36]	; (4960 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    493c:	4c09      	ldr	r4, [pc, #36]	; (4964 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    493e:	4d0a      	ldr	r5, [pc, #40]	; (4968 <am_hal_itm_enable+0x48>)
    4940:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    4942:	250f      	movs	r5, #15
    4944:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    4946:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    4948:	4908      	ldr	r1, [pc, #32]	; (496c <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    494a:	4b09      	ldr	r3, [pc, #36]	; (4970 <am_hal_itm_enable+0x50>)
    494c:	4a09      	ldr	r2, [pc, #36]	; (4974 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    494e:	f04f 30ff 	mov.w	r0, #4294967295
    4952:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    4954:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    4956:	4770      	bx	lr
    4958:	1000117c 	.word	0x1000117c
    495c:	e000edfc 	.word	0xe000edfc
    4960:	e0000fb0 	.word	0xe0000fb0
    4964:	e0000e40 	.word	0xe0000e40
    4968:	c5acce55 	.word	0xc5acce55
    496c:	e0000e00 	.word	0xe0000e00
    4970:	e0000e80 	.word	0xe0000e80
    4974:	00150511 	.word	0x00150511

00004978 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    4978:	7803      	ldrb	r3, [r0, #0]
    497a:	b1ab      	cbz	r3, 49a8 <am_hal_itm_print+0x30>
    497c:	4602      	mov	r2, r0
    497e:	2300      	movs	r3, #0
    4980:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    4984:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    4986:	2900      	cmp	r1, #0
    4988:	d1fa      	bne.n	4980 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    498a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    498e:	b430      	push	{r4, r5}
    4990:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    4992:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    4994:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    4998:	f8dc 3000 	ldr.w	r3, [ip]
    499c:	2b00      	cmp	r3, #0
    499e:	d0fb      	beq.n	4998 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    49a0:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    49a2:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    49a4:	d1f6      	bne.n	4994 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    49a6:	bc30      	pop	{r4, r5}
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop

000049ac <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    49ac:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    49ae:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    49b0:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    49b2:	b1c0      	cbz	r0, 49e6 <am_hal_pwrctrl_periph_enable+0x3a>
    49b4:	1e43      	subs	r3, r0, #1
    49b6:	4203      	tst	r3, r0
    49b8:	d115      	bne.n	49e6 <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    49ba:	f3ef 8010 	mrs	r0, PRIMASK
    49be:	9001      	str	r0, [sp, #4]
    49c0:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    49c2:	4a18      	ldr	r2, [pc, #96]	; (4a24 <am_hal_pwrctrl_periph_enable+0x78>)
    49c4:	6811      	ldr	r1, [r2, #0]
    49c6:	4321      	orrs	r1, r4
    49c8:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    49ca:	9b01      	ldr	r3, [sp, #4]
    49cc:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    49d0:	200e      	movs	r0, #14
    49d2:	f7fd fb65 	bl	20a0 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    49d6:	f014 0f0e 	tst.w	r4, #14
    49da:	d10a      	bne.n	49f2 <am_hal_pwrctrl_periph_enable+0x46>
    49dc:	f014 0f70 	tst.w	r4, #112	; 0x70
    49e0:	d00e      	beq.n	4a00 <am_hal_pwrctrl_periph_enable+0x54>
    49e2:	2408      	movs	r4, #8
    49e4:	e006      	b.n	49f4 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    49e6:	4a10      	ldr	r2, [pc, #64]	; (4a28 <am_hal_pwrctrl_periph_enable+0x7c>)
    49e8:	4810      	ldr	r0, [pc, #64]	; (4a2c <am_hal_pwrctrl_periph_enable+0x80>)
    49ea:	215d      	movs	r1, #93	; 0x5d
    49ec:	f7fd fb56 	bl	209c <am_hal_debug_error>
    49f0:	e7e3      	b.n	49ba <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    49f2:	2404      	movs	r4, #4
    49f4:	4a0e      	ldr	r2, [pc, #56]	; (4a30 <am_hal_pwrctrl_periph_enable+0x84>)
    49f6:	6811      	ldr	r1, [r2, #0]
    49f8:	420c      	tst	r4, r1
    49fa:	d0fc      	beq.n	49f6 <am_hal_pwrctrl_periph_enable+0x4a>
}
    49fc:	b002      	add	sp, #8
    49fe:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    4a00:	f240 1081 	movw	r0, #385	; 0x181
    4a04:	4020      	ands	r0, r4
    4a06:	b940      	cbnz	r0, 4a1a <am_hal_pwrctrl_periph_enable+0x6e>
    4a08:	05a3      	lsls	r3, r4, #22
    4a0a:	d408      	bmi.n	4a1e <am_hal_pwrctrl_periph_enable+0x72>
    4a0c:	f414 6f80 	tst.w	r4, #1024	; 0x400
    4a10:	bf14      	ite	ne
    4a12:	2410      	movne	r4, #16
    4a14:	f04f 34ff 	moveq.w	r4, #4294967295
    4a18:	e7ec      	b.n	49f4 <am_hal_pwrctrl_periph_enable+0x48>
    4a1a:	2402      	movs	r4, #2
    4a1c:	e7ea      	b.n	49f4 <am_hal_pwrctrl_periph_enable+0x48>
    4a1e:	2480      	movs	r4, #128	; 0x80
    4a20:	e7e8      	b.n	49f4 <am_hal_pwrctrl_periph_enable+0x48>
    4a22:	bf00      	nop
    4a24:	40021008 	.word	0x40021008
    4a28:	00006424 	.word	0x00006424
    4a2c:	00006458 	.word	0x00006458
    4a30:	40021014 	.word	0x40021014

00004a34 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    4a34:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    4a38:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    4a3a:	d03a      	beq.n	4ab2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    4a3c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    4a40:	f000 809d 	beq.w	4b7e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    4a44:	2801      	cmp	r0, #1
    4a46:	f000 809d 	beq.w	4b84 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    4a4a:	2803      	cmp	r0, #3
    4a4c:	f000 80a6 	beq.w	4b9c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    4a50:	2807      	cmp	r0, #7
    4a52:	f000 809c 	beq.w	4b8e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    4a56:	280f      	cmp	r0, #15
    4a58:	f000 80a5 	beq.w	4ba6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    4a5c:	281f      	cmp	r0, #31
    4a5e:	f000 80b1 	beq.w	4bc4 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    4a62:	283f      	cmp	r0, #63	; 0x3f
    4a64:	f000 80b5 	beq.w	4bd2 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    4a68:	287f      	cmp	r0, #127	; 0x7f
    4a6a:	f000 80b9 	beq.w	4be0 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    4a6e:	28ff      	cmp	r0, #255	; 0xff
    4a70:	f000 80a0 	beq.w	4bb4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    4a74:	f240 13ff 	movw	r3, #511	; 0x1ff
    4a78:	4298      	cmp	r0, r3
    4a7a:	f000 80b8 	beq.w	4bee <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    4a7e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4a82:	4288      	cmp	r0, r1
    4a84:	f000 80b9 	beq.w	4bfa <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    4a88:	f240 72ff 	movw	r2, #2047	; 0x7ff
    4a8c:	4290      	cmp	r0, r2
    4a8e:	d00e      	beq.n	4aae <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    4a90:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    4a94:	f000 80b7 	beq.w	4c06 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    4a98:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    4a9c:	42a0      	cmp	r0, r4
    4a9e:	f000 80b5 	beq.w	4c0c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    4aa2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    4aa6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    4aaa:	4560      	cmp	r0, ip
    4aac:	d132      	bne.n	4b14 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    4aae:	495c      	ldr	r1, [pc, #368]	; (4c20 <am_hal_pwrctrl_memory_enable+0x1ec>)
    4ab0:	e066      	b.n	4b80 <am_hal_pwrctrl_memory_enable+0x14c>
    4ab2:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    4ab6:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    4ab8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    4aba:	4c5a      	ldr	r4, [pc, #360]	; (4c24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4abc:	6822      	ldr	r2, [r4, #0]
    4abe:	402a      	ands	r2, r5
    4ac0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    4ac2:	4d58      	ldr	r5, [pc, #352]	; (4c24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4ac4:	682c      	ldr	r4, [r5, #0]
    4ac6:	4320      	orrs	r0, r4
    4ac8:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    4aca:	2b00      	cmp	r3, #0
    4acc:	d029      	beq.n	4b22 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4ace:	4a56      	ldr	r2, [pc, #344]	; (4c28 <am_hal_pwrctrl_memory_enable+0x1f4>)
    4ad0:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4ad2:	4203      	tst	r3, r0
    4ad4:	bf18      	it	ne
    4ad6:	20c6      	movne	r0, #198	; 0xc6
    4ad8:	d01f      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4ada:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4adc:	422b      	tst	r3, r5
    4ade:	d01c      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4ae0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4ae2:	4223      	tst	r3, r4
    4ae4:	d019      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4ae6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4ae8:	422b      	tst	r3, r5
    4aea:	d016      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4aec:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4aee:	4223      	tst	r3, r4
    4af0:	d013      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4af2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4af4:	422b      	tst	r3, r5
    4af6:	d010      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4af8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4afa:	4223      	tst	r3, r4
    4afc:	d00d      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4afe:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4b00:	422b      	tst	r3, r5
    4b02:	d00a      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4b04:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4b06:	4223      	tst	r3, r4
    4b08:	d007      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4b0a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    4b0c:	422b      	tst	r3, r5
    4b0e:	d004      	beq.n	4b1a <am_hal_pwrctrl_memory_enable+0xe6>
    4b10:	3809      	subs	r0, #9
    4b12:	d1e2      	bne.n	4ada <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    4b14:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    4b16:	bc30      	pop	{r4, r5}
    4b18:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    4b1a:	b911      	cbnz	r1, 4b22 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    4b1c:	2001      	movs	r0, #1
}
    4b1e:	bc30      	pop	{r4, r5}
    4b20:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b22:	4b41      	ldr	r3, [pc, #260]	; (4c28 <am_hal_pwrctrl_memory_enable+0x1f4>)
    4b24:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b26:	ea31 0402 	bics.w	r4, r1, r2
    4b2a:	bf18      	it	ne
    4b2c:	24c6      	movne	r4, #198	; 0xc6
    4b2e:	d0f5      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b30:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b32:	ea31 0000 	bics.w	r0, r1, r0
    4b36:	d0f1      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b38:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b3a:	ea31 0005 	bics.w	r0, r1, r5
    4b3e:	d0ed      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b40:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b42:	ea31 0002 	bics.w	r0, r1, r2
    4b46:	d0e9      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b48:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b4a:	ea31 0000 	bics.w	r0, r1, r0
    4b4e:	d0e5      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b50:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b52:	ea31 0005 	bics.w	r0, r1, r5
    4b56:	d0e1      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b58:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b5a:	ea31 0002 	bics.w	r0, r1, r2
    4b5e:	d0dd      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b60:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b62:	ea31 0000 	bics.w	r0, r1, r0
    4b66:	d0d9      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b68:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b6a:	ea31 0005 	bics.w	r0, r1, r5
    4b6e:	d0d5      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4b70:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    4b72:	ea31 0002 	bics.w	r0, r1, r2
    4b76:	d0d1      	beq.n	4b1c <am_hal_pwrctrl_memory_enable+0xe8>
    4b78:	3c09      	subs	r4, #9
    4b7a:	d1d9      	bne.n	4b30 <am_hal_pwrctrl_memory_enable+0xfc>
    4b7c:	e7ca      	b.n	4b14 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    4b7e:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    4b80:	2300      	movs	r3, #0
    4b82:	e79e      	b.n	4ac2 <am_hal_pwrctrl_memory_enable+0x8e>
    4b84:	4d29      	ldr	r5, [pc, #164]	; (4c2c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b86:	4b2a      	ldr	r3, [pc, #168]	; (4c30 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    4b88:	f44f 7180 	mov.w	r1, #256	; 0x100
    4b8c:	e795      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4b8e:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b92:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    4b96:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    4b9a:	e78e      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4b9c:	4d25      	ldr	r5, [pc, #148]	; (4c34 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b9e:	4b26      	ldr	r3, [pc, #152]	; (4c38 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    4ba0:	f44f 7140 	mov.w	r1, #768	; 0x300
    4ba4:	e789      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4ba6:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4baa:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    4bae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    4bb2:	e782      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4bb4:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4bb8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    4bbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    4bc0:	20ff      	movs	r0, #255	; 0xff
    4bc2:	e77a      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4bc4:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4bc8:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    4bcc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    4bd0:	e773      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4bd2:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4bd6:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    4bda:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    4bde:	e76c      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4be0:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4be4:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    4be8:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    4bec:	e765      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    4bee:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4bf2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    4bf6:	4911      	ldr	r1, [pc, #68]	; (4c3c <am_hal_pwrctrl_memory_enable+0x208>)
    4bf8:	e75f      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    4bfa:	4911      	ldr	r1, [pc, #68]	; (4c40 <am_hal_pwrctrl_memory_enable+0x20c>)
    4bfc:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    4c04:	e759      	b.n	4aba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    4c06:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4c0a:	e7b9      	b.n	4b80 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    4c0c:	4805      	ldr	r0, [pc, #20]	; (4c24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4c0e:	6803      	ldr	r3, [r0, #0]
    4c10:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    4c14:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    4c16:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    4c1a:	2100      	movs	r1, #0
    4c1c:	e757      	b.n	4ace <am_hal_pwrctrl_memory_enable+0x9a>
    4c1e:	bf00      	nop
    4c20:	0007ff00 	.word	0x0007ff00
    4c24:	40021010 	.word	0x40021010
    4c28:	40021014 	.word	0x40021014
    4c2c:	fffff801 	.word	0xfffff801
    4c30:	0007fe00 	.word	0x0007fe00
    4c34:	fffff803 	.word	0xfffff803
    4c38:	0007fc00 	.word	0x0007fc00
    4c3c:	0001ff00 	.word	0x0001ff00
    4c40:	0003ff00 	.word	0x0003ff00

00004c44 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4c44:	4b0f      	ldr	r3, [pc, #60]	; (4c84 <am_hal_pwrctrl_bucks_init+0x40>)
    4c46:	681a      	ldr	r2, [r3, #0]
    4c48:	0792      	lsls	r2, r2, #30
    4c4a:	d502      	bpl.n	4c52 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    4c4c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4c4e:	07c3      	lsls	r3, r0, #31
    4c50:	d40e      	bmi.n	4c70 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4c52:	4b0d      	ldr	r3, [pc, #52]	; (4c88 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4c54:	4a0b      	ldr	r2, [pc, #44]	; (4c84 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4c56:	6819      	ldr	r1, [r3, #0]
    4c58:	f041 0002 	orr.w	r0, r1, #2
    4c5c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    4c5e:	6819      	ldr	r1, [r3, #0]
    4c60:	f041 0001 	orr.w	r0, r1, #1
    4c64:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4c66:	6813      	ldr	r3, [r2, #0]
    4c68:	f003 0103 	and.w	r1, r3, #3
    4c6c:	2903      	cmp	r1, #3
    4c6e:	d1fa      	bne.n	4c66 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    4c70:	4a04      	ldr	r2, [pc, #16]	; (4c84 <am_hal_pwrctrl_bucks_init+0x40>)
    4c72:	6810      	ldr	r0, [r2, #0]
    4c74:	f000 0303 	and.w	r3, r0, #3
    4c78:	2b03      	cmp	r3, #3
    4c7a:	d1fa      	bne.n	4c72 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    4c7c:	2042      	movs	r0, #66	; 0x42
    4c7e:	f7fd ba0f 	b.w	20a0 <am_hal_flash_delay>
    4c82:	bf00      	nop
    4c84:	40021004 	.word	0x40021004
    4c88:	40021000 	.word	0x40021000

00004c8c <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4c8c:	4b0b      	ldr	r3, [pc, #44]	; (4cbc <am_hal_pwrctrl_bucks_enable+0x30>)
    4c8e:	681a      	ldr	r2, [r3, #0]
    4c90:	0792      	lsls	r2, r2, #30
    4c92:	d502      	bpl.n	4c9a <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    4c94:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4c96:	07c3      	lsls	r3, r0, #31
    4c98:	d40e      	bmi.n	4cb8 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4c9a:	4b09      	ldr	r3, [pc, #36]	; (4cc0 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4c9c:	4a07      	ldr	r2, [pc, #28]	; (4cbc <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4c9e:	6819      	ldr	r1, [r3, #0]
    4ca0:	f041 0002 	orr.w	r0, r1, #2
    4ca4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    4ca6:	6819      	ldr	r1, [r3, #0]
    4ca8:	f041 0001 	orr.w	r0, r1, #1
    4cac:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4cae:	6813      	ldr	r3, [r2, #0]
    4cb0:	f003 0103 	and.w	r1, r3, #3
    4cb4:	2903      	cmp	r1, #3
    4cb6:	d1fa      	bne.n	4cae <am_hal_pwrctrl_bucks_enable+0x22>
    4cb8:	4770      	bx	lr
    4cba:	bf00      	nop
    4cbc:	40021004 	.word	0x40021004
    4cc0:	40021000 	.word	0x40021000

00004cc4 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    4cc4:	4b12      	ldr	r3, [pc, #72]	; (4d10 <am_hal_pwrctrl_bucks_disable+0x4c>)
    4cc6:	681a      	ldr	r2, [r3, #0]
    4cc8:	0792      	lsls	r2, r2, #30
    4cca:	d402      	bmi.n	4cd2 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    4ccc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    4cce:	07c3      	lsls	r3, r0, #31
    4cd0:	d51c      	bpl.n	4d0c <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4cd2:	4910      	ldr	r1, [pc, #64]	; (4d14 <am_hal_pwrctrl_bucks_disable+0x50>)
    4cd4:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    4cd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    4cda:	2a20      	cmp	r2, #32
    4cdc:	d00b      	beq.n	4cf6 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    4cde:	4b0e      	ldr	r3, [pc, #56]	; (4d18 <am_hal_pwrctrl_bucks_disable+0x54>)
    4ce0:	681a      	ldr	r2, [r3, #0]
    4ce2:	f022 0002 	bic.w	r0, r2, #2
    4ce6:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    4ce8:	6819      	ldr	r1, [r3, #0]
    4cea:	f021 0201 	bic.w	r2, r1, #1
    4cee:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    4cf0:	200a      	movs	r0, #10
    4cf2:	f7fd b9d5 	b.w	20a0 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    4cf6:	4809      	ldr	r0, [pc, #36]	; (4d1c <am_hal_pwrctrl_bucks_disable+0x58>)
    4cf8:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    4cfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4cfe:	d1ee      	bne.n	4cde <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    4d00:	4805      	ldr	r0, [pc, #20]	; (4d18 <am_hal_pwrctrl_bucks_disable+0x54>)
    4d02:	6803      	ldr	r3, [r0, #0]
    4d04:	f003 0105 	and.w	r1, r3, #5
    4d08:	6001      	str	r1, [r0, #0]
    4d0a:	e7f1      	b.n	4cf0 <am_hal_pwrctrl_bucks_disable+0x2c>
    4d0c:	4770      	bx	lr
    4d0e:	bf00      	nop
    4d10:	40021004 	.word	0x40021004
    4d14:	4002000c 	.word	0x4002000c
    4d18:	40021000 	.word	0x40021000
    4d1c:	40021008 	.word	0x40021008

00004d20 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    4d20:	4905      	ldr	r1, [pc, #20]	; (4d38 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    4d22:	4a06      	ldr	r2, [pc, #24]	; (4d3c <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    4d24:	680b      	ldr	r3, [r1, #0]
    4d26:	f043 0006 	orr.w	r0, r3, #6
    4d2a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    4d2c:	6811      	ldr	r1, [r2, #0]
    4d2e:	f021 0304 	bic.w	r3, r1, #4
    4d32:	6013      	str	r3, [r2, #0]
    4d34:	4770      	bx	lr
    4d36:	bf00      	nop
    4d38:	40021018 	.word	0x40021018
    4d3c:	40021000 	.word	0x40021000

00004d40 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    4d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d42:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    4d44:	6907      	ldr	r7, [r0, #16]
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    4d46:	460e      	mov	r6, r1
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    4d48:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    4d4c:	f7fd fb2c 	bl	23a8 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    4d50:	68a5      	ldr	r5, [r4, #8]
    4d52:	68e3      	ldr	r3, [r4, #12]
    4d54:	1b59      	subs	r1, r3, r5
    4d56:	428f      	cmp	r7, r1
    4d58:	d87a      	bhi.n	4e50 <am_hal_queue_item_add+0x110>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4d5a:	2f00      	cmp	r7, #0
    4d5c:	d071      	beq.n	4e42 <am_hal_queue_item_add+0x102>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4d5e:	4635      	mov	r5, r6
    4d60:	6823      	ldr	r3, [r4, #0]
    4d62:	6962      	ldr	r2, [r4, #20]
    4d64:	f815 1b01 	ldrb.w	r1, [r5], #1
    4d68:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4d6a:	6822      	ldr	r2, [r4, #0]
    4d6c:	68e3      	ldr	r3, [r4, #12]
    4d6e:	3201      	adds	r2, #1
    4d70:	19f1      	adds	r1, r6, r7
    4d72:	fbb2 fcf3 	udiv	ip, r2, r3
    4d76:	1e7e      	subs	r6, r7, #1
    4d78:	fb03 231c 	mls	r3, r3, ip, r2
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4d7c:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4d7e:	6023      	str	r3, [r4, #0]
    4d80:	f006 0203 	and.w	r2, r6, #3
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4d84:	d05c      	beq.n	4e40 <am_hal_queue_item_add+0x100>
    4d86:	b34a      	cbz	r2, 4ddc <am_hal_queue_item_add+0x9c>
    4d88:	2a01      	cmp	r2, #1
    4d8a:	d019      	beq.n	4dc0 <am_hal_queue_item_add+0x80>
    4d8c:	2a02      	cmp	r2, #2
    4d8e:	d00b      	beq.n	4da8 <am_hal_queue_item_add+0x68>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4d90:	6962      	ldr	r2, [r4, #20]
    4d92:	f815 6b01 	ldrb.w	r6, [r5], #1
    4d96:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4d98:	6822      	ldr	r2, [r4, #0]
    4d9a:	68e3      	ldr	r3, [r4, #12]
    4d9c:	3201      	adds	r2, #1
    4d9e:	fbb2 fef3 	udiv	lr, r2, r3
    4da2:	fb03 231e 	mls	r3, r3, lr, r2
    4da6:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4da8:	6962      	ldr	r2, [r4, #20]
    4daa:	f815 6b01 	ldrb.w	r6, [r5], #1
    4dae:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4db0:	6822      	ldr	r2, [r4, #0]
    4db2:	68e3      	ldr	r3, [r4, #12]
    4db4:	3201      	adds	r2, #1
    4db6:	fbb2 fcf3 	udiv	ip, r2, r3
    4dba:	fb03 231c 	mls	r3, r3, ip, r2
    4dbe:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4dc0:	6962      	ldr	r2, [r4, #20]
    4dc2:	f815 6b01 	ldrb.w	r6, [r5], #1
    4dc6:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4dc8:	6822      	ldr	r2, [r4, #0]
    4dca:	68e3      	ldr	r3, [r4, #12]
    4dcc:	3201      	adds	r2, #1
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4dce:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4dd0:	fbb2 fef3 	udiv	lr, r2, r3
    4dd4:	fb03 231e 	mls	r3, r3, lr, r2
    4dd8:	6023      	str	r3, [r4, #0]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4dda:	d031      	beq.n	4e40 <am_hal_queue_item_add+0x100>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4ddc:	46ac      	mov	ip, r5
    4dde:	6962      	ldr	r2, [r4, #20]
    4de0:	f81c 6b01 	ldrb.w	r6, [ip], #1
    4de4:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4de6:	6823      	ldr	r3, [r4, #0]
    4de8:	68e2      	ldr	r2, [r4, #12]
    4dea:	3301      	adds	r3, #1
    4dec:	fbb3 fef2 	udiv	lr, r3, r2
    4df0:	fb02 331e 	mls	r3, r2, lr, r3
    4df4:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4df6:	6962      	ldr	r2, [r4, #20]
    4df8:	786e      	ldrb	r6, [r5, #1]
    4dfa:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4dfc:	6823      	ldr	r3, [r4, #0]
    4dfe:	68e6      	ldr	r6, [r4, #12]
    4e00:	3301      	adds	r3, #1
    4e02:	fbb3 fef6 	udiv	lr, r3, r6
    4e06:	fb06 331e 	mls	r3, r6, lr, r3
    4e0a:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4e0c:	6966      	ldr	r6, [r4, #20]
    4e0e:	f89c 2001 	ldrb.w	r2, [ip, #1]
    4e12:	54f2      	strb	r2, [r6, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4e14:	6823      	ldr	r3, [r4, #0]
    4e16:	68e2      	ldr	r2, [r4, #12]
    4e18:	3301      	adds	r3, #1
    4e1a:	fbb3 fcf2 	udiv	ip, r3, r2
    4e1e:	fb02 331c 	mls	r3, r2, ip, r3
    4e22:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4e24:	6962      	ldr	r2, [r4, #20]
    4e26:	78ee      	ldrb	r6, [r5, #3]
    4e28:	54d6      	strb	r6, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4e2a:	6826      	ldr	r6, [r4, #0]
    4e2c:	68e3      	ldr	r3, [r4, #12]
    4e2e:	3601      	adds	r6, #1
    4e30:	3504      	adds	r5, #4
    4e32:	fbb6 fef3 	udiv	lr, r6, r3
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4e36:	42a9      	cmp	r1, r5
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4e38:	fb03 631e 	mls	r3, r3, lr, r6
    4e3c:	6023      	str	r3, [r4, #0]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    4e3e:	d1cd      	bne.n	4ddc <am_hal_queue_item_add+0x9c>
    4e40:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    4e42:	443d      	add	r5, r7
    4e44:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    4e46:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    4e48:	f7fd fab2 	bl	23b0 <am_hal_interrupt_master_set>

    return bSuccess;
}
    4e4c:	4620      	mov	r0, r4
    4e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        //
        // The buffer can't fit the amount of data requested. Return a
        // failure.
        //
        bSuccess = false;
    4e50:	2400      	movs	r4, #0
    }

    am_hal_interrupt_master_set(ui32Primask);
    4e52:	f7fd faad 	bl	23b0 <am_hal_interrupt_master_set>

    return bSuccess;
}
    4e56:	4620      	mov	r0, r4
    4e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e5a:	bf00      	nop

00004e5c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4e5c:	4a05      	ldr	r2, [pc, #20]	; (4e74 <am_hal_rtc_osc_select+0x18>)
    4e5e:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    4e60:	b918      	cbnz	r0, 4e6a <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    4e62:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    4e66:	6010      	str	r0, [r2, #0]
    4e68:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4e6a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    4e6e:	6011      	str	r1, [r2, #0]
    4e70:	4770      	bx	lr
    4e72:	bf00      	nop
    4e74:	4000400c 	.word	0x4000400c

00004e78 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    4e78:	4a02      	ldr	r2, [pc, #8]	; (4e84 <am_hal_rtc_osc_disable+0xc>)
    4e7a:	6813      	ldr	r3, [r2, #0]
    4e7c:	f043 0010 	orr.w	r0, r3, #16
    4e80:	6010      	str	r0, [r2, #0]
    4e82:	4770      	bx	lr
    4e84:	40004050 	.word	0x40004050

00004e88 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    4e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8a:	b083      	sub	sp, #12
    4e8c:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4e8e:	f7fd fa8b 	bl	23a8 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4e92:	4a41      	ldr	r2, [pc, #260]	; (4f98 <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4e94:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    4e96:	b11d      	cbz	r5, 4ea0 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    4e98:	4b40      	ldr	r3, [pc, #256]	; (4f9c <am_hal_sysctrl_sleep+0x114>)
    4e9a:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    4e9c:	07c3      	lsls	r3, r0, #31
    4e9e:	d509      	bpl.n	4eb4 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    4ea0:	6811      	ldr	r1, [r2, #0]
    4ea2:	f021 0604 	bic.w	r6, r1, #4
    4ea6:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    4ea8:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4eaa:	4620      	mov	r0, r4
    4eac:	f7fd fa80 	bl	23b0 <am_hal_interrupt_master_set>
}
    4eb0:	b003      	add	sp, #12
    4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4eb4:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4eb6:	493a      	ldr	r1, [pc, #232]	; (4fa0 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4eb8:	4f3a      	ldr	r7, [pc, #232]	; (4fa4 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    4eba:	4d3b      	ldr	r5, [pc, #236]	; (4fa8 <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    4ebc:	483b      	ldr	r0, [pc, #236]	; (4fac <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4ebe:	f043 0604 	orr.w	r6, r3, #4
    4ec2:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4ec4:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4ec6:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    4ec8:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    4eca:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4ecc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    4ed0:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    4ed2:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4ed6:	bf14      	ite	ne
    4ed8:	2500      	movne	r5, #0
    4eda:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    4edc:	2e03      	cmp	r6, #3
    4ede:	bf8c      	ite	hi
    4ee0:	2100      	movhi	r1, #0
    4ee2:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    4ee4:	f012 0303 	ands.w	r3, r2, #3
    4ee8:	bf18      	it	ne
    4eea:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    4eec:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    4ef0:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    4ef2:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    4ef4:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    4ef8:	b91e      	cbnz	r6, 4f02 <am_hal_sysctrl_sleep+0x7a>
    4efa:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    4efe:	2d0f      	cmp	r5, #15
    4f00:	d00a      	beq.n	4f18 <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    4f02:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    4f04:	2d0f      	cmp	r5, #15
    4f06:	d01a      	beq.n	4f3e <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    4f08:	4f29      	ldr	r7, [pc, #164]	; (4fb0 <am_hal_sysctrl_sleep+0x128>)
    4f0a:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4f0c:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    4f0e:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4f10:	f7fd fa4e 	bl	23b0 <am_hal_interrupt_master_set>
}
    4f14:	b003      	add	sp, #12
    4f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4f18:	683a      	ldr	r2, [r7, #0]
    4f1a:	1e50      	subs	r0, r2, #1
    4f1c:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4f1e:	9800      	ldr	r0, [sp, #0]
    4f20:	f04f 31ff 	mov.w	r1, #4294967295
    4f24:	f000 f8c0 	bl	50a8 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    4f28:	9800      	ldr	r0, [sp, #0]
    4f2a:	4633      	mov	r3, r6
    4f2c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4f30:	f04f 31ff 	mov.w	r1, #4294967295
    4f34:	f000 f8cc 	bl	50d0 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    4f38:	f7ff fec4 	bl	4cc4 <am_hal_pwrctrl_bucks_disable>
    4f3c:	e7e1      	b.n	4f02 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    4f3e:	f3ef 8310 	mrs	r3, PRIMASK
    4f42:	9301      	str	r3, [sp, #4]
    4f44:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4f46:	4e1b      	ldr	r6, [pc, #108]	; (4fb4 <am_hal_sysctrl_sleep+0x12c>)
    4f48:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    4f4a:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    4f4c:	6835      	ldr	r5, [r6, #0]
    4f4e:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    4f52:	f04c 021c 	orr.w	r2, ip, #28
    4f56:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4f58:	6830      	ldr	r0, [r6, #0]
    4f5a:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    4f5e:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    4f62:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    4f64:	9e01      	ldr	r6, [sp, #4]
    4f66:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    4f6a:	201c      	movs	r0, #28
    4f6c:	f7fd f898 	bl	20a0 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    4f70:	f7ff fe8c 	bl	4c8c <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4f74:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    4f76:	4910      	ldr	r1, [pc, #64]	; (4fb8 <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    4f78:	4d0d      	ldr	r5, [pc, #52]	; (4fb0 <am_hal_sysctrl_sleep+0x128>)
    4f7a:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4f7c:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    4f7e:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4f80:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    4f82:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    4f84:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    4f86:	f7fd f88b 	bl	20a0 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4f8a:	9800      	ldr	r0, [sp, #0]
    4f8c:	f04f 31ff 	mov.w	r1, #4294967295
    4f90:	f000 f870 	bl	5074 <am_hal_ctimer_start>
    4f94:	e789      	b.n	4eaa <am_hal_sysctrl_sleep+0x22>
    4f96:	bf00      	nop
    4f98:	e000ed10 	.word	0xe000ed10
    4f9c:	40020250 	.word	0x40020250
    4fa0:	4002000c 	.word	0x4002000c
    4fa4:	10001194 	.word	0x10001194
    4fa8:	40021000 	.word	0x40021000
    4fac:	40021008 	.word	0x40021008
    4fb0:	1000118f 	.word	0x1000118f
    4fb4:	40020068 	.word	0x40020068
    4fb8:	10001190 	.word	0x10001190

00004fbc <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    4fbc:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    4fbe:	4a22      	ldr	r2, [pc, #136]	; (5048 <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    4fc0:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    4fc2:	2100      	movs	r1, #0
    4fc4:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    4fc6:	b333      	cbz	r3, 5016 <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    4fc8:	4d20      	ldr	r5, [pc, #128]	; (504c <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    4fca:	4921      	ldr	r1, [pc, #132]	; (5050 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    4fcc:	4a21      	ldr	r2, [pc, #132]	; (5054 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    4fce:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    4fd0:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    4fd4:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    4fd6:	458c      	cmp	ip, r1
    4fd8:	bf94      	ite	ls
    4fda:	461d      	movls	r5, r3
    4fdc:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    4fde:	f7fd f843 	bl	2068 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    4fe2:	1c43      	adds	r3, r0, #1
    4fe4:	d02e      	beq.n	5044 <am_hal_tpiu_enable+0x88>
    4fe6:	08c3      	lsrs	r3, r0, #3
    4fe8:	fbb3 fef5 	udiv	lr, r3, r5
    4fec:	f10e 31ff 	add.w	r1, lr, #4294967295
    4ff0:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    4ff2:	4a19      	ldr	r2, [pc, #100]	; (5058 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    4ff4:	4c19      	ldr	r4, [pc, #100]	; (505c <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    4ff6:	4b1a      	ldr	r3, [pc, #104]	; (5060 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4ff8:	491a      	ldr	r1, [pc, #104]	; (5064 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    4ffa:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    4ffc:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4ffe:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    5000:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    5004:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    5006:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    5008:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    500a:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    5012:	f7fd b845 	b.w	20a0 <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    5016:	4c10      	ldr	r4, [pc, #64]	; (5058 <am_hal_tpiu_enable+0x9c>)
    5018:	6905      	ldr	r5, [r0, #16]
    501a:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    501c:	6882      	ldr	r2, [r0, #8]
    501e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    5022:	68c3      	ldr	r3, [r0, #12]
    5024:	4c09      	ldr	r4, [pc, #36]	; (504c <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    5026:	490e      	ldr	r1, [pc, #56]	; (5060 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    5028:	1e5d      	subs	r5, r3, #1
    502a:	2201      	movs	r2, #1
    502c:	40aa      	lsls	r2, r5
    502e:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    5030:	680b      	ldr	r3, [r1, #0]
    5032:	6840      	ldr	r0, [r0, #4]
    5034:	4318      	orrs	r0, r3
    5036:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    5038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    503c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    5040:	f7fd b82e 	b.w	20a0 <am_hal_flash_delay>
    5044:	2005      	movs	r0, #5
    5046:	e7d4      	b.n	4ff2 <am_hal_tpiu_enable+0x36>
    5048:	e0040304 	.word	0xe0040304
    504c:	e0040004 	.word	0xe0040004
    5050:	001da380 	.word	0x001da380
    5054:	000f4240 	.word	0x000f4240
    5058:	e0040010 	.word	0xe0040010
    505c:	e00400f0 	.word	0xe00400f0
    5060:	40020250 	.word	0x40020250
    5064:	e0040f00 	.word	0xe0040f00

00005068 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    5068:	4b01      	ldr	r3, [pc, #4]	; (5070 <am_hal_vcomp_disable+0x8>)
    506a:	2237      	movs	r2, #55	; 0x37
    506c:	601a      	str	r2, [r3, #0]
    506e:	4770      	bx	lr
    5070:	4000c008 	.word	0x4000c008

00005074 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    5074:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    5076:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    507a:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    507c:	0100      	lsls	r0, r0, #4
    507e:	4a09      	ldr	r2, [pc, #36]	; (50a4 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    5080:	9301      	str	r3, [sp, #4]
    5082:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    5084:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    5086:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    508a:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    508e:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    5092:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    5094:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    5096:	9801      	ldr	r0, [sp, #4]
    5098:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    509c:	b003      	add	sp, #12
    509e:	f85d 4b04 	ldr.w	r4, [sp], #4
    50a2:	4770      	bx	lr
    50a4:	4000800c 	.word	0x4000800c

000050a8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    50a8:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    50aa:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    50ae:	0100      	lsls	r0, r0, #4
    50b0:	4a06      	ldr	r2, [pc, #24]	; (50cc <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    50b2:	9301      	str	r3, [sp, #4]
    50b4:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    50b6:	5883      	ldr	r3, [r0, r2]
    50b8:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    50bc:	4319      	orrs	r1, r3
    50be:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    50c0:	9801      	ldr	r0, [sp, #4]
    50c2:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    50c6:	b002      	add	sp, #8
    50c8:	4770      	bx	lr
    50ca:	bf00      	nop
    50cc:	4000800c 	.word	0x4000800c

000050d0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    50d0:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    50d2:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    50d6:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    50d8:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    50da:	4d1c      	ldr	r5, [pc, #112]	; (514c <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    50dc:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    50de:	4e1c      	ldr	r6, [pc, #112]	; (5150 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    50e0:	4f1c      	ldr	r7, [pc, #112]	; (5154 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    50e2:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    50e4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    50e8:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    50ea:	d01a      	beq.n	5122 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    50ec:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    50f0:	2d80      	cmp	r5, #128	; 0x80
    50f2:	d01b      	beq.n	512c <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    50f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    50f8:	2500      	movs	r5, #0
    50fa:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    50fc:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    50fe:	d01c      	beq.n	513a <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    5100:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    5104:	d01e      	beq.n	5144 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    5106:	0c21      	lsrs	r1, r4, #16
    5108:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    510a:	b291      	uxth	r1, r2
    510c:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    510e:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    5112:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    5114:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    5116:	9801      	ldr	r0, [sp, #4]
    5118:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    511c:	b002      	add	sp, #8
    511e:	bcf0      	pop	{r4, r5, r6, r7}
    5120:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    5122:	0c25      	lsrs	r5, r4, #16
    5124:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    5128:	2c80      	cmp	r4, #128	; 0x80
    512a:	d10a      	bne.n	5142 <am_hal_ctimer_period_set+0x72>
    512c:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    512e:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    5130:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    5132:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5136:	4299      	cmp	r1, r3
    5138:	d1e2      	bne.n	5100 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    513a:	b297      	uxth	r7, r2
    513c:	433d      	orrs	r5, r7
    513e:	5185      	str	r5, [r0, r6]
    5140:	e7e9      	b.n	5116 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    5142:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    5144:	b296      	uxth	r6, r2
    5146:	4335      	orrs	r5, r6
    5148:	51c5      	str	r5, [r0, r7]
    514a:	e7e4      	b.n	5116 <am_hal_ctimer_period_set+0x46>
    514c:	4000800c 	.word	0x4000800c
    5150:	40008004 	.word	0x40008004
    5154:	40008008 	.word	0x40008008

00005158 <am_hal_i2c_bit_bang_receive>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    5158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    515c:	4c9c      	ldr	r4, [pc, #624]	; (53d0 <am_hal_i2c_bit_bang_receive+0x278>)
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    515e:	b085      	sub	sp, #20
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5160:	68e6      	ldr	r6, [r4, #12]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    5162:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5166:	69a7      	ldr	r7, [r4, #24]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    5168:	9503      	str	r5, [sp, #12]
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    516a:	6965      	ldr	r5, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    516c:	6037      	str	r7, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    516e:	682d      	ldr	r5, [r5, #0]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    5170:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
    5174:	9101      	str	r1, [sp, #4]
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5176:	422f      	tst	r7, r5
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    5178:	4680      	mov	r8, r0
    517a:	4691      	mov	r9, r2
    517c:	9302      	str	r3, [sp, #8]
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    517e:	bf08      	it	eq
    5180:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5184:	d14c      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5186:	2004      	movs	r0, #4
    5188:	f7fc ff8a 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    518c:	6962      	ldr	r2, [r4, #20]
    518e:	69a3      	ldr	r3, [r4, #24]
    5190:	6811      	ldr	r1, [r2, #0]
    5192:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5194:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5198:	d142      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    519a:	f7fc ff81 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    519e:	6966      	ldr	r6, [r4, #20]
    51a0:	69a7      	ldr	r7, [r4, #24]
    51a2:	6832      	ldr	r2, [r6, #0]
    51a4:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51a6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51aa:	d139      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51ac:	f7fc ff78 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51b0:	6961      	ldr	r1, [r4, #20]
    51b2:	69a3      	ldr	r3, [r4, #24]
    51b4:	680e      	ldr	r6, [r1, #0]
    51b6:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51b8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51bc:	d130      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51be:	f7fc ff6f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51c2:	6967      	ldr	r7, [r4, #20]
    51c4:	69a1      	ldr	r1, [r4, #24]
    51c6:	683a      	ldr	r2, [r7, #0]
    51c8:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51ca:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51ce:	d127      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51d0:	f7fc ff66 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51d4:	6966      	ldr	r6, [r4, #20]
    51d6:	69a3      	ldr	r3, [r4, #24]
    51d8:	6837      	ldr	r7, [r6, #0]
    51da:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51dc:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51e0:	d11e      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51e2:	f7fc ff5d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51e6:	6961      	ldr	r1, [r4, #20]
    51e8:	69a6      	ldr	r6, [r4, #24]
    51ea:	680a      	ldr	r2, [r1, #0]
    51ec:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51ee:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51f2:	d115      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51f4:	f7fc ff54 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    51f8:	6967      	ldr	r7, [r4, #20]
    51fa:	69a3      	ldr	r3, [r4, #24]
    51fc:	6839      	ldr	r1, [r7, #0]
    51fe:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5200:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5204:	d10c      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5206:	f7fc ff4b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    520a:	6960      	ldr	r0, [r4, #20]
    520c:	69a6      	ldr	r6, [r4, #24]
    520e:	6802      	ldr	r2, [r0, #0]
    5210:	4232      	tst	r2, r6
    5212:	d105      	bne.n	5220 <am_hal_i2c_bit_bang_receive+0xc8>
    {
        if (--maxLoop == 0)
    5214:	3d08      	subs	r5, #8
    5216:	d1b6      	bne.n	5186 <am_hal_i2c_bit_bang_receive+0x2e>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    5218:	2003      	movs	r0, #3

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
}
    521a:	b005      	add	sp, #20
    521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Pull down on data line with clock high --> START CONDITION
    //
    WRITE_SDA_LO();
    5220:	6a27      	ldr	r7, [r4, #32]
    5222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5224:	603b      	str	r3, [r7, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5226:	2005      	movs	r0, #5
    5228:	f7fc ff3a 	bl	20a0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    522c:	4f68      	ldr	r7, [pc, #416]	; (53d0 <am_hal_i2c_bit_bang_receive+0x278>)
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    522e:	2600      	movs	r6, #0
        WRITE_SCL_LO();

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5230:	f04f 0a80 	mov.w	sl, #128	; 0x80
    5234:	fa4a f306 	asr.w	r3, sl, r6
    5238:	ea13 0f08 	tst.w	r3, r8
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    523c:	6921      	ldr	r1, [r4, #16]
        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
        {
            PULL_SDA_HI();
    523e:	bf14      	ite	ne
    5240:	69fb      	ldrne	r3, [r7, #28]
        }
        else
        {
            WRITE_SDA_LO();
    5242:	6a3b      	ldreq	r3, [r7, #32]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5244:	69a0      	ldr	r0, [r4, #24]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5246:	6aba      	ldr	r2, [r7, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5248:	6008      	str	r0, [r1, #0]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    524a:	601a      	str	r2, [r3, #0]
        }

        //
        // Delay for 1/2 bit cell time to start the clock
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    524c:	2007      	movs	r0, #7
    524e:	f7fc ff27 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5252:	68e1      	ldr	r1, [r4, #12]
    5254:	69a0      	ldr	r0, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5256:	6963      	ldr	r3, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5258:	6008      	str	r0, [r1, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    525a:	681a      	ldr	r2, [r3, #0]
    525c:	4210      	tst	r0, r2
    525e:	bf08      	it	eq
    5260:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5264:	d149      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5266:	2004      	movs	r0, #4
    5268:	f7fc ff1a 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    526c:	6961      	ldr	r1, [r4, #20]
    526e:	69a3      	ldr	r3, [r4, #24]
    5270:	680a      	ldr	r2, [r1, #0]
    5272:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5274:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5278:	d13f      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    527a:	f7fc ff11 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    527e:	6961      	ldr	r1, [r4, #20]
    5280:	69a3      	ldr	r3, [r4, #24]
    5282:	680a      	ldr	r2, [r1, #0]
    5284:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5286:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    528a:	d136      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    528c:	f7fc ff08 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5290:	6961      	ldr	r1, [r4, #20]
    5292:	69a3      	ldr	r3, [r4, #24]
    5294:	680a      	ldr	r2, [r1, #0]
    5296:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5298:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    529c:	d12d      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    529e:	f7fc feff 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52a2:	6961      	ldr	r1, [r4, #20]
    52a4:	69a3      	ldr	r3, [r4, #24]
    52a6:	680a      	ldr	r2, [r1, #0]
    52a8:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52aa:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52ae:	d124      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52b0:	f7fc fef6 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52b4:	6961      	ldr	r1, [r4, #20]
    52b6:	69a3      	ldr	r3, [r4, #24]
    52b8:	680a      	ldr	r2, [r1, #0]
    52ba:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52bc:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52c0:	d11b      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52c2:	f7fc feed 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52c6:	6961      	ldr	r1, [r4, #20]
    52c8:	69a3      	ldr	r3, [r4, #24]
    52ca:	680a      	ldr	r2, [r1, #0]
    52cc:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52ce:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52d2:	d112      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52d4:	f7fc fee4 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52d8:	6961      	ldr	r1, [r4, #20]
    52da:	69a3      	ldr	r3, [r4, #24]
    52dc:	680a      	ldr	r2, [r1, #0]
    52de:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52e0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52e4:	d109      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    52e6:	f7fc fedb 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    52ea:	6960      	ldr	r0, [r4, #20]
    52ec:	69a1      	ldr	r1, [r4, #24]
    52ee:	6803      	ldr	r3, [r0, #0]
    52f0:	420b      	tst	r3, r1
    52f2:	d102      	bne.n	52fa <am_hal_i2c_bit_bang_receive+0x1a2>
    {
        if (--maxLoop == 0)
    52f4:	3d08      	subs	r5, #8
    52f6:	d1b6      	bne.n	5266 <am_hal_i2c_bit_bang_receive+0x10e>
    52f8:	e78e      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    52fa:	3601      	adds	r6, #1
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    52fc:	2005      	movs	r0, #5
    52fe:	f7fc fecf 	bl	20a0 <am_hal_flash_delay>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5302:	2e08      	cmp	r6, #8
    5304:	d196      	bne.n	5234 <am_hal_i2c_bit_bang_receive+0xdc>
    }

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5306:	6927      	ldr	r7, [r4, #16]
    5308:	69a2      	ldr	r2, [r4, #24]
    530a:	603a      	str	r2, [r7, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    530c:	2007      	movs	r0, #7
    530e:	f7fc fec7 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5312:	68e0      	ldr	r0, [r4, #12]
    5314:	69a1      	ldr	r1, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5316:	6963      	ldr	r3, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5318:	6001      	str	r1, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    531a:	681f      	ldr	r7, [r3, #0]
    531c:	4239      	tst	r1, r7
    531e:	bf08      	it	eq
    5320:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5324:	d149      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5326:	2004      	movs	r0, #4
    5328:	f7fc feba 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    532c:	6962      	ldr	r2, [r4, #20]
    532e:	69a1      	ldr	r1, [r4, #24]
    5330:	6813      	ldr	r3, [r2, #0]
    5332:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5334:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5338:	d13f      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    533a:	f7fc feb1 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    533e:	6967      	ldr	r7, [r4, #20]
    5340:	69a1      	ldr	r1, [r4, #24]
    5342:	683a      	ldr	r2, [r7, #0]
    5344:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5346:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    534a:	d136      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    534c:	f7fc fea8 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5350:	6967      	ldr	r7, [r4, #20]
    5352:	69a3      	ldr	r3, [r4, #24]
    5354:	6839      	ldr	r1, [r7, #0]
    5356:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5358:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    535c:	d12d      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    535e:	f7fc fe9f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5362:	6962      	ldr	r2, [r4, #20]
    5364:	69a7      	ldr	r7, [r4, #24]
    5366:	6813      	ldr	r3, [r2, #0]
    5368:	423b      	tst	r3, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    536a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    536e:	d124      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5370:	f7fc fe96 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5374:	6961      	ldr	r1, [r4, #20]
    5376:	69a7      	ldr	r7, [r4, #24]
    5378:	680a      	ldr	r2, [r1, #0]
    537a:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    537c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5380:	d11b      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5382:	f7fc fe8d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5386:	6961      	ldr	r1, [r4, #20]
    5388:	69a3      	ldr	r3, [r4, #24]
    538a:	680f      	ldr	r7, [r1, #0]
    538c:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    538e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5392:	d112      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5394:	f7fc fe84 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5398:	6962      	ldr	r2, [r4, #20]
    539a:	69a1      	ldr	r1, [r4, #24]
    539c:	6813      	ldr	r3, [r2, #0]
    539e:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    53a0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    53a4:	d109      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    53a6:	f7fc fe7b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    53aa:	6960      	ldr	r0, [r4, #20]
    53ac:	69a7      	ldr	r7, [r4, #24]
    53ae:	6802      	ldr	r2, [r0, #0]
    53b0:	423a      	tst	r2, r7
    53b2:	d102      	bne.n	53ba <am_hal_i2c_bit_bang_receive+0x262>
    {
        if (--maxLoop == 0)
    53b4:	3d08      	subs	r5, #8
    53b6:	d1b6      	bne.n	5326 <am_hal_i2c_bit_bang_receive+0x1ce>
    53b8:	e72e      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    53ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
    53bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    53be:	682d      	ldr	r5, [r5, #0]
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    53c0:	2005      	movs	r0, #5
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    53c2:	400d      	ands	r5, r1
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    53c4:	f7fc fe6c 	bl	20a0 <am_hal_flash_delay>
    if ( data_naked )
    53c8:	b125      	cbz	r5, 53d4 <am_hal_i2c_bit_bang_receive+0x27c>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    53ca:	2001      	movs	r0, #1
    53cc:	e725      	b.n	521a <am_hal_i2c_bit_bang_receive+0xc2>
    53ce:	bf00      	nop
    53d0:	10001198 	.word	0x10001198
        }
        return status;
    }

    if ( bUseOffset )
    53d4:	9b03      	ldr	r3, [sp, #12]
    53d6:	2b00      	cmp	r3, #0
    53d8:	f040 81b5 	bne.w	5746 <am_hal_i2c_bit_bang_receive+0x5ee>
    }

    //
    // receive the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    53dc:	9f01      	ldr	r7, [sp, #4]
    53de:	f1b7 0a01 	subs.w	sl, r7, #1
    53e2:	f000 80d8 	beq.w	5596 <am_hal_i2c_bit_bang_receive+0x43e>
    53e6:	46c8      	mov	r8, r9
    53e8:	44ca      	add	sl, r9
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    53ea:	2700      	movs	r7, #0
    53ec:	463e      	mov	r6, r7
        if ( GET_SDA() )
        {
            //
            // set the bit in the data byte to be returned
            //
            data_byte |=  (0x80 >> i);
    53ee:	f04f 0980 	mov.w	r9, #128	; 0x80
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    53f2:	6921      	ldr	r1, [r4, #16]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    53f4:	69e3      	ldr	r3, [r4, #28]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    53f6:	69a0      	ldr	r0, [r4, #24]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    53f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    53fa:	6008      	str	r0, [r1, #0]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    53fc:	601a      	str	r2, [r3, #0]

        //
        // Delay for 1/2 bit cell time to start the clock and let peer write on SDA
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    53fe:	2007      	movs	r0, #7
    5400:	f7fc fe4e 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5404:	68e1      	ldr	r1, [r4, #12]
    5406:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5408:	6960      	ldr	r0, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    540a:	600b      	str	r3, [r1, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    540c:	6802      	ldr	r2, [r0, #0]
    540e:	4213      	tst	r3, r2
    5410:	bf08      	it	eq
    5412:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5416:	d149      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5418:	2004      	movs	r0, #4
    541a:	f7fc fe41 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    541e:	6961      	ldr	r1, [r4, #20]
    5420:	69a3      	ldr	r3, [r4, #24]
    5422:	680a      	ldr	r2, [r1, #0]
    5424:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5426:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    542a:	d13f      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    542c:	f7fc fe38 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5430:	6961      	ldr	r1, [r4, #20]
    5432:	69a3      	ldr	r3, [r4, #24]
    5434:	680a      	ldr	r2, [r1, #0]
    5436:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5438:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    543c:	d136      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    543e:	f7fc fe2f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5442:	6961      	ldr	r1, [r4, #20]
    5444:	69a3      	ldr	r3, [r4, #24]
    5446:	680a      	ldr	r2, [r1, #0]
    5448:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    544a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    544e:	d12d      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5450:	f7fc fe26 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5454:	6961      	ldr	r1, [r4, #20]
    5456:	69a3      	ldr	r3, [r4, #24]
    5458:	680a      	ldr	r2, [r1, #0]
    545a:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    545c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5460:	d124      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5462:	f7fc fe1d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5466:	6961      	ldr	r1, [r4, #20]
    5468:	69a3      	ldr	r3, [r4, #24]
    546a:	680a      	ldr	r2, [r1, #0]
    546c:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    546e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5472:	d11b      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5474:	f7fc fe14 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5478:	6961      	ldr	r1, [r4, #20]
    547a:	69a3      	ldr	r3, [r4, #24]
    547c:	680a      	ldr	r2, [r1, #0]
    547e:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5480:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5484:	d112      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5486:	f7fc fe0b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    548a:	6961      	ldr	r1, [r4, #20]
    548c:	69a3      	ldr	r3, [r4, #24]
    548e:	680a      	ldr	r2, [r1, #0]
    5490:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5492:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5496:	d109      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5498:	f7fc fe02 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    549c:	6960      	ldr	r0, [r4, #20]
    549e:	69a1      	ldr	r1, [r4, #24]
    54a0:	6803      	ldr	r3, [r0, #0]
    54a2:	420b      	tst	r3, r1
    54a4:	d102      	bne.n	54ac <am_hal_i2c_bit_bang_receive+0x354>
    {
        if (--maxLoop == 0)
    54a6:	3d08      	subs	r5, #8
    54a8:	d1b6      	bne.n	5418 <am_hal_i2c_bit_bang_receive+0x2c0>
    54aa:	e6b5      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // grab the data bit here
        //
        if ( GET_SDA() )
    54ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    54ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    54b0:	6811      	ldr	r1, [r2, #0]
    54b2:	4201      	tst	r1, r0
    54b4:	d003      	beq.n	54be <am_hal_i2c_bit_bang_receive+0x366>
        {
            //
            // set the bit in the data byte to be returned
            //
            data_byte |=  (0x80 >> i);
    54b6:	fa49 f306 	asr.w	r3, r9, r6
    54ba:	431f      	orrs	r7, r3
    54bc:	b2ff      	uxtb	r7, r7
    uint8_t data_byte = 0;

    //
    // Loop through receiving 8 bits
    //
    for (i = 0; i < 8; i++)
    54be:	3601      	adds	r6, #1
        }

        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    54c0:	2005      	movs	r0, #5
    54c2:	f7fc fded 	bl	20a0 <am_hal_flash_delay>
    uint8_t data_byte = 0;

    //
    // Loop through receiving 8 bits
    //
    for (i = 0; i < 8; i++)
    54c6:	2e08      	cmp	r6, #8
    54c8:	d193      	bne.n	53f2 <am_hal_i2c_bit_bang_receive+0x29a>

    *pRxByte = data_byte;
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    54ca:	6921      	ldr	r1, [r4, #16]
    else
    {
        //
        // Pull down on data line with clock low to indicate ACK
        //
        WRITE_SDA_LO();
    54cc:	6a26      	ldr	r6, [r4, #32]

    *pRxByte = data_byte;
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    54ce:	69a0      	ldr	r0, [r4, #24]
    else
    {
        //
        // Pull down on data line with clock low to indicate ACK
        //
        WRITE_SDA_LO();
    54d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    }

    *pRxByte = data_byte;
    54d2:	f808 7b01 	strb.w	r7, [r8], #1
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    54d6:	6008      	str	r0, [r1, #0]
    else
    {
        //
        // Pull down on data line with clock low to indicate ACK
        //
        WRITE_SDA_LO();
    54d8:	6032      	str	r2, [r6, #0]
    }
    //
    // Delay for 1/2 bit cell time before sending ACK to device
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    54da:	2007      	movs	r0, #7
    54dc:	f7fc fde0 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    54e0:	68e7      	ldr	r7, [r4, #12]
    54e2:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    54e4:	6961      	ldr	r1, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    54e6:	603b      	str	r3, [r7, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    54e8:	680e      	ldr	r6, [r1, #0]
    54ea:	421e      	tst	r6, r3
    54ec:	bf08      	it	eq
    54ee:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    54f2:	d149      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    54f4:	2004      	movs	r0, #4
    54f6:	f7fc fdd3 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    54fa:	6962      	ldr	r2, [r4, #20]
    54fc:	69a7      	ldr	r7, [r4, #24]
    54fe:	6813      	ldr	r3, [r2, #0]
    5500:	423b      	tst	r3, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5502:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5506:	d13f      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5508:	f7fc fdca 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    550c:	6961      	ldr	r1, [r4, #20]
    550e:	69a6      	ldr	r6, [r4, #24]
    5510:	680a      	ldr	r2, [r1, #0]
    5512:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5514:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5518:	d136      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    551a:	f7fc fdc1 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    551e:	6967      	ldr	r7, [r4, #20]
    5520:	69a3      	ldr	r3, [r4, #24]
    5522:	6839      	ldr	r1, [r7, #0]
    5524:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5526:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    552a:	d12d      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    552c:	f7fc fdb8 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5530:	6966      	ldr	r6, [r4, #20]
    5532:	69a7      	ldr	r7, [r4, #24]
    5534:	6832      	ldr	r2, [r6, #0]
    5536:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5538:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    553c:	d124      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    553e:	f7fc fdaf 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5542:	6961      	ldr	r1, [r4, #20]
    5544:	69a3      	ldr	r3, [r4, #24]
    5546:	680e      	ldr	r6, [r1, #0]
    5548:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    554a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    554e:	d11b      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5550:	f7fc fda6 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5554:	6967      	ldr	r7, [r4, #20]
    5556:	69a1      	ldr	r1, [r4, #24]
    5558:	683a      	ldr	r2, [r7, #0]
    555a:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    555c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5560:	d112      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5562:	f7fc fd9d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5566:	6966      	ldr	r6, [r4, #20]
    5568:	69a3      	ldr	r3, [r4, #24]
    556a:	6837      	ldr	r7, [r6, #0]
    556c:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    556e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5572:	d109      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5574:	f7fc fd94 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5578:	6960      	ldr	r0, [r4, #20]
    557a:	69a1      	ldr	r1, [r4, #24]
    557c:	6802      	ldr	r2, [r0, #0]
    557e:	420a      	tst	r2, r1
    5580:	d102      	bne.n	5588 <am_hal_i2c_bit_bang_receive+0x430>
    {
        if (--maxLoop == 0)
    5582:	3d08      	subs	r5, #8
    5584:	d1b6      	bne.n	54f4 <am_hal_i2c_bit_bang_receive+0x39c>
    5586:	e647      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Delay for 1/2 bit cell time while clock is high to le peer sample the ACK/NAK
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5588:	2005      	movs	r0, #5
    558a:	f7fc fd89 	bl	20a0 <am_hal_flash_delay>
    }

    //
    // receive the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    558e:	45d0      	cmp	r8, sl
        status = i2c_receive_byte(pData, false);
        if (status != AM_HAL_I2C_BIT_BANG_SUCCESS)
        {
            return status;
        }
        pData++;
    5590:	46c1      	mov	r9, r8
    }

    //
    // receive the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    5592:	f47f af2a 	bne.w	53ea <am_hal_i2c_bit_bang_receive+0x292>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5596:	2600      	movs	r6, #0
    5598:	4637      	mov	r7, r6
        if ( GET_SDA() )
        {
            //
            // set the bit in the data byte to be returned
            //
            data_byte |=  (0x80 >> i);
    559a:	f04f 0880 	mov.w	r8, #128	; 0x80
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    559e:	6920      	ldr	r0, [r4, #16]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    55a0:	69e3      	ldr	r3, [r4, #28]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    55a2:	69a1      	ldr	r1, [r4, #24]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    55a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    55a6:	6001      	str	r1, [r0, #0]

        //
        // release the data line from from the previous ACK
        //
        PULL_SDA_HI();
    55a8:	601a      	str	r2, [r3, #0]

        //
        // Delay for 1/2 bit cell time to start the clock and let peer write on SDA
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    55aa:	2007      	movs	r0, #7
    55ac:	f7fc fd78 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    55b0:	68e0      	ldr	r0, [r4, #12]
    55b2:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55b4:	6961      	ldr	r1, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    55b6:	6003      	str	r3, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55b8:	680a      	ldr	r2, [r1, #0]
    55ba:	4213      	tst	r3, r2
    55bc:	bf08      	it	eq
    55be:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    55c2:	d149      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55c4:	2004      	movs	r0, #4
    55c6:	f7fc fd6b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55ca:	6961      	ldr	r1, [r4, #20]
    55cc:	69a3      	ldr	r3, [r4, #24]
    55ce:	680a      	ldr	r2, [r1, #0]
    55d0:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55d2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55d6:	d13f      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55d8:	f7fc fd62 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55dc:	6961      	ldr	r1, [r4, #20]
    55de:	69a3      	ldr	r3, [r4, #24]
    55e0:	680a      	ldr	r2, [r1, #0]
    55e2:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55e4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55e8:	d136      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55ea:	f7fc fd59 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55ee:	6961      	ldr	r1, [r4, #20]
    55f0:	69a3      	ldr	r3, [r4, #24]
    55f2:	680a      	ldr	r2, [r1, #0]
    55f4:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55f6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    55fa:	d12d      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    55fc:	f7fc fd50 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5600:	6961      	ldr	r1, [r4, #20]
    5602:	69a3      	ldr	r3, [r4, #24]
    5604:	680a      	ldr	r2, [r1, #0]
    5606:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5608:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    560c:	d124      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    560e:	f7fc fd47 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5612:	6961      	ldr	r1, [r4, #20]
    5614:	69a3      	ldr	r3, [r4, #24]
    5616:	680a      	ldr	r2, [r1, #0]
    5618:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    561a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    561e:	d11b      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5620:	f7fc fd3e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5624:	6961      	ldr	r1, [r4, #20]
    5626:	69a3      	ldr	r3, [r4, #24]
    5628:	680a      	ldr	r2, [r1, #0]
    562a:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    562c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5630:	d112      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5632:	f7fc fd35 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5636:	6961      	ldr	r1, [r4, #20]
    5638:	69a3      	ldr	r3, [r4, #24]
    563a:	680a      	ldr	r2, [r1, #0]
    563c:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    563e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5642:	d109      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5644:	f7fc fd2c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5648:	6960      	ldr	r0, [r4, #20]
    564a:	69a1      	ldr	r1, [r4, #24]
    564c:	6803      	ldr	r3, [r0, #0]
    564e:	420b      	tst	r3, r1
    5650:	d102      	bne.n	5658 <am_hal_i2c_bit_bang_receive+0x500>
    {
        if (--maxLoop == 0)
    5652:	3d08      	subs	r5, #8
    5654:	d1b6      	bne.n	55c4 <am_hal_i2c_bit_bang_receive+0x46c>
    5656:	e5df      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // grab the data bit here
        //
        if ( GET_SDA() )
    5658:	6a62      	ldr	r2, [r4, #36]	; 0x24
    565a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    565c:	6811      	ldr	r1, [r2, #0]
    565e:	4201      	tst	r1, r0
    5660:	d003      	beq.n	566a <am_hal_i2c_bit_bang_receive+0x512>
        {
            //
            // set the bit in the data byte to be returned
            //
            data_byte |=  (0x80 >> i);
    5662:	fa48 f307 	asr.w	r3, r8, r7
    5666:	431e      	orrs	r6, r3
    5668:	b2f6      	uxtb	r6, r6
    uint8_t data_byte = 0;

    //
    // Loop through receiving 8 bits
    //
    for (i = 0; i < 8; i++)
    566a:	3701      	adds	r7, #1
        }

        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    566c:	2005      	movs	r0, #5
    566e:	f7fc fd17 	bl	20a0 <am_hal_flash_delay>
    uint8_t data_byte = 0;

    //
    // Loop through receiving 8 bits
    //
    for (i = 0; i < 8; i++)
    5672:	2f08      	cmp	r7, #8
    5674:	d193      	bne.n	559e <am_hal_i2c_bit_bang_receive+0x446>

    *pRxByte = data_byte;
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5676:	6921      	ldr	r1, [r4, #16]
    if (bNack)
    {
        //
        // Pull up on data line with clock low to indicate NAK
        //
        PULL_SDA_HI();
    5678:	69e7      	ldr	r7, [r4, #28]

    *pRxByte = data_byte;
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    567a:	69a5      	ldr	r5, [r4, #24]
    if (bNack)
    {
        //
        // Pull up on data line with clock low to indicate NAK
        //
        PULL_SDA_HI();
    567c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    }

    *pRxByte = data_byte;
    567e:	f889 6000 	strb.w	r6, [r9]
        WRITE_SDA_LO();
    }
    //
    // Delay for 1/2 bit cell time before sending ACK to device
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5682:	2007      	movs	r0, #7

    *pRxByte = data_byte;
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5684:	600d      	str	r5, [r1, #0]
    if (bNack)
    {
        //
        // Pull up on data line with clock low to indicate NAK
        //
        PULL_SDA_HI();
    5686:	603a      	str	r2, [r7, #0]
        WRITE_SDA_LO();
    }
    //
    // Delay for 1/2 bit cell time before sending ACK to device
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5688:	f7fc fd0a 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    568c:	68e0      	ldr	r0, [r4, #12]
    568e:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5690:	6966      	ldr	r6, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5692:	6003      	str	r3, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5694:	6831      	ldr	r1, [r6, #0]
    5696:	420b      	tst	r3, r1
    5698:	bf08      	it	eq
    569a:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    569e:	f040 811e 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56a2:	2004      	movs	r0, #4
    56a4:	f7fc fcfc 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56a8:	6967      	ldr	r7, [r4, #20]
    56aa:	69a3      	ldr	r3, [r4, #24]
    56ac:	683a      	ldr	r2, [r7, #0]
    56ae:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56b0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56b4:	f040 8113 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56b8:	f7fc fcf2 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56bc:	6966      	ldr	r6, [r4, #20]
    56be:	69a1      	ldr	r1, [r4, #24]
    56c0:	6837      	ldr	r7, [r6, #0]
    56c2:	420f      	tst	r7, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56c4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56c8:	f040 8109 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56cc:	f7fc fce8 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56d0:	6962      	ldr	r2, [r4, #20]
    56d2:	69a3      	ldr	r3, [r4, #24]
    56d4:	6816      	ldr	r6, [r2, #0]
    56d6:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56d8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56dc:	f040 80ff 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56e0:	f7fc fcde 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56e4:	6961      	ldr	r1, [r4, #20]
    56e6:	69a7      	ldr	r7, [r4, #24]
    56e8:	680a      	ldr	r2, [r1, #0]
    56ea:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56ec:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56f0:	f040 80f5 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    56f4:	f7fc fcd4 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    56f8:	6966      	ldr	r6, [r4, #20]
    56fa:	69a3      	ldr	r3, [r4, #24]
    56fc:	6831      	ldr	r1, [r6, #0]
    56fe:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5700:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5704:	f040 80eb 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5708:	f7fc fcca 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    570c:	6967      	ldr	r7, [r4, #20]
    570e:	69a6      	ldr	r6, [r4, #24]
    5710:	683a      	ldr	r2, [r7, #0]
    5712:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5714:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5718:	f040 80e1 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    571c:	f7fc fcc0 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5720:	6961      	ldr	r1, [r4, #20]
    5722:	69a3      	ldr	r3, [r4, #24]
    5724:	680f      	ldr	r7, [r1, #0]
    5726:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5728:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    572c:	f040 80d7 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5730:	f7fc fcb6 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5734:	6960      	ldr	r0, [r4, #20]
    5736:	69a6      	ldr	r6, [r4, #24]
    5738:	6802      	ldr	r2, [r0, #0]
    573a:	4232      	tst	r2, r6
    573c:	f040 80cf 	bne.w	58de <am_hal_i2c_bit_bang_receive+0x786>
    {
        if (--maxLoop == 0)
    5740:	3d08      	subs	r5, #8
    5742:	d1ae      	bne.n	56a2 <am_hal_i2c_bit_bang_receive+0x54a>
    5744:	e568      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5746:	4fa4      	ldr	r7, [pc, #656]	; (59d8 <am_hal_i2c_bit_bang_receive+0x880>)

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5748:	f04f 0880 	mov.w	r8, #128	; 0x80
    574c:	9b02      	ldr	r3, [sp, #8]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    574e:	6920      	ldr	r0, [r4, #16]
    5750:	69a2      	ldr	r2, [r4, #24]
    5752:	6002      	str	r2, [r0, #0]

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5754:	fa48 f105 	asr.w	r1, r8, r5
    5758:	4219      	tst	r1, r3
        {
            PULL_SDA_HI();
    575a:	bf14      	ite	ne
    575c:	69f9      	ldrne	r1, [r7, #28]
        }
        else
        {
            WRITE_SDA_LO();
    575e:	6a39      	ldreq	r1, [r7, #32]
    5760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5762:	6008      	str	r0, [r1, #0]
        }

        //
        // Delay for 1/2 bit cell time to start the clock
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    5764:	2007      	movs	r0, #7
    5766:	f7fc fc9b 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    576a:	68e1      	ldr	r1, [r4, #12]
    576c:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    576e:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5770:	600b      	str	r3, [r1, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5772:	6810      	ldr	r0, [r2, #0]
    5774:	4203      	tst	r3, r0
    5776:	bf08      	it	eq
    5778:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    577c:	d149      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    577e:	2004      	movs	r0, #4
    5780:	f7fc fc8e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5784:	6961      	ldr	r1, [r4, #20]
    5786:	69a3      	ldr	r3, [r4, #24]
    5788:	680a      	ldr	r2, [r1, #0]
    578a:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    578c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5790:	d13f      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5792:	f7fc fc85 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5796:	6961      	ldr	r1, [r4, #20]
    5798:	69a3      	ldr	r3, [r4, #24]
    579a:	680a      	ldr	r2, [r1, #0]
    579c:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    579e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57a2:	d136      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57a4:	f7fc fc7c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57a8:	6961      	ldr	r1, [r4, #20]
    57aa:	69a3      	ldr	r3, [r4, #24]
    57ac:	680a      	ldr	r2, [r1, #0]
    57ae:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57b0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57b4:	d12d      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57b6:	f7fc fc73 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57ba:	6961      	ldr	r1, [r4, #20]
    57bc:	69a3      	ldr	r3, [r4, #24]
    57be:	680a      	ldr	r2, [r1, #0]
    57c0:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57c2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57c6:	d124      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57c8:	f7fc fc6a 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57cc:	6961      	ldr	r1, [r4, #20]
    57ce:	69a3      	ldr	r3, [r4, #24]
    57d0:	680a      	ldr	r2, [r1, #0]
    57d2:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57d4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57d8:	d11b      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57da:	f7fc fc61 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57de:	6961      	ldr	r1, [r4, #20]
    57e0:	69a3      	ldr	r3, [r4, #24]
    57e2:	680a      	ldr	r2, [r1, #0]
    57e4:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57e6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57ea:	d112      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57ec:	f7fc fc58 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57f0:	6961      	ldr	r1, [r4, #20]
    57f2:	69a3      	ldr	r3, [r4, #24]
    57f4:	680a      	ldr	r2, [r1, #0]
    57f6:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57f8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    57fc:	d109      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    57fe:	f7fc fc4f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5802:	6960      	ldr	r0, [r4, #20]
    5804:	69a1      	ldr	r1, [r4, #24]
    5806:	6803      	ldr	r3, [r0, #0]
    5808:	420b      	tst	r3, r1
    580a:	d102      	bne.n	5812 <am_hal_i2c_bit_bang_receive+0x6ba>
    {
        if (--maxLoop == 0)
    580c:	3e08      	subs	r6, #8
    580e:	d1b6      	bne.n	577e <am_hal_i2c_bit_bang_receive+0x626>
    5810:	e502      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5812:	3501      	adds	r5, #1
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    5814:	2005      	movs	r0, #5
    5816:	f7fc fc43 	bl	20a0 <am_hal_flash_delay>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    581a:	2d08      	cmp	r5, #8
    581c:	d196      	bne.n	574c <am_hal_i2c_bit_bang_receive+0x5f4>
    }

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    581e:	6926      	ldr	r6, [r4, #16]
    5820:	69a7      	ldr	r7, [r4, #24]
    5822:	6037      	str	r7, [r6, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5824:	2007      	movs	r0, #7
    5826:	f7fc fc3b 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    582a:	68e0      	ldr	r0, [r4, #12]
    582c:	69a1      	ldr	r1, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    582e:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5830:	6001      	str	r1, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5832:	6813      	ldr	r3, [r2, #0]
    5834:	4219      	tst	r1, r3
    5836:	bf08      	it	eq
    5838:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    583c:	f040 80b5 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5840:	2004      	movs	r0, #4
    5842:	f7fc fc2d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5846:	6966      	ldr	r6, [r4, #20]
    5848:	69a7      	ldr	r7, [r4, #24]
    584a:	6831      	ldr	r1, [r6, #0]
    584c:	4239      	tst	r1, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    584e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5852:	f040 80aa 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5856:	f7fc fc23 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    585a:	6962      	ldr	r2, [r4, #20]
    585c:	69a3      	ldr	r3, [r4, #24]
    585e:	6816      	ldr	r6, [r2, #0]
    5860:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5862:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5866:	f040 80a0 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    586a:	f7fc fc19 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    586e:	6967      	ldr	r7, [r4, #20]
    5870:	69a1      	ldr	r1, [r4, #24]
    5872:	683a      	ldr	r2, [r7, #0]
    5874:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5876:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    587a:	f040 8096 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    587e:	f7fc fc0f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5882:	6966      	ldr	r6, [r4, #20]
    5884:	69a3      	ldr	r3, [r4, #24]
    5886:	6837      	ldr	r7, [r6, #0]
    5888:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    588a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    588e:	f040 808c 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5892:	f7fc fc05 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5896:	6961      	ldr	r1, [r4, #20]
    5898:	69a6      	ldr	r6, [r4, #24]
    589a:	680a      	ldr	r2, [r1, #0]
    589c:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    589e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58a2:	f040 8082 	bne.w	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    58a6:	f7fc fbfb 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58aa:	6967      	ldr	r7, [r4, #20]
    58ac:	69a3      	ldr	r3, [r4, #24]
    58ae:	6839      	ldr	r1, [r7, #0]
    58b0:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    58b2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58b6:	d178      	bne.n	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    58b8:	f7fc fbf2 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58bc:	6966      	ldr	r6, [r4, #20]
    58be:	69a7      	ldr	r7, [r4, #24]
    58c0:	6832      	ldr	r2, [r6, #0]
    58c2:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    58c4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58c8:	d16f      	bne.n	59aa <am_hal_i2c_bit_bang_receive+0x852>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    58ca:	f7fc fbe9 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    58ce:	6960      	ldr	r0, [r4, #20]
    58d0:	69a3      	ldr	r3, [r4, #24]
    58d2:	6801      	ldr	r1, [r0, #0]
    58d4:	4219      	tst	r1, r3
    58d6:	d168      	bne.n	59aa <am_hal_i2c_bit_bang_receive+0x852>
    {
        if (--maxLoop == 0)
    58d8:	3d08      	subs	r5, #8
    58da:	d1b1      	bne.n	5840 <am_hal_i2c_bit_bang_receive+0x6e8>
    58dc:	e49c      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Delay for 1/2 bit cell time while clock is high to le peer sample the ACK/NAK
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    58de:	2005      	movs	r0, #5
    58e0:	f7fc fbde 	bl	20a0 <am_hal_flash_delay>
    // Send stop condition
    //********************
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    58e4:	6925      	ldr	r5, [r4, #16]
    58e6:	69a1      	ldr	r1, [r4, #24]
    58e8:	6029      	str	r1, [r5, #0]

    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    58ea:	2004      	movs	r0, #4
    // Send stop condition
    //********************
    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    58ec:	4f3a      	ldr	r7, [pc, #232]	; (59d8 <am_hal_i2c_bit_bang_receive+0x880>)

    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    58ee:	f7fc fbd7 	bl	20a0 <am_hal_flash_delay>


    if (!bNoStop)
    58f2:	f1bb 0f00 	cmp.w	fp, #0
    58f6:	d171      	bne.n	59dc <am_hal_i2c_bit_bang_receive+0x884>
    {
        //
        // Pull down on data line with clock low
        //
        WRITE_SDA_LO();
    58f8:	6a3b      	ldr	r3, [r7, #32]
    58fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    58fc:	6018      	str	r0, [r3, #0]
    }
    //
    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    58fe:	2004      	movs	r0, #4
    5900:	f7fc fbce 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5904:	68fe      	ldr	r6, [r7, #12]
    5906:	69bd      	ldr	r5, [r7, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5908:	697f      	ldr	r7, [r7, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    590a:	6035      	str	r5, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    590c:	683a      	ldr	r2, [r7, #0]
    590e:	422a      	tst	r2, r5
    5910:	d176      	bne.n	5a00 <am_hal_i2c_bit_bang_receive+0x8a8>
    5912:	f44f 76c8 	mov.w	r6, #400	; 0x190
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5916:	2004      	movs	r0, #4
    5918:	f7fc fbc2 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    591c:	6961      	ldr	r1, [r4, #20]
    591e:	69a3      	ldr	r3, [r4, #24]
    5920:	680d      	ldr	r5, [r1, #0]
    5922:	421d      	tst	r5, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5924:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5928:	d14b      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    592a:	f7fc fbb9 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    592e:	6967      	ldr	r7, [r4, #20]
    5930:	69a1      	ldr	r1, [r4, #24]
    5932:	683a      	ldr	r2, [r7, #0]
    5934:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5936:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    593a:	d142      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    593c:	f7fc fbb0 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5940:	6965      	ldr	r5, [r4, #20]
    5942:	69a3      	ldr	r3, [r4, #24]
    5944:	682f      	ldr	r7, [r5, #0]
    5946:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5948:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    594c:	d139      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    594e:	f7fc fba7 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5952:	6961      	ldr	r1, [r4, #20]
    5954:	69a5      	ldr	r5, [r4, #24]
    5956:	680a      	ldr	r2, [r1, #0]
    5958:	422a      	tst	r2, r5
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    595a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    595e:	d130      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5960:	f7fc fb9e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5964:	6967      	ldr	r7, [r4, #20]
    5966:	69a3      	ldr	r3, [r4, #24]
    5968:	6839      	ldr	r1, [r7, #0]
    596a:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    596c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5970:	d127      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5972:	f7fc fb95 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5976:	6965      	ldr	r5, [r4, #20]
    5978:	69a7      	ldr	r7, [r4, #24]
    597a:	682a      	ldr	r2, [r5, #0]
    597c:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    597e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5982:	d11e      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5984:	f7fc fb8c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5988:	6961      	ldr	r1, [r4, #20]
    598a:	69a3      	ldr	r3, [r4, #24]
    598c:	680d      	ldr	r5, [r1, #0]
    598e:	421d      	tst	r5, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5990:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5994:	d115      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5996:	f7fc fb83 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    599a:	6960      	ldr	r0, [r4, #20]
    599c:	69a7      	ldr	r7, [r4, #24]
    599e:	6802      	ldr	r2, [r0, #0]
    59a0:	423a      	tst	r2, r7
    59a2:	d10e      	bne.n	59c2 <am_hal_i2c_bit_bang_receive+0x86a>
    {
        if (--maxLoop == 0)
    59a4:	3e08      	subs	r6, #8
    59a6:	d1b6      	bne.n	5916 <am_hal_i2c_bit_bang_receive+0x7be>
    59a8:	e436      	b.n	5218 <am_hal_i2c_bit_bang_receive+0xc0>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    59aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
    59ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    59ae:	682d      	ldr	r5, [r5, #0]
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    59b0:	2005      	movs	r0, #5
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    59b2:	4035      	ands	r5, r6
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    59b4:	f7fc fb74 	bl	20a0 <am_hal_flash_delay>
    if ( data_naked )
    59b8:	2d00      	cmp	r5, #0
    59ba:	f43f ad0f 	beq.w	53dc <am_hal_i2c_bit_bang_receive+0x284>
    {
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;
    59be:	2002      	movs	r0, #2
    59c0:	e42b      	b.n	521a <am_hal_i2c_bit_bang_receive+0xc2>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Delay for 1/2 bit cell time while clock is high
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    59c2:	2005      	movs	r0, #5
    59c4:	f7fc fb6c 	bl	20a0 <am_hal_flash_delay>

    if (!bNoStop)
    59c8:	f1bb 0f00 	cmp.w	fp, #0
    59cc:	d116      	bne.n	59fc <am_hal_i2c_bit_bang_receive+0x8a4>
    {
        //
        // release data line with clock high --> STOP CONDITION
        //
        PULL_SDA_HI();
    59ce:	69e6      	ldr	r6, [r4, #28]
    59d0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    59d2:	6034      	str	r4, [r6, #0]
    }

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    59d4:	2000      	movs	r0, #0
    59d6:	e420      	b.n	521a <am_hal_i2c_bit_bang_receive+0xc2>
    59d8:	10001198 	.word	0x10001198
    else
    {
        //
        // Release data line with clock low itself, as we are not sending STOP
        //
        PULL_SDA_HI();
    59dc:	69fb      	ldr	r3, [r7, #28]
    59de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    59e0:	6018      	str	r0, [r3, #0]
    }
    //
    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    59e2:	2004      	movs	r0, #4
    59e4:	f7fc fb5c 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    59e8:	68fe      	ldr	r6, [r7, #12]
    59ea:	69bd      	ldr	r5, [r7, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    59ec:	697a      	ldr	r2, [r7, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    59ee:	6035      	str	r5, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    59f0:	6811      	ldr	r1, [r2, #0]
    59f2:	4229      	tst	r1, r5
    59f4:	d08d      	beq.n	5912 <am_hal_i2c_bit_bang_receive+0x7ba>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Delay for 1/2 bit cell time while clock is high
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    59f6:	2005      	movs	r0, #5
    59f8:	f7fc fb52 	bl	20a0 <am_hal_flash_delay>
    }

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    59fc:	2000      	movs	r0, #0
    59fe:	e40c      	b.n	521a <am_hal_i2c_bit_bang_receive+0xc2>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Delay for 1/2 bit cell time while clock is high
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5a00:	2005      	movs	r0, #5
    5a02:	f7fc fb4d 	bl	20a0 <am_hal_flash_delay>
    5a06:	e7e2      	b.n	59ce <am_hal_i2c_bit_bang_receive+0x876>

00005a08 <am_hal_i2c_bit_bang_send>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5a0c:	4c9c      	ldr	r4, [pc, #624]	; (5c80 <am_hal_i2c_bit_bang_send+0x278>)
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a0e:	b085      	sub	sp, #20
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5a10:	68e6      	ldr	r6, [r4, #12]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a12:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5a16:	69a7      	ldr	r7, [r4, #24]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a18:	9503      	str	r5, [sp, #12]
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a1a:	6965      	ldr	r5, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5a1c:	6037      	str	r7, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a1e:	682d      	ldr	r5, [r5, #0]
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a20:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    5a24:	9602      	str	r6, [sp, #8]
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a26:	422f      	tst	r7, r5
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    5a28:	4680      	mov	r8, r0
    5a2a:	9101      	str	r1, [sp, #4]
    5a2c:	4693      	mov	fp, r2
    5a2e:	469a      	mov	sl, r3
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a30:	bf08      	it	eq
    5a32:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5a36:	d14c      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a38:	2004      	movs	r0, #4
    5a3a:	f7fc fb31 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a3e:	6962      	ldr	r2, [r4, #20]
    5a40:	69a3      	ldr	r3, [r4, #24]
    5a42:	6811      	ldr	r1, [r2, #0]
    5a44:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a46:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a4a:	d142      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a4c:	f7fc fb28 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a50:	6967      	ldr	r7, [r4, #20]
    5a52:	69a6      	ldr	r6, [r4, #24]
    5a54:	683a      	ldr	r2, [r7, #0]
    5a56:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a58:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a5c:	d139      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a5e:	f7fc fb1f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a62:	6961      	ldr	r1, [r4, #20]
    5a64:	69a3      	ldr	r3, [r4, #24]
    5a66:	680f      	ldr	r7, [r1, #0]
    5a68:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a6a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a6e:	d130      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a70:	f7fc fb16 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a74:	6966      	ldr	r6, [r4, #20]
    5a76:	69a1      	ldr	r1, [r4, #24]
    5a78:	6832      	ldr	r2, [r6, #0]
    5a7a:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a7c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a80:	d127      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a82:	f7fc fb0d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a86:	6967      	ldr	r7, [r4, #20]
    5a88:	69a3      	ldr	r3, [r4, #24]
    5a8a:	683e      	ldr	r6, [r7, #0]
    5a8c:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a8e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a92:	d11e      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5a94:	f7fc fb04 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5a98:	6961      	ldr	r1, [r4, #20]
    5a9a:	69a7      	ldr	r7, [r4, #24]
    5a9c:	680a      	ldr	r2, [r1, #0]
    5a9e:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5aa0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5aa4:	d115      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5aa6:	f7fc fafb 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5aaa:	6966      	ldr	r6, [r4, #20]
    5aac:	69a3      	ldr	r3, [r4, #24]
    5aae:	6831      	ldr	r1, [r6, #0]
    5ab0:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ab2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ab6:	d10c      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ab8:	f7fc faf2 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5abc:	6960      	ldr	r0, [r4, #20]
    5abe:	69a7      	ldr	r7, [r4, #24]
    5ac0:	6802      	ldr	r2, [r0, #0]
    5ac2:	423a      	tst	r2, r7
    5ac4:	d105      	bne.n	5ad2 <am_hal_i2c_bit_bang_send+0xca>
    {
        if (--maxLoop == 0)
    5ac6:	3d08      	subs	r5, #8
    5ac8:	d1b6      	bne.n	5a38 <am_hal_i2c_bit_bang_send+0x30>
    //
    WAIT_I2C_CLOCK_HI_PERIOD();

    if ( data_naked )
    {
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;  // if it happens early
    5aca:	2003      	movs	r0, #3

    //
    // message successfully sent
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
}
    5acc:	b005      	add	sp, #20
    5ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Pull down on data line with clock high --> START CONDITION
    //
    WRITE_SDA_LO();
    5ad2:	6a26      	ldr	r6, [r4, #32]
    5ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5ad6:	6033      	str	r3, [r6, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5ad8:	2005      	movs	r0, #5
    5ada:	f7fc fae1 	bl	20a0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5ade:	4f68      	ldr	r7, [pc, #416]	; (5c80 <am_hal_i2c_bit_bang_send+0x278>)
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5ae0:	2600      	movs	r6, #0
        WRITE_SCL_LO();

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5ae2:	f04f 0980 	mov.w	r9, #128	; 0x80
    5ae6:	fa49 f306 	asr.w	r3, r9, r6
    5aea:	ea13 0f08 	tst.w	r3, r8
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5aee:	6921      	ldr	r1, [r4, #16]
        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
        {
            PULL_SDA_HI();
    5af0:	bf14      	ite	ne
    5af2:	69fb      	ldrne	r3, [r7, #28]
        }
        else
        {
            WRITE_SDA_LO();
    5af4:	6a3b      	ldreq	r3, [r7, #32]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5af6:	69a0      	ldr	r0, [r4, #24]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5afa:	6008      	str	r0, [r1, #0]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5afc:	601a      	str	r2, [r3, #0]
        }

        //
        // Delay for 1/2 bit cell time to start the clock
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    5afe:	2007      	movs	r0, #7
    5b00:	f7fc face 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5b04:	68e1      	ldr	r1, [r4, #12]
    5b06:	69a0      	ldr	r0, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b08:	6963      	ldr	r3, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5b0a:	6008      	str	r0, [r1, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b0c:	681a      	ldr	r2, [r3, #0]
    5b0e:	4202      	tst	r2, r0
    5b10:	bf08      	it	eq
    5b12:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5b16:	d149      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b18:	2004      	movs	r0, #4
    5b1a:	f7fc fac1 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b1e:	6961      	ldr	r1, [r4, #20]
    5b20:	69a3      	ldr	r3, [r4, #24]
    5b22:	680a      	ldr	r2, [r1, #0]
    5b24:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b26:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b2a:	d13f      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b2c:	f7fc fab8 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b30:	6961      	ldr	r1, [r4, #20]
    5b32:	69a3      	ldr	r3, [r4, #24]
    5b34:	680a      	ldr	r2, [r1, #0]
    5b36:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b38:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b3c:	d136      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b3e:	f7fc faaf 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b42:	6961      	ldr	r1, [r4, #20]
    5b44:	69a3      	ldr	r3, [r4, #24]
    5b46:	680a      	ldr	r2, [r1, #0]
    5b48:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b4a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b4e:	d12d      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b50:	f7fc faa6 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b54:	6961      	ldr	r1, [r4, #20]
    5b56:	69a3      	ldr	r3, [r4, #24]
    5b58:	680a      	ldr	r2, [r1, #0]
    5b5a:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b5c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b60:	d124      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b62:	f7fc fa9d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b66:	6961      	ldr	r1, [r4, #20]
    5b68:	69a3      	ldr	r3, [r4, #24]
    5b6a:	680a      	ldr	r2, [r1, #0]
    5b6c:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b6e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b72:	d11b      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b74:	f7fc fa94 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b78:	6961      	ldr	r1, [r4, #20]
    5b7a:	69a3      	ldr	r3, [r4, #24]
    5b7c:	680a      	ldr	r2, [r1, #0]
    5b7e:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b80:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b84:	d112      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b86:	f7fc fa8b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b8a:	6961      	ldr	r1, [r4, #20]
    5b8c:	69a3      	ldr	r3, [r4, #24]
    5b8e:	680a      	ldr	r2, [r1, #0]
    5b90:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b92:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b96:	d109      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5b98:	f7fc fa82 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5b9c:	6960      	ldr	r0, [r4, #20]
    5b9e:	69a1      	ldr	r1, [r4, #24]
    5ba0:	6803      	ldr	r3, [r0, #0]
    5ba2:	420b      	tst	r3, r1
    5ba4:	d102      	bne.n	5bac <am_hal_i2c_bit_bang_send+0x1a4>
    {
        if (--maxLoop == 0)
    5ba6:	3d08      	subs	r5, #8
    5ba8:	d1b6      	bne.n	5b18 <am_hal_i2c_bit_bang_send+0x110>
    5baa:	e78e      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5bac:	3601      	adds	r6, #1
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    5bae:	2005      	movs	r0, #5
    5bb0:	f7fc fa76 	bl	20a0 <am_hal_flash_delay>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5bb4:	2e08      	cmp	r6, #8
    5bb6:	d196      	bne.n	5ae6 <am_hal_i2c_bit_bang_send+0xde>
    }

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5bb8:	6926      	ldr	r6, [r4, #16]
    5bba:	69a2      	ldr	r2, [r4, #24]
    5bbc:	6032      	str	r2, [r6, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5bbe:	2007      	movs	r0, #7
    5bc0:	f7fc fa6e 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5bc4:	68e0      	ldr	r0, [r4, #12]
    5bc6:	69a1      	ldr	r1, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bc8:	6963      	ldr	r3, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5bca:	6001      	str	r1, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bcc:	681e      	ldr	r6, [r3, #0]
    5bce:	4231      	tst	r1, r6
    5bd0:	bf08      	it	eq
    5bd2:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5bd6:	d149      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5bd8:	2004      	movs	r0, #4
    5bda:	f7fc fa61 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bde:	6962      	ldr	r2, [r4, #20]
    5be0:	69a1      	ldr	r1, [r4, #24]
    5be2:	6813      	ldr	r3, [r2, #0]
    5be4:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5be6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bea:	d13f      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5bec:	f7fc fa58 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bf0:	6966      	ldr	r6, [r4, #20]
    5bf2:	69a1      	ldr	r1, [r4, #24]
    5bf4:	6832      	ldr	r2, [r6, #0]
    5bf6:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5bf8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5bfc:	d136      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5bfe:	f7fc fa4f 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c02:	6966      	ldr	r6, [r4, #20]
    5c04:	69a3      	ldr	r3, [r4, #24]
    5c06:	6831      	ldr	r1, [r6, #0]
    5c08:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c0a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c0e:	d12d      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c10:	f7fc fa46 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c14:	6962      	ldr	r2, [r4, #20]
    5c16:	69a6      	ldr	r6, [r4, #24]
    5c18:	6813      	ldr	r3, [r2, #0]
    5c1a:	4233      	tst	r3, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c1c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c20:	d124      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c22:	f7fc fa3d 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c26:	6961      	ldr	r1, [r4, #20]
    5c28:	69a6      	ldr	r6, [r4, #24]
    5c2a:	680a      	ldr	r2, [r1, #0]
    5c2c:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c2e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c32:	d11b      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c34:	f7fc fa34 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c38:	6961      	ldr	r1, [r4, #20]
    5c3a:	69a3      	ldr	r3, [r4, #24]
    5c3c:	680e      	ldr	r6, [r1, #0]
    5c3e:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c40:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c44:	d112      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c46:	f7fc fa2b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c4a:	6962      	ldr	r2, [r4, #20]
    5c4c:	69a1      	ldr	r1, [r4, #24]
    5c4e:	6813      	ldr	r3, [r2, #0]
    5c50:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c52:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c56:	d109      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5c58:	f7fc fa22 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5c5c:	6960      	ldr	r0, [r4, #20]
    5c5e:	69a6      	ldr	r6, [r4, #24]
    5c60:	6802      	ldr	r2, [r0, #0]
    5c62:	4232      	tst	r2, r6
    5c64:	d102      	bne.n	5c6c <am_hal_i2c_bit_bang_send+0x264>
    {
        if (--maxLoop == 0)
    5c66:	3d08      	subs	r5, #8
    5c68:	d1b6      	bne.n	5bd8 <am_hal_i2c_bit_bang_send+0x1d0>
    5c6a:	e72e      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    5c6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    5c6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5c70:	682d      	ldr	r5, [r5, #0]
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5c72:	2005      	movs	r0, #5
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    5c74:	400d      	ands	r5, r1
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5c76:	f7fc fa13 	bl	20a0 <am_hal_flash_delay>
    if ( data_naked )
    5c7a:	b11d      	cbz	r5, 5c84 <am_hal_i2c_bit_bang_send+0x27c>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    5c7c:	2001      	movs	r0, #1
    5c7e:	e725      	b.n	5acc <am_hal_i2c_bit_bang_send+0xc4>
    5c80:	10001198 	.word	0x10001198
        }
        return status;
    }

    if ( bUseOffset )
    5c84:	9b03      	ldr	r3, [sp, #12]
    5c86:	2b00      	cmp	r3, #0
    5c88:	f040 8164 	bne.w	5f54 <am_hal_i2c_bit_bang_send+0x54c>
    }

    //
    // send the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    5c8c:	9f01      	ldr	r7, [sp, #4]
    5c8e:	2f00      	cmp	r7, #0
    5c90:	f000 80de 	beq.w	5e50 <am_hal_i2c_bit_bang_send+0x448>
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5c94:	4fa0      	ldr	r7, [pc, #640]	; (5f18 <am_hal_i2c_bit_bang_send+0x510>)
    }

    //
    // send the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    5c96:	f04f 0a00 	mov.w	sl, #0
        WRITE_SCL_LO();

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5c9a:	f04f 0980 	mov.w	r9, #128	; 0x80
    5c9e:	f81b 8b01 	ldrb.w	r8, [fp], #1
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5ca2:	2600      	movs	r6, #0
        WRITE_SCL_LO();

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5ca4:	fa49 f306 	asr.w	r3, r9, r6
    5ca8:	ea13 0f08 	tst.w	r3, r8
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5cac:	6920      	ldr	r0, [r4, #16]
        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
        {
            PULL_SDA_HI();
    5cae:	bf14      	ite	ne
    5cb0:	69fb      	ldrne	r3, [r7, #28]
        }
        else
        {
            WRITE_SDA_LO();
    5cb2:	6a3b      	ldreq	r3, [r7, #32]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5cb4:	69a2      	ldr	r2, [r4, #24]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5cb8:	6002      	str	r2, [r0, #0]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5cba:	6019      	str	r1, [r3, #0]
        }

        //
        // Delay for 1/2 bit cell time to start the clock
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    5cbc:	2007      	movs	r0, #7
    5cbe:	f7fc f9ef 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5cc2:	68e0      	ldr	r0, [r4, #12]
    5cc4:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5cc6:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5cc8:	6003      	str	r3, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5cca:	6811      	ldr	r1, [r2, #0]
    5ccc:	420b      	tst	r3, r1
    5cce:	bf08      	it	eq
    5cd0:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5cd4:	d149      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5cd6:	2004      	movs	r0, #4
    5cd8:	f7fc f9e2 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5cdc:	6962      	ldr	r2, [r4, #20]
    5cde:	69a3      	ldr	r3, [r4, #24]
    5ce0:	6811      	ldr	r1, [r2, #0]
    5ce2:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ce4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ce8:	d13f      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5cea:	f7fc f9d9 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5cee:	6962      	ldr	r2, [r4, #20]
    5cf0:	69a3      	ldr	r3, [r4, #24]
    5cf2:	6811      	ldr	r1, [r2, #0]
    5cf4:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5cf6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5cfa:	d136      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5cfc:	f7fc f9d0 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d00:	6962      	ldr	r2, [r4, #20]
    5d02:	69a3      	ldr	r3, [r4, #24]
    5d04:	6811      	ldr	r1, [r2, #0]
    5d06:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d08:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d0c:	d12d      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d0e:	f7fc f9c7 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d12:	6962      	ldr	r2, [r4, #20]
    5d14:	69a3      	ldr	r3, [r4, #24]
    5d16:	6811      	ldr	r1, [r2, #0]
    5d18:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d1a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d1e:	d124      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d20:	f7fc f9be 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d24:	6962      	ldr	r2, [r4, #20]
    5d26:	69a3      	ldr	r3, [r4, #24]
    5d28:	6811      	ldr	r1, [r2, #0]
    5d2a:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d2c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d30:	d11b      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d32:	f7fc f9b5 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d36:	6962      	ldr	r2, [r4, #20]
    5d38:	69a3      	ldr	r3, [r4, #24]
    5d3a:	6811      	ldr	r1, [r2, #0]
    5d3c:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d3e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d42:	d112      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d44:	f7fc f9ac 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d48:	6962      	ldr	r2, [r4, #20]
    5d4a:	69a3      	ldr	r3, [r4, #24]
    5d4c:	6811      	ldr	r1, [r2, #0]
    5d4e:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d50:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d54:	d109      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d56:	f7fc f9a3 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d5a:	6960      	ldr	r0, [r4, #20]
    5d5c:	69a3      	ldr	r3, [r4, #24]
    5d5e:	6802      	ldr	r2, [r0, #0]
    5d60:	421a      	tst	r2, r3
    5d62:	d102      	bne.n	5d6a <am_hal_i2c_bit_bang_send+0x362>
    {
        if (--maxLoop == 0)
    5d64:	3d08      	subs	r5, #8
    5d66:	d1b6      	bne.n	5cd6 <am_hal_i2c_bit_bang_send+0x2ce>
    5d68:	e6af      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5d6a:	3601      	adds	r6, #1
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    5d6c:	2005      	movs	r0, #5
    5d6e:	f7fc f997 	bl	20a0 <am_hal_flash_delay>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    5d72:	2e08      	cmp	r6, #8
    5d74:	d196      	bne.n	5ca4 <am_hal_i2c_bit_bang_send+0x29c>
    }

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5d76:	6926      	ldr	r6, [r4, #16]
    5d78:	69a1      	ldr	r1, [r4, #24]
    5d7a:	6031      	str	r1, [r6, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5d7c:	2007      	movs	r0, #7
    5d7e:	f7fc f98f 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5d82:	68e0      	ldr	r0, [r4, #12]
    5d84:	69a3      	ldr	r3, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d86:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5d88:	6003      	str	r3, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d8a:	6816      	ldr	r6, [r2, #0]
    5d8c:	4233      	tst	r3, r6
    5d8e:	bf08      	it	eq
    5d90:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    5d94:	d149      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5d96:	2004      	movs	r0, #4
    5d98:	f7fc f982 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5d9c:	6961      	ldr	r1, [r4, #20]
    5d9e:	69a3      	ldr	r3, [r4, #24]
    5da0:	680a      	ldr	r2, [r1, #0]
    5da2:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5da4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5da8:	d13f      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5daa:	f7fc f979 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dae:	6966      	ldr	r6, [r4, #20]
    5db0:	69a1      	ldr	r1, [r4, #24]
    5db2:	6833      	ldr	r3, [r6, #0]
    5db4:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5db6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dba:	d136      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dbc:	f7fc f970 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dc0:	6962      	ldr	r2, [r4, #20]
    5dc2:	69a6      	ldr	r6, [r4, #24]
    5dc4:	6811      	ldr	r1, [r2, #0]
    5dc6:	4231      	tst	r1, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dc8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dcc:	d12d      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dce:	f7fc f967 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dd2:	6962      	ldr	r2, [r4, #20]
    5dd4:	69a3      	ldr	r3, [r4, #24]
    5dd6:	6816      	ldr	r6, [r2, #0]
    5dd8:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dda:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5dde:	d124      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5de0:	f7fc f95e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5de4:	6961      	ldr	r1, [r4, #20]
    5de6:	69a3      	ldr	r3, [r4, #24]
    5de8:	680a      	ldr	r2, [r1, #0]
    5dea:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dec:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5df0:	d11b      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5df2:	f7fc f955 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5df6:	6966      	ldr	r6, [r4, #20]
    5df8:	69a1      	ldr	r1, [r4, #24]
    5dfa:	6833      	ldr	r3, [r6, #0]
    5dfc:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5dfe:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e02:	d112      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e04:	f7fc f94c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e08:	6962      	ldr	r2, [r4, #20]
    5e0a:	69a6      	ldr	r6, [r4, #24]
    5e0c:	6811      	ldr	r1, [r2, #0]
    5e0e:	4231      	tst	r1, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e10:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e14:	d109      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e16:	f7fc f943 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e1a:	6960      	ldr	r0, [r4, #20]
    5e1c:	69a3      	ldr	r3, [r4, #24]
    5e1e:	6802      	ldr	r2, [r0, #0]
    5e20:	421a      	tst	r2, r3
    5e22:	d102      	bne.n	5e2a <am_hal_i2c_bit_bang_send+0x422>
    {
        if (--maxLoop == 0)
    5e24:	3d08      	subs	r5, #8
    5e26:	d1b6      	bne.n	5d96 <am_hal_i2c_bit_bang_send+0x38e>
    5e28:	e64f      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    5e2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    5e2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5e2e:	682d      	ldr	r5, [r5, #0]
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5e30:	2005      	movs	r0, #5
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    5e32:	4035      	ands	r5, r6
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5e34:	f7fc f934 	bl	20a0 <am_hal_flash_delay>
    if ( data_naked )
    5e38:	b125      	cbz	r5, 5e44 <am_hal_i2c_bit_bang_send+0x43c>
        status =  i2c_send_byte(*pData++);
        if (status != AM_HAL_I2C_BIT_BANG_SUCCESS)
        {
            if (status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
            {
                if (ui32I != (number_of_bytes-1))
    5e3a:	9901      	ldr	r1, [sp, #4]
    5e3c:	1e48      	subs	r0, r1, #1
    5e3e:	4550      	cmp	r0, sl
    5e40:	f040 814e 	bne.w	60e0 <am_hal_i2c_bit_bang_send+0x6d8>
    }

    //
    // send the requested number of data bytes
    //
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    5e44:	9b01      	ldr	r3, [sp, #4]
    5e46:	f10a 0a01 	add.w	sl, sl, #1
    5e4a:	4553      	cmp	r3, sl
    5e4c:	f47f af27 	bne.w	5c9e <am_hal_i2c_bit_bang_send+0x296>
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    uint32_t ui32I;
    am_hal_i2c_bit_bang_enum_e status;
    bool data_naked = false;
    5e50:	2700      	movs	r7, #0
    //********************

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5e52:	6926      	ldr	r6, [r4, #16]
    5e54:	69a2      	ldr	r2, [r4, #24]
    5e56:	6032      	str	r2, [r6, #0]

    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    5e58:	2004      	movs	r0, #4
    5e5a:	f7fc f921 	bl	20a0 <am_hal_flash_delay>


    if (!bNoStop)
    5e5e:	9902      	ldr	r1, [sp, #8]
    //********************

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    5e60:	4d2d      	ldr	r5, [pc, #180]	; (5f18 <am_hal_i2c_bit_bang_send+0x510>)
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();


    if (!bNoStop)
    5e62:	2900      	cmp	r1, #0
    5e64:	d05a      	beq.n	5f1c <am_hal_i2c_bit_bang_send+0x514>
    else
    {
        //
        // Release data line with clock low itself, as we are not sending STOP
        //
        PULL_SDA_HI();
    5e66:	69e8      	ldr	r0, [r5, #28]
    5e68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e6a:	6003      	str	r3, [r0, #0]
    }

    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    5e6c:	2004      	movs	r0, #4
    5e6e:	f7fc f917 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5e72:	68ee      	ldr	r6, [r5, #12]
    5e74:	69a9      	ldr	r1, [r5, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e76:	696a      	ldr	r2, [r5, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5e78:	6031      	str	r1, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e7a:	6815      	ldr	r5, [r2, #0]
    5e7c:	4229      	tst	r1, r5
    5e7e:	d15d      	bne.n	5f3c <am_hal_i2c_bit_bang_send+0x534>
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    uint32_t ui32I;
    am_hal_i2c_bit_bang_enum_e status;
    bool data_naked = false;
    5e80:	f44f 76c8 	mov.w	r6, #400	; 0x190
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e84:	2004      	movs	r0, #4
    5e86:	f7fc f90b 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e8a:	6961      	ldr	r1, [r4, #20]
    5e8c:	69a3      	ldr	r3, [r4, #24]
    5e8e:	680a      	ldr	r2, [r1, #0]
    5e90:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e92:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e96:	d159      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5e98:	f7fc f902 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5e9c:	6965      	ldr	r5, [r4, #20]
    5e9e:	69a1      	ldr	r1, [r4, #24]
    5ea0:	682b      	ldr	r3, [r5, #0]
    5ea2:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ea4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ea8:	d150      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5eaa:	f7fc f8f9 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5eae:	6962      	ldr	r2, [r4, #20]
    5eb0:	69a5      	ldr	r5, [r4, #24]
    5eb2:	6811      	ldr	r1, [r2, #0]
    5eb4:	4229      	tst	r1, r5
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5eb6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5eba:	d147      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ebc:	f7fc f8f0 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ec0:	6962      	ldr	r2, [r4, #20]
    5ec2:	69a3      	ldr	r3, [r4, #24]
    5ec4:	6815      	ldr	r5, [r2, #0]
    5ec6:	421d      	tst	r5, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ec8:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ecc:	d13e      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ece:	f7fc f8e7 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ed2:	6961      	ldr	r1, [r4, #20]
    5ed4:	69a3      	ldr	r3, [r4, #24]
    5ed6:	680a      	ldr	r2, [r1, #0]
    5ed8:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5eda:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ede:	d135      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ee0:	f7fc f8de 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ee4:	6965      	ldr	r5, [r4, #20]
    5ee6:	69a1      	ldr	r1, [r4, #24]
    5ee8:	682b      	ldr	r3, [r5, #0]
    5eea:	420b      	tst	r3, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5eec:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ef0:	d12c      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ef2:	f7fc f8d5 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ef6:	6962      	ldr	r2, [r4, #20]
    5ef8:	69a5      	ldr	r5, [r4, #24]
    5efa:	6811      	ldr	r1, [r2, #0]
    5efc:	4229      	tst	r1, r5
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5efe:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f02:	d123      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5f04:	f7fc f8cc 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f08:	6960      	ldr	r0, [r4, #20]
    5f0a:	69a3      	ldr	r3, [r4, #24]
    5f0c:	6802      	ldr	r2, [r0, #0]
    5f0e:	421a      	tst	r2, r3
    5f10:	d11c      	bne.n	5f4c <am_hal_i2c_bit_bang_send+0x544>
    {
        if (--maxLoop == 0)
    5f12:	3e08      	subs	r6, #8
    5f14:	d1b6      	bne.n	5e84 <am_hal_i2c_bit_bang_send+0x47c>
    5f16:	e5d8      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
    5f18:	10001198 	.word	0x10001198
    if (!bNoStop)
    {
        //
        // Pull down on data line with clock low
        //
        WRITE_SDA_LO();
    5f1c:	6a28      	ldr	r0, [r5, #32]
    5f1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f20:	6003      	str	r3, [r0, #0]
    }

    //
    // Delay for 1/4 bit cell time
    //
    WAIT_FOR_QUARTER_I2C_CLOCK();
    5f22:	2004      	movs	r0, #4
    5f24:	f7fc f8bc 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5f28:	68ee      	ldr	r6, [r5, #12]
    5f2a:	69a9      	ldr	r1, [r5, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f2c:	696a      	ldr	r2, [r5, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5f2e:	6031      	str	r1, [r6, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f30:	6815      	ldr	r5, [r2, #0]
    5f32:	420d      	tst	r5, r1
    5f34:	d0a4      	beq.n	5e80 <am_hal_i2c_bit_bang_send+0x478>
    if (!bNoStop)
    {
        //
        // release data line with clock high --> STOP CONDITION
        //
        PULL_SDA_HI();
    5f36:	69e5      	ldr	r5, [r4, #28]
    5f38:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    5f3a:	602c      	str	r4, [r5, #0]
    }

    //
    // Delay for 1/2 bit cell time while clock is high
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    5f3c:	2005      	movs	r0, #5
    5f3e:	f7fc f8af 	bl	20a0 <am_hal_flash_delay>

    if ( data_naked )
    5f42:	2f00      	cmp	r7, #0
    5f44:	f000 80d9 	beq.w	60fa <am_hal_i2c_bit_bang_send+0x6f2>
    {
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;  // if it happens early
    5f48:	2002      	movs	r0, #2
    5f4a:	e5bf      	b.n	5acc <am_hal_i2c_bit_bang_send+0xc4>

    if (i2c_pull_and_wait_scl_hi())
    {
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    if (!bNoStop)
    5f4c:	9e02      	ldr	r6, [sp, #8]
    5f4e:	2e00      	cmp	r6, #0
    5f50:	d0f1      	beq.n	5f36 <am_hal_i2c_bit_bang_send+0x52e>
    5f52:	e7f3      	b.n	5f3c <am_hal_i2c_bit_bang_send+0x534>
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5f54:	4e6a      	ldr	r6, [pc, #424]	; (6100 <am_hal_i2c_bit_bang_send+0x6f8>)

        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
    5f56:	f04f 0880 	mov.w	r8, #128	; 0x80
    5f5a:	fa48 f105 	asr.w	r1, r8, r5
    5f5e:	ea11 0f0a 	tst.w	r1, sl
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5f62:	6920      	ldr	r0, [r4, #16]
        //
        // output the next data bit
        //
        if ( one_byte & (0x80 >> i) )
        {
            PULL_SDA_HI();
    5f64:	bf14      	ite	ne
    5f66:	69f1      	ldrne	r1, [r6, #28]
        }
        else
        {
            WRITE_SDA_LO();
    5f68:	6a31      	ldreq	r1, [r6, #32]
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5f6a:	69a2      	ldr	r2, [r4, #24]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5f6c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    for (i = 0; i < 8; i++)
    {
        //
        // Pull down on clock line
        //
        WRITE_SCL_LO();
    5f6e:	6002      	str	r2, [r0, #0]
        {
            PULL_SDA_HI();
        }
        else
        {
            WRITE_SDA_LO();
    5f70:	600b      	str	r3, [r1, #0]
        }

        //
        // Delay for 1/2 bit cell time to start the clock
        //
        WAIT_I2C_CLOCK_LOW_PERIOD();
    5f72:	2007      	movs	r0, #7
    5f74:	f7fc f894 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5f78:	68e0      	ldr	r0, [r4, #12]
    5f7a:	69a1      	ldr	r1, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f7c:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    5f7e:	6001      	str	r1, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f80:	6813      	ldr	r3, [r2, #0]
    5f82:	4219      	tst	r1, r3
    5f84:	bf08      	it	eq
    5f86:	f44f 77c8 	moveq.w	r7, #400	; 0x190
    5f8a:	d149      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5f8c:	2004      	movs	r0, #4
    5f8e:	f7fc f887 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f92:	6961      	ldr	r1, [r4, #20]
    5f94:	69a3      	ldr	r3, [r4, #24]
    5f96:	680a      	ldr	r2, [r1, #0]
    5f98:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5f9a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5f9e:	d13f      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fa0:	f7fc f87e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fa4:	6961      	ldr	r1, [r4, #20]
    5fa6:	69a3      	ldr	r3, [r4, #24]
    5fa8:	680a      	ldr	r2, [r1, #0]
    5faa:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fac:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fb0:	d136      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fb2:	f7fc f875 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fb6:	6961      	ldr	r1, [r4, #20]
    5fb8:	69a3      	ldr	r3, [r4, #24]
    5fba:	680a      	ldr	r2, [r1, #0]
    5fbc:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fbe:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fc2:	d12d      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fc4:	f7fc f86c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fc8:	6961      	ldr	r1, [r4, #20]
    5fca:	69a3      	ldr	r3, [r4, #24]
    5fcc:	680a      	ldr	r2, [r1, #0]
    5fce:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fd0:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fd4:	d124      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fd6:	f7fc f863 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fda:	6961      	ldr	r1, [r4, #20]
    5fdc:	69a3      	ldr	r3, [r4, #24]
    5fde:	680a      	ldr	r2, [r1, #0]
    5fe0:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fe2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fe6:	d11b      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5fe8:	f7fc f85a 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5fec:	6961      	ldr	r1, [r4, #20]
    5fee:	69a3      	ldr	r3, [r4, #24]
    5ff0:	680a      	ldr	r2, [r1, #0]
    5ff2:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ff4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ff8:	d112      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5ffa:	f7fc f851 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    5ffe:	6961      	ldr	r1, [r4, #20]
    6000:	69a3      	ldr	r3, [r4, #24]
    6002:	680a      	ldr	r2, [r1, #0]
    6004:	421a      	tst	r2, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6006:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    600a:	d109      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    600c:	f7fc f848 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6010:	6960      	ldr	r0, [r4, #20]
    6012:	69a1      	ldr	r1, [r4, #24]
    6014:	6803      	ldr	r3, [r0, #0]
    6016:	420b      	tst	r3, r1
    6018:	d102      	bne.n	6020 <am_hal_i2c_bit_bang_send+0x618>
    {
        if (--maxLoop == 0)
    601a:	3f08      	subs	r7, #8
    601c:	d1b6      	bne.n	5f8c <am_hal_i2c_bit_bang_send+0x584>
    601e:	e554      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    6020:	3501      	adds	r5, #1
            return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
        }
        //
        // Delay for 1/2 bit cell time while clock is high
        //
        WAIT_I2C_CLOCK_HI_PERIOD();
    6022:	2005      	movs	r0, #5
    6024:	f7fc f83c 	bl	20a0 <am_hal_flash_delay>
    bool data_naked = false;

    //
    // Loop through sending 8 bits
    //
    for (i = 0; i < 8; i++)
    6028:	2d08      	cmp	r5, #8
    602a:	d196      	bne.n	5f5a <am_hal_i2c_bit_bang_send+0x552>
    }

    //
    // Pull down on clock line
    //
    WRITE_SCL_LO();
    602c:	6926      	ldr	r6, [r4, #16]
    602e:	69a7      	ldr	r7, [r4, #24]
    6030:	6037      	str	r7, [r6, #0]

    //
    // Delay for 1/2 bit cell time to start the clock
    //
    WAIT_I2C_CLOCK_LOW_PERIOD();
    6032:	2007      	movs	r0, #7
    6034:	f7fc f834 	bl	20a0 <am_hal_flash_delay>
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    6038:	68e0      	ldr	r0, [r4, #12]
    603a:	69a1      	ldr	r1, [r4, #24]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    603c:	6962      	ldr	r2, [r4, #20]
i2c_pull_and_wait_scl_hi(void)
{
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    603e:	6001      	str	r1, [r0, #0]
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6040:	6813      	ldr	r3, [r2, #0]
    6042:	4219      	tst	r1, r3
    6044:	bf08      	it	eq
    6046:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    604a:	d14b      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    604c:	2004      	movs	r0, #4
    604e:	f7fc f827 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6052:	6966      	ldr	r6, [r4, #20]
    6054:	69a7      	ldr	r7, [r4, #24]
    6056:	6831      	ldr	r1, [r6, #0]
    6058:	4239      	tst	r1, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    605a:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    605e:	d141      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6060:	f7fc f81e 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6064:	6962      	ldr	r2, [r4, #20]
    6066:	69a3      	ldr	r3, [r4, #24]
    6068:	6816      	ldr	r6, [r2, #0]
    606a:	421e      	tst	r6, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    606c:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6070:	d138      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6072:	f7fc f815 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6076:	6967      	ldr	r7, [r4, #20]
    6078:	69a1      	ldr	r1, [r4, #24]
    607a:	683a      	ldr	r2, [r7, #0]
    607c:	420a      	tst	r2, r1
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    607e:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6082:	d12f      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6084:	f7fc f80c 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6088:	6966      	ldr	r6, [r4, #20]
    608a:	69a3      	ldr	r3, [r4, #24]
    608c:	6837      	ldr	r7, [r6, #0]
    608e:	421f      	tst	r7, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6090:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    6094:	d126      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    6096:	f7fc f803 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    609a:	6961      	ldr	r1, [r4, #20]
    609c:	69a6      	ldr	r6, [r4, #24]
    609e:	680a      	ldr	r2, [r1, #0]
    60a0:	4232      	tst	r2, r6
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60a2:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60a6:	d11d      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60a8:	f7fb fffa 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60ac:	6967      	ldr	r7, [r4, #20]
    60ae:	69a3      	ldr	r3, [r4, #24]
    60b0:	6839      	ldr	r1, [r7, #0]
    60b2:	4219      	tst	r1, r3
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60b4:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60b8:	d114      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60ba:	f7fb fff1 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60be:	6966      	ldr	r6, [r4, #20]
    60c0:	69a7      	ldr	r7, [r4, #24]
    60c2:	6832      	ldr	r2, [r6, #0]
    60c4:	423a      	tst	r2, r7
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60c6:	f04f 0004 	mov.w	r0, #4
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60ca:	d10b      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
        {
            // timeout!
            return true;
        }
        WAIT_FOR_QUARTER_I2C_CLOCK();
    60cc:	f7fb ffe8 	bl	20a0 <am_hal_flash_delay>
    // Maximum time to wait for clock stretching
    uint32_t maxLoop = 4*I2C_BB_MAX_CLOCK_STRETCH_WAIT + 1;
    // Pull SCL High
    PULL_SCL_HI();
    // Poll for SCL to check for clock stretching
    while (!GET_SCL())
    60d0:	6960      	ldr	r0, [r4, #20]
    60d2:	69a3      	ldr	r3, [r4, #24]
    60d4:	6801      	ldr	r1, [r0, #0]
    60d6:	4219      	tst	r1, r3
    60d8:	d104      	bne.n	60e4 <am_hal_i2c_bit_bang_send+0x6dc>
    {
        if (--maxLoop == 0)
    60da:	3d08      	subs	r5, #8
    60dc:	d1b6      	bne.n	604c <am_hal_i2c_bit_bang_send+0x644>
    60de:	e4f4      	b.n	5aca <am_hal_i2c_bit_bang_send+0xc2>
        {
            if (status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
            {
                if (ui32I != (number_of_bytes-1))
                {
                    data_naked = true;
    60e0:	2701      	movs	r7, #1
    60e2:	e6b6      	b.n	5e52 <am_hal_i2c_bit_bang_send+0x44a>
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    60e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    60e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    60e8:	682d      	ldr	r5, [r5, #0]
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    60ea:	2005      	movs	r0, #5
        return AM_HAL_I2C_BIT_BANG_CLOCK_TIMEOUT;
    }
    //
    // Grab the state of the ACK bit and return it
    //
    data_naked = GET_SDA();
    60ec:	4035      	ands	r5, r6
    //
    // Delay for 1/2 bit cell time to complete the high period
    //
    WAIT_I2C_CLOCK_HI_PERIOD();
    60ee:	f7fb ffd7 	bl	20a0 <am_hal_flash_delay>
    if ( data_naked )
    60f2:	2d00      	cmp	r5, #0
    60f4:	f47f af28 	bne.w	5f48 <am_hal_i2c_bit_bang_send+0x540>
    60f8:	e5c8      	b.n	5c8c <am_hal_i2c_bit_bang_send+0x284>
    }

    //
    // message successfully sent
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    60fa:	4638      	mov	r0, r7
    60fc:	e4e6      	b.n	5acc <am_hal_i2c_bit_bang_send+0xc4>
    60fe:	bf00      	nop
    6100:	10001198 	.word	0x10001198
    6104:	6c696146 	.word	0x6c696146
    6108:	74206465 	.word	0x74206465
    610c:	6f63206f 	.word	0x6f63206f
    6110:	7261706d 	.word	0x7261706d
    6114:	75622065 	.word	0x75622065
    6118:	72656666 	.word	0x72656666
    611c:	74612073 	.word	0x74612073
    6120:	646e6920 	.word	0x646e6920
    6124:	25207865 	.word	0x25207865
    6128:	000a2064 	.word	0x000a2064
    612c:	0000002e 	.word	0x0000002e
    6130:	20534f49 	.word	0x20534f49
    6134:	74736554 	.word	0x74736554
    6138:	736f4820 	.word	0x736f4820
    613c:	57203a74 	.word	0x57203a74
    6140:	69746961 	.word	0x69746961
    6144:	6620676e 	.word	0x6620676e
    6148:	6120726f 	.word	0x6120726f
    614c:	656c2074 	.word	0x656c2074
    6150:	20747361 	.word	0x20747361
    6154:	62206425 	.word	0x62206425
    6158:	73657479 	.word	0x73657479
    615c:	6f726620 	.word	0x6f726620
    6160:	6874206d 	.word	0x6874206d
    6164:	6c732065 	.word	0x6c732065
    6168:	2e657661 	.word	0x2e657661
    616c:	00000000 	.word	0x00000000
    6170:	7461440a 	.word	0x7461440a
    6174:	65562061 	.word	0x65562061
    6178:	69666972 	.word	0x69666972
    617c:	69746163 	.word	0x69746163
    6180:	66206e6f 	.word	0x66206e6f
    6184:	656c6961 	.word	0x656c6961
    6188:	63412064 	.word	0x63412064
    618c:	3a6d7563 	.word	0x3a6d7563
    6190:	20756c25 	.word	0x20756c25
    6194:	253d7872 	.word	0x253d7872
    6198:	00000a64 	.word	0x00000a64
    619c:	7365540a 	.word	0x7365540a
    61a0:	6f442074 	.word	0x6f442074
    61a4:	2d20656e 	.word	0x2d20656e
    61a8:	746f5420 	.word	0x746f5420
    61ac:	52206c61 	.word	0x52206c61
    61b0:	69656365 	.word	0x69656365
    61b4:	20646576 	.word	0x20646576
    61b8:	253d203d 	.word	0x253d203d
    61bc:	00000a64 	.word	0x00000a64
    61c0:	0a0a0a0a 	.word	0x0a0a0a0a
    61c4:	0a0a0a0a 	.word	0x0a0a0a0a
    61c8:	0a0a0a0a 	.word	0x0a0a0a0a
    61cc:	0a0a0a0a 	.word	0x0a0a0a0a
    61d0:	00000a0a 	.word	0x00000a0a

000061d4 <apollo2_iomce0>:
    61d4:	0000000b 00000008 0000000c 00000008     ................
    61e4:	00000003 00000028 0000001a 00000038     ....(.......8...
    61f4:	0000001d 00000030 00000018 00000020     ....0....... ...

00006204 <g_SPIpins>:
    6204:	00000006 0000000a 00000009 0000000a     ................
    6214:	00000019 0000002a 0000002b 0000002a     ....*...+...*...
    6224:	00000028 0000002a 00000031 0000002a     (...*...1...*...

00006234 <am_hal_cachectrl_defaults>:
    6234:	50000001 00010300 00010101 685f6d61     ...P........am_h
    6244:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    6254:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    6264:	63206469 6b636f6c 74657320 676e6974     id clock setting
    6274:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    6284:	6b6c635f 2e6e6567 00000063 61766e49     _clkgen.c...Inva
    6294:	2064696c 4f495047 6d756e20 2e726562     lid GPIO number.
    62a4:	00000000 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    62b4:	6970675f 00632e6f 4f495047 6d756e20     _gpio.c.GPIO num
    62c4:	20726562 2074756f 7220666f 65676e61     ber out of range
    62d4:	0000002e 20656854 6f666966 756f6320     ....The fifo cou
    62e4:	276e646c 69662074 68742074 65722065     ldn't fit the re
    62f4:	73657571 20646574 626d756e 6f207265     quested number o
    6304:	79622066 00736574 2e5c2e2e 6d615c2e     f bytes...\..\am
    6314:	6c61685f 6d6f695f 0000632e 69797254     _hal_iom.c..Tryi
    6324:	7420676e 6e65206f 656c6261 206e6120     ng to enable an 
    6334:	204d4f49 75646f6d 7420656c 20746168     IOM module that 
    6344:	73656f64 2074276e 73697865 00002e74     doesn't exist...
    6354:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    6364:	6e612065 4d4f4920 646f6d20 20656c75     e an IOM module 
    6374:	74616874 656f6420 74276e73 69786520     that doesn't exi
    6384:	002e7473 20495053 6e617274 72656673     st..SPI transfer
    6394:	6f6f7420 67696220 0000002e 61766e49      too big....Inva
    63a4:	2064696c 46206948 75716572 79636e65     lid Hi Frequency
    63b4:	726f6620 4d4f4920 0000002e 69797254      for IOM....Tryi
    63c4:	7420676e 6f64206f 30206120 74796220     ng to do a 0 byt
    63d4:	72742065 61736e61 6f697463 0000006e     e transaction...
    63e4:	20656854 6f666966 656f6420 74276e73     The fifo doesn't
    63f4:	6e6f6320 6e696174 65687420 71657220      contain the req
    6404:	74736575 6e206465 65626d75 666f2072     uested number of
    6414:	74796220 002e7365                        bytes..

0000641c <i2c_bb_errmap>:
    641c:	01060600 00000001 6e6e6143 6520746f     ........Cannot e
    642c:	6c62616e 6f6d2065 74206572 206e6168     nable more than 
    643c:	20656e6f 69726570 72656870 61206c61     one peripheral a
    644c:	20612074 656d6974 0000002e 2e5c2e2e     t a time......\.
    645c:	6d615c2e 6c61685f 7277705f 6c727463     .\am_hal_pwrctrl
    646c:	0000632e                                .c..
