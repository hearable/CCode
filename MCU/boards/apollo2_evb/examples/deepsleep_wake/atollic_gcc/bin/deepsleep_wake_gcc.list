
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\deepsleep_wake\atollic_gcc\bin\deepsleep_wake_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002528  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000008c  10001000  00002528  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  1000108c  000025b4  0002108c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002108c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00007579  00000000  00000000  000210c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d55  00000000  00000000  0002863c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000910  00000000  00000000  0002a391  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000f88  00000000  00000000  0002aca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045d4  00000000  00000000  0002bc29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003140  00000000  00000000  000301fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0003333d  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001a9c  00000000  00000000  000333bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000433c  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 6d 09 00 00 d5 09 00 00 15 0a 00 00     ....m...........
      10:	15 0a 00 00 15 0a 00 00 15 0a 00 00 00 00 00 00     ................
	...
      2c:	dd 09 00 00 dd 09 00 00 00 00 00 00 dd 09 00 00     ................
      3c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 ed 07 00 00     ................
      4c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      5c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      6c:	dd 09 00 00 c5 07 00 00 dd 09 00 00 dd 09 00 00     ................
      7c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      8c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      9c:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      ac:	dd 09 00 00 dd 09 00 00 dd 09 00 00 dd 09 00 00     ................
      bc:	dd 09 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     44e:	2300      	movs	r3, #0
     450:	60fb      	str	r3, [r7, #12]
     452:	e009      	b.n	468 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
     454:	68fb      	ldr	r3, [r7, #12]
     456:	00db      	lsls	r3, r3, #3
     458:	687a      	ldr	r2, [r7, #4]
     45a:	4413      	add	r3, r2
     45c:	4618      	mov	r0, r3
     45e:	f7ff fe7f 	bl	160 <am_devices_led_init>
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     462:	68fb      	ldr	r3, [r7, #12]
     464:	3301      	adds	r3, #1
     466:	60fb      	str	r3, [r7, #12]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d3f1      	bcc.n	454 <am_devices_led_array_init+0x10>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     470:	bf00      	nop
     472:	3710      	adds	r7, #16
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}

00000478 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     482:	683b      	ldr	r3, [r7, #0]
     484:	00db      	lsls	r3, r3, #3
     486:	687a      	ldr	r2, [r7, #4]
     488:	4413      	add	r3, r2
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	f003 0302 	and.w	r3, r3, #2
     490:	2b00      	cmp	r3, #0
     492:	d036      	beq.n	502 <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     494:	683b      	ldr	r3, [r7, #0]
     496:	00db      	lsls	r3, r3, #3
     498:	687a      	ldr	r2, [r7, #4]
     49a:	4413      	add	r3, r2
     49c:	685b      	ldr	r3, [r3, #4]
     49e:	f003 0301 	and.w	r3, r3, #1
     4a2:	2b00      	cmp	r3, #0
     4a4:	d116      	bne.n	4d4 <am_devices_led_off+0x5c>
     4a6:	683b      	ldr	r3, [r7, #0]
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	687a      	ldr	r2, [r7, #4]
     4ac:	4413      	add	r3, r2
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	08db      	lsrs	r3, r3, #3
     4b2:	f003 0204 	and.w	r2, r3, #4
     4b6:	4b21      	ldr	r3, [pc, #132]	; (53c <am_devices_led_off+0xc4>)
     4b8:	4413      	add	r3, r2
     4ba:	4619      	mov	r1, r3
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	f003 031f 	and.w	r3, r3, #31
     4ca:	2201      	movs	r2, #1
     4cc:	fa02 f303 	lsl.w	r3, r2, r3
     4d0:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     4d2:	e02c      	b.n	52e <am_devices_led_off+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	00db      	lsls	r3, r3, #3
     4d8:	687a      	ldr	r2, [r7, #4]
     4da:	4413      	add	r3, r2
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	08db      	lsrs	r3, r3, #3
     4e0:	f003 0204 	and.w	r2, r3, #4
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <am_devices_led_off+0xc8>)
     4e6:	4413      	add	r3, r2
     4e8:	4619      	mov	r1, r3
     4ea:	683b      	ldr	r3, [r7, #0]
     4ec:	00db      	lsls	r3, r3, #3
     4ee:	687a      	ldr	r2, [r7, #4]
     4f0:	4413      	add	r3, r2
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	f003 031f 	and.w	r3, r3, #31
     4f8:	2201      	movs	r2, #1
     4fa:	fa02 f303 	lsl.w	r3, r2, r3
     4fe:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     500:	e015      	b.n	52e <am_devices_led_off+0xb6>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     502:	683b      	ldr	r3, [r7, #0]
     504:	00db      	lsls	r3, r3, #3
     506:	687a      	ldr	r2, [r7, #4]
     508:	4413      	add	r3, r2
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	08db      	lsrs	r3, r3, #3
     50e:	f003 0204 	and.w	r2, r3, #4
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <am_devices_led_off+0xcc>)
     514:	4413      	add	r3, r2
     516:	4619      	mov	r1, r3
     518:	683b      	ldr	r3, [r7, #0]
     51a:	00db      	lsls	r3, r3, #3
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	4413      	add	r3, r2
     520:	681b      	ldr	r3, [r3, #0]
     522:	f003 031f 	and.w	r3, r3, #31
     526:	2201      	movs	r2, #1
     528:	fa02 f303 	lsl.w	r3, r2, r3
     52c:	600b      	str	r3, [r1, #0]
    }
}
     52e:	bf00      	nop
     530:	370c      	adds	r7, #12
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr
     53a:	bf00      	nop
     53c:	40010090 	.word	0x40010090
     540:	40010098 	.word	0x40010098
     544:	400100b4 	.word	0x400100b4

00000548 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     548:	b580      	push	{r7, lr}
     54a:	b084      	sub	sp, #16
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
     550:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	685b      	ldr	r3, [r3, #4]
     55c:	f003 0302 	and.w	r3, r3, #2
     560:	2b00      	cmp	r3, #0
     562:	d029      	beq.n	5b8 <am_devices_led_toggle+0x70>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     564:	f3ef 8310 	mrs	r3, PRIMASK
     568:	60fb      	str	r3, [r7, #12]
     56a:	b672      	cpsid	i
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	00db      	lsls	r3, r3, #3
     570:	687a      	ldr	r2, [r7, #4]
     572:	4413      	add	r3, r2
     574:	681b      	ldr	r3, [r3, #0]
     576:	08db      	lsrs	r3, r3, #3
     578:	f003 0204 	and.w	r2, r3, #4
     57c:	4b2c      	ldr	r3, [pc, #176]	; (630 <am_devices_led_toggle+0xe8>)
     57e:	4413      	add	r3, r2
     580:	4618      	mov	r0, r3
     582:	683b      	ldr	r3, [r7, #0]
     584:	00db      	lsls	r3, r3, #3
     586:	687a      	ldr	r2, [r7, #4]
     588:	4413      	add	r3, r2
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	08db      	lsrs	r3, r3, #3
     58e:	f003 0204 	and.w	r2, r3, #4
     592:	4b27      	ldr	r3, [pc, #156]	; (630 <am_devices_led_toggle+0xe8>)
     594:	4413      	add	r3, r2
     596:	681a      	ldr	r2, [r3, #0]
     598:	683b      	ldr	r3, [r7, #0]
     59a:	00db      	lsls	r3, r3, #3
     59c:	6879      	ldr	r1, [r7, #4]
     59e:	440b      	add	r3, r1
     5a0:	681b      	ldr	r3, [r3, #0]
     5a2:	f003 031f 	and.w	r3, r3, #31
     5a6:	2101      	movs	r1, #1
     5a8:	fa01 f303 	lsl.w	r3, r1, r3
     5ac:	4053      	eors	r3, r2
     5ae:	6003      	str	r3, [r0, #0]
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	f383 8810 	msr	PRIMASK, r3
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     5b6:	e037      	b.n	628 <am_devices_led_toggle+0xe0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	00db      	lsls	r3, r3, #3
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	4413      	add	r3, r2
     5c0:	681b      	ldr	r3, [r3, #0]
     5c2:	4618      	mov	r0, r3
     5c4:	f001 fa52 	bl	1a6c <am_hal_gpio_out_enable_bit_get>
     5c8:	4603      	mov	r3, r0
     5ca:	2b00      	cmp	r3, #0
     5cc:	d016      	beq.n	5fc <am_devices_led_toggle+0xb4>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     5ce:	683b      	ldr	r3, [r7, #0]
     5d0:	00db      	lsls	r3, r3, #3
     5d2:	687a      	ldr	r2, [r7, #4]
     5d4:	4413      	add	r3, r2
     5d6:	681b      	ldr	r3, [r3, #0]
     5d8:	08db      	lsrs	r3, r3, #3
     5da:	f003 0204 	and.w	r2, r3, #4
     5de:	4b15      	ldr	r3, [pc, #84]	; (634 <am_devices_led_toggle+0xec>)
     5e0:	4413      	add	r3, r2
     5e2:	4619      	mov	r1, r3
     5e4:	683b      	ldr	r3, [r7, #0]
     5e6:	00db      	lsls	r3, r3, #3
     5e8:	687a      	ldr	r2, [r7, #4]
     5ea:	4413      	add	r3, r2
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f003 031f 	and.w	r3, r3, #31
     5f2:	2201      	movs	r2, #1
     5f4:	fa02 f303 	lsl.w	r3, r2, r3
     5f8:	600b      	str	r3, [r1, #0]
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
     5fa:	e015      	b.n	628 <am_devices_led_toggle+0xe0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     5fc:	683b      	ldr	r3, [r7, #0]
     5fe:	00db      	lsls	r3, r3, #3
     600:	687a      	ldr	r2, [r7, #4]
     602:	4413      	add	r3, r2
     604:	681b      	ldr	r3, [r3, #0]
     606:	08db      	lsrs	r3, r3, #3
     608:	f003 0204 	and.w	r2, r3, #4
     60c:	4b0a      	ldr	r3, [pc, #40]	; (638 <am_devices_led_toggle+0xf0>)
     60e:	4413      	add	r3, r2
     610:	4619      	mov	r1, r3
     612:	683b      	ldr	r3, [r7, #0]
     614:	00db      	lsls	r3, r3, #3
     616:	687a      	ldr	r2, [r7, #4]
     618:	4413      	add	r3, r2
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	f003 031f 	and.w	r3, r3, #31
     620:	2201      	movs	r2, #1
     622:	fa02 f303 	lsl.w	r3, r2, r3
     626:	600b      	str	r3, [r1, #0]
        }
    }
}
     628:	bf00      	nop
     62a:	3710      	adds	r7, #16
     62c:	46bd      	mov	sp, r7
     62e:	bd80      	pop	{r7, pc}
     630:	40010088 	.word	0x40010088
     634:	400100b4 	.word	0x400100b4
     638:	400100a8 	.word	0x400100a8

0000063c <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     63c:	b580      	push	{r7, lr}
     63e:	b084      	sub	sp, #16
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     644:	f3ef 8310 	mrs	r3, PRIMASK
     648:	60fb      	str	r3, [r7, #12]
     64a:	b672      	cpsid	i
     64c:	4b29      	ldr	r3, [pc, #164]	; (6f4 <uart_init+0xb8>)
     64e:	2273      	movs	r2, #115	; 0x73
     650:	601a      	str	r2, [r3, #0]
     652:	4a29      	ldr	r2, [pc, #164]	; (6f8 <uart_init+0xbc>)
     654:	4b28      	ldr	r3, [pc, #160]	; (6f8 <uart_init+0xbc>)
     656:	681b      	ldr	r3, [r3, #0]
     658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     65c:	6013      	str	r3, [r2, #0]
     65e:	4a27      	ldr	r2, [pc, #156]	; (6fc <uart_init+0xc0>)
     660:	4b26      	ldr	r3, [pc, #152]	; (6fc <uart_init+0xc0>)
     662:	681b      	ldr	r3, [r3, #0]
     664:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     668:	6013      	str	r3, [r2, #0]
     66a:	4a25      	ldr	r2, [pc, #148]	; (700 <uart_init+0xc4>)
     66c:	4b24      	ldr	r3, [pc, #144]	; (700 <uart_init+0xc4>)
     66e:	681b      	ldr	r3, [r3, #0]
     670:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     674:	6013      	str	r3, [r2, #0]
     676:	4b1f      	ldr	r3, [pc, #124]	; (6f4 <uart_init+0xb8>)
     678:	2200      	movs	r2, #0
     67a:	601a      	str	r2, [r3, #0]
     67c:	68fb      	ldr	r3, [r7, #12]
     67e:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_enable(COM_UART_RX);
     682:	f3ef 8310 	mrs	r3, PRIMASK
     686:	60bb      	str	r3, [r7, #8]
     688:	b672      	cpsid	i
     68a:	4b1a      	ldr	r3, [pc, #104]	; (6f4 <uart_init+0xb8>)
     68c:	2273      	movs	r2, #115	; 0x73
     68e:	601a      	str	r2, [r3, #0]
     690:	4a19      	ldr	r2, [pc, #100]	; (6f8 <uart_init+0xbc>)
     692:	4b19      	ldr	r3, [pc, #100]	; (6f8 <uart_init+0xbc>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     69a:	6013      	str	r3, [r2, #0]
     69c:	4a17      	ldr	r2, [pc, #92]	; (6fc <uart_init+0xc0>)
     69e:	4b17      	ldr	r3, [pc, #92]	; (6fc <uart_init+0xc0>)
     6a0:	681b      	ldr	r3, [r3, #0]
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     6aa:	6013      	str	r3, [r2, #0]
     6ac:	4a14      	ldr	r2, [pc, #80]	; (700 <uart_init+0xc4>)
     6ae:	4b14      	ldr	r3, [pc, #80]	; (700 <uart_init+0xc4>)
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6b6:	6013      	str	r3, [r2, #0]
     6b8:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <uart_init+0xb8>)
     6ba:	2200      	movs	r2, #0
     6bc:	601a      	str	r2, [r3, #0]
     6be:	68bb      	ldr	r3, [r7, #8]
     6c0:	f383 8810 	msr	PRIMASK, r3

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     6c4:	6878      	ldr	r0, [r7, #4]
     6c6:	f001 fd91 	bl	21ec <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     6ca:	6878      	ldr	r0, [r7, #4]
     6cc:	f001 fdb6 	bl	223c <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     6d0:	6878      	ldr	r0, [r7, #4]
     6d2:	f001 fd77 	bl	21c4 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     6d6:	490b      	ldr	r1, [pc, #44]	; (704 <uart_init+0xc8>)
     6d8:	6878      	ldr	r0, [r7, #4]
     6da:	f001 fd29 	bl	2130 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     6de:	2112      	movs	r1, #18
     6e0:	6878      	ldr	r0, [r7, #4]
     6e2:	f001 fdc9 	bl	2278 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     6e6:	6878      	ldr	r0, [r7, #4]
     6e8:	f001 fd58 	bl	219c <am_hal_uart_enable>
}
     6ec:	bf00      	nop
     6ee:	3710      	adds	r7, #16
     6f0:	46bd      	mov	sp, r7
     6f2:	bd80      	pop	{r7, pc}
     6f4:	40010060 	.word	0x40010060
     6f8:	40010048 	.word	0x40010048
     6fc:	40010014 	.word	0x40010014
     700:	400100f4 	.word	0x400100f4
     704:	10001000 	.word	0x10001000

00000708 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     708:	b580      	push	{r7, lr}
     70a:	b084      	sub	sp, #16
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     710:	200a      	movs	r0, #10
     712:	f000 f967 	bl	9e4 <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     716:	6878      	ldr	r0, [r7, #4]
     718:	f001 fd54 	bl	21c4 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     71c:	6878      	ldr	r0, [r7, #4]
     71e:	f001 fd79 	bl	2214 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     722:	6878      	ldr	r0, [r7, #4]
     724:	f001 fd9c 	bl	2260 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     728:	f3ef 8310 	mrs	r3, PRIMASK
     72c:	60fb      	str	r3, [r7, #12]
     72e:	b672      	cpsid	i
     730:	4b20      	ldr	r3, [pc, #128]	; (7b4 <uart_disable+0xac>)
     732:	2273      	movs	r2, #115	; 0x73
     734:	601a      	str	r2, [r3, #0]
     736:	4a20      	ldr	r2, [pc, #128]	; (7b8 <uart_disable+0xb0>)
     738:	4b1f      	ldr	r3, [pc, #124]	; (7b8 <uart_disable+0xb0>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     740:	6013      	str	r3, [r2, #0]
     742:	4a1e      	ldr	r2, [pc, #120]	; (7bc <uart_disable+0xb4>)
     744:	4b1d      	ldr	r3, [pc, #116]	; (7bc <uart_disable+0xb4>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     74c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     750:	6013      	str	r3, [r2, #0]
     752:	4a1b      	ldr	r2, [pc, #108]	; (7c0 <uart_disable+0xb8>)
     754:	4b1a      	ldr	r3, [pc, #104]	; (7c0 <uart_disable+0xb8>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     75c:	6013      	str	r3, [r2, #0]
     75e:	4b15      	ldr	r3, [pc, #84]	; (7b4 <uart_disable+0xac>)
     760:	2200      	movs	r2, #0
     762:	601a      	str	r2, [r3, #0]
     764:	68fb      	ldr	r3, [r7, #12]
     766:	f383 8810 	msr	PRIMASK, r3
    am_bsp_pin_disable(COM_UART_RX);
     76a:	f3ef 8310 	mrs	r3, PRIMASK
     76e:	60bb      	str	r3, [r7, #8]
     770:	b672      	cpsid	i
     772:	4b10      	ldr	r3, [pc, #64]	; (7b4 <uart_disable+0xac>)
     774:	2273      	movs	r2, #115	; 0x73
     776:	601a      	str	r2, [r3, #0]
     778:	4a0f      	ldr	r2, [pc, #60]	; (7b8 <uart_disable+0xb0>)
     77a:	4b0f      	ldr	r3, [pc, #60]	; (7b8 <uart_disable+0xb0>)
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     782:	6013      	str	r3, [r2, #0]
     784:	4a0d      	ldr	r2, [pc, #52]	; (7bc <uart_disable+0xb4>)
     786:	4b0d      	ldr	r3, [pc, #52]	; (7bc <uart_disable+0xb4>)
     788:	681b      	ldr	r3, [r3, #0]
     78a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     78e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     792:	6013      	str	r3, [r2, #0]
     794:	4a0a      	ldr	r2, [pc, #40]	; (7c0 <uart_disable+0xb8>)
     796:	4b0a      	ldr	r3, [pc, #40]	; (7c0 <uart_disable+0xb8>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     79e:	6013      	str	r3, [r2, #0]
     7a0:	4b04      	ldr	r3, [pc, #16]	; (7b4 <uart_disable+0xac>)
     7a2:	2200      	movs	r2, #0
     7a4:	601a      	str	r2, [r3, #0]
     7a6:	68bb      	ldr	r3, [r7, #8]
     7a8:	f383 8810 	msr	PRIMASK, r3
}
     7ac:	bf00      	nop
     7ae:	3710      	adds	r7, #16
     7b0:	46bd      	mov	sp, r7
     7b2:	bd80      	pop	{r7, pc}
     7b4:	40010060 	.word	0x40010060
     7b8:	40010048 	.word	0x40010048
     7bc:	40010014 	.word	0x40010014
     7c0:	400100f4 	.word	0x400100f4

000007c4 <am_gpio_isr>:
// GPIO ISR
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	af00      	add	r7, sp, #0
    //
    // Delay for debounce.
    //
    am_util_delay_ms(200);
     7c8:	20c8      	movs	r0, #200	; 0xc8
     7ca:	f000 f90b 	bl	9e4 <am_util_delay_ms>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     7ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     7d2:	f04f 0100 	mov.w	r1, #0
     7d6:	f001 f967 	bl	1aa8 <am_hal_gpio_int_clear>

    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     7da:	2100      	movs	r1, #0
     7dc:	4802      	ldr	r0, [pc, #8]	; (7e8 <am_gpio_isr+0x24>)
     7de:	f7ff feb3 	bl	548 <am_devices_led_toggle>
}
     7e2:	bf00      	nop
     7e4:	bd80      	pop	{r7, pc}
     7e6:	bf00      	nop
     7e8:	10001014 	.word	0x10001014

000007ec <am_clkgen_isr>:
// RTC ISR
//
//*****************************************************************************
void
am_clkgen_isr(void)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	af00      	add	r7, sp, #0
    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     7f0:	2008      	movs	r0, #8
     7f2:	f001 fbd5 	bl	1fa0 <am_hal_rtc_int_clear>

    //
    // Toggle LED 1.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 1);
     7f6:	2101      	movs	r1, #1
     7f8:	4802      	ldr	r0, [pc, #8]	; (804 <am_clkgen_isr+0x18>)
     7fa:	f7ff fea5 	bl	548 <am_devices_led_toggle>
}
     7fe:	bf00      	nop
     800:	bd80      	pop	{r7, pc}
     802:	bf00      	nop
     804:	10001014 	.word	0x10001014

00000808 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     808:	b580      	push	{r7, lr}
     80a:	b082      	sub	sp, #8
     80c:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     80e:	2000      	movs	r0, #0
     810:	f001 f8c6 	bl	19a0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     814:	484a      	ldr	r0, [pc, #296]	; (940 <main+0x138>)
     816:	f001 f82d 	bl	1874 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     81a:	f001 f815 	bl	1848 <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     81e:	2001      	movs	r0, #1
     820:	f001 f8e6 	bl	19f0 <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     824:	2000      	movs	r0, #0
     826:	f001 fb95 	bl	1f54 <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     82a:	f001 fba1 	bl	1f70 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     82e:	4845      	ldr	r0, [pc, #276]	; (944 <main+0x13c>)
     830:	f000 f970 	bl	b14 <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(AM_BSP_UART_PRINT_INST);
     834:	2000      	movs	r0, #0
     836:	f7ff ff01 	bl	63c <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     83a:	f000 fffb 	bl	1834 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Wake Example\n");
     83e:	4842      	ldr	r0, [pc, #264]	; (948 <main+0x140>)
     840:	f000 ffda 	bl	17f8 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(AM_BSP_UART_PRINT_INST);
     844:	2000      	movs	r0, #0
     846:	f7ff ff5f 	bl	708 <uart_disable>
#ifdef AM_PART_APOLLO2

    //
    // Turn OFF Flash1
    //
    AM_BFW(PWRCTRL, MEMEN, FLASH1, 0);
     84a:	4a40      	ldr	r2, [pc, #256]	; (94c <main+0x144>)
     84c:	4b3f      	ldr	r3, [pc, #252]	; (94c <main+0x144>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     854:	6013      	str	r3, [r2, #0]
    while (AM_BFR(PWRCTRL, PWRONSTATUS, PD_FLAM1) != 0) {}
     856:	bf00      	nop
     858:	4b3d      	ldr	r3, [pc, #244]	; (950 <main+0x148>)
     85a:	681b      	ldr	r3, [r3, #0]
     85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     860:	099b      	lsrs	r3, r3, #6
     862:	2b00      	cmp	r3, #0
     864:	d1f8      	bne.n	858 <main+0x50>

    //
    // Power down SRAM
    //
    AM_BFWe(PWRCTRL, SRAMPWDINSLEEP, SRAMSLEEPPOWERDOWN, ALLBUTLOWER8K);
     866:	4a3b      	ldr	r2, [pc, #236]	; (954 <main+0x14c>)
     868:	4b3a      	ldr	r3, [pc, #232]	; (954 <main+0x14c>)
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     870:	f023 0307 	bic.w	r3, r3, #7
     874:	f443 63ff 	orr.w	r3, r3, #2040	; 0x7f8
     878:	f043 0306 	orr.w	r3, r3, #6
     87c:	6013      	str	r3, [r2, #0]
#endif // AM_PART_APOLLO2

    //
    // Configure the LEDs GPIO and button pins.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     87e:	2105      	movs	r1, #5
     880:	4835      	ldr	r0, [pc, #212]	; (958 <main+0x150>)
     882:	f7ff fddf 	bl	444 <am_devices_led_array_init>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
     886:	f3ef 8310 	mrs	r3, PRIMASK
     88a:	607b      	str	r3, [r7, #4]
     88c:	b672      	cpsid	i
     88e:	4b33      	ldr	r3, [pc, #204]	; (95c <main+0x154>)
     890:	2273      	movs	r2, #115	; 0x73
     892:	601a      	str	r2, [r3, #0]
     894:	4a32      	ldr	r2, [pc, #200]	; (960 <main+0x158>)
     896:	4b32      	ldr	r3, [pc, #200]	; (960 <main+0x158>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	f023 0307 	bic.w	r3, r3, #7
     89e:	6013      	str	r3, [r2, #0]
     8a0:	4a30      	ldr	r2, [pc, #192]	; (964 <main+0x15c>)
     8a2:	4b30      	ldr	r3, [pc, #192]	; (964 <main+0x15c>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     8aa:	f043 031a 	orr.w	r3, r3, #26
     8ae:	6013      	str	r3, [r2, #0]
     8b0:	4a2d      	ldr	r2, [pc, #180]	; (968 <main+0x160>)
     8b2:	4b2d      	ldr	r3, [pc, #180]	; (968 <main+0x160>)
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     8ba:	6013      	str	r3, [r2, #0]
     8bc:	4b27      	ldr	r3, [pc, #156]	; (95c <main+0x154>)
     8be:	2200      	movs	r2, #0
     8c0:	601a      	str	r2, [r3, #0]
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	f383 8810 	msr	PRIMASK, r3

    //
    // Turn the LEDs off.
    //
    am_devices_led_off(am_bsp_psLEDs, 0);
     8c8:	2100      	movs	r1, #0
     8ca:	4823      	ldr	r0, [pc, #140]	; (958 <main+0x150>)
     8cc:	f7ff fdd4 	bl	478 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
     8d0:	2101      	movs	r1, #1
     8d2:	4821      	ldr	r0, [pc, #132]	; (958 <main+0x150>)
     8d4:	f7ff fdd0 	bl	478 <am_devices_led_off>

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
     8d8:	f3ef 8310 	mrs	r3, PRIMASK
     8dc:	603b      	str	r3, [r7, #0]
     8de:	b672      	cpsid	i
     8e0:	4b1e      	ldr	r3, [pc, #120]	; (95c <main+0x154>)
     8e2:	2273      	movs	r2, #115	; 0x73
     8e4:	601a      	str	r2, [r3, #0]
     8e6:	4a1e      	ldr	r2, [pc, #120]	; (960 <main+0x158>)
     8e8:	4b1d      	ldr	r3, [pc, #116]	; (960 <main+0x158>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	f023 0308 	bic.w	r3, r3, #8
     8f0:	6013      	str	r3, [r2, #0]
     8f2:	4b1a      	ldr	r3, [pc, #104]	; (95c <main+0x154>)
     8f4:	2200      	movs	r2, #0
     8f6:	601a      	str	r2, [r3, #0]
     8f8:	683b      	ldr	r3, [r7, #0]
     8fa:	f383 8810 	msr	PRIMASK, r3

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     8fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     902:	f04f 0100 	mov.w	r1, #0
     906:	f001 f8cf 	bl	1aa8 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     90a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     90e:	f04f 0100 	mov.w	r1, #0
     912:	f001 f8b9 	bl	1a88 <am_hal_gpio_int_enable>

    //
    // Set the alarm repeat interval to be every second.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
     916:	2007      	movs	r0, #7
     918:	f001 fb48 	bl	1fac <am_hal_rtc_alarm_interval_set>

    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     91c:	2008      	movs	r0, #8
     91e:	f001 fb3f 	bl	1fa0 <am_hal_rtc_int_clear>

    //
    // Enable the RTC alarm interrupt.
    //
    am_hal_rtc_int_enable(AM_HAL_RTC_INT_ALM);
     922:	2008      	movs	r0, #8
     924:	f001 fb34 	bl	1f90 <am_hal_rtc_int_enable>

    //
    // Enable GPIO interrupts to the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     928:	201c      	movs	r0, #28
     92a:	f001 f8cf 	bl	1acc <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CLKGEN);
     92e:	2012      	movs	r0, #18
     930:	f001 f8cc 	bl	1acc <am_hal_interrupt_enable>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
     934:	f001 f8f2 	bl	1b1c <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     938:	2001      	movs	r0, #1
     93a:	f001 fb5f 	bl	1ffc <am_hal_sysctrl_sleep>
    }
     93e:	e7fb      	b.n	938 <main+0x130>
     940:	000023d0 	.word	0x000023d0
     944:	0000186d 	.word	0x0000186d
     948:	000023a4 	.word	0x000023a4
     94c:	40021010 	.word	0x40021010
     950:	40021014 	.word	0x40021014
     954:	4002100c 	.word	0x4002100c
     958:	10001014 	.word	0x10001014
     95c:	40010060 	.word	0x40010060
     960:	40010048 	.word	0x40010048
     964:	40010010 	.word	0x40010010
     968:	400100f0 	.word	0x400100f0

0000096c <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     96c:	4811      	ldr	r0, [pc, #68]	; (9b4 <zero_loop+0x12>)
     96e:	4912      	ldr	r1, [pc, #72]	; (9b8 <zero_loop+0x16>)
     970:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     972:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     976:	4811      	ldr	r0, [pc, #68]	; (9bc <zero_loop+0x1a>)
     978:	6801      	ldr	r1, [r0, #0]
     97a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     97e:	6001      	str	r1, [r0, #0]
     980:	f3bf 8f4f 	dsb	sy
     984:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     988:	480d      	ldr	r0, [pc, #52]	; (9c0 <zero_loop+0x1e>)
     98a:	490e      	ldr	r1, [pc, #56]	; (9c4 <zero_loop+0x22>)
     98c:	4a0e      	ldr	r2, [pc, #56]	; (9c8 <zero_loop+0x26>)

0000098e <copy_loop>:
     98e:	f850 3b04 	ldr.w	r3, [r0], #4
     992:	f841 3b04 	str.w	r3, [r1], #4
     996:	4291      	cmp	r1, r2
     998:	dbf9      	blt.n	98e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     99a:	480c      	ldr	r0, [pc, #48]	; (9cc <zero_loop+0x2a>)
     99c:	490c      	ldr	r1, [pc, #48]	; (9d0 <zero_loop+0x2e>)
     99e:	f04f 0200 	mov.w	r2, #0

000009a2 <zero_loop>:
     9a2:	4288      	cmp	r0, r1
     9a4:	bfb8      	it	lt
     9a6:	f840 2b04 	strlt.w	r2, [r0], #4
     9aa:	dbfa      	blt.n	9a2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     9ac:	f7ff ff2c 	bl	808 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     9b0:	be00      	bkpt	0x0000
}
     9b2:	bf00      	nop
     9b4:	e000ed08 	.word	0xe000ed08
     9b8:	00000000 	.word	0x00000000
     9bc:	e000ed88 	.word	0xe000ed88
     9c0:	00002528 	.word	0x00002528
     9c4:	10001000 	.word	0x10001000
     9c8:	1000108c 	.word	0x1000108c
     9cc:	1000108c 	.word	0x1000108c
     9d0:	1000119c 	.word	0x1000119c

000009d4 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     9d4:	b480      	push	{r7}
     9d6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     9d8:	e7fe      	b.n	9d8 <am_nmi_isr+0x4>
     9da:	bf00      	nop

000009dc <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     9dc:	b480      	push	{r7}
     9de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     9e0:	e7fe      	b.n	9e0 <am_adc_isr+0x4>
     9e2:	bf00      	nop

000009e4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     9ec:	f000 fff0 	bl	19d0 <am_hal_clkgen_sysclk_get>
     9f0:	4602      	mov	r2, r0
     9f2:	4b07      	ldr	r3, [pc, #28]	; (a10 <am_util_delay_ms+0x2c>)
     9f4:	fba3 2302 	umull	r2, r3, r3, r2
     9f8:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     9fa:	687a      	ldr	r2, [r7, #4]
     9fc:	fb02 f303 	mul.w	r3, r2, r3
     a00:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     a02:	68f8      	ldr	r0, [r7, #12]
     a04:	f001 f82c 	bl	1a60 <am_hal_flash_delay>
}
     a08:	bf00      	nop
     a0a:	3710      	adds	r7, #16
     a0c:	46bd      	mov	sp, r7
     a0e:	bd80      	pop	{r7, pc}
     a10:	057619f1 	.word	0x057619f1

00000a14 <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     a14:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     a16:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     a18:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     a1a:	f000 f809 	bl	a30 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     a1e:	bd01      	pop	{r0, pc}
}
     a20:	bf00      	nop
     a22:	4618      	mov	r0, r3

00000a24 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     a24:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     a26:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     a28:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     a2a:	4770      	bx	lr
}
     a2c:	bf00      	nop
     a2e:	4618      	mov	r0, r3

00000a30 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     a30:	b580      	push	{r7, lr}
     a32:	b096      	sub	sp, #88	; 0x58
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     a38:	f107 030c 	add.w	r3, r7, #12
     a3c:	2200      	movs	r2, #0
     a3e:	601a      	str	r2, [r3, #0]
     a40:	605a      	str	r2, [r3, #4]
     a42:	609a      	str	r2, [r3, #8]
     a44:	60da      	str	r2, [r3, #12]
     a46:	611a      	str	r2, [r3, #16]
     a48:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     a4a:	2300      	movs	r3, #0
     a4c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     a50:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     a52:	4b2e      	ldr	r3, [pc, #184]	; (b0c <am_util_faultisr_collect_data+0xdc>)
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a5a:	b2db      	uxtb	r3, r3
     a5c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a62:	0a1b      	lsrs	r3, r3, #8
     a64:	b2db      	uxtb	r3, r3
     a66:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a6c:	0c1b      	lsrs	r3, r3, #16
     a6e:	b29b      	uxth	r3, r3
     a70:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     a74:	4b26      	ldr	r3, [pc, #152]	; (b10 <am_util_faultisr_collect_data+0xe0>)
     a76:	681b      	ldr	r3, [r3, #0]
     a78:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     a7a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     a7e:	b2db      	uxtb	r3, r3
     a80:	f003 0302 	and.w	r3, r3, #2
     a84:	2b00      	cmp	r3, #0
     a86:	d005      	beq.n	a94 <am_util_faultisr_collect_data+0x64>
     a88:	6879      	ldr	r1, [r7, #4]
     a8a:	2006      	movs	r0, #6
     a8c:	f7ff ffca 	bl	a24 <getStackedReg>
     a90:	4603      	mov	r3, r0
     a92:	e001      	b.n	a98 <am_util_faultisr_collect_data+0x68>
     a94:	f04f 33ff 	mov.w	r3, #4294967295
     a98:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     a9a:	6879      	ldr	r1, [r7, #4]
     a9c:	2000      	movs	r0, #0
     a9e:	f7ff ffc1 	bl	a24 <getStackedReg>
     aa2:	4603      	mov	r3, r0
     aa4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     aa6:	6879      	ldr	r1, [r7, #4]
     aa8:	2001      	movs	r0, #1
     aaa:	f7ff ffbb 	bl	a24 <getStackedReg>
     aae:	4603      	mov	r3, r0
     ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     ab2:	6879      	ldr	r1, [r7, #4]
     ab4:	2002      	movs	r0, #2
     ab6:	f7ff ffb5 	bl	a24 <getStackedReg>
     aba:	4603      	mov	r3, r0
     abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     abe:	6879      	ldr	r1, [r7, #4]
     ac0:	2003      	movs	r0, #3
     ac2:	f7ff ffaf 	bl	a24 <getStackedReg>
     ac6:	4603      	mov	r3, r0
     ac8:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     aca:	6879      	ldr	r1, [r7, #4]
     acc:	2004      	movs	r0, #4
     ace:	f7ff ffa9 	bl	a24 <getStackedReg>
     ad2:	4603      	mov	r3, r0
     ad4:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     ad6:	6879      	ldr	r1, [r7, #4]
     ad8:	2005      	movs	r0, #5
     ada:	f7ff ffa3 	bl	a24 <getStackedReg>
     ade:	4603      	mov	r3, r0
     ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     ae2:	6879      	ldr	r1, [r7, #4]
     ae4:	2006      	movs	r0, #6
     ae6:	f7ff ff9d 	bl	a24 <getStackedReg>
     aea:	4603      	mov	r3, r0
     aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     aee:	6879      	ldr	r1, [r7, #4]
     af0:	2007      	movs	r0, #7
     af2:	f7ff ff97 	bl	a24 <getStackedReg>
     af6:	4603      	mov	r3, r0
     af8:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     afa:	f107 030c 	add.w	r3, r7, #12
     afe:	4618      	mov	r0, r3
     b00:	f001 f818 	bl	1b34 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     b04:	2300      	movs	r3, #0
     b06:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     b08:	e7fe      	b.n	b08 <am_util_faultisr_collect_data+0xd8>
     b0a:	bf00      	nop
     b0c:	e000ed28 	.word	0xe000ed28
     b10:	e000ed38 	.word	0xe000ed38

00000b14 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     b1c:	4a04      	ldr	r2, [pc, #16]	; (b30 <am_util_stdio_printf_init+0x1c>)
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	6013      	str	r3, [r2, #0]
}
     b22:	bf00      	nop
     b24:	370c      	adds	r7, #12
     b26:	46bd      	mov	sp, r7
     b28:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop
     b30:	10001198 	.word	0x10001198

00000b34 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     b34:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     b38:	b096      	sub	sp, #88	; 0x58
     b3a:	af00      	add	r7, sp, #0
     b3c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     b40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b44:	0025      	movs	r5, r4
     b46:	2600      	movs	r6, #0
     b48:	ea55 0306 	orrs.w	r3, r5, r6
     b4c:	f000 809e 	beq.w	c8c <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     b50:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b54:	0862      	lsrs	r2, r4, #1
     b56:	ea4f 0133 	mov.w	r1, r3, rrx
     b5a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b5e:	ea4f 0893 	mov.w	r8, r3, lsr #2
     b62:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     b66:	ea4f 0994 	mov.w	r9, r4, lsr #2
     b6a:	eb11 0308 	adds.w	r3, r1, r8
     b6e:	eb42 0409 	adc.w	r4, r2, r9
     b72:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     b76:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b7a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     b7e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     b82:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     b86:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b8a:	eb13 030a 	adds.w	r3, r3, sl
     b8e:	eb44 040b 	adc.w	r4, r4, fp
     b92:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     b96:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b9a:	0a1a      	lsrs	r2, r3, #8
     b9c:	62ba      	str	r2, [r7, #40]	; 0x28
     b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ba0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     ba4:	62ba      	str	r2, [r7, #40]	; 0x28
     ba6:	0a23      	lsrs	r3, r4, #8
     ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
     baa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     bb2:	18c9      	adds	r1, r1, r3
     bb4:	eb42 0204 	adc.w	r2, r2, r4
     bb8:	460b      	mov	r3, r1
     bba:	4614      	mov	r4, r2
     bbc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     bc0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bc4:	0c1a      	lsrs	r2, r3, #16
     bc6:	623a      	str	r2, [r7, #32]
     bc8:	6a3a      	ldr	r2, [r7, #32]
     bca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     bce:	623a      	str	r2, [r7, #32]
     bd0:	0c23      	lsrs	r3, r4, #16
     bd2:	627b      	str	r3, [r7, #36]	; 0x24
     bd4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bd8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     bdc:	18c9      	adds	r1, r1, r3
     bde:	eb42 0204 	adc.w	r2, r2, r4
     be2:	460b      	mov	r3, r1
     be4:	4614      	mov	r4, r2
     be6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     bea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bee:	0023      	movs	r3, r4
     bf0:	603b      	str	r3, [r7, #0]
     bf2:	2300      	movs	r3, #0
     bf4:	607b      	str	r3, [r7, #4]
     bf6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bfa:	e897 0006 	ldmia.w	r7, {r1, r2}
     bfe:	18c9      	adds	r1, r1, r3
     c00:	eb42 0204 	adc.w	r2, r2, r4
     c04:	460b      	mov	r3, r1
     c06:	4614      	mov	r4, r2
     c08:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     c0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c10:	08da      	lsrs	r2, r3, #3
     c12:	613a      	str	r2, [r7, #16]
     c14:	693a      	ldr	r2, [r7, #16]
     c16:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     c1a:	613a      	str	r2, [r7, #16]
     c1c:	08e3      	lsrs	r3, r4, #3
     c1e:	617b      	str	r3, [r7, #20]
     c20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     c24:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     c28:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c2c:	18db      	adds	r3, r3, r3
     c2e:	eb44 0404 	adc.w	r4, r4, r4
     c32:	00a2      	lsls	r2, r4, #2
     c34:	60fa      	str	r2, [r7, #12]
     c36:	68fa      	ldr	r2, [r7, #12]
     c38:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     c3c:	60fa      	str	r2, [r7, #12]
     c3e:	009a      	lsls	r2, r3, #2
     c40:	60ba      	str	r2, [r7, #8]
     c42:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     c46:	18c9      	adds	r1, r1, r3
     c48:	eb42 0204 	adc.w	r2, r2, r4
     c4c:	460b      	mov	r3, r1
     c4e:	4614      	mov	r4, r2
     c50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     c54:	1acb      	subs	r3, r1, r3
     c56:	eb62 0404 	sbc.w	r4, r2, r4
     c5a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     c5e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     c62:	3306      	adds	r3, #6
     c64:	f144 0400 	adc.w	r4, r4, #0
     c68:	091a      	lsrs	r2, r3, #4
     c6a:	61ba      	str	r2, [r7, #24]
     c6c:	69ba      	ldr	r2, [r7, #24]
     c6e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     c72:	61ba      	str	r2, [r7, #24]
     c74:	0923      	lsrs	r3, r4, #4
     c76:	61fb      	str	r3, [r7, #28]
     c78:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     c80:	18c9      	adds	r1, r1, r3
     c82:	eb42 0204 	adc.w	r2, r2, r4
     c86:	460b      	mov	r3, r1
     c88:	4614      	mov	r4, r2
     c8a:	e029      	b.n	ce0 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c8e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c92:	085a      	lsrs	r2, r3, #1
     c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c96:	089b      	lsrs	r3, r3, #2
     c98:	4413      	add	r3, r2
     c9a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c9e:	091b      	lsrs	r3, r3, #4
     ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     ca2:	4413      	add	r3, r2
     ca4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ca8:	0a1b      	lsrs	r3, r3, #8
     caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     cac:	4413      	add	r3, r2
     cae:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cb2:	0c1b      	lsrs	r3, r3, #16
     cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     cb6:	4413      	add	r3, r2
     cb8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cbc:	08db      	lsrs	r3, r3, #3
     cbe:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     cc2:	4613      	mov	r3, r2
     cc4:	009b      	lsls	r3, r3, #2
     cc6:	4413      	add	r3, r2
     cc8:	005b      	lsls	r3, r3, #1
     cca:	461a      	mov	r2, r3
     ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cce:	1a9b      	subs	r3, r3, r2
     cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cd4:	3306      	adds	r3, #6
     cd6:	091a      	lsrs	r2, r3, #4
     cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cda:	4413      	add	r3, r2
     cdc:	f04f 0400 	mov.w	r4, #0
    }
}
     ce0:	4618      	mov	r0, r3
     ce2:	4621      	mov	r1, r4
     ce4:	3758      	adds	r7, #88	; 0x58
     ce6:	46bd      	mov	sp, r7
     ce8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     cf0:	b590      	push	{r4, r7, lr}
     cf2:	b085      	sub	sp, #20
     cf4:	af00      	add	r7, sp, #0
     cf6:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     cfa:	683a      	ldr	r2, [r7, #0]
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	4313      	orrs	r3, r2
     d00:	2b00      	cmp	r3, #0
     d02:	bf0c      	ite	eq
     d04:	2301      	moveq	r3, #1
     d06:	2300      	movne	r3, #0
     d08:	b2db      	uxtb	r3, r3
     d0a:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     d0c:	e008      	b.n	d20 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
     d12:	f7ff ff0f 	bl	b34 <divu64_10>
     d16:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     d1a:	68fb      	ldr	r3, [r7, #12]
     d1c:	3301      	adds	r3, #1
     d1e:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     d20:	e897 0018 	ldmia.w	r7, {r3, r4}
     d24:	4323      	orrs	r3, r4
     d26:	d1f2      	bne.n	d0e <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     d28:	68fb      	ldr	r3, [r7, #12]
}
     d2a:	4618      	mov	r0, r3
     d2c:	3714      	adds	r7, #20
     d2e:	46bd      	mov	sp, r7
     d30:	bd90      	pop	{r4, r7, pc}
     d32:	bf00      	nop

00000d34 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     d34:	b590      	push	{r4, r7, lr}
     d36:	b083      	sub	sp, #12
     d38:	af00      	add	r7, sp, #0
     d3a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     d3e:	e897 0018 	ldmia.w	r7, {r3, r4}
     d42:	2b00      	cmp	r3, #0
     d44:	f174 0300 	sbcs.w	r3, r4, #0
     d48:	da06      	bge.n	d58 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     d4a:	e897 0018 	ldmia.w	r7, {r3, r4}
     d4e:	425b      	negs	r3, r3
     d50:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     d54:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     d58:	e897 0018 	ldmia.w	r7, {r3, r4}
     d5c:	4618      	mov	r0, r3
     d5e:	4621      	mov	r1, r4
     d60:	f7ff ffc6 	bl	cf0 <ndigits_in_u64>
     d64:	4603      	mov	r3, r0
}
     d66:	4618      	mov	r0, r3
     d68:	370c      	adds	r7, #12
     d6a:	46bd      	mov	sp, r7
     d6c:	bd90      	pop	{r4, r7, pc}
     d6e:	bf00      	nop

00000d70 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     d70:	b490      	push	{r4, r7}
     d72:	b084      	sub	sp, #16
     d74:	af00      	add	r7, sp, #0
     d76:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     d7a:	6839      	ldr	r1, [r7, #0]
     d7c:	687a      	ldr	r2, [r7, #4]
     d7e:	430a      	orrs	r2, r1
     d80:	2a00      	cmp	r2, #0
     d82:	bf0c      	ite	eq
     d84:	2201      	moveq	r2, #1
     d86:	2200      	movne	r2, #0
     d88:	b2d2      	uxtb	r2, r2
     d8a:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     d8c:	e00a      	b.n	da4 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     d8e:	e897 0006 	ldmia.w	r7, {r1, r2}
     d92:	090b      	lsrs	r3, r1, #4
     d94:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     d98:	0914      	lsrs	r4, r2, #4
     d9a:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     d9e:	68fa      	ldr	r2, [r7, #12]
     da0:	3201      	adds	r2, #1
     da2:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     da4:	e897 0006 	ldmia.w	r7, {r1, r2}
     da8:	430a      	orrs	r2, r1
     daa:	d1f0      	bne.n	d8e <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     dac:	68fb      	ldr	r3, [r7, #12]
}
     dae:	4618      	mov	r0, r3
     db0:	3710      	adds	r7, #16
     db2:	46bd      	mov	sp, r7
     db4:	bc90      	pop	{r4, r7}
     db6:	4770      	bx	lr

00000db8 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     db8:	b480      	push	{r7}
     dba:	b087      	sub	sp, #28
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
     dc0:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     dc2:	2300      	movs	r3, #0
     dc4:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     dc6:	2300      	movs	r3, #0
     dc8:	613b      	str	r3, [r7, #16]
     dca:	2300      	movs	r3, #0
     dcc:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	781b      	ldrb	r3, [r3, #0]
     dd2:	2b2d      	cmp	r3, #45	; 0x2d
     dd4:	d11b      	bne.n	e0e <decstr_to_int+0x56>
    {
        bNeg = true;
     dd6:	2301      	movs	r3, #1
     dd8:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	3301      	adds	r3, #1
     dde:	607b      	str	r3, [r7, #4]
        uCnt++;
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	3301      	adds	r3, #1
     de4:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     de6:	e012      	b.n	e0e <decstr_to_int+0x56>
    {
        ++uCnt;
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	3301      	adds	r3, #1
     dec:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     dee:	693a      	ldr	r2, [r7, #16]
     df0:	4613      	mov	r3, r2
     df2:	009b      	lsls	r3, r3, #2
     df4:	4413      	add	r3, r2
     df6:	005b      	lsls	r3, r3, #1
     df8:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	461a      	mov	r2, r3
     e00:	693b      	ldr	r3, [r7, #16]
     e02:	4413      	add	r3, r2
     e04:	3b30      	subs	r3, #48	; 0x30
     e06:	613b      	str	r3, [r7, #16]
        pcStr++;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	3301      	adds	r3, #1
     e0c:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	2b2f      	cmp	r3, #47	; 0x2f
     e14:	d903      	bls.n	e1e <decstr_to_int+0x66>
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	2b39      	cmp	r3, #57	; 0x39
     e1c:	d9e4      	bls.n	de8 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     e1e:	683b      	ldr	r3, [r7, #0]
     e20:	2b00      	cmp	r3, #0
     e22:	d002      	beq.n	e2a <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     e24:	683b      	ldr	r3, [r7, #0]
     e26:	68fa      	ldr	r2, [r7, #12]
     e28:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     e2a:	7dfb      	ldrb	r3, [r7, #23]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d002      	beq.n	e36 <decstr_to_int+0x7e>
     e30:	693b      	ldr	r3, [r7, #16]
     e32:	425b      	negs	r3, r3
     e34:	e000      	b.n	e38 <decstr_to_int+0x80>
     e36:	693b      	ldr	r3, [r7, #16]
}
     e38:	4618      	mov	r0, r3
     e3a:	371c      	adds	r7, #28
     e3c:	46bd      	mov	sp, r7
     e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e42:	4770      	bx	lr

00000e44 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     e44:	b590      	push	{r4, r7, lr}
     e46:	b091      	sub	sp, #68	; 0x44
     e48:	af00      	add	r7, sp, #0
     e4a:	e9c7 0102 	strd	r0, r1, [r7, #8]
     e4e:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     e50:	2300      	movs	r3, #0
     e52:	63fb      	str	r3, [r7, #60]	; 0x3c
     e54:	2300      	movs	r3, #0
     e56:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     e58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     e5c:	f7ff fe6a 	bl	b34 <divu64_10>
     e60:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     e64:	68b9      	ldr	r1, [r7, #8]
     e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e68:	4613      	mov	r3, r2
     e6a:	009b      	lsls	r3, r3, #2
     e6c:	4413      	add	r3, r2
     e6e:	005b      	lsls	r3, r3, #1
     e70:	1acb      	subs	r3, r1, r3
     e72:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e76:	1c5a      	adds	r2, r3, #1
     e78:	63fa      	str	r2, [r7, #60]	; 0x3c
     e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e7c:	b2d2      	uxtb	r2, r2
     e7e:	3230      	adds	r2, #48	; 0x30
     e80:	b2d2      	uxtb	r2, r2
     e82:	f107 0140 	add.w	r1, r7, #64	; 0x40
     e86:	440b      	add	r3, r1
     e88:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     e8c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e90:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     e94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     e98:	4323      	orrs	r3, r4
     e9a:	d1dd      	bne.n	e58 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e9e:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d011      	beq.n	eca <uint64_to_str+0x86>
    {
        while ( ix-- )
     ea6:	e008      	b.n	eba <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	1c5a      	adds	r2, r3, #1
     eac:	607a      	str	r2, [r7, #4]
     eae:	f107 0110 	add.w	r1, r7, #16
     eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     eb4:	440a      	add	r2, r1
     eb6:	7812      	ldrb	r2, [r2, #0]
     eb8:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ebc:	1e5a      	subs	r2, r3, #1
     ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
     ec0:	2b00      	cmp	r3, #0
     ec2:	d1f1      	bne.n	ea8 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	2200      	movs	r2, #0
     ec8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     ecc:	4618      	mov	r0, r3
     ece:	3744      	adds	r7, #68	; 0x44
     ed0:	46bd      	mov	sp, r7
     ed2:	bd90      	pop	{r4, r7, pc}

00000ed4 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     ed4:	b4b0      	push	{r4, r5, r7}
     ed6:	b08d      	sub	sp, #52	; 0x34
     ed8:	af00      	add	r7, sp, #0
     eda:	e9c7 0102 	strd	r0, r1, [r7, #8]
     ede:	607a      	str	r2, [r7, #4]
     ee0:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     ee2:	2300      	movs	r3, #0
     ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     eea:	4313      	orrs	r3, r2
     eec:	d131      	bne.n	f52 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ef0:	1c5a      	adds	r2, r3, #1
     ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
     ef4:	f107 0230 	add.w	r2, r7, #48	; 0x30
     ef8:	4413      	add	r3, r2
     efa:	2230      	movs	r2, #48	; 0x30
     efc:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     f00:	e027      	b.n	f52 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     f02:	7a3b      	ldrb	r3, [r7, #8]
     f04:	f003 030f 	and.w	r3, r3, #15
     f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     f10:	2b09      	cmp	r3, #9
     f12:	d90a      	bls.n	f2a <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     f14:	78fb      	ldrb	r3, [r7, #3]
     f16:	2b00      	cmp	r3, #0
     f18:	d001      	beq.n	f1e <uint64_to_hexstr+0x4a>
     f1a:	2227      	movs	r2, #39	; 0x27
     f1c:	e000      	b.n	f20 <uint64_to_hexstr+0x4c>
     f1e:	2207      	movs	r2, #7
     f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     f24:	4413      	add	r3, r2
     f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f2c:	1c5a      	adds	r2, r3, #1
     f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
     f30:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     f34:	3230      	adds	r2, #48	; 0x30
     f36:	b2d2      	uxtb	r2, r2
     f38:	f107 0130 	add.w	r1, r7, #48	; 0x30
     f3c:	440b      	add	r3, r1
     f3e:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f46:	0914      	lsrs	r4, r2, #4
     f48:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     f4c:	091d      	lsrs	r5, r3, #4
     f4e:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f56:	4313      	orrs	r3, r2
     f58:	d1d3      	bne.n	f02 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f5c:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	2b00      	cmp	r3, #0
     f62:	d011      	beq.n	f88 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     f64:	e008      	b.n	f78 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	1c5a      	adds	r2, r3, #1
     f6a:	607a      	str	r2, [r7, #4]
     f6c:	f107 0110 	add.w	r1, r7, #16
     f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f72:	440a      	add	r2, r1
     f74:	7812      	ldrb	r2, [r2, #0]
     f76:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f7a:	1e5a      	subs	r2, r3, #1
     f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
     f7e:	2b00      	cmp	r3, #0
     f80:	d1f1      	bne.n	f66 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	2200      	movs	r2, #0
     f86:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     f8a:	4618      	mov	r0, r3
     f8c:	3734      	adds	r7, #52	; 0x34
     f8e:	46bd      	mov	sp, r7
     f90:	bcb0      	pop	{r4, r5, r7}
     f92:	4770      	bx	lr

00000f94 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     f94:	b480      	push	{r7}
     f96:	b085      	sub	sp, #20
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     f9c:	2300      	movs	r3, #0
     f9e:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d104      	bne.n	fb0 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     fa6:	68fb      	ldr	r3, [r7, #12]
     fa8:	e009      	b.n	fbe <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	3301      	adds	r3, #1
     fae:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	1c5a      	adds	r2, r3, #1
     fb4:	607a      	str	r2, [r7, #4]
     fb6:	781b      	ldrb	r3, [r3, #0]
     fb8:	2b00      	cmp	r3, #0
     fba:	d1f6      	bne.n	faa <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     fbc:	68fb      	ldr	r3, [r7, #12]
}
     fbe:	4618      	mov	r0, r3
     fc0:	3714      	adds	r7, #20
     fc2:	46bd      	mov	sp, r7
     fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fc8:	4770      	bx	lr
     fca:	bf00      	nop

00000fcc <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     fcc:	b480      	push	{r7}
     fce:	b087      	sub	sp, #28
     fd0:	af00      	add	r7, sp, #0
     fd2:	60f8      	str	r0, [r7, #12]
     fd4:	460b      	mov	r3, r1
     fd6:	607a      	str	r2, [r7, #4]
     fd8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     fda:	2300      	movs	r3, #0
     fdc:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	2b00      	cmp	r3, #0
     fe2:	dc0c      	bgt.n	ffe <padbuffer+0x32>
    {
        return i32Cnt;
     fe4:	697b      	ldr	r3, [r7, #20]
     fe6:	e010      	b.n	100a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	2b00      	cmp	r3, #0
     fec:	d004      	beq.n	ff8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     fee:	68fb      	ldr	r3, [r7, #12]
     ff0:	1c5a      	adds	r2, r3, #1
     ff2:	60fa      	str	r2, [r7, #12]
     ff4:	7afa      	ldrb	r2, [r7, #11]
     ff6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	3301      	adds	r3, #1
     ffc:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	1e5a      	subs	r2, r3, #1
    1002:	607a      	str	r2, [r7, #4]
    1004:	2b00      	cmp	r3, #0
    1006:	d1ef      	bne.n	fe8 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
    1008:	697b      	ldr	r3, [r7, #20]
}
    100a:	4618      	mov	r0, r3
    100c:	371c      	adds	r7, #28
    100e:	46bd      	mov	sp, r7
    1010:	f85d 7b04 	ldr.w	r7, [sp], #4
    1014:	4770      	bx	lr
    1016:	bf00      	nop

00001018 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    1018:	b590      	push	{r4, r7, lr}
    101a:	b08f      	sub	sp, #60	; 0x3c
    101c:	af00      	add	r7, sp, #0
    101e:	60f8      	str	r0, [r7, #12]
    1020:	60b9      	str	r1, [r7, #8]
    1022:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
    1024:	68bb      	ldr	r3, [r7, #8]
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
    102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    102c:	2b03      	cmp	r3, #3
    102e:	dc02      	bgt.n	1036 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    1030:	f06f 0302 	mvn.w	r3, #2
    1034:	e0d4      	b.n	11e0 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
    1036:	edd7 7a03 	vldr	s15, [r7, #12]
    103a:	eef5 7a40 	vcmp.f32	s15, #0.0
    103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1042:	d104      	bne.n	104e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    1044:	68bb      	ldr	r3, [r7, #8]
    1046:	4a68      	ldr	r2, [pc, #416]	; (11e8 <ftoa+0x1d0>)
    1048:	601a      	str	r2, [r3, #0]
        return 3;
    104a:	2303      	movs	r3, #3
    104c:	e0c8      	b.n	11e0 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
    104e:	68bb      	ldr	r3, [r7, #8]
    1050:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    1056:	697b      	ldr	r3, [r7, #20]
    1058:	15db      	asrs	r3, r3, #23
    105a:	b2db      	uxtb	r3, r3
    105c:	3b7f      	subs	r3, #127	; 0x7f
    105e:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    1060:	697b      	ldr	r3, [r7, #20]
    1062:	f3c3 0316 	ubfx	r3, r3, #0, #23
    1066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    106a:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
    106c:	2300      	movs	r3, #0
    106e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    1070:	2300      	movs	r3, #0
    1072:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    1074:	6a3b      	ldr	r3, [r7, #32]
    1076:	2b1e      	cmp	r3, #30
    1078:	dd02      	ble.n	1080 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    107a:	f06f 0301 	mvn.w	r3, #1
    107e:	e0af      	b.n	11e0 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
    1080:	6a3b      	ldr	r3, [r7, #32]
    1082:	f113 0f17 	cmn.w	r3, #23
    1086:	da02      	bge.n	108e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    1088:	f04f 33ff 	mov.w	r3, #4294967295
    108c:	e0a8      	b.n	11e0 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
    108e:	6a3b      	ldr	r3, [r7, #32]
    1090:	2b16      	cmp	r3, #22
    1092:	dd06      	ble.n	10a2 <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    1094:	6a3b      	ldr	r3, [r7, #32]
    1096:	3b17      	subs	r3, #23
    1098:	69fa      	ldr	r2, [r7, #28]
    109a:	fa02 f303 	lsl.w	r3, r2, r3
    109e:	637b      	str	r3, [r7, #52]	; 0x34
    10a0:	e01a      	b.n	10d8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    10a2:	6a3b      	ldr	r3, [r7, #32]
    10a4:	2b00      	cmp	r3, #0
    10a6:	db0f      	blt.n	10c8 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    10a8:	6a3b      	ldr	r3, [r7, #32]
    10aa:	f1c3 0317 	rsb	r3, r3, #23
    10ae:	69fa      	ldr	r2, [r7, #28]
    10b0:	fa42 f303 	asr.w	r3, r2, r3
    10b4:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    10b6:	6a3b      	ldr	r3, [r7, #32]
    10b8:	3301      	adds	r3, #1
    10ba:	69fa      	ldr	r2, [r7, #28]
    10bc:	fa02 f303 	lsl.w	r3, r2, r3
    10c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    10c4:	633b      	str	r3, [r7, #48]	; 0x30
    10c6:	e007      	b.n	10d8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    10c8:	69fb      	ldr	r3, [r7, #28]
    10ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    10ce:	6a3b      	ldr	r3, [r7, #32]
    10d0:	43db      	mvns	r3, r3
    10d2:	fa42 f303 	asr.w	r3, r2, r3
    10d6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    10d8:	697b      	ldr	r3, [r7, #20]
    10da:	2b00      	cmp	r3, #0
    10dc:	da04      	bge.n	10e8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    10de:	68bb      	ldr	r3, [r7, #8]
    10e0:	1c5a      	adds	r2, r3, #1
    10e2:	60ba      	str	r2, [r7, #8]
    10e4:	222d      	movs	r2, #45	; 0x2d
    10e6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    10e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10ea:	2b00      	cmp	r3, #0
    10ec:	d105      	bne.n	10fa <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    10ee:	68bb      	ldr	r3, [r7, #8]
    10f0:	1c5a      	adds	r2, r3, #1
    10f2:	60ba      	str	r2, [r7, #8]
    10f4:	2230      	movs	r2, #48	; 0x30
    10f6:	701a      	strb	r2, [r3, #0]
    10f8:	e021      	b.n	113e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    10fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10fc:	2b00      	cmp	r3, #0
    10fe:	dd08      	ble.n	1112 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    1100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1102:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1106:	68ba      	ldr	r2, [r7, #8]
    1108:	4618      	mov	r0, r3
    110a:	4621      	mov	r1, r4
    110c:	f7ff fe9a 	bl	e44 <uint64_to_str>
    1110:	e011      	b.n	1136 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    1112:	68bb      	ldr	r3, [r7, #8]
    1114:	1c5a      	adds	r2, r3, #1
    1116:	60ba      	str	r2, [r7, #8]
    1118:	222d      	movs	r2, #45	; 0x2d
    111a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    111e:	425b      	negs	r3, r3
    1120:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1124:	68ba      	ldr	r2, [r7, #8]
    1126:	4618      	mov	r0, r3
    1128:	4621      	mov	r1, r4
    112a:	f7ff fe8b 	bl	e44 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    112e:	e002      	b.n	1136 <ftoa+0x11e>
        {
            pcBuf++;
    1130:	68bb      	ldr	r3, [r7, #8]
    1132:	3301      	adds	r3, #1
    1134:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    1136:	68bb      	ldr	r3, [r7, #8]
    1138:	781b      	ldrb	r3, [r3, #0]
    113a:	2b00      	cmp	r3, #0
    113c:	d1f8      	bne.n	1130 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    113e:	68bb      	ldr	r3, [r7, #8]
    1140:	1c5a      	adds	r2, r3, #1
    1142:	60ba      	str	r2, [r7, #8]
    1144:	222e      	movs	r2, #46	; 0x2e
    1146:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    114a:	2b00      	cmp	r3, #0
    114c:	d105      	bne.n	115a <ftoa+0x142>
    {
        *pcBuf++ = '0';
    114e:	68bb      	ldr	r3, [r7, #8]
    1150:	1c5a      	adds	r2, r3, #1
    1152:	60ba      	str	r2, [r7, #8]
    1154:	2230      	movs	r2, #48	; 0x30
    1156:	701a      	strb	r2, [r3, #0]
    1158:	e03c      	b.n	11d4 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    115a:	68ba      	ldr	r2, [r7, #8]
    115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    115e:	1ad3      	subs	r3, r2, r3
    1160:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1162:	1ad3      	subs	r3, r2, r3
    1164:	3b01      	subs	r3, #1
    1166:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1168:	69ba      	ldr	r2, [r7, #24]
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	4293      	cmp	r3, r2
    116e:	bfa8      	it	ge
    1170:	4613      	movge	r3, r2
    1172:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    1174:	2300      	movs	r3, #0
    1176:	62fb      	str	r3, [r7, #44]	; 0x2c
    1178:	e015      	b.n	11a6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    117a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    117c:	4613      	mov	r3, r2
    117e:	009b      	lsls	r3, r3, #2
    1180:	4413      	add	r3, r2
    1182:	005b      	lsls	r3, r3, #1
    1184:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	1c5a      	adds	r2, r3, #1
    118a:	60ba      	str	r2, [r7, #8]
    118c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    118e:	1612      	asrs	r2, r2, #24
    1190:	b2d2      	uxtb	r2, r2
    1192:	3230      	adds	r2, #48	; 0x30
    1194:	b2d2      	uxtb	r2, r2
    1196:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    119a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    119e:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    11a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11a2:	3301      	adds	r3, #1
    11a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    11a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    11a8:	69bb      	ldr	r3, [r7, #24]
    11aa:	429a      	cmp	r2, r3
    11ac:	dbe5      	blt.n	117a <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    11ae:	68bb      	ldr	r3, [r7, #8]
    11b0:	3b01      	subs	r3, #1
    11b2:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    11b4:	e002      	b.n	11bc <ftoa+0x1a4>
        {
            --pcBuf;
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	3b01      	subs	r3, #1
    11ba:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	781b      	ldrb	r3, [r3, #0]
    11c0:	2b30      	cmp	r3, #48	; 0x30
    11c2:	d104      	bne.n	11ce <ftoa+0x1b6>
    11c4:	68bb      	ldr	r3, [r7, #8]
    11c6:	3b01      	subs	r3, #1
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	2b2e      	cmp	r3, #46	; 0x2e
    11cc:	d1f3      	bne.n	11b6 <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    11ce:	68bb      	ldr	r3, [r7, #8]
    11d0:	3301      	adds	r3, #1
    11d2:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    11d4:	68bb      	ldr	r3, [r7, #8]
    11d6:	2200      	movs	r2, #0
    11d8:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    11da:	68ba      	ldr	r2, [r7, #8]
    11dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11de:	1ad3      	subs	r3, r2, r3
} // ftoa()
    11e0:	4618      	mov	r0, r3
    11e2:	373c      	adds	r7, #60	; 0x3c
    11e4:	46bd      	mov	sp, r7
    11e6:	bd90      	pop	{r4, r7, pc}
    11e8:	00302e30 	.word	0x00302e30

000011ec <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    11ec:	b590      	push	{r4, r7, lr}
    11ee:	b095      	sub	sp, #84	; 0x54
    11f0:	af00      	add	r7, sp, #0
    11f2:	60f8      	str	r0, [r7, #12]
    11f4:	60b9      	str	r1, [r7, #8]
    11f6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    11f8:	2300      	movs	r3, #0
    11fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    11fc:	2300      	movs	r3, #0
    11fe:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1200:	e2e3      	b.n	17ca <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    1202:	2306      	movs	r3, #6
    1204:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    1206:	68bb      	ldr	r3, [r7, #8]
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2b25      	cmp	r3, #37	; 0x25
    120c:	d01f      	beq.n	124e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    120e:	68fb      	ldr	r3, [r7, #12]
    1210:	2b00      	cmp	r3, #0
    1212:	d015      	beq.n	1240 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    1214:	68bb      	ldr	r3, [r7, #8]
    1216:	781b      	ldrb	r3, [r3, #0]
    1218:	2b0a      	cmp	r3, #10
    121a:	d10b      	bne.n	1234 <am_util_stdio_vsprintf+0x48>
    121c:	4bb1      	ldr	r3, [pc, #708]	; (14e4 <am_util_stdio_vsprintf+0x2f8>)
    121e:	781b      	ldrb	r3, [r3, #0]
    1220:	2b00      	cmp	r3, #0
    1222:	d007      	beq.n	1234 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	1c5a      	adds	r2, r3, #1
    1228:	60fa      	str	r2, [r7, #12]
    122a:	220d      	movs	r2, #13
    122c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1230:	3301      	adds	r3, #1
    1232:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	1c5a      	adds	r2, r3, #1
    1238:	60fa      	str	r2, [r7, #12]
    123a:	68ba      	ldr	r2, [r7, #8]
    123c:	7812      	ldrb	r2, [r2, #0]
    123e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1240:	68bb      	ldr	r3, [r7, #8]
    1242:	3301      	adds	r3, #1
    1244:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    1246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1248:	3301      	adds	r3, #1
    124a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    124c:	e2bd      	b.n	17ca <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    124e:	68bb      	ldr	r3, [r7, #8]
    1250:	3301      	adds	r3, #1
    1252:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1254:	2300      	movs	r3, #0
    1256:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    125a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    125e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    1262:	2320      	movs	r3, #32
    1264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1268:	68bb      	ldr	r3, [r7, #8]
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	2b30      	cmp	r3, #48	; 0x30
    126e:	d105      	bne.n	127c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1270:	2330      	movs	r3, #48	; 0x30
    1272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    1276:	68bb      	ldr	r3, [r7, #8]
    1278:	3301      	adds	r3, #1
    127a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    127c:	f107 0310 	add.w	r3, r7, #16
    1280:	4619      	mov	r1, r3
    1282:	68b8      	ldr	r0, [r7, #8]
    1284:	f7ff fd98 	bl	db8 <decstr_to_int>
    1288:	4603      	mov	r3, r0
    128a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    128c:	693b      	ldr	r3, [r7, #16]
    128e:	68ba      	ldr	r2, [r7, #8]
    1290:	4413      	add	r3, r2
    1292:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1294:	68bb      	ldr	r3, [r7, #8]
    1296:	781b      	ldrb	r3, [r3, #0]
    1298:	2b73      	cmp	r3, #115	; 0x73
    129a:	d005      	beq.n	12a8 <am_util_stdio_vsprintf+0xbc>
    129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    129e:	2b00      	cmp	r3, #0
    12a0:	da02      	bge.n	12a8 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    12a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12a4:	425b      	negs	r3, r3
    12a6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    12a8:	68bb      	ldr	r3, [r7, #8]
    12aa:	781b      	ldrb	r3, [r3, #0]
    12ac:	2b2e      	cmp	r3, #46	; 0x2e
    12ae:	d10e      	bne.n	12ce <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    12b0:	68bb      	ldr	r3, [r7, #8]
    12b2:	3301      	adds	r3, #1
    12b4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    12b6:	f107 0310 	add.w	r3, r7, #16
    12ba:	4619      	mov	r1, r3
    12bc:	68b8      	ldr	r0, [r7, #8]
    12be:	f7ff fd7b 	bl	db8 <decstr_to_int>
    12c2:	4603      	mov	r3, r0
    12c4:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	68ba      	ldr	r2, [r7, #8]
    12ca:	4413      	add	r3, r2
    12cc:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    12ce:	68bb      	ldr	r3, [r7, #8]
    12d0:	781b      	ldrb	r3, [r3, #0]
    12d2:	2b6c      	cmp	r3, #108	; 0x6c
    12d4:	d10c      	bne.n	12f0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    12d6:	68bb      	ldr	r3, [r7, #8]
    12d8:	3301      	adds	r3, #1
    12da:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    12dc:	68bb      	ldr	r3, [r7, #8]
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	2b6c      	cmp	r3, #108	; 0x6c
    12e2:	d105      	bne.n	12f0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    12e4:	68bb      	ldr	r3, [r7, #8]
    12e6:	3301      	adds	r3, #1
    12e8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    12ea:	2301      	movs	r3, #1
    12ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    12f0:	68bb      	ldr	r3, [r7, #8]
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	3b46      	subs	r3, #70	; 0x46
    12f6:	2b32      	cmp	r3, #50	; 0x32
    12f8:	f200 8254 	bhi.w	17a4 <am_util_stdio_vsprintf+0x5b8>
    12fc:	a201      	add	r2, pc, #4	; (adr r2, 1304 <am_util_stdio_vsprintf+0x118>)
    12fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1302:	bf00      	nop
    1304:	0000172f 	.word	0x0000172f
    1308:	000017a5 	.word	0x000017a5
    130c:	000017a5 	.word	0x000017a5
    1310:	000017a5 	.word	0x000017a5
    1314:	000017a5 	.word	0x000017a5
    1318:	000017a5 	.word	0x000017a5
    131c:	000017a5 	.word	0x000017a5
    1320:	000017a5 	.word	0x000017a5
    1324:	000017a5 	.word	0x000017a5
    1328:	000017a5 	.word	0x000017a5
    132c:	000017a5 	.word	0x000017a5
    1330:	000017a5 	.word	0x000017a5
    1334:	000017a5 	.word	0x000017a5
    1338:	000017a5 	.word	0x000017a5
    133c:	000017a5 	.word	0x000017a5
    1340:	000017a5 	.word	0x000017a5
    1344:	000017a5 	.word	0x000017a5
    1348:	000017a5 	.word	0x000017a5
    134c:	000014cb 	.word	0x000014cb
    1350:	000017a5 	.word	0x000017a5
    1354:	000017a5 	.word	0x000017a5
    1358:	000017a5 	.word	0x000017a5
    135c:	000017a5 	.word	0x000017a5
    1360:	000017a5 	.word	0x000017a5
    1364:	000017a5 	.word	0x000017a5
    1368:	000017a5 	.word	0x000017a5
    136c:	000017a5 	.word	0x000017a5
    1370:	000017a5 	.word	0x000017a5
    1374:	000017a5 	.word	0x000017a5
    1378:	000013d1 	.word	0x000013d1
    137c:	000015f7 	.word	0x000015f7
    1380:	000017a5 	.word	0x000017a5
    1384:	0000172f 	.word	0x0000172f
    1388:	000017a5 	.word	0x000017a5
    138c:	000017a5 	.word	0x000017a5
    1390:	000015f7 	.word	0x000015f7
    1394:	000017a5 	.word	0x000017a5
    1398:	000017a5 	.word	0x000017a5
    139c:	000017a5 	.word	0x000017a5
    13a0:	000017a5 	.word	0x000017a5
    13a4:	000017a5 	.word	0x000017a5
    13a8:	000017a5 	.word	0x000017a5
    13ac:	000017a5 	.word	0x000017a5
    13b0:	000017a5 	.word	0x000017a5
    13b4:	000017a5 	.word	0x000017a5
    13b8:	000013f7 	.word	0x000013f7
    13bc:	000017a5 	.word	0x000017a5
    13c0:	00001565 	.word	0x00001565
    13c4:	000017a5 	.word	0x000017a5
    13c8:	000017a5 	.word	0x000017a5
    13cc:	000014c5 	.word	0x000014c5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	1d1a      	adds	r2, r3, #4
    13d4:	607a      	str	r2, [r7, #4]
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	2b00      	cmp	r3, #0
    13e0:	d005      	beq.n	13ee <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	1c5a      	adds	r2, r3, #1
    13e6:	60fa      	str	r2, [r7, #12]
    13e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    13ec:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    13ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13f0:	3301      	adds	r3, #1
    13f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13f4:	e1e6      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	1d1a      	adds	r2, r3, #4
    13fa:	607a      	str	r2, [r7, #4]
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1400:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1402:	f7ff fdc7 	bl	f94 <simple_strlen>
    1406:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    140a:	2b00      	cmp	r3, #0
    140c:	dd2e      	ble.n	146c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1412:	429a      	cmp	r2, r3
    1414:	d22a      	bcs.n	146c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1416:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    141a:	1ad3      	subs	r3, r2, r3
    141c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    141e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1422:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1424:	4619      	mov	r1, r3
    1426:	68f8      	ldr	r0, [r7, #12]
    1428:	f7ff fdd0 	bl	fcc <padbuffer>
    142c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	2b00      	cmp	r3, #0
    1432:	d001      	beq.n	1438 <am_util_stdio_vsprintf+0x24c>
    1434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1436:	e000      	b.n	143a <am_util_stdio_vsprintf+0x24e>
    1438:	2300      	movs	r3, #0
    143a:	68fa      	ldr	r2, [r7, #12]
    143c:	4413      	add	r3, r2
    143e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1444:	4413      	add	r3, r2
    1446:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1448:	2300      	movs	r3, #0
    144a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    144c:	e00e      	b.n	146c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	2b00      	cmp	r3, #0
    1452:	d005      	beq.n	1460 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1454:	68fb      	ldr	r3, [r7, #12]
    1456:	1c5a      	adds	r2, r3, #1
    1458:	60fa      	str	r2, [r7, #12]
    145a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    145c:	7812      	ldrb	r2, [r2, #0]
    145e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1462:	3301      	adds	r3, #1
    1464:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1468:	3301      	adds	r3, #1
    146a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    146c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	2b00      	cmp	r3, #0
    1472:	d1ec      	bne.n	144e <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    1474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1476:	2b00      	cmp	r3, #0
    1478:	f000 81a1 	beq.w	17be <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    147e:	425b      	negs	r3, r3
    1480:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1486:	429a      	cmp	r2, r3
    1488:	f080 8199 	bcs.w	17be <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    148c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1490:	1ad3      	subs	r3, r2, r3
    1492:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1498:	6bba      	ldr	r2, [r7, #56]	; 0x38
    149a:	4619      	mov	r1, r3
    149c:	68f8      	ldr	r0, [r7, #12]
    149e:	f7ff fd95 	bl	fcc <padbuffer>
    14a2:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	2b00      	cmp	r3, #0
    14a8:	d001      	beq.n	14ae <am_util_stdio_vsprintf+0x2c2>
    14aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14ac:	e000      	b.n	14b0 <am_util_stdio_vsprintf+0x2c4>
    14ae:	2300      	movs	r3, #0
    14b0:	68fa      	ldr	r2, [r7, #12]
    14b2:	4413      	add	r3, r2
    14b4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    14b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14ba:	4413      	add	r3, r2
    14bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    14be:	2300      	movs	r3, #0
    14c0:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    14c2:	e17c      	b.n	17be <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    14c4:	2301      	movs	r3, #1
    14c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    14ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    14ce:	2b00      	cmp	r3, #0
    14d0:	d00a      	beq.n	14e8 <am_util_stdio_vsprintf+0x2fc>
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	3307      	adds	r3, #7
    14d6:	f023 0307 	bic.w	r3, r3, #7
    14da:	f103 0208 	add.w	r2, r3, #8
    14de:	607a      	str	r2, [r7, #4]
    14e0:	cb18      	ldmia	r3, {r3, r4}
    14e2:	e007      	b.n	14f4 <am_util_stdio_vsprintf+0x308>
    14e4:	1000118c 	.word	0x1000118c
                                      va_arg(pArgs, uint32_t);
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	1d1a      	adds	r2, r3, #4
    14ec:	607a      	str	r2, [r7, #4]
    14ee:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    14f0:	f04f 0400 	mov.w	r4, #0
    14f4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    14f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14fa:	2b00      	cmp	r3, #0
    14fc:	d01e      	beq.n	153c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    14fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1502:	f7ff fc35 	bl	d70 <ndigits_in_hex>
    1506:	4602      	mov	r2, r0
    1508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    150a:	1a9b      	subs	r3, r3, r2
    150c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    150e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1512:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1514:	4619      	mov	r1, r3
    1516:	68f8      	ldr	r0, [r7, #12]
    1518:	f7ff fd58 	bl	fcc <padbuffer>
    151c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	2b00      	cmp	r3, #0
    1522:	d001      	beq.n	1528 <am_util_stdio_vsprintf+0x33c>
    1524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1526:	e000      	b.n	152a <am_util_stdio_vsprintf+0x33e>
    1528:	2300      	movs	r3, #0
    152a:	68fa      	ldr	r2, [r7, #12]
    152c:	4413      	add	r3, r2
    152e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1534:	4413      	add	r3, r2
    1536:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1538:	2300      	movs	r3, #0
    153a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    153c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1540:	68fa      	ldr	r2, [r7, #12]
    1542:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1546:	f7ff fcc5 	bl	ed4 <uint64_to_hexstr>
    154a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    154c:	68fb      	ldr	r3, [r7, #12]
    154e:	2b00      	cmp	r3, #0
    1550:	d003      	beq.n	155a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1554:	68fa      	ldr	r2, [r7, #12]
    1556:	4413      	add	r3, r2
    1558:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    155c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    155e:	4413      	add	r3, r2
    1560:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1562:	e12f      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1568:	2b00      	cmp	r3, #0
    156a:	d008      	beq.n	157e <am_util_stdio_vsprintf+0x392>
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	3307      	adds	r3, #7
    1570:	f023 0307 	bic.w	r3, r3, #7
    1574:	f103 0208 	add.w	r2, r3, #8
    1578:	607a      	str	r2, [r7, #4]
    157a:	cb18      	ldmia	r3, {r3, r4}
    157c:	e005      	b.n	158a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	1d1a      	adds	r2, r3, #4
    1582:	607a      	str	r2, [r7, #4]
    1584:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1586:	f04f 0400 	mov.w	r4, #0
    158a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1590:	2b00      	cmp	r3, #0
    1592:	d01e      	beq.n	15d2 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1594:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1598:	f7ff fbaa 	bl	cf0 <ndigits_in_u64>
    159c:	4602      	mov	r2, r0
    159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15a0:	1a9b      	subs	r3, r3, r2
    15a2:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    15a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    15aa:	4619      	mov	r1, r3
    15ac:	68f8      	ldr	r0, [r7, #12]
    15ae:	f7ff fd0d 	bl	fcc <padbuffer>
    15b2:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	2b00      	cmp	r3, #0
    15b8:	d001      	beq.n	15be <am_util_stdio_vsprintf+0x3d2>
    15ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15bc:	e000      	b.n	15c0 <am_util_stdio_vsprintf+0x3d4>
    15be:	2300      	movs	r3, #0
    15c0:	68fa      	ldr	r2, [r7, #12]
    15c2:	4413      	add	r3, r2
    15c4:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    15c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15ca:	4413      	add	r3, r2
    15cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    15ce:	2300      	movs	r3, #0
    15d0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    15d2:	68fa      	ldr	r2, [r7, #12]
    15d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    15d8:	f7ff fc34 	bl	e44 <uint64_to_str>
    15dc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d003      	beq.n	15ec <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    15e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15e6:	68fa      	ldr	r2, [r7, #12]
    15e8:	4413      	add	r3, r2
    15ea:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15f0:	4413      	add	r3, r2
    15f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15f4:	e0e6      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    15f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    15fa:	2b00      	cmp	r3, #0
    15fc:	d008      	beq.n	1610 <am_util_stdio_vsprintf+0x424>
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	3307      	adds	r3, #7
    1602:	f023 0307 	bic.w	r3, r3, #7
    1606:	f103 0208 	add.w	r2, r3, #8
    160a:	607a      	str	r2, [r7, #4]
    160c:	cb18      	ldmia	r3, {r3, r4}
    160e:	e005      	b.n	161c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	1d1a      	adds	r2, r3, #4
    1614:	607a      	str	r2, [r7, #4]
    1616:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1618:	ea4f 74e3 	mov.w	r4, r3, asr #31
    161c:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1620:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1624:	2b00      	cmp	r3, #0
    1626:	f174 0300 	sbcs.w	r3, r4, #0
    162a:	da0a      	bge.n	1642 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    162c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1630:	425b      	negs	r3, r3
    1632:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1636:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    163a:	2301      	movs	r3, #1
    163c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1640:	e006      	b.n	1650 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1642:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1646:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    164a:	2300      	movs	r3, #0
    164c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1652:	2b00      	cmp	r3, #0
    1654:	d04a      	beq.n	16ec <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1656:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    165a:	4618      	mov	r0, r3
    165c:	4621      	mov	r1, r4
    165e:	f7ff fb69 	bl	d34 <ndigits_in_i64>
    1662:	4602      	mov	r2, r0
    1664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1666:	1a9b      	subs	r3, r3, r2
    1668:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    166a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    166e:	2b00      	cmp	r3, #0
    1670:	d011      	beq.n	1696 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1674:	3b01      	subs	r3, #1
    1676:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    167c:	2b30      	cmp	r3, #48	; 0x30
    167e:	d10a      	bne.n	1696 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1680:	68fb      	ldr	r3, [r7, #12]
    1682:	2b00      	cmp	r3, #0
    1684:	d004      	beq.n	1690 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1686:	68fb      	ldr	r3, [r7, #12]
    1688:	1c5a      	adds	r2, r3, #1
    168a:	60fa      	str	r2, [r7, #12]
    168c:	222d      	movs	r2, #45	; 0x2d
    168e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1692:	3301      	adds	r3, #1
    1694:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    169a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    169c:	4619      	mov	r1, r3
    169e:	68f8      	ldr	r0, [r7, #12]
    16a0:	f7ff fc94 	bl	fcc <padbuffer>
    16a4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d001      	beq.n	16b0 <am_util_stdio_vsprintf+0x4c4>
    16ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ae:	e000      	b.n	16b2 <am_util_stdio_vsprintf+0x4c6>
    16b0:	2300      	movs	r3, #0
    16b2:	68fa      	ldr	r2, [r7, #12]
    16b4:	4413      	add	r3, r2
    16b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    16b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16bc:	4413      	add	r3, r2
    16be:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    16c0:	2300      	movs	r3, #0
    16c2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    16c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16c8:	2b00      	cmp	r3, #0
    16ca:	d01e      	beq.n	170a <am_util_stdio_vsprintf+0x51e>
    16cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    16d0:	2b20      	cmp	r3, #32
    16d2:	d11a      	bne.n	170a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d004      	beq.n	16e4 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    16da:	68fb      	ldr	r3, [r7, #12]
    16dc:	1c5a      	adds	r2, r3, #1
    16de:	60fa      	str	r2, [r7, #12]
    16e0:	222d      	movs	r2, #45	; 0x2d
    16e2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    16e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16e6:	3301      	adds	r3, #1
    16e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    16ea:	e00e      	b.n	170a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    16ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16f0:	2b00      	cmp	r3, #0
    16f2:	d00a      	beq.n	170a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d004      	beq.n	1704 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	1c5a      	adds	r2, r3, #1
    16fe:	60fa      	str	r2, [r7, #12]
    1700:	222d      	movs	r2, #45	; 0x2d
    1702:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1706:	3301      	adds	r3, #1
    1708:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    170a:	68fa      	ldr	r2, [r7, #12]
    170c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1710:	f7ff fb98 	bl	e44 <uint64_to_str>
    1714:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	2b00      	cmp	r3, #0
    171a:	d003      	beq.n	1724 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171e:	68fa      	ldr	r2, [r7, #12]
    1720:	4413      	add	r3, r2
    1722:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1728:	4413      	add	r3, r2
    172a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    172c:	e04a      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2b00      	cmp	r3, #0
    1732:	d046      	beq.n	17c2 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	3307      	adds	r3, #7
    1738:	f023 0307 	bic.w	r3, r3, #7
    173c:	f103 0208 	add.w	r2, r3, #8
    1740:	607a      	str	r2, [r7, #4]
    1742:	cb18      	ldmia	r3, {r3, r4}
    1744:	4618      	mov	r0, r3
    1746:	4621      	mov	r1, r4
    1748:	f7fe fcba 	bl	c0 <__aeabi_d2f>
    174c:	4603      	mov	r3, r0
    174e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1750:	68fb      	ldr	r3, [r7, #12]
    1752:	2214      	movs	r2, #20
    1754:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1758:	68f9      	ldr	r1, [r7, #12]
    175a:	6978      	ldr	r0, [r7, #20]
    175c:	f7ff fc5c 	bl	1018 <ftoa>
    1760:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1764:	2b00      	cmp	r3, #0
    1766:	da14      	bge.n	1792 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    176a:	f1b3 3fff 	cmp.w	r3, #4294967295
    176e:	d102      	bne.n	1776 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1770:	4b1e      	ldr	r3, [pc, #120]	; (17ec <am_util_stdio_vsprintf+0x600>)
    1772:	62bb      	str	r3, [r7, #40]	; 0x28
    1774:	e008      	b.n	1788 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1778:	f113 0f02 	cmn.w	r3, #2
    177c:	d102      	bne.n	1784 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    177e:	4b1c      	ldr	r3, [pc, #112]	; (17f0 <am_util_stdio_vsprintf+0x604>)
    1780:	62bb      	str	r3, [r7, #40]	; 0x28
    1782:	e001      	b.n	1788 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1784:	4b1b      	ldr	r3, [pc, #108]	; (17f4 <am_util_stdio_vsprintf+0x608>)
    1786:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    178c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    178e:	2303      	movs	r3, #3
    1790:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1796:	4413      	add	r3, r2
    1798:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    179c:	68fa      	ldr	r2, [r7, #12]
    179e:	4413      	add	r3, r2
    17a0:	60fb      	str	r3, [r7, #12]
                }
                break;
    17a2:	e00e      	b.n	17c2 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	2b00      	cmp	r3, #0
    17a8:	d005      	beq.n	17b6 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	1c5a      	adds	r2, r3, #1
    17ae:	60fa      	str	r2, [r7, #12]
    17b0:	68ba      	ldr	r2, [r7, #8]
    17b2:	7812      	ldrb	r2, [r2, #0]
    17b4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    17b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17b8:	3301      	adds	r3, #1
    17ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    17bc:	e002      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    17be:	bf00      	nop
    17c0:	e000      	b.n	17c4 <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    17c2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    17c4:	68bb      	ldr	r3, [r7, #8]
    17c6:	3301      	adds	r3, #1
    17c8:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    17ca:	68bb      	ldr	r3, [r7, #8]
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	2b00      	cmp	r3, #0
    17d0:	f47f ad17 	bne.w	1202 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d002      	beq.n	17e0 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    17da:	68fb      	ldr	r3, [r7, #12]
    17dc:	2200      	movs	r2, #0
    17de:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    17e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    17e2:	4618      	mov	r0, r3
    17e4:	3754      	adds	r7, #84	; 0x54
    17e6:	46bd      	mov	sp, r7
    17e8:	bd90      	pop	{r4, r7, pc}
    17ea:	bf00      	nop
    17ec:	00302e30 	.word	0x00302e30
    17f0:	00232e23 	.word	0x00232e23
    17f4:	003f2e3f 	.word	0x003f2e3f

000017f8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    17f8:	b40f      	push	{r0, r1, r2, r3}
    17fa:	b580      	push	{r7, lr}
    17fc:	b082      	sub	sp, #8
    17fe:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1800:	f107 0314 	add.w	r3, r7, #20
    1804:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1806:	683a      	ldr	r2, [r7, #0]
    1808:	6939      	ldr	r1, [r7, #16]
    180a:	4808      	ldr	r0, [pc, #32]	; (182c <am_util_stdio_printf+0x34>)
    180c:	f7ff fcee 	bl	11ec <am_util_stdio_vsprintf>
    1810:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1812:	4b07      	ldr	r3, [pc, #28]	; (1830 <am_util_stdio_printf+0x38>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	4805      	ldr	r0, [pc, #20]	; (182c <am_util_stdio_printf+0x34>)
    1818:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    181a:	687b      	ldr	r3, [r7, #4]
}
    181c:	4618      	mov	r0, r3
    181e:	3708      	adds	r7, #8
    1820:	46bd      	mov	sp, r7
    1822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1826:	b004      	add	sp, #16
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	1000108c 	.word	0x1000108c
    1830:	10001198 	.word	0x10001198

00001834 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1834:	b580      	push	{r7, lr}
    1836:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1838:	4802      	ldr	r0, [pc, #8]	; (1844 <am_util_stdio_terminal_clear+0x10>)
    183a:	f7ff ffdd 	bl	17f8 <am_util_stdio_printf>
}
    183e:	bf00      	nop
    1840:	bd80      	pop	{r7, pc}
    1842:	bf00      	nop
    1844:	000023bc 	.word	0x000023bc

00001848 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1848:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    184a:	f000 fb05 	bl	1e58 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    184e:	f000 fb71 	bl	1f34 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1852:	f000 fd2f 	bl	22b4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1856:	2001      	movs	r0, #1
    1858:	f000 fb7c 	bl	1f54 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    185c:	2001      	movs	r0, #1
    185e:	f000 f8d1 	bl	1a04 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1866:	f000 bb8b 	b.w	1f80 <am_hal_rtc_osc_disable>
    186a:	bf00      	nop

0000186c <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    186c:	4601      	mov	r1, r0
    186e:	2000      	movs	r0, #0
    1870:	f000 bd0c 	b.w	228c <am_hal_uart_string_transmit_polled>

00001874 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1876:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1878:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    187c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    187e:	7863      	ldrb	r3, [r4, #1]
    1880:	78e2      	ldrb	r2, [r4, #3]
    1882:	7925      	ldrb	r5, [r4, #4]
    1884:	79a1      	ldrb	r1, [r4, #6]
    1886:	00be      	lsls	r6, r7, #2
    1888:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    188c:	f006 0304 	and.w	r3, r6, #4
    1890:	f00e 0602 	and.w	r6, lr, #2
    1894:	431e      	orrs	r6, r3
    1896:	f042 0201 	orr.w	r2, r2, #1
    189a:	79e3      	ldrb	r3, [r4, #7]
    189c:	01ed      	lsls	r5, r5, #7
    189e:	4316      	orrs	r6, r2
    18a0:	b2ed      	uxtb	r5, r5
    18a2:	7a22      	ldrb	r2, [r4, #8]
    18a4:	0289      	lsls	r1, r1, #10
    18a6:	432e      	orrs	r6, r5
    18a8:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    18ac:	7a65      	ldrb	r5, [r4, #9]
    18ae:	02db      	lsls	r3, r3, #11
    18b0:	430e      	orrs	r6, r1
    18b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    18b6:	0312      	lsls	r2, r2, #12
    18b8:	7aa1      	ldrb	r1, [r4, #10]
    18ba:	431e      	orrs	r6, r3
    18bc:	042d      	lsls	r5, r5, #16
    18be:	b293      	uxth	r3, r2
    18c0:	7ae2      	ldrb	r2, [r4, #11]
    18c2:	431e      	orrs	r6, r3
    18c4:	0509      	lsls	r1, r1, #20
    18c6:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    18ca:	0612      	lsls	r2, r2, #24
    18cc:	4333      	orrs	r3, r6
    18ce:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    18d2:	00bf      	lsls	r7, r7, #2
    18d4:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    18d8:	4333      	orrs	r3, r6
    18da:	430b      	orrs	r3, r1
    18dc:	f007 0508 	and.w	r5, r7, #8
    18e0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    18e2:	f000 f9b1 	bl	1c48 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18e6:	482c      	ldr	r0, [pc, #176]	; (1998 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18e8:	4b2c      	ldr	r3, [pc, #176]	; (199c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18ea:	6005      	str	r5, [r0, #0]
    18ec:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18ee:	681e      	ldr	r6, [r3, #0]
    18f0:	0777      	lsls	r7, r6, #29
    18f2:	d41e      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    18f4:	681f      	ldr	r7, [r3, #0]
    18f6:	077e      	lsls	r6, r7, #29
    18f8:	f102 32ff 	add.w	r2, r2, #4294967295
    18fc:	d419      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    18fe:	6819      	ldr	r1, [r3, #0]
    1900:	074f      	lsls	r7, r1, #29
    1902:	d416      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1904:	6818      	ldr	r0, [r3, #0]
    1906:	0746      	lsls	r6, r0, #29
    1908:	d413      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    190a:	681e      	ldr	r6, [r3, #0]
    190c:	0770      	lsls	r0, r6, #29
    190e:	d410      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1910:	681f      	ldr	r7, [r3, #0]
    1912:	0779      	lsls	r1, r7, #29
    1914:	d40d      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1916:	6819      	ldr	r1, [r3, #0]
    1918:	074f      	lsls	r7, r1, #29
    191a:	d40a      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    191c:	6818      	ldr	r0, [r3, #0]
    191e:	0746      	lsls	r6, r0, #29
    1920:	d407      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1922:	681e      	ldr	r6, [r3, #0]
    1924:	0770      	lsls	r0, r6, #29
    1926:	d404      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    1928:	681f      	ldr	r7, [r3, #0]
    192a:	0779      	lsls	r1, r7, #29
    192c:	d401      	bmi.n	1932 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    192e:	3a09      	subs	r2, #9
    1930:	d1dd      	bne.n	18ee <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1932:	4b1a      	ldr	r3, [pc, #104]	; (199c <am_hal_cachectrl_enable+0x128>)
    1934:	681a      	ldr	r2, [r3, #0]
    1936:	f042 0101 	orr.w	r1, r2, #1
    193a:	6019      	str	r1, [r3, #0]
    193c:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    193e:	6818      	ldr	r0, [r3, #0]
    1940:	0740      	lsls	r0, r0, #29
    1942:	d41e      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1944:	681e      	ldr	r6, [r3, #0]
    1946:	0771      	lsls	r1, r6, #29
    1948:	f102 32ff 	add.w	r2, r2, #4294967295
    194c:	d419      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    194e:	681f      	ldr	r7, [r3, #0]
    1950:	077f      	lsls	r7, r7, #29
    1952:	d416      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1954:	6819      	ldr	r1, [r3, #0]
    1956:	074e      	lsls	r6, r1, #29
    1958:	d413      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    195a:	6818      	ldr	r0, [r3, #0]
    195c:	0740      	lsls	r0, r0, #29
    195e:	d410      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1960:	681e      	ldr	r6, [r3, #0]
    1962:	0771      	lsls	r1, r6, #29
    1964:	d40d      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1966:	681f      	ldr	r7, [r3, #0]
    1968:	077f      	lsls	r7, r7, #29
    196a:	d40a      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    196c:	6819      	ldr	r1, [r3, #0]
    196e:	074e      	lsls	r6, r1, #29
    1970:	d407      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1972:	6818      	ldr	r0, [r3, #0]
    1974:	0740      	lsls	r0, r0, #29
    1976:	d404      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    1978:	681e      	ldr	r6, [r3, #0]
    197a:	0771      	lsls	r1, r6, #29
    197c:	d401      	bmi.n	1982 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    197e:	3a09      	subs	r2, #9
    1980:	d1dd      	bne.n	193e <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1982:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1984:	4f04      	ldr	r7, [pc, #16]	; (1998 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1986:	0223      	lsls	r3, r4, #8
    1988:	f403 7100 	and.w	r1, r3, #512	; 0x200
    198c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1990:	4311      	orrs	r1, r2
    1992:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1994:	6039      	str	r1, [r7, #0]
    1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1998:	40018000 	.word	0x40018000
    199c:	40018008 	.word	0x40018008

000019a0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    19a0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    19a2:	4604      	mov	r4, r0
    19a4:	b120      	cbz	r0, 19b0 <am_hal_clkgen_sysclk_select+0x10>
    19a6:	4a06      	ldr	r2, [pc, #24]	; (19c0 <am_hal_clkgen_sysclk_select+0x20>)
    19a8:	4806      	ldr	r0, [pc, #24]	; (19c4 <am_hal_clkgen_sysclk_select+0x24>)
    19aa:	2150      	movs	r1, #80	; 0x50
    19ac:	f000 f856 	bl	1a5c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b0:	4b05      	ldr	r3, [pc, #20]	; (19c8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    19b2:	4906      	ldr	r1, [pc, #24]	; (19cc <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b4:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    19b6:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    19b8:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    19ba:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    19bc:	601a      	str	r2, [r3, #0]
    19be:	bd10      	pop	{r4, pc}
    19c0:	000023dc 	.word	0x000023dc
    19c4:	00002414 	.word	0x00002414
    19c8:	40004014 	.word	0x40004014
    19cc:	40004018 	.word	0x40004018

000019d0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    19d0:	4b04      	ldr	r3, [pc, #16]	; (19e4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    19d2:	4905      	ldr	r1, [pc, #20]	; (19e8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    19d4:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    19d6:	4805      	ldr	r0, [pc, #20]	; (19ec <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    19d8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    19dc:	bf08      	it	eq
    19de:	4608      	moveq	r0, r1
    19e0:	4770      	bx	lr
    19e2:	bf00      	nop
    19e4:	40004018 	.word	0x40004018
    19e8:	02dc6c00 	.word	0x02dc6c00
    19ec:	016e3600 	.word	0x016e3600

000019f0 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    19f0:	0783      	lsls	r3, r0, #30
    19f2:	d004      	beq.n	19fe <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    19f4:	4a02      	ldr	r2, [pc, #8]	; (1a00 <am_hal_clkgen_osc_start+0x10>)
    19f6:	6813      	ldr	r3, [r2, #0]
    19f8:	ea23 0000 	bic.w	r0, r3, r0
    19fc:	6010      	str	r0, [r2, #0]
    19fe:	4770      	bx	lr
    1a00:	4000400c 	.word	0x4000400c

00001a04 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a04:	0783      	lsls	r3, r0, #30
    1a06:	d003      	beq.n	1a10 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1a08:	4a02      	ldr	r2, [pc, #8]	; (1a14 <am_hal_clkgen_osc_stop+0x10>)
    1a0a:	6813      	ldr	r3, [r2, #0]
    1a0c:	4318      	orrs	r0, r3
    1a0e:	6010      	str	r0, [r2, #0]
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop
    1a14:	4000400c 	.word	0x4000400c

00001a18 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1a18:	2801      	cmp	r0, #1
    1a1a:	d900      	bls.n	1a1e <am_hal_clkgen_uarten_set+0x6>

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
}
    1a1c:	4770      	bx	lr
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1a1e:	2903      	cmp	r1, #3
    1a20:	d8fc      	bhi.n	1a1c <am_hal_clkgen_uarten_set+0x4>
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a22:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    1a26:	b430      	push	{r4, r5}
    1a28:	b082      	sub	sp, #8
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a2a:	9301      	str	r3, [sp, #4]
    1a2c:	b672      	cpsid	i

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1a2e:	4b0a      	ldr	r3, [pc, #40]	; (1a58 <am_hal_clkgen_uarten_set+0x40>)
    1a30:	00c5      	lsls	r5, r0, #3
    1a32:	681c      	ldr	r4, [r3, #0]
    1a34:	2203      	movs	r2, #3
    1a36:	40aa      	lsls	r2, r5
    1a38:	ea24 0502 	bic.w	r5, r4, r2
    1a3c:	601d      	str	r5, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1a3e:	fb00 f000 	mul.w	r0, r0, r0
    1a42:	681a      	ldr	r2, [r3, #0]
    1a44:	00c0      	lsls	r0, r0, #3
    1a46:	4081      	lsls	r1, r0
    1a48:	4311      	orrs	r1, r2
    1a4a:	6019      	str	r1, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    1a4c:	9b01      	ldr	r3, [sp, #4]
    1a4e:	f383 8810 	msr	PRIMASK, r3
}
    1a52:	b002      	add	sp, #8
    1a54:	bc30      	pop	{r4, r5}
    1a56:	4770      	bx	lr
    1a58:	40004034 	.word	0x40004034

00001a5c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1a5c:	e7fe      	b.n	1a5c <am_hal_debug_error>
    1a5e:	bf00      	nop

00001a60 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a60:	4b01      	ldr	r3, [pc, #4]	; (1a68 <am_hal_flash_delay+0x8>)
    1a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1a64:	4708      	bx	r1
    1a66:	bf00      	nop
    1a68:	1000103c 	.word	0x1000103c

00001a6c <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1a6c:	08c3      	lsrs	r3, r0, #3
    1a6e:	f003 0104 	and.w	r1, r3, #4
    1a72:	4a04      	ldr	r2, [pc, #16]	; (1a84 <am_hal_gpio_out_enable_bit_get+0x18>)
    1a74:	588b      	ldr	r3, [r1, r2]
    1a76:	f000 001f 	and.w	r0, r0, #31
    1a7a:	fa23 f100 	lsr.w	r1, r3, r0
}
    1a7e:	f001 0001 	and.w	r0, r1, #1
    1a82:	4770      	bx	lr
    1a84:	400100a0 	.word	0x400100a0

00001a88 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    1a88:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1a8a:	4c05      	ldr	r4, [pc, #20]	; (1aa0 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1a8c:	4a05      	ldr	r2, [pc, #20]	; (1aa4 <am_hal_gpio_int_enable+0x1c>)
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1a8e:	6823      	ldr	r3, [r4, #0]
    1a90:	4319      	orrs	r1, r3
    1a92:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1a94:	6811      	ldr	r1, [r2, #0]
}
    1a96:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1a9a:	4308      	orrs	r0, r1
    1a9c:	6010      	str	r0, [r2, #0]
}
    1a9e:	4770      	bx	lr
    1aa0:	40010210 	.word	0x40010210
    1aa4:	40010200 	.word	0x40010200

00001aa8 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    1aa8:	b082      	sub	sp, #8
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1aaa:	f3ef 8310 	mrs	r3, PRIMASK
    1aae:	9301      	str	r3, [sp, #4]
    1ab0:	b672      	cpsid	i
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1ab2:	4a04      	ldr	r2, [pc, #16]	; (1ac4 <am_hal_gpio_int_clear+0x1c>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <am_hal_gpio_int_clear+0x20>)
{
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1ab6:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1ab8:	6018      	str	r0, [r3, #0]
    AM_CRITICAL_END_ASM
    1aba:	9801      	ldr	r0, [sp, #4]
    1abc:	f380 8810 	msr	PRIMASK, r0
}
    1ac0:	b002      	add	sp, #8
    1ac2:	4770      	bx	lr
    1ac4:	40010218 	.word	0x40010218
    1ac8:	40010208 	.word	0x40010208

00001acc <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1acc:	280f      	cmp	r0, #15
    1ace:	d80b      	bhi.n	1ae8 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1ad0:	2805      	cmp	r0, #5
    1ad2:	d013      	beq.n	1afc <am_hal_interrupt_enable+0x30>
    1ad4:	2806      	cmp	r0, #6
    1ad6:	d017      	beq.n	1b08 <am_hal_interrupt_enable+0x3c>
    1ad8:	2804      	cmp	r0, #4
    1ada:	d104      	bne.n	1ae6 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1adc:	4a0d      	ldr	r2, [pc, #52]	; (1b14 <am_hal_interrupt_enable+0x48>)
    1ade:	6813      	ldr	r3, [r2, #0]
    1ae0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1ae4:	6010      	str	r0, [r2, #0]
    1ae6:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1ae8:	f1a0 0310 	sub.w	r3, r0, #16
    1aec:	f003 0c1f 	and.w	ip, r3, #31
    1af0:	2001      	movs	r0, #1
    1af2:	4909      	ldr	r1, [pc, #36]	; (1b18 <am_hal_interrupt_enable+0x4c>)
    1af4:	fa00 f20c 	lsl.w	r2, r0, ip
    1af8:	600a      	str	r2, [r1, #0]
    1afa:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1afc:	4805      	ldr	r0, [pc, #20]	; (1b14 <am_hal_interrupt_enable+0x48>)
    1afe:	6801      	ldr	r1, [r0, #0]
    1b00:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b04:	6002      	str	r2, [r0, #0]
            break;
    1b06:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1b08:	4902      	ldr	r1, [pc, #8]	; (1b14 <am_hal_interrupt_enable+0x48>)
    1b0a:	680a      	ldr	r2, [r1, #0]
    1b0c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1b10:	600b      	str	r3, [r1, #0]
            break;
    1b12:	4770      	bx	lr
    1b14:	e000ed24 	.word	0xe000ed24
    1b18:	e000e100 	.word	0xe000e100

00001b1c <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b1c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1b20:	b662      	cpsie	i
    __asm("    bx lr");
    1b22:	4770      	bx	lr

00001b24 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b24:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1b28:	b672      	cpsid	i
    __asm("    bx lr");
    1b2a:	4770      	bx	lr

00001b2c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1b2c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1b30:	4770      	bx	lr
    1b32:	bf00      	nop

00001b34 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1b34:	4a0d      	ldr	r2, [pc, #52]	; (1b6c <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b36:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b38:	490e      	ldr	r1, [pc, #56]	; (1b74 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b3a:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1b3c:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1b3e:	6814      	ldr	r4, [r2, #0]
    1b40:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b42:	6809      	ldr	r1, [r1, #0]
    1b44:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b46:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b48:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b4a:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b4c:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b4e:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b50:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b54:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b56:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b58:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b60:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b62:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b64:	6142      	str	r2, [r0, #20]
}
    1b66:	bc70      	pop	{r4, r5, r6}
    1b68:	4770      	bx	lr
    1b6a:	bf00      	nop
    1b6c:	400201c4 	.word	0x400201c4
    1b70:	400201cc 	.word	0x400201cc
    1b74:	400201c0 	.word	0x400201c0

00001b78 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1b78:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1b7a:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1b7c:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1b7e:	b1c0      	cbz	r0, 1bb2 <am_hal_pwrctrl_periph_enable+0x3a>
    1b80:	1e43      	subs	r3, r0, #1
    1b82:	4203      	tst	r3, r0
    1b84:	d115      	bne.n	1bb2 <am_hal_pwrctrl_periph_enable+0x3a>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b86:	f3ef 8010 	mrs	r0, PRIMASK
    1b8a:	9001      	str	r0, [sp, #4]
    1b8c:	b672      	cpsid	i

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1b8e:	4a18      	ldr	r2, [pc, #96]	; (1bf0 <am_hal_pwrctrl_periph_enable+0x78>)
    1b90:	6811      	ldr	r1, [r2, #0]
    1b92:	4321      	orrs	r1, r4
    1b94:	6011      	str	r1, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1b96:	9b01      	ldr	r3, [sp, #4]
    1b98:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1b9c:	200e      	movs	r0, #14
    1b9e:	f7ff ff5f 	bl	1a60 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1ba2:	f014 0f0e 	tst.w	r4, #14
    1ba6:	d10a      	bne.n	1bbe <am_hal_pwrctrl_periph_enable+0x46>
    1ba8:	f014 0f70 	tst.w	r4, #112	; 0x70
    1bac:	d00e      	beq.n	1bcc <am_hal_pwrctrl_periph_enable+0x54>
    1bae:	2408      	movs	r4, #8
    1bb0:	e006      	b.n	1bc0 <am_hal_pwrctrl_periph_enable+0x48>
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1bb2:	4a10      	ldr	r2, [pc, #64]	; (1bf4 <am_hal_pwrctrl_periph_enable+0x7c>)
    1bb4:	4810      	ldr	r0, [pc, #64]	; (1bf8 <am_hal_pwrctrl_periph_enable+0x80>)
    1bb6:	215d      	movs	r1, #93	; 0x5d
    1bb8:	f7ff ff50 	bl	1a5c <am_hal_debug_error>
    1bbc:	e7e3      	b.n	1b86 <am_hal_pwrctrl_periph_enable+0xe>
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1bbe:	2404      	movs	r4, #4
    1bc0:	4a0e      	ldr	r2, [pc, #56]	; (1bfc <am_hal_pwrctrl_periph_enable+0x84>)
    1bc2:	6811      	ldr	r1, [r2, #0]
    1bc4:	420c      	tst	r4, r1
    1bc6:	d0fc      	beq.n	1bc2 <am_hal_pwrctrl_periph_enable+0x4a>
}
    1bc8:	b002      	add	sp, #8
    1bca:	bd10      	pop	{r4, pc}
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1bcc:	f240 1081 	movw	r0, #385	; 0x181
    1bd0:	4020      	ands	r0, r4
    1bd2:	b940      	cbnz	r0, 1be6 <am_hal_pwrctrl_periph_enable+0x6e>
    1bd4:	05a3      	lsls	r3, r4, #22
    1bd6:	d408      	bmi.n	1bea <am_hal_pwrctrl_periph_enable+0x72>
    1bd8:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1bdc:	bf14      	ite	ne
    1bde:	2410      	movne	r4, #16
    1be0:	f04f 34ff 	moveq.w	r4, #4294967295
    1be4:	e7ec      	b.n	1bc0 <am_hal_pwrctrl_periph_enable+0x48>
    1be6:	2402      	movs	r4, #2
    1be8:	e7ea      	b.n	1bc0 <am_hal_pwrctrl_periph_enable+0x48>
    1bea:	2480      	movs	r4, #128	; 0x80
    1bec:	e7e8      	b.n	1bc0 <am_hal_pwrctrl_periph_enable+0x48>
    1bee:	bf00      	nop
    1bf0:	40021008 	.word	0x40021008
    1bf4:	0000242c 	.word	0x0000242c
    1bf8:	00002460 	.word	0x00002460
    1bfc:	40021014 	.word	0x40021014

00001c00 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1c00:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c02:	4604      	mov	r4, r0
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1c04:	b082      	sub	sp, #8

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c06:	b110      	cbz	r0, 1c0e <am_hal_pwrctrl_periph_disable+0xe>
    1c08:	1e43      	subs	r3, r0, #1
    1c0a:	4203      	tst	r3, r0
    1c0c:	d004      	beq.n	1c18 <am_hal_pwrctrl_periph_disable+0x18>
    1c0e:	4a0b      	ldr	r2, [pc, #44]	; (1c3c <am_hal_pwrctrl_periph_disable+0x3c>)
    1c10:	480b      	ldr	r0, [pc, #44]	; (1c40 <am_hal_pwrctrl_periph_disable+0x40>)
    1c12:	218d      	movs	r1, #141	; 0x8d
    1c14:	f7ff ff22 	bl	1a5c <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c18:	f3ef 8010 	mrs	r0, PRIMASK
    1c1c:	9001      	str	r0, [sp, #4]
    1c1e:	b672      	cpsid	i

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1c20:	4a08      	ldr	r2, [pc, #32]	; (1c44 <am_hal_pwrctrl_periph_disable+0x44>)
    1c22:	6811      	ldr	r1, [r2, #0]
    1c24:	ea21 0404 	bic.w	r4, r1, r4
    1c28:	6014      	str	r4, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    1c2a:	9b01      	ldr	r3, [sp, #4]
    1c2c:	f383 8810 	msr	PRIMASK, r3

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    1c30:	200e      	movs	r0, #14
    1c32:	f7ff ff15 	bl	1a60 <am_hal_flash_delay>
}
    1c36:	b002      	add	sp, #8
    1c38:	bd10      	pop	{r4, pc}
    1c3a:	bf00      	nop
    1c3c:	0000242c 	.word	0x0000242c
    1c40:	00002460 	.word	0x00002460
    1c44:	40021008 	.word	0x40021008

00001c48 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c4c:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1c4e:	d03a      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1c50:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1c54:	f000 809d 	beq.w	1d92 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1c58:	2801      	cmp	r0, #1
    1c5a:	f000 809d 	beq.w	1d98 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1c5e:	2803      	cmp	r0, #3
    1c60:	f000 80a6 	beq.w	1db0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1c64:	2807      	cmp	r0, #7
    1c66:	f000 809c 	beq.w	1da2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1c6a:	280f      	cmp	r0, #15
    1c6c:	f000 80a5 	beq.w	1dba <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1c70:	281f      	cmp	r0, #31
    1c72:	f000 80b1 	beq.w	1dd8 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1c76:	283f      	cmp	r0, #63	; 0x3f
    1c78:	f000 80b5 	beq.w	1de6 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1c7c:	287f      	cmp	r0, #127	; 0x7f
    1c7e:	f000 80b9 	beq.w	1df4 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1c82:	28ff      	cmp	r0, #255	; 0xff
    1c84:	f000 80a0 	beq.w	1dc8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1c88:	f240 13ff 	movw	r3, #511	; 0x1ff
    1c8c:	4298      	cmp	r0, r3
    1c8e:	f000 80b8 	beq.w	1e02 <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1c92:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1c96:	4288      	cmp	r0, r1
    1c98:	f000 80b9 	beq.w	1e0e <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1c9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1ca0:	4290      	cmp	r0, r2
    1ca2:	d00e      	beq.n	1cc2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1ca4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1ca8:	f000 80b7 	beq.w	1e1a <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1cac:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1cb0:	42a0      	cmp	r0, r4
    1cb2:	f000 80b5 	beq.w	1e20 <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1cb6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1cba:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1cbe:	4560      	cmp	r0, ip
    1cc0:	d132      	bne.n	1d28 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1cc2:	495c      	ldr	r1, [pc, #368]	; (1e34 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1cc4:	e066      	b.n	1d94 <am_hal_pwrctrl_memory_enable+0x14c>
    1cc6:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1cca:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1ccc:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1cce:	4c5a      	ldr	r4, [pc, #360]	; (1e38 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1cd0:	6822      	ldr	r2, [r4, #0]
    1cd2:	402a      	ands	r2, r5
    1cd4:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1cd6:	4d58      	ldr	r5, [pc, #352]	; (1e38 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1cd8:	682c      	ldr	r4, [r5, #0]
    1cda:	4320      	orrs	r0, r4
    1cdc:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d029      	beq.n	1d36 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1ce2:	4a56      	ldr	r2, [pc, #344]	; (1e3c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1ce4:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1ce6:	4203      	tst	r3, r0
    1ce8:	bf18      	it	ne
    1cea:	20c6      	movne	r0, #198	; 0xc6
    1cec:	d01f      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cee:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1cf0:	422b      	tst	r3, r5
    1cf2:	d01c      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cf4:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1cf6:	4223      	tst	r3, r4
    1cf8:	d019      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cfa:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1cfc:	422b      	tst	r3, r5
    1cfe:	d016      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d00:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d02:	4223      	tst	r3, r4
    1d04:	d013      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d06:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d08:	422b      	tst	r3, r5
    1d0a:	d010      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d0c:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d0e:	4223      	tst	r3, r4
    1d10:	d00d      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d12:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d14:	422b      	tst	r3, r5
    1d16:	d00a      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d18:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d1a:	4223      	tst	r3, r4
    1d1c:	d007      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d1e:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1d20:	422b      	tst	r3, r5
    1d22:	d004      	beq.n	1d2e <am_hal_pwrctrl_memory_enable+0xe6>
    1d24:	3809      	subs	r0, #9
    1d26:	d1e2      	bne.n	1cee <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1d28:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1d2a:	bc30      	pop	{r4, r5}
    1d2c:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1d2e:	b911      	cbnz	r1, 1d36 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1d30:	2001      	movs	r0, #1
}
    1d32:	bc30      	pop	{r4, r5}
    1d34:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d36:	4b41      	ldr	r3, [pc, #260]	; (1e3c <am_hal_pwrctrl_memory_enable+0x1f4>)
    1d38:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d3a:	ea31 0402 	bics.w	r4, r1, r2
    1d3e:	bf18      	it	ne
    1d40:	24c6      	movne	r4, #198	; 0xc6
    1d42:	d0f5      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d44:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d46:	ea31 0000 	bics.w	r0, r1, r0
    1d4a:	d0f1      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d4c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d4e:	ea31 0005 	bics.w	r0, r1, r5
    1d52:	d0ed      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d54:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d56:	ea31 0002 	bics.w	r0, r1, r2
    1d5a:	d0e9      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d5c:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d5e:	ea31 0000 	bics.w	r0, r1, r0
    1d62:	d0e5      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d64:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d66:	ea31 0005 	bics.w	r0, r1, r5
    1d6a:	d0e1      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d6c:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d6e:	ea31 0002 	bics.w	r0, r1, r2
    1d72:	d0dd      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d74:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d76:	ea31 0000 	bics.w	r0, r1, r0
    1d7a:	d0d9      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d7c:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d7e:	ea31 0005 	bics.w	r0, r1, r5
    1d82:	d0d5      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d84:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1d86:	ea31 0002 	bics.w	r0, r1, r2
    1d8a:	d0d1      	beq.n	1d30 <am_hal_pwrctrl_memory_enable+0xe8>
    1d8c:	3c09      	subs	r4, #9
    1d8e:	d1d9      	bne.n	1d44 <am_hal_pwrctrl_memory_enable+0xfc>
    1d90:	e7ca      	b.n	1d28 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1d92:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1d94:	2300      	movs	r3, #0
    1d96:	e79e      	b.n	1cd6 <am_hal_pwrctrl_memory_enable+0x8e>
    1d98:	4d29      	ldr	r5, [pc, #164]	; (1e40 <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d9a:	4b2a      	ldr	r3, [pc, #168]	; (1e44 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1da0:	e795      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1da2:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1da6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1daa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1dae:	e78e      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1db0:	4d25      	ldr	r5, [pc, #148]	; (1e48 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1db2:	4b26      	ldr	r3, [pc, #152]	; (1e4c <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1db4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1db8:	e789      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1dba:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dbe:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1dc2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1dc6:	e782      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1dc8:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dcc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1dd0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1dd4:	20ff      	movs	r0, #255	; 0xff
    1dd6:	e77a      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1dd8:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ddc:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1de0:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1de4:	e773      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1de6:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1dea:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1dee:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1df2:	e76c      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1df4:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1df8:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1dfc:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e00:	e765      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    1e02:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e06:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1e0a:	4911      	ldr	r1, [pc, #68]	; (1e50 <am_hal_pwrctrl_memory_enable+0x208>)
    1e0c:	e75f      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1e0e:	4911      	ldr	r1, [pc, #68]	; (1e54 <am_hal_pwrctrl_memory_enable+0x20c>)
    1e10:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1e18:	e759      	b.n	1cce <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e1a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e1e:	e7b9      	b.n	1d94 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1e20:	4805      	ldr	r0, [pc, #20]	; (1e38 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e22:	6803      	ldr	r3, [r0, #0]
    1e24:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1e28:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1e2a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1e2e:	2100      	movs	r1, #0
    1e30:	e757      	b.n	1ce2 <am_hal_pwrctrl_memory_enable+0x9a>
    1e32:	bf00      	nop
    1e34:	0007ff00 	.word	0x0007ff00
    1e38:	40021010 	.word	0x40021010
    1e3c:	40021014 	.word	0x40021014
    1e40:	fffff801 	.word	0xfffff801
    1e44:	0007fe00 	.word	0x0007fe00
    1e48:	fffff803 	.word	0xfffff803
    1e4c:	0007fc00 	.word	0x0007fc00
    1e50:	0001ff00 	.word	0x0001ff00
    1e54:	0003ff00 	.word	0x0003ff00

00001e58 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e58:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <am_hal_pwrctrl_bucks_init+0x40>)
    1e5a:	681a      	ldr	r2, [r3, #0]
    1e5c:	0792      	lsls	r2, r2, #30
    1e5e:	d502      	bpl.n	1e66 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1e60:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1e62:	07c3      	lsls	r3, r0, #31
    1e64:	d40e      	bmi.n	1e84 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e66:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e68:	4a0b      	ldr	r2, [pc, #44]	; (1e98 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1e6a:	6819      	ldr	r1, [r3, #0]
    1e6c:	f041 0002 	orr.w	r0, r1, #2
    1e70:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1e72:	6819      	ldr	r1, [r3, #0]
    1e74:	f041 0001 	orr.w	r0, r1, #1
    1e78:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e7a:	6813      	ldr	r3, [r2, #0]
    1e7c:	f003 0103 	and.w	r1, r3, #3
    1e80:	2903      	cmp	r1, #3
    1e82:	d1fa      	bne.n	1e7a <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1e84:	4a04      	ldr	r2, [pc, #16]	; (1e98 <am_hal_pwrctrl_bucks_init+0x40>)
    1e86:	6810      	ldr	r0, [r2, #0]
    1e88:	f000 0303 	and.w	r3, r0, #3
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d1fa      	bne.n	1e86 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1e90:	2042      	movs	r0, #66	; 0x42
    1e92:	f7ff bde5 	b.w	1a60 <am_hal_flash_delay>
    1e96:	bf00      	nop
    1e98:	40021004 	.word	0x40021004
    1e9c:	40021000 	.word	0x40021000

00001ea0 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ea0:	4b0b      	ldr	r3, [pc, #44]	; (1ed0 <am_hal_pwrctrl_bucks_enable+0x30>)
    1ea2:	681a      	ldr	r2, [r3, #0]
    1ea4:	0792      	lsls	r2, r2, #30
    1ea6:	d502      	bpl.n	1eae <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ea8:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1eaa:	07c3      	lsls	r3, r0, #31
    1eac:	d40e      	bmi.n	1ecc <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1eae:	4b09      	ldr	r3, [pc, #36]	; (1ed4 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1eb0:	4a07      	ldr	r2, [pc, #28]	; (1ed0 <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1eb2:	6819      	ldr	r1, [r3, #0]
    1eb4:	f041 0002 	orr.w	r0, r1, #2
    1eb8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1eba:	6819      	ldr	r1, [r3, #0]
    1ebc:	f041 0001 	orr.w	r0, r1, #1
    1ec0:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	f003 0103 	and.w	r1, r3, #3
    1ec8:	2903      	cmp	r1, #3
    1eca:	d1fa      	bne.n	1ec2 <am_hal_pwrctrl_bucks_enable+0x22>
    1ecc:	4770      	bx	lr
    1ece:	bf00      	nop
    1ed0:	40021004 	.word	0x40021004
    1ed4:	40021000 	.word	0x40021000

00001ed8 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1ed8:	4b12      	ldr	r3, [pc, #72]	; (1f24 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1eda:	681a      	ldr	r2, [r3, #0]
    1edc:	0792      	lsls	r2, r2, #30
    1ede:	d402      	bmi.n	1ee6 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1ee0:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1ee2:	07c3      	lsls	r3, r0, #31
    1ee4:	d51c      	bpl.n	1f20 <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ee6:	4910      	ldr	r1, [pc, #64]	; (1f28 <am_hal_pwrctrl_bucks_disable+0x50>)
    1ee8:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1eea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1eee:	2a20      	cmp	r2, #32
    1ef0:	d00b      	beq.n	1f0a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1ef2:	4b0e      	ldr	r3, [pc, #56]	; (1f2c <am_hal_pwrctrl_bucks_disable+0x54>)
    1ef4:	681a      	ldr	r2, [r3, #0]
    1ef6:	f022 0002 	bic.w	r0, r2, #2
    1efa:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1efc:	6819      	ldr	r1, [r3, #0]
    1efe:	f021 0201 	bic.w	r2, r1, #1
    1f02:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1f04:	200a      	movs	r0, #10
    1f06:	f7ff bdab 	b.w	1a60 <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1f0a:	4809      	ldr	r0, [pc, #36]	; (1f30 <am_hal_pwrctrl_bucks_disable+0x58>)
    1f0c:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1f0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1f12:	d1ee      	bne.n	1ef2 <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f14:	4805      	ldr	r0, [pc, #20]	; (1f2c <am_hal_pwrctrl_bucks_disable+0x54>)
    1f16:	6803      	ldr	r3, [r0, #0]
    1f18:	f003 0105 	and.w	r1, r3, #5
    1f1c:	6001      	str	r1, [r0, #0]
    1f1e:	e7f1      	b.n	1f04 <am_hal_pwrctrl_bucks_disable+0x2c>
    1f20:	4770      	bx	lr
    1f22:	bf00      	nop
    1f24:	40021004 	.word	0x40021004
    1f28:	4002000c 	.word	0x4002000c
    1f2c:	40021000 	.word	0x40021000
    1f30:	40021008 	.word	0x40021008

00001f34 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1f34:	4905      	ldr	r1, [pc, #20]	; (1f4c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f36:	4a06      	ldr	r2, [pc, #24]	; (1f50 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1f38:	680b      	ldr	r3, [r1, #0]
    1f3a:	f043 0006 	orr.w	r0, r3, #6
    1f3e:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f40:	6811      	ldr	r1, [r2, #0]
    1f42:	f021 0304 	bic.w	r3, r1, #4
    1f46:	6013      	str	r3, [r2, #0]
    1f48:	4770      	bx	lr
    1f4a:	bf00      	nop
    1f4c:	40021018 	.word	0x40021018
    1f50:	40021000 	.word	0x40021000

00001f54 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f54:	4a05      	ldr	r2, [pc, #20]	; (1f6c <am_hal_rtc_osc_select+0x18>)
    1f56:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1f58:	b918      	cbnz	r0, 1f62 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f5a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1f5e:	6010      	str	r0, [r2, #0]
    1f60:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1f62:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1f66:	6011      	str	r1, [r2, #0]
    1f68:	4770      	bx	lr
    1f6a:	bf00      	nop
    1f6c:	4000400c 	.word	0x4000400c

00001f70 <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    1f70:	4a02      	ldr	r2, [pc, #8]	; (1f7c <am_hal_rtc_osc_enable+0xc>)
    1f72:	6813      	ldr	r3, [r2, #0]
    1f74:	f023 0010 	bic.w	r0, r3, #16
    1f78:	6010      	str	r0, [r2, #0]
    1f7a:	4770      	bx	lr
    1f7c:	40004050 	.word	0x40004050

00001f80 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1f80:	4a02      	ldr	r2, [pc, #8]	; (1f8c <am_hal_rtc_osc_disable+0xc>)
    1f82:	6813      	ldr	r3, [r2, #0]
    1f84:	f043 0010 	orr.w	r0, r3, #16
    1f88:	6010      	str	r0, [r2, #0]
    1f8a:	4770      	bx	lr
    1f8c:	40004050 	.word	0x40004050

00001f90 <am_hal_rtc_int_enable>:
am_hal_rtc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(RTC, INTEN) |= ui32Interrupt;
    1f90:	4a02      	ldr	r2, [pc, #8]	; (1f9c <am_hal_rtc_int_enable+0xc>)
    1f92:	6813      	ldr	r3, [r2, #0]
    1f94:	4318      	orrs	r0, r3
    1f96:	6010      	str	r0, [r2, #0]
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop
    1f9c:	40004100 	.word	0x40004100

00001fa0 <am_hal_rtc_int_clear>:
am_hal_rtc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(RTC, INTCLR) = ui32Interrupt;
    1fa0:	4b01      	ldr	r3, [pc, #4]	; (1fa8 <am_hal_rtc_int_clear+0x8>)
    1fa2:	6018      	str	r0, [r3, #0]
    1fa4:	4770      	bx	lr
    1fa6:	bf00      	nop
    1fa8:	40004108 	.word	0x40004108

00001fac <am_hal_rtc_alarm_interval_set>:
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1fac:	2808      	cmp	r0, #8
//! @return None.
//
//*****************************************************************************
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    1fae:	b410      	push	{r4}
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1fb0:	d01c      	beq.n	1fec <am_hal_rtc_alarm_interval_set+0x40>
    1fb2:	2809      	cmp	r0, #9
    1fb4:	d110      	bne.n	1fd8 <am_hal_rtc_alarm_interval_set+0x2c>
    1fb6:	230e      	movs	r3, #14
        //
        // If repeat every 100th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_100TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_100TH;
    1fb8:	22ff      	movs	r2, #255	; 0xff
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    1fba:	4c0e      	ldr	r4, [pc, #56]	; (1ff4 <am_hal_rtc_alarm_interval_set+0x48>)

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    1fbc:	490e      	ldr	r1, [pc, #56]	; (1ff8 <am_hal_rtc_alarm_interval_set+0x4c>)
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    1fbe:	6820      	ldr	r0, [r4, #0]
    1fc0:	f020 000e 	bic.w	r0, r0, #14
    1fc4:	4318      	orrs	r0, r3
    1fc6:	6020      	str	r0, [r4, #0]

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    1fc8:	680b      	ldr	r3, [r1, #0]
    1fca:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    1fce:	4322      	orrs	r2, r4
    1fd0:	600a      	str	r2, [r1, #0]
}
    1fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1fd6:	4770      	bx	lr
        //
        default:
            //
            // Get the current value of the ALM100 field.
            //
            ui32Value = AM_BFR(RTC, ALMLOW, ALM100);
    1fd8:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <am_hal_rtc_alarm_interval_set+0x4c>)
    1fda:	681a      	ldr	r2, [r3, #0]
    1fdc:	b2d2      	uxtb	r2, r2
    1fde:	0040      	lsls	r0, r0, #1

            //
            // If ALM100 was previous EVERY_10TH or EVERY_100TH reset to zero
            // otherwise keep previous setting.
            //
            ui32Alm100 = ui32Value >= 0xF0 ? 0 : ui32Value;
    1fe0:	2aef      	cmp	r2, #239	; 0xef
    1fe2:	f000 030e 	and.w	r3, r0, #14
    1fe6:	d9e8      	bls.n	1fba <am_hal_rtc_alarm_interval_set+0xe>
    1fe8:	2200      	movs	r2, #0
    1fea:	e7e6      	b.n	1fba <am_hal_rtc_alarm_interval_set+0xe>
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    1fec:	230e      	movs	r3, #14
        //
        // If repeat every 10th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_10TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_10TH;
    1fee:	22f0      	movs	r2, #240	; 0xf0
    1ff0:	e7e3      	b.n	1fba <am_hal_rtc_alarm_interval_set+0xe>
    1ff2:	bf00      	nop
    1ff4:	40004050 	.word	0x40004050
    1ff8:	40004048 	.word	0x40004048

00001ffc <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffe:	b083      	sub	sp, #12
    2000:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2002:	f7ff fd8f 	bl	1b24 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2006:	4a41      	ldr	r2, [pc, #260]	; (210c <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2008:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    200a:	b11d      	cbz	r5, 2014 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    200c:	4b40      	ldr	r3, [pc, #256]	; (2110 <am_hal_sysctrl_sleep+0x114>)
    200e:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2010:	07c3      	lsls	r3, r0, #31
    2012:	d509      	bpl.n	2028 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2014:	6811      	ldr	r1, [r2, #0]
    2016:	f021 0604 	bic.w	r6, r1, #4
    201a:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    201c:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    201e:	4620      	mov	r0, r4
    2020:	f7ff fd84 	bl	1b2c <am_hal_interrupt_master_set>
}
    2024:	b003      	add	sp, #12
    2026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2028:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    202a:	493a      	ldr	r1, [pc, #232]	; (2114 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    202c:	4f3a      	ldr	r7, [pc, #232]	; (2118 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    202e:	4d3b      	ldr	r5, [pc, #236]	; (211c <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2030:	483b      	ldr	r0, [pc, #236]	; (2120 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2032:	f043 0604 	orr.w	r6, r3, #4
    2036:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2038:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    203a:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    203c:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    203e:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2040:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2044:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2046:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    204a:	bf14      	ite	ne
    204c:	2500      	movne	r5, #0
    204e:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    2050:	2e03      	cmp	r6, #3
    2052:	bf8c      	ite	hi
    2054:	2100      	movhi	r1, #0
    2056:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2058:	f012 0303 	ands.w	r3, r2, #3
    205c:	bf18      	it	ne
    205e:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2060:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2064:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    2066:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    2068:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    206c:	b91e      	cbnz	r6, 2076 <am_hal_sysctrl_sleep+0x7a>
    206e:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    2072:	2d0f      	cmp	r5, #15
    2074:	d00a      	beq.n	208c <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    2076:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    2078:	2d0f      	cmp	r5, #15
    207a:	d01a      	beq.n	20b2 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    207c:	4f29      	ldr	r7, [pc, #164]	; (2124 <am_hal_sysctrl_sleep+0x128>)
    207e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2080:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    2082:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2084:	f7ff fd52 	bl	1b2c <am_hal_interrupt_master_set>
}
    2088:	b003      	add	sp, #12
    208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    208c:	683a      	ldr	r2, [r7, #0]
    208e:	1e50      	subs	r0, r2, #1
    2090:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2092:	9800      	ldr	r0, [sp, #0]
    2094:	f04f 31ff 	mov.w	r1, #4294967295
    2098:	f000 f92c 	bl	22f4 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    209c:	9800      	ldr	r0, [sp, #0]
    209e:	4633      	mov	r3, r6
    20a0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    20a4:	f04f 31ff 	mov.w	r1, #4294967295
    20a8:	f000 f938 	bl	231c <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    20ac:	f7ff ff14 	bl	1ed8 <am_hal_pwrctrl_bucks_disable>
    20b0:	e7e1      	b.n	2076 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    20b2:	f3ef 8310 	mrs	r3, PRIMASK
    20b6:	9301      	str	r3, [sp, #4]
    20b8:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20ba:	4e1b      	ldr	r6, [pc, #108]	; (2128 <am_hal_sysctrl_sleep+0x12c>)
    20bc:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    20be:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    20c0:	6835      	ldr	r5, [r6, #0]
    20c2:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    20c6:	f04c 021c 	orr.w	r2, ip, #28
    20ca:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20cc:	6830      	ldr	r0, [r6, #0]
    20ce:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    20d2:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    20d6:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    20d8:	9e01      	ldr	r6, [sp, #4]
    20da:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    20de:	201c      	movs	r0, #28
    20e0:	f7ff fcbe 	bl	1a60 <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    20e4:	f7ff fedc 	bl	1ea0 <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20e8:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    20ea:	4910      	ldr	r1, [pc, #64]	; (212c <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    20ec:	4d0d      	ldr	r5, [pc, #52]	; (2124 <am_hal_sysctrl_sleep+0x128>)
    20ee:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20f0:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    20f2:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20f4:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    20f6:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    20f8:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    20fa:	f7ff fcb1 	bl	1a60 <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    20fe:	9800      	ldr	r0, [sp, #0]
    2100:	f04f 31ff 	mov.w	r1, #4294967295
    2104:	f000 f8dc 	bl	22c0 <am_hal_ctimer_start>
    2108:	e789      	b.n	201e <am_hal_sysctrl_sleep+0x22>
    210a:	bf00      	nop
    210c:	e000ed10 	.word	0xe000ed10
    2110:	40020250 	.word	0x40020250
    2114:	4002000c 	.word	0x4002000c
    2118:	10001194 	.word	0x10001194
    211c:	40021000 	.word	0x40021000
    2120:	40021008 	.word	0x40021008
    2124:	1000118d 	.word	0x1000118d
    2128:	40020068 	.word	0x40020068
    212c:	10001190 	.word	0x10001190

00002130 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    2130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    2132:	680d      	ldr	r5, [r1, #0]
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    2134:	460f      	mov	r7, r1
    2136:	4606      	mov	r6, r0
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    2138:	f7ff fc4a 	bl	19d0 <am_hal_clkgen_sysclk_get>
    uint32_t ui32BaudClk;

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    213c:	0169      	lsls	r1, r5, #5
    213e:	0182      	lsls	r2, r0, #6
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    2140:	fbb0 f4f1 	udiv	r4, r0, r1
    2144:	fbb2 f0f1 	udiv	r0, r2, r1
    2148:	eba0 1584 	sub.w	r5, r0, r4, lsl #6
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;

    //
    // Check the result.
    //
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    214c:	b924      	cbnz	r4, 2158 <am_hal_uart_config+0x28>
    214e:	4a11      	ldr	r2, [pc, #68]	; (2194 <am_hal_uart_config+0x64>)
    2150:	4811      	ldr	r0, [pc, #68]	; (2198 <am_hal_uart_config+0x68>)
    2152:	2161      	movs	r1, #97	; 0x61
    2154:	f7ff fc82 	bl	1a5c <am_hal_debug_error>

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    2158:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    215c:	331c      	adds	r3, #28
    215e:	031b      	lsls	r3, r3, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2160:	7a3e      	ldrb	r6, [r7, #8]
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");

    //
    // Write the UART regs.
    //
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    2162:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    2164:	625c      	str	r4, [r3, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    2166:	629d      	str	r5, [r3, #40]	; 0x28
    config_baudrate(ui32Module, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());

    //
    // OR in the Data bits.
    //
    ui32ConfigVal |= psConfig->ui32DataBits;
    2168:	6879      	ldr	r1, [r7, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    216a:	68fa      	ldr	r2, [r7, #12]
    216c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    216e:	430a      	orrs	r2, r1
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2170:	2e00      	cmp	r6, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2172:	ea42 0004 	orr.w	r0, r2, r4
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2176:	bf14      	ite	ne
    2178:	2208      	movne	r2, #8
    217a:	2200      	moveq	r2, #0
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    217c:	4302      	orrs	r2, r0
    217e:	62da      	str	r2, [r3, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    2180:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    2182:	693f      	ldr	r7, [r7, #16]
    2184:	432f      	orrs	r7, r5
    2186:	631f      	str	r7, [r3, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2188:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    218a:	f046 0110 	orr.w	r1, r6, #16
    218e:	6319      	str	r1, [r3, #48]	; 0x30
    2190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2192:	bf00      	nop
    2194:	00002478 	.word	0x00002478
    2198:	000024ac 	.word	0x000024ac

0000219c <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    219c:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    219e:	f3ef 8310 	mrs	r3, PRIMASK
    21a2:	9301      	str	r3, [sp, #4]
    21a4:	b672      	cpsid	i
    21a6:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    21aa:	301c      	adds	r0, #28
    21ac:	0301      	lsls	r1, r0, #12
    21ae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    21b0:	f442 7c40 	orr.w	ip, r2, #768	; 0x300
    21b4:	f04c 0301 	orr.w	r3, ip, #1
    21b8:	630b      	str	r3, [r1, #48]	; 0x30
    21ba:	9801      	ldr	r0, [sp, #4]
    21bc:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    21c0:	b002      	add	sp, #8
    21c2:	4770      	bx	lr

000021c4 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    21c4:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    21c6:	f3ef 8310 	mrs	r3, PRIMASK
    21ca:	9301      	str	r3, [sp, #4]
    21cc:	b672      	cpsid	i
    21ce:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    21d2:	301c      	adds	r0, #28
    21d4:	0301      	lsls	r1, r0, #12
    21d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    21d8:	f422 7c40 	bic.w	ip, r2, #768	; 0x300
    21dc:	f02c 0301 	bic.w	r3, ip, #1
    21e0:	630b      	str	r3, [r1, #48]	; 0x30
    21e2:	9801      	ldr	r0, [sp, #4]
    21e4:	f380 8810 	msr	PRIMASK, r0
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    21e8:	b002      	add	sp, #8
    21ea:	4770      	bx	lr

000021ec <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    21ec:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    21ee:	b510      	push	{r4, lr}
    21f0:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    21f2:	d905      	bls.n	2200 <am_hal_uart_pwrctrl_enable+0x14>
    21f4:	4a05      	ldr	r2, [pc, #20]	; (220c <am_hal_uart_pwrctrl_enable+0x20>)
    21f6:	4806      	ldr	r0, [pc, #24]	; (2210 <am_hal_uart_pwrctrl_enable+0x24>)
    21f8:	f240 11a3 	movw	r1, #419	; 0x1a3
    21fc:	f7ff fc2e 	bl	1a5c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2200:	2080      	movs	r0, #128	; 0x80
    2202:	40a0      	lsls	r0, r4
}
    2204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2208:	f7ff bcb6 	b.w	1b78 <am_hal_pwrctrl_periph_enable>
    220c:	000024c0 	.word	0x000024c0
    2210:	000024ac 	.word	0x000024ac

00002214 <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2214:	2801      	cmp	r0, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    2216:	b510      	push	{r4, lr}
    2218:	4604      	mov	r4, r0
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    221a:	d905      	bls.n	2228 <am_hal_uart_pwrctrl_disable+0x14>
    221c:	4a05      	ldr	r2, [pc, #20]	; (2234 <am_hal_uart_pwrctrl_disable+0x20>)
    221e:	4806      	ldr	r0, [pc, #24]	; (2238 <am_hal_uart_pwrctrl_disable+0x24>)
    2220:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    2224:	f7ff fc1a 	bl	1a5c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2228:	2080      	movs	r0, #128	; 0x80
    222a:	40a0      	lsls	r0, r4
}
    222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2230:	f7ff bce6 	b.w	1c00 <am_hal_pwrctrl_periph_disable>
    2234:	000024c0 	.word	0x000024c0
    2238:	000024ac 	.word	0x000024ac

0000223c <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    223c:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    223e:	2101      	movs	r1, #1
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    2240:	4604      	mov	r4, r0
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    2242:	f7ff fbe9 	bl	1a18 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    2246:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    224a:	301c      	adds	r0, #28
    224c:	0301      	lsls	r1, r0, #12
    224e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2250:	f043 0208 	orr.w	r2, r3, #8
    2254:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2256:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2258:	f044 0010 	orr.w	r0, r4, #16
    225c:	6308      	str	r0, [r1, #48]	; 0x30
    225e:	bd10      	pop	{r4, pc}

00002260 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    2260:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    2264:	331c      	adds	r3, #28
    2266:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2268:	2100      	movs	r1, #0
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    226c:	f022 0208 	bic.w	r2, r2, #8
    2270:	631a      	str	r2, [r3, #48]	; 0x30

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2272:	f7ff bbd1 	b.w	1a18 <am_hal_clkgen_uarten_set>
    2276:	bf00      	nop

00002278 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2278:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    227c:	301c      	adds	r0, #28
    227e:	0302      	lsls	r2, r0, #12
    2280:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2282:	f043 0010 	orr.w	r0, r3, #16
    2286:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    2288:	6351      	str	r1, [r2, #52]	; 0x34
    228a:	4770      	bx	lr

0000228c <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    228c:	b410      	push	{r4}
    while (*pcString)
    228e:	780c      	ldrb	r4, [r1, #0]
    2290:	b16c      	cbz	r4, 22ae <am_hal_uart_string_transmit_polled+0x22>
    2292:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2296:	301c      	adds	r0, #28
    2298:	0300      	lsls	r0, r0, #12
    229a:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    229e:	6813      	ldr	r3, [r2, #0]
    22a0:	069b      	lsls	r3, r3, #26
    22a2:	d4fc      	bmi.n	229e <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    22a4:	6004      	str	r4, [r0, #0]
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while (*pcString)
    22a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    22aa:	2c00      	cmp	r4, #0
    22ac:	d1f7      	bne.n	229e <am_hal_uart_string_transmit_polled+0x12>
        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    }
}
    22ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    22b2:	4770      	bx	lr

000022b4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    22b4:	4b01      	ldr	r3, [pc, #4]	; (22bc <am_hal_vcomp_disable+0x8>)
    22b6:	2237      	movs	r2, #55	; 0x37
    22b8:	601a      	str	r2, [r3, #0]
    22ba:	4770      	bx	lr
    22bc:	4000c008 	.word	0x4000c008

000022c0 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    22c0:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    22c2:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    22c6:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    22c8:	0100      	lsls	r0, r0, #4
    22ca:	4a09      	ldr	r2, [pc, #36]	; (22f0 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    22cc:	9301      	str	r3, [sp, #4]
    22ce:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    22d0:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    22d2:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    22d6:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    22da:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    22de:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    22e0:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    22e2:	9801      	ldr	r0, [sp, #4]
    22e4:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    22e8:	b003      	add	sp, #12
    22ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    22ee:	4770      	bx	lr
    22f0:	4000800c 	.word	0x4000800c

000022f4 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    22f4:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    22f6:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    22fa:	0100      	lsls	r0, r0, #4
    22fc:	4a06      	ldr	r2, [pc, #24]	; (2318 <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    22fe:	9301      	str	r3, [sp, #4]
    2300:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    2302:	5883      	ldr	r3, [r0, r2]
    2304:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    2308:	4319      	orrs	r1, r3
    230a:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    230c:	9801      	ldr	r0, [sp, #4]
    230e:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    2312:	b002      	add	sp, #8
    2314:	4770      	bx	lr
    2316:	bf00      	nop
    2318:	4000800c 	.word	0x4000800c

0000231c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    231c:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    231e:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    2322:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    2324:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2326:	4d1c      	ldr	r5, [pc, #112]	; (2398 <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2328:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    232a:	4e1c      	ldr	r6, [pc, #112]	; (239c <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    232c:	4f1c      	ldr	r7, [pc, #112]	; (23a0 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    232e:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2330:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    2334:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2336:	d01a      	beq.n	236e <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2338:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    233c:	2d80      	cmp	r5, #128	; 0x80
    233e:	d01b      	beq.n	2378 <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2340:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2344:	2500      	movs	r5, #0
    2346:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    2348:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    234a:	d01c      	beq.n	2386 <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    234c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    2350:	d01e      	beq.n	2390 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2352:	0c21      	lsrs	r1, r4, #16
    2354:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2356:	b291      	uxth	r1, r2
    2358:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    235a:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    235e:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2360:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2362:	9801      	ldr	r0, [sp, #4]
    2364:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    2368:	b002      	add	sp, #8
    236a:	bcf0      	pop	{r4, r5, r6, r7}
    236c:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    236e:	0c25      	lsrs	r5, r4, #16
    2370:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    2374:	2c80      	cmp	r4, #128	; 0x80
    2376:	d10a      	bne.n	238e <am_hal_ctimer_period_set+0x72>
    2378:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    237a:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    237c:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    237e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2382:	4299      	cmp	r1, r3
    2384:	d1e2      	bne.n	234c <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2386:	b297      	uxth	r7, r2
    2388:	433d      	orrs	r5, r7
    238a:	5185      	str	r5, [r0, r6]
    238c:	e7e9      	b.n	2362 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    238e:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2390:	b296      	uxth	r6, r2
    2392:	4335      	orrs	r5, r6
    2394:	51c5      	str	r5, [r0, r7]
    2396:	e7e4      	b.n	2362 <am_hal_ctimer_period_set+0x46>
    2398:	4000800c 	.word	0x4000800c
    239c:	40008004 	.word	0x40008004
    23a0:	40008008 	.word	0x40008008
    23a4:	70656544 	.word	0x70656544
    23a8:	65656c73 	.word	0x65656c73
    23ac:	61572070 	.word	0x61572070
    23b0:	4520656b 	.word	0x4520656b
    23b4:	706d6178 	.word	0x706d6178
    23b8:	000a656c 	.word	0x000a656c
    23bc:	0a0a0a0a 	.word	0x0a0a0a0a
    23c0:	0a0a0a0a 	.word	0x0a0a0a0a
    23c4:	0a0a0a0a 	.word	0x0a0a0a0a
    23c8:	0a0a0a0a 	.word	0x0a0a0a0a
    23cc:	00000a0a 	.word	0x00000a0a

000023d0 <am_hal_cachectrl_defaults>:
    23d0:	50000001 00010300 00010101 685f6d61     ...P........am_h
    23e0:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    23f0:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2400:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2410:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2420:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    2430:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2440:	206e6168 20656e6f 69726570 72656870     han one peripher
    2450:	61206c61 20612074 656d6974 0000002e     al at a time....
    2460:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2470:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    2480:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    2490:	61657267 20726574 6e616874 20726f20     greater than or 
    24a0:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    24b0:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    24c0:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    24d0:	20612065 54524155 646f6d20 20656c75     e a UART module 
    24e0:	74616874 656f6420 74276e73 69786520     that doesn't exi
    24f0:	00007473 69797254 7420676e 6e65206f     st..Trying to en
    2500:	656c6261 55206120 20545241 75646f6d     able a UART modu
    2510:	7420656c 20746168 73656f64 2074276e     le that doesn't 
    2520:	73697865 00000074                       exist...
