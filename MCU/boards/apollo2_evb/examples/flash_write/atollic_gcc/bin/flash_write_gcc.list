
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\flash_write\atollic_gcc\bin\flash_write_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000050  10001000  000018f0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000090c  10001050  00001940  00021050  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021050  2**0
                  CONTENTS, READONLY
  5 .debug_info   000049e0  00000000  00000000  00021087  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001354  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000005e0  00000000  00000000  00026dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ae0  00000000  00000000  0002739b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002fe8  00000000  00000000  00027e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002000  00000000  00000000  0002ae63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  0002ce63  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000010a0  00000000  00000000  0002cee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002139  00000000  00000000  0002df84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 b5 03 00 00 1d 04 00 00 2d 04 00 00     ............-...
      10:	2d 04 00 00 2d 04 00 00 2d 04 00 00 00 00 00 00     -...-...-.......
	...
      2c:	25 04 00 00 25 04 00 00 00 00 00 00 25 04 00 00     %...%.......%...
      3c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      4c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      5c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      6c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      7c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      8c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      9c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      ac:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      bc:	25 04 00 00                                         %...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     160:	b580      	push	{r7, lr}
     162:	b088      	sub	sp, #32
     164:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     166:	2300      	movs	r3, #0
     168:	61fb      	str	r3, [r7, #28]
    uint32_t ui32PrgmAddr;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     16a:	2000      	movs	r0, #0
     16c:	f001 f8cc 	bl	1308 <am_hal_clkgen_sysclk_select>

    //
    // Initialize the peripherals for this board.
    //
    am_bsp_low_power_init();
     170:	f001 f876 	bl	1260 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     174:	487b      	ldr	r0, [pc, #492]	; (364 <main+0x204>)
     176:	f000 f9d9 	bl	52c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     17a:	f3ef 8310 	mrs	r3, PRIMASK
     17e:	607b      	str	r3, [r7, #4]
     180:	b672      	cpsid	i
     182:	4b79      	ldr	r3, [pc, #484]	; (368 <main+0x208>)
     184:	2273      	movs	r2, #115	; 0x73
     186:	601a      	str	r2, [r3, #0]
     188:	4a78      	ldr	r2, [pc, #480]	; (36c <main+0x20c>)
     18a:	4b78      	ldr	r3, [pc, #480]	; (36c <main+0x20c>)
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     192:	6013      	str	r3, [r2, #0]
     194:	4a76      	ldr	r2, [pc, #472]	; (370 <main+0x210>)
     196:	4b76      	ldr	r3, [pc, #472]	; (370 <main+0x210>)
     198:	681b      	ldr	r3, [r3, #0]
     19a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     19e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1a2:	6013      	str	r3, [r2, #0]
     1a4:	4a73      	ldr	r2, [pc, #460]	; (374 <main+0x214>)
     1a6:	4b73      	ldr	r3, [pc, #460]	; (374 <main+0x214>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1ae:	6013      	str	r3, [r2, #0]
     1b0:	4b6d      	ldr	r3, [pc, #436]	; (368 <main+0x208>)
     1b2:	2200      	movs	r2, #0
     1b4:	601a      	str	r2, [r3, #0]
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1bc:	f001 f8f4 	bl	13a8 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1c0:	f001 f860 	bl	1284 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     1c4:	f001 f842 	bl	124c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Flash Write Example\n");
     1c8:	486b      	ldr	r0, [pc, #428]	; (378 <main+0x218>)
     1ca:	f001 f821 	bl	1210 <am_util_stdio_printf>

    //
    // Select an arbitrary page address in flash instance 1.
    // 260KB = 0x41000.
    //
    ui32PrgmAddr = ARB_PAGE_ADDRESS;
     1ce:	f44f 2304 	mov.w	r3, #540672	; 0x84000
     1d2:	613b      	str	r3, [r7, #16]

    //
    // Erase the whole block of FLASH instance 1.
    //
    am_util_stdio_printf("  ... erasing all of flash instance %d.\n", AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr) );
     1d4:	693b      	ldr	r3, [r7, #16]
     1d6:	0cdb      	lsrs	r3, r3, #19
     1d8:	f003 0301 	and.w	r3, r3, #1
     1dc:	4619      	mov	r1, r3
     1de:	4867      	ldr	r0, [pc, #412]	; (37c <main+0x21c>)
     1e0:	f001 f816 	bl	1210 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_mass_erase(AM_HAL_FLASH_PROGRAM_KEY, 1);
     1e4:	2101      	movs	r1, #1
     1e6:	4866      	ldr	r0, [pc, #408]	; (380 <main+0x220>)
     1e8:	f001 f8c2 	bl	1370 <am_hal_flash_mass_erase>
     1ec:	60f8      	str	r0, [r7, #12]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     1ee:	68fb      	ldr	r3, [r7, #12]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d006      	beq.n	202 <main+0xa2>
    {
        am_util_stdio_printf("FLASH_MASS_ERASE i32ReturnCode =  0x%x.\n",
     1f4:	68f9      	ldr	r1, [r7, #12]
     1f6:	4863      	ldr	r0, [pc, #396]	; (384 <main+0x224>)
     1f8:	f001 f80a 	bl	1210 <am_util_stdio_printf>
                             i32ReturnCode);
        i32ErrorFlag++;
     1fc:	69fb      	ldr	r3, [r7, #28]
     1fe:	3301      	adds	r3, #1
     200:	61fb      	str	r3, [r7, #28]

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
     202:	693b      	ldr	r3, [r7, #16]
     204:	0cdb      	lsrs	r3, r3, #19
    }

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     206:	f003 0101 	and.w	r1, r3, #1
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
     20a:	693b      	ldr	r3, [r7, #16]
     20c:	0b5b      	lsrs	r3, r3, #13
    }

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     20e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     212:	461a      	mov	r2, r3
     214:	485c      	ldr	r0, [pc, #368]	; (388 <main+0x228>)
     216:	f000 fffb 	bl	1210 <am_util_stdio_printf>
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );

    pui32Src = ui32Source;
     21a:	4b5c      	ldr	r3, [pc, #368]	; (38c <main+0x22c>)
     21c:	61bb      	str	r3, [r7, #24]
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
     21e:	f44f 7380 	mov.w	r3, #256	; 0x100
     222:	617b      	str	r3, [r7, #20]
     224:	e007      	b.n	236 <main+0xd6>
    {
        *pui32Src++ = ix;
     226:	69bb      	ldr	r3, [r7, #24]
     228:	1d1a      	adds	r2, r3, #4
     22a:	61ba      	str	r2, [r7, #24]
     22c:	697a      	ldr	r2, [r7, #20]
     22e:	601a      	str	r2, [r3, #0]
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
                          AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );

    pui32Src = ui32Source;
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
     230:	697b      	ldr	r3, [r7, #20]
     232:	3304      	adds	r3, #4
     234:	617b      	str	r3, [r7, #20]
     236:	697b      	ldr	r3, [r7, #20]
     238:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     23c:	dbf3      	blt.n	226 <main+0xc6>
    }

    //
    // Program a few words in a page in the main block of instance 1.
    //
    pui32Dst = (uint32_t *) ui32PrgmAddr;
     23e:	693b      	ldr	r3, [r7, #16]
     240:	60bb      	str	r3, [r7, #8]
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     242:	f44f 7300 	mov.w	r3, #512	; 0x200
     246:	68ba      	ldr	r2, [r7, #8]
     248:	4950      	ldr	r1, [pc, #320]	; (38c <main+0x22c>)
     24a:	484d      	ldr	r0, [pc, #308]	; (380 <main+0x220>)
     24c:	f001 f89c 	bl	1388 <am_hal_flash_program_main>
     250:	60f8      	str	r0, [r7, #12]
                                              512);

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     252:	68fb      	ldr	r3, [r7, #12]
     254:	2b00      	cmp	r3, #0
     256:	d007      	beq.n	268 <main+0x108>
    {
        am_util_stdio_printf("FLASH program page at 0x%08x "
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	6939      	ldr	r1, [r7, #16]
     25c:	484c      	ldr	r0, [pc, #304]	; (390 <main+0x230>)
     25e:	f000 ffd7 	bl	1210 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             ui32PrgmAddr,
                             i32ReturnCode);
        i32ErrorFlag++;
     262:	69fb      	ldr	r3, [r7, #28]
     264:	3301      	adds	r3, #1
     266:	61fb      	str	r3, [r7, #28]
    }

    //
    // Check the page just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
     268:	484a      	ldr	r0, [pc, #296]	; (394 <main+0x234>)
     26a:	f000 ffd1 	bl	1210 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     26e:	2300      	movs	r3, #0
     270:	617b      	str	r3, [r7, #20]
     272:	e020      	b.n	2b6 <main+0x156>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != ui32Source[ix] )
     274:	697b      	ldr	r3, [r7, #20]
     276:	009b      	lsls	r3, r3, #2
     278:	461a      	mov	r2, r3
     27a:	693b      	ldr	r3, [r7, #16]
     27c:	4413      	add	r3, r2
     27e:	681a      	ldr	r2, [r3, #0]
     280:	4942      	ldr	r1, [pc, #264]	; (38c <main+0x22c>)
     282:	697b      	ldr	r3, [r7, #20]
     284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     288:	429a      	cmp	r2, r3
     28a:	d011      	beq.n	2b0 <main+0x150>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix * 4),
     28c:	697b      	ldr	r3, [r7, #20]
     28e:	009b      	lsls	r3, r3, #2
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    for ( ix = 0; ix < 512; ix++ )
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != ui32Source[ix] )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     290:	461a      	mov	r2, r3
     292:	693b      	ldr	r3, [r7, #16]
     294:	18d1      	adds	r1, r2, r3
     296:	4a3d      	ldr	r2, [pc, #244]	; (38c <main+0x22c>)
     298:	697b      	ldr	r3, [r7, #20]
     29a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix * 4),
                                 ui32Source[ix],
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
     29e:	697b      	ldr	r3, [r7, #20]
     2a0:	009b      	lsls	r3, r3, #2
     2a2:	4618      	mov	r0, r3
     2a4:	693b      	ldr	r3, [r7, #16]
     2a6:	4403      	add	r3, r0
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    for ( ix = 0; ix < 512; ix++ )
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != ui32Source[ix] )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     2a8:	681b      	ldr	r3, [r3, #0]
     2aa:	483b      	ldr	r0, [pc, #236]	; (398 <main+0x238>)
     2ac:	f000 ffb0 	bl	1210 <am_util_stdio_printf>

    //
    // Check the page just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    for ( ix = 0; ix < 512; ix++ )
     2b0:	697b      	ldr	r3, [r7, #20]
     2b2:	3301      	adds	r3, #1
     2b4:	617b      	str	r3, [r7, #20]
     2b6:	697b      	ldr	r3, [r7, #20]
     2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     2bc:	dbda      	blt.n	274 <main+0x114>
    }

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed.\n");
     2be:	4837      	ldr	r0, [pc, #220]	; (39c <main+0x23c>)
     2c0:	f000 ffa6 	bl	1210 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
                                            AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
     2c4:	693b      	ldr	r3, [r7, #16]
     2c6:	0cdb      	lsrs	r3, r3, #19

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed.\n");
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     2c8:	f003 0101 	and.w	r1, r3, #1
                                            AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
                                            AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
     2cc:	693b      	ldr	r3, [r7, #16]
     2ce:	0b5b      	lsrs	r3, r3, #13

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed.\n");
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     2d4:	461a      	mov	r2, r3
     2d6:	482a      	ldr	r0, [pc, #168]	; (380 <main+0x220>)
     2d8:	f001 f850 	bl	137c <am_hal_flash_page_erase>
     2dc:	60f8      	str	r0, [r7, #12]
                                            AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d008      	beq.n	2f6 <main+0x196>
    {
        am_util_stdio_printf(" FLASH erase page at 0x%08x "
     2e4:	68fa      	ldr	r2, [r7, #12]
     2e6:	f44f 2104 	mov.w	r1, #540672	; 0x84000
     2ea:	482d      	ldr	r0, [pc, #180]	; (3a0 <main+0x240>)
     2ec:	f000 ff90 	bl	1210 <am_util_stdio_printf>
                             "i32ReturnCode =  0x%x.\n",
                             ARB_PAGE_ADDRESS, i32ReturnCode);
        i32ErrorFlag++;
     2f0:	69fb      	ldr	r3, [r7, #28]
     2f2:	3301      	adds	r3, #1
     2f4:	61fb      	str	r3, [r7, #28]
    }

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
     2f6:	482b      	ldr	r0, [pc, #172]	; (3a4 <main+0x244>)
     2f8:	f000 ff8a 	bl	1210 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     2fc:	2300      	movs	r3, #0
     2fe:	617b      	str	r3, [r7, #20]
     300:	e01a      	b.n	338 <main+0x1d8>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != 0xFFFFFFFF )
     302:	697b      	ldr	r3, [r7, #20]
     304:	009b      	lsls	r3, r3, #2
     306:	461a      	mov	r2, r3
     308:	693b      	ldr	r3, [r7, #16]
     30a:	4413      	add	r3, r2
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	f1b3 3fff 	cmp.w	r3, #4294967295
     312:	d00e      	beq.n	332 <main+0x1d2>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix*4),
     314:	697b      	ldr	r3, [r7, #20]
     316:	009b      	lsls	r3, r3, #2
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < 512; ix++ )
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != 0xFFFFFFFF )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     318:	461a      	mov	r2, r3
     31a:	693b      	ldr	r3, [r7, #16]
     31c:	18d1      	adds	r1, r2, r3
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix*4),
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
     31e:	697b      	ldr	r3, [r7, #20]
     320:	009b      	lsls	r3, r3, #2
     322:	461a      	mov	r2, r3
     324:	693b      	ldr	r3, [r7, #16]
     326:	4413      	add	r3, r2
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < 512; ix++ )
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != 0xFFFFFFFF )
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     328:	681b      	ldr	r3, [r3, #0]
     32a:	461a      	mov	r2, r3
     32c:	481e      	ldr	r0, [pc, #120]	; (3a8 <main+0x248>)
     32e:	f000 ff6f 	bl	1210 <am_util_stdio_printf>

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    for ( ix = 0; ix < 512; ix++ )
     332:	697b      	ldr	r3, [r7, #20]
     334:	3301      	adds	r3, #1
     336:	617b      	str	r3, [r7, #20]
     338:	697b      	ldr	r3, [r7, #20]
     33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     33e:	dbe0      	blt.n	302 <main+0x1a2>
    }

    //
    // Report success or any failures and exit.
    //
    if (i32ErrorFlag)
     340:	69fb      	ldr	r3, [r7, #28]
     342:	2b00      	cmp	r3, #0
     344:	d004      	beq.n	350 <main+0x1f0>
    {
        am_util_stdio_printf("ERROR: FLASH Write example failure %d\n",
     346:	69f9      	ldr	r1, [r7, #28]
     348:	4818      	ldr	r0, [pc, #96]	; (3ac <main+0x24c>)
     34a:	f000 ff61 	bl	1210 <am_util_stdio_printf>
     34e:	e002      	b.n	356 <main+0x1f6>
                             i32ErrorFlag);
    }
    else
    {
        am_util_stdio_printf("FLASH Write example successful \n");
     350:	4817      	ldr	r0, [pc, #92]	; (3b0 <main+0x250>)
     352:	f000 ff5d 	bl	1210 <am_util_stdio_printf>
    }

    //
    // Verify that ITM is done printing
    //
    am_hal_itm_not_busy();
     356:	f001 f853 	bl	1400 <am_hal_itm_not_busy>

    //
    // Provide return code back to the system.
    //
    return i32ErrorFlag;
     35a:	69fb      	ldr	r3, [r7, #28]
}
     35c:	4618      	mov	r0, r3
     35e:	3720      	adds	r7, #32
     360:	46bd      	mov	sp, r7
     362:	bd80      	pop	{r7, pc}
     364:	00001305 	.word	0x00001305
     368:	40010060 	.word	0x40010060
     36c:	40010054 	.word	0x40010054
     370:	40010028 	.word	0x40010028
     374:	40010108 	.word	0x40010108
     378:	000015d8 	.word	0x000015d8
     37c:	000015f0 	.word	0x000015f0
     380:	12344321 	.word	0x12344321
     384:	0000161c 	.word	0x0000161c
     388:	00001648 	.word	0x00001648
     38c:	10001050 	.word	0x10001050
     390:	00001678 	.word	0x00001678
     394:	000016ac 	.word	0x000016ac
     398:	000016d8 	.word	0x000016d8
     39c:	00001748 	.word	0x00001748
     3a0:	00001774 	.word	0x00001774
     3a4:	000017a8 	.word	0x000017a8
     3a8:	000017d0 	.word	0x000017d0
     3ac:	00001840 	.word	0x00001840
     3b0:	00001868 	.word	0x00001868

000003b4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     3b4:	4811      	ldr	r0, [pc, #68]	; (3fc <zero_loop+0x12>)
     3b6:	4912      	ldr	r1, [pc, #72]	; (400 <zero_loop+0x16>)
     3b8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     3ba:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     3be:	4811      	ldr	r0, [pc, #68]	; (404 <zero_loop+0x1a>)
     3c0:	6801      	ldr	r1, [r0, #0]
     3c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3c6:	6001      	str	r1, [r0, #0]
     3c8:	f3bf 8f4f 	dsb	sy
     3cc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     3d0:	480d      	ldr	r0, [pc, #52]	; (408 <zero_loop+0x1e>)
     3d2:	490e      	ldr	r1, [pc, #56]	; (40c <zero_loop+0x22>)
     3d4:	4a0e      	ldr	r2, [pc, #56]	; (410 <zero_loop+0x26>)

000003d6 <copy_loop>:
     3d6:	f850 3b04 	ldr.w	r3, [r0], #4
     3da:	f841 3b04 	str.w	r3, [r1], #4
     3de:	4291      	cmp	r1, r2
     3e0:	dbf9      	blt.n	3d6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     3e2:	480c      	ldr	r0, [pc, #48]	; (414 <zero_loop+0x2a>)
     3e4:	490c      	ldr	r1, [pc, #48]	; (418 <zero_loop+0x2e>)
     3e6:	f04f 0200 	mov.w	r2, #0

000003ea <zero_loop>:
     3ea:	4288      	cmp	r0, r1
     3ec:	bfb8      	it	lt
     3ee:	f840 2b04 	strlt.w	r2, [r0], #4
     3f2:	dbfa      	blt.n	3ea <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     3f4:	f7ff feb4 	bl	160 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     3f8:	be00      	bkpt	0x0000
}
     3fa:	bf00      	nop
     3fc:	e000ed08 	.word	0xe000ed08
     400:	00000000 	.word	0x00000000
     404:	e000ed88 	.word	0xe000ed88
     408:	000018f0 	.word	0x000018f0
     40c:	10001000 	.word	0x10001000
     410:	10001050 	.word	0x10001050
     414:	10001050 	.word	0x10001050
     418:	1000195c 	.word	0x1000195c

0000041c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     41c:	b480      	push	{r7}
     41e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     420:	e7fe      	b.n	420 <am_nmi_isr+0x4>
     422:	bf00      	nop

00000424 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     424:	b480      	push	{r7}
     426:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     428:	e7fe      	b.n	428 <am_adc_isr+0x4>
     42a:	bf00      	nop

0000042c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     42c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     42e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     430:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     432:	f000 f809 	bl	448 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     436:	bd01      	pop	{r0, pc}
}
     438:	bf00      	nop
     43a:	4618      	mov	r0, r3

0000043c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     43c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     43e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     440:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     442:	4770      	bx	lr
}
     444:	bf00      	nop
     446:	4618      	mov	r0, r3

00000448 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     448:	b580      	push	{r7, lr}
     44a:	b096      	sub	sp, #88	; 0x58
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     450:	f107 030c 	add.w	r3, r7, #12
     454:	2200      	movs	r2, #0
     456:	601a      	str	r2, [r3, #0]
     458:	605a      	str	r2, [r3, #4]
     45a:	609a      	str	r2, [r3, #8]
     45c:	60da      	str	r2, [r3, #12]
     45e:	611a      	str	r2, [r3, #16]
     460:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     462:	2300      	movs	r3, #0
     464:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     468:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     46a:	4b2e      	ldr	r3, [pc, #184]	; (524 <am_util_faultisr_collect_data+0xdc>)
     46c:	681b      	ldr	r3, [r3, #0]
     46e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     472:	b2db      	uxtb	r3, r3
     474:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     47a:	0a1b      	lsrs	r3, r3, #8
     47c:	b2db      	uxtb	r3, r3
     47e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     484:	0c1b      	lsrs	r3, r3, #16
     486:	b29b      	uxth	r3, r3
     488:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     48c:	4b26      	ldr	r3, [pc, #152]	; (528 <am_util_faultisr_collect_data+0xe0>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     492:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     496:	b2db      	uxtb	r3, r3
     498:	f003 0302 	and.w	r3, r3, #2
     49c:	2b00      	cmp	r3, #0
     49e:	d005      	beq.n	4ac <am_util_faultisr_collect_data+0x64>
     4a0:	6879      	ldr	r1, [r7, #4]
     4a2:	2006      	movs	r0, #6
     4a4:	f7ff ffca 	bl	43c <getStackedReg>
     4a8:	4603      	mov	r3, r0
     4aa:	e001      	b.n	4b0 <am_util_faultisr_collect_data+0x68>
     4ac:	f04f 33ff 	mov.w	r3, #4294967295
     4b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     4b2:	6879      	ldr	r1, [r7, #4]
     4b4:	2000      	movs	r0, #0
     4b6:	f7ff ffc1 	bl	43c <getStackedReg>
     4ba:	4603      	mov	r3, r0
     4bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     4be:	6879      	ldr	r1, [r7, #4]
     4c0:	2001      	movs	r0, #1
     4c2:	f7ff ffbb 	bl	43c <getStackedReg>
     4c6:	4603      	mov	r3, r0
     4c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     4ca:	6879      	ldr	r1, [r7, #4]
     4cc:	2002      	movs	r0, #2
     4ce:	f7ff ffb5 	bl	43c <getStackedReg>
     4d2:	4603      	mov	r3, r0
     4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     4d6:	6879      	ldr	r1, [r7, #4]
     4d8:	2003      	movs	r0, #3
     4da:	f7ff ffaf 	bl	43c <getStackedReg>
     4de:	4603      	mov	r3, r0
     4e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     4e2:	6879      	ldr	r1, [r7, #4]
     4e4:	2004      	movs	r0, #4
     4e6:	f7ff ffa9 	bl	43c <getStackedReg>
     4ea:	4603      	mov	r3, r0
     4ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     4ee:	6879      	ldr	r1, [r7, #4]
     4f0:	2005      	movs	r0, #5
     4f2:	f7ff ffa3 	bl	43c <getStackedReg>
     4f6:	4603      	mov	r3, r0
     4f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     4fa:	6879      	ldr	r1, [r7, #4]
     4fc:	2006      	movs	r0, #6
     4fe:	f7ff ff9d 	bl	43c <getStackedReg>
     502:	4603      	mov	r3, r0
     504:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     506:	6879      	ldr	r1, [r7, #4]
     508:	2007      	movs	r0, #7
     50a:	f7ff ff97 	bl	43c <getStackedReg>
     50e:	4603      	mov	r3, r0
     510:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     512:	f107 030c 	add.w	r3, r7, #12
     516:	4618      	mov	r0, r3
     518:	f000 ff96 	bl	1448 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     51c:	2300      	movs	r3, #0
     51e:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     520:	e7fe      	b.n	520 <am_util_faultisr_collect_data+0xd8>
     522:	bf00      	nop
     524:	e000ed28 	.word	0xe000ed28
     528:	e000ed38 	.word	0xe000ed38

0000052c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     534:	4a04      	ldr	r2, [pc, #16]	; (548 <am_util_stdio_printf_init+0x1c>)
     536:	687b      	ldr	r3, [r7, #4]
     538:	6013      	str	r3, [r2, #0]
}
     53a:	bf00      	nop
     53c:	370c      	adds	r7, #12
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr
     546:	bf00      	nop
     548:	10001958 	.word	0x10001958

0000054c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     54c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     550:	b096      	sub	sp, #88	; 0x58
     552:	af00      	add	r7, sp, #0
     554:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     558:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     55c:	0025      	movs	r5, r4
     55e:	2600      	movs	r6, #0
     560:	ea55 0306 	orrs.w	r3, r5, r6
     564:	f000 809e 	beq.w	6a4 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     568:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     56c:	0862      	lsrs	r2, r4, #1
     56e:	ea4f 0133 	mov.w	r1, r3, rrx
     572:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     576:	ea4f 0893 	mov.w	r8, r3, lsr #2
     57a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     57e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     582:	eb11 0308 	adds.w	r3, r1, r8
     586:	eb42 0409 	adc.w	r4, r2, r9
     58a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     58e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     592:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     596:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     59a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     59e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5a2:	eb13 030a 	adds.w	r3, r3, sl
     5a6:	eb44 040b 	adc.w	r4, r4, fp
     5aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5b2:	0a1a      	lsrs	r2, r3, #8
     5b4:	62ba      	str	r2, [r7, #40]	; 0x28
     5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     5bc:	62ba      	str	r2, [r7, #40]	; 0x28
     5be:	0a23      	lsrs	r3, r4, #8
     5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
     5c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     5ca:	18c9      	adds	r1, r1, r3
     5cc:	eb42 0204 	adc.w	r2, r2, r4
     5d0:	460b      	mov	r3, r1
     5d2:	4614      	mov	r4, r2
     5d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     5d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5dc:	0c1a      	lsrs	r2, r3, #16
     5de:	623a      	str	r2, [r7, #32]
     5e0:	6a3a      	ldr	r2, [r7, #32]
     5e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     5e6:	623a      	str	r2, [r7, #32]
     5e8:	0c23      	lsrs	r3, r4, #16
     5ea:	627b      	str	r3, [r7, #36]	; 0x24
     5ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     5f4:	18c9      	adds	r1, r1, r3
     5f6:	eb42 0204 	adc.w	r2, r2, r4
     5fa:	460b      	mov	r3, r1
     5fc:	4614      	mov	r4, r2
     5fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     602:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     606:	0023      	movs	r3, r4
     608:	603b      	str	r3, [r7, #0]
     60a:	2300      	movs	r3, #0
     60c:	607b      	str	r3, [r7, #4]
     60e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     612:	e897 0006 	ldmia.w	r7, {r1, r2}
     616:	18c9      	adds	r1, r1, r3
     618:	eb42 0204 	adc.w	r2, r2, r4
     61c:	460b      	mov	r3, r1
     61e:	4614      	mov	r4, r2
     620:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     624:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     628:	08da      	lsrs	r2, r3, #3
     62a:	613a      	str	r2, [r7, #16]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     632:	613a      	str	r2, [r7, #16]
     634:	08e3      	lsrs	r3, r4, #3
     636:	617b      	str	r3, [r7, #20]
     638:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     63c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     640:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     644:	18db      	adds	r3, r3, r3
     646:	eb44 0404 	adc.w	r4, r4, r4
     64a:	00a2      	lsls	r2, r4, #2
     64c:	60fa      	str	r2, [r7, #12]
     64e:	68fa      	ldr	r2, [r7, #12]
     650:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     654:	60fa      	str	r2, [r7, #12]
     656:	009a      	lsls	r2, r3, #2
     658:	60ba      	str	r2, [r7, #8]
     65a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     65e:	18c9      	adds	r1, r1, r3
     660:	eb42 0204 	adc.w	r2, r2, r4
     664:	460b      	mov	r3, r1
     666:	4614      	mov	r4, r2
     668:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     66c:	1acb      	subs	r3, r1, r3
     66e:	eb62 0404 	sbc.w	r4, r2, r4
     672:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     676:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     67a:	3306      	adds	r3, #6
     67c:	f144 0400 	adc.w	r4, r4, #0
     680:	091a      	lsrs	r2, r3, #4
     682:	61ba      	str	r2, [r7, #24]
     684:	69ba      	ldr	r2, [r7, #24]
     686:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     68a:	61ba      	str	r2, [r7, #24]
     68c:	0923      	lsrs	r3, r4, #4
     68e:	61fb      	str	r3, [r7, #28]
     690:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     694:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     698:	18c9      	adds	r1, r1, r3
     69a:	eb42 0204 	adc.w	r2, r2, r4
     69e:	460b      	mov	r3, r1
     6a0:	4614      	mov	r4, r2
     6a2:	e029      	b.n	6f8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6a6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6aa:	085a      	lsrs	r2, r3, #1
     6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6ae:	089b      	lsrs	r3, r3, #2
     6b0:	4413      	add	r3, r2
     6b2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6b6:	091b      	lsrs	r3, r3, #4
     6b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6ba:	4413      	add	r3, r2
     6bc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6c0:	0a1b      	lsrs	r3, r3, #8
     6c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6c4:	4413      	add	r3, r2
     6c6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6ca:	0c1b      	lsrs	r3, r3, #16
     6cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6ce:	4413      	add	r3, r2
     6d0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6d4:	08db      	lsrs	r3, r3, #3
     6d6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6da:	4613      	mov	r3, r2
     6dc:	009b      	lsls	r3, r3, #2
     6de:	4413      	add	r3, r2
     6e0:	005b      	lsls	r3, r3, #1
     6e2:	461a      	mov	r2, r3
     6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6e6:	1a9b      	subs	r3, r3, r2
     6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6ec:	3306      	adds	r3, #6
     6ee:	091a      	lsrs	r2, r3, #4
     6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6f2:	4413      	add	r3, r2
     6f4:	f04f 0400 	mov.w	r4, #0
    }
}
     6f8:	4618      	mov	r0, r3
     6fa:	4621      	mov	r1, r4
     6fc:	3758      	adds	r7, #88	; 0x58
     6fe:	46bd      	mov	sp, r7
     700:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     704:	4770      	bx	lr
     706:	bf00      	nop

00000708 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     708:	b590      	push	{r4, r7, lr}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     712:	683a      	ldr	r2, [r7, #0]
     714:	687b      	ldr	r3, [r7, #4]
     716:	4313      	orrs	r3, r2
     718:	2b00      	cmp	r3, #0
     71a:	bf0c      	ite	eq
     71c:	2301      	moveq	r3, #1
     71e:	2300      	movne	r3, #0
     720:	b2db      	uxtb	r3, r3
     722:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     724:	e008      	b.n	738 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     726:	e9d7 0100 	ldrd	r0, r1, [r7]
     72a:	f7ff ff0f 	bl	54c <divu64_10>
     72e:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     732:	68fb      	ldr	r3, [r7, #12]
     734:	3301      	adds	r3, #1
     736:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     738:	e897 0018 	ldmia.w	r7, {r3, r4}
     73c:	4323      	orrs	r3, r4
     73e:	d1f2      	bne.n	726 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     740:	68fb      	ldr	r3, [r7, #12]
}
     742:	4618      	mov	r0, r3
     744:	3714      	adds	r7, #20
     746:	46bd      	mov	sp, r7
     748:	bd90      	pop	{r4, r7, pc}
     74a:	bf00      	nop

0000074c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     74c:	b590      	push	{r4, r7, lr}
     74e:	b083      	sub	sp, #12
     750:	af00      	add	r7, sp, #0
     752:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     756:	e897 0018 	ldmia.w	r7, {r3, r4}
     75a:	2b00      	cmp	r3, #0
     75c:	f174 0300 	sbcs.w	r3, r4, #0
     760:	da06      	bge.n	770 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     762:	e897 0018 	ldmia.w	r7, {r3, r4}
     766:	425b      	negs	r3, r3
     768:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     76c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     770:	e897 0018 	ldmia.w	r7, {r3, r4}
     774:	4618      	mov	r0, r3
     776:	4621      	mov	r1, r4
     778:	f7ff ffc6 	bl	708 <ndigits_in_u64>
     77c:	4603      	mov	r3, r0
}
     77e:	4618      	mov	r0, r3
     780:	370c      	adds	r7, #12
     782:	46bd      	mov	sp, r7
     784:	bd90      	pop	{r4, r7, pc}
     786:	bf00      	nop

00000788 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     788:	b490      	push	{r4, r7}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     792:	6839      	ldr	r1, [r7, #0]
     794:	687a      	ldr	r2, [r7, #4]
     796:	430a      	orrs	r2, r1
     798:	2a00      	cmp	r2, #0
     79a:	bf0c      	ite	eq
     79c:	2201      	moveq	r2, #1
     79e:	2200      	movne	r2, #0
     7a0:	b2d2      	uxtb	r2, r2
     7a2:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7a4:	e00a      	b.n	7bc <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7a6:	e897 0006 	ldmia.w	r7, {r1, r2}
     7aa:	090b      	lsrs	r3, r1, #4
     7ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7b0:	0914      	lsrs	r4, r2, #4
     7b2:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     7b6:	68fa      	ldr	r2, [r7, #12]
     7b8:	3201      	adds	r2, #1
     7ba:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     7bc:	e897 0006 	ldmia.w	r7, {r1, r2}
     7c0:	430a      	orrs	r2, r1
     7c2:	d1f0      	bne.n	7a6 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     7c4:	68fb      	ldr	r3, [r7, #12]
}
     7c6:	4618      	mov	r0, r3
     7c8:	3710      	adds	r7, #16
     7ca:	46bd      	mov	sp, r7
     7cc:	bc90      	pop	{r4, r7}
     7ce:	4770      	bx	lr

000007d0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     7d0:	b480      	push	{r7}
     7d2:	b087      	sub	sp, #28
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     7da:	2300      	movs	r3, #0
     7dc:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     7de:	2300      	movs	r3, #0
     7e0:	613b      	str	r3, [r7, #16]
     7e2:	2300      	movs	r3, #0
     7e4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	2b2d      	cmp	r3, #45	; 0x2d
     7ec:	d11b      	bne.n	826 <decstr_to_int+0x56>
    {
        bNeg = true;
     7ee:	2301      	movs	r3, #1
     7f0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	3301      	adds	r3, #1
     7f6:	607b      	str	r3, [r7, #4]
        uCnt++;
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	3301      	adds	r3, #1
     7fc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     7fe:	e012      	b.n	826 <decstr_to_int+0x56>
    {
        ++uCnt;
     800:	68fb      	ldr	r3, [r7, #12]
     802:	3301      	adds	r3, #1
     804:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     806:	693a      	ldr	r2, [r7, #16]
     808:	4613      	mov	r3, r2
     80a:	009b      	lsls	r3, r3, #2
     80c:	4413      	add	r3, r2
     80e:	005b      	lsls	r3, r3, #1
     810:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     812:	687b      	ldr	r3, [r7, #4]
     814:	781b      	ldrb	r3, [r3, #0]
     816:	461a      	mov	r2, r3
     818:	693b      	ldr	r3, [r7, #16]
     81a:	4413      	add	r3, r2
     81c:	3b30      	subs	r3, #48	; 0x30
     81e:	613b      	str	r3, [r7, #16]
        pcStr++;
     820:	687b      	ldr	r3, [r7, #4]
     822:	3301      	adds	r3, #1
     824:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     826:	687b      	ldr	r3, [r7, #4]
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b2f      	cmp	r3, #47	; 0x2f
     82c:	d903      	bls.n	836 <decstr_to_int+0x66>
     82e:	687b      	ldr	r3, [r7, #4]
     830:	781b      	ldrb	r3, [r3, #0]
     832:	2b39      	cmp	r3, #57	; 0x39
     834:	d9e4      	bls.n	800 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     836:	683b      	ldr	r3, [r7, #0]
     838:	2b00      	cmp	r3, #0
     83a:	d002      	beq.n	842 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     83c:	683b      	ldr	r3, [r7, #0]
     83e:	68fa      	ldr	r2, [r7, #12]
     840:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     842:	7dfb      	ldrb	r3, [r7, #23]
     844:	2b00      	cmp	r3, #0
     846:	d002      	beq.n	84e <decstr_to_int+0x7e>
     848:	693b      	ldr	r3, [r7, #16]
     84a:	425b      	negs	r3, r3
     84c:	e000      	b.n	850 <decstr_to_int+0x80>
     84e:	693b      	ldr	r3, [r7, #16]
}
     850:	4618      	mov	r0, r3
     852:	371c      	adds	r7, #28
     854:	46bd      	mov	sp, r7
     856:	f85d 7b04 	ldr.w	r7, [sp], #4
     85a:	4770      	bx	lr

0000085c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     85c:	b590      	push	{r4, r7, lr}
     85e:	b091      	sub	sp, #68	; 0x44
     860:	af00      	add	r7, sp, #0
     862:	e9c7 0102 	strd	r0, r1, [r7, #8]
     866:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     868:	2300      	movs	r3, #0
     86a:	63fb      	str	r3, [r7, #60]	; 0x3c
     86c:	2300      	movs	r3, #0
     86e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     870:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     874:	f7ff fe6a 	bl	54c <divu64_10>
     878:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     87c:	68b9      	ldr	r1, [r7, #8]
     87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     880:	4613      	mov	r3, r2
     882:	009b      	lsls	r3, r3, #2
     884:	4413      	add	r3, r2
     886:	005b      	lsls	r3, r3, #1
     888:	1acb      	subs	r3, r1, r3
     88a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     88e:	1c5a      	adds	r2, r3, #1
     890:	63fa      	str	r2, [r7, #60]	; 0x3c
     892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     894:	b2d2      	uxtb	r2, r2
     896:	3230      	adds	r2, #48	; 0x30
     898:	b2d2      	uxtb	r2, r2
     89a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     89e:	440b      	add	r3, r1
     8a0:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8b0:	4323      	orrs	r3, r4
     8b2:	d1dd      	bne.n	870 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8b6:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d011      	beq.n	8e2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     8be:	e008      	b.n	8d2 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	1c5a      	adds	r2, r3, #1
     8c4:	607a      	str	r2, [r7, #4]
     8c6:	f107 0110 	add.w	r1, r7, #16
     8ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     8cc:	440a      	add	r2, r1
     8ce:	7812      	ldrb	r2, [r2, #0]
     8d0:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8d4:	1e5a      	subs	r2, r3, #1
     8d6:	63fa      	str	r2, [r7, #60]	; 0x3c
     8d8:	2b00      	cmp	r3, #0
     8da:	d1f1      	bne.n	8c0 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	2200      	movs	r2, #0
     8e0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     8e4:	4618      	mov	r0, r3
     8e6:	3744      	adds	r7, #68	; 0x44
     8e8:	46bd      	mov	sp, r7
     8ea:	bd90      	pop	{r4, r7, pc}

000008ec <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     8ec:	b4b0      	push	{r4, r5, r7}
     8ee:	b08d      	sub	sp, #52	; 0x34
     8f0:	af00      	add	r7, sp, #0
     8f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8f6:	607a      	str	r2, [r7, #4]
     8f8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     8fa:	2300      	movs	r3, #0
     8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     8fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     902:	4313      	orrs	r3, r2
     904:	d131      	bne.n	96a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     908:	1c5a      	adds	r2, r3, #1
     90a:	62fa      	str	r2, [r7, #44]	; 0x2c
     90c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     910:	4413      	add	r3, r2
     912:	2230      	movs	r2, #48	; 0x30
     914:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     918:	e027      	b.n	96a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     91a:	7a3b      	ldrb	r3, [r7, #8]
     91c:	f003 030f 	and.w	r3, r3, #15
     920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     928:	2b09      	cmp	r3, #9
     92a:	d90a      	bls.n	942 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     92c:	78fb      	ldrb	r3, [r7, #3]
     92e:	2b00      	cmp	r3, #0
     930:	d001      	beq.n	936 <uint64_to_hexstr+0x4a>
     932:	2227      	movs	r2, #39	; 0x27
     934:	e000      	b.n	938 <uint64_to_hexstr+0x4c>
     936:	2207      	movs	r2, #7
     938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     93c:	4413      	add	r3, r2
     93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     944:	1c5a      	adds	r2, r3, #1
     946:	62fa      	str	r2, [r7, #44]	; 0x2c
     948:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     94c:	3230      	adds	r2, #48	; 0x30
     94e:	b2d2      	uxtb	r2, r2
     950:	f107 0130 	add.w	r1, r7, #48	; 0x30
     954:	440b      	add	r3, r1
     956:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     95a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     95e:	0914      	lsrs	r4, r2, #4
     960:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     964:	091d      	lsrs	r5, r3, #4
     966:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     96a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     96e:	4313      	orrs	r3, r2
     970:	d1d3      	bne.n	91a <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     974:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     976:	687b      	ldr	r3, [r7, #4]
     978:	2b00      	cmp	r3, #0
     97a:	d011      	beq.n	9a0 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     97c:	e008      	b.n	990 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     97e:	687b      	ldr	r3, [r7, #4]
     980:	1c5a      	adds	r2, r3, #1
     982:	607a      	str	r2, [r7, #4]
     984:	f107 0110 	add.w	r1, r7, #16
     988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     98a:	440a      	add	r2, r1
     98c:	7812      	ldrb	r2, [r2, #0]
     98e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     992:	1e5a      	subs	r2, r3, #1
     994:	62fa      	str	r2, [r7, #44]	; 0x2c
     996:	2b00      	cmp	r3, #0
     998:	d1f1      	bne.n	97e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	2200      	movs	r2, #0
     99e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9a2:	4618      	mov	r0, r3
     9a4:	3734      	adds	r7, #52	; 0x34
     9a6:	46bd      	mov	sp, r7
     9a8:	bcb0      	pop	{r4, r5, r7}
     9aa:	4770      	bx	lr

000009ac <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     9b4:	2300      	movs	r3, #0
     9b6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d104      	bne.n	9c8 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	e009      	b.n	9d6 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	3301      	adds	r3, #1
     9c6:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	1c5a      	adds	r2, r3, #1
     9cc:	607a      	str	r2, [r7, #4]
     9ce:	781b      	ldrb	r3, [r3, #0]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d1f6      	bne.n	9c2 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     9d4:	68fb      	ldr	r3, [r7, #12]
}
     9d6:	4618      	mov	r0, r3
     9d8:	3714      	adds	r7, #20
     9da:	46bd      	mov	sp, r7
     9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e0:	4770      	bx	lr
     9e2:	bf00      	nop

000009e4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     9e4:	b480      	push	{r7}
     9e6:	b087      	sub	sp, #28
     9e8:	af00      	add	r7, sp, #0
     9ea:	60f8      	str	r0, [r7, #12]
     9ec:	460b      	mov	r3, r1
     9ee:	607a      	str	r2, [r7, #4]
     9f0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     9f2:	2300      	movs	r3, #0
     9f4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	2b00      	cmp	r3, #0
     9fa:	dc0c      	bgt.n	a16 <padbuffer+0x32>
    {
        return i32Cnt;
     9fc:	697b      	ldr	r3, [r7, #20]
     9fe:	e010      	b.n	a22 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a00:	68fb      	ldr	r3, [r7, #12]
     a02:	2b00      	cmp	r3, #0
     a04:	d004      	beq.n	a10 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	1c5a      	adds	r2, r3, #1
     a0a:	60fa      	str	r2, [r7, #12]
     a0c:	7afa      	ldrb	r2, [r7, #11]
     a0e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a10:	697b      	ldr	r3, [r7, #20]
     a12:	3301      	adds	r3, #1
     a14:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	1e5a      	subs	r2, r3, #1
     a1a:	607a      	str	r2, [r7, #4]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d1ef      	bne.n	a00 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     a20:	697b      	ldr	r3, [r7, #20]
}
     a22:	4618      	mov	r0, r3
     a24:	371c      	adds	r7, #28
     a26:	46bd      	mov	sp, r7
     a28:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2c:	4770      	bx	lr
     a2e:	bf00      	nop

00000a30 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a30:	b590      	push	{r4, r7, lr}
     a32:	b08f      	sub	sp, #60	; 0x3c
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	60b9      	str	r1, [r7, #8]
     a3a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     a3c:	68bb      	ldr	r3, [r7, #8]
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a44:	2b03      	cmp	r3, #3
     a46:	dc02      	bgt.n	a4e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a48:	f06f 0302 	mvn.w	r3, #2
     a4c:	e0d4      	b.n	bf8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     a4e:	edd7 7a03 	vldr	s15, [r7, #12]
     a52:	eef5 7a40 	vcmp.f32	s15, #0.0
     a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a5a:	d104      	bne.n	a66 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     a5c:	68bb      	ldr	r3, [r7, #8]
     a5e:	4a68      	ldr	r2, [pc, #416]	; (c00 <ftoa+0x1d0>)
     a60:	601a      	str	r2, [r3, #0]
        return 3;
     a62:	2303      	movs	r3, #3
     a64:	e0c8      	b.n	bf8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     a6e:	697b      	ldr	r3, [r7, #20]
     a70:	15db      	asrs	r3, r3, #23
     a72:	b2db      	uxtb	r3, r3
     a74:	3b7f      	subs	r3, #127	; 0x7f
     a76:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     a78:	697b      	ldr	r3, [r7, #20]
     a7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     a82:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     a84:	2300      	movs	r3, #0
     a86:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     a88:	2300      	movs	r3, #0
     a8a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     a8c:	6a3b      	ldr	r3, [r7, #32]
     a8e:	2b1e      	cmp	r3, #30
     a90:	dd02      	ble.n	a98 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     a92:	f06f 0301 	mvn.w	r3, #1
     a96:	e0af      	b.n	bf8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     a98:	6a3b      	ldr	r3, [r7, #32]
     a9a:	f113 0f17 	cmn.w	r3, #23
     a9e:	da02      	bge.n	aa6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     aa0:	f04f 33ff 	mov.w	r3, #4294967295
     aa4:	e0a8      	b.n	bf8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     aa6:	6a3b      	ldr	r3, [r7, #32]
     aa8:	2b16      	cmp	r3, #22
     aaa:	dd06      	ble.n	aba <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     aac:	6a3b      	ldr	r3, [r7, #32]
     aae:	3b17      	subs	r3, #23
     ab0:	69fa      	ldr	r2, [r7, #28]
     ab2:	fa02 f303 	lsl.w	r3, r2, r3
     ab6:	637b      	str	r3, [r7, #52]	; 0x34
     ab8:	e01a      	b.n	af0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     aba:	6a3b      	ldr	r3, [r7, #32]
     abc:	2b00      	cmp	r3, #0
     abe:	db0f      	blt.n	ae0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     ac0:	6a3b      	ldr	r3, [r7, #32]
     ac2:	f1c3 0317 	rsb	r3, r3, #23
     ac6:	69fa      	ldr	r2, [r7, #28]
     ac8:	fa42 f303 	asr.w	r3, r2, r3
     acc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     ace:	6a3b      	ldr	r3, [r7, #32]
     ad0:	3301      	adds	r3, #1
     ad2:	69fa      	ldr	r2, [r7, #28]
     ad4:	fa02 f303 	lsl.w	r3, r2, r3
     ad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     adc:	633b      	str	r3, [r7, #48]	; 0x30
     ade:	e007      	b.n	af0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ae6:	6a3b      	ldr	r3, [r7, #32]
     ae8:	43db      	mvns	r3, r3
     aea:	fa42 f303 	asr.w	r3, r2, r3
     aee:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     af0:	697b      	ldr	r3, [r7, #20]
     af2:	2b00      	cmp	r3, #0
     af4:	da04      	bge.n	b00 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     af6:	68bb      	ldr	r3, [r7, #8]
     af8:	1c5a      	adds	r2, r3, #1
     afa:	60ba      	str	r2, [r7, #8]
     afc:	222d      	movs	r2, #45	; 0x2d
     afe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b02:	2b00      	cmp	r3, #0
     b04:	d105      	bne.n	b12 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	1c5a      	adds	r2, r3, #1
     b0a:	60ba      	str	r2, [r7, #8]
     b0c:	2230      	movs	r2, #48	; 0x30
     b0e:	701a      	strb	r2, [r3, #0]
     b10:	e021      	b.n	b56 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b14:	2b00      	cmp	r3, #0
     b16:	dd08      	ble.n	b2a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b1a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b1e:	68ba      	ldr	r2, [r7, #8]
     b20:	4618      	mov	r0, r3
     b22:	4621      	mov	r1, r4
     b24:	f7ff fe9a 	bl	85c <uint64_to_str>
     b28:	e011      	b.n	b4e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	1c5a      	adds	r2, r3, #1
     b2e:	60ba      	str	r2, [r7, #8]
     b30:	222d      	movs	r2, #45	; 0x2d
     b32:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b36:	425b      	negs	r3, r3
     b38:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b3c:	68ba      	ldr	r2, [r7, #8]
     b3e:	4618      	mov	r0, r3
     b40:	4621      	mov	r1, r4
     b42:	f7ff fe8b 	bl	85c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b46:	e002      	b.n	b4e <ftoa+0x11e>
        {
            pcBuf++;
     b48:	68bb      	ldr	r3, [r7, #8]
     b4a:	3301      	adds	r3, #1
     b4c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     b4e:	68bb      	ldr	r3, [r7, #8]
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	2b00      	cmp	r3, #0
     b54:	d1f8      	bne.n	b48 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     b56:	68bb      	ldr	r3, [r7, #8]
     b58:	1c5a      	adds	r2, r3, #1
     b5a:	60ba      	str	r2, [r7, #8]
     b5c:	222e      	movs	r2, #46	; 0x2e
     b5e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b62:	2b00      	cmp	r3, #0
     b64:	d105      	bne.n	b72 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	1c5a      	adds	r2, r3, #1
     b6a:	60ba      	str	r2, [r7, #8]
     b6c:	2230      	movs	r2, #48	; 0x30
     b6e:	701a      	strb	r2, [r3, #0]
     b70:	e03c      	b.n	bec <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b76:	1ad3      	subs	r3, r2, r3
     b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b7a:	1ad3      	subs	r3, r2, r3
     b7c:	3b01      	subs	r3, #1
     b7e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     b80:	69ba      	ldr	r2, [r7, #24]
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	4293      	cmp	r3, r2
     b86:	bfa8      	it	ge
     b88:	4613      	movge	r3, r2
     b8a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     b8c:	2300      	movs	r3, #0
     b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
     b90:	e015      	b.n	bbe <ftoa+0x18e>
        {
            i32FracPart *= 10;
     b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b94:	4613      	mov	r3, r2
     b96:	009b      	lsls	r3, r3, #2
     b98:	4413      	add	r3, r2
     b9a:	005b      	lsls	r3, r3, #1
     b9c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     b9e:	68bb      	ldr	r3, [r7, #8]
     ba0:	1c5a      	adds	r2, r3, #1
     ba2:	60ba      	str	r2, [r7, #8]
     ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ba6:	1612      	asrs	r2, r2, #24
     ba8:	b2d2      	uxtb	r2, r2
     baa:	3230      	adds	r2, #48	; 0x30
     bac:	b2d2      	uxtb	r2, r2
     bae:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     bb6:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bba:	3301      	adds	r3, #1
     bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
     bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     bc0:	69bb      	ldr	r3, [r7, #24]
     bc2:	429a      	cmp	r2, r3
     bc4:	dbe5      	blt.n	b92 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	3b01      	subs	r3, #1
     bca:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     bcc:	e002      	b.n	bd4 <ftoa+0x1a4>
        {
            --pcBuf;
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	3b01      	subs	r3, #1
     bd2:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	2b30      	cmp	r3, #48	; 0x30
     bda:	d104      	bne.n	be6 <ftoa+0x1b6>
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	3b01      	subs	r3, #1
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b2e      	cmp	r3, #46	; 0x2e
     be4:	d1f3      	bne.n	bce <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
     be6:	68bb      	ldr	r3, [r7, #8]
     be8:	3301      	adds	r3, #1
     bea:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	2200      	movs	r2, #0
     bf0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     bf2:	68ba      	ldr	r2, [r7, #8]
     bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bf6:	1ad3      	subs	r3, r2, r3
} // ftoa()
     bf8:	4618      	mov	r0, r3
     bfa:	373c      	adds	r7, #60	; 0x3c
     bfc:	46bd      	mov	sp, r7
     bfe:	bd90      	pop	{r4, r7, pc}
     c00:	00302e30 	.word	0x00302e30

00000c04 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c04:	b590      	push	{r4, r7, lr}
     c06:	b095      	sub	sp, #84	; 0x54
     c08:	af00      	add	r7, sp, #0
     c0a:	60f8      	str	r0, [r7, #12]
     c0c:	60b9      	str	r1, [r7, #8]
     c0e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c10:	2300      	movs	r3, #0
     c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c14:	2300      	movs	r3, #0
     c16:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c18:	e2e3      	b.n	11e2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c1a:	2306      	movs	r3, #6
     c1c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c1e:	68bb      	ldr	r3, [r7, #8]
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b25      	cmp	r3, #37	; 0x25
     c24:	d01f      	beq.n	c66 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c26:	68fb      	ldr	r3, [r7, #12]
     c28:	2b00      	cmp	r3, #0
     c2a:	d015      	beq.n	c58 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     c2c:	68bb      	ldr	r3, [r7, #8]
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2b0a      	cmp	r3, #10
     c32:	d10b      	bne.n	c4c <am_util_stdio_vsprintf+0x48>
     c34:	4bb1      	ldr	r3, [pc, #708]	; (efc <am_util_stdio_vsprintf+0x2f8>)
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	2b00      	cmp	r3, #0
     c3a:	d007      	beq.n	c4c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	1c5a      	adds	r2, r3, #1
     c40:	60fa      	str	r2, [r7, #12]
     c42:	220d      	movs	r2, #13
     c44:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c48:	3301      	adds	r3, #1
     c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	1c5a      	adds	r2, r3, #1
     c50:	60fa      	str	r2, [r7, #12]
     c52:	68ba      	ldr	r2, [r7, #8]
     c54:	7812      	ldrb	r2, [r2, #0]
     c56:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     c58:	68bb      	ldr	r3, [r7, #8]
     c5a:	3301      	adds	r3, #1
     c5c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c60:	3301      	adds	r3, #1
     c62:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     c64:	e2bd      	b.n	11e2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	3301      	adds	r3, #1
     c6a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     c6c:	2300      	movs	r3, #0
     c6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     c72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     c76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     c7a:	2320      	movs	r3, #32
     c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     c80:	68bb      	ldr	r3, [r7, #8]
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	2b30      	cmp	r3, #48	; 0x30
     c86:	d105      	bne.n	c94 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     c88:	2330      	movs	r3, #48	; 0x30
     c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3301      	adds	r3, #1
     c92:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     c94:	f107 0310 	add.w	r3, r7, #16
     c98:	4619      	mov	r1, r3
     c9a:	68b8      	ldr	r0, [r7, #8]
     c9c:	f7ff fd98 	bl	7d0 <decstr_to_int>
     ca0:	4603      	mov	r3, r0
     ca2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     ca4:	693b      	ldr	r3, [r7, #16]
     ca6:	68ba      	ldr	r2, [r7, #8]
     ca8:	4413      	add	r3, r2
     caa:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     cac:	68bb      	ldr	r3, [r7, #8]
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	2b73      	cmp	r3, #115	; 0x73
     cb2:	d005      	beq.n	cc0 <am_util_stdio_vsprintf+0xbc>
     cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cb6:	2b00      	cmp	r3, #0
     cb8:	da02      	bge.n	cc0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cbc:	425b      	negs	r3, r3
     cbe:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     cc0:	68bb      	ldr	r3, [r7, #8]
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	2b2e      	cmp	r3, #46	; 0x2e
     cc6:	d10e      	bne.n	ce6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	3301      	adds	r3, #1
     ccc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     cce:	f107 0310 	add.w	r3, r7, #16
     cd2:	4619      	mov	r1, r3
     cd4:	68b8      	ldr	r0, [r7, #8]
     cd6:	f7ff fd7b 	bl	7d0 <decstr_to_int>
     cda:	4603      	mov	r3, r0
     cdc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     cde:	693b      	ldr	r3, [r7, #16]
     ce0:	68ba      	ldr	r2, [r7, #8]
     ce2:	4413      	add	r3, r2
     ce4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b6c      	cmp	r3, #108	; 0x6c
     cec:	d10c      	bne.n	d08 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     cee:	68bb      	ldr	r3, [r7, #8]
     cf0:	3301      	adds	r3, #1
     cf2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     cf4:	68bb      	ldr	r3, [r7, #8]
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b6c      	cmp	r3, #108	; 0x6c
     cfa:	d105      	bne.n	d08 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     cfc:	68bb      	ldr	r3, [r7, #8]
     cfe:	3301      	adds	r3, #1
     d00:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d02:	2301      	movs	r3, #1
     d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d08:	68bb      	ldr	r3, [r7, #8]
     d0a:	781b      	ldrb	r3, [r3, #0]
     d0c:	3b46      	subs	r3, #70	; 0x46
     d0e:	2b32      	cmp	r3, #50	; 0x32
     d10:	f200 8254 	bhi.w	11bc <am_util_stdio_vsprintf+0x5b8>
     d14:	a201      	add	r2, pc, #4	; (adr r2, d1c <am_util_stdio_vsprintf+0x118>)
     d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d1a:	bf00      	nop
     d1c:	00001147 	.word	0x00001147
     d20:	000011bd 	.word	0x000011bd
     d24:	000011bd 	.word	0x000011bd
     d28:	000011bd 	.word	0x000011bd
     d2c:	000011bd 	.word	0x000011bd
     d30:	000011bd 	.word	0x000011bd
     d34:	000011bd 	.word	0x000011bd
     d38:	000011bd 	.word	0x000011bd
     d3c:	000011bd 	.word	0x000011bd
     d40:	000011bd 	.word	0x000011bd
     d44:	000011bd 	.word	0x000011bd
     d48:	000011bd 	.word	0x000011bd
     d4c:	000011bd 	.word	0x000011bd
     d50:	000011bd 	.word	0x000011bd
     d54:	000011bd 	.word	0x000011bd
     d58:	000011bd 	.word	0x000011bd
     d5c:	000011bd 	.word	0x000011bd
     d60:	000011bd 	.word	0x000011bd
     d64:	00000ee3 	.word	0x00000ee3
     d68:	000011bd 	.word	0x000011bd
     d6c:	000011bd 	.word	0x000011bd
     d70:	000011bd 	.word	0x000011bd
     d74:	000011bd 	.word	0x000011bd
     d78:	000011bd 	.word	0x000011bd
     d7c:	000011bd 	.word	0x000011bd
     d80:	000011bd 	.word	0x000011bd
     d84:	000011bd 	.word	0x000011bd
     d88:	000011bd 	.word	0x000011bd
     d8c:	000011bd 	.word	0x000011bd
     d90:	00000de9 	.word	0x00000de9
     d94:	0000100f 	.word	0x0000100f
     d98:	000011bd 	.word	0x000011bd
     d9c:	00001147 	.word	0x00001147
     da0:	000011bd 	.word	0x000011bd
     da4:	000011bd 	.word	0x000011bd
     da8:	0000100f 	.word	0x0000100f
     dac:	000011bd 	.word	0x000011bd
     db0:	000011bd 	.word	0x000011bd
     db4:	000011bd 	.word	0x000011bd
     db8:	000011bd 	.word	0x000011bd
     dbc:	000011bd 	.word	0x000011bd
     dc0:	000011bd 	.word	0x000011bd
     dc4:	000011bd 	.word	0x000011bd
     dc8:	000011bd 	.word	0x000011bd
     dcc:	000011bd 	.word	0x000011bd
     dd0:	00000e0f 	.word	0x00000e0f
     dd4:	000011bd 	.word	0x000011bd
     dd8:	00000f7d 	.word	0x00000f7d
     ddc:	000011bd 	.word	0x000011bd
     de0:	000011bd 	.word	0x000011bd
     de4:	00000edd 	.word	0x00000edd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	1d1a      	adds	r2, r3, #4
     dec:	607a      	str	r2, [r7, #4]
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	2b00      	cmp	r3, #0
     df8:	d005      	beq.n	e06 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	1c5a      	adds	r2, r3, #1
     dfe:	60fa      	str	r2, [r7, #12]
     e00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e04:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e08:	3301      	adds	r3, #1
     e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e0c:	e1e6      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	1d1a      	adds	r2, r3, #4
     e12:	607a      	str	r2, [r7, #4]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e1a:	f7ff fdc7 	bl	9ac <simple_strlen>
     e1e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e22:	2b00      	cmp	r3, #0
     e24:	dd2e      	ble.n	e84 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e2a:	429a      	cmp	r2, r3
     e2c:	d22a      	bcs.n	e84 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e32:	1ad3      	subs	r3, r2, r3
     e34:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e3c:	4619      	mov	r1, r3
     e3e:	68f8      	ldr	r0, [r7, #12]
     e40:	f7ff fdd0 	bl	9e4 <padbuffer>
     e44:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	2b00      	cmp	r3, #0
     e4a:	d001      	beq.n	e50 <am_util_stdio_vsprintf+0x24c>
     e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4e:	e000      	b.n	e52 <am_util_stdio_vsprintf+0x24e>
     e50:	2300      	movs	r3, #0
     e52:	68fa      	ldr	r2, [r7, #12]
     e54:	4413      	add	r3, r2
     e56:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e5c:	4413      	add	r3, r2
     e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     e60:	2300      	movs	r3, #0
     e62:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     e64:	e00e      	b.n	e84 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	2b00      	cmp	r3, #0
     e6a:	d005      	beq.n	e78 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	1c5a      	adds	r2, r3, #1
     e70:	60fa      	str	r2, [r7, #12]
     e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e7a:	3301      	adds	r3, #1
     e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e80:	3301      	adds	r3, #1
     e82:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
     e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2b00      	cmp	r3, #0
     e8a:	d1ec      	bne.n	e66 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
     e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e8e:	2b00      	cmp	r3, #0
     e90:	f000 81a1 	beq.w	11d6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e96:	425b      	negs	r3, r3
     e98:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e9e:	429a      	cmp	r2, r3
     ea0:	f080 8199 	bcs.w	11d6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ea8:	1ad3      	subs	r3, r2, r3
     eaa:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eb2:	4619      	mov	r1, r3
     eb4:	68f8      	ldr	r0, [r7, #12]
     eb6:	f7ff fd95 	bl	9e4 <padbuffer>
     eba:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d001      	beq.n	ec6 <am_util_stdio_vsprintf+0x2c2>
     ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec4:	e000      	b.n	ec8 <am_util_stdio_vsprintf+0x2c4>
     ec6:	2300      	movs	r3, #0
     ec8:	68fa      	ldr	r2, [r7, #12]
     eca:	4413      	add	r3, r2
     ecc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ed2:	4413      	add	r3, r2
     ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     ed6:	2300      	movs	r3, #0
     ed8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     eda:	e17c      	b.n	11d6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     edc:	2301      	movs	r3, #1
     ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00a      	beq.n	f00 <am_util_stdio_vsprintf+0x2fc>
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	3307      	adds	r3, #7
     eee:	f023 0307 	bic.w	r3, r3, #7
     ef2:	f103 0208 	add.w	r2, r3, #8
     ef6:	607a      	str	r2, [r7, #4]
     ef8:	cb18      	ldmia	r3, {r3, r4}
     efa:	e007      	b.n	f0c <am_util_stdio_vsprintf+0x308>
     efc:	10001950 	.word	0x10001950
                                      va_arg(pArgs, uint32_t);
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	1d1a      	adds	r2, r3, #4
     f04:	607a      	str	r2, [r7, #4]
     f06:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f08:	f04f 0400 	mov.w	r4, #0
     f0c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f12:	2b00      	cmp	r3, #0
     f14:	d01e      	beq.n	f54 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f1a:	f7ff fc35 	bl	788 <ndigits_in_hex>
     f1e:	4602      	mov	r2, r0
     f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f22:	1a9b      	subs	r3, r3, r2
     f24:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f2c:	4619      	mov	r1, r3
     f2e:	68f8      	ldr	r0, [r7, #12]
     f30:	f7ff fd58 	bl	9e4 <padbuffer>
     f34:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f36:	68fb      	ldr	r3, [r7, #12]
     f38:	2b00      	cmp	r3, #0
     f3a:	d001      	beq.n	f40 <am_util_stdio_vsprintf+0x33c>
     f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f3e:	e000      	b.n	f42 <am_util_stdio_vsprintf+0x33e>
     f40:	2300      	movs	r3, #0
     f42:	68fa      	ldr	r2, [r7, #12]
     f44:	4413      	add	r3, r2
     f46:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f4c:	4413      	add	r3, r2
     f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f50:	2300      	movs	r3, #0
     f52:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     f58:	68fa      	ldr	r2, [r7, #12]
     f5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f5e:	f7ff fcc5 	bl	8ec <uint64_to_hexstr>
     f62:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	2b00      	cmp	r3, #0
     f68:	d003      	beq.n	f72 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f6c:	68fa      	ldr	r2, [r7, #12]
     f6e:	4413      	add	r3, r2
     f70:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f76:	4413      	add	r3, r2
     f78:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f7a:	e12f      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f80:	2b00      	cmp	r3, #0
     f82:	d008      	beq.n	f96 <am_util_stdio_vsprintf+0x392>
     f84:	687b      	ldr	r3, [r7, #4]
     f86:	3307      	adds	r3, #7
     f88:	f023 0307 	bic.w	r3, r3, #7
     f8c:	f103 0208 	add.w	r2, r3, #8
     f90:	607a      	str	r2, [r7, #4]
     f92:	cb18      	ldmia	r3, {r3, r4}
     f94:	e005      	b.n	fa2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	1d1a      	adds	r2, r3, #4
     f9a:	607a      	str	r2, [r7, #4]
     f9c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f9e:	f04f 0400 	mov.w	r4, #0
     fa2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa8:	2b00      	cmp	r3, #0
     faa:	d01e      	beq.n	fea <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     fac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fb0:	f7ff fbaa 	bl	708 <ndigits_in_u64>
     fb4:	4602      	mov	r2, r0
     fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb8:	1a9b      	subs	r3, r3, r2
     fba:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fc2:	4619      	mov	r1, r3
     fc4:	68f8      	ldr	r0, [r7, #12]
     fc6:	f7ff fd0d 	bl	9e4 <padbuffer>
     fca:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fcc:	68fb      	ldr	r3, [r7, #12]
     fce:	2b00      	cmp	r3, #0
     fd0:	d001      	beq.n	fd6 <am_util_stdio_vsprintf+0x3d2>
     fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd4:	e000      	b.n	fd8 <am_util_stdio_vsprintf+0x3d4>
     fd6:	2300      	movs	r3, #0
     fd8:	68fa      	ldr	r2, [r7, #12]
     fda:	4413      	add	r3, r2
     fdc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fe2:	4413      	add	r3, r2
     fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fe6:	2300      	movs	r3, #0
     fe8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     fea:	68fa      	ldr	r2, [r7, #12]
     fec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ff0:	f7ff fc34 	bl	85c <uint64_to_str>
     ff4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d003      	beq.n	1004 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ffe:	68fa      	ldr	r2, [r7, #12]
    1000:	4413      	add	r3, r2
    1002:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1008:	4413      	add	r3, r2
    100a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    100c:	e0e6      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    100e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1012:	2b00      	cmp	r3, #0
    1014:	d008      	beq.n	1028 <am_util_stdio_vsprintf+0x424>
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	3307      	adds	r3, #7
    101a:	f023 0307 	bic.w	r3, r3, #7
    101e:	f103 0208 	add.w	r2, r3, #8
    1022:	607a      	str	r2, [r7, #4]
    1024:	cb18      	ldmia	r3, {r3, r4}
    1026:	e005      	b.n	1034 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	1d1a      	adds	r2, r3, #4
    102c:	607a      	str	r2, [r7, #4]
    102e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1030:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1034:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1038:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    103c:	2b00      	cmp	r3, #0
    103e:	f174 0300 	sbcs.w	r3, r4, #0
    1042:	da0a      	bge.n	105a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1044:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1048:	425b      	negs	r3, r3
    104a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    104e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1052:	2301      	movs	r3, #1
    1054:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1058:	e006      	b.n	1068 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    105a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    105e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1062:	2300      	movs	r3, #0
    1064:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    106a:	2b00      	cmp	r3, #0
    106c:	d04a      	beq.n	1104 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    106e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1072:	4618      	mov	r0, r3
    1074:	4621      	mov	r1, r4
    1076:	f7ff fb69 	bl	74c <ndigits_in_i64>
    107a:	4602      	mov	r2, r0
    107c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    107e:	1a9b      	subs	r3, r3, r2
    1080:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1086:	2b00      	cmp	r3, #0
    1088:	d011      	beq.n	10ae <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    108c:	3b01      	subs	r3, #1
    108e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1094:	2b30      	cmp	r3, #48	; 0x30
    1096:	d10a      	bne.n	10ae <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d004      	beq.n	10a8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60fa      	str	r2, [r7, #12]
    10a4:	222d      	movs	r2, #45	; 0x2d
    10a6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    10a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10aa:	3301      	adds	r3, #1
    10ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10b4:	4619      	mov	r1, r3
    10b6:	68f8      	ldr	r0, [r7, #12]
    10b8:	f7ff fc94 	bl	9e4 <padbuffer>
    10bc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d001      	beq.n	10c8 <am_util_stdio_vsprintf+0x4c4>
    10c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c6:	e000      	b.n	10ca <am_util_stdio_vsprintf+0x4c6>
    10c8:	2300      	movs	r3, #0
    10ca:	68fa      	ldr	r2, [r7, #12]
    10cc:	4413      	add	r3, r2
    10ce:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10d4:	4413      	add	r3, r2
    10d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10d8:	2300      	movs	r3, #0
    10da:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    10dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10e0:	2b00      	cmp	r3, #0
    10e2:	d01e      	beq.n	1122 <am_util_stdio_vsprintf+0x51e>
    10e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10e8:	2b20      	cmp	r3, #32
    10ea:	d11a      	bne.n	1122 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d004      	beq.n	10fc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    10f2:	68fb      	ldr	r3, [r7, #12]
    10f4:	1c5a      	adds	r2, r3, #1
    10f6:	60fa      	str	r2, [r7, #12]
    10f8:	222d      	movs	r2, #45	; 0x2d
    10fa:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    10fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10fe:	3301      	adds	r3, #1
    1100:	63fb      	str	r3, [r7, #60]	; 0x3c
    1102:	e00e      	b.n	1122 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1104:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1108:	2b00      	cmp	r3, #0
    110a:	d00a      	beq.n	1122 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	2b00      	cmp	r3, #0
    1110:	d004      	beq.n	111c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	1c5a      	adds	r2, r3, #1
    1116:	60fa      	str	r2, [r7, #12]
    1118:	222d      	movs	r2, #45	; 0x2d
    111a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111e:	3301      	adds	r3, #1
    1120:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1122:	68fa      	ldr	r2, [r7, #12]
    1124:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1128:	f7ff fb98 	bl	85c <uint64_to_str>
    112c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	2b00      	cmp	r3, #0
    1132:	d003      	beq.n	113c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1136:	68fa      	ldr	r2, [r7, #12]
    1138:	4413      	add	r3, r2
    113a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    113e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1140:	4413      	add	r3, r2
    1142:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1144:	e04a      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1146:	68fb      	ldr	r3, [r7, #12]
    1148:	2b00      	cmp	r3, #0
    114a:	d046      	beq.n	11da <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	3307      	adds	r3, #7
    1150:	f023 0307 	bic.w	r3, r3, #7
    1154:	f103 0208 	add.w	r2, r3, #8
    1158:	607a      	str	r2, [r7, #4]
    115a:	cb18      	ldmia	r3, {r3, r4}
    115c:	4618      	mov	r0, r3
    115e:	4621      	mov	r1, r4
    1160:	f7fe ffae 	bl	c0 <__aeabi_d2f>
    1164:	4603      	mov	r3, r0
    1166:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	2214      	movs	r2, #20
    116c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1170:	68f9      	ldr	r1, [r7, #12]
    1172:	6978      	ldr	r0, [r7, #20]
    1174:	f7ff fc5c 	bl	a30 <ftoa>
    1178:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    117c:	2b00      	cmp	r3, #0
    117e:	da14      	bge.n	11aa <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1182:	f1b3 3fff 	cmp.w	r3, #4294967295
    1186:	d102      	bne.n	118e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1188:	4b1e      	ldr	r3, [pc, #120]	; (1204 <am_util_stdio_vsprintf+0x600>)
    118a:	62bb      	str	r3, [r7, #40]	; 0x28
    118c:	e008      	b.n	11a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1190:	f113 0f02 	cmn.w	r3, #2
    1194:	d102      	bne.n	119c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1196:	4b1c      	ldr	r3, [pc, #112]	; (1208 <am_util_stdio_vsprintf+0x604>)
    1198:	62bb      	str	r3, [r7, #40]	; 0x28
    119a:	e001      	b.n	11a0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    119c:	4b1b      	ldr	r3, [pc, #108]	; (120c <am_util_stdio_vsprintf+0x608>)
    119e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    11a0:	68fb      	ldr	r3, [r7, #12]
    11a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    11a4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    11a6:	2303      	movs	r3, #3
    11a8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    11aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11ae:	4413      	add	r3, r2
    11b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    11b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b4:	68fa      	ldr	r2, [r7, #12]
    11b6:	4413      	add	r3, r2
    11b8:	60fb      	str	r3, [r7, #12]
                }
                break;
    11ba:	e00e      	b.n	11da <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    11bc:	68fb      	ldr	r3, [r7, #12]
    11be:	2b00      	cmp	r3, #0
    11c0:	d005      	beq.n	11ce <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	1c5a      	adds	r2, r3, #1
    11c6:	60fa      	str	r2, [r7, #12]
    11c8:	68ba      	ldr	r2, [r7, #8]
    11ca:	7812      	ldrb	r2, [r2, #0]
    11cc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11d0:	3301      	adds	r3, #1
    11d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11d4:	e002      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    11d6:	bf00      	nop
    11d8:	e000      	b.n	11dc <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    11da:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    11dc:	68bb      	ldr	r3, [r7, #8]
    11de:	3301      	adds	r3, #1
    11e0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    11e2:	68bb      	ldr	r3, [r7, #8]
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	f47f ad17 	bne.w	c1a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d002      	beq.n	11f8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    11f2:	68fb      	ldr	r3, [r7, #12]
    11f4:	2200      	movs	r2, #0
    11f6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    11f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    11fa:	4618      	mov	r0, r3
    11fc:	3754      	adds	r7, #84	; 0x54
    11fe:	46bd      	mov	sp, r7
    1200:	bd90      	pop	{r4, r7, pc}
    1202:	bf00      	nop
    1204:	00302e30 	.word	0x00302e30
    1208:	00232e23 	.word	0x00232e23
    120c:	003f2e3f 	.word	0x003f2e3f

00001210 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1210:	b40f      	push	{r0, r1, r2, r3}
    1212:	b580      	push	{r7, lr}
    1214:	b082      	sub	sp, #8
    1216:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1218:	f107 0314 	add.w	r3, r7, #20
    121c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    121e:	683a      	ldr	r2, [r7, #0]
    1220:	6939      	ldr	r1, [r7, #16]
    1222:	4808      	ldr	r0, [pc, #32]	; (1244 <am_util_stdio_printf+0x34>)
    1224:	f7ff fcee 	bl	c04 <am_util_stdio_vsprintf>
    1228:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    122a:	4b07      	ldr	r3, [pc, #28]	; (1248 <am_util_stdio_printf+0x38>)
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	4805      	ldr	r0, [pc, #20]	; (1244 <am_util_stdio_printf+0x34>)
    1230:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1232:	687b      	ldr	r3, [r7, #4]
}
    1234:	4618      	mov	r0, r3
    1236:	3708      	adds	r7, #8
    1238:	46bd      	mov	sp, r7
    123a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    123e:	b004      	add	sp, #16
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	10001850 	.word	0x10001850
    1248:	10001958 	.word	0x10001958

0000124c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1250:	4802      	ldr	r0, [pc, #8]	; (125c <am_util_stdio_terminal_clear+0x10>)
    1252:	f7ff ffdd 	bl	1210 <am_util_stdio_printf>
}
    1256:	bf00      	nop
    1258:	bd80      	pop	{r7, pc}
    125a:	bf00      	nop
    125c:	0000188c 	.word	0x0000188c

00001260 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1260:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1262:	f000 f913 	bl	148c <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1266:	f000 f935 	bl	14d4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    126a:	f000 f9af 	bl	15cc <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    126e:	2001      	movs	r0, #1
    1270:	f000 f940 	bl	14f4 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1274:	2001      	movs	r0, #1
    1276:	f000 f86f 	bl	1358 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    127a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    127e:	f000 b947 	b.w	1510 <am_hal_rtc_osc_disable>
    1282:	bf00      	nop

00001284 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1284:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1286:	4b17      	ldr	r3, [pc, #92]	; (12e4 <am_bsp_debug_printf_enable+0x60>)
    1288:	6818      	ldr	r0, [r3, #0]
    128a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    128e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1290:	d001      	beq.n	1296 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1292:	b007      	add	sp, #28
    1294:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1296:	4a14      	ldr	r2, [pc, #80]	; (12e8 <am_bsp_debug_printf_enable+0x64>)
    1298:	4914      	ldr	r1, [pc, #80]	; (12ec <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    129a:	4d15      	ldr	r5, [pc, #84]	; (12f0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    129c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    129e:	a806      	add	r0, sp, #24
    12a0:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    12a4:	f000 f93c 	bl	1520 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    12a8:	f3ef 8310 	mrs	r3, PRIMASK
    12ac:	9300      	str	r3, [sp, #0]
    12ae:	b672      	cpsid	i
    12b0:	4a10      	ldr	r2, [pc, #64]	; (12f4 <am_bsp_debug_printf_enable+0x70>)
    12b2:	4d11      	ldr	r5, [pc, #68]	; (12f8 <am_bsp_debug_printf_enable+0x74>)
    12b4:	4811      	ldr	r0, [pc, #68]	; (12fc <am_bsp_debug_printf_enable+0x78>)
    12b6:	4912      	ldr	r1, [pc, #72]	; (1300 <am_bsp_debug_printf_enable+0x7c>)
    12b8:	2373      	movs	r3, #115	; 0x73
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	682b      	ldr	r3, [r5, #0]
    12be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    12c2:	602b      	str	r3, [r5, #0]
    12c4:	6805      	ldr	r5, [r0, #0]
    12c6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    12ca:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    12ce:	6003      	str	r3, [r0, #0]
    12d0:	6808      	ldr	r0, [r1, #0]
    12d2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    12d6:	600d      	str	r5, [r1, #0]
    12d8:	6014      	str	r4, [r2, #0]
    12da:	9c00      	ldr	r4, [sp, #0]
    12dc:	f384 8810 	msr	PRIMASK, r4
}
    12e0:	b007      	add	sp, #28
    12e2:	bd30      	pop	{r4, r5, pc}
    12e4:	10001954 	.word	0x10001954
    12e8:	e0000e80 	.word	0xe0000e80
    12ec:	00150511 	.word	0x00150511
    12f0:	000f4240 	.word	0x000f4240
    12f4:	40010060 	.word	0x40010060
    12f8:	40010054 	.word	0x40010054
    12fc:	40010028 	.word	0x40010028
    1300:	40010108 	.word	0x40010108

00001304 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1304:	f000 b886 	b.w	1414 <am_hal_itm_print>

00001308 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1308:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    130a:	4604      	mov	r4, r0
    130c:	b120      	cbz	r0, 1318 <am_hal_clkgen_sysclk_select+0x10>
    130e:	4a06      	ldr	r2, [pc, #24]	; (1328 <am_hal_clkgen_sysclk_select+0x20>)
    1310:	4806      	ldr	r0, [pc, #24]	; (132c <am_hal_clkgen_sysclk_select+0x24>)
    1312:	2150      	movs	r1, #80	; 0x50
    1314:	f000 f82a 	bl	136c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1318:	4b05      	ldr	r3, [pc, #20]	; (1330 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    131a:	4906      	ldr	r1, [pc, #24]	; (1334 <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    131c:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    131e:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1320:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1322:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1324:	601a      	str	r2, [r3, #0]
    1326:	bd10      	pop	{r4, pc}
    1328:	000018a0 	.word	0x000018a0
    132c:	000018d8 	.word	0x000018d8
    1330:	40004014 	.word	0x40004014
    1334:	40004018 	.word	0x40004018

00001338 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    133a:	4905      	ldr	r1, [pc, #20]	; (1350 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    133c:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    133e:	4805      	ldr	r0, [pc, #20]	; (1354 <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1340:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1344:	bf08      	it	eq
    1346:	4608      	moveq	r0, r1
    1348:	4770      	bx	lr
    134a:	bf00      	nop
    134c:	40004018 	.word	0x40004018
    1350:	02dc6c00 	.word	0x02dc6c00
    1354:	016e3600 	.word	0x016e3600

00001358 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1358:	0783      	lsls	r3, r0, #30
    135a:	d003      	beq.n	1364 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    135c:	4a02      	ldr	r2, [pc, #8]	; (1368 <am_hal_clkgen_osc_stop+0x10>)
    135e:	6813      	ldr	r3, [r2, #0]
    1360:	4318      	orrs	r0, r3
    1362:	6010      	str	r0, [r2, #0]
    1364:	4770      	bx	lr
    1366:	bf00      	nop
    1368:	4000400c 	.word	0x4000400c

0000136c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    136c:	e7fe      	b.n	136c <am_hal_debug_error>
    136e:	bf00      	nop

00001370 <am_hal_flash_mass_erase>:
//
//*****************************************************************************
int
am_hal_flash_mass_erase(uint32_t ui32Value, uint32_t ui32FlashInst)
{
    return g_am_hal_flash.flash_mass_erase(ui32Value, ui32FlashInst);
    1370:	4b01      	ldr	r3, [pc, #4]	; (1378 <am_hal_flash_mass_erase+0x8>)
    1372:	681a      	ldr	r2, [r3, #0]
    1374:	4710      	bx	r2
    1376:	bf00      	nop
    1378:	10001000 	.word	0x10001000

0000137c <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    137c:	4b01      	ldr	r3, [pc, #4]	; (1384 <am_hal_flash_page_erase+0x8>)
    137e:	685b      	ldr	r3, [r3, #4]
    1380:	4718      	bx	r3
    1382:	bf00      	nop
    1384:	10001000 	.word	0x10001000

00001388 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    1388:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    138a:	4c03      	ldr	r4, [pc, #12]	; (1398 <am_hal_flash_program_main+0x10>)
    138c:	68a4      	ldr	r4, [r4, #8]
    138e:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    1390:	f85d 4b04 	ldr.w	r4, [sp], #4
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    1394:	4760      	bx	ip
    1396:	bf00      	nop
    1398:	10001000 	.word	0x10001000

0000139c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    139c:	4b01      	ldr	r3, [pc, #4]	; (13a4 <am_hal_flash_delay+0x8>)
    139e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    13a0:	4708      	bx	r1
    13a2:	bf00      	nop
    13a4:	10001000 	.word	0x10001000

000013a8 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    13a8:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <am_hal_itm_enable+0x38>)
    13aa:	6818      	ldr	r0, [r3, #0]
    13ac:	07c2      	lsls	r2, r0, #31
    13ae:	d416      	bmi.n	13de <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13b0:	4a0c      	ldr	r2, [pc, #48]	; (13e4 <am_hal_itm_enable+0x3c>)
    13b2:	6811      	ldr	r1, [r2, #0]
    13b4:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    13b8:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    13ba:	6810      	ldr	r0, [r2, #0]
    13bc:	01c3      	lsls	r3, r0, #7
    13be:	d5fc      	bpl.n	13ba <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    13c0:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13c2:	4809      	ldr	r0, [pc, #36]	; (13e8 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13c4:	4c09      	ldr	r4, [pc, #36]	; (13ec <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13c6:	4d0a      	ldr	r5, [pc, #40]	; (13f0 <am_hal_itm_enable+0x48>)
    13c8:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13ca:	250f      	movs	r5, #15
    13cc:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    13ce:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13d0:	4908      	ldr	r1, [pc, #32]	; (13f4 <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13d2:	4b09      	ldr	r3, [pc, #36]	; (13f8 <am_hal_itm_enable+0x50>)
    13d4:	4a09      	ldr	r2, [pc, #36]	; (13fc <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13d6:	f04f 30ff 	mov.w	r0, #4294967295
    13da:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13dc:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    13de:	4770      	bx	lr
    13e0:	10001954 	.word	0x10001954
    13e4:	e000edfc 	.word	0xe000edfc
    13e8:	e0000fb0 	.word	0xe0000fb0
    13ec:	e0000e40 	.word	0xe0000e40
    13f0:	c5acce55 	.word	0xc5acce55
    13f4:	e0000e00 	.word	0xe0000e00
    13f8:	e0000e80 	.word	0xe0000e80
    13fc:	00150511 	.word	0x00150511

00001400 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1400:	4a03      	ldr	r2, [pc, #12]	; (1410 <am_hal_itm_not_busy+0x10>)
    1402:	6813      	ldr	r3, [r2, #0]
    1404:	021b      	lsls	r3, r3, #8
    1406:	d4fc      	bmi.n	1402 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1408:	f44f 7047 	mov.w	r0, #796	; 0x31c
    140c:	f7ff bfc6 	b.w	139c <am_hal_flash_delay>
    1410:	e0000e80 	.word	0xe0000e80

00001414 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1414:	7803      	ldrb	r3, [r0, #0]
    1416:	b1ab      	cbz	r3, 1444 <am_hal_itm_print+0x30>
    1418:	4602      	mov	r2, r0
    141a:	2300      	movs	r3, #0
    141c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1420:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1422:	2900      	cmp	r1, #0
    1424:	d1fa      	bne.n	141c <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1426:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    142a:	b430      	push	{r4, r5}
    142c:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    142e:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1430:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1434:	f8dc 3000 	ldr.w	r3, [ip]
    1438:	2b00      	cmp	r3, #0
    143a:	d0fb      	beq.n	1434 <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    143c:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    143e:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1440:	d1f6      	bne.n	1430 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1442:	bc30      	pop	{r4, r5}
    1444:	4770      	bx	lr
    1446:	bf00      	nop

00001448 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1448:	4a0d      	ldr	r2, [pc, #52]	; (1480 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    144c:	490e      	ldr	r1, [pc, #56]	; (1488 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    144e:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1450:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1452:	6814      	ldr	r4, [r2, #0]
    1454:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1456:	6809      	ldr	r1, [r1, #0]
    1458:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    145a:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    145c:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    145e:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1460:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1462:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1464:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1468:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    146a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    146c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1470:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1474:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1476:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1478:	6142      	str	r2, [r0, #20]
}
    147a:	bc70      	pop	{r4, r5, r6}
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	400201c4 	.word	0x400201c4
    1484:	400201cc 	.word	0x400201cc
    1488:	400201c0 	.word	0x400201c0

0000148c <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    148c:	4b0f      	ldr	r3, [pc, #60]	; (14cc <am_hal_pwrctrl_bucks_init+0x40>)
    148e:	681a      	ldr	r2, [r3, #0]
    1490:	0792      	lsls	r2, r2, #30
    1492:	d502      	bpl.n	149a <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1494:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1496:	07c3      	lsls	r3, r0, #31
    1498:	d40e      	bmi.n	14b8 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    149a:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    149c:	4a0b      	ldr	r2, [pc, #44]	; (14cc <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    149e:	6819      	ldr	r1, [r3, #0]
    14a0:	f041 0002 	orr.w	r0, r1, #2
    14a4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    14a6:	6819      	ldr	r1, [r3, #0]
    14a8:	f041 0001 	orr.w	r0, r1, #1
    14ac:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    14ae:	6813      	ldr	r3, [r2, #0]
    14b0:	f003 0103 	and.w	r1, r3, #3
    14b4:	2903      	cmp	r1, #3
    14b6:	d1fa      	bne.n	14ae <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    14b8:	4a04      	ldr	r2, [pc, #16]	; (14cc <am_hal_pwrctrl_bucks_init+0x40>)
    14ba:	6810      	ldr	r0, [r2, #0]
    14bc:	f000 0303 	and.w	r3, r0, #3
    14c0:	2b03      	cmp	r3, #3
    14c2:	d1fa      	bne.n	14ba <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    14c4:	2042      	movs	r0, #66	; 0x42
    14c6:	f7ff bf69 	b.w	139c <am_hal_flash_delay>
    14ca:	bf00      	nop
    14cc:	40021004 	.word	0x40021004
    14d0:	40021000 	.word	0x40021000

000014d4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    14d4:	4905      	ldr	r1, [pc, #20]	; (14ec <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    14d6:	4a06      	ldr	r2, [pc, #24]	; (14f0 <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    14d8:	680b      	ldr	r3, [r1, #0]
    14da:	f043 0006 	orr.w	r0, r3, #6
    14de:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    14e0:	6811      	ldr	r1, [r2, #0]
    14e2:	f021 0304 	bic.w	r3, r1, #4
    14e6:	6013      	str	r3, [r2, #0]
    14e8:	4770      	bx	lr
    14ea:	bf00      	nop
    14ec:	40021018 	.word	0x40021018
    14f0:	40021000 	.word	0x40021000

000014f4 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    14f4:	4a05      	ldr	r2, [pc, #20]	; (150c <am_hal_rtc_osc_select+0x18>)
    14f6:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    14f8:	b918      	cbnz	r0, 1502 <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    14fa:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    14fe:	6010      	str	r0, [r2, #0]
    1500:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1502:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1506:	6011      	str	r1, [r2, #0]
    1508:	4770      	bx	lr
    150a:	bf00      	nop
    150c:	4000400c 	.word	0x4000400c

00001510 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1510:	4a02      	ldr	r2, [pc, #8]	; (151c <am_hal_rtc_osc_disable+0xc>)
    1512:	6813      	ldr	r3, [r2, #0]
    1514:	f043 0010 	orr.w	r0, r3, #16
    1518:	6010      	str	r0, [r2, #0]
    151a:	4770      	bx	lr
    151c:	40004050 	.word	0x40004050

00001520 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1520:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1522:	4a22      	ldr	r2, [pc, #136]	; (15ac <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1524:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1526:	2100      	movs	r1, #0
    1528:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    152a:	b333      	cbz	r3, 157a <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    152c:	4d20      	ldr	r5, [pc, #128]	; (15b0 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    152e:	4921      	ldr	r1, [pc, #132]	; (15b4 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1530:	4a21      	ldr	r2, [pc, #132]	; (15b8 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1532:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1534:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1538:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    153a:	458c      	cmp	ip, r1
    153c:	bf94      	ite	ls
    153e:	461d      	movls	r5, r3
    1540:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1542:	f7ff fef9 	bl	1338 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1546:	1c43      	adds	r3, r0, #1
    1548:	d02e      	beq.n	15a8 <am_hal_tpiu_enable+0x88>
    154a:	08c3      	lsrs	r3, r0, #3
    154c:	fbb3 fef5 	udiv	lr, r3, r5
    1550:	f10e 31ff 	add.w	r1, lr, #4294967295
    1554:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1556:	4a19      	ldr	r2, [pc, #100]	; (15bc <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1558:	4c19      	ldr	r4, [pc, #100]	; (15c0 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    155a:	4b1a      	ldr	r3, [pc, #104]	; (15c4 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    155c:	491a      	ldr	r1, [pc, #104]	; (15c8 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    155e:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1560:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1562:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1564:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1568:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    156a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    156c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    156e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1576:	f7ff bf11 	b.w	139c <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    157a:	4c10      	ldr	r4, [pc, #64]	; (15bc <am_hal_tpiu_enable+0x9c>)
    157c:	6905      	ldr	r5, [r0, #16]
    157e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1580:	6882      	ldr	r2, [r0, #8]
    1582:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1586:	68c3      	ldr	r3, [r0, #12]
    1588:	4c09      	ldr	r4, [pc, #36]	; (15b0 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    158a:	490e      	ldr	r1, [pc, #56]	; (15c4 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    158c:	1e5d      	subs	r5, r3, #1
    158e:	2201      	movs	r2, #1
    1590:	40aa      	lsls	r2, r5
    1592:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1594:	680b      	ldr	r3, [r1, #0]
    1596:	6840      	ldr	r0, [r0, #4]
    1598:	4318      	orrs	r0, r3
    159a:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    159c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15a0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    15a4:	f7ff befa 	b.w	139c <am_hal_flash_delay>
    15a8:	2005      	movs	r0, #5
    15aa:	e7d4      	b.n	1556 <am_hal_tpiu_enable+0x36>
    15ac:	e0040304 	.word	0xe0040304
    15b0:	e0040004 	.word	0xe0040004
    15b4:	001da380 	.word	0x001da380
    15b8:	000f4240 	.word	0x000f4240
    15bc:	e0040010 	.word	0xe0040010
    15c0:	e00400f0 	.word	0xe00400f0
    15c4:	40020250 	.word	0x40020250
    15c8:	e0040f00 	.word	0xe0040f00

000015cc <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    15cc:	4b01      	ldr	r3, [pc, #4]	; (15d4 <am_hal_vcomp_disable+0x8>)
    15ce:	2237      	movs	r2, #55	; 0x37
    15d0:	601a      	str	r2, [r3, #0]
    15d2:	4770      	bx	lr
    15d4:	4000c008 	.word	0x4000c008
    15d8:	73616c46 	.word	0x73616c46
    15dc:	72572068 	.word	0x72572068
    15e0:	20657469 	.word	0x20657469
    15e4:	6d617845 	.word	0x6d617845
    15e8:	0a656c70 	.word	0x0a656c70
    15ec:	00000000 	.word	0x00000000
    15f0:	2e2e2020 	.word	0x2e2e2020
    15f4:	7265202e 	.word	0x7265202e
    15f8:	6e697361 	.word	0x6e697361
    15fc:	6c612067 	.word	0x6c612067
    1600:	666f206c 	.word	0x666f206c
    1604:	616c6620 	.word	0x616c6620
    1608:	69206873 	.word	0x69206873
    160c:	6174736e 	.word	0x6174736e
    1610:	2065636e 	.word	0x2065636e
    1614:	0a2e6425 	.word	0x0a2e6425
    1618:	00000000 	.word	0x00000000
    161c:	53414c46 	.word	0x53414c46
    1620:	414d5f48 	.word	0x414d5f48
    1624:	455f5353 	.word	0x455f5353
    1628:	45534152 	.word	0x45534152
    162c:	32336920 	.word	0x32336920
    1630:	75746552 	.word	0x75746552
    1634:	6f436e72 	.word	0x6f436e72
    1638:	3d206564 	.word	0x3d206564
    163c:	78302020 	.word	0x78302020
    1640:	0a2e7825 	.word	0x0a2e7825
    1644:	00000000 	.word	0x00000000
    1648:	2e2e2020 	.word	0x2e2e2020
    164c:	7270202e 	.word	0x7270202e
    1650:	6172676f 	.word	0x6172676f
    1654:	6e696d6d 	.word	0x6e696d6d
    1658:	6c662067 	.word	0x6c662067
    165c:	20687361 	.word	0x20687361
    1660:	74736e69 	.word	0x74736e69
    1664:	65636e61 	.word	0x65636e61
    1668:	2c642520 	.word	0x2c642520
    166c:	67617020 	.word	0x67617020
    1670:	64252065 	.word	0x64252065
    1674:	00000a2e 	.word	0x00000a2e
    1678:	53414c46 	.word	0x53414c46
    167c:	72702048 	.word	0x72702048
    1680:	6172676f 	.word	0x6172676f
    1684:	6170206d 	.word	0x6170206d
    1688:	61206567 	.word	0x61206567
    168c:	78302074 	.word	0x78302074
    1690:	78383025 	.word	0x78383025
    1694:	32336920 	.word	0x32336920
    1698:	75746552 	.word	0x75746552
    169c:	6f436e72 	.word	0x6f436e72
    16a0:	3d206564 	.word	0x3d206564
    16a4:	25783020 	.word	0x25783020
    16a8:	000a2e78 	.word	0x000a2e78
    16ac:	2e2e2020 	.word	0x2e2e2020
    16b0:	6576202e 	.word	0x6576202e
    16b4:	79666972 	.word	0x79666972
    16b8:	20676e69 	.word	0x20676e69
    16bc:	20656874 	.word	0x20656874
    16c0:	65676170 	.word	0x65676170
    16c4:	73756a20 	.word	0x73756a20
    16c8:	72702074 	.word	0x72702074
    16cc:	6172676f 	.word	0x6172676f
    16d0:	64656d6d 	.word	0x64656d6d
    16d4:	00000a2e 	.word	0x00000a2e
    16d8:	4f525245 	.word	0x4f525245
    16dc:	66203a52 	.word	0x66203a52
    16e0:	6873616c 	.word	0x6873616c
    16e4:	64646120 	.word	0x64646120
    16e8:	73736572 	.word	0x73736572
    16ec:	25783020 	.word	0x25783020
    16f0:	20783830 	.word	0x20783830
    16f4:	20646964 	.word	0x20646964
    16f8:	20746f6e 	.word	0x20746f6e
    16fc:	676f7270 	.word	0x676f7270
    1700:	206d6172 	.word	0x206d6172
    1704:	706f7270 	.word	0x706f7270
    1708:	796c7265 	.word	0x796c7265
    170c:	20200a3a 	.word	0x20200a3a
    1710:	65707845 	.word	0x65707845
    1714:	64657463 	.word	0x64657463
    1718:	6c617620 	.word	0x6c617620
    171c:	3d206575 	.word	0x3d206575
    1720:	25783020 	.word	0x25783020
    1724:	2c783830 	.word	0x2c783830
    1728:	6f727020 	.word	0x6f727020
    172c:	6d617267 	.word	0x6d617267
    1730:	2064656d 	.word	0x2064656d
    1734:	756c6176 	.word	0x756c6176
    1738:	203d2065 	.word	0x203d2065
    173c:	30257830 	.word	0x30257830
    1740:	0a2e7838 	.word	0x0a2e7838
    1744:	00000000 	.word	0x00000000
    1748:	2e2e2020 	.word	0x2e2e2020
    174c:	7265202e 	.word	0x7265202e
    1750:	6e697361 	.word	0x6e697361
    1754:	68742067 	.word	0x68742067
    1758:	61702065 	.word	0x61702065
    175c:	6a206567 	.word	0x6a206567
    1760:	20747375 	.word	0x20747375
    1764:	676f7270 	.word	0x676f7270
    1768:	6d6d6172 	.word	0x6d6d6172
    176c:	0a2e6465 	.word	0x0a2e6465
    1770:	00000000 	.word	0x00000000
    1774:	414c4620 	.word	0x414c4620
    1778:	65204853 	.word	0x65204853
    177c:	65736172 	.word	0x65736172
    1780:	67617020 	.word	0x67617020
    1784:	74612065 	.word	0x74612065
    1788:	25783020 	.word	0x25783020
    178c:	20783830 	.word	0x20783830
    1790:	52323369 	.word	0x52323369
    1794:	72757465 	.word	0x72757465
    1798:	646f436e 	.word	0x646f436e
    179c:	203d2065 	.word	0x203d2065
    17a0:	25783020 	.word	0x25783020
    17a4:	000a2e78 	.word	0x000a2e78
    17a8:	2e2e2020 	.word	0x2e2e2020
    17ac:	6576202e 	.word	0x6576202e
    17b0:	79666972 	.word	0x79666972
    17b4:	20676e69 	.word	0x20676e69
    17b8:	20656874 	.word	0x20656874
    17bc:	65676170 	.word	0x65676170
    17c0:	73756a20 	.word	0x73756a20
    17c4:	72652074 	.word	0x72652074
    17c8:	64657361 	.word	0x64657361
    17cc:	00000a2e 	.word	0x00000a2e
    17d0:	4f525245 	.word	0x4f525245
    17d4:	66203a52 	.word	0x66203a52
    17d8:	6873616c 	.word	0x6873616c
    17dc:	64646120 	.word	0x64646120
    17e0:	73736572 	.word	0x73736572
    17e4:	25783020 	.word	0x25783020
    17e8:	20783830 	.word	0x20783830
    17ec:	20646964 	.word	0x20646964
    17f0:	20746f6e 	.word	0x20746f6e
    17f4:	53415245 	.word	0x53415245
    17f8:	72702045 	.word	0x72702045
    17fc:	7265706f 	.word	0x7265706f
    1800:	0a3a796c 	.word	0x0a3a796c
    1804:	78452020 	.word	0x78452020
    1808:	74636570 	.word	0x74636570
    180c:	76206465 	.word	0x76206465
    1810:	65756c61 	.word	0x65756c61
    1814:	30203d20 	.word	0x30203d20
    1818:	46464678 	.word	0x46464678
    181c:	46464646 	.word	0x46464646
    1820:	70202c46 	.word	0x70202c46
    1824:	72676f72 	.word	0x72676f72
    1828:	656d6d61 	.word	0x656d6d61
    182c:	61762064 	.word	0x61762064
    1830:	2065756c 	.word	0x2065756c
    1834:	7830203d 	.word	0x7830203d
    1838:	78383025 	.word	0x78383025
    183c:	00000a2e 	.word	0x00000a2e
    1840:	4f525245 	.word	0x4f525245
    1844:	46203a52 	.word	0x46203a52
    1848:	4853414c 	.word	0x4853414c
    184c:	69725720 	.word	0x69725720
    1850:	65206574 	.word	0x65206574
    1854:	706d6178 	.word	0x706d6178
    1858:	6620656c 	.word	0x6620656c
    185c:	756c6961 	.word	0x756c6961
    1860:	25206572 	.word	0x25206572
    1864:	00000a64 	.word	0x00000a64
    1868:	53414c46 	.word	0x53414c46
    186c:	72572048 	.word	0x72572048
    1870:	20657469 	.word	0x20657469
    1874:	6d617865 	.word	0x6d617865
    1878:	20656c70 	.word	0x20656c70
    187c:	63637573 	.word	0x63637573
    1880:	66737365 	.word	0x66737365
    1884:	0a206c75 	.word	0x0a206c75
    1888:	00000000 	.word	0x00000000
    188c:	0a0a0a0a 	.word	0x0a0a0a0a
    1890:	0a0a0a0a 	.word	0x0a0a0a0a
    1894:	0a0a0a0a 	.word	0x0a0a0a0a
    1898:	0a0a0a0a 	.word	0x0a0a0a0a
    189c:	00000a0a 	.word	0x00000a0a
    18a0:	685f6d61 	.word	0x685f6d61
    18a4:	635f6c61 	.word	0x635f6c61
    18a8:	65676b6c 	.word	0x65676b6c
    18ac:	79735f6e 	.word	0x79735f6e
    18b0:	6b6c6373 	.word	0x6b6c6373
    18b4:	6c65735f 	.word	0x6c65735f
    18b8:	28746365 	.word	0x28746365
    18bc:	69203a29 	.word	0x69203a29
    18c0:	6c61766e 	.word	0x6c61766e
    18c4:	63206469 	.word	0x63206469
    18c8:	6b636f6c 	.word	0x6b636f6c
    18cc:	74657320 	.word	0x74657320
    18d0:	676e6974 	.word	0x676e6974
    18d4:	0000002e 	.word	0x0000002e
    18d8:	2e5c2e2e 	.word	0x2e5c2e2e
    18dc:	6d615c2e 	.word	0x6d615c2e
    18e0:	6c61685f 	.word	0x6c61685f
    18e4:	6b6c635f 	.word	0x6b6c635f
    18e8:	2e6e6567 	.word	0x2e6e6567
    18ec:	00000063 	.word	0x00000063
