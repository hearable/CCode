
freertos_lowpower_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005014  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00002300  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000080  10002300  00005014  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000043a0  10002380  00005094  00022380  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00022380  2**0
                  CONTENTS, READONLY
  5 .debug_info   00012235  00000000  00000000  000223b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003823  00000000  00000000  000345ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000e90  00000000  00000000  00037e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001450  00000000  00000000  00038c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007da3  00000000  00000000  0003a0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000525a  00000000  00000000  00041e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      000000fa  00000000  00000000  000470ec  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002e10  00000000  00000000  000471e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003f69  00000000  00000000  00049ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 23 00 10 a9 32 00 00 11 33 00 00 4d 33 00 00     .#...2...3..M3..
      10:	4d 33 00 00 4d 33 00 00 4d 33 00 00 00 00 00 00     M3..M3..M3......
	...
      2c:	01 02 00 00 17 33 00 00 00 00 00 00 f1 03 00 00     .....3..........
      3c:	59 04 00 00 17 33 00 00 17 33 00 00 17 33 00 00     Y....3...3...3..
      4c:	17 33 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .3...3...3...3..
      5c:	17 33 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .3...3...3...3..
      6c:	17 33 00 00 dd 2d 00 00 d1 31 00 00 17 33 00 00     .3...-...1...3..
      7c:	17 33 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .3...3...3...3..
      8c:	95 06 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .....3...3...3..
      9c:	17 33 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .3...3...3...3..
      ac:	17 33 00 00 17 33 00 00 17 33 00 00 17 33 00 00     .3...3...3...3..
      bc:	17 33 00 00                                         .3..

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     160:	b480      	push	{r7}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	60f8      	str	r0, [r7, #12]
     168:	60b9      	str	r1, [r7, #8]
     16a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
     16c:	68fb      	ldr	r3, [r7, #12]
     16e:	3b04      	subs	r3, #4
     170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     172:	68fb      	ldr	r3, [r7, #12]
     174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     17a:	68fb      	ldr	r3, [r7, #12]
     17c:	3b04      	subs	r3, #4
     17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
     180:	68bb      	ldr	r3, [r7, #8]
     182:	f023 0201 	bic.w	r2, r3, #1
     186:	68fb      	ldr	r3, [r7, #12]
     188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	3b04      	subs	r3, #4
     18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     190:	4a0c      	ldr	r2, [pc, #48]	; (1c4 <pxPortInitialiseStack+0x64>)
     192:	68fb      	ldr	r3, [r7, #12]
     194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     196:	68fb      	ldr	r3, [r7, #12]
     198:	3b14      	subs	r3, #20
     19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     19c:	687a      	ldr	r2, [r7, #4]
     19e:	68fb      	ldr	r3, [r7, #12]
     1a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
     1a2:	68fb      	ldr	r3, [r7, #12]
     1a4:	3b04      	subs	r3, #4
     1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
     1a8:	68fb      	ldr	r3, [r7, #12]
     1aa:	f06f 0202 	mvn.w	r2, #2
     1ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     1b0:	68fb      	ldr	r3, [r7, #12]
     1b2:	3b20      	subs	r3, #32
     1b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     1b6:	68fb      	ldr	r3, [r7, #12]
}
     1b8:	4618      	mov	r0, r3
     1ba:	3714      	adds	r7, #20
     1bc:	46bd      	mov	sp, r7
     1be:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c2:	4770      	bx	lr
     1c4:	000001c9 	.word	0x000001c9

000001c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     1c8:	b480      	push	{r7}
     1ca:	b083      	sub	sp, #12
     1cc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <prvTaskExitError+0x28>)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
     1d6:	d000      	beq.n	1da <prvTaskExitError+0x12>
     1d8:	e7fe      	b.n	1d8 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     1da:	f04f 0380 	mov.w	r3, #128	; 0x80
     1de:	f383 8811 	msr	BASEPRI, r3
     1e2:	f3bf 8f6f 	isb	sy
     1e6:	f3bf 8f4f 	dsb	sy
     1ea:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
     1ec:	e7fe      	b.n	1ec <prvTaskExitError+0x24>
     1ee:	bf00      	nop
     1f0:	10002300 	.word	0x10002300
	...

00000200 <am_svcall_isr>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     200:	4b07      	ldr	r3, [pc, #28]	; (220 <pxCurrentTCBConst2>)
     202:	6819      	ldr	r1, [r3, #0]
     204:	6808      	ldr	r0, [r1, #0]
     206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     20a:	f380 8809 	msr	PSP, r0
     20e:	f3bf 8f6f 	isb	sy
     212:	f04f 0000 	mov.w	r0, #0
     216:	f380 8811 	msr	BASEPRI, r0
     21a:	4770      	bx	lr
     21c:	f3af 8000 	nop.w

00000220 <pxCurrentTCBConst2>:
     220:	100063a8 	.word	0x100063a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
     224:	bf00      	nop
     226:	bf00      	nop

00000228 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
     228:	4806      	ldr	r0, [pc, #24]	; (244 <prvPortStartFirstTask+0x1c>)
     22a:	6800      	ldr	r0, [r0, #0]
     22c:	6800      	ldr	r0, [r0, #0]
     22e:	f380 8808 	msr	MSP, r0
     232:	b662      	cpsie	i
     234:	b661      	cpsie	f
     236:	f3bf 8f4f 	dsb	sy
     23a:	f3bf 8f6f 	isb	sy
     23e:	df00      	svc	0
     240:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
     242:	bf00      	nop
     244:	e000ed08 	.word	0xe000ed08

00000248 <vPortEnableVFP>:
/*-----------------------------------------------------------*/
/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
     248:	f8df 000c 	ldr.w	r0, [pc, #12]	; 258 <vPortEnableVFP+0x10>
     24c:	6801      	ldr	r1, [r0, #0]
     24e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     252:	6001      	str	r1, [r0, #0]
     254:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
     256:	bf00      	nop
     258:	e000ed88 	.word	0xe000ed88

0000025c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     25c:	b580      	push	{r7, lr}
     25e:	b084      	sub	sp, #16
     260:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
     262:	4b37      	ldr	r3, [pc, #220]	; (340 <xPortStartScheduler+0xe4>)
     264:	681b      	ldr	r3, [r3, #0]
     266:	4a37      	ldr	r2, [pc, #220]	; (344 <xPortStartScheduler+0xe8>)
     268:	4293      	cmp	r3, r2
     26a:	d100      	bne.n	26e <xPortStartScheduler+0x12>
     26c:	e7fe      	b.n	26c <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
     26e:	4b34      	ldr	r3, [pc, #208]	; (340 <xPortStartScheduler+0xe4>)
     270:	681b      	ldr	r3, [r3, #0]
     272:	4a35      	ldr	r2, [pc, #212]	; (348 <xPortStartScheduler+0xec>)
     274:	4293      	cmp	r3, r2
     276:	d100      	bne.n	27a <xPortStartScheduler+0x1e>
     278:	e7fe      	b.n	278 <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
     27a:	4b34      	ldr	r3, [pc, #208]	; (34c <xPortStartScheduler+0xf0>)
     27c:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
     27e:	68fb      	ldr	r3, [r7, #12]
     280:	781b      	ldrb	r3, [r3, #0]
     282:	b2db      	uxtb	r3, r3
     284:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
     286:	68fb      	ldr	r3, [r7, #12]
     288:	22ff      	movs	r2, #255	; 0xff
     28a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
     28c:	68fb      	ldr	r3, [r7, #12]
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	b2db      	uxtb	r3, r3
     292:	71fb      	strb	r3, [r7, #7]

		/* The kernel interrupt priority should be set to the lowest
		priority. */
		configASSERT( ucMaxPriorityValue == ( configKERNEL_INTERRUPT_PRIORITY & ucMaxPriorityValue ) );
     294:	79fb      	ldrb	r3, [r7, #7]
     296:	b2db      	uxtb	r3, r3
     298:	f023 031f 	bic.w	r3, r3, #31
     29c:	b2da      	uxtb	r2, r3
     29e:	79fb      	ldrb	r3, [r7, #7]
     2a0:	b2db      	uxtb	r3, r3
     2a2:	429a      	cmp	r2, r3
     2a4:	d000      	beq.n	2a8 <xPortStartScheduler+0x4c>
     2a6:	e7fe      	b.n	2a6 <xPortStartScheduler+0x4a>

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
     2a8:	79fb      	ldrb	r3, [r7, #7]
     2aa:	b2db      	uxtb	r3, r3
     2ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     2b0:	b2da      	uxtb	r2, r3
     2b2:	4b27      	ldr	r3, [pc, #156]	; (350 <xPortStartScheduler+0xf4>)
     2b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
     2b6:	4b27      	ldr	r3, [pc, #156]	; (354 <xPortStartScheduler+0xf8>)
     2b8:	2207      	movs	r2, #7
     2ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     2bc:	e009      	b.n	2d2 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
     2be:	4b25      	ldr	r3, [pc, #148]	; (354 <xPortStartScheduler+0xf8>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	3b01      	subs	r3, #1
     2c4:	4a23      	ldr	r2, [pc, #140]	; (354 <xPortStartScheduler+0xf8>)
     2c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
     2c8:	79fb      	ldrb	r3, [r7, #7]
     2ca:	b2db      	uxtb	r3, r3
     2cc:	005b      	lsls	r3, r3, #1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     2d2:	79fb      	ldrb	r3, [r7, #7]
     2d4:	b2db      	uxtb	r3, r3
     2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
     2da:	2b80      	cmp	r3, #128	; 0x80
     2dc:	d0ef      	beq.n	2be <xPortStartScheduler+0x62>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
     2de:	4b1d      	ldr	r3, [pc, #116]	; (354 <xPortStartScheduler+0xf8>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	021b      	lsls	r3, r3, #8
     2e4:	4a1b      	ldr	r2, [pc, #108]	; (354 <xPortStartScheduler+0xf8>)
     2e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
     2e8:	4b1a      	ldr	r3, [pc, #104]	; (354 <xPortStartScheduler+0xf8>)
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     2f0:	4a18      	ldr	r2, [pc, #96]	; (354 <xPortStartScheduler+0xf8>)
     2f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
     2f4:	68bb      	ldr	r3, [r7, #8]
     2f6:	b2da      	uxtb	r2, r3
     2f8:	68fb      	ldr	r3, [r7, #12]
     2fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
     2fc:	4a16      	ldr	r2, [pc, #88]	; (358 <xPortStartScheduler+0xfc>)
     2fe:	4b16      	ldr	r3, [pc, #88]	; (358 <xPortStartScheduler+0xfc>)
     300:	681b      	ldr	r3, [r3, #0]
     302:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
     306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
     308:	4a13      	ldr	r2, [pc, #76]	; (358 <xPortStartScheduler+0xfc>)
     30a:	4b13      	ldr	r3, [pc, #76]	; (358 <xPortStartScheduler+0xfc>)
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
     312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     314:	f000 f9d4 	bl	6c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     318:	4b10      	ldr	r3, [pc, #64]	; (35c <xPortStartScheduler+0x100>)
     31a:	2200      	movs	r2, #0
     31c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
     31e:	f7ff ff93 	bl	248 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
     322:	4a0f      	ldr	r2, [pc, #60]	; (360 <xPortStartScheduler+0x104>)
     324:	4b0e      	ldr	r3, [pc, #56]	; (360 <xPortStartScheduler+0x104>)
     326:	681b      	ldr	r3, [r3, #0]
     328:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     32c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
     32e:	f7ff ff7b 	bl	228 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     332:	f7ff ff49 	bl	1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
     336:	2300      	movs	r3, #0
}
     338:	4618      	mov	r0, r3
     33a:	3710      	adds	r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bd80      	pop	{r7, pc}
     340:	e000ed00 	.word	0xe000ed00
     344:	410fc271 	.word	0x410fc271
     348:	410fc270 	.word	0x410fc270
     34c:	e000e400 	.word	0xe000e400
     350:	10002384 	.word	0x10002384
     354:	10002388 	.word	0x10002388
     358:	e000ed20 	.word	0xe000ed20
     35c:	10002300 	.word	0x10002300
     360:	e000ef34 	.word	0xe000ef34

00000364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     364:	b480      	push	{r7}
     366:	b083      	sub	sp, #12
     368:	af00      	add	r7, sp, #0
     36a:	f04f 0380 	mov.w	r3, #128	; 0x80
     36e:	f383 8811 	msr	BASEPRI, r3
     372:	f3bf 8f6f 	isb	sy
     376:	f3bf 8f4f 	dsb	sy
     37a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
     37c:	4b0a      	ldr	r3, [pc, #40]	; (3a8 <vPortEnterCritical+0x44>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	3301      	adds	r3, #1
     382:	4a09      	ldr	r2, [pc, #36]	; (3a8 <vPortEnterCritical+0x44>)
     384:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <vPortEnterCritical+0x44>)
     388:	681b      	ldr	r3, [r3, #0]
     38a:	2b01      	cmp	r3, #1
     38c:	d105      	bne.n	39a <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <vPortEnterCritical+0x48>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d000      	beq.n	39a <vPortEnterCritical+0x36>
     398:	e7fe      	b.n	398 <vPortEnterCritical+0x34>
	}
}
     39a:	bf00      	nop
     39c:	370c      	adds	r7, #12
     39e:	46bd      	mov	sp, r7
     3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	10002300 	.word	0x10002300
     3ac:	e000ed04 	.word	0xe000ed04

000003b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
     3b6:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <vPortExitCritical+0x38>)
     3b8:	681b      	ldr	r3, [r3, #0]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d100      	bne.n	3c0 <vPortExitCritical+0x10>
     3be:	e7fe      	b.n	3be <vPortExitCritical+0xe>
	uxCriticalNesting--;
     3c0:	4b09      	ldr	r3, [pc, #36]	; (3e8 <vPortExitCritical+0x38>)
     3c2:	681b      	ldr	r3, [r3, #0]
     3c4:	3b01      	subs	r3, #1
     3c6:	4a08      	ldr	r2, [pc, #32]	; (3e8 <vPortExitCritical+0x38>)
     3c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
     3ca:	4b07      	ldr	r3, [pc, #28]	; (3e8 <vPortExitCritical+0x38>)
     3cc:	681b      	ldr	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d104      	bne.n	3dc <vPortExitCritical+0x2c>
     3d2:	2300      	movs	r3, #0
     3d4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr
     3e8:	10002300 	.word	0x10002300
     3ec:	00000000 	.word	0x00000000

000003f0 <am_pendsv_isr>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     3f0:	f3ef 8009 	mrs	r0, PSP
     3f4:	f3bf 8f6f 	isb	sy
     3f8:	4b15      	ldr	r3, [pc, #84]	; (450 <pxCurrentTCBConst>)
     3fa:	681a      	ldr	r2, [r3, #0]
     3fc:	f01e 0f10 	tst.w	lr, #16
     400:	bf08      	it	eq
     402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
     406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     40a:	6010      	str	r0, [r2, #0]
     40c:	f84d 3d04 	str.w	r3, [sp, #-4]!
     410:	f04f 0080 	mov.w	r0, #128	; 0x80
     414:	f380 8811 	msr	BASEPRI, r0
     418:	f3bf 8f4f 	dsb	sy
     41c:	f3bf 8f6f 	isb	sy
     420:	f001 fc24 	bl	1c6c <vTaskSwitchContext>
     424:	f04f 0000 	mov.w	r0, #0
     428:	f380 8811 	msr	BASEPRI, r0
     42c:	bc08      	pop	{r3}
     42e:	6819      	ldr	r1, [r3, #0]
     430:	6808      	ldr	r0, [r1, #0]
     432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     436:	f01e 0f10 	tst.w	lr, #16
     43a:	bf08      	it	eq
     43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
     440:	f380 8809 	msr	PSP, r0
     444:	f3bf 8f6f 	isb	sy
     448:	4770      	bx	lr
     44a:	bf00      	nop
     44c:	f3af 8000 	nop.w

00000450 <pxCurrentTCBConst>:
     450:	100063a8 	.word	0x100063a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
     454:	bf00      	nop
     456:	bf00      	nop

00000458 <am_systick_isr>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     458:	b580      	push	{r7, lr}
     45a:	b082      	sub	sp, #8
     45c:	af00      	add	r7, sp, #0
	__asm volatile
     45e:	f04f 0380 	mov.w	r3, #128	; 0x80
     462:	f383 8811 	msr	BASEPRI, r3
     466:	f3bf 8f6f 	isb	sy
     46a:	f3bf 8f4f 	dsb	sy
     46e:	607b      	str	r3, [r7, #4]
	// Addition for support of SystemView Profiler
	traceISR_ENTER();
	// End addition
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     470:	f001 fb58 	bl	1b24 <xTaskIncrementTick>
     474:	4603      	mov	r3, r0
     476:	2b00      	cmp	r3, #0
     478:	d003      	beq.n	482 <am_systick_isr+0x2a>
		  traceISR_EXIT_TO_SCHEDULER();
		  // End addition

			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <am_systick_isr+0x3c>)
     47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     480:	601a      	str	r2, [r3, #0]
     482:	2300      	movs	r3, #0
     484:	603b      	str	r3, [r7, #0]
	__asm volatile
     486:	683b      	ldr	r3, [r7, #0]
     488:	f383 8811 	msr	BASEPRI, r3
		  traceISR_EXIT();
		}
		// End addition
	}
	portENABLE_INTERRUPTS();
}
     48c:	bf00      	nop
     48e:	3708      	adds	r7, #8
     490:	46bd      	mov	sp, r7
     492:	bd80      	pop	{r7, pc}
     494:	e000ed04 	.word	0xe000ed04

00000498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
     49e:	f3ef 8305 	mrs	r3, IPSR
     4a2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	2b0f      	cmp	r3, #15
     4a8:	d90a      	bls.n	4c0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
     4aa:	4a0d      	ldr	r2, [pc, #52]	; (4e0 <vPortValidateInterruptPriority+0x48>)
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	4413      	add	r3, r2
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
     4b4:	4b0b      	ldr	r3, [pc, #44]	; (4e4 <vPortValidateInterruptPriority+0x4c>)
     4b6:	781b      	ldrb	r3, [r3, #0]
     4b8:	78fa      	ldrb	r2, [r7, #3]
     4ba:	429a      	cmp	r2, r3
     4bc:	d200      	bcs.n	4c0 <vPortValidateInterruptPriority+0x28>
     4be:	e7fe      	b.n	4be <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
     4c0:	4b09      	ldr	r3, [pc, #36]	; (4e8 <vPortValidateInterruptPriority+0x50>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
     4c8:	4b08      	ldr	r3, [pc, #32]	; (4ec <vPortValidateInterruptPriority+0x54>)
     4ca:	681b      	ldr	r3, [r3, #0]
     4cc:	429a      	cmp	r2, r3
     4ce:	d900      	bls.n	4d2 <vPortValidateInterruptPriority+0x3a>
     4d0:	e7fe      	b.n	4d0 <vPortValidateInterruptPriority+0x38>
	}
     4d2:	bf00      	nop
     4d4:	370c      	adds	r7, #12
     4d6:	46bd      	mov	sp, r7
     4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     4dc:	4770      	bx	lr
     4de:	bf00      	nop
     4e0:	e000e3f0 	.word	0xe000e3f0
     4e4:	10002384 	.word	0x10002384
     4e8:	e000ed0c 	.word	0xe000ed0c
     4ec:	10002388 	.word	0x10002388

000004f0 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b088      	sub	sp, #32
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
     4f8:	4b36      	ldr	r3, [pc, #216]	; (5d4 <vPortSuppressTicksAndSleep+0xe4>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	687a      	ldr	r2, [r7, #4]
     4fe:	429a      	cmp	r2, r3
     500:	d902      	bls.n	508 <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
     502:	4b34      	ldr	r3, [pc, #208]	; (5d4 <vPortSuppressTicksAndSleep+0xe4>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
     508:	687b      	ldr	r3, [r7, #4]
     50a:	3b01      	subs	r3, #1
     50c:	4a32      	ldr	r2, [pc, #200]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     50e:	6812      	ldr	r2, [r2, #0]
     510:	fb02 f303 	mul.w	r3, r2, r3
     514:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
     516:	b672      	cpsid	i
	__asm volatile( "dsb" );
     518:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     51c:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
     520:	f004 fb7c 	bl	4c1c <am_hal_stimer_counter_get>
     524:	4602      	mov	r2, r0
     526:	4b2d      	ldr	r3, [pc, #180]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	1ad3      	subs	r3, r2, r3
     52c:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
     52e:	f001 fdd1 	bl	20d4 <eTaskConfirmSleepModeStatus>
     532:	4603      	mov	r3, r0
     534:	2b00      	cmp	r3, #0
     536:	d006      	beq.n	546 <vPortSuppressTicksAndSleep+0x56>
     538:	4b27      	ldr	r3, [pc, #156]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     53a:	681a      	ldr	r2, [r3, #0]
     53c:	69bb      	ldr	r3, [r7, #24]
     53e:	441a      	add	r2, r3
     540:	69fb      	ldr	r3, [r7, #28]
     542:	429a      	cmp	r2, r3
     544:	d901      	bls.n	54a <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     546:	b662      	cpsie	i
     548:	e03f      	b.n	5ca <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
     54a:	69fa      	ldr	r2, [r7, #28]
     54c:	69bb      	ldr	r3, [r7, #24]
     54e:	1ad3      	subs	r3, r2, r3
     550:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
     552:	69f9      	ldr	r1, [r7, #28]
     554:	2000      	movs	r0, #0
     556:	f004 fb67 	bl	4c28 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
     55e:	6978      	ldr	r0, [r7, #20]
     560:	f002 fe47 	bl	31f2 <am_freertos_sleep>
     564:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
     566:	697b      	ldr	r3, [r7, #20]
     568:	2b00      	cmp	r3, #0
     56a:	d004      	beq.n	576 <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
     56c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
     570:	bf30      	wfi
			__asm volatile( "isb" );
     572:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
     576:	6878      	ldr	r0, [r7, #4]
     578:	f002 fe47 	bl	320a <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
     57c:	f004 fb4e 	bl	4c1c <am_hal_stimer_counter_get>
     580:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
     582:	693b      	ldr	r3, [r7, #16]
     584:	4a15      	ldr	r2, [pc, #84]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     586:	6812      	ldr	r2, [r2, #0]
     588:	1a9b      	subs	r3, r3, r2
     58a:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
     58c:	4b12      	ldr	r3, [pc, #72]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     58e:	681a      	ldr	r2, [r3, #0]
     590:	68fb      	ldr	r3, [r7, #12]
     592:	fbb3 f1f2 	udiv	r1, r3, r2
     596:	fb02 f201 	mul.w	r2, r2, r1
     59a:	1a9b      	subs	r3, r3, r2
     59c:	693a      	ldr	r2, [r7, #16]
     59e:	1ad3      	subs	r3, r2, r3
     5a0:	4a0e      	ldr	r2, [pc, #56]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     5a2:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
     5a4:	4b0c      	ldr	r3, [pc, #48]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	68fa      	ldr	r2, [r7, #12]
     5aa:	fbb2 f3f3 	udiv	r3, r2, r3
     5ae:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
     5b0:	68f8      	ldr	r0, [r7, #12]
     5b2:	f001 fa99 	bl	1ae8 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
     5b6:	2001      	movs	r0, #1
     5b8:	f004 fb62 	bl	4c80 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     5be:	681b      	ldr	r3, [r3, #0]
     5c0:	4619      	mov	r1, r3
     5c2:	2000      	movs	r0, #0
     5c4:	f004 fb30 	bl	4c28 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     5c8:	b662      	cpsie	i

	}
}
     5ca:	bf00      	nop
     5cc:	3720      	adds	r7, #32
     5ce:	46bd      	mov	sp, r7
     5d0:	bd80      	pop	{r7, pc}
     5d2:	bf00      	nop
     5d4:	10002390 	.word	0x10002390
     5d8:	1000238c 	.word	0x1000238c
     5dc:	10002380 	.word	0x10002380

000005e0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b088      	sub	sp, #32
     5e4:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
     5e6:	2300      	movs	r3, #0
     5e8:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
     5ea:	2300      	movs	r3, #0
     5ec:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
     5ee:	f004 fb15 	bl	4c1c <am_hal_stimer_counter_get>
     5f2:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     5f4:	4b24      	ldr	r3, [pc, #144]	; (688 <xPortStimerTickHandler+0xa8>)
     5f6:	681b      	ldr	r3, [r3, #0]
     5f8:	4619      	mov	r1, r3
     5fa:	2000      	movs	r0, #0
     5fc:	f004 fb14 	bl	4c28 <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
     600:	4b22      	ldr	r3, [pc, #136]	; (68c <xPortStimerTickHandler+0xac>)
     602:	681b      	ldr	r3, [r3, #0]
     604:	693a      	ldr	r2, [r7, #16]
     606:	1ad3      	subs	r3, r2, r3
     608:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
     60a:	4b1f      	ldr	r3, [pc, #124]	; (688 <xPortStimerTickHandler+0xa8>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	68fa      	ldr	r2, [r7, #12]
     610:	fbb2 f3f3 	udiv	r3, r2, r3
     614:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
     616:	4b1c      	ldr	r3, [pc, #112]	; (688 <xPortStimerTickHandler+0xa8>)
     618:	681a      	ldr	r2, [r3, #0]
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	fbb3 f1f2 	udiv	r1, r3, r2
     620:	fb02 f201 	mul.w	r2, r2, r1
     624:	1a9b      	subs	r3, r3, r2
     626:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
     628:	693a      	ldr	r2, [r7, #16]
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	1ad3      	subs	r3, r2, r3
     62e:	4a17      	ldr	r2, [pc, #92]	; (68c <xPortStimerTickHandler+0xac>)
     630:	6013      	str	r3, [r2, #0]
	__asm volatile
     632:	f3ef 8211 	mrs	r2, BASEPRI
     636:	f04f 0380 	mov.w	r3, #128	; 0x80
     63a:	f383 8811 	msr	BASEPRI, r3
     63e:	f3bf 8f6f 	isb	sy
     642:	f3bf 8f4f 	dsb	sy
     646:	60ba      	str	r2, [r7, #8]
     648:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
     64a:	e008      	b.n	65e <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
     64c:	f001 fa6a 	bl	1b24 <xTaskIncrementTick>
     650:	4603      	mov	r3, r0
     652:	2b00      	cmp	r3, #0
     654:	d101      	bne.n	65a <xPortStimerTickHandler+0x7a>
     656:	69bb      	ldr	r3, [r7, #24]
     658:	e000      	b.n	65c <xPortStimerTickHandler+0x7c>
     65a:	2301      	movs	r3, #1
     65c:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
     65e:	69fb      	ldr	r3, [r7, #28]
     660:	1e5a      	subs	r2, r3, #1
     662:	61fa      	str	r2, [r7, #28]
     664:	2b00      	cmp	r3, #0
     666:	d1f1      	bne.n	64c <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
     668:	69bb      	ldr	r3, [r7, #24]
     66a:	2b00      	cmp	r3, #0
     66c:	d003      	beq.n	676 <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <xPortStimerTickHandler+0xb0>)
     670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     674:	601a      	str	r2, [r3, #0]
     676:	2300      	movs	r3, #0
     678:	603b      	str	r3, [r7, #0]
	__asm volatile
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	f383 8811 	msr	BASEPRI, r3
        	traceISR_EXIT();
        }
		// End addition
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
     680:	bf00      	nop
     682:	3720      	adds	r7, #32
     684:	46bd      	mov	sp, r7
     686:	bd80      	pop	{r7, pc}
     688:	1000238c 	.word	0x1000238c
     68c:	10002380 	.word	0x10002380
     690:	e000ed04 	.word	0xe000ed04

00000694 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
     694:	b580      	push	{r7, lr}
     696:	b082      	sub	sp, #8
     698:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
     69a:	2000      	movs	r0, #0
     69c:	f004 faf6 	bl	4c8c <am_hal_stimer_int_status_get>
     6a0:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	f003 0301 	and.w	r3, r3, #1
     6a8:	2b00      	cmp	r3, #0
     6aa:	d004      	beq.n	6b6 <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
     6ac:	2001      	movs	r0, #1
     6ae:	f004 fae7 	bl	4c80 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
     6b2:	f7ff ff95 	bl	5e0 <xPortStimerTickHandler>
    }
}
     6b6:	bf00      	nop
     6b8:	3708      	adds	r7, #8
     6ba:	46bd      	mov	sp, r7
     6bc:	bd80      	pop	{r7, pc}
	...

000006c0 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
     6c6:	4b19      	ldr	r3, [pc, #100]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     6c8:	2220      	movs	r2, #32
     6ca:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
     6cc:	4b17      	ldr	r3, [pc, #92]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	f04f 32ff 	mov.w	r2, #4294967295
     6d4:	fbb2 f3f3 	udiv	r3, r2, r3
     6d8:	4a15      	ldr	r2, [pc, #84]	; (730 <vPortSetupTimerInterrupt+0x70>)
     6da:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
     6dc:	2001      	movs	r0, #1
     6de:	f004 fac7 	bl	4c70 <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_STIMER_CMPR0, configKERNEL_INTERRUPT_PRIORITY);
     6e2:	21e0      	movs	r1, #224	; 0xe0
     6e4:	2023      	movs	r0, #35	; 0x23
     6e6:	f004 f813 	bl	4710 <am_hal_interrupt_priority_set>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
     6ea:	2023      	movs	r0, #35	; 0x23
     6ec:	f003 ffe8 	bl	46c0 <am_hal_interrupt_enable>

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
     6f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     6f4:	f004 fa74 	bl	4be0 <am_hal_stimer_config>
     6f8:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
     6fa:	f004 fa8f 	bl	4c1c <am_hal_stimer_counter_get>
     6fe:	4602      	mov	r2, r0
     700:	4b0c      	ldr	r3, [pc, #48]	; (734 <vPortSetupTimerInterrupt+0x74>)
     702:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     704:	4b09      	ldr	r3, [pc, #36]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     706:	681b      	ldr	r3, [r3, #0]
     708:	4619      	mov	r1, r3
     70a:	2000      	movs	r0, #0
     70c:	f004 fa8c 	bl	4c28 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|AM_REG_CTIMER_STCFG_CLKSEL_M)) | AM_STIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
     710:	687a      	ldr	r2, [r7, #4]
     712:	4b09      	ldr	r3, [pc, #36]	; (738 <vPortSetupTimerInterrupt+0x78>)
     714:	4013      	ands	r3, r2
     716:	f443 7381 	orr.w	r3, r3, #258	; 0x102
     71a:	f043 0301 	orr.w	r3, r3, #1
     71e:	4618      	mov	r0, r3
     720:	f004 fa5e 	bl	4be0 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
     724:	bf00      	nop
     726:	3708      	adds	r7, #8
     728:	46bd      	mov	sp, r7
     72a:	bd80      	pop	{r7, pc}
     72c:	1000238c 	.word	0x1000238c
     730:	10002390 	.word	0x10002390
     734:	10002380 	.word	0x10002380
     738:	7ffffef0 	.word	0x7ffffef0

0000073c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     73c:	b580      	push	{r7, lr}
     73e:	b088      	sub	sp, #32
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     744:	2300      	movs	r3, #0
     746:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
     748:	f001 f8e4 	bl	1914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     74c:	4b40      	ldr	r3, [pc, #256]	; (850 <pvPortMalloc+0x114>)
     74e:	681b      	ldr	r3, [r3, #0]
     750:	2b00      	cmp	r3, #0
     752:	d104      	bne.n	75e <pvPortMalloc+0x22>
		{
			prvHeapInit();
     754:	f000 f8be 	bl	8d4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     758:	4b3d      	ldr	r3, [pc, #244]	; (850 <pvPortMalloc+0x114>)
     75a:	2201      	movs	r2, #1
     75c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     75e:	687b      	ldr	r3, [r7, #4]
     760:	2b00      	cmp	r3, #0
     762:	d00e      	beq.n	782 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
     764:	2308      	movs	r3, #8
     766:	461a      	mov	r2, r3
     768:	687b      	ldr	r3, [r7, #4]
     76a:	4413      	add	r3, r2
     76c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
     76e:	687b      	ldr	r3, [r7, #4]
     770:	f003 0307 	and.w	r3, r3, #7
     774:	2b00      	cmp	r3, #0
     776:	d004      	beq.n	782 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     778:	687b      	ldr	r3, [r7, #4]
     77a:	f023 0307 	bic.w	r3, r3, #7
     77e:	3308      	adds	r3, #8
     780:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     782:	687b      	ldr	r3, [r7, #4]
     784:	2b00      	cmp	r3, #0
     786:	d057      	beq.n	838 <pvPortMalloc+0xfc>
     788:	687b      	ldr	r3, [r7, #4]
     78a:	f643 72f7 	movw	r2, #16375	; 0x3ff7
     78e:	4293      	cmp	r3, r2
     790:	d852      	bhi.n	838 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     792:	4b30      	ldr	r3, [pc, #192]	; (854 <pvPortMalloc+0x118>)
     794:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
     796:	4b2f      	ldr	r3, [pc, #188]	; (854 <pvPortMalloc+0x118>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     79c:	e004      	b.n	7a8 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
     79e:	69fb      	ldr	r3, [r7, #28]
     7a0:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
     7a2:	69fb      	ldr	r3, [r7, #28]
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a8:	69fb      	ldr	r3, [r7, #28]
     7aa:	685a      	ldr	r2, [r3, #4]
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	429a      	cmp	r2, r3
     7b0:	d203      	bcs.n	7ba <pvPortMalloc+0x7e>
     7b2:	69fb      	ldr	r3, [r7, #28]
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d1f1      	bne.n	79e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     7ba:	69fb      	ldr	r3, [r7, #28]
     7bc:	4a26      	ldr	r2, [pc, #152]	; (858 <pvPortMalloc+0x11c>)
     7be:	4293      	cmp	r3, r2
     7c0:	d03a      	beq.n	838 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     7c2:	69bb      	ldr	r3, [r7, #24]
     7c4:	681b      	ldr	r3, [r3, #0]
     7c6:	2208      	movs	r2, #8
     7c8:	4413      	add	r3, r2
     7ca:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     7cc:	69fb      	ldr	r3, [r7, #28]
     7ce:	681a      	ldr	r2, [r3, #0]
     7d0:	69bb      	ldr	r3, [r7, #24]
     7d2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7d4:	69fb      	ldr	r3, [r7, #28]
     7d6:	685a      	ldr	r2, [r3, #4]
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	1ad3      	subs	r3, r2, r3
     7dc:	2208      	movs	r2, #8
     7de:	0052      	lsls	r2, r2, #1
     7e0:	4293      	cmp	r3, r2
     7e2:	d922      	bls.n	82a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7e4:	69fa      	ldr	r2, [r7, #28]
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	4413      	add	r3, r2
     7ea:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7ec:	69fb      	ldr	r3, [r7, #28]
     7ee:	685a      	ldr	r2, [r3, #4]
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	1ad2      	subs	r2, r2, r3
     7f4:	68fb      	ldr	r3, [r7, #12]
     7f6:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
     7f8:	69fb      	ldr	r3, [r7, #28]
     7fa:	687a      	ldr	r2, [r7, #4]
     7fc:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	685b      	ldr	r3, [r3, #4]
     802:	60bb      	str	r3, [r7, #8]
     804:	4b13      	ldr	r3, [pc, #76]	; (854 <pvPortMalloc+0x118>)
     806:	613b      	str	r3, [r7, #16]
     808:	e002      	b.n	810 <pvPortMalloc+0xd4>
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	613b      	str	r3, [r7, #16]
     810:	693b      	ldr	r3, [r7, #16]
     812:	681b      	ldr	r3, [r3, #0]
     814:	685a      	ldr	r2, [r3, #4]
     816:	68bb      	ldr	r3, [r7, #8]
     818:	429a      	cmp	r2, r3
     81a:	d3f6      	bcc.n	80a <pvPortMalloc+0xce>
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	681a      	ldr	r2, [r3, #0]
     820:	68fb      	ldr	r3, [r7, #12]
     822:	601a      	str	r2, [r3, #0]
     824:	693b      	ldr	r3, [r7, #16]
     826:	68fa      	ldr	r2, [r7, #12]
     828:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     82a:	4b0c      	ldr	r3, [pc, #48]	; (85c <pvPortMalloc+0x120>)
     82c:	681a      	ldr	r2, [r3, #0]
     82e:	69fb      	ldr	r3, [r7, #28]
     830:	685b      	ldr	r3, [r3, #4]
     832:	1ad3      	subs	r3, r2, r3
     834:	4a09      	ldr	r2, [pc, #36]	; (85c <pvPortMalloc+0x120>)
     836:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     838:	f001 f8b2 	bl	19a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     83c:	697b      	ldr	r3, [r7, #20]
     83e:	2b00      	cmp	r3, #0
     840:	d101      	bne.n	846 <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     842:	f002 fcec 	bl	321e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
     846:	697b      	ldr	r3, [r7, #20]
}
     848:	4618      	mov	r0, r3
     84a:	3720      	adds	r7, #32
     84c:	46bd      	mov	sp, r7
     84e:	bd80      	pop	{r7, pc}
     850:	100063a4 	.word	0x100063a4
     854:	10006394 	.word	0x10006394
     858:	1000639c 	.word	0x1000639c
     85c:	10002304 	.word	0x10002304

00000860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     860:	b580      	push	{r7, lr}
     862:	b086      	sub	sp, #24
     864:	af00      	add	r7, sp, #0
     866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
     868:	687b      	ldr	r3, [r7, #4]
     86a:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	2b00      	cmp	r3, #0
     870:	d027      	beq.n	8c2 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     872:	2308      	movs	r3, #8
     874:	425b      	negs	r3, r3
     876:	693a      	ldr	r2, [r7, #16]
     878:	4413      	add	r3, r2
     87a:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     87c:	693b      	ldr	r3, [r7, #16]
     87e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
     880:	f001 f848 	bl	1914 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     884:	68fb      	ldr	r3, [r7, #12]
     886:	685b      	ldr	r3, [r3, #4]
     888:	60bb      	str	r3, [r7, #8]
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <vPortFree+0x6c>)
     88c:	617b      	str	r3, [r7, #20]
     88e:	e002      	b.n	896 <vPortFree+0x36>
     890:	697b      	ldr	r3, [r7, #20]
     892:	681b      	ldr	r3, [r3, #0]
     894:	617b      	str	r3, [r7, #20]
     896:	697b      	ldr	r3, [r7, #20]
     898:	681b      	ldr	r3, [r3, #0]
     89a:	685a      	ldr	r2, [r3, #4]
     89c:	68bb      	ldr	r3, [r7, #8]
     89e:	429a      	cmp	r2, r3
     8a0:	d3f6      	bcc.n	890 <vPortFree+0x30>
     8a2:	697b      	ldr	r3, [r7, #20]
     8a4:	681a      	ldr	r2, [r3, #0]
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	601a      	str	r2, [r3, #0]
     8aa:	697b      	ldr	r3, [r7, #20]
     8ac:	68fa      	ldr	r2, [r7, #12]
     8ae:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     8b0:	68fb      	ldr	r3, [r7, #12]
     8b2:	685a      	ldr	r2, [r3, #4]
     8b4:	4b06      	ldr	r3, [pc, #24]	; (8d0 <vPortFree+0x70>)
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	4413      	add	r3, r2
     8ba:	4a05      	ldr	r2, [pc, #20]	; (8d0 <vPortFree+0x70>)
     8bc:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     8be:	f001 f86f 	bl	19a0 <xTaskResumeAll>
	}
}
     8c2:	bf00      	nop
     8c4:	3718      	adds	r7, #24
     8c6:	46bd      	mov	sp, r7
     8c8:	bd80      	pop	{r7, pc}
     8ca:	bf00      	nop
     8cc:	10006394 	.word	0x10006394
     8d0:	10002304 	.word	0x10002304

000008d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     8d4:	b480      	push	{r7}
     8d6:	b083      	sub	sp, #12
     8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     8da:	4b10      	ldr	r3, [pc, #64]	; (91c <prvHeapInit+0x48>)
     8dc:	f023 0307 	bic.w	r3, r3, #7
     8e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8e2:	4a0f      	ldr	r2, [pc, #60]	; (920 <prvHeapInit+0x4c>)
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
     8e8:	4b0d      	ldr	r3, [pc, #52]	; (920 <prvHeapInit+0x4c>)
     8ea:	2200      	movs	r2, #0
     8ec:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     8ee:	4b0d      	ldr	r3, [pc, #52]	; (924 <prvHeapInit+0x50>)
     8f0:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     8f4:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
     8f6:	4b0b      	ldr	r3, [pc, #44]	; (924 <prvHeapInit+0x50>)
     8f8:	2200      	movs	r2, #0
     8fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     900:	683b      	ldr	r3, [r7, #0]
     902:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     908:	683b      	ldr	r3, [r7, #0]
     90a:	4a06      	ldr	r2, [pc, #24]	; (924 <prvHeapInit+0x50>)
     90c:	601a      	str	r2, [r3, #0]
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop
     91c:	1000239c 	.word	0x1000239c
     920:	10006394 	.word	0x10006394
     924:	1000639c 	.word	0x1000639c

00000928 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     92e:	2018      	movs	r0, #24
     930:	f7ff ff04 	bl	73c <pvPortMalloc>
     934:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
     936:	687b      	ldr	r3, [r7, #4]
     938:	2b00      	cmp	r3, #0
     93a:	d007      	beq.n	94c <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	2200      	movs	r2, #0
     940:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     942:	687b      	ldr	r3, [r7, #4]
     944:	3304      	adds	r3, #4
     946:	4618      	mov	r0, r3
     948:	f000 f950 	bl	bec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
     94c:	687b      	ldr	r3, [r7, #4]
	}
     94e:	4618      	mov	r0, r3
     950:	3708      	adds	r7, #8
     952:	46bd      	mov	sp, r7
     954:	bd80      	pop	{r7, pc}
	...

00000958 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     958:	b580      	push	{r7, lr}
     95a:	b08c      	sub	sp, #48	; 0x30
     95c:	af00      	add	r7, sp, #0
     95e:	60f8      	str	r0, [r7, #12]
     960:	60b9      	str	r1, [r7, #8]
     962:	607a      	str	r2, [r7, #4]
     964:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     966:	68fb      	ldr	r3, [r7, #12]
     968:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
     96a:	2300      	movs	r3, #0
     96c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     96e:	2300      	movs	r3, #0
     970:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
     972:	68fb      	ldr	r3, [r7, #12]
     974:	2b00      	cmp	r3, #0
     976:	d100      	bne.n	97a <xEventGroupWaitBits+0x22>
     978:	e7fe      	b.n	978 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     97a:	68bb      	ldr	r3, [r7, #8]
     97c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     980:	2b00      	cmp	r3, #0
     982:	d000      	beq.n	986 <xEventGroupWaitBits+0x2e>
     984:	e7fe      	b.n	984 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
     986:	68bb      	ldr	r3, [r7, #8]
     988:	2b00      	cmp	r3, #0
     98a:	d100      	bne.n	98e <xEventGroupWaitBits+0x36>
     98c:	e7fe      	b.n	98c <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     98e:	f001 fc37 	bl	2200 <xTaskGetSchedulerState>
     992:	4603      	mov	r3, r0
     994:	2b00      	cmp	r3, #0
     996:	d102      	bne.n	99e <xEventGroupWaitBits+0x46>
     998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     99a:	2b00      	cmp	r3, #0
     99c:	d101      	bne.n	9a2 <xEventGroupWaitBits+0x4a>
     99e:	2301      	movs	r3, #1
     9a0:	e000      	b.n	9a4 <xEventGroupWaitBits+0x4c>
     9a2:	2300      	movs	r3, #0
     9a4:	2b00      	cmp	r3, #0
     9a6:	d100      	bne.n	9aa <xEventGroupWaitBits+0x52>
     9a8:	e7fe      	b.n	9a8 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
     9aa:	f000 ffb3 	bl	1914 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     9b4:	683a      	ldr	r2, [r7, #0]
     9b6:	68b9      	ldr	r1, [r7, #8]
     9b8:	69f8      	ldr	r0, [r7, #28]
     9ba:	f000 f8f5 	bl	ba8 <prvTestWaitCondition>
     9be:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
     9c0:	69bb      	ldr	r3, [r7, #24]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d00e      	beq.n	9e4 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     9c6:	69fb      	ldr	r3, [r7, #28]
     9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
     9ca:	2300      	movs	r3, #0
     9cc:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d026      	beq.n	a22 <xEventGroupWaitBits+0xca>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9d6:	681a      	ldr	r2, [r3, #0]
     9d8:	68bb      	ldr	r3, [r7, #8]
     9da:	43db      	mvns	r3, r3
     9dc:	401a      	ands	r2, r3
     9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9e0:	601a      	str	r2, [r3, #0]
     9e2:	e01e      	b.n	a22 <xEventGroupWaitBits+0xca>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9e6:	2b00      	cmp	r3, #0
     9e8:	d102      	bne.n	9f0 <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     9ea:	69fb      	ldr	r3, [r7, #28]
     9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
     9ee:	e018      	b.n	a22 <xEventGroupWaitBits+0xca>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d003      	beq.n	9fe <xEventGroupWaitBits+0xa6>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     9fc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     9fe:	683b      	ldr	r3, [r7, #0]
     a00:	2b00      	cmp	r3, #0
     a02:	d003      	beq.n	a0c <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     a0a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a0e:	1d18      	adds	r0, r3, #4
     a10:	68ba      	ldr	r2, [r7, #8]
     a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a14:	4313      	orrs	r3, r2
     a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
     a18:	4619      	mov	r1, r3
     a1a:	f001 f9b9 	bl	1d90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     a1e:	2300      	movs	r3, #0
     a20:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     a22:	f000 ffbd 	bl	19a0 <xTaskResumeAll>
     a26:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
     a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a2a:	2b00      	cmp	r3, #0
     a2c:	d031      	beq.n	a92 <xEventGroupWaitBits+0x13a>
	{
		if( xAlreadyYielded == pdFALSE )
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	2b00      	cmp	r3, #0
     a32:	d107      	bne.n	a44 <xEventGroupWaitBits+0xec>
		{
			portYIELD_WITHIN_API();
     a34:	4b19      	ldr	r3, [pc, #100]	; (a9c <xEventGroupWaitBits+0x144>)
     a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     a3a:	601a      	str	r2, [r3, #0]
     a3c:	f3bf 8f4f 	dsb	sy
     a40:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     a44:	f001 fbfa 	bl	223c <uxTaskResetEventItemValue>
     a48:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     a50:	2b00      	cmp	r3, #0
     a52:	d11a      	bne.n	a8a <xEventGroupWaitBits+0x132>
		{
			taskENTER_CRITICAL();
     a54:	f7ff fc86 	bl	364 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     a5e:	683a      	ldr	r2, [r7, #0]
     a60:	68b9      	ldr	r1, [r7, #8]
     a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     a64:	f000 f8a0 	bl	ba8 <prvTestWaitCondition>
     a68:	4603      	mov	r3, r0
     a6a:	2b00      	cmp	r3, #0
     a6c:	d009      	beq.n	a82 <xEventGroupWaitBits+0x12a>
				{
					if( xClearOnExit != pdFALSE )
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	2b00      	cmp	r3, #0
     a72:	d006      	beq.n	a82 <xEventGroupWaitBits+0x12a>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a76:	681a      	ldr	r2, [r3, #0]
     a78:	68bb      	ldr	r3, [r7, #8]
     a7a:	43db      	mvns	r3, r3
     a7c:	401a      	ands	r2, r3
     a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a80:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a82:	f7ff fc95 	bl	3b0 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     a86:	2300      	movs	r3, #0
     a88:	623b      	str	r3, [r7, #32]
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
     a94:	4618      	mov	r0, r3
     a96:	3730      	adds	r7, #48	; 0x30
     a98:	46bd      	mov	sp, r7
     a9a:	bd80      	pop	{r7, pc}
     a9c:	e000ed04 	.word	0xe000ed04

00000aa0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b08c      	sub	sp, #48	; 0x30
     aa4:	af00      	add	r7, sp, #0
     aa6:	6078      	str	r0, [r7, #4]
     aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     aaa:	2300      	movs	r3, #0
     aac:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
     ab2:	2300      	movs	r3, #0
     ab4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	d100      	bne.n	abe <xEventGroupSetBits+0x1e>
     abc:	e7fe      	b.n	abc <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     abe:	683b      	ldr	r3, [r7, #0]
     ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     ac4:	2b00      	cmp	r3, #0
     ac6:	d000      	beq.n	aca <xEventGroupSetBits+0x2a>
     ac8:	e7fe      	b.n	ac8 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
     aca:	6a3b      	ldr	r3, [r7, #32]
     acc:	3304      	adds	r3, #4
     ace:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ad0:	69fb      	ldr	r3, [r7, #28]
     ad2:	3308      	adds	r3, #8
     ad4:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
     ad6:	f000 ff1d 	bl	1914 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     ada:	69fb      	ldr	r3, [r7, #28]
     adc:	68db      	ldr	r3, [r3, #12]
     ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     ae0:	6a3b      	ldr	r3, [r7, #32]
     ae2:	681a      	ldr	r2, [r3, #0]
     ae4:	683b      	ldr	r3, [r7, #0]
     ae6:	431a      	orrs	r2, r3
     ae8:	6a3b      	ldr	r3, [r7, #32]
     aea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     aec:	e03c      	b.n	b68 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
     aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af0:	685b      	ldr	r3, [r3, #4]
     af2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
     afa:	2300      	movs	r3, #0
     afc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     afe:	693b      	ldr	r3, [r7, #16]
     b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     b04:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     b06:	693b      	ldr	r3, [r7, #16]
     b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b0c:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     b14:	2b00      	cmp	r3, #0
     b16:	d108      	bne.n	b2a <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     b18:	6a3b      	ldr	r3, [r7, #32]
     b1a:	681a      	ldr	r2, [r3, #0]
     b1c:	693b      	ldr	r3, [r7, #16]
     b1e:	4013      	ands	r3, r2
     b20:	2b00      	cmp	r3, #0
     b22:	d00b      	beq.n	b3c <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
     b24:	2301      	movs	r3, #1
     b26:	627b      	str	r3, [r7, #36]	; 0x24
     b28:	e008      	b.n	b3c <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b2a:	6a3b      	ldr	r3, [r7, #32]
     b2c:	681a      	ldr	r2, [r3, #0]
     b2e:	693b      	ldr	r3, [r7, #16]
     b30:	401a      	ands	r2, r3
     b32:	693b      	ldr	r3, [r7, #16]
     b34:	429a      	cmp	r2, r3
     b36:	d101      	bne.n	b3c <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     b38:	2301      	movs	r3, #1
     b3a:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b3e:	2b00      	cmp	r3, #0
     b40:	d010      	beq.n	b64 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
     b48:	2b00      	cmp	r3, #0
     b4a:	d003      	beq.n	b54 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b4e:	693b      	ldr	r3, [r7, #16]
     b50:	4313      	orrs	r3, r2
     b52:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b54:	6a3b      	ldr	r3, [r7, #32]
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     b5c:	4619      	mov	r1, r3
     b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     b60:	f001 f9bc 	bl	1edc <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     b64:	697b      	ldr	r3, [r7, #20]
     b66:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
     b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b6a:	69bb      	ldr	r3, [r7, #24]
     b6c:	429a      	cmp	r2, r3
     b6e:	d1be      	bne.n	aee <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     b70:	6a3b      	ldr	r3, [r7, #32]
     b72:	681a      	ldr	r2, [r3, #0]
     b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b76:	43db      	mvns	r3, r3
     b78:	401a      	ands	r2, r3
     b7a:	6a3b      	ldr	r3, [r7, #32]
     b7c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
     b7e:	f000 ff0f 	bl	19a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     b82:	6a3b      	ldr	r3, [r7, #32]
     b84:	681b      	ldr	r3, [r3, #0]
}
     b86:	4618      	mov	r0, r3
     b88:	3730      	adds	r7, #48	; 0x30
     b8a:	46bd      	mov	sp, r7
     b8c:	bd80      	pop	{r7, pc}

00000b8e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     b8e:	b580      	push	{r7, lr}
     b90:	b082      	sub	sp, #8
     b92:	af00      	add	r7, sp, #0
     b94:	6078      	str	r0, [r7, #4]
     b96:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     b98:	6839      	ldr	r1, [r7, #0]
     b9a:	6878      	ldr	r0, [r7, #4]
     b9c:	f7ff ff80 	bl	aa0 <xEventGroupSetBits>
}
     ba0:	bf00      	nop
     ba2:	3708      	adds	r7, #8
     ba4:	46bd      	mov	sp, r7
     ba6:	bd80      	pop	{r7, pc}

00000ba8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     ba8:	b480      	push	{r7}
     baa:	b087      	sub	sp, #28
     bac:	af00      	add	r7, sp, #0
     bae:	60f8      	str	r0, [r7, #12]
     bb0:	60b9      	str	r1, [r7, #8]
     bb2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
     bb4:	2300      	movs	r3, #0
     bb6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2b00      	cmp	r3, #0
     bbc:	d107      	bne.n	bce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     bbe:	68fa      	ldr	r2, [r7, #12]
     bc0:	68bb      	ldr	r3, [r7, #8]
     bc2:	4013      	ands	r3, r2
     bc4:	2b00      	cmp	r3, #0
     bc6:	d00a      	beq.n	bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     bc8:	2301      	movs	r3, #1
     bca:	617b      	str	r3, [r7, #20]
     bcc:	e007      	b.n	bde <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     bce:	68fa      	ldr	r2, [r7, #12]
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	401a      	ands	r2, r3
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	429a      	cmp	r2, r3
     bd8:	d101      	bne.n	bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     bda:	2301      	movs	r3, #1
     bdc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     bde:	697b      	ldr	r3, [r7, #20]
}
     be0:	4618      	mov	r0, r3
     be2:	371c      	adds	r7, #28
     be4:	46bd      	mov	sp, r7
     be6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bea:	4770      	bx	lr

00000bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bec:	b480      	push	{r7}
     bee:	b083      	sub	sp, #12
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	f103 0208 	add.w	r2, r3, #8
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	f04f 32ff 	mov.w	r2, #4294967295
     c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	f103 0208 	add.w	r2, r3, #8
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	f103 0208 	add.w	r2, r3, #8
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	2200      	movs	r2, #0
     c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     c20:	bf00      	nop
     c22:	370c      	adds	r7, #12
     c24:	46bd      	mov	sp, r7
     c26:	f85d 7b04 	ldr.w	r7, [sp], #4
     c2a:	4770      	bx	lr

00000c2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     c2c:	b480      	push	{r7}
     c2e:	b083      	sub	sp, #12
     c30:	af00      	add	r7, sp, #0
     c32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	2200      	movs	r2, #0
     c38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c46:	b480      	push	{r7}
     c48:	b085      	sub	sp, #20
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
     c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	685b      	ldr	r3, [r3, #4]
     c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c56:	683b      	ldr	r3, [r7, #0]
     c58:	68fa      	ldr	r2, [r7, #12]
     c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	689a      	ldr	r2, [r3, #8]
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	689b      	ldr	r3, [r3, #8]
     c68:	683a      	ldr	r2, [r7, #0]
     c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     c6c:	68fb      	ldr	r3, [r7, #12]
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	687a      	ldr	r2, [r7, #4]
     c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	681b      	ldr	r3, [r3, #0]
     c7c:	1c5a      	adds	r2, r3, #1
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	601a      	str	r2, [r3, #0]
}
     c82:	bf00      	nop
     c84:	3714      	adds	r7, #20
     c86:	46bd      	mov	sp, r7
     c88:	f85d 7b04 	ldr.w	r7, [sp], #4
     c8c:	4770      	bx	lr

00000c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c8e:	b480      	push	{r7}
     c90:	b085      	sub	sp, #20
     c92:	af00      	add	r7, sp, #0
     c94:	6078      	str	r0, [r7, #4]
     c96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c98:	683b      	ldr	r3, [r7, #0]
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
     ca4:	d103      	bne.n	cae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	691b      	ldr	r3, [r3, #16]
     caa:	60fb      	str	r3, [r7, #12]
     cac:	e00c      	b.n	cc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	3308      	adds	r3, #8
     cb2:	60fb      	str	r3, [r7, #12]
     cb4:	e002      	b.n	cbc <vListInsert+0x2e>
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	685b      	ldr	r3, [r3, #4]
     cba:	60fb      	str	r3, [r7, #12]
     cbc:	68fb      	ldr	r3, [r7, #12]
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	681a      	ldr	r2, [r3, #0]
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	429a      	cmp	r2, r3
     cc6:	d9f6      	bls.n	cb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     cc8:	68fb      	ldr	r3, [r7, #12]
     cca:	685a      	ldr	r2, [r3, #4]
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cd0:	683b      	ldr	r3, [r7, #0]
     cd2:	685b      	ldr	r3, [r3, #4]
     cd4:	683a      	ldr	r2, [r7, #0]
     cd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     cd8:	683b      	ldr	r3, [r7, #0]
     cda:	68fa      	ldr	r2, [r7, #12]
     cdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     cde:	68fb      	ldr	r3, [r7, #12]
     ce0:	683a      	ldr	r2, [r7, #0]
     ce2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ce4:	683b      	ldr	r3, [r7, #0]
     ce6:	687a      	ldr	r2, [r7, #4]
     ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	1c5a      	adds	r2, r3, #1
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	601a      	str	r2, [r3, #0]
}
     cf4:	bf00      	nop
     cf6:	3714      	adds	r7, #20
     cf8:	46bd      	mov	sp, r7
     cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfe:	4770      	bx	lr

00000d00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d00:	b480      	push	{r7}
     d02:	b085      	sub	sp, #20
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	691b      	ldr	r3, [r3, #16]
     d0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	685b      	ldr	r3, [r3, #4]
     d12:	687a      	ldr	r2, [r7, #4]
     d14:	6892      	ldr	r2, [r2, #8]
     d16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	689b      	ldr	r3, [r3, #8]
     d1c:	687a      	ldr	r2, [r7, #4]
     d1e:	6852      	ldr	r2, [r2, #4]
     d20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	429a      	cmp	r2, r3
     d2a:	d103      	bne.n	d34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	689a      	ldr	r2, [r3, #8]
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	2200      	movs	r2, #0
     d38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	1e5a      	subs	r2, r3, #1
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	681b      	ldr	r3, [r3, #0]
}
     d48:	4618      	mov	r0, r3
     d4a:	3714      	adds	r7, #20
     d4c:	46bd      	mov	sp, r7
     d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     d52:	4770      	bx	lr

00000d54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     d54:	b580      	push	{r7, lr}
     d56:	b084      	sub	sp, #16
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	2b00      	cmp	r3, #0
     d66:	d100      	bne.n	d6a <xQueueGenericReset+0x16>
     d68:	e7fe      	b.n	d68 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
     d6a:	f7ff fafb 	bl	364 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d76:	68f9      	ldr	r1, [r7, #12]
     d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
     d7a:	fb01 f303 	mul.w	r3, r1, r3
     d7e:	441a      	add	r2, r3
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	2200      	movs	r2, #0
     d88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	681a      	ldr	r2, [r3, #0]
     d8e:	68fb      	ldr	r3, [r7, #12]
     d90:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	681a      	ldr	r2, [r3, #0]
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d9a:	3b01      	subs	r3, #1
     d9c:	68f9      	ldr	r1, [r7, #12]
     d9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
     da0:	fb01 f303 	mul.w	r3, r1, r3
     da4:	441a      	add	r2, r3
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	22ff      	movs	r2, #255	; 0xff
     dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     db2:	68fb      	ldr	r3, [r7, #12]
     db4:	22ff      	movs	r2, #255	; 0xff
     db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
     dba:	683b      	ldr	r3, [r7, #0]
     dbc:	2b00      	cmp	r3, #0
     dbe:	d114      	bne.n	dea <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	691b      	ldr	r3, [r3, #16]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d01a      	beq.n	dfe <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	3310      	adds	r3, #16
     dcc:	4618      	mov	r0, r3
     dce:	f001 f829 	bl	1e24 <xTaskRemoveFromEventList>
     dd2:	4603      	mov	r3, r0
     dd4:	2b00      	cmp	r3, #0
     dd6:	d012      	beq.n	dfe <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
     dd8:	4b0c      	ldr	r3, [pc, #48]	; (e0c <xQueueGenericReset+0xb8>)
     dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     dde:	601a      	str	r2, [r3, #0]
     de0:	f3bf 8f4f 	dsb	sy
     de4:	f3bf 8f6f 	isb	sy
     de8:	e009      	b.n	dfe <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	3310      	adds	r3, #16
     dee:	4618      	mov	r0, r3
     df0:	f7ff fefc 	bl	bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	3324      	adds	r3, #36	; 0x24
     df8:	4618      	mov	r0, r3
     dfa:	f7ff fef7 	bl	bec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     dfe:	f7ff fad7 	bl	3b0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     e02:	2301      	movs	r3, #1
}
     e04:	4618      	mov	r0, r3
     e06:	3710      	adds	r7, #16
     e08:	46bd      	mov	sp, r7
     e0a:	bd80      	pop	{r7, pc}
     e0c:	e000ed04 	.word	0xe000ed04

00000e10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     e10:	b580      	push	{r7, lr}
     e12:	b08a      	sub	sp, #40	; 0x28
     e14:	af02      	add	r7, sp, #8
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	4613      	mov	r3, r2
     e1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	2b00      	cmp	r3, #0
     e22:	d100      	bne.n	e26 <xQueueGenericCreate+0x16>
     e24:	e7fe      	b.n	e24 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	2b00      	cmp	r3, #0
     e2a:	d102      	bne.n	e32 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     e2c:	2300      	movs	r3, #0
     e2e:	61fb      	str	r3, [r7, #28]
     e30:	e004      	b.n	e3c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	68ba      	ldr	r2, [r7, #8]
     e36:	fb02 f303 	mul.w	r3, r2, r3
     e3a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     e3c:	69fb      	ldr	r3, [r7, #28]
     e3e:	3348      	adds	r3, #72	; 0x48
     e40:	4618      	mov	r0, r3
     e42:	f7ff fc7b 	bl	73c <pvPortMalloc>
     e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
     e48:	69bb      	ldr	r3, [r7, #24]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d00b      	beq.n	e66 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     e4e:	69bb      	ldr	r3, [r7, #24]
     e50:	3348      	adds	r3, #72	; 0x48
     e52:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     e54:	79fa      	ldrb	r2, [r7, #7]
     e56:	69bb      	ldr	r3, [r7, #24]
     e58:	9300      	str	r3, [sp, #0]
     e5a:	4613      	mov	r3, r2
     e5c:	697a      	ldr	r2, [r7, #20]
     e5e:	68b9      	ldr	r1, [r7, #8]
     e60:	68f8      	ldr	r0, [r7, #12]
     e62:	f000 f805 	bl	e70 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
     e66:	69bb      	ldr	r3, [r7, #24]
	}
     e68:	4618      	mov	r0, r3
     e6a:	3720      	adds	r7, #32
     e6c:	46bd      	mov	sp, r7
     e6e:	bd80      	pop	{r7, pc}

00000e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	60f8      	str	r0, [r7, #12]
     e78:	60b9      	str	r1, [r7, #8]
     e7a:	607a      	str	r2, [r7, #4]
     e7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     e7e:	68bb      	ldr	r3, [r7, #8]
     e80:	2b00      	cmp	r3, #0
     e82:	d103      	bne.n	e8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     e84:	69bb      	ldr	r3, [r7, #24]
     e86:	69ba      	ldr	r2, [r7, #24]
     e88:	601a      	str	r2, [r3, #0]
     e8a:	e002      	b.n	e92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     e8c:	69bb      	ldr	r3, [r7, #24]
     e8e:	687a      	ldr	r2, [r7, #4]
     e90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     e92:	69bb      	ldr	r3, [r7, #24]
     e94:	68fa      	ldr	r2, [r7, #12]
     e96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     e98:	69bb      	ldr	r3, [r7, #24]
     e9a:	68ba      	ldr	r2, [r7, #8]
     e9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e9e:	2101      	movs	r1, #1
     ea0:	69b8      	ldr	r0, [r7, #24]
     ea2:	f7ff ff57 	bl	d54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     ea6:	bf00      	nop
     ea8:	3710      	adds	r7, #16
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
	...

00000eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     eb0:	b580      	push	{r7, lr}
     eb2:	b08a      	sub	sp, #40	; 0x28
     eb4:	af00      	add	r7, sp, #0
     eb6:	60f8      	str	r0, [r7, #12]
     eb8:	60b9      	str	r1, [r7, #8]
     eba:	607a      	str	r2, [r7, #4]
     ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     ebe:	2300      	movs	r3, #0
     ec0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
     ec6:	6a3b      	ldr	r3, [r7, #32]
     ec8:	2b00      	cmp	r3, #0
     eca:	d100      	bne.n	ece <xQueueGenericSend+0x1e>
     ecc:	e7fe      	b.n	ecc <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     ece:	68bb      	ldr	r3, [r7, #8]
     ed0:	2b00      	cmp	r3, #0
     ed2:	d103      	bne.n	edc <xQueueGenericSend+0x2c>
     ed4:	6a3b      	ldr	r3, [r7, #32]
     ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ed8:	2b00      	cmp	r3, #0
     eda:	d101      	bne.n	ee0 <xQueueGenericSend+0x30>
     edc:	2301      	movs	r3, #1
     ede:	e000      	b.n	ee2 <xQueueGenericSend+0x32>
     ee0:	2300      	movs	r3, #0
     ee2:	2b00      	cmp	r3, #0
     ee4:	d100      	bne.n	ee8 <xQueueGenericSend+0x38>
     ee6:	e7fe      	b.n	ee6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     ee8:	683b      	ldr	r3, [r7, #0]
     eea:	2b02      	cmp	r3, #2
     eec:	d103      	bne.n	ef6 <xQueueGenericSend+0x46>
     eee:	6a3b      	ldr	r3, [r7, #32]
     ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     ef2:	2b01      	cmp	r3, #1
     ef4:	d101      	bne.n	efa <xQueueGenericSend+0x4a>
     ef6:	2301      	movs	r3, #1
     ef8:	e000      	b.n	efc <xQueueGenericSend+0x4c>
     efa:	2300      	movs	r3, #0
     efc:	2b00      	cmp	r3, #0
     efe:	d100      	bne.n	f02 <xQueueGenericSend+0x52>
     f00:	e7fe      	b.n	f00 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     f02:	f001 f97d 	bl	2200 <xTaskGetSchedulerState>
     f06:	4603      	mov	r3, r0
     f08:	2b00      	cmp	r3, #0
     f0a:	d102      	bne.n	f12 <xQueueGenericSend+0x62>
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	2b00      	cmp	r3, #0
     f10:	d101      	bne.n	f16 <xQueueGenericSend+0x66>
     f12:	2301      	movs	r3, #1
     f14:	e000      	b.n	f18 <xQueueGenericSend+0x68>
     f16:	2300      	movs	r3, #0
     f18:	2b00      	cmp	r3, #0
     f1a:	d100      	bne.n	f1e <xQueueGenericSend+0x6e>
     f1c:	e7fe      	b.n	f1c <xQueueGenericSend+0x6c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     f1e:	f7ff fa21 	bl	364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     f22:	6a3b      	ldr	r3, [r7, #32]
     f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     f26:	6a3b      	ldr	r3, [r7, #32]
     f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     f2a:	429a      	cmp	r2, r3
     f2c:	d302      	bcc.n	f34 <xQueueGenericSend+0x84>
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	2b02      	cmp	r3, #2
     f32:	d129      	bne.n	f88 <xQueueGenericSend+0xd8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     f34:	683a      	ldr	r2, [r7, #0]
     f36:	68b9      	ldr	r1, [r7, #8]
     f38:	6a38      	ldr	r0, [r7, #32]
     f3a:	f000 f9eb 	bl	1314 <prvCopyDataToQueue>
     f3e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     f40:	6a3b      	ldr	r3, [r7, #32]
     f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     f44:	2b00      	cmp	r3, #0
     f46:	d010      	beq.n	f6a <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     f48:	6a3b      	ldr	r3, [r7, #32]
     f4a:	3324      	adds	r3, #36	; 0x24
     f4c:	4618      	mov	r0, r3
     f4e:	f000 ff69 	bl	1e24 <xTaskRemoveFromEventList>
     f52:	4603      	mov	r3, r0
     f54:	2b00      	cmp	r3, #0
     f56:	d013      	beq.n	f80 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     f58:	4b3f      	ldr	r3, [pc, #252]	; (1058 <xQueueGenericSend+0x1a8>)
     f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f5e:	601a      	str	r2, [r3, #0]
     f60:	f3bf 8f4f 	dsb	sy
     f64:	f3bf 8f6f 	isb	sy
     f68:	e00a      	b.n	f80 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     f6a:	69fb      	ldr	r3, [r7, #28]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d007      	beq.n	f80 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     f70:	4b39      	ldr	r3, [pc, #228]	; (1058 <xQueueGenericSend+0x1a8>)
     f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f76:	601a      	str	r2, [r3, #0]
     f78:	f3bf 8f4f 	dsb	sy
     f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     f80:	f7ff fa16 	bl	3b0 <vPortExitCritical>
				return pdPASS;
     f84:	2301      	movs	r3, #1
     f86:	e063      	b.n	1050 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d103      	bne.n	f96 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f8e:	f7ff fa0f 	bl	3b0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     f92:	2300      	movs	r3, #0
     f94:	e05c      	b.n	1050 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
     f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f98:	2b00      	cmp	r3, #0
     f9a:	d106      	bne.n	faa <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     f9c:	f107 0314 	add.w	r3, r7, #20
     fa0:	4618      	mov	r0, r3
     fa2:	f000 ffef 	bl	1f84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     fa6:	2301      	movs	r3, #1
     fa8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     faa:	f7ff fa01 	bl	3b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     fae:	f000 fcb1 	bl	1914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     fb2:	f7ff f9d7 	bl	364 <vPortEnterCritical>
     fb6:	6a3b      	ldr	r3, [r7, #32]
     fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
     fbc:	b25b      	sxtb	r3, r3
     fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
     fc2:	d103      	bne.n	fcc <xQueueGenericSend+0x11c>
     fc4:	6a3b      	ldr	r3, [r7, #32]
     fc6:	2200      	movs	r2, #0
     fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     fcc:	6a3b      	ldr	r3, [r7, #32]
     fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
     fd2:	b25b      	sxtb	r3, r3
     fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
     fd8:	d103      	bne.n	fe2 <xQueueGenericSend+0x132>
     fda:	6a3b      	ldr	r3, [r7, #32]
     fdc:	2200      	movs	r2, #0
     fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
     fe2:	f7ff f9e5 	bl	3b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     fe6:	1d3a      	adds	r2, r7, #4
     fe8:	f107 0314 	add.w	r3, r7, #20
     fec:	4611      	mov	r1, r2
     fee:	4618      	mov	r0, r3
     ff0:	f000 ffe2 	bl	1fb8 <xTaskCheckForTimeOut>
     ff4:	4603      	mov	r3, r0
     ff6:	2b00      	cmp	r3, #0
     ff8:	d124      	bne.n	1044 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     ffa:	6a38      	ldr	r0, [r7, #32]
     ffc:	f000 fa74 	bl	14e8 <prvIsQueueFull>
    1000:	4603      	mov	r3, r0
    1002:	2b00      	cmp	r3, #0
    1004:	d018      	beq.n	1038 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1006:	6a3b      	ldr	r3, [r7, #32]
    1008:	3310      	adds	r3, #16
    100a:	687a      	ldr	r2, [r7, #4]
    100c:	4611      	mov	r1, r2
    100e:	4618      	mov	r0, r3
    1010:	f000 fea4 	bl	1d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1014:	6a38      	ldr	r0, [r7, #32]
    1016:	f000 f9ff 	bl	1418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    101a:	f000 fcc1 	bl	19a0 <xTaskResumeAll>
    101e:	4603      	mov	r3, r0
    1020:	2b00      	cmp	r3, #0
    1022:	f47f af7c 	bne.w	f1e <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <xQueueGenericSend+0x1a8>)
    1028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    102c:	601a      	str	r2, [r3, #0]
    102e:	f3bf 8f4f 	dsb	sy
    1032:	f3bf 8f6f 	isb	sy
    1036:	e772      	b.n	f1e <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1038:	6a38      	ldr	r0, [r7, #32]
    103a:	f000 f9ed 	bl	1418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    103e:	f000 fcaf 	bl	19a0 <xTaskResumeAll>
    1042:	e76c      	b.n	f1e <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1044:	6a38      	ldr	r0, [r7, #32]
    1046:	f000 f9e7 	bl	1418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    104a:	f000 fca9 	bl	19a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    104e:	2300      	movs	r3, #0
		}
	}
}
    1050:	4618      	mov	r0, r3
    1052:	3728      	adds	r7, #40	; 0x28
    1054:	46bd      	mov	sp, r7
    1056:	bd80      	pop	{r7, pc}
    1058:	e000ed04 	.word	0xe000ed04

0000105c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    105c:	b580      	push	{r7, lr}
    105e:	b08c      	sub	sp, #48	; 0x30
    1060:	af00      	add	r7, sp, #0
    1062:	60f8      	str	r0, [r7, #12]
    1064:	60b9      	str	r1, [r7, #8]
    1066:	607a      	str	r2, [r7, #4]
    1068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
    106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1070:	2b00      	cmp	r3, #0
    1072:	d100      	bne.n	1076 <xQueueGenericSendFromISR+0x1a>
    1074:	e7fe      	b.n	1074 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1076:	68bb      	ldr	r3, [r7, #8]
    1078:	2b00      	cmp	r3, #0
    107a:	d103      	bne.n	1084 <xQueueGenericSendFromISR+0x28>
    107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1080:	2b00      	cmp	r3, #0
    1082:	d101      	bne.n	1088 <xQueueGenericSendFromISR+0x2c>
    1084:	2301      	movs	r3, #1
    1086:	e000      	b.n	108a <xQueueGenericSendFromISR+0x2e>
    1088:	2300      	movs	r3, #0
    108a:	2b00      	cmp	r3, #0
    108c:	d100      	bne.n	1090 <xQueueGenericSendFromISR+0x34>
    108e:	e7fe      	b.n	108e <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1090:	683b      	ldr	r3, [r7, #0]
    1092:	2b02      	cmp	r3, #2
    1094:	d103      	bne.n	109e <xQueueGenericSendFromISR+0x42>
    1096:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    109a:	2b01      	cmp	r3, #1
    109c:	d101      	bne.n	10a2 <xQueueGenericSendFromISR+0x46>
    109e:	2301      	movs	r3, #1
    10a0:	e000      	b.n	10a4 <xQueueGenericSendFromISR+0x48>
    10a2:	2300      	movs	r3, #0
    10a4:	2b00      	cmp	r3, #0
    10a6:	d100      	bne.n	10aa <xQueueGenericSendFromISR+0x4e>
    10a8:	e7fe      	b.n	10a8 <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    10aa:	f7ff f9f5 	bl	498 <vPortValidateInterruptPriority>
	__asm volatile
    10ae:	f3ef 8211 	mrs	r2, BASEPRI
    10b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    10b6:	f383 8811 	msr	BASEPRI, r3
    10ba:	f3bf 8f6f 	isb	sy
    10be:	f3bf 8f4f 	dsb	sy
    10c2:	61fa      	str	r2, [r7, #28]
    10c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    10c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    10c8:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    10ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    10ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    10d2:	429a      	cmp	r2, r3
    10d4:	d302      	bcc.n	10dc <xQueueGenericSendFromISR+0x80>
    10d6:	683b      	ldr	r3, [r7, #0]
    10d8:	2b02      	cmp	r3, #2
    10da:	d12c      	bne.n	1136 <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    10dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    10e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    10e6:	683a      	ldr	r2, [r7, #0]
    10e8:	68b9      	ldr	r1, [r7, #8]
    10ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    10ec:	f000 f912 	bl	1314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    10f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    10f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    10f8:	d112      	bne.n	1120 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10fe:	2b00      	cmp	r3, #0
    1100:	d016      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1104:	3324      	adds	r3, #36	; 0x24
    1106:	4618      	mov	r0, r3
    1108:	f000 fe8c 	bl	1e24 <xTaskRemoveFromEventList>
    110c:	4603      	mov	r3, r0
    110e:	2b00      	cmp	r3, #0
    1110:	d00e      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	2b00      	cmp	r3, #0
    1116:	d00b      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	2201      	movs	r2, #1
    111c:	601a      	str	r2, [r3, #0]
    111e:	e007      	b.n	1130 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1124:	3301      	adds	r3, #1
    1126:	b2db      	uxtb	r3, r3
    1128:	b25a      	sxtb	r2, r3
    112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    112c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    1130:	2301      	movs	r3, #1
    1132:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    1134:	e001      	b.n	113a <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1136:	2300      	movs	r3, #0
    1138:	62fb      	str	r3, [r7, #44]	; 0x2c
    113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113c:	617b      	str	r3, [r7, #20]
	__asm volatile
    113e:	697b      	ldr	r3, [r7, #20]
    1140:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    1146:	4618      	mov	r0, r3
    1148:	3730      	adds	r7, #48	; 0x30
    114a:	46bd      	mov	sp, r7
    114c:	bd80      	pop	{r7, pc}
	...

00001150 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1150:	b580      	push	{r7, lr}
    1152:	b08a      	sub	sp, #40	; 0x28
    1154:	af00      	add	r7, sp, #0
    1156:	60f8      	str	r0, [r7, #12]
    1158:	60b9      	str	r1, [r7, #8]
    115a:	607a      	str	r2, [r7, #4]
    115c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    115e:	2300      	movs	r3, #0
    1160:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1162:	68fb      	ldr	r3, [r7, #12]
    1164:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    1166:	6a3b      	ldr	r3, [r7, #32]
    1168:	2b00      	cmp	r3, #0
    116a:	d100      	bne.n	116e <xQueueGenericReceive+0x1e>
    116c:	e7fe      	b.n	116c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    116e:	68bb      	ldr	r3, [r7, #8]
    1170:	2b00      	cmp	r3, #0
    1172:	d103      	bne.n	117c <xQueueGenericReceive+0x2c>
    1174:	6a3b      	ldr	r3, [r7, #32]
    1176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1178:	2b00      	cmp	r3, #0
    117a:	d101      	bne.n	1180 <xQueueGenericReceive+0x30>
    117c:	2301      	movs	r3, #1
    117e:	e000      	b.n	1182 <xQueueGenericReceive+0x32>
    1180:	2300      	movs	r3, #0
    1182:	2b00      	cmp	r3, #0
    1184:	d100      	bne.n	1188 <xQueueGenericReceive+0x38>
    1186:	e7fe      	b.n	1186 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1188:	f001 f83a 	bl	2200 <xTaskGetSchedulerState>
    118c:	4603      	mov	r3, r0
    118e:	2b00      	cmp	r3, #0
    1190:	d102      	bne.n	1198 <xQueueGenericReceive+0x48>
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	2b00      	cmp	r3, #0
    1196:	d101      	bne.n	119c <xQueueGenericReceive+0x4c>
    1198:	2301      	movs	r3, #1
    119a:	e000      	b.n	119e <xQueueGenericReceive+0x4e>
    119c:	2300      	movs	r3, #0
    119e:	2b00      	cmp	r3, #0
    11a0:	d100      	bne.n	11a4 <xQueueGenericReceive+0x54>
    11a2:	e7fe      	b.n	11a2 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    11a4:	f7ff f8de 	bl	364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    11a8:	6a3b      	ldr	r3, [r7, #32]
    11aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    11ac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d03d      	beq.n	1230 <xQueueGenericReceive+0xe0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    11b4:	6a3b      	ldr	r3, [r7, #32]
    11b6:	68db      	ldr	r3, [r3, #12]
    11b8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    11ba:	68b9      	ldr	r1, [r7, #8]
    11bc:	6a38      	ldr	r0, [r7, #32]
    11be:	f000 f905 	bl	13cc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    11c2:	683b      	ldr	r3, [r7, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d118      	bne.n	11fa <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    11c8:	69fb      	ldr	r3, [r7, #28]
    11ca:	1e5a      	subs	r2, r3, #1
    11cc:	6a3b      	ldr	r3, [r7, #32]
    11ce:	639a      	str	r2, [r3, #56]	; 0x38
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    11d0:	6a3b      	ldr	r3, [r7, #32]
    11d2:	691b      	ldr	r3, [r3, #16]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d027      	beq.n	1228 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    11d8:	6a3b      	ldr	r3, [r7, #32]
    11da:	3310      	adds	r3, #16
    11dc:	4618      	mov	r0, r3
    11de:	f000 fe21 	bl	1e24 <xTaskRemoveFromEventList>
    11e2:	4603      	mov	r3, r0
    11e4:	2b00      	cmp	r3, #0
    11e6:	d01f      	beq.n	1228 <xQueueGenericReceive+0xd8>
						{
							queueYIELD_IF_USING_PREEMPTION();
    11e8:	4b49      	ldr	r3, [pc, #292]	; (1310 <xQueueGenericReceive+0x1c0>)
    11ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11ee:	601a      	str	r2, [r3, #0]
    11f0:	f3bf 8f4f 	dsb	sy
    11f4:	f3bf 8f6f 	isb	sy
    11f8:	e016      	b.n	1228 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    11fa:	6a3b      	ldr	r3, [r7, #32]
    11fc:	69ba      	ldr	r2, [r7, #24]
    11fe:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1200:	6a3b      	ldr	r3, [r7, #32]
    1202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1204:	2b00      	cmp	r3, #0
    1206:	d00f      	beq.n	1228 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1208:	6a3b      	ldr	r3, [r7, #32]
    120a:	3324      	adds	r3, #36	; 0x24
    120c:	4618      	mov	r0, r3
    120e:	f000 fe09 	bl	1e24 <xTaskRemoveFromEventList>
    1212:	4603      	mov	r3, r0
    1214:	2b00      	cmp	r3, #0
    1216:	d007      	beq.n	1228 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1218:	4b3d      	ldr	r3, [pc, #244]	; (1310 <xQueueGenericReceive+0x1c0>)
    121a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    121e:	601a      	str	r2, [r3, #0]
    1220:	f3bf 8f4f 	dsb	sy
    1224:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1228:	f7ff f8c2 	bl	3b0 <vPortExitCritical>
				return pdPASS;
    122c:	2301      	movs	r3, #1
    122e:	e06a      	b.n	1306 <xQueueGenericReceive+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	2b00      	cmp	r3, #0
    1234:	d103      	bne.n	123e <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1236:	f7ff f8bb 	bl	3b0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    123a:	2300      	movs	r3, #0
    123c:	e063      	b.n	1306 <xQueueGenericReceive+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
    123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1240:	2b00      	cmp	r3, #0
    1242:	d106      	bne.n	1252 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1244:	f107 0310 	add.w	r3, r7, #16
    1248:	4618      	mov	r0, r3
    124a:	f000 fe9b 	bl	1f84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    124e:	2301      	movs	r3, #1
    1250:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1252:	f7ff f8ad 	bl	3b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1256:	f000 fb5d 	bl	1914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    125a:	f7ff f883 	bl	364 <vPortEnterCritical>
    125e:	6a3b      	ldr	r3, [r7, #32]
    1260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1264:	b25b      	sxtb	r3, r3
    1266:	f1b3 3fff 	cmp.w	r3, #4294967295
    126a:	d103      	bne.n	1274 <xQueueGenericReceive+0x124>
    126c:	6a3b      	ldr	r3, [r7, #32]
    126e:	2200      	movs	r2, #0
    1270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1274:	6a3b      	ldr	r3, [r7, #32]
    1276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    127a:	b25b      	sxtb	r3, r3
    127c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1280:	d103      	bne.n	128a <xQueueGenericReceive+0x13a>
    1282:	6a3b      	ldr	r3, [r7, #32]
    1284:	2200      	movs	r2, #0
    1286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    128a:	f7ff f891 	bl	3b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    128e:	1d3a      	adds	r2, r7, #4
    1290:	f107 0310 	add.w	r3, r7, #16
    1294:	4611      	mov	r1, r2
    1296:	4618      	mov	r0, r3
    1298:	f000 fe8e 	bl	1fb8 <xTaskCheckForTimeOut>
    129c:	4603      	mov	r3, r0
    129e:	2b00      	cmp	r3, #0
    12a0:	d124      	bne.n	12ec <xQueueGenericReceive+0x19c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    12a2:	6a38      	ldr	r0, [r7, #32]
    12a4:	f000 f90a 	bl	14bc <prvIsQueueEmpty>
    12a8:	4603      	mov	r3, r0
    12aa:	2b00      	cmp	r3, #0
    12ac:	d018      	beq.n	12e0 <xQueueGenericReceive+0x190>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    12ae:	6a3b      	ldr	r3, [r7, #32]
    12b0:	3324      	adds	r3, #36	; 0x24
    12b2:	687a      	ldr	r2, [r7, #4]
    12b4:	4611      	mov	r1, r2
    12b6:	4618      	mov	r0, r3
    12b8:	f000 fd50 	bl	1d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    12bc:	6a38      	ldr	r0, [r7, #32]
    12be:	f000 f8ab 	bl	1418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    12c2:	f000 fb6d 	bl	19a0 <xTaskResumeAll>
    12c6:	4603      	mov	r3, r0
    12c8:	2b00      	cmp	r3, #0
    12ca:	f47f af6b 	bne.w	11a4 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    12ce:	4b10      	ldr	r3, [pc, #64]	; (1310 <xQueueGenericReceive+0x1c0>)
    12d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    12d4:	601a      	str	r2, [r3, #0]
    12d6:	f3bf 8f4f 	dsb	sy
    12da:	f3bf 8f6f 	isb	sy
    12de:	e761      	b.n	11a4 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    12e0:	6a38      	ldr	r0, [r7, #32]
    12e2:	f000 f899 	bl	1418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    12e6:	f000 fb5b 	bl	19a0 <xTaskResumeAll>
    12ea:	e75b      	b.n	11a4 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    12ec:	6a38      	ldr	r0, [r7, #32]
    12ee:	f000 f893 	bl	1418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    12f2:	f000 fb55 	bl	19a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    12f6:	6a38      	ldr	r0, [r7, #32]
    12f8:	f000 f8e0 	bl	14bc <prvIsQueueEmpty>
    12fc:	4603      	mov	r3, r0
    12fe:	2b00      	cmp	r3, #0
    1300:	f43f af50 	beq.w	11a4 <xQueueGenericReceive+0x54>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1306:	4618      	mov	r0, r3
    1308:	3728      	adds	r7, #40	; 0x28
    130a:	46bd      	mov	sp, r7
    130c:	bd80      	pop	{r7, pc}
    130e:	bf00      	nop
    1310:	e000ed04 	.word	0xe000ed04

00001314 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1314:	b580      	push	{r7, lr}
    1316:	b086      	sub	sp, #24
    1318:	af00      	add	r7, sp, #0
    131a:	60f8      	str	r0, [r7, #12]
    131c:	60b9      	str	r1, [r7, #8]
    131e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    1320:	2300      	movs	r3, #0
    1322:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1328:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    132e:	2b00      	cmp	r3, #0
    1330:	d043      	beq.n	13ba <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	2b00      	cmp	r3, #0
    1336:	d119      	bne.n	136c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	6898      	ldr	r0, [r3, #8]
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1340:	461a      	mov	r2, r3
    1342:	68b9      	ldr	r1, [r7, #8]
    1344:	f003 fdc0 	bl	4ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1348:	68fb      	ldr	r3, [r7, #12]
    134a:	689a      	ldr	r2, [r3, #8]
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1350:	441a      	add	r2, r3
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1356:	68fb      	ldr	r3, [r7, #12]
    1358:	689a      	ldr	r2, [r3, #8]
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	685b      	ldr	r3, [r3, #4]
    135e:	429a      	cmp	r2, r3
    1360:	d32b      	bcc.n	13ba <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	681a      	ldr	r2, [r3, #0]
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	609a      	str	r2, [r3, #8]
    136a:	e026      	b.n	13ba <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	68d8      	ldr	r0, [r3, #12]
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1374:	461a      	mov	r2, r3
    1376:	68b9      	ldr	r1, [r7, #8]
    1378:	f003 fda6 	bl	4ec8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	68da      	ldr	r2, [r3, #12]
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1384:	425b      	negs	r3, r3
    1386:	441a      	add	r2, r3
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	68da      	ldr	r2, [r3, #12]
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	429a      	cmp	r2, r3
    1396:	d207      	bcs.n	13a8 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	685a      	ldr	r2, [r3, #4]
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13a0:	425b      	negs	r3, r3
    13a2:	441a      	add	r2, r3
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	2b02      	cmp	r3, #2
    13ac:	d105      	bne.n	13ba <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    13ae:	697b      	ldr	r3, [r7, #20]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d002      	beq.n	13ba <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    13b4:	697b      	ldr	r3, [r7, #20]
    13b6:	3b01      	subs	r3, #1
    13b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    13ba:	697b      	ldr	r3, [r7, #20]
    13bc:	1c5a      	adds	r2, r3, #1
    13be:	68fb      	ldr	r3, [r7, #12]
    13c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    13c2:	693b      	ldr	r3, [r7, #16]
}
    13c4:	4618      	mov	r0, r3
    13c6:	3718      	adds	r7, #24
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}

000013cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b082      	sub	sp, #8
    13d0:	af00      	add	r7, sp, #0
    13d2:	6078      	str	r0, [r7, #4]
    13d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13da:	2b00      	cmp	r3, #0
    13dc:	d018      	beq.n	1410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	68da      	ldr	r2, [r3, #12]
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13e6:	441a      	add	r2, r3
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	68da      	ldr	r2, [r3, #12]
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	685b      	ldr	r3, [r3, #4]
    13f4:	429a      	cmp	r2, r3
    13f6:	d303      	bcc.n	1400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	681a      	ldr	r2, [r3, #0]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	68d9      	ldr	r1, [r3, #12]
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1408:	461a      	mov	r2, r3
    140a:	6838      	ldr	r0, [r7, #0]
    140c:	f003 fd5c 	bl	4ec8 <memcpy>
	}
}
    1410:	bf00      	nop
    1412:	3708      	adds	r7, #8
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}

00001418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1418:	b580      	push	{r7, lr}
    141a:	b084      	sub	sp, #16
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1420:	f7fe ffa0 	bl	364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    142a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    142c:	e011      	b.n	1452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1432:	2b00      	cmp	r3, #0
    1434:	d012      	beq.n	145c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	3324      	adds	r3, #36	; 0x24
    143a:	4618      	mov	r0, r3
    143c:	f000 fcf2 	bl	1e24 <xTaskRemoveFromEventList>
    1440:	4603      	mov	r3, r0
    1442:	2b00      	cmp	r3, #0
    1444:	d001      	beq.n	144a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    1446:	f000 fe03 	bl	2050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    144a:	7bfb      	ldrb	r3, [r7, #15]
    144c:	3b01      	subs	r3, #1
    144e:	b2db      	uxtb	r3, r3
    1450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1452:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1456:	2b00      	cmp	r3, #0
    1458:	dce9      	bgt.n	142e <prvUnlockQueue+0x16>
    145a:	e000      	b.n	145e <prvUnlockQueue+0x46>
					break;
    145c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	22ff      	movs	r2, #255	; 0xff
    1462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    1466:	f7fe ffa3 	bl	3b0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    146a:	f7fe ff7b 	bl	364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1476:	e011      	b.n	149c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	691b      	ldr	r3, [r3, #16]
    147c:	2b00      	cmp	r3, #0
    147e:	d012      	beq.n	14a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	3310      	adds	r3, #16
    1484:	4618      	mov	r0, r3
    1486:	f000 fccd 	bl	1e24 <xTaskRemoveFromEventList>
    148a:	4603      	mov	r3, r0
    148c:	2b00      	cmp	r3, #0
    148e:	d001      	beq.n	1494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    1490:	f000 fdde 	bl	2050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1494:	7bbb      	ldrb	r3, [r7, #14]
    1496:	3b01      	subs	r3, #1
    1498:	b2db      	uxtb	r3, r3
    149a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    149c:	f997 300e 	ldrsb.w	r3, [r7, #14]
    14a0:	2b00      	cmp	r3, #0
    14a2:	dce9      	bgt.n	1478 <prvUnlockQueue+0x60>
    14a4:	e000      	b.n	14a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    14a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	22ff      	movs	r2, #255	; 0xff
    14ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    14b0:	f7fe ff7e 	bl	3b0 <vPortExitCritical>
}
    14b4:	bf00      	nop
    14b6:	3710      	adds	r7, #16
    14b8:	46bd      	mov	sp, r7
    14ba:	bd80      	pop	{r7, pc}

000014bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    14c4:	f7fe ff4e 	bl	364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    14cc:	2b00      	cmp	r3, #0
    14ce:	d102      	bne.n	14d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    14d0:	2301      	movs	r3, #1
    14d2:	60fb      	str	r3, [r7, #12]
    14d4:	e001      	b.n	14da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    14d6:	2300      	movs	r3, #0
    14d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    14da:	f7fe ff69 	bl	3b0 <vPortExitCritical>

	return xReturn;
    14de:	68fb      	ldr	r3, [r7, #12]
}
    14e0:	4618      	mov	r0, r3
    14e2:	3710      	adds	r7, #16
    14e4:	46bd      	mov	sp, r7
    14e6:	bd80      	pop	{r7, pc}

000014e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    14e8:	b580      	push	{r7, lr}
    14ea:	b084      	sub	sp, #16
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    14f0:	f7fe ff38 	bl	364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    14fc:	429a      	cmp	r2, r3
    14fe:	d102      	bne.n	1506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    1500:	2301      	movs	r3, #1
    1502:	60fb      	str	r3, [r7, #12]
    1504:	e001      	b.n	150a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    1506:	2300      	movs	r3, #0
    1508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    150a:	f7fe ff51 	bl	3b0 <vPortExitCritical>

	return xReturn;
    150e:	68fb      	ldr	r3, [r7, #12]
}
    1510:	4618      	mov	r0, r3
    1512:	3710      	adds	r7, #16
    1514:	46bd      	mov	sp, r7
    1516:	bd80      	pop	{r7, pc}

00001518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1518:	b580      	push	{r7, lr}
    151a:	b086      	sub	sp, #24
    151c:	af00      	add	r7, sp, #0
    151e:	60f8      	str	r0, [r7, #12]
    1520:	60b9      	str	r1, [r7, #8]
    1522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1528:	f7fe ff1c 	bl	364 <vPortEnterCritical>
    152c:	697b      	ldr	r3, [r7, #20]
    152e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1532:	b25b      	sxtb	r3, r3
    1534:	f1b3 3fff 	cmp.w	r3, #4294967295
    1538:	d103      	bne.n	1542 <vQueueWaitForMessageRestricted+0x2a>
    153a:	697b      	ldr	r3, [r7, #20]
    153c:	2200      	movs	r2, #0
    153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1542:	697b      	ldr	r3, [r7, #20]
    1544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    1548:	b25b      	sxtb	r3, r3
    154a:	f1b3 3fff 	cmp.w	r3, #4294967295
    154e:	d103      	bne.n	1558 <vQueueWaitForMessageRestricted+0x40>
    1550:	697b      	ldr	r3, [r7, #20]
    1552:	2200      	movs	r2, #0
    1554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    1558:	f7fe ff2a 	bl	3b0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1560:	2b00      	cmp	r3, #0
    1562:	d106      	bne.n	1572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1564:	697b      	ldr	r3, [r7, #20]
    1566:	3324      	adds	r3, #36	; 0x24
    1568:	687a      	ldr	r2, [r7, #4]
    156a:	68b9      	ldr	r1, [r7, #8]
    156c:	4618      	mov	r0, r3
    156e:	f000 fc37 	bl	1de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1572:	6978      	ldr	r0, [r7, #20]
    1574:	f7ff ff50 	bl	1418 <prvUnlockQueue>
	}
    1578:	bf00      	nop
    157a:	3718      	adds	r7, #24
    157c:	46bd      	mov	sp, r7
    157e:	bd80      	pop	{r7, pc}

00001580 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1580:	b580      	push	{r7, lr}
    1582:	b08c      	sub	sp, #48	; 0x30
    1584:	af04      	add	r7, sp, #16
    1586:	60f8      	str	r0, [r7, #12]
    1588:	60b9      	str	r1, [r7, #8]
    158a:	603b      	str	r3, [r7, #0]
    158c:	4613      	mov	r3, r2
    158e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */ // Stack grows DOWN on M4F
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1590:	88fb      	ldrh	r3, [r7, #6]
    1592:	009b      	lsls	r3, r3, #2
    1594:	4618      	mov	r0, r3
    1596:	f7ff f8d1 	bl	73c <pvPortMalloc>
    159a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    159c:	697b      	ldr	r3, [r7, #20]
    159e:	2b00      	cmp	r3, #0
    15a0:	d00e      	beq.n	15c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    15a2:	204c      	movs	r0, #76	; 0x4c
    15a4:	f7ff f8ca 	bl	73c <pvPortMalloc>
    15a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    15aa:	69fb      	ldr	r3, [r7, #28]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d003      	beq.n	15b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    15b0:	69fb      	ldr	r3, [r7, #28]
    15b2:	697a      	ldr	r2, [r7, #20]
    15b4:	631a      	str	r2, [r3, #48]	; 0x30
    15b6:	e005      	b.n	15c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    15b8:	6978      	ldr	r0, [r7, #20]
    15ba:	f7ff f951 	bl	860 <vPortFree>
    15be:	e001      	b.n	15c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    15c0:	2300      	movs	r3, #0
    15c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    15c4:	69fb      	ldr	r3, [r7, #28]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d013      	beq.n	15f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    15ca:	88fa      	ldrh	r2, [r7, #6]
    15cc:	2300      	movs	r3, #0
    15ce:	9303      	str	r3, [sp, #12]
    15d0:	69fb      	ldr	r3, [r7, #28]
    15d2:	9302      	str	r3, [sp, #8]
    15d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15d6:	9301      	str	r3, [sp, #4]
    15d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15da:	9300      	str	r3, [sp, #0]
    15dc:	683b      	ldr	r3, [r7, #0]
    15de:	68b9      	ldr	r1, [r7, #8]
    15e0:	68f8      	ldr	r0, [r7, #12]
    15e2:	f000 f80e 	bl	1602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    15e6:	69f8      	ldr	r0, [r7, #28]
    15e8:	f000 f882 	bl	16f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    15ec:	2301      	movs	r3, #1
    15ee:	61bb      	str	r3, [r7, #24]
    15f0:	e002      	b.n	15f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    15f2:	f04f 33ff 	mov.w	r3, #4294967295
    15f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    15f8:	69bb      	ldr	r3, [r7, #24]
	}
    15fa:	4618      	mov	r0, r3
    15fc:	3720      	adds	r7, #32
    15fe:	46bd      	mov	sp, r7
    1600:	bd80      	pop	{r7, pc}

00001602 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1602:	b580      	push	{r7, lr}
    1604:	b086      	sub	sp, #24
    1606:	af00      	add	r7, sp, #0
    1608:	60f8      	str	r0, [r7, #12]
    160a:	60b9      	str	r1, [r7, #8]
    160c:	607a      	str	r2, [r7, #4]
    160e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1612:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	009b      	lsls	r3, r3, #2
    1618:	461a      	mov	r2, r3
    161a:	21a5      	movs	r1, #165	; 0xa5
    161c:	f003 fc5f 	bl	4ede <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1620:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    162a:	3b01      	subs	r3, #1
    162c:	009b      	lsls	r3, r3, #2
    162e:	4413      	add	r3, r2
    1630:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1632:	693b      	ldr	r3, [r7, #16]
    1634:	f023 0307 	bic.w	r3, r3, #7
    1638:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    163a:	693b      	ldr	r3, [r7, #16]
    163c:	f003 0307 	and.w	r3, r3, #7
    1640:	2b00      	cmp	r3, #0
    1642:	d000      	beq.n	1646 <prvInitialiseNewTask+0x44>
    1644:	e7fe      	b.n	1644 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1646:	2300      	movs	r3, #0
    1648:	617b      	str	r3, [r7, #20]
    164a:	e012      	b.n	1672 <prvInitialiseNewTask+0x70>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    164c:	68ba      	ldr	r2, [r7, #8]
    164e:	697b      	ldr	r3, [r7, #20]
    1650:	4413      	add	r3, r2
    1652:	7819      	ldrb	r1, [r3, #0]
    1654:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1656:	697b      	ldr	r3, [r7, #20]
    1658:	4413      	add	r3, r2
    165a:	3334      	adds	r3, #52	; 0x34
    165c:	460a      	mov	r2, r1
    165e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1660:	68ba      	ldr	r2, [r7, #8]
    1662:	697b      	ldr	r3, [r7, #20]
    1664:	4413      	add	r3, r2
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	2b00      	cmp	r3, #0
    166a:	d006      	beq.n	167a <prvInitialiseNewTask+0x78>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	3301      	adds	r3, #1
    1670:	617b      	str	r3, [r7, #20]
    1672:	697b      	ldr	r3, [r7, #20]
    1674:	2b0f      	cmp	r3, #15
    1676:	d9e9      	bls.n	164c <prvInitialiseNewTask+0x4a>
    1678:	e000      	b.n	167c <prvInitialiseNewTask+0x7a>
		{
			break;
    167a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    167e:	2200      	movs	r2, #0
    1680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1684:	6a3b      	ldr	r3, [r7, #32]
    1686:	2b03      	cmp	r3, #3
    1688:	d901      	bls.n	168e <prvInitialiseNewTask+0x8c>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    168a:	2303      	movs	r3, #3
    168c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1690:	6a3a      	ldr	r2, [r7, #32]
    1692:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1694:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1696:	3304      	adds	r3, #4
    1698:	4618      	mov	r0, r3
    169a:	f7ff fac7 	bl	c2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16a0:	3318      	adds	r3, #24
    16a2:	4618      	mov	r0, r3
    16a4:	f7ff fac2 	bl	c2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    16a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    16ae:	6a3b      	ldr	r3, [r7, #32]
    16b0:	f1c3 0204 	rsb	r2, r3, #4
    16b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    16b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    16be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c0:	2200      	movs	r2, #0
    16c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    16c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c6:	2200      	movs	r2, #0
    16c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    16cc:	683a      	ldr	r2, [r7, #0]
    16ce:	68f9      	ldr	r1, [r7, #12]
    16d0:	6938      	ldr	r0, [r7, #16]
    16d2:	f7fe fd45 	bl	160 <pxPortInitialiseStack>
    16d6:	4602      	mov	r2, r0
    16d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    16dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16de:	2b00      	cmp	r3, #0
    16e0:	d002      	beq.n	16e8 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    16e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    16e8:	bf00      	nop
    16ea:	3718      	adds	r7, #24
    16ec:	46bd      	mov	sp, r7
    16ee:	bd80      	pop	{r7, pc}

000016f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    16f8:	f7fe fe34 	bl	364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    16fc:	4b2b      	ldr	r3, [pc, #172]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	3301      	adds	r3, #1
    1702:	4a2a      	ldr	r2, [pc, #168]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    1704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1706:	4b2a      	ldr	r3, [pc, #168]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	2b00      	cmp	r3, #0
    170c:	d109      	bne.n	1722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    170e:	4a28      	ldr	r2, [pc, #160]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1710:	687b      	ldr	r3, [r7, #4]
    1712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1714:	4b25      	ldr	r3, [pc, #148]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	2b01      	cmp	r3, #1
    171a:	d110      	bne.n	173e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    171c:	f000 fd08 	bl	2130 <prvInitialiseTaskLists>
    1720:	e00d      	b.n	173e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    1722:	4b24      	ldr	r3, [pc, #144]	; (17b4 <prvAddNewTaskToReadyList+0xc4>)
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	2b00      	cmp	r3, #0
    1728:	d109      	bne.n	173e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    172a:	4b21      	ldr	r3, [pc, #132]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1734:	429a      	cmp	r2, r3
    1736:	d802      	bhi.n	173e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    1738:	4a1d      	ldr	r2, [pc, #116]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    173e:	4b1e      	ldr	r3, [pc, #120]	; (17b8 <prvAddNewTaskToReadyList+0xc8>)
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	3301      	adds	r3, #1
    1744:	4a1c      	ldr	r2, [pc, #112]	; (17b8 <prvAddNewTaskToReadyList+0xc8>)
    1746:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		//prvAddTaskToReadyList( pxNewTCB );
		prvReaddTaskToReadyList( pxNewTCB );
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    174c:	4b1b      	ldr	r3, [pc, #108]	; (17bc <prvAddNewTaskToReadyList+0xcc>)
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	429a      	cmp	r2, r3
    1752:	d903      	bls.n	175c <prvAddNewTaskToReadyList+0x6c>
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1758:	4a18      	ldr	r2, [pc, #96]	; (17bc <prvAddNewTaskToReadyList+0xcc>)
    175a:	6013      	str	r3, [r2, #0]
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1760:	4613      	mov	r3, r2
    1762:	009b      	lsls	r3, r3, #2
    1764:	4413      	add	r3, r2
    1766:	009b      	lsls	r3, r3, #2
    1768:	4a15      	ldr	r2, [pc, #84]	; (17c0 <prvAddNewTaskToReadyList+0xd0>)
    176a:	441a      	add	r2, r3
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	3304      	adds	r3, #4
    1770:	4619      	mov	r1, r3
    1772:	4610      	mov	r0, r2
    1774:	f7ff fa67 	bl	c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    1778:	f7fe fe1a 	bl	3b0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    177c:	4b0d      	ldr	r3, [pc, #52]	; (17b4 <prvAddNewTaskToReadyList+0xc4>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	2b00      	cmp	r3, #0
    1782:	d00e      	beq.n	17a2 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1784:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    178e:	429a      	cmp	r2, r3
    1790:	d207      	bcs.n	17a2 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();    /* Set a PendSV to request a context switch. */                             \
    1792:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <prvAddNewTaskToReadyList+0xd4>)
    1794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1798:	601a      	str	r2, [r3, #0]
    179a:	f3bf 8f4f 	dsb	sy
    179e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    17a2:	bf00      	nop
    17a4:	3708      	adds	r7, #8
    17a6:	46bd      	mov	sp, r7
    17a8:	bd80      	pop	{r7, pc}
    17aa:	bf00      	nop
    17ac:	10006454 	.word	0x10006454
    17b0:	100063a8 	.word	0x100063a8
    17b4:	10006460 	.word	0x10006460
    17b8:	10006470 	.word	0x10006470
    17bc:	1000645c 	.word	0x1000645c
    17c0:	100063ac 	.word	0x100063ac
    17c4:	e000ed04 	.word	0xe000ed04

000017c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    17c8:	b580      	push	{r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
    17ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    17d0:	f7fe fdc8 	bl	364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d102      	bne.n	17e0 <vTaskSuspend+0x18>
    17da:	4b26      	ldr	r3, [pc, #152]	; (1874 <vTaskSuspend+0xac>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	e000      	b.n	17e2 <vTaskSuspend+0x1a>
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    17e4:	68fb      	ldr	r3, [r7, #12]
    17e6:	3304      	adds	r3, #4
    17e8:	4618      	mov	r0, r3
    17ea:	f7ff fa89 	bl	d00 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f2:	2b00      	cmp	r3, #0
    17f4:	d004      	beq.n	1800 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	3318      	adds	r3, #24
    17fa:	4618      	mov	r0, r3
    17fc:	f7ff fa80 	bl	d00 <uxListRemove>
				mtCOVERAGE_TEST_MARKER();
			}
			//GEO: addition for support of SystemView Profiler
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
			//GEO: end modification
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	3304      	adds	r3, #4
    1804:	4619      	mov	r1, r3
    1806:	481c      	ldr	r0, [pc, #112]	; (1878 <vTaskSuspend+0xb0>)
    1808:	f7ff fa1d 	bl	c46 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    180c:	f7fe fdd0 	bl	3b0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    1810:	4b1a      	ldr	r3, [pc, #104]	; (187c <vTaskSuspend+0xb4>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	2b00      	cmp	r3, #0
    1816:	d005      	beq.n	1824 <vTaskSuspend+0x5c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    1818:	f7fe fda4 	bl	364 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    181c:	f000 fcca 	bl	21b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    1820:	f7fe fdc6 	bl	3b0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    1824:	4b13      	ldr	r3, [pc, #76]	; (1874 <vTaskSuspend+0xac>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	68fa      	ldr	r2, [r7, #12]
    182a:	429a      	cmp	r2, r3
    182c:	d11d      	bne.n	186a <vTaskSuspend+0xa2>
		{
			if( xSchedulerRunning != pdFALSE )
    182e:	4b13      	ldr	r3, [pc, #76]	; (187c <vTaskSuspend+0xb4>)
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	2b00      	cmp	r3, #0
    1834:	d00d      	beq.n	1852 <vTaskSuspend+0x8a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    1836:	4b12      	ldr	r3, [pc, #72]	; (1880 <vTaskSuspend+0xb8>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2b00      	cmp	r3, #0
    183c:	d000      	beq.n	1840 <vTaskSuspend+0x78>
    183e:	e7fe      	b.n	183e <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
    1840:	4b10      	ldr	r3, [pc, #64]	; (1884 <vTaskSuspend+0xbc>)
    1842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1846:	601a      	str	r2, [r3, #0]
    1848:	f3bf 8f4f 	dsb	sy
    184c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1850:	e00b      	b.n	186a <vTaskSuspend+0xa2>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1852:	4b09      	ldr	r3, [pc, #36]	; (1878 <vTaskSuspend+0xb0>)
    1854:	681a      	ldr	r2, [r3, #0]
    1856:	4b0c      	ldr	r3, [pc, #48]	; (1888 <vTaskSuspend+0xc0>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	429a      	cmp	r2, r3
    185c:	d103      	bne.n	1866 <vTaskSuspend+0x9e>
					pxCurrentTCB = NULL;
    185e:	4b05      	ldr	r3, [pc, #20]	; (1874 <vTaskSuspend+0xac>)
    1860:	2200      	movs	r2, #0
    1862:	601a      	str	r2, [r3, #0]
	}
    1864:	e001      	b.n	186a <vTaskSuspend+0xa2>
					vTaskSwitchContext();
    1866:	f000 fa01 	bl	1c6c <vTaskSwitchContext>
	}
    186a:	bf00      	nop
    186c:	3710      	adds	r7, #16
    186e:	46bd      	mov	sp, r7
    1870:	bd80      	pop	{r7, pc}
    1872:	bf00      	nop
    1874:	100063a8 	.word	0x100063a8
    1878:	10006440 	.word	0x10006440
    187c:	10006460 	.word	0x10006460
    1880:	1000647c 	.word	0x1000647c
    1884:	e000ed04 	.word	0xe000ed04
    1888:	10006454 	.word	0x10006454

0000188c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    188c:	b580      	push	{r7, lr}
    188e:	b084      	sub	sp, #16
    1890:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1892:	4b1a      	ldr	r3, [pc, #104]	; (18fc <vTaskStartScheduler+0x70>)
    1894:	9301      	str	r3, [sp, #4]
    1896:	2300      	movs	r3, #0
    1898:	9300      	str	r3, [sp, #0]
    189a:	2300      	movs	r3, #0
    189c:	f44f 7280 	mov.w	r2, #256	; 0x100
    18a0:	4917      	ldr	r1, [pc, #92]	; (1900 <vTaskStartScheduler+0x74>)
    18a2:	4818      	ldr	r0, [pc, #96]	; (1904 <vTaskStartScheduler+0x78>)
    18a4:	f7ff fe6c 	bl	1580 <xTaskCreate>
    18a8:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	2b01      	cmp	r3, #1
    18ae:	d102      	bne.n	18b6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
    18b0:	f000 fd30 	bl	2314 <xTimerCreateTimerTask>
    18b4:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	2b01      	cmp	r3, #1
    18ba:	d115      	bne.n	18e8 <vTaskStartScheduler+0x5c>
	__asm volatile
    18bc:	f04f 0380 	mov.w	r3, #128	; 0x80
    18c0:	f383 8811 	msr	BASEPRI, r3
    18c4:	f3bf 8f6f 	isb	sy
    18c8:	f3bf 8f4f 	dsb	sy
    18cc:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <vTaskStartScheduler+0x7c>)
    18d0:	f04f 32ff 	mov.w	r2, #4294967295
    18d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    18d6:	4b0d      	ldr	r3, [pc, #52]	; (190c <vTaskStartScheduler+0x80>)
    18d8:	2201      	movs	r2, #1
    18da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    18dc:	4b0c      	ldr	r3, [pc, #48]	; (1910 <vTaskStartScheduler+0x84>)
    18de:	2200      	movs	r2, #0
    18e0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    18e2:	f7fe fcbb 	bl	25c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    18e6:	e004      	b.n	18f2 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    18ee:	d100      	bne.n	18f2 <vTaskStartScheduler+0x66>
    18f0:	e7fe      	b.n	18f0 <vTaskStartScheduler+0x64>
}
    18f2:	bf00      	nop
    18f4:	3708      	adds	r7, #8
    18f6:	46bd      	mov	sp, r7
    18f8:	bd80      	pop	{r7, pc}
    18fa:	bf00      	nop
    18fc:	10006478 	.word	0x10006478
    1900:	00004ef0 	.word	0x00004ef0
    1904:	00002069 	.word	0x00002069
    1908:	10006474 	.word	0x10006474
    190c:	10006460 	.word	0x10006460
    1910:	10006458 	.word	0x10006458

00001914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1914:	b480      	push	{r7}
    1916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <vTaskSuspendAll+0x18>)
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	3301      	adds	r3, #1
    191e:	4a03      	ldr	r2, [pc, #12]	; (192c <vTaskSuspendAll+0x18>)
    1920:	6013      	str	r3, [r2, #0]
}
    1922:	bf00      	nop
    1924:	46bd      	mov	sp, r7
    1926:	f85d 7b04 	ldr.w	r7, [sp], #4
    192a:	4770      	bx	lr
    192c:	1000647c 	.word	0x1000647c

00001930 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
    1930:	b480      	push	{r7}
    1932:	b083      	sub	sp, #12
    1934:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
    1936:	2300      	movs	r3, #0
    1938:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    193a:	4b14      	ldr	r3, [pc, #80]	; (198c <prvGetExpectedIdleTime+0x5c>)
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d001      	beq.n	1946 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
    1942:	2301      	movs	r3, #1
    1944:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <prvGetExpectedIdleTime+0x60>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    194c:	2b00      	cmp	r3, #0
    194e:	d002      	beq.n	1956 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
    1950:	2300      	movs	r3, #0
    1952:	607b      	str	r3, [r7, #4]
    1954:	e012      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    1956:	4b0f      	ldr	r3, [pc, #60]	; (1994 <prvGetExpectedIdleTime+0x64>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	2b01      	cmp	r3, #1
    195c:	d902      	bls.n	1964 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
    195e:	2300      	movs	r3, #0
    1960:	607b      	str	r3, [r7, #4]
    1962:	e00b      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
    1964:	683b      	ldr	r3, [r7, #0]
    1966:	2b00      	cmp	r3, #0
    1968:	d002      	beq.n	1970 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
    196a:	2300      	movs	r3, #0
    196c:	607b      	str	r3, [r7, #4]
    196e:	e005      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
    1970:	4b09      	ldr	r3, [pc, #36]	; (1998 <prvGetExpectedIdleTime+0x68>)
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	4b09      	ldr	r3, [pc, #36]	; (199c <prvGetExpectedIdleTime+0x6c>)
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	1ad3      	subs	r3, r2, r3
    197a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
    197c:	687b      	ldr	r3, [r7, #4]
	}
    197e:	4618      	mov	r0, r3
    1980:	370c      	adds	r7, #12
    1982:	46bd      	mov	sp, r7
    1984:	f85d 7b04 	ldr.w	r7, [sp], #4
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	1000645c 	.word	0x1000645c
    1990:	100063a8 	.word	0x100063a8
    1994:	100063ac 	.word	0x100063ac
    1998:	10006474 	.word	0x10006474
    199c:	10006458 	.word	0x10006458

000019a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    19a0:	b580      	push	{r7, lr}
    19a2:	b084      	sub	sp, #16
    19a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    19a6:	2300      	movs	r3, #0
    19a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    19aa:	2300      	movs	r3, #0
    19ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    19ae:	4b3d      	ldr	r3, [pc, #244]	; (1aa4 <xTaskResumeAll+0x104>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d100      	bne.n	19b8 <xTaskResumeAll+0x18>
    19b6:	e7fe      	b.n	19b6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    19b8:	f7fe fcd4 	bl	364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    19bc:	4b39      	ldr	r3, [pc, #228]	; (1aa4 <xTaskResumeAll+0x104>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	3b01      	subs	r3, #1
    19c2:	4a38      	ldr	r2, [pc, #224]	; (1aa4 <xTaskResumeAll+0x104>)
    19c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19c6:	4b37      	ldr	r3, [pc, #220]	; (1aa4 <xTaskResumeAll+0x104>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	2b00      	cmp	r3, #0
    19cc:	d162      	bne.n	1a94 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    19ce:	4b36      	ldr	r3, [pc, #216]	; (1aa8 <xTaskResumeAll+0x108>)
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d05e      	beq.n	1a94 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    19d6:	e02f      	b.n	1a38 <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    19d8:	4b34      	ldr	r3, [pc, #208]	; (1aac <xTaskResumeAll+0x10c>)
    19da:	68db      	ldr	r3, [r3, #12]
    19dc:	68db      	ldr	r3, [r3, #12]
    19de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	3318      	adds	r3, #24
    19e4:	4618      	mov	r0, r3
    19e6:	f7ff f98b 	bl	d00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	3304      	adds	r3, #4
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff f986 	bl	d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19f8:	4b2d      	ldr	r3, [pc, #180]	; (1ab0 <xTaskResumeAll+0x110>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	429a      	cmp	r2, r3
    19fe:	d903      	bls.n	1a08 <xTaskResumeAll+0x68>
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a04:	4a2a      	ldr	r2, [pc, #168]	; (1ab0 <xTaskResumeAll+0x110>)
    1a06:	6013      	str	r3, [r2, #0]
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a0c:	4613      	mov	r3, r2
    1a0e:	009b      	lsls	r3, r3, #2
    1a10:	4413      	add	r3, r2
    1a12:	009b      	lsls	r3, r3, #2
    1a14:	4a27      	ldr	r2, [pc, #156]	; (1ab4 <xTaskResumeAll+0x114>)
    1a16:	441a      	add	r2, r3
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	3304      	adds	r3, #4
    1a1c:	4619      	mov	r1, r3
    1a1e:	4610      	mov	r0, r2
    1a20:	f7ff f911 	bl	c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a28:	4b23      	ldr	r3, [pc, #140]	; (1ab8 <xTaskResumeAll+0x118>)
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a2e:	429a      	cmp	r2, r3
    1a30:	d302      	bcc.n	1a38 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
    1a32:	4b22      	ldr	r3, [pc, #136]	; (1abc <xTaskResumeAll+0x11c>)
    1a34:	2201      	movs	r2, #1
    1a36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1a38:	4b1c      	ldr	r3, [pc, #112]	; (1aac <xTaskResumeAll+0x10c>)
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d1cb      	bne.n	19d8 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d001      	beq.n	1a4a <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1a46:	f000 fbb5 	bl	21b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1a4a:	4b1d      	ldr	r3, [pc, #116]	; (1ac0 <xTaskResumeAll+0x120>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d010      	beq.n	1a78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1a56:	f000 f865 	bl	1b24 <xTaskIncrementTick>
    1a5a:	4603      	mov	r3, r0
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d002      	beq.n	1a66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    1a60:	4b16      	ldr	r3, [pc, #88]	; (1abc <xTaskResumeAll+0x11c>)
    1a62:	2201      	movs	r2, #1
    1a64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	3b01      	subs	r3, #1
    1a6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d1f1      	bne.n	1a56 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
    1a72:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <xTaskResumeAll+0x120>)
    1a74:	2200      	movs	r2, #0
    1a76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1a78:	4b10      	ldr	r3, [pc, #64]	; (1abc <xTaskResumeAll+0x11c>)
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d009      	beq.n	1a94 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1a80:	2301      	movs	r3, #1
    1a82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1a84:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <xTaskResumeAll+0x124>)
    1a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a8a:	601a      	str	r2, [r3, #0]
    1a8c:	f3bf 8f4f 	dsb	sy
    1a90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1a94:	f7fe fc8c 	bl	3b0 <vPortExitCritical>

	return xAlreadyYielded;
    1a98:	68bb      	ldr	r3, [r7, #8]
}
    1a9a:	4618      	mov	r0, r3
    1a9c:	3710      	adds	r7, #16
    1a9e:	46bd      	mov	sp, r7
    1aa0:	bd80      	pop	{r7, pc}
    1aa2:	bf00      	nop
    1aa4:	1000647c 	.word	0x1000647c
    1aa8:	10006454 	.word	0x10006454
    1aac:	1000642c 	.word	0x1000642c
    1ab0:	1000645c 	.word	0x1000645c
    1ab4:	100063ac 	.word	0x100063ac
    1ab8:	100063a8 	.word	0x100063a8
    1abc:	10006468 	.word	0x10006468
    1ac0:	10006464 	.word	0x10006464
    1ac4:	e000ed04 	.word	0xe000ed04

00001ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1ac8:	b480      	push	{r7}
    1aca:	b083      	sub	sp, #12
    1acc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <xTaskGetTickCount+0x1c>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    1ad4:	687b      	ldr	r3, [r7, #4]
}
    1ad6:	4618      	mov	r0, r3
    1ad8:	370c      	adds	r7, #12
    1ada:	46bd      	mov	sp, r7
    1adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ae0:	4770      	bx	lr
    1ae2:	bf00      	nop
    1ae4:	10006458 	.word	0x10006458

00001ae8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
    1ae8:	b480      	push	{r7}
    1aea:	b083      	sub	sp, #12
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    1af0:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <vTaskStepTick+0x34>)
    1af2:	681a      	ldr	r2, [r3, #0]
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	441a      	add	r2, r3
    1af8:	4b09      	ldr	r3, [pc, #36]	; (1b20 <vTaskStepTick+0x38>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	429a      	cmp	r2, r3
    1afe:	d900      	bls.n	1b02 <vTaskStepTick+0x1a>
    1b00:	e7fe      	b.n	1b00 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <vTaskStepTick+0x34>)
    1b04:	681a      	ldr	r2, [r3, #0]
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	4413      	add	r3, r2
    1b0a:	4a04      	ldr	r2, [pc, #16]	; (1b1c <vTaskStepTick+0x34>)
    1b0c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
    1b0e:	bf00      	nop
    1b10:	370c      	adds	r7, #12
    1b12:	46bd      	mov	sp, r7
    1b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b18:	4770      	bx	lr
    1b1a:	bf00      	nop
    1b1c:	10006458 	.word	0x10006458
    1b20:	10006474 	.word	0x10006474

00001b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1b24:	b580      	push	{r7, lr}
    1b26:	b086      	sub	sp, #24
    1b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1b2a:	2300      	movs	r3, #0
    1b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b2e:	4b44      	ldr	r3, [pc, #272]	; (1c40 <xTaskIncrementTick+0x11c>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d174      	bne.n	1c20 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1b36:	4b43      	ldr	r3, [pc, #268]	; (1c44 <xTaskIncrementTick+0x120>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	3301      	adds	r3, #1
    1b3c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1b3e:	4a41      	ldr	r2, [pc, #260]	; (1c44 <xTaskIncrementTick+0x120>)
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    1b44:	693b      	ldr	r3, [r7, #16]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d116      	bne.n	1b78 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
    1b4a:	4b3f      	ldr	r3, [pc, #252]	; (1c48 <xTaskIncrementTick+0x124>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d000      	beq.n	1b56 <xTaskIncrementTick+0x32>
    1b54:	e7fe      	b.n	1b54 <xTaskIncrementTick+0x30>
    1b56:	4b3c      	ldr	r3, [pc, #240]	; (1c48 <xTaskIncrementTick+0x124>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	60fb      	str	r3, [r7, #12]
    1b5c:	4b3b      	ldr	r3, [pc, #236]	; (1c4c <xTaskIncrementTick+0x128>)
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	4a39      	ldr	r2, [pc, #228]	; (1c48 <xTaskIncrementTick+0x124>)
    1b62:	6013      	str	r3, [r2, #0]
    1b64:	4a39      	ldr	r2, [pc, #228]	; (1c4c <xTaskIncrementTick+0x128>)
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	6013      	str	r3, [r2, #0]
    1b6a:	4b39      	ldr	r3, [pc, #228]	; (1c50 <xTaskIncrementTick+0x12c>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	3301      	adds	r3, #1
    1b70:	4a37      	ldr	r2, [pc, #220]	; (1c50 <xTaskIncrementTick+0x12c>)
    1b72:	6013      	str	r3, [r2, #0]
    1b74:	f000 fb1e 	bl	21b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b78:	4b36      	ldr	r3, [pc, #216]	; (1c54 <xTaskIncrementTick+0x130>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	693a      	ldr	r2, [r7, #16]
    1b7e:	429a      	cmp	r2, r3
    1b80:	d353      	bcc.n	1c2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b82:	4b31      	ldr	r3, [pc, #196]	; (1c48 <xTaskIncrementTick+0x124>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d101      	bne.n	1b90 <xTaskIncrementTick+0x6c>
    1b8c:	2301      	movs	r3, #1
    1b8e:	e000      	b.n	1b92 <xTaskIncrementTick+0x6e>
    1b90:	2300      	movs	r3, #0
    1b92:	2b00      	cmp	r3, #0
    1b94:	d004      	beq.n	1ba0 <xTaskIncrementTick+0x7c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b96:	4b2f      	ldr	r3, [pc, #188]	; (1c54 <xTaskIncrementTick+0x130>)
    1b98:	f04f 32ff 	mov.w	r2, #4294967295
    1b9c:	601a      	str	r2, [r3, #0]
					break;
    1b9e:	e044      	b.n	1c2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1ba0:	4b29      	ldr	r3, [pc, #164]	; (1c48 <xTaskIncrementTick+0x124>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	68db      	ldr	r3, [r3, #12]
    1ba6:	68db      	ldr	r3, [r3, #12]
    1ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1baa:	68bb      	ldr	r3, [r7, #8]
    1bac:	685b      	ldr	r3, [r3, #4]
    1bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    1bb0:	693a      	ldr	r2, [r7, #16]
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	429a      	cmp	r2, r3
    1bb6:	d203      	bcs.n	1bc0 <xTaskIncrementTick+0x9c>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1bb8:	4a26      	ldr	r2, [pc, #152]	; (1c54 <xTaskIncrementTick+0x130>)
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	6013      	str	r3, [r2, #0]
						break;
    1bbe:	e034      	b.n	1c2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1bc0:	68bb      	ldr	r3, [r7, #8]
    1bc2:	3304      	adds	r3, #4
    1bc4:	4618      	mov	r0, r3
    1bc6:	f7ff f89b 	bl	d00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1bca:	68bb      	ldr	r3, [r7, #8]
    1bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d004      	beq.n	1bdc <xTaskIncrementTick+0xb8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	3318      	adds	r3, #24
    1bd6:	4618      	mov	r0, r3
    1bd8:	f7ff f892 	bl	d00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1bdc:	68bb      	ldr	r3, [r7, #8]
    1bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1be0:	4b1d      	ldr	r3, [pc, #116]	; (1c58 <xTaskIncrementTick+0x134>)
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	429a      	cmp	r2, r3
    1be6:	d903      	bls.n	1bf0 <xTaskIncrementTick+0xcc>
    1be8:	68bb      	ldr	r3, [r7, #8]
    1bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bec:	4a1a      	ldr	r2, [pc, #104]	; (1c58 <xTaskIncrementTick+0x134>)
    1bee:	6013      	str	r3, [r2, #0]
    1bf0:	68bb      	ldr	r3, [r7, #8]
    1bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bf4:	4613      	mov	r3, r2
    1bf6:	009b      	lsls	r3, r3, #2
    1bf8:	4413      	add	r3, r2
    1bfa:	009b      	lsls	r3, r3, #2
    1bfc:	4a17      	ldr	r2, [pc, #92]	; (1c5c <xTaskIncrementTick+0x138>)
    1bfe:	441a      	add	r2, r3
    1c00:	68bb      	ldr	r3, [r7, #8]
    1c02:	3304      	adds	r3, #4
    1c04:	4619      	mov	r1, r3
    1c06:	4610      	mov	r0, r2
    1c08:	f7ff f81d 	bl	c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c0c:	68bb      	ldr	r3, [r7, #8]
    1c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c10:	4b13      	ldr	r3, [pc, #76]	; (1c60 <xTaskIncrementTick+0x13c>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c16:	429a      	cmp	r2, r3
    1c18:	d3b3      	bcc.n	1b82 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
    1c1a:	2301      	movs	r3, #1
    1c1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1c1e:	e7b0      	b.n	1b82 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1c20:	4b10      	ldr	r3, [pc, #64]	; (1c64 <xTaskIncrementTick+0x140>)
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	3301      	adds	r3, #1
    1c26:	4a0f      	ldr	r2, [pc, #60]	; (1c64 <xTaskIncrementTick+0x140>)
    1c28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1c2a:	4b0f      	ldr	r3, [pc, #60]	; (1c68 <xTaskIncrementTick+0x144>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d001      	beq.n	1c36 <xTaskIncrementTick+0x112>
		{
			xSwitchRequired = pdTRUE;
    1c32:	2301      	movs	r3, #1
    1c34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    1c36:	697b      	ldr	r3, [r7, #20]
}
    1c38:	4618      	mov	r0, r3
    1c3a:	3718      	adds	r7, #24
    1c3c:	46bd      	mov	sp, r7
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	1000647c 	.word	0x1000647c
    1c44:	10006458 	.word	0x10006458
    1c48:	10006424 	.word	0x10006424
    1c4c:	10006428 	.word	0x10006428
    1c50:	1000646c 	.word	0x1000646c
    1c54:	10006474 	.word	0x10006474
    1c58:	1000645c 	.word	0x1000645c
    1c5c:	100063ac 	.word	0x100063ac
    1c60:	100063a8 	.word	0x100063a8
    1c64:	10006464 	.word	0x10006464
    1c68:	10006468 	.word	0x10006468

00001c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1c72:	4b35      	ldr	r3, [pc, #212]	; (1d48 <vTaskSwitchContext+0xdc>)
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d003      	beq.n	1c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1c7a:	4b34      	ldr	r3, [pc, #208]	; (1d4c <vTaskSwitchContext+0xe0>)
    1c7c:	2201      	movs	r2, #1
    1c7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1c80:	e05e      	b.n	1d40 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
    1c82:	4b32      	ldr	r3, [pc, #200]	; (1d4c <vTaskSwitchContext+0xe0>)
    1c84:	2200      	movs	r2, #0
    1c86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1c88:	4b31      	ldr	r3, [pc, #196]	; (1d50 <vTaskSwitchContext+0xe4>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1c8e:	60bb      	str	r3, [r7, #8]
    1c90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
    1c94:	607b      	str	r3, [r7, #4]
    1c96:	68bb      	ldr	r3, [r7, #8]
    1c98:	681a      	ldr	r2, [r3, #0]
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d111      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1ca0:	68bb      	ldr	r3, [r7, #8]
    1ca2:	3304      	adds	r3, #4
    1ca4:	681a      	ldr	r2, [r3, #0]
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	429a      	cmp	r2, r3
    1caa:	d10b      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1cac:	68bb      	ldr	r3, [r7, #8]
    1cae:	3308      	adds	r3, #8
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d105      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1cb8:	68bb      	ldr	r3, [r7, #8]
    1cba:	330c      	adds	r3, #12
    1cbc:	681a      	ldr	r2, [r3, #0]
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	429a      	cmp	r2, r3
    1cc2:	d008      	beq.n	1cd6 <vTaskSwitchContext+0x6a>
    1cc4:	4b22      	ldr	r3, [pc, #136]	; (1d50 <vTaskSwitchContext+0xe4>)
    1cc6:	681a      	ldr	r2, [r3, #0]
    1cc8:	4b21      	ldr	r3, [pc, #132]	; (1d50 <vTaskSwitchContext+0xe4>)
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	3334      	adds	r3, #52	; 0x34
    1cce:	4619      	mov	r1, r3
    1cd0:	4610      	mov	r0, r2
    1cd2:	f001 faa7 	bl	3224 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1cd6:	4b1f      	ldr	r3, [pc, #124]	; (1d54 <vTaskSwitchContext+0xe8>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	60fb      	str	r3, [r7, #12]
    1cdc:	e006      	b.n	1cec <vTaskSwitchContext+0x80>
    1cde:	68fb      	ldr	r3, [r7, #12]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d100      	bne.n	1ce6 <vTaskSwitchContext+0x7a>
    1ce4:	e7fe      	b.n	1ce4 <vTaskSwitchContext+0x78>
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	3b01      	subs	r3, #1
    1cea:	60fb      	str	r3, [r7, #12]
    1cec:	491a      	ldr	r1, [pc, #104]	; (1d58 <vTaskSwitchContext+0xec>)
    1cee:	68fa      	ldr	r2, [r7, #12]
    1cf0:	4613      	mov	r3, r2
    1cf2:	009b      	lsls	r3, r3, #2
    1cf4:	4413      	add	r3, r2
    1cf6:	009b      	lsls	r3, r3, #2
    1cf8:	440b      	add	r3, r1
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d0ee      	beq.n	1cde <vTaskSwitchContext+0x72>
    1d00:	68fa      	ldr	r2, [r7, #12]
    1d02:	4613      	mov	r3, r2
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	4413      	add	r3, r2
    1d08:	009b      	lsls	r3, r3, #2
    1d0a:	4a13      	ldr	r2, [pc, #76]	; (1d58 <vTaskSwitchContext+0xec>)
    1d0c:	4413      	add	r3, r2
    1d0e:	603b      	str	r3, [r7, #0]
    1d10:	683b      	ldr	r3, [r7, #0]
    1d12:	685b      	ldr	r3, [r3, #4]
    1d14:	685a      	ldr	r2, [r3, #4]
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	605a      	str	r2, [r3, #4]
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	685a      	ldr	r2, [r3, #4]
    1d1e:	683b      	ldr	r3, [r7, #0]
    1d20:	3308      	adds	r3, #8
    1d22:	429a      	cmp	r2, r3
    1d24:	d104      	bne.n	1d30 <vTaskSwitchContext+0xc4>
    1d26:	683b      	ldr	r3, [r7, #0]
    1d28:	685b      	ldr	r3, [r3, #4]
    1d2a:	685a      	ldr	r2, [r3, #4]
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	605a      	str	r2, [r3, #4]
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	685b      	ldr	r3, [r3, #4]
    1d34:	68db      	ldr	r3, [r3, #12]
    1d36:	4a06      	ldr	r2, [pc, #24]	; (1d50 <vTaskSwitchContext+0xe4>)
    1d38:	6013      	str	r3, [r2, #0]
    1d3a:	4a06      	ldr	r2, [pc, #24]	; (1d54 <vTaskSwitchContext+0xe8>)
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	6013      	str	r3, [r2, #0]
}
    1d40:	bf00      	nop
    1d42:	3710      	adds	r7, #16
    1d44:	46bd      	mov	sp, r7
    1d46:	bd80      	pop	{r7, pc}
    1d48:	1000647c 	.word	0x1000647c
    1d4c:	10006468 	.word	0x10006468
    1d50:	100063a8 	.word	0x100063a8
    1d54:	1000645c 	.word	0x1000645c
    1d58:	100063ac 	.word	0x100063ac

00001d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	b082      	sub	sp, #8
    1d60:	af00      	add	r7, sp, #0
    1d62:	6078      	str	r0, [r7, #4]
    1d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d100      	bne.n	1d6e <vTaskPlaceOnEventList+0x12>
    1d6c:	e7fe      	b.n	1d6c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <vTaskPlaceOnEventList+0x30>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	3318      	adds	r3, #24
    1d74:	4619      	mov	r1, r3
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	f7fe ff89 	bl	c8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1d7c:	2101      	movs	r1, #1
    1d7e:	6838      	ldr	r0, [r7, #0]
    1d80:	f000 fa74 	bl	226c <prvAddCurrentTaskToDelayedList>
}
    1d84:	bf00      	nop
    1d86:	3708      	adds	r7, #8
    1d88:	46bd      	mov	sp, r7
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	100063a8 	.word	0x100063a8

00001d90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b084      	sub	sp, #16
    1d94:	af00      	add	r7, sp, #0
    1d96:	60f8      	str	r0, [r7, #12]
    1d98:	60b9      	str	r1, [r7, #8]
    1d9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
    1d9c:	68fb      	ldr	r3, [r7, #12]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d100      	bne.n	1da4 <vTaskPlaceOnUnorderedEventList+0x14>
    1da2:	e7fe      	b.n	1da2 <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
    1da4:	4b0c      	ldr	r3, [pc, #48]	; (1dd8 <vTaskPlaceOnUnorderedEventList+0x48>)
    1da6:	681b      	ldr	r3, [r3, #0]
    1da8:	2b00      	cmp	r3, #0
    1daa:	d100      	bne.n	1dae <vTaskPlaceOnUnorderedEventList+0x1e>
    1dac:	e7fe      	b.n	1dac <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1dae:	4b0b      	ldr	r3, [pc, #44]	; (1ddc <vTaskPlaceOnUnorderedEventList+0x4c>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	68ba      	ldr	r2, [r7, #8]
    1db4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1db8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1dba:	4b08      	ldr	r3, [pc, #32]	; (1ddc <vTaskPlaceOnUnorderedEventList+0x4c>)
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	3318      	adds	r3, #24
    1dc0:	4619      	mov	r1, r3
    1dc2:	68f8      	ldr	r0, [r7, #12]
    1dc4:	f7fe ff3f 	bl	c46 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1dc8:	2101      	movs	r1, #1
    1dca:	6878      	ldr	r0, [r7, #4]
    1dcc:	f000 fa4e 	bl	226c <prvAddCurrentTaskToDelayedList>
}
    1dd0:	bf00      	nop
    1dd2:	3710      	adds	r7, #16
    1dd4:	46bd      	mov	sp, r7
    1dd6:	bd80      	pop	{r7, pc}
    1dd8:	1000647c 	.word	0x1000647c
    1ddc:	100063a8 	.word	0x100063a8

00001de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1de0:	b580      	push	{r7, lr}
    1de2:	b084      	sub	sp, #16
    1de4:	af00      	add	r7, sp, #0
    1de6:	60f8      	str	r0, [r7, #12]
    1de8:	60b9      	str	r1, [r7, #8]
    1dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d100      	bne.n	1df4 <vTaskPlaceOnEventListRestricted+0x14>
    1df2:	e7fe      	b.n	1df2 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1df4:	4b0a      	ldr	r3, [pc, #40]	; (1e20 <vTaskPlaceOnEventListRestricted+0x40>)
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	3318      	adds	r3, #24
    1dfa:	4619      	mov	r1, r3
    1dfc:	68f8      	ldr	r0, [r7, #12]
    1dfe:	f7fe ff22 	bl	c46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d002      	beq.n	1e0e <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
    1e08:	f04f 33ff 	mov.w	r3, #4294967295
    1e0c:	60bb      	str	r3, [r7, #8]
		}

//		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1e0e:	6879      	ldr	r1, [r7, #4]
    1e10:	68b8      	ldr	r0, [r7, #8]
    1e12:	f000 fa2b 	bl	226c <prvAddCurrentTaskToDelayedList>
	}
    1e16:	bf00      	nop
    1e18:	3710      	adds	r7, #16
    1e1a:	46bd      	mov	sp, r7
    1e1c:	bd80      	pop	{r7, pc}
    1e1e:	bf00      	nop
    1e20:	100063a8 	.word	0x100063a8

00001e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b084      	sub	sp, #16
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	68db      	ldr	r3, [r3, #12]
    1e30:	68db      	ldr	r3, [r3, #12]
    1e32:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1e34:	68bb      	ldr	r3, [r7, #8]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d100      	bne.n	1e3c <xTaskRemoveFromEventList+0x18>
    1e3a:	e7fe      	b.n	1e3a <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1e3c:	68bb      	ldr	r3, [r7, #8]
    1e3e:	3318      	adds	r3, #24
    1e40:	4618      	mov	r0, r3
    1e42:	f7fe ff5d 	bl	d00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e46:	4b1f      	ldr	r3, [pc, #124]	; (1ec4 <xTaskRemoveFromEventList+0xa0>)
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d11d      	bne.n	1e8a <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1e4e:	68bb      	ldr	r3, [r7, #8]
    1e50:	3304      	adds	r3, #4
    1e52:	4618      	mov	r0, r3
    1e54:	f7fe ff54 	bl	d00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1e58:	68bb      	ldr	r3, [r7, #8]
    1e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e5c:	4b1a      	ldr	r3, [pc, #104]	; (1ec8 <xTaskRemoveFromEventList+0xa4>)
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	429a      	cmp	r2, r3
    1e62:	d903      	bls.n	1e6c <xTaskRemoveFromEventList+0x48>
    1e64:	68bb      	ldr	r3, [r7, #8]
    1e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e68:	4a17      	ldr	r2, [pc, #92]	; (1ec8 <xTaskRemoveFromEventList+0xa4>)
    1e6a:	6013      	str	r3, [r2, #0]
    1e6c:	68bb      	ldr	r3, [r7, #8]
    1e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e70:	4613      	mov	r3, r2
    1e72:	009b      	lsls	r3, r3, #2
    1e74:	4413      	add	r3, r2
    1e76:	009b      	lsls	r3, r3, #2
    1e78:	4a14      	ldr	r2, [pc, #80]	; (1ecc <xTaskRemoveFromEventList+0xa8>)
    1e7a:	441a      	add	r2, r3
    1e7c:	68bb      	ldr	r3, [r7, #8]
    1e7e:	3304      	adds	r3, #4
    1e80:	4619      	mov	r1, r3
    1e82:	4610      	mov	r0, r2
    1e84:	f7fe fedf 	bl	c46 <vListInsertEnd>
    1e88:	e005      	b.n	1e96 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1e8a:	68bb      	ldr	r3, [r7, #8]
    1e8c:	3318      	adds	r3, #24
    1e8e:	4619      	mov	r1, r3
    1e90:	480f      	ldr	r0, [pc, #60]	; (1ed0 <xTaskRemoveFromEventList+0xac>)
    1e92:	f7fe fed8 	bl	c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1e96:	68bb      	ldr	r3, [r7, #8]
    1e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e9a:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <xTaskRemoveFromEventList+0xb0>)
    1e9c:	681b      	ldr	r3, [r3, #0]
    1e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ea0:	429a      	cmp	r2, r3
    1ea2:	d905      	bls.n	1eb0 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1ea4:	2301      	movs	r3, #1
    1ea6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1ea8:	4b0b      	ldr	r3, [pc, #44]	; (1ed8 <xTaskRemoveFromEventList+0xb4>)
    1eaa:	2201      	movs	r2, #1
    1eac:	601a      	str	r2, [r3, #0]
    1eae:	e001      	b.n	1eb4 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
    1eb4:	f000 f97e 	bl	21b4 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
    1eb8:	68fb      	ldr	r3, [r7, #12]
}
    1eba:	4618      	mov	r0, r3
    1ebc:	3710      	adds	r7, #16
    1ebe:	46bd      	mov	sp, r7
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	bf00      	nop
    1ec4:	1000647c 	.word	0x1000647c
    1ec8:	1000645c 	.word	0x1000645c
    1ecc:	100063ac 	.word	0x100063ac
    1ed0:	1000642c 	.word	0x1000642c
    1ed4:	100063a8 	.word	0x100063a8
    1ed8:	10006468 	.word	0x10006468

00001edc <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
    1ee6:	4b22      	ldr	r3, [pc, #136]	; (1f70 <xTaskRemoveFromUnorderedEventList+0x94>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d100      	bne.n	1ef0 <xTaskRemoveFromUnorderedEventList+0x14>
    1eee:	e7fe      	b.n	1eee <xTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1ef0:	683b      	ldr	r3, [r7, #0]
    1ef2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	68db      	ldr	r3, [r3, #12]
    1efe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1f00:	68bb      	ldr	r3, [r7, #8]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d100      	bne.n	1f08 <xTaskRemoveFromUnorderedEventList+0x2c>
    1f06:	e7fe      	b.n	1f06 <xTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
    1f08:	6878      	ldr	r0, [r7, #4]
    1f0a:	f7fe fef9 	bl	d00 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1f0e:	68bb      	ldr	r3, [r7, #8]
    1f10:	3304      	adds	r3, #4
    1f12:	4618      	mov	r0, r3
    1f14:	f7fe fef4 	bl	d00 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1f18:	68bb      	ldr	r3, [r7, #8]
    1f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f1c:	4b15      	ldr	r3, [pc, #84]	; (1f74 <xTaskRemoveFromUnorderedEventList+0x98>)
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	429a      	cmp	r2, r3
    1f22:	d903      	bls.n	1f2c <xTaskRemoveFromUnorderedEventList+0x50>
    1f24:	68bb      	ldr	r3, [r7, #8]
    1f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f28:	4a12      	ldr	r2, [pc, #72]	; (1f74 <xTaskRemoveFromUnorderedEventList+0x98>)
    1f2a:	6013      	str	r3, [r2, #0]
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f30:	4613      	mov	r3, r2
    1f32:	009b      	lsls	r3, r3, #2
    1f34:	4413      	add	r3, r2
    1f36:	009b      	lsls	r3, r3, #2
    1f38:	4a0f      	ldr	r2, [pc, #60]	; (1f78 <xTaskRemoveFromUnorderedEventList+0x9c>)
    1f3a:	441a      	add	r2, r3
    1f3c:	68bb      	ldr	r3, [r7, #8]
    1f3e:	3304      	adds	r3, #4
    1f40:	4619      	mov	r1, r3
    1f42:	4610      	mov	r0, r2
    1f44:	f7fe fe7f 	bl	c46 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1f48:	68bb      	ldr	r3, [r7, #8]
    1f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f4c:	4b0b      	ldr	r3, [pc, #44]	; (1f7c <xTaskRemoveFromUnorderedEventList+0xa0>)
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f52:	429a      	cmp	r2, r3
    1f54:	d905      	bls.n	1f62 <xTaskRemoveFromUnorderedEventList+0x86>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    1f56:	2301      	movs	r3, #1
    1f58:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1f5a:	4b09      	ldr	r3, [pc, #36]	; (1f80 <xTaskRemoveFromUnorderedEventList+0xa4>)
    1f5c:	2201      	movs	r2, #1
    1f5e:	601a      	str	r2, [r3, #0]
    1f60:	e001      	b.n	1f66 <xTaskRemoveFromUnorderedEventList+0x8a>
	}
	else
	{
		xReturn = pdFALSE;
    1f62:	2300      	movs	r3, #0
    1f64:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    1f66:	68fb      	ldr	r3, [r7, #12]
}
    1f68:	4618      	mov	r0, r3
    1f6a:	3710      	adds	r7, #16
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	1000647c 	.word	0x1000647c
    1f74:	1000645c 	.word	0x1000645c
    1f78:	100063ac 	.word	0x100063ac
    1f7c:	100063a8 	.word	0x100063a8
    1f80:	10006468 	.word	0x10006468

00001f84 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1f84:	b480      	push	{r7}
    1f86:	b083      	sub	sp, #12
    1f88:	af00      	add	r7, sp, #0
    1f8a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    1f8c:	687b      	ldr	r3, [r7, #4]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d100      	bne.n	1f94 <vTaskSetTimeOutState+0x10>
    1f92:	e7fe      	b.n	1f92 <vTaskSetTimeOutState+0xe>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1f94:	4b06      	ldr	r3, [pc, #24]	; (1fb0 <vTaskSetTimeOutState+0x2c>)
    1f96:	681a      	ldr	r2, [r3, #0]
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1f9c:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <vTaskSetTimeOutState+0x30>)
    1f9e:	681a      	ldr	r2, [r3, #0]
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	605a      	str	r2, [r3, #4]
}
    1fa4:	bf00      	nop
    1fa6:	370c      	adds	r7, #12
    1fa8:	46bd      	mov	sp, r7
    1faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fae:	4770      	bx	lr
    1fb0:	1000646c 	.word	0x1000646c
    1fb4:	10006458 	.word	0x10006458

00001fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1fb8:	b580      	push	{r7, lr}
    1fba:	b084      	sub	sp, #16
    1fbc:	af00      	add	r7, sp, #0
    1fbe:	6078      	str	r0, [r7, #4]
    1fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d100      	bne.n	1fca <xTaskCheckForTimeOut+0x12>
    1fc8:	e7fe      	b.n	1fc8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d100      	bne.n	1fd2 <xTaskCheckForTimeOut+0x1a>
    1fd0:	e7fe      	b.n	1fd0 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
    1fd2:	f7fe f9c7 	bl	364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1fd6:	4b1c      	ldr	r3, [pc, #112]	; (2048 <xTaskCheckForTimeOut+0x90>)
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    1fdc:	683b      	ldr	r3, [r7, #0]
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fe4:	d102      	bne.n	1fec <xTaskCheckForTimeOut+0x34>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    1fe6:	2300      	movs	r3, #0
    1fe8:	60fb      	str	r3, [r7, #12]
    1fea:	e026      	b.n	203a <xTaskCheckForTimeOut+0x82>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	681a      	ldr	r2, [r3, #0]
    1ff0:	4b16      	ldr	r3, [pc, #88]	; (204c <xTaskCheckForTimeOut+0x94>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	429a      	cmp	r2, r3
    1ff6:	d007      	beq.n	2008 <xTaskCheckForTimeOut+0x50>
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	685a      	ldr	r2, [r3, #4]
    1ffc:	68bb      	ldr	r3, [r7, #8]
    1ffe:	429a      	cmp	r2, r3
    2000:	d802      	bhi.n	2008 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    2002:	2301      	movs	r3, #1
    2004:	60fb      	str	r3, [r7, #12]
    2006:	e018      	b.n	203a <xTaskCheckForTimeOut+0x82>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	685b      	ldr	r3, [r3, #4]
    200c:	68ba      	ldr	r2, [r7, #8]
    200e:	1ad2      	subs	r2, r2, r3
    2010:	683b      	ldr	r3, [r7, #0]
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	429a      	cmp	r2, r3
    2016:	d20e      	bcs.n	2036 <xTaskCheckForTimeOut+0x7e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    2018:	683b      	ldr	r3, [r7, #0]
    201a:	681a      	ldr	r2, [r3, #0]
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	6859      	ldr	r1, [r3, #4]
    2020:	68bb      	ldr	r3, [r7, #8]
    2022:	1acb      	subs	r3, r1, r3
    2024:	441a      	add	r2, r3
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    202a:	6878      	ldr	r0, [r7, #4]
    202c:	f7ff ffaa 	bl	1f84 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2030:	2300      	movs	r3, #0
    2032:	60fb      	str	r3, [r7, #12]
    2034:	e001      	b.n	203a <xTaskCheckForTimeOut+0x82>
		}
		else
		{
			xReturn = pdTRUE;
    2036:	2301      	movs	r3, #1
    2038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    203a:	f7fe f9b9 	bl	3b0 <vPortExitCritical>

	return xReturn;
    203e:	68fb      	ldr	r3, [r7, #12]
}
    2040:	4618      	mov	r0, r3
    2042:	3710      	adds	r7, #16
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}
    2048:	10006458 	.word	0x10006458
    204c:	1000646c 	.word	0x1000646c

00002050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2050:	b480      	push	{r7}
    2052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    2054:	4b03      	ldr	r3, [pc, #12]	; (2064 <vTaskMissedYield+0x14>)
    2056:	2201      	movs	r2, #1
    2058:	601a      	str	r2, [r3, #0]
}
    205a:	bf00      	nop
    205c:	46bd      	mov	sp, r7
    205e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2062:	4770      	bx	lr
    2064:	10006468 	.word	0x10006468

00002068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
	
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    2070:	f000 f898 	bl	21a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2074:	4b13      	ldr	r3, [pc, #76]	; (20c4 <prvIdleTask+0x5c>)
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	2b01      	cmp	r3, #1
    207a:	d907      	bls.n	208c <prvIdleTask+0x24>
			{
				taskYIELD();
    207c:	4b12      	ldr	r3, [pc, #72]	; (20c8 <prvIdleTask+0x60>)
    207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2082:	601a      	str	r2, [r3, #0]
    2084:	f3bf 8f4f 	dsb	sy
    2088:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
    208c:	f7ff fc50 	bl	1930 <prvGetExpectedIdleTime>
    2090:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	2b01      	cmp	r3, #1
    2096:	d9eb      	bls.n	2070 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
    2098:	f7ff fc3c 	bl	1914 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    209c:	4b0b      	ldr	r3, [pc, #44]	; (20cc <prvIdleTask+0x64>)
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <prvIdleTask+0x68>)
    20a2:	681b      	ldr	r3, [r3, #0]
    20a4:	429a      	cmp	r2, r3
    20a6:	d200      	bcs.n	20aa <prvIdleTask+0x42>
    20a8:	e7fe      	b.n	20a8 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
    20aa:	f7ff fc41 	bl	1930 <prvGetExpectedIdleTime>
    20ae:	60f8      	str	r0, [r7, #12]

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    20b0:	68fb      	ldr	r3, [r7, #12]
    20b2:	2b01      	cmp	r3, #1
    20b4:	d902      	bls.n	20bc <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
    20b6:	68f8      	ldr	r0, [r7, #12]
    20b8:	f7fe fa1a 	bl	4f0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
    20bc:	f7ff fc70 	bl	19a0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
    20c0:	e7d6      	b.n	2070 <prvIdleTask+0x8>
    20c2:	bf00      	nop
    20c4:	100063ac 	.word	0x100063ac
    20c8:	e000ed04 	.word	0xe000ed04
    20cc:	10006474 	.word	0x10006474
    20d0:	10006458 	.word	0x10006458

000020d4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
    20da:	2301      	movs	r3, #1
    20dc:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
    20de:	2301      	movs	r3, #1
    20e0:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
    20e2:	4b0f      	ldr	r3, [pc, #60]	; (2120 <eTaskConfirmSleepModeStatus+0x4c>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d002      	beq.n	20f0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
    20ea:	2300      	movs	r3, #0
    20ec:	71fb      	strb	r3, [r7, #7]
    20ee:	e010      	b.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
    20f0:	4b0c      	ldr	r3, [pc, #48]	; (2124 <eTaskConfirmSleepModeStatus+0x50>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d002      	beq.n	20fe <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
    20f8:	2300      	movs	r3, #0
    20fa:	71fb      	strb	r3, [r7, #7]
    20fc:	e009      	b.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
    20fe:	4b0a      	ldr	r3, [pc, #40]	; (2128 <eTaskConfirmSleepModeStatus+0x54>)
    2100:	681a      	ldr	r2, [r3, #0]
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <eTaskConfirmSleepModeStatus+0x58>)
    2104:	6819      	ldr	r1, [r3, #0]
    2106:	683b      	ldr	r3, [r7, #0]
    2108:	1acb      	subs	r3, r1, r3
    210a:	429a      	cmp	r2, r3
    210c:	d101      	bne.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
    210e:	2302      	movs	r3, #2
    2110:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
    2112:	79fb      	ldrb	r3, [r7, #7]
	}
    2114:	4618      	mov	r0, r3
    2116:	370c      	adds	r7, #12
    2118:	46bd      	mov	sp, r7
    211a:	f85d 7b04 	ldr.w	r7, [sp], #4
    211e:	4770      	bx	lr
    2120:	1000642c 	.word	0x1000642c
    2124:	10006468 	.word	0x10006468
    2128:	10006440 	.word	0x10006440
    212c:	10006454 	.word	0x10006454

00002130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2136:	2300      	movs	r3, #0
    2138:	607b      	str	r3, [r7, #4]
    213a:	e00c      	b.n	2156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    213c:	687a      	ldr	r2, [r7, #4]
    213e:	4613      	mov	r3, r2
    2140:	009b      	lsls	r3, r3, #2
    2142:	4413      	add	r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	4a10      	ldr	r2, [pc, #64]	; (2188 <prvInitialiseTaskLists+0x58>)
    2148:	4413      	add	r3, r2
    214a:	4618      	mov	r0, r3
    214c:	f7fe fd4e 	bl	bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	3301      	adds	r3, #1
    2154:	607b      	str	r3, [r7, #4]
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	2b03      	cmp	r3, #3
    215a:	d9ef      	bls.n	213c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    215c:	480b      	ldr	r0, [pc, #44]	; (218c <prvInitialiseTaskLists+0x5c>)
    215e:	f7fe fd45 	bl	bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    2162:	480b      	ldr	r0, [pc, #44]	; (2190 <prvInitialiseTaskLists+0x60>)
    2164:	f7fe fd42 	bl	bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
    2168:	480a      	ldr	r0, [pc, #40]	; (2194 <prvInitialiseTaskLists+0x64>)
    216a:	f7fe fd3f 	bl	bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    216e:	480a      	ldr	r0, [pc, #40]	; (2198 <prvInitialiseTaskLists+0x68>)
    2170:	f7fe fd3c 	bl	bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2174:	4b09      	ldr	r3, [pc, #36]	; (219c <prvInitialiseTaskLists+0x6c>)
    2176:	4a05      	ldr	r2, [pc, #20]	; (218c <prvInitialiseTaskLists+0x5c>)
    2178:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    217a:	4b09      	ldr	r3, [pc, #36]	; (21a0 <prvInitialiseTaskLists+0x70>)
    217c:	4a04      	ldr	r2, [pc, #16]	; (2190 <prvInitialiseTaskLists+0x60>)
    217e:	601a      	str	r2, [r3, #0]
}
    2180:	bf00      	nop
    2182:	3708      	adds	r7, #8
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	100063ac 	.word	0x100063ac
    218c:	100063fc 	.word	0x100063fc
    2190:	10006410 	.word	0x10006410
    2194:	1000642c 	.word	0x1000642c
    2198:	10006440 	.word	0x10006440
    219c:	10006424 	.word	0x10006424
    21a0:	10006428 	.word	0x10006428

000021a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    21a4:	b480      	push	{r7}
    21a6:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    21a8:	bf00      	nop
    21aa:	46bd      	mov	sp, r7
    21ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b0:	4770      	bx	lr
	...

000021b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    21b4:	b480      	push	{r7}
    21b6:	b083      	sub	sp, #12
    21b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    21ba:	4b0f      	ldr	r3, [pc, #60]	; (21f8 <prvResetNextTaskUnblockTime+0x44>)
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d101      	bne.n	21c8 <prvResetNextTaskUnblockTime+0x14>
    21c4:	2301      	movs	r3, #1
    21c6:	e000      	b.n	21ca <prvResetNextTaskUnblockTime+0x16>
    21c8:	2300      	movs	r3, #0
    21ca:	2b00      	cmp	r3, #0
    21cc:	d004      	beq.n	21d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    21ce:	4b0b      	ldr	r3, [pc, #44]	; (21fc <prvResetNextTaskUnblockTime+0x48>)
    21d0:	f04f 32ff 	mov.w	r2, #4294967295
    21d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    21d6:	e008      	b.n	21ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    21d8:	4b07      	ldr	r3, [pc, #28]	; (21f8 <prvResetNextTaskUnblockTime+0x44>)
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	68db      	ldr	r3, [r3, #12]
    21de:	68db      	ldr	r3, [r3, #12]
    21e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	685b      	ldr	r3, [r3, #4]
    21e6:	4a05      	ldr	r2, [pc, #20]	; (21fc <prvResetNextTaskUnblockTime+0x48>)
    21e8:	6013      	str	r3, [r2, #0]
}
    21ea:	bf00      	nop
    21ec:	370c      	adds	r7, #12
    21ee:	46bd      	mov	sp, r7
    21f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop
    21f8:	10006424 	.word	0x10006424
    21fc:	10006474 	.word	0x10006474

00002200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    2200:	b480      	push	{r7}
    2202:	b083      	sub	sp, #12
    2204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2206:	4b0b      	ldr	r3, [pc, #44]	; (2234 <xTaskGetSchedulerState+0x34>)
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d102      	bne.n	2214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    220e:	2301      	movs	r3, #1
    2210:	607b      	str	r3, [r7, #4]
    2212:	e008      	b.n	2226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2214:	4b08      	ldr	r3, [pc, #32]	; (2238 <xTaskGetSchedulerState+0x38>)
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d102      	bne.n	2222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    221c:	2302      	movs	r3, #2
    221e:	607b      	str	r3, [r7, #4]
    2220:	e001      	b.n	2226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2222:	2300      	movs	r3, #0
    2224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    2226:	687b      	ldr	r3, [r7, #4]
	}
    2228:	4618      	mov	r0, r3
    222a:	370c      	adds	r7, #12
    222c:	46bd      	mov	sp, r7
    222e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2232:	4770      	bx	lr
    2234:	10006460 	.word	0x10006460
    2238:	1000647c 	.word	0x1000647c

0000223c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    223c:	b480      	push	{r7}
    223e:	b083      	sub	sp, #12
    2240:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2242:	4b09      	ldr	r3, [pc, #36]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	699b      	ldr	r3, [r3, #24]
    2248:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    224a:	4b07      	ldr	r3, [pc, #28]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	4a06      	ldr	r2, [pc, #24]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    2250:	6812      	ldr	r2, [r2, #0]
    2252:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2254:	f1c2 0204 	rsb	r2, r2, #4
    2258:	619a      	str	r2, [r3, #24]

	return uxReturn;
    225a:	687b      	ldr	r3, [r7, #4]
}
    225c:	4618      	mov	r0, r3
    225e:	370c      	adds	r7, #12
    2260:	46bd      	mov	sp, r7
    2262:	f85d 7b04 	ldr.w	r7, [sp], #4
    2266:	4770      	bx	lr
    2268:	100063a8 	.word	0x100063a8

0000226c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
    2274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2276:	4b21      	ldr	r3, [pc, #132]	; (22fc <prvAddCurrentTaskToDelayedList+0x90>)
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    227c:	4b20      	ldr	r3, [pc, #128]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	3304      	adds	r3, #4
    2282:	4618      	mov	r0, r3
    2284:	f7fe fd3c 	bl	d00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	f1b3 3fff 	cmp.w	r3, #4294967295
    228e:	d10a      	bne.n	22a6 <prvAddCurrentTaskToDelayedList+0x3a>
    2290:	683b      	ldr	r3, [r7, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d007      	beq.n	22a6 <prvAddCurrentTaskToDelayedList+0x3a>
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		  //GEO: addition for support of SystemView Profiler
		  traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
		  //GEO: end addition
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2296:	4b1a      	ldr	r3, [pc, #104]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	3304      	adds	r3, #4
    229c:	4619      	mov	r1, r3
    229e:	4819      	ldr	r0, [pc, #100]	; (2304 <prvAddCurrentTaskToDelayedList+0x98>)
    22a0:	f7fe fcd1 	bl	c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    22a4:	e026      	b.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    22a6:	68fa      	ldr	r2, [r7, #12]
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	4413      	add	r3, r2
    22ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    22ae:	4b14      	ldr	r3, [pc, #80]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	68ba      	ldr	r2, [r7, #8]
    22b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    22b6:	68ba      	ldr	r2, [r7, #8]
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	429a      	cmp	r2, r3
    22bc:	d209      	bcs.n	22d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    22be:	4b12      	ldr	r3, [pc, #72]	; (2308 <prvAddCurrentTaskToDelayedList+0x9c>)
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	4b0f      	ldr	r3, [pc, #60]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	3304      	adds	r3, #4
    22c8:	4619      	mov	r1, r3
    22ca:	4610      	mov	r0, r2
    22cc:	f7fe fcdf 	bl	c8e <vListInsert>
}
    22d0:	e010      	b.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    22d2:	4b0e      	ldr	r3, [pc, #56]	; (230c <prvAddCurrentTaskToDelayedList+0xa0>)
    22d4:	681a      	ldr	r2, [r3, #0]
    22d6:	4b0a      	ldr	r3, [pc, #40]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22d8:	681b      	ldr	r3, [r3, #0]
    22da:	3304      	adds	r3, #4
    22dc:	4619      	mov	r1, r3
    22de:	4610      	mov	r0, r2
    22e0:	f7fe fcd5 	bl	c8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    22e4:	4b0a      	ldr	r3, [pc, #40]	; (2310 <prvAddCurrentTaskToDelayedList+0xa4>)
    22e6:	681b      	ldr	r3, [r3, #0]
    22e8:	68ba      	ldr	r2, [r7, #8]
    22ea:	429a      	cmp	r2, r3
    22ec:	d202      	bcs.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    22ee:	4a08      	ldr	r2, [pc, #32]	; (2310 <prvAddCurrentTaskToDelayedList+0xa4>)
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	6013      	str	r3, [r2, #0]
}
    22f4:	bf00      	nop
    22f6:	3710      	adds	r7, #16
    22f8:	46bd      	mov	sp, r7
    22fa:	bd80      	pop	{r7, pc}
    22fc:	10006458 	.word	0x10006458
    2300:	100063a8 	.word	0x100063a8
    2304:	10006440 	.word	0x10006440
    2308:	10006428 	.word	0x10006428
    230c:	10006424 	.word	0x10006424
    2310:	10006474 	.word	0x10006474

00002314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2314:	b580      	push	{r7, lr}
    2316:	b084      	sub	sp, #16
    2318:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    231a:	2300      	movs	r3, #0
    231c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    231e:	f000 fa6b 	bl	27f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    2322:	4b0c      	ldr	r3, [pc, #48]	; (2354 <xTimerCreateTimerTask+0x40>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d00b      	beq.n	2342 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    232a:	4b0b      	ldr	r3, [pc, #44]	; (2358 <xTimerCreateTimerTask+0x44>)
    232c:	9301      	str	r3, [sp, #4]
    232e:	2303      	movs	r3, #3
    2330:	9300      	str	r3, [sp, #0]
    2332:	2300      	movs	r3, #0
    2334:	f44f 7280 	mov.w	r2, #256	; 0x100
    2338:	4908      	ldr	r1, [pc, #32]	; (235c <xTimerCreateTimerTask+0x48>)
    233a:	4809      	ldr	r0, [pc, #36]	; (2360 <xTimerCreateTimerTask+0x4c>)
    233c:	f7ff f920 	bl	1580 <xTaskCreate>
    2340:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	2b00      	cmp	r3, #0
    2346:	d100      	bne.n	234a <xTimerCreateTimerTask+0x36>
    2348:	e7fe      	b.n	2348 <xTimerCreateTimerTask+0x34>
	return xReturn;
    234a:	687b      	ldr	r3, [r7, #4]
}
    234c:	4618      	mov	r0, r3
    234e:	3708      	adds	r7, #8
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	100064b0 	.word	0x100064b0
    2358:	100064b4 	.word	0x100064b4
    235c:	00004ef8 	.word	0x00004ef8
    2360:	00002459 	.word	0x00002459

00002364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2364:	b580      	push	{r7, lr}
    2366:	b08a      	sub	sp, #40	; 0x28
    2368:	af00      	add	r7, sp, #0
    236a:	60f8      	str	r0, [r7, #12]
    236c:	60b9      	str	r1, [r7, #8]
    236e:	607a      	str	r2, [r7, #4]
    2370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2372:	2300      	movs	r3, #0
    2374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	2b00      	cmp	r3, #0
    237a:	d100      	bne.n	237e <xTimerGenericCommand+0x1a>
    237c:	e7fe      	b.n	237c <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    237e:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <xTimerGenericCommand+0x84>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	2b00      	cmp	r3, #0
    2384:	d02a      	beq.n	23dc <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2386:	68bb      	ldr	r3, [r7, #8]
    2388:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2392:	68bb      	ldr	r3, [r7, #8]
    2394:	2b05      	cmp	r3, #5
    2396:	dc18      	bgt.n	23ca <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2398:	f7ff ff32 	bl	2200 <xTaskGetSchedulerState>
    239c:	4603      	mov	r3, r0
    239e:	2b02      	cmp	r3, #2
    23a0:	d109      	bne.n	23b6 <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    23a2:	4b11      	ldr	r3, [pc, #68]	; (23e8 <xTimerGenericCommand+0x84>)
    23a4:	6818      	ldr	r0, [r3, #0]
    23a6:	f107 0114 	add.w	r1, r7, #20
    23aa:	2300      	movs	r3, #0
    23ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    23ae:	f7fe fd7f 	bl	eb0 <xQueueGenericSend>
    23b2:	6278      	str	r0, [r7, #36]	; 0x24
    23b4:	e012      	b.n	23dc <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    23b6:	4b0c      	ldr	r3, [pc, #48]	; (23e8 <xTimerGenericCommand+0x84>)
    23b8:	6818      	ldr	r0, [r3, #0]
    23ba:	f107 0114 	add.w	r1, r7, #20
    23be:	2300      	movs	r3, #0
    23c0:	2200      	movs	r2, #0
    23c2:	f7fe fd75 	bl	eb0 <xQueueGenericSend>
    23c6:	6278      	str	r0, [r7, #36]	; 0x24
    23c8:	e008      	b.n	23dc <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    23ca:	4b07      	ldr	r3, [pc, #28]	; (23e8 <xTimerGenericCommand+0x84>)
    23cc:	6818      	ldr	r0, [r3, #0]
    23ce:	f107 0114 	add.w	r1, r7, #20
    23d2:	2300      	movs	r3, #0
    23d4:	683a      	ldr	r2, [r7, #0]
    23d6:	f7fe fe41 	bl	105c <xQueueGenericSendFromISR>
    23da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    23dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    23de:	4618      	mov	r0, r3
    23e0:	3728      	adds	r7, #40	; 0x28
    23e2:	46bd      	mov	sp, r7
    23e4:	bd80      	pop	{r7, pc}
    23e6:	bf00      	nop
    23e8:	100064b0 	.word	0x100064b0

000023ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af02      	add	r7, sp, #8
    23f2:	6078      	str	r0, [r7, #4]
    23f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    23f6:	4b17      	ldr	r3, [pc, #92]	; (2454 <prvProcessExpiredTimer+0x68>)
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	68db      	ldr	r3, [r3, #12]
    23fc:	68db      	ldr	r3, [r3, #12]
    23fe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	3304      	adds	r3, #4
    2404:	4618      	mov	r0, r3
    2406:	f7fe fc7b 	bl	d00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	69db      	ldr	r3, [r3, #28]
    240e:	2b01      	cmp	r3, #1
    2410:	d118      	bne.n	2444 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	699a      	ldr	r2, [r3, #24]
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	18d1      	adds	r1, r2, r3
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	683a      	ldr	r2, [r7, #0]
    241e:	68f8      	ldr	r0, [r7, #12]
    2420:	f000 f8be 	bl	25a0 <prvInsertTimerInActiveList>
    2424:	4603      	mov	r3, r0
    2426:	2b00      	cmp	r3, #0
    2428:	d00c      	beq.n	2444 <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    242a:	2300      	movs	r3, #0
    242c:	9300      	str	r3, [sp, #0]
    242e:	2300      	movs	r3, #0
    2430:	687a      	ldr	r2, [r7, #4]
    2432:	2100      	movs	r1, #0
    2434:	68f8      	ldr	r0, [r7, #12]
    2436:	f7ff ff95 	bl	2364 <xTimerGenericCommand>
    243a:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
    243c:	68bb      	ldr	r3, [r7, #8]
    243e:	2b00      	cmp	r3, #0
    2440:	d100      	bne.n	2444 <prvProcessExpiredTimer+0x58>
    2442:	e7fe      	b.n	2442 <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2448:	68f8      	ldr	r0, [r7, #12]
    244a:	4798      	blx	r3
}
    244c:	bf00      	nop
    244e:	3710      	adds	r7, #16
    2450:	46bd      	mov	sp, r7
    2452:	bd80      	pop	{r7, pc}
    2454:	100064a8 	.word	0x100064a8

00002458 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2458:	b580      	push	{r7, lr}
    245a:	b084      	sub	sp, #16
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2460:	f107 0308 	add.w	r3, r7, #8
    2464:	4618      	mov	r0, r3
    2466:	f000 f857 	bl	2518 <prvGetNextExpireTime>
    246a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    246c:	68bb      	ldr	r3, [r7, #8]
    246e:	4619      	mov	r1, r3
    2470:	68f8      	ldr	r0, [r7, #12]
    2472:	f000 f803 	bl	247c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2476:	f000 f8d5 	bl	2624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    247a:	e7f1      	b.n	2460 <prvTimerTask+0x8>

0000247c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    247c:	b580      	push	{r7, lr}
    247e:	b084      	sub	sp, #16
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2486:	f7ff fa45 	bl	1914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    248a:	f107 0308 	add.w	r3, r7, #8
    248e:	4618      	mov	r0, r3
    2490:	f000 f866 	bl	2560 <prvSampleTimeNow>
    2494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    2496:	68bb      	ldr	r3, [r7, #8]
    2498:	2b00      	cmp	r3, #0
    249a:	d130      	bne.n	24fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    249c:	683b      	ldr	r3, [r7, #0]
    249e:	2b00      	cmp	r3, #0
    24a0:	d10a      	bne.n	24b8 <prvProcessTimerOrBlockTask+0x3c>
    24a2:	687a      	ldr	r2, [r7, #4]
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	429a      	cmp	r2, r3
    24a8:	d806      	bhi.n	24b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    24aa:	f7ff fa79 	bl	19a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    24ae:	68f9      	ldr	r1, [r7, #12]
    24b0:	6878      	ldr	r0, [r7, #4]
    24b2:	f7ff ff9b 	bl	23ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    24b6:	e024      	b.n	2502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    24b8:	683b      	ldr	r3, [r7, #0]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d008      	beq.n	24d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    24be:	4b13      	ldr	r3, [pc, #76]	; (250c <prvProcessTimerOrBlockTask+0x90>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	681b      	ldr	r3, [r3, #0]
    24c4:	2b00      	cmp	r3, #0
    24c6:	bf0c      	ite	eq
    24c8:	2301      	moveq	r3, #1
    24ca:	2300      	movne	r3, #0
    24cc:	b2db      	uxtb	r3, r3
    24ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    24d0:	4b0f      	ldr	r3, [pc, #60]	; (2510 <prvProcessTimerOrBlockTask+0x94>)
    24d2:	6818      	ldr	r0, [r3, #0]
    24d4:	687a      	ldr	r2, [r7, #4]
    24d6:	68fb      	ldr	r3, [r7, #12]
    24d8:	1ad3      	subs	r3, r2, r3
    24da:	683a      	ldr	r2, [r7, #0]
    24dc:	4619      	mov	r1, r3
    24de:	f7ff f81b 	bl	1518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    24e2:	f7ff fa5d 	bl	19a0 <xTaskResumeAll>
    24e6:	4603      	mov	r3, r0
    24e8:	2b00      	cmp	r3, #0
    24ea:	d10a      	bne.n	2502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    24ec:	4b09      	ldr	r3, [pc, #36]	; (2514 <prvProcessTimerOrBlockTask+0x98>)
    24ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    24f2:	601a      	str	r2, [r3, #0]
    24f4:	f3bf 8f4f 	dsb	sy
    24f8:	f3bf 8f6f 	isb	sy
}
    24fc:	e001      	b.n	2502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    24fe:	f7ff fa4f 	bl	19a0 <xTaskResumeAll>
}
    2502:	bf00      	nop
    2504:	3710      	adds	r7, #16
    2506:	46bd      	mov	sp, r7
    2508:	bd80      	pop	{r7, pc}
    250a:	bf00      	nop
    250c:	100064ac 	.word	0x100064ac
    2510:	100064b0 	.word	0x100064b0
    2514:	e000ed04 	.word	0xe000ed04

00002518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    2518:	b480      	push	{r7}
    251a:	b085      	sub	sp, #20
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2520:	4b0e      	ldr	r3, [pc, #56]	; (255c <prvGetNextExpireTime+0x44>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	2b00      	cmp	r3, #0
    2528:	bf0c      	ite	eq
    252a:	2301      	moveq	r3, #1
    252c:	2300      	movne	r3, #0
    252e:	b2db      	uxtb	r3, r3
    2530:	461a      	mov	r2, r3
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	2b00      	cmp	r3, #0
    253c:	d105      	bne.n	254a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <prvGetNextExpireTime+0x44>)
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	68db      	ldr	r3, [r3, #12]
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	60fb      	str	r3, [r7, #12]
    2548:	e001      	b.n	254e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    254a:	2300      	movs	r3, #0
    254c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    254e:	68fb      	ldr	r3, [r7, #12]
}
    2550:	4618      	mov	r0, r3
    2552:	3714      	adds	r7, #20
    2554:	46bd      	mov	sp, r7
    2556:	f85d 7b04 	ldr.w	r7, [sp], #4
    255a:	4770      	bx	lr
    255c:	100064a8 	.word	0x100064a8

00002560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2560:	b580      	push	{r7, lr}
    2562:	b084      	sub	sp, #16
    2564:	af00      	add	r7, sp, #0
    2566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2568:	f7ff faae 	bl	1ac8 <xTaskGetTickCount>
    256c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    256e:	4b0b      	ldr	r3, [pc, #44]	; (259c <prvSampleTimeNow+0x3c>)
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	68fa      	ldr	r2, [r7, #12]
    2574:	429a      	cmp	r2, r3
    2576:	d205      	bcs.n	2584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    2578:	f000 f8e6 	bl	2748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	2201      	movs	r2, #1
    2580:	601a      	str	r2, [r3, #0]
    2582:	e002      	b.n	258a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	2200      	movs	r2, #0
    2588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    258a:	4a04      	ldr	r2, [pc, #16]	; (259c <prvSampleTimeNow+0x3c>)
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    2590:	68fb      	ldr	r3, [r7, #12]
}
    2592:	4618      	mov	r0, r3
    2594:	3710      	adds	r7, #16
    2596:	46bd      	mov	sp, r7
    2598:	bd80      	pop	{r7, pc}
    259a:	bf00      	nop
    259c:	100064b8 	.word	0x100064b8

000025a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b086      	sub	sp, #24
    25a4:	af00      	add	r7, sp, #0
    25a6:	60f8      	str	r0, [r7, #12]
    25a8:	60b9      	str	r1, [r7, #8]
    25aa:	607a      	str	r2, [r7, #4]
    25ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    25ae:	2300      	movs	r3, #0
    25b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	68ba      	ldr	r2, [r7, #8]
    25b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	68fa      	ldr	r2, [r7, #12]
    25bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    25be:	68ba      	ldr	r2, [r7, #8]
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	429a      	cmp	r2, r3
    25c4:	d812      	bhi.n	25ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25c6:	687a      	ldr	r2, [r7, #4]
    25c8:	683b      	ldr	r3, [r7, #0]
    25ca:	1ad2      	subs	r2, r2, r3
    25cc:	68fb      	ldr	r3, [r7, #12]
    25ce:	699b      	ldr	r3, [r3, #24]
    25d0:	429a      	cmp	r2, r3
    25d2:	d302      	bcc.n	25da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    25d4:	2301      	movs	r3, #1
    25d6:	617b      	str	r3, [r7, #20]
    25d8:	e01b      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    25da:	4b10      	ldr	r3, [pc, #64]	; (261c <prvInsertTimerInActiveList+0x7c>)
    25dc:	681a      	ldr	r2, [r3, #0]
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	3304      	adds	r3, #4
    25e2:	4619      	mov	r1, r3
    25e4:	4610      	mov	r0, r2
    25e6:	f7fe fb52 	bl	c8e <vListInsert>
    25ea:	e012      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    25ec:	687a      	ldr	r2, [r7, #4]
    25ee:	683b      	ldr	r3, [r7, #0]
    25f0:	429a      	cmp	r2, r3
    25f2:	d206      	bcs.n	2602 <prvInsertTimerInActiveList+0x62>
    25f4:	68ba      	ldr	r2, [r7, #8]
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	429a      	cmp	r2, r3
    25fa:	d302      	bcc.n	2602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    25fc:	2301      	movs	r3, #1
    25fe:	617b      	str	r3, [r7, #20]
    2600:	e007      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <prvInsertTimerInActiveList+0x80>)
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	3304      	adds	r3, #4
    260a:	4619      	mov	r1, r3
    260c:	4610      	mov	r0, r2
    260e:	f7fe fb3e 	bl	c8e <vListInsert>
		}
	}

	return xProcessTimerNow;
    2612:	697b      	ldr	r3, [r7, #20]
}
    2614:	4618      	mov	r0, r3
    2616:	3718      	adds	r7, #24
    2618:	46bd      	mov	sp, r7
    261a:	bd80      	pop	{r7, pc}
    261c:	100064ac 	.word	0x100064ac
    2620:	100064a8 	.word	0x100064a8

00002624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    2624:	b580      	push	{r7, lr}
    2626:	b08c      	sub	sp, #48	; 0x30
    2628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    262a:	e07a      	b.n	2722 <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    262c:	68bb      	ldr	r3, [r7, #8]
    262e:	2b00      	cmp	r3, #0
    2630:	da0f      	bge.n	2652 <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    2632:	f107 0308 	add.w	r3, r7, #8
    2636:	3304      	adds	r3, #4
    2638:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    263c:	2b00      	cmp	r3, #0
    263e:	d100      	bne.n	2642 <prvProcessReceivedCommands+0x1e>
    2640:	e7fe      	b.n	2640 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    2642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2648:	6850      	ldr	r0, [r2, #4]
    264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    264c:	6892      	ldr	r2, [r2, #8]
    264e:	4611      	mov	r1, r2
    2650:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	2b00      	cmp	r3, #0
    2656:	db64      	blt.n	2722 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2658:	693b      	ldr	r3, [r7, #16]
    265a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    265c:	6a3b      	ldr	r3, [r7, #32]
    265e:	695b      	ldr	r3, [r3, #20]
    2660:	2b00      	cmp	r3, #0
    2662:	d004      	beq.n	266e <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2664:	6a3b      	ldr	r3, [r7, #32]
    2666:	3304      	adds	r3, #4
    2668:	4618      	mov	r0, r3
    266a:	f7fe fb49 	bl	d00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    266e:	1d3b      	adds	r3, r7, #4
    2670:	4618      	mov	r0, r3
    2672:	f7ff ff75 	bl	2560 <prvSampleTimeNow>
    2676:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
    2678:	68bb      	ldr	r3, [r7, #8]
    267a:	2b09      	cmp	r3, #9
    267c:	d850      	bhi.n	2720 <prvProcessReceivedCommands+0xfc>
    267e:	a201      	add	r2, pc, #4	; (adr r2, 2684 <prvProcessReceivedCommands+0x60>)
    2680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2684:	000026ad 	.word	0x000026ad
    2688:	000026ad 	.word	0x000026ad
    268c:	000026ad 	.word	0x000026ad
    2690:	00002723 	.word	0x00002723
    2694:	000026f5 	.word	0x000026f5
    2698:	00002719 	.word	0x00002719
    269c:	000026ad 	.word	0x000026ad
    26a0:	000026ad 	.word	0x000026ad
    26a4:	00002723 	.word	0x00002723
    26a8:	000026f5 	.word	0x000026f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    26ac:	68fa      	ldr	r2, [r7, #12]
    26ae:	6a3b      	ldr	r3, [r7, #32]
    26b0:	699b      	ldr	r3, [r3, #24]
    26b2:	18d1      	adds	r1, r2, r3
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	69fa      	ldr	r2, [r7, #28]
    26b8:	6a38      	ldr	r0, [r7, #32]
    26ba:	f7ff ff71 	bl	25a0 <prvInsertTimerInActiveList>
    26be:	4603      	mov	r3, r0
    26c0:	2b00      	cmp	r3, #0
    26c2:	d02e      	beq.n	2722 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26c4:	6a3b      	ldr	r3, [r7, #32]
    26c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26c8:	6a38      	ldr	r0, [r7, #32]
    26ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    26cc:	6a3b      	ldr	r3, [r7, #32]
    26ce:	69db      	ldr	r3, [r3, #28]
    26d0:	2b01      	cmp	r3, #1
    26d2:	d126      	bne.n	2722 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    26d4:	68fa      	ldr	r2, [r7, #12]
    26d6:	6a3b      	ldr	r3, [r7, #32]
    26d8:	699b      	ldr	r3, [r3, #24]
    26da:	441a      	add	r2, r3
    26dc:	2300      	movs	r3, #0
    26de:	9300      	str	r3, [sp, #0]
    26e0:	2300      	movs	r3, #0
    26e2:	2100      	movs	r1, #0
    26e4:	6a38      	ldr	r0, [r7, #32]
    26e6:	f7ff fe3d 	bl	2364 <xTimerGenericCommand>
    26ea:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
    26ec:	69bb      	ldr	r3, [r7, #24]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d117      	bne.n	2722 <prvProcessReceivedCommands+0xfe>
    26f2:	e7fe      	b.n	26f2 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    26f4:	68fa      	ldr	r2, [r7, #12]
    26f6:	6a3b      	ldr	r3, [r7, #32]
    26f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    26fa:	6a3b      	ldr	r3, [r7, #32]
    26fc:	699b      	ldr	r3, [r3, #24]
    26fe:	2b00      	cmp	r3, #0
    2700:	d100      	bne.n	2704 <prvProcessReceivedCommands+0xe0>
    2702:	e7fe      	b.n	2702 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2704:	6a3b      	ldr	r3, [r7, #32]
    2706:	699a      	ldr	r2, [r3, #24]
    2708:	69fb      	ldr	r3, [r7, #28]
    270a:	18d1      	adds	r1, r2, r3
    270c:	69fb      	ldr	r3, [r7, #28]
    270e:	69fa      	ldr	r2, [r7, #28]
    2710:	6a38      	ldr	r0, [r7, #32]
    2712:	f7ff ff45 	bl	25a0 <prvInsertTimerInActiveList>
					break;
    2716:	e004      	b.n	2722 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    2718:	6a38      	ldr	r0, [r7, #32]
    271a:	f7fe f8a1 	bl	860 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    271e:	e000      	b.n	2722 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
    2720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2722:	4b08      	ldr	r3, [pc, #32]	; (2744 <prvProcessReceivedCommands+0x120>)
    2724:	6818      	ldr	r0, [r3, #0]
    2726:	f107 0108 	add.w	r1, r7, #8
    272a:	2300      	movs	r3, #0
    272c:	2200      	movs	r2, #0
    272e:	f7fe fd0f 	bl	1150 <xQueueGenericReceive>
    2732:	4603      	mov	r3, r0
    2734:	2b00      	cmp	r3, #0
    2736:	f47f af79 	bne.w	262c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    273a:	bf00      	nop
    273c:	3728      	adds	r7, #40	; 0x28
    273e:	46bd      	mov	sp, r7
    2740:	bd80      	pop	{r7, pc}
    2742:	bf00      	nop
    2744:	100064b0 	.word	0x100064b0

00002748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    2748:	b580      	push	{r7, lr}
    274a:	b088      	sub	sp, #32
    274c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    274e:	e03b      	b.n	27c8 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2750:	4b27      	ldr	r3, [pc, #156]	; (27f0 <prvSwitchTimerLists+0xa8>)
    2752:	681b      	ldr	r3, [r3, #0]
    2754:	68db      	ldr	r3, [r3, #12]
    2756:	681b      	ldr	r3, [r3, #0]
    2758:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    275a:	4b25      	ldr	r3, [pc, #148]	; (27f0 <prvSwitchTimerLists+0xa8>)
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	68db      	ldr	r3, [r3, #12]
    2760:	68db      	ldr	r3, [r3, #12]
    2762:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2764:	693b      	ldr	r3, [r7, #16]
    2766:	3304      	adds	r3, #4
    2768:	4618      	mov	r0, r3
    276a:	f7fe fac9 	bl	d00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    276e:	693b      	ldr	r3, [r7, #16]
    2770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2772:	6938      	ldr	r0, [r7, #16]
    2774:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2776:	693b      	ldr	r3, [r7, #16]
    2778:	69db      	ldr	r3, [r3, #28]
    277a:	2b01      	cmp	r3, #1
    277c:	d124      	bne.n	27c8 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    277e:	693b      	ldr	r3, [r7, #16]
    2780:	699a      	ldr	r2, [r3, #24]
    2782:	697b      	ldr	r3, [r7, #20]
    2784:	4413      	add	r3, r2
    2786:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    2788:	68fa      	ldr	r2, [r7, #12]
    278a:	697b      	ldr	r3, [r7, #20]
    278c:	429a      	cmp	r2, r3
    278e:	d90e      	bls.n	27ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2790:	693b      	ldr	r3, [r7, #16]
    2792:	68fa      	ldr	r2, [r7, #12]
    2794:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2796:	693b      	ldr	r3, [r7, #16]
    2798:	693a      	ldr	r2, [r7, #16]
    279a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    279c:	4b14      	ldr	r3, [pc, #80]	; (27f0 <prvSwitchTimerLists+0xa8>)
    279e:	681a      	ldr	r2, [r3, #0]
    27a0:	693b      	ldr	r3, [r7, #16]
    27a2:	3304      	adds	r3, #4
    27a4:	4619      	mov	r1, r3
    27a6:	4610      	mov	r0, r2
    27a8:	f7fe fa71 	bl	c8e <vListInsert>
    27ac:	e00c      	b.n	27c8 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    27ae:	2300      	movs	r3, #0
    27b0:	9300      	str	r3, [sp, #0]
    27b2:	2300      	movs	r3, #0
    27b4:	697a      	ldr	r2, [r7, #20]
    27b6:	2100      	movs	r1, #0
    27b8:	6938      	ldr	r0, [r7, #16]
    27ba:	f7ff fdd3 	bl	2364 <xTimerGenericCommand>
    27be:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
    27c0:	68bb      	ldr	r3, [r7, #8]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d100      	bne.n	27c8 <prvSwitchTimerLists+0x80>
    27c6:	e7fe      	b.n	27c6 <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    27c8:	4b09      	ldr	r3, [pc, #36]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27ca:	681b      	ldr	r3, [r3, #0]
    27cc:	681b      	ldr	r3, [r3, #0]
    27ce:	2b00      	cmp	r3, #0
    27d0:	d1be      	bne.n	2750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    27d2:	4b07      	ldr	r3, [pc, #28]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    27d8:	4b06      	ldr	r3, [pc, #24]	; (27f4 <prvSwitchTimerLists+0xac>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	4a04      	ldr	r2, [pc, #16]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    27e0:	4a04      	ldr	r2, [pc, #16]	; (27f4 <prvSwitchTimerLists+0xac>)
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	6013      	str	r3, [r2, #0]
}
    27e6:	bf00      	nop
    27e8:	3718      	adds	r7, #24
    27ea:	46bd      	mov	sp, r7
    27ec:	bd80      	pop	{r7, pc}
    27ee:	bf00      	nop
    27f0:	100064a8 	.word	0x100064a8
    27f4:	100064ac 	.word	0x100064ac

000027f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    27f8:	b580      	push	{r7, lr}
    27fa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    27fc:	f7fd fdb2 	bl	364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <prvCheckForValidListAndQueue+0x40>)
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	2b00      	cmp	r3, #0
    2806:	d113      	bne.n	2830 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
    2808:	480c      	ldr	r0, [pc, #48]	; (283c <prvCheckForValidListAndQueue+0x44>)
    280a:	f7fe f9ef 	bl	bec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    280e:	480c      	ldr	r0, [pc, #48]	; (2840 <prvCheckForValidListAndQueue+0x48>)
    2810:	f7fe f9ec 	bl	bec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2814:	4b0b      	ldr	r3, [pc, #44]	; (2844 <prvCheckForValidListAndQueue+0x4c>)
    2816:	4a09      	ldr	r2, [pc, #36]	; (283c <prvCheckForValidListAndQueue+0x44>)
    2818:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    281a:	4b0b      	ldr	r3, [pc, #44]	; (2848 <prvCheckForValidListAndQueue+0x50>)
    281c:	4a08      	ldr	r2, [pc, #32]	; (2840 <prvCheckForValidListAndQueue+0x48>)
    281e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2820:	2200      	movs	r2, #0
    2822:	2110      	movs	r1, #16
    2824:	2005      	movs	r0, #5
    2826:	f7fe faf3 	bl	e10 <xQueueGenericCreate>
    282a:	4602      	mov	r2, r0
    282c:	4b02      	ldr	r3, [pc, #8]	; (2838 <prvCheckForValidListAndQueue+0x40>)
    282e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2830:	f7fd fdbe 	bl	3b0 <vPortExitCritical>
}
    2834:	bf00      	nop
    2836:	bd80      	pop	{r7, pc}
    2838:	100064b0 	.word	0x100064b0
    283c:	10006480 	.word	0x10006480
    2840:	10006494 	.word	0x10006494
    2844:	100064a8 	.word	0x100064a8
    2848:	100064ac 	.word	0x100064ac

0000284c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    284c:	b580      	push	{r7, lr}
    284e:	b08a      	sub	sp, #40	; 0x28
    2850:	af00      	add	r7, sp, #0
    2852:	60f8      	str	r0, [r7, #12]
    2854:	60b9      	str	r1, [r7, #8]
    2856:	607a      	str	r2, [r7, #4]
    2858:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    285a:	f06f 0301 	mvn.w	r3, #1
    285e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2860:	68fb      	ldr	r3, [r7, #12]
    2862:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2864:	68bb      	ldr	r3, [r7, #8]
    2866:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    286c:	4b06      	ldr	r3, [pc, #24]	; (2888 <xTimerPendFunctionCallFromISR+0x3c>)
    286e:	6818      	ldr	r0, [r3, #0]
    2870:	f107 0114 	add.w	r1, r7, #20
    2874:	2300      	movs	r3, #0
    2876:	683a      	ldr	r2, [r7, #0]
    2878:	f7fe fbf0 	bl	105c <xQueueGenericSendFromISR>
    287c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
    2880:	4618      	mov	r0, r3
    2882:	3728      	adds	r7, #40	; 0x28
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}
    2888:	100064b0 	.word	0x100064b0

0000288c <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    288c:	b490      	push	{r4, r7}
    288e:	b084      	sub	sp, #16
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	685b      	ldr	r3, [r3, #4]
    2898:	f003 0302 	and.w	r3, r3, #2
    289c:	2b00      	cmp	r3, #0
    289e:	f000 80aa 	beq.w	29f6 <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	681b      	ldr	r3, [r3, #0]
    28a6:	2b31      	cmp	r3, #49	; 0x31
    28a8:	d86d      	bhi.n	2986 <am_devices_led_init+0xfa>
    28aa:	f3ef 8310 	mrs	r3, PRIMASK
    28ae:	60fb      	str	r3, [r7, #12]
    28b0:	b672      	cpsid	i
    28b2:	4ba8      	ldr	r3, [pc, #672]	; (2b54 <am_devices_led_init+0x2c8>)
    28b4:	2273      	movs	r2, #115	; 0x73
    28b6:	601a      	str	r2, [r3, #0]
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	085b      	lsrs	r3, r3, #1
    28be:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    28c2:	4ba5      	ldr	r3, [pc, #660]	; (2b58 <am_devices_led_init+0x2cc>)
    28c4:	4413      	add	r3, r2
    28c6:	461c      	mov	r4, r3
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	681b      	ldr	r3, [r3, #0]
    28cc:	009b      	lsls	r3, r3, #2
    28ce:	f003 031c 	and.w	r3, r3, #28
    28d2:	2202      	movs	r2, #2
    28d4:	409a      	lsls	r2, r3
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	085b      	lsrs	r3, r3, #1
    28dc:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    28e0:	4b9d      	ldr	r3, [pc, #628]	; (2b58 <am_devices_led_init+0x2cc>)
    28e2:	440b      	add	r3, r1
    28e4:	6819      	ldr	r1, [r3, #0]
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	009b      	lsls	r3, r3, #2
    28ec:	f003 031c 	and.w	r3, r3, #28
    28f0:	2007      	movs	r0, #7
    28f2:	fa00 f303 	lsl.w	r3, r0, r3
    28f6:	43db      	mvns	r3, r3
    28f8:	400b      	ands	r3, r1
    28fa:	4313      	orrs	r3, r2
    28fc:	6023      	str	r3, [r4, #0]
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    290a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    290e:	461c      	mov	r4, r3
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	00db      	lsls	r3, r3, #3
    2916:	f003 0318 	and.w	r3, r3, #24
    291a:	2218      	movs	r2, #24
    291c:	409a      	lsls	r2, r3
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    292a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    292e:	6819      	ldr	r1, [r3, #0]
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	00db      	lsls	r3, r3, #3
    2936:	f003 0318 	and.w	r3, r3, #24
    293a:	20ff      	movs	r0, #255	; 0xff
    293c:	fa00 f303 	lsl.w	r3, r0, r3
    2940:	43db      	mvns	r3, r3
    2942:	400b      	ands	r3, r1
    2944:	4313      	orrs	r3, r2
    2946:	6023      	str	r3, [r4, #0]
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2950:	4b82      	ldr	r3, [pc, #520]	; (2b5c <am_devices_led_init+0x2d0>)
    2952:	4413      	add	r3, r2
    2954:	4618      	mov	r0, r3
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	681b      	ldr	r3, [r3, #0]
    295a:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    295e:	4b7f      	ldr	r3, [pc, #508]	; (2b5c <am_devices_led_init+0x2d0>)
    2960:	4413      	add	r3, r2
    2962:	681a      	ldr	r2, [r3, #0]
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	00db      	lsls	r3, r3, #3
    296a:	f003 0318 	and.w	r3, r3, #24
    296e:	21ff      	movs	r1, #255	; 0xff
    2970:	fa01 f303 	lsl.w	r3, r1, r3
    2974:	43db      	mvns	r3, r3
    2976:	4013      	ands	r3, r2
    2978:	6003      	str	r3, [r0, #0]
    297a:	4b76      	ldr	r3, [pc, #472]	; (2b54 <am_devices_led_init+0x2c8>)
    297c:	2200      	movs	r2, #0
    297e:	601a      	str	r2, [r3, #0]
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	08db      	lsrs	r3, r3, #3
    298c:	f003 0204 	and.w	r2, r3, #4
    2990:	4b73      	ldr	r3, [pc, #460]	; (2b60 <am_devices_led_init+0x2d4>)
    2992:	4413      	add	r3, r2
    2994:	4619      	mov	r1, r3
    2996:	687b      	ldr	r3, [r7, #4]
    2998:	681b      	ldr	r3, [r3, #0]
    299a:	f003 031f 	and.w	r3, r3, #31
    299e:	2201      	movs	r2, #1
    29a0:	fa02 f303 	lsl.w	r3, r2, r3
    29a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	685b      	ldr	r3, [r3, #4]
    29aa:	f003 0301 	and.w	r3, r3, #1
    29ae:	2b00      	cmp	r3, #0
    29b0:	d010      	beq.n	29d4 <am_devices_led_init+0x148>
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	08db      	lsrs	r3, r3, #3
    29b8:	f003 0204 	and.w	r2, r3, #4
    29bc:	4b69      	ldr	r3, [pc, #420]	; (2b64 <am_devices_led_init+0x2d8>)
    29be:	4413      	add	r3, r2
    29c0:	4619      	mov	r1, r3
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	f003 031f 	and.w	r3, r3, #31
    29ca:	2201      	movs	r2, #1
    29cc:	fa02 f303 	lsl.w	r3, r2, r3
    29d0:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
    29d2:	e0b9      	b.n	2b48 <am_devices_led_init+0x2bc>
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	08db      	lsrs	r3, r3, #3
    29da:	f003 0204 	and.w	r2, r3, #4
    29de:	4b62      	ldr	r3, [pc, #392]	; (2b68 <am_devices_led_init+0x2dc>)
    29e0:	4413      	add	r3, r2
    29e2:	4619      	mov	r1, r3
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	681b      	ldr	r3, [r3, #0]
    29e8:	f003 031f 	and.w	r3, r3, #31
    29ec:	2201      	movs	r2, #1
    29ee:	fa02 f303 	lsl.w	r3, r2, r3
    29f2:	600b      	str	r3, [r1, #0]
}
    29f4:	e0a8      	b.n	2b48 <am_devices_led_init+0x2bc>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	2b31      	cmp	r3, #49	; 0x31
    29fc:	d86d      	bhi.n	2ada <am_devices_led_init+0x24e>
    29fe:	f3ef 8310 	mrs	r3, PRIMASK
    2a02:	60bb      	str	r3, [r7, #8]
    2a04:	b672      	cpsid	i
    2a06:	4b53      	ldr	r3, [pc, #332]	; (2b54 <am_devices_led_init+0x2c8>)
    2a08:	2273      	movs	r2, #115	; 0x73
    2a0a:	601a      	str	r2, [r3, #0]
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	085b      	lsrs	r3, r3, #1
    2a12:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    2a16:	4b50      	ldr	r3, [pc, #320]	; (2b58 <am_devices_led_init+0x2cc>)
    2a18:	4413      	add	r3, r2
    2a1a:	461c      	mov	r4, r3
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	009b      	lsls	r3, r3, #2
    2a22:	f003 031c 	and.w	r3, r3, #28
    2a26:	2206      	movs	r2, #6
    2a28:	409a      	lsls	r2, r3
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	681b      	ldr	r3, [r3, #0]
    2a2e:	085b      	lsrs	r3, r3, #1
    2a30:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    2a34:	4b48      	ldr	r3, [pc, #288]	; (2b58 <am_devices_led_init+0x2cc>)
    2a36:	440b      	add	r3, r1
    2a38:	6819      	ldr	r1, [r3, #0]
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	009b      	lsls	r3, r3, #2
    2a40:	f003 031c 	and.w	r3, r3, #28
    2a44:	2007      	movs	r0, #7
    2a46:	fa00 f303 	lsl.w	r3, r0, r3
    2a4a:	43db      	mvns	r3, r3
    2a4c:	400b      	ands	r3, r1
    2a4e:	4313      	orrs	r3, r2
    2a50:	6023      	str	r3, [r4, #0]
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2a5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a5e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2a62:	461c      	mov	r4, r3
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	00db      	lsls	r3, r3, #3
    2a6a:	f003 0318 	and.w	r3, r3, #24
    2a6e:	2218      	movs	r2, #24
    2a70:	409a      	lsls	r2, r3
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2a82:	6819      	ldr	r1, [r3, #0]
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	00db      	lsls	r3, r3, #3
    2a8a:	f003 0318 	and.w	r3, r3, #24
    2a8e:	20ff      	movs	r0, #255	; 0xff
    2a90:	fa00 f303 	lsl.w	r3, r0, r3
    2a94:	43db      	mvns	r3, r3
    2a96:	400b      	ands	r3, r1
    2a98:	4313      	orrs	r3, r2
    2a9a:	6023      	str	r3, [r4, #0]
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	681b      	ldr	r3, [r3, #0]
    2aa0:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2aa4:	4b2d      	ldr	r3, [pc, #180]	; (2b5c <am_devices_led_init+0x2d0>)
    2aa6:	4413      	add	r3, r2
    2aa8:	4618      	mov	r0, r3
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2ab2:	4b2a      	ldr	r3, [pc, #168]	; (2b5c <am_devices_led_init+0x2d0>)
    2ab4:	4413      	add	r3, r2
    2ab6:	681a      	ldr	r2, [r3, #0]
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	00db      	lsls	r3, r3, #3
    2abe:	f003 0318 	and.w	r3, r3, #24
    2ac2:	21ff      	movs	r1, #255	; 0xff
    2ac4:	fa01 f303 	lsl.w	r3, r1, r3
    2ac8:	43db      	mvns	r3, r3
    2aca:	4013      	ands	r3, r2
    2acc:	6003      	str	r3, [r0, #0]
    2ace:	4b21      	ldr	r3, [pc, #132]	; (2b54 <am_devices_led_init+0x2c8>)
    2ad0:	2200      	movs	r2, #0
    2ad2:	601a      	str	r2, [r3, #0]
    2ad4:	68bb      	ldr	r3, [r7, #8]
    2ad6:	f383 8810 	msr	PRIMASK, r3
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	681b      	ldr	r3, [r3, #0]
    2ade:	08db      	lsrs	r3, r3, #3
    2ae0:	f003 0204 	and.w	r2, r3, #4
    2ae4:	4b21      	ldr	r3, [pc, #132]	; (2b6c <am_devices_led_init+0x2e0>)
    2ae6:	4413      	add	r3, r2
    2ae8:	4619      	mov	r1, r3
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	681b      	ldr	r3, [r3, #0]
    2aee:	f003 031f 	and.w	r3, r3, #31
    2af2:	2201      	movs	r2, #1
    2af4:	fa02 f303 	lsl.w	r3, r2, r3
    2af8:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	685b      	ldr	r3, [r3, #4]
    2afe:	f003 0301 	and.w	r3, r3, #1
    2b02:	2b00      	cmp	r3, #0
    2b04:	d010      	beq.n	2b28 <am_devices_led_init+0x29c>
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	08db      	lsrs	r3, r3, #3
    2b0c:	f003 0204 	and.w	r2, r3, #4
    2b10:	4b14      	ldr	r3, [pc, #80]	; (2b64 <am_devices_led_init+0x2d8>)
    2b12:	4413      	add	r3, r2
    2b14:	4619      	mov	r1, r3
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	f003 031f 	and.w	r3, r3, #31
    2b1e:	2201      	movs	r2, #1
    2b20:	fa02 f303 	lsl.w	r3, r2, r3
    2b24:	600b      	str	r3, [r1, #0]
}
    2b26:	e00f      	b.n	2b48 <am_devices_led_init+0x2bc>
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	681b      	ldr	r3, [r3, #0]
    2b2c:	08db      	lsrs	r3, r3, #3
    2b2e:	f003 0204 	and.w	r2, r3, #4
    2b32:	4b0d      	ldr	r3, [pc, #52]	; (2b68 <am_devices_led_init+0x2dc>)
    2b34:	4413      	add	r3, r2
    2b36:	4619      	mov	r1, r3
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	f003 031f 	and.w	r3, r3, #31
    2b40:	2201      	movs	r2, #1
    2b42:	fa02 f303 	lsl.w	r3, r2, r3
    2b46:	600b      	str	r3, [r1, #0]
}
    2b48:	bf00      	nop
    2b4a:	3710      	adds	r7, #16
    2b4c:	46bd      	mov	sp, r7
    2b4e:	bc90      	pop	{r4, r7}
    2b50:	4770      	bx	lr
    2b52:	bf00      	nop
    2b54:	40010060 	.word	0x40010060
    2b58:	40010040 	.word	0x40010040
    2b5c:	400100e0 	.word	0x400100e0
    2b60:	400100a8 	.word	0x400100a8
    2b64:	40010090 	.word	0x40010090
    2b68:	40010098 	.word	0x40010098
    2b6c:	400100b4 	.word	0x400100b4

00002b70 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    2b70:	b580      	push	{r7, lr}
    2b72:	b084      	sub	sp, #16
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    2b7a:	2300      	movs	r3, #0
    2b7c:	60fb      	str	r3, [r7, #12]
    2b7e:	e009      	b.n	2b94 <am_devices_led_array_init+0x24>
    {
        am_devices_led_init(psLEDs + i);
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	00db      	lsls	r3, r3, #3
    2b84:	687a      	ldr	r2, [r7, #4]
    2b86:	4413      	add	r3, r2
    2b88:	4618      	mov	r0, r3
    2b8a:	f7ff fe7f 	bl	288c <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    2b8e:	68fb      	ldr	r3, [r7, #12]
    2b90:	3301      	adds	r3, #1
    2b92:	60fb      	str	r3, [r7, #12]
    2b94:	68fa      	ldr	r2, [r7, #12]
    2b96:	683b      	ldr	r3, [r7, #0]
    2b98:	429a      	cmp	r2, r3
    2b9a:	d3f1      	bcc.n	2b80 <am_devices_led_array_init+0x10>
    }
}
    2b9c:	bf00      	nop
    2b9e:	3710      	adds	r7, #16
    2ba0:	46bd      	mov	sp, r7
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2ba4:	b480      	push	{r7}
    2ba6:	b083      	sub	sp, #12
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
    2bac:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2bae:	683b      	ldr	r3, [r7, #0]
    2bb0:	00db      	lsls	r3, r3, #3
    2bb2:	687a      	ldr	r2, [r7, #4]
    2bb4:	4413      	add	r3, r2
    2bb6:	685b      	ldr	r3, [r3, #4]
    2bb8:	f003 0302 	and.w	r3, r3, #2
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d036      	beq.n	2c2e <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    2bc0:	683b      	ldr	r3, [r7, #0]
    2bc2:	00db      	lsls	r3, r3, #3
    2bc4:	687a      	ldr	r2, [r7, #4]
    2bc6:	4413      	add	r3, r2
    2bc8:	685b      	ldr	r3, [r3, #4]
    2bca:	f003 0301 	and.w	r3, r3, #1
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d116      	bne.n	2c00 <am_devices_led_off+0x5c>
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	00db      	lsls	r3, r3, #3
    2bd6:	687a      	ldr	r2, [r7, #4]
    2bd8:	4413      	add	r3, r2
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	08db      	lsrs	r3, r3, #3
    2bde:	f003 0204 	and.w	r2, r3, #4
    2be2:	4b21      	ldr	r3, [pc, #132]	; (2c68 <am_devices_led_off+0xc4>)
    2be4:	4413      	add	r3, r2
    2be6:	4619      	mov	r1, r3
    2be8:	683b      	ldr	r3, [r7, #0]
    2bea:	00db      	lsls	r3, r3, #3
    2bec:	687a      	ldr	r2, [r7, #4]
    2bee:	4413      	add	r3, r2
    2bf0:	681b      	ldr	r3, [r3, #0]
    2bf2:	f003 031f 	and.w	r3, r3, #31
    2bf6:	2201      	movs	r2, #1
    2bf8:	fa02 f303 	lsl.w	r3, r2, r3
    2bfc:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
    2bfe:	e02c      	b.n	2c5a <am_devices_led_off+0xb6>
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	00db      	lsls	r3, r3, #3
    2c04:	687a      	ldr	r2, [r7, #4]
    2c06:	4413      	add	r3, r2
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	08db      	lsrs	r3, r3, #3
    2c0c:	f003 0204 	and.w	r2, r3, #4
    2c10:	4b16      	ldr	r3, [pc, #88]	; (2c6c <am_devices_led_off+0xc8>)
    2c12:	4413      	add	r3, r2
    2c14:	4619      	mov	r1, r3
    2c16:	683b      	ldr	r3, [r7, #0]
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	687a      	ldr	r2, [r7, #4]
    2c1c:	4413      	add	r3, r2
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	f003 031f 	and.w	r3, r3, #31
    2c24:	2201      	movs	r2, #1
    2c26:	fa02 f303 	lsl.w	r3, r2, r3
    2c2a:	600b      	str	r3, [r1, #0]
}
    2c2c:	e015      	b.n	2c5a <am_devices_led_off+0xb6>
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2c2e:	683b      	ldr	r3, [r7, #0]
    2c30:	00db      	lsls	r3, r3, #3
    2c32:	687a      	ldr	r2, [r7, #4]
    2c34:	4413      	add	r3, r2
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	08db      	lsrs	r3, r3, #3
    2c3a:	f003 0204 	and.w	r2, r3, #4
    2c3e:	4b0c      	ldr	r3, [pc, #48]	; (2c70 <am_devices_led_off+0xcc>)
    2c40:	4413      	add	r3, r2
    2c42:	4619      	mov	r1, r3
    2c44:	683b      	ldr	r3, [r7, #0]
    2c46:	00db      	lsls	r3, r3, #3
    2c48:	687a      	ldr	r2, [r7, #4]
    2c4a:	4413      	add	r3, r2
    2c4c:	681b      	ldr	r3, [r3, #0]
    2c4e:	f003 031f 	and.w	r3, r3, #31
    2c52:	2201      	movs	r2, #1
    2c54:	fa02 f303 	lsl.w	r3, r2, r3
    2c58:	600b      	str	r3, [r1, #0]
}
    2c5a:	bf00      	nop
    2c5c:	370c      	adds	r7, #12
    2c5e:	46bd      	mov	sp, r7
    2c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop
    2c68:	40010090 	.word	0x40010090
    2c6c:	40010098 	.word	0x40010098
    2c70:	400100b4 	.word	0x400100b4

00002c74 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	b084      	sub	sp, #16
    2c78:	af00      	add	r7, sp, #0
    2c7a:	6078      	str	r0, [r7, #4]
    2c7c:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2c7e:	683b      	ldr	r3, [r7, #0]
    2c80:	00db      	lsls	r3, r3, #3
    2c82:	687a      	ldr	r2, [r7, #4]
    2c84:	4413      	add	r3, r2
    2c86:	685b      	ldr	r3, [r3, #4]
    2c88:	f003 0302 	and.w	r3, r3, #2
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d029      	beq.n	2ce4 <am_devices_led_toggle+0x70>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
    2c90:	f3ef 8310 	mrs	r3, PRIMASK
    2c94:	60fb      	str	r3, [r7, #12]
    2c96:	b672      	cpsid	i
    2c98:	683b      	ldr	r3, [r7, #0]
    2c9a:	00db      	lsls	r3, r3, #3
    2c9c:	687a      	ldr	r2, [r7, #4]
    2c9e:	4413      	add	r3, r2
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	08db      	lsrs	r3, r3, #3
    2ca4:	f003 0204 	and.w	r2, r3, #4
    2ca8:	4b2c      	ldr	r3, [pc, #176]	; (2d5c <am_devices_led_toggle+0xe8>)
    2caa:	4413      	add	r3, r2
    2cac:	4618      	mov	r0, r3
    2cae:	683b      	ldr	r3, [r7, #0]
    2cb0:	00db      	lsls	r3, r3, #3
    2cb2:	687a      	ldr	r2, [r7, #4]
    2cb4:	4413      	add	r3, r2
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	08db      	lsrs	r3, r3, #3
    2cba:	f003 0204 	and.w	r2, r3, #4
    2cbe:	4b27      	ldr	r3, [pc, #156]	; (2d5c <am_devices_led_toggle+0xe8>)
    2cc0:	4413      	add	r3, r2
    2cc2:	681a      	ldr	r2, [r3, #0]
    2cc4:	683b      	ldr	r3, [r7, #0]
    2cc6:	00db      	lsls	r3, r3, #3
    2cc8:	6879      	ldr	r1, [r7, #4]
    2cca:	440b      	add	r3, r1
    2ccc:	681b      	ldr	r3, [r3, #0]
    2cce:	f003 031f 	and.w	r3, r3, #31
    2cd2:	2101      	movs	r1, #1
    2cd4:	fa01 f303 	lsl.w	r3, r1, r3
    2cd8:	4053      	eors	r3, r2
    2cda:	6003      	str	r3, [r0, #0]
    2cdc:	68fb      	ldr	r3, [r7, #12]
    2cde:	f383 8810 	msr	PRIMASK, r3
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
}
    2ce2:	e037      	b.n	2d54 <am_devices_led_toggle+0xe0>
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
    2ce4:	683b      	ldr	r3, [r7, #0]
    2ce6:	00db      	lsls	r3, r3, #3
    2ce8:	687a      	ldr	r2, [r7, #4]
    2cea:	4413      	add	r3, r2
    2cec:	681b      	ldr	r3, [r3, #0]
    2cee:	4618      	mov	r0, r3
    2cf0:	f001 fc44 	bl	457c <am_hal_gpio_out_enable_bit_get>
    2cf4:	4603      	mov	r3, r0
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d016      	beq.n	2d28 <am_devices_led_toggle+0xb4>
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2cfa:	683b      	ldr	r3, [r7, #0]
    2cfc:	00db      	lsls	r3, r3, #3
    2cfe:	687a      	ldr	r2, [r7, #4]
    2d00:	4413      	add	r3, r2
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	08db      	lsrs	r3, r3, #3
    2d06:	f003 0204 	and.w	r2, r3, #4
    2d0a:	4b15      	ldr	r3, [pc, #84]	; (2d60 <am_devices_led_toggle+0xec>)
    2d0c:	4413      	add	r3, r2
    2d0e:	4619      	mov	r1, r3
    2d10:	683b      	ldr	r3, [r7, #0]
    2d12:	00db      	lsls	r3, r3, #3
    2d14:	687a      	ldr	r2, [r7, #4]
    2d16:	4413      	add	r3, r2
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	f003 031f 	and.w	r3, r3, #31
    2d1e:	2201      	movs	r2, #1
    2d20:	fa02 f303 	lsl.w	r3, r2, r3
    2d24:	600b      	str	r3, [r1, #0]
}
    2d26:	e015      	b.n	2d54 <am_devices_led_toggle+0xe0>
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    2d28:	683b      	ldr	r3, [r7, #0]
    2d2a:	00db      	lsls	r3, r3, #3
    2d2c:	687a      	ldr	r2, [r7, #4]
    2d2e:	4413      	add	r3, r2
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	08db      	lsrs	r3, r3, #3
    2d34:	f003 0204 	and.w	r2, r3, #4
    2d38:	4b0a      	ldr	r3, [pc, #40]	; (2d64 <am_devices_led_toggle+0xf0>)
    2d3a:	4413      	add	r3, r2
    2d3c:	4619      	mov	r1, r3
    2d3e:	683b      	ldr	r3, [r7, #0]
    2d40:	00db      	lsls	r3, r3, #3
    2d42:	687a      	ldr	r2, [r7, #4]
    2d44:	4413      	add	r3, r2
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	f003 031f 	and.w	r3, r3, #31
    2d4c:	2201      	movs	r2, #1
    2d4e:	fa02 f303 	lsl.w	r3, r2, r3
    2d52:	600b      	str	r3, [r1, #0]
}
    2d54:	bf00      	nop
    2d56:	3710      	adds	r7, #16
    2d58:	46bd      	mov	sp, r7
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	40010088 	.word	0x40010088
    2d60:	400100b4 	.word	0x400100b4
    2d64:	400100a8 	.word	0x400100a8

00002d68 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_hal_itm_enable();
    2d6c:	f001 fcfc 	bl	4768 <am_hal_itm_enable>
    am_bsp_debug_printf_enable();
    2d70:	f001 fa16 	bl	41a0 <am_bsp_debug_printf_enable>
    am_util_debug_printf_init(am_hal_itm_print);
    2d74:	4803      	ldr	r0, [pc, #12]	; (2d84 <enable_print_interface+0x1c>)
    2d76:	f000 fb69 	bl	344c <am_util_stdio_printf_init>
    am_util_stdio_terminal_clear();
    2d7a:	f001 f9f5 	bl	4168 <am_util_stdio_terminal_clear>
}
    2d7e:	bf00      	nop
    2d80:	bd80      	pop	{r7, pc}
    2d82:	bf00      	nop
    2d84:	00004831 	.word	0x00004831

00002d88 <disable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
disable_print_interface(void)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_debug_printf_disable();
    2d8c:	f001 fa48 	bl	4220 <am_bsp_debug_printf_disable>
    am_hal_itm_disable();
    2d90:	f001 fd16 	bl	47c0 <am_hal_itm_disable>
}
    2d94:	bf00      	nop
    2d96:	bd80      	pop	{r7, pc}

00002d98 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    2d9c:	2000      	movs	r0, #0
    2d9e:	f001 fb0b 	bl	43b8 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
    2da2:	480c      	ldr	r0, [pc, #48]	; (2dd4 <main+0x3c>)
    2da4:	f001 fa72 	bl	428c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    2da8:	f001 f9e8 	bl	417c <am_bsp_low_power_init>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    2dac:	f002 f814 	bl	4dd8 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    2db0:	2001      	movs	r0, #1
    2db2:	f002 f819 	bl	4de8 <am_hal_sysctrl_fpu_stacking_enable>
    // Flash bank power set.
    //
    am_hal_mcuctrl_flash_power_set(AM_HAL_MCUCTRL_FLASH_POWER_DOWN_1);
#endif // AM_PART_APOLLO
#ifdef AM_PART_APOLLO2
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
    2db6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2dba:	f001 fd75 	bl	48a8 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM32K);
    2dbe:	200f      	movs	r0, #15
    2dc0:	f001 fd72 	bl	48a8 <am_hal_pwrctrl_memory_enable>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
    2dc4:	f7ff ffd0 	bl	2d68 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Low Power Example\n");
    2dc8:	4803      	ldr	r0, [pc, #12]	; (2dd8 <main+0x40>)
    2dca:	f001 f9af 	bl	412c <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
    2dce:	f000 fa53 	bl	3278 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
    2dd2:	e7fe      	b.n	2dd2 <main+0x3a>
    2dd4:	00004f70 	.word	0x00004f70
    2dd8:	00004f00 	.word	0x00004f00

00002ddc <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    2ddc:	b580      	push	{r7, lr}
    2dde:	b082      	sub	sp, #8
    2de0:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
    2de2:	2000      	movs	r0, #0
    2de4:	f001 fbfa 	bl	45dc <am_hal_gpio_int_status_get>
    2de8:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
    2dec:	e9d7 0100 	ldrd	r0, r1, [r7]
    2df0:	f001 fbe2 	bl	45b8 <am_hal_gpio_int_clear>

    //
    // Call the individual pin interrupt handlers for any pin that triggered an
    // interrupt.
    //
    am_hal_gpio_int_service(ui64Status);
    2df4:	e9d7 0100 	ldrd	r0, r1, [r7]
    2df8:	f001 fc1c 	bl	4634 <am_hal_gpio_int_service>
}
    2dfc:	bf00      	nop
    2dfe:	3708      	adds	r7, #8
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}

00002e04 <button_handler>:
// Interrupt handler for the Buttons
//
//*****************************************************************************
void
button_handler(uint32_t buttonId)
{
    2e04:	b580      	push	{r7, lr}
    2e06:	b084      	sub	sp, #16
    2e08:	af00      	add	r7, sp, #0
    2e0a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken, xResult;
    //
    // Send an event to the main LED task
    //
    xHigherPriorityTaskWoken = pdFALSE;
    2e0c:	2300      	movs	r3, #0
    2e0e:	60bb      	str	r3, [r7, #8]

    xResult = xEventGroupSetBitsFromISR(xLedEventHandle, (1 << buttonId),
    2e10:	4b0f      	ldr	r3, [pc, #60]	; (2e50 <button_handler+0x4c>)
    2e12:	6819      	ldr	r1, [r3, #0]
    2e14:	2201      	movs	r2, #1
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	fa02 f303 	lsl.w	r3, r2, r3
    2e1c:	461a      	mov	r2, r3
    2e1e:	f107 0308 	add.w	r3, r7, #8
    2e22:	480c      	ldr	r0, [pc, #48]	; (2e54 <button_handler+0x50>)
    2e24:	f7ff fd12 	bl	284c <xTimerPendFunctionCallFromISR>
    2e28:	60f8      	str	r0, [r7, #12]

    //
    // If the LED task is higher-priority than the context we're currently
    // running from, we should yield now and run the radio task.
    //
    if (xResult != pdFAIL)
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d00a      	beq.n	2e46 <button_handler+0x42>
    {
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2e30:	68bb      	ldr	r3, [r7, #8]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d007      	beq.n	2e46 <button_handler+0x42>
    2e36:	4b08      	ldr	r3, [pc, #32]	; (2e58 <button_handler+0x54>)
    2e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e3c:	601a      	str	r2, [r3, #0]
    2e3e:	f3bf 8f4f 	dsb	sy
    2e42:	f3bf 8f6f 	isb	sy
    }
}
    2e46:	bf00      	nop
    2e48:	3710      	adds	r7, #16
    2e4a:	46bd      	mov	sp, r7
    2e4c:	bd80      	pop	{r7, pc}
    2e4e:	bf00      	nop
    2e50:	100065d0 	.word	0x100065d0
    2e54:	00000b8f 	.word	0x00000b8f
    2e58:	e000ed04 	.word	0xe000ed04

00002e5c <button0_handler>:

void
button0_handler(void)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b082      	sub	sp, #8
    2e60:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2e62:	2300      	movs	r3, #0
    2e64:	607b      	str	r3, [r7, #4]
    2e66:	e012      	b.n	2e8e <button0_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON0);
    2e68:	4b0e      	ldr	r3, [pc, #56]	; (2ea4 <button0_handler+0x48>)
    2e6a:	681b      	ldr	r3, [r3, #0]
    2e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    2e70:	2b00      	cmp	r3, #0
    2e72:	bf14      	ite	ne
    2e74:	2301      	movne	r3, #1
    2e76:	2300      	moveq	r3, #0
    2e78:	b2db      	uxtb	r3, r3
    2e7a:	603b      	str	r3, [r7, #0]
        if (!val)
    2e7c:	683b      	ldr	r3, [r7, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d00c      	beq.n	2e9c <button0_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2e82:	2002      	movs	r0, #2
    2e84:	f000 fa4a 	bl	331c <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2e88:	687b      	ldr	r3, [r7, #4]
    2e8a:	3301      	adds	r3, #1
    2e8c:	607b      	str	r3, [r7, #4]
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	2b09      	cmp	r3, #9
    2e92:	d9e9      	bls.n	2e68 <button0_handler+0xc>
    }

    button_handler(0);
    2e94:	2000      	movs	r0, #0
    2e96:	f7ff ffb5 	bl	2e04 <button_handler>
    2e9a:	e000      	b.n	2e9e <button0_handler+0x42>
            return; // State not high...must be result of debounce
    2e9c:	bf00      	nop
}
    2e9e:	3708      	adds	r7, #8
    2ea0:	46bd      	mov	sp, r7
    2ea2:	bd80      	pop	{r7, pc}
    2ea4:	40010080 	.word	0x40010080

00002ea8 <button1_handler>:

void
button1_handler(void)
{
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b082      	sub	sp, #8
    2eac:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2eae:	2300      	movs	r3, #0
    2eb0:	607b      	str	r3, [r7, #4]
    2eb2:	e012      	b.n	2eda <button1_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON1);
    2eb4:	4b0e      	ldr	r3, [pc, #56]	; (2ef0 <button1_handler+0x48>)
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	bf14      	ite	ne
    2ec0:	2301      	movne	r3, #1
    2ec2:	2300      	moveq	r3, #0
    2ec4:	b2db      	uxtb	r3, r3
    2ec6:	603b      	str	r3, [r7, #0]
        if (!val)
    2ec8:	683b      	ldr	r3, [r7, #0]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d00c      	beq.n	2ee8 <button1_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2ece:	2002      	movs	r0, #2
    2ed0:	f000 fa24 	bl	331c <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	3301      	adds	r3, #1
    2ed8:	607b      	str	r3, [r7, #4]
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	2b09      	cmp	r3, #9
    2ede:	d9e9      	bls.n	2eb4 <button1_handler+0xc>
    }

    button_handler(1);
    2ee0:	2001      	movs	r0, #1
    2ee2:	f7ff ff8f 	bl	2e04 <button_handler>
    2ee6:	e000      	b.n	2eea <button1_handler+0x42>
            return; // State not high...must be result of debounce
    2ee8:	bf00      	nop
}
    2eea:	3708      	adds	r7, #8
    2eec:	46bd      	mov	sp, r7
    2eee:	bd80      	pop	{r7, pc}
    2ef0:	40010080 	.word	0x40010080

00002ef4 <button2_handler>:

void
button2_handler(void)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2efa:	2300      	movs	r3, #0
    2efc:	607b      	str	r3, [r7, #4]
    2efe:	e012      	b.n	2f26 <button2_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON2);
    2f00:	4b0e      	ldr	r3, [pc, #56]	; (2f3c <button2_handler+0x48>)
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    2f08:	2b00      	cmp	r3, #0
    2f0a:	bf14      	ite	ne
    2f0c:	2301      	movne	r3, #1
    2f0e:	2300      	moveq	r3, #0
    2f10:	b2db      	uxtb	r3, r3
    2f12:	603b      	str	r3, [r7, #0]
        if (!val)
    2f14:	683b      	ldr	r3, [r7, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d00c      	beq.n	2f34 <button2_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2f1a:	2002      	movs	r0, #2
    2f1c:	f000 f9fe 	bl	331c <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	3301      	adds	r3, #1
    2f24:	607b      	str	r3, [r7, #4]
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	2b09      	cmp	r3, #9
    2f2a:	d9e9      	bls.n	2f00 <button2_handler+0xc>
    }

    button_handler(2);
    2f2c:	2002      	movs	r0, #2
    2f2e:	f7ff ff69 	bl	2e04 <button_handler>
    2f32:	e000      	b.n	2f36 <button2_handler+0x42>
            return; // State not high...must be result of debounce
    2f34:	bf00      	nop
}
    2f36:	3708      	adds	r7, #8
    2f38:	46bd      	mov	sp, r7
    2f3a:	bd80      	pop	{r7, pc}
    2f3c:	40010080 	.word	0x40010080

00002f40 <LedTaskSetup>:
// Perform initial setup for the LED task.
//
//*****************************************************************************
void
LedTaskSetup(void)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b086      	sub	sp, #24
    2f44:	af00      	add	r7, sp, #0
    am_util_debug_printf("LEDTask: setup\r\n");
    2f46:	487f      	ldr	r0, [pc, #508]	; (3144 <LedTaskSetup+0x204>)
    2f48:	f001 f8f0 	bl	412c <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xLedEventHandle = xEventGroupCreate();
    2f4c:	f7fd fcec 	bl	928 <xEventGroupCreate>
    2f50:	4602      	mov	r2, r0
    2f52:	4b7d      	ldr	r3, [pc, #500]	; (3148 <LedTaskSetup+0x208>)
    2f54:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while (xLedEventHandle == NULL);
    2f56:	bf00      	nop
    2f58:	4b7b      	ldr	r3, [pc, #492]	; (3148 <LedTaskSetup+0x208>)
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d0fb      	beq.n	2f58 <LedTaskSetup+0x18>

    // Initialize the LEDs
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    2f60:	2105      	movs	r1, #5
    2f62:	487a      	ldr	r0, [pc, #488]	; (314c <LedTaskSetup+0x20c>)
    2f64:	f7ff fe04 	bl	2b70 <am_devices_led_array_init>
    am_devices_led_off(am_bsp_psLEDs, 0);
    2f68:	2100      	movs	r1, #0
    2f6a:	4878      	ldr	r0, [pc, #480]	; (314c <LedTaskSetup+0x20c>)
    2f6c:	f7ff fe1a 	bl	2ba4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
    2f70:	2101      	movs	r1, #1
    2f72:	4876      	ldr	r0, [pc, #472]	; (314c <LedTaskSetup+0x20c>)
    2f74:	f7ff fe16 	bl	2ba4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 2);
    2f78:	2102      	movs	r1, #2
    2f7a:	4874      	ldr	r0, [pc, #464]	; (314c <LedTaskSetup+0x20c>)
    2f7c:	f7ff fe12 	bl	2ba4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 3);
    2f80:	2103      	movs	r1, #3
    2f82:	4872      	ldr	r0, [pc, #456]	; (314c <LedTaskSetup+0x20c>)
    2f84:	f7ff fe0e 	bl	2ba4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 4);
    2f88:	2104      	movs	r1, #4
    2f8a:	4870      	ldr	r0, [pc, #448]	; (314c <LedTaskSetup+0x20c>)
    2f8c:	f7ff fe0a 	bl	2ba4 <am_devices_led_off>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_GPIO, configMAX_SYSCALL_INTERRUPT_PRIORITY);
    2f90:	2180      	movs	r1, #128	; 0x80
    2f92:	201c      	movs	r0, #28
    2f94:	f001 fbbc 	bl	4710 <am_hal_interrupt_priority_set>
    //
    // Register interrupt handler for button presses
    //
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON0, button0_handler);
    2f98:	496d      	ldr	r1, [pc, #436]	; (3150 <LedTaskSetup+0x210>)
    2f9a:	2010      	movs	r0, #16
    2f9c:	f001 fb7a 	bl	4694 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON1, button1_handler);
    2fa0:	496c      	ldr	r1, [pc, #432]	; (3154 <LedTaskSetup+0x214>)
    2fa2:	2012      	movs	r0, #18
    2fa4:	f001 fb76 	bl	4694 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON2, button2_handler);
    2fa8:	496b      	ldr	r1, [pc, #428]	; (3158 <LedTaskSetup+0x218>)
    2faa:	2013      	movs	r0, #19
    2fac:	f001 fb72 	bl	4694 <am_hal_gpio_int_register>

    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
    2fb0:	f3ef 8310 	mrs	r3, PRIMASK
    2fb4:	617b      	str	r3, [r7, #20]
    2fb6:	b672      	cpsid	i
    2fb8:	4b68      	ldr	r3, [pc, #416]	; (315c <LedTaskSetup+0x21c>)
    2fba:	2273      	movs	r2, #115	; 0x73
    2fbc:	601a      	str	r2, [r3, #0]
    2fbe:	4a68      	ldr	r2, [pc, #416]	; (3160 <LedTaskSetup+0x220>)
    2fc0:	4b67      	ldr	r3, [pc, #412]	; (3160 <LedTaskSetup+0x220>)
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	f023 0307 	bic.w	r3, r3, #7
    2fc8:	6013      	str	r3, [r2, #0]
    2fca:	4a66      	ldr	r2, [pc, #408]	; (3164 <LedTaskSetup+0x224>)
    2fcc:	4b65      	ldr	r3, [pc, #404]	; (3164 <LedTaskSetup+0x224>)
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2fd4:	f043 031a 	orr.w	r3, r3, #26
    2fd8:	6013      	str	r3, [r2, #0]
    2fda:	4a63      	ldr	r2, [pc, #396]	; (3168 <LedTaskSetup+0x228>)
    2fdc:	4b62      	ldr	r3, [pc, #392]	; (3168 <LedTaskSetup+0x228>)
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2fe4:	6013      	str	r3, [r2, #0]
    2fe6:	4b5d      	ldr	r3, [pc, #372]	; (315c <LedTaskSetup+0x21c>)
    2fe8:	2200      	movs	r2, #0
    2fea:	601a      	str	r2, [r3, #0]
    2fec:	697b      	ldr	r3, [r7, #20]
    2fee:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_INPUT);
    2ff2:	f3ef 8310 	mrs	r3, PRIMASK
    2ff6:	613b      	str	r3, [r7, #16]
    2ff8:	b672      	cpsid	i
    2ffa:	4b58      	ldr	r3, [pc, #352]	; (315c <LedTaskSetup+0x21c>)
    2ffc:	2273      	movs	r2, #115	; 0x73
    2ffe:	601a      	str	r2, [r3, #0]
    3000:	4a57      	ldr	r2, [pc, #348]	; (3160 <LedTaskSetup+0x220>)
    3002:	4b57      	ldr	r3, [pc, #348]	; (3160 <LedTaskSetup+0x220>)
    3004:	681b      	ldr	r3, [r3, #0]
    3006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    300a:	6013      	str	r3, [r2, #0]
    300c:	4a55      	ldr	r2, [pc, #340]	; (3164 <LedTaskSetup+0x224>)
    300e:	4b55      	ldr	r3, [pc, #340]	; (3164 <LedTaskSetup+0x224>)
    3010:	681b      	ldr	r3, [r3, #0]
    3012:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    3016:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
    301a:	6013      	str	r3, [r2, #0]
    301c:	4a52      	ldr	r2, [pc, #328]	; (3168 <LedTaskSetup+0x228>)
    301e:	4b52      	ldr	r3, [pc, #328]	; (3168 <LedTaskSetup+0x228>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    3026:	6013      	str	r3, [r2, #0]
    3028:	4b4c      	ldr	r3, [pc, #304]	; (315c <LedTaskSetup+0x21c>)
    302a:	2200      	movs	r2, #0
    302c:	601a      	str	r2, [r3, #0]
    302e:	693b      	ldr	r3, [r7, #16]
    3030:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_INPUT);
    3034:	f3ef 8310 	mrs	r3, PRIMASK
    3038:	60fb      	str	r3, [r7, #12]
    303a:	b672      	cpsid	i
    303c:	4b47      	ldr	r3, [pc, #284]	; (315c <LedTaskSetup+0x21c>)
    303e:	2273      	movs	r2, #115	; 0x73
    3040:	601a      	str	r2, [r3, #0]
    3042:	4a47      	ldr	r2, [pc, #284]	; (3160 <LedTaskSetup+0x220>)
    3044:	4b46      	ldr	r3, [pc, #280]	; (3160 <LedTaskSetup+0x220>)
    3046:	681b      	ldr	r3, [r3, #0]
    3048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    304c:	6013      	str	r3, [r2, #0]
    304e:	4a45      	ldr	r2, [pc, #276]	; (3164 <LedTaskSetup+0x224>)
    3050:	4b44      	ldr	r3, [pc, #272]	; (3164 <LedTaskSetup+0x224>)
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3058:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    305c:	6013      	str	r3, [r2, #0]
    305e:	4a42      	ldr	r2, [pc, #264]	; (3168 <LedTaskSetup+0x228>)
    3060:	4b41      	ldr	r3, [pc, #260]	; (3168 <LedTaskSetup+0x228>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3068:	6013      	str	r3, [r2, #0]
    306a:	4b3c      	ldr	r3, [pc, #240]	; (315c <LedTaskSetup+0x21c>)
    306c:	2200      	movs	r2, #0
    306e:	601a      	str	r2, [r3, #0]
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	f383 8810 	msr	PRIMASK, r3

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
    3076:	f3ef 8310 	mrs	r3, PRIMASK
    307a:	60bb      	str	r3, [r7, #8]
    307c:	b672      	cpsid	i
    307e:	4b37      	ldr	r3, [pc, #220]	; (315c <LedTaskSetup+0x21c>)
    3080:	2273      	movs	r2, #115	; 0x73
    3082:	601a      	str	r2, [r3, #0]
    3084:	4a36      	ldr	r2, [pc, #216]	; (3160 <LedTaskSetup+0x220>)
    3086:	4b36      	ldr	r3, [pc, #216]	; (3160 <LedTaskSetup+0x220>)
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	f023 0308 	bic.w	r3, r3, #8
    308e:	6013      	str	r3, [r2, #0]
    3090:	4b32      	ldr	r3, [pc, #200]	; (315c <LedTaskSetup+0x21c>)
    3092:	2200      	movs	r2, #0
    3094:	601a      	str	r2, [r3, #0]
    3096:	68bb      	ldr	r3, [r7, #8]
    3098:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_RISING);
    309c:	f3ef 8310 	mrs	r3, PRIMASK
    30a0:	607b      	str	r3, [r7, #4]
    30a2:	b672      	cpsid	i
    30a4:	4b2d      	ldr	r3, [pc, #180]	; (315c <LedTaskSetup+0x21c>)
    30a6:	2273      	movs	r2, #115	; 0x73
    30a8:	601a      	str	r2, [r3, #0]
    30aa:	4a2d      	ldr	r2, [pc, #180]	; (3160 <LedTaskSetup+0x220>)
    30ac:	4b2c      	ldr	r3, [pc, #176]	; (3160 <LedTaskSetup+0x220>)
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    30b4:	6013      	str	r3, [r2, #0]
    30b6:	4b29      	ldr	r3, [pc, #164]	; (315c <LedTaskSetup+0x21c>)
    30b8:	2200      	movs	r2, #0
    30ba:	601a      	str	r2, [r3, #0]
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	f383 8810 	msr	PRIMASK, r3
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_RISING);
    30c2:	f3ef 8310 	mrs	r3, PRIMASK
    30c6:	603b      	str	r3, [r7, #0]
    30c8:	b672      	cpsid	i
    30ca:	4b24      	ldr	r3, [pc, #144]	; (315c <LedTaskSetup+0x21c>)
    30cc:	2273      	movs	r2, #115	; 0x73
    30ce:	601a      	str	r2, [r3, #0]
    30d0:	4a23      	ldr	r2, [pc, #140]	; (3160 <LedTaskSetup+0x220>)
    30d2:	4b23      	ldr	r3, [pc, #140]	; (3160 <LedTaskSetup+0x220>)
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    30da:	6013      	str	r3, [r2, #0]
    30dc:	4b1f      	ldr	r3, [pc, #124]	; (315c <LedTaskSetup+0x21c>)
    30de:	2200      	movs	r2, #0
    30e0:	601a      	str	r2, [r3, #0]
    30e2:	683b      	ldr	r3, [r7, #0]
    30e4:	f383 8810 	msr	PRIMASK, r3

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    30e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    30ec:	f04f 0100 	mov.w	r1, #0
    30f0:	f001 fa62 	bl	45b8 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    30f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    30f8:	f04f 0100 	mov.w	r1, #0
    30fc:	f001 fa5c 	bl	45b8 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    3100:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3104:	f04f 0100 	mov.w	r1, #0
    3108:	f001 fa56 	bl	45b8 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    310c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3110:	f04f 0100 	mov.w	r1, #0
    3114:	f001 fa40 	bl	4598 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    3118:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    311c:	f04f 0100 	mov.w	r1, #0
    3120:	f001 fa3a 	bl	4598 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    3124:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3128:	f04f 0100 	mov.w	r1, #0
    312c:	f001 fa34 	bl	4598 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    3130:	201c      	movs	r0, #28
    3132:	f001 fac5 	bl	46c0 <am_hal_interrupt_enable>


    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    3136:	f001 fb0b 	bl	4750 <am_hal_interrupt_master_enable>

}
    313a:	bf00      	nop
    313c:	3718      	adds	r7, #24
    313e:	46bd      	mov	sp, r7
    3140:	bd80      	pop	{r7, pc}
    3142:	bf00      	nop
    3144:	00004f1c 	.word	0x00004f1c
    3148:	100065d0 	.word	0x100065d0
    314c:	10002308 	.word	0x10002308
    3150:	00002e5d 	.word	0x00002e5d
    3154:	00002ea9 	.word	0x00002ea9
    3158:	00002ef5 	.word	0x00002ef5
    315c:	40010060 	.word	0x40010060
    3160:	40010048 	.word	0x40010048
    3164:	40010010 	.word	0x40010010
    3168:	400100f0 	.word	0x400100f0

0000316c <LedTask>:
// Short Description.
//
//*****************************************************************************
void
LedTask(void *pvParameters)
{
    316c:	b580      	push	{r7, lr}
    316e:	b086      	sub	sp, #24
    3170:	af02      	add	r7, sp, #8
    3172:	6078      	str	r0, [r7, #4]
    while (1)
    {
        //
        // Wait for an event to be posted to the LED Event Handle.
        //
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    3174:	4b14      	ldr	r3, [pc, #80]	; (31c8 <LedTask+0x5c>)
    3176:	6818      	ldr	r0, [r3, #0]
    3178:	f04f 33ff 	mov.w	r3, #4294967295
    317c:	9300      	str	r3, [sp, #0]
    317e:	2300      	movs	r3, #0
    3180:	2201      	movs	r2, #1
    3182:	2107      	movs	r1, #7
    3184:	f7fd fbe8 	bl	958 <xEventGroupWaitBits>
    3188:	60f8      	str	r0, [r7, #12]
                            pdFALSE, portMAX_DELAY);
        if (bitSet != 0)
    318a:	68fb      	ldr	r3, [r7, #12]
    318c:	2b00      	cmp	r3, #0
    318e:	d0f1      	beq.n	3174 <LedTask+0x8>
        {
            // Button Press Event received
            // Toggle respective LED(s)
            if (bitSet & (1 << 0))
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	f003 0301 	and.w	r3, r3, #1
    3196:	2b00      	cmp	r3, #0
    3198:	d003      	beq.n	31a2 <LedTask+0x36>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 0);
    319a:	2100      	movs	r1, #0
    319c:	480b      	ldr	r0, [pc, #44]	; (31cc <LedTask+0x60>)
    319e:	f7ff fd69 	bl	2c74 <am_devices_led_toggle>
            }
            if (bitSet & (1 << 1))
    31a2:	68fb      	ldr	r3, [r7, #12]
    31a4:	f003 0302 	and.w	r3, r3, #2
    31a8:	2b00      	cmp	r3, #0
    31aa:	d003      	beq.n	31b4 <LedTask+0x48>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 1);
    31ac:	2101      	movs	r1, #1
    31ae:	4807      	ldr	r0, [pc, #28]	; (31cc <LedTask+0x60>)
    31b0:	f7ff fd60 	bl	2c74 <am_devices_led_toggle>
            }
            if (bitSet & (1 << 2))
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	f003 0304 	and.w	r3, r3, #4
    31ba:	2b00      	cmp	r3, #0
    31bc:	d0da      	beq.n	3174 <LedTask+0x8>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 2);
    31be:	2102      	movs	r1, #2
    31c0:	4802      	ldr	r0, [pc, #8]	; (31cc <LedTask+0x60>)
    31c2:	f7ff fd57 	bl	2c74 <am_devices_led_toggle>
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    31c6:	e7d5      	b.n	3174 <LedTask+0x8>
    31c8:	100065d0 	.word	0x100065d0
    31cc:	10002308 	.word	0x10002308

000031d0 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b082      	sub	sp, #8
    31d4:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
    31d6:	2000      	movs	r0, #0
    31d8:	f001 f9b0 	bl	453c <am_hal_ctimer_int_status_get>
    31dc:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
    31de:	6878      	ldr	r0, [r7, #4]
    31e0:	f001 f9a6 	bl	4530 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
    31e4:	6878      	ldr	r0, [r7, #4]
    31e6:	f001 f919 	bl	441c <am_hal_ctimer_int_service>
}
    31ea:	bf00      	nop
    31ec:	3708      	adds	r7, #8
    31ee:	46bd      	mov	sp, r7
    31f0:	bd80      	pop	{r7, pc}

000031f2 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
    31f2:	b580      	push	{r7, lr}
    31f4:	b082      	sub	sp, #8
    31f6:	af00      	add	r7, sp, #0
    31f8:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    31fa:	2001      	movs	r0, #1
    31fc:	f001 fd52 	bl	4ca4 <am_hal_sysctrl_sleep>
    return 0;
    3200:	2300      	movs	r3, #0
}
    3202:	4618      	mov	r0, r3
    3204:	3708      	adds	r7, #8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}

0000320a <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
    320a:	b480      	push	{r7}
    320c:	b083      	sub	sp, #12
    320e:	af00      	add	r7, sp, #0
    3210:	6078      	str	r0, [r7, #4]
    return;
    3212:	bf00      	nop
}
    3214:	370c      	adds	r7, #12
    3216:	46bd      	mov	sp, r7
    3218:	f85d 7b04 	ldr.w	r7, [sp], #4
    321c:	4770      	bx	lr

0000321e <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
    321e:	b480      	push	{r7}
    3220:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
    3222:	e7fe      	b.n	3222 <vApplicationMallocFailedHook+0x4>

00003224 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    3224:	b480      	push	{r7}
    3226:	b083      	sub	sp, #12
    3228:	af00      	add	r7, sp, #0
    322a:	6078      	str	r0, [r7, #4]
    322c:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
    322e:	be00      	bkpt	0x0000
    3230:	e7fd      	b.n	322e <vApplicationStackOverflowHook+0xa>
	...

00003234 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
    3234:	b580      	push	{r7, lr}
    3236:	b084      	sub	sp, #16
    3238:	af02      	add	r7, sp, #8
    323a:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
    323c:	480a      	ldr	r0, [pc, #40]	; (3268 <setup_task+0x34>)
    323e:	f000 ff75 	bl	412c <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    LedTaskSetup();
    3242:	f7ff fe7d 	bl	2f40 <LedTaskSetup>
    disable_print_interface();
    3246:	f7ff fd9f 	bl	2d88 <disable_print_interface>
    //
    // Create the functional tasks
    //
    xTaskCreate(LedTask, "LEDTask", 512, 0, 3, &led_task_handle);
    324a:	4b08      	ldr	r3, [pc, #32]	; (326c <setup_task+0x38>)
    324c:	9301      	str	r3, [sp, #4]
    324e:	2303      	movs	r3, #3
    3250:	9300      	str	r3, [sp, #0]
    3252:	2300      	movs	r3, #0
    3254:	f44f 7200 	mov.w	r2, #512	; 0x200
    3258:	4905      	ldr	r1, [pc, #20]	; (3270 <setup_task+0x3c>)
    325a:	4806      	ldr	r0, [pc, #24]	; (3274 <setup_task+0x40>)
    325c:	f7fe f990 	bl	1580 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
    3260:	2000      	movs	r0, #0
    3262:	f7fe fab1 	bl	17c8 <vTaskSuspend>

    while (1);
    3266:	e7fe      	b.n	3266 <setup_task+0x32>
    3268:	00004f30 	.word	0x00004f30
    326c:	100065d4 	.word	0x100065d4
    3270:	00004f4c 	.word	0x00004f4c
    3274:	0000316d 	.word	0x0000316d

00003278 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 128, 0, 3, &xSetupTask);
    327e:	4b07      	ldr	r3, [pc, #28]	; (329c <run_tasks+0x24>)
    3280:	9301      	str	r3, [sp, #4]
    3282:	2303      	movs	r3, #3
    3284:	9300      	str	r3, [sp, #0]
    3286:	2300      	movs	r3, #0
    3288:	2280      	movs	r2, #128	; 0x80
    328a:	4905      	ldr	r1, [pc, #20]	; (32a0 <run_tasks+0x28>)
    328c:	4805      	ldr	r0, [pc, #20]	; (32a4 <run_tasks+0x2c>)
    328e:	f7fe f977 	bl	1580 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
    3292:	f7fe fafb 	bl	188c <vTaskStartScheduler>
}
    3296:	bf00      	nop
    3298:	46bd      	mov	sp, r7
    329a:	bd80      	pop	{r7, pc}
    329c:	100065d8 	.word	0x100065d8
    32a0:	00004f54 	.word	0x00004f54
    32a4:	00003235 	.word	0x00003235

000032a8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    32a8:	4811      	ldr	r0, [pc, #68]	; (32f0 <zero_loop+0x12>)
    32aa:	4912      	ldr	r1, [pc, #72]	; (32f4 <zero_loop+0x16>)
    32ac:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    32ae:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    32b2:	4811      	ldr	r0, [pc, #68]	; (32f8 <zero_loop+0x1a>)
    32b4:	6801      	ldr	r1, [r0, #0]
    32b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    32ba:	6001      	str	r1, [r0, #0]
    32bc:	f3bf 8f4f 	dsb	sy
    32c0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    32c4:	480d      	ldr	r0, [pc, #52]	; (32fc <zero_loop+0x1e>)
    32c6:	490e      	ldr	r1, [pc, #56]	; (3300 <zero_loop+0x22>)
    32c8:	4a0e      	ldr	r2, [pc, #56]	; (3304 <zero_loop+0x26>)

000032ca <copy_loop>:
    32ca:	f850 3b04 	ldr.w	r3, [r0], #4
    32ce:	f841 3b04 	str.w	r3, [r1], #4
    32d2:	4291      	cmp	r1, r2
    32d4:	dbf9      	blt.n	32ca <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    32d6:	480c      	ldr	r0, [pc, #48]	; (3308 <zero_loop+0x2a>)
    32d8:	490c      	ldr	r1, [pc, #48]	; (330c <zero_loop+0x2e>)
    32da:	f04f 0200 	mov.w	r2, #0

000032de <zero_loop>:
    32de:	4288      	cmp	r0, r1
    32e0:	bfb8      	it	lt
    32e2:	f840 2b04 	strlt.w	r2, [r0], #4
    32e6:	dbfa      	blt.n	32de <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    32e8:	f7ff fd56 	bl	2d98 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    32ec:	be00      	bkpt	0x0000
}
    32ee:	bf00      	nop
    32f0:	e000ed08 	.word	0xe000ed08
    32f4:	00000000 	.word	0x00000000
    32f8:	e000ed88 	.word	0xe000ed88
    32fc:	00005014 	.word	0x00005014
    3300:	10002300 	.word	0x10002300
    3304:	10002380 	.word	0x10002380
    3308:	10002380 	.word	0x10002380
    330c:	10006720 	.word	0x10006720

00003310 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    3310:	b480      	push	{r7}
    3312:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    3314:	e7fe      	b.n	3314 <am_nmi_isr+0x4>

00003316 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    3316:	b480      	push	{r7}
    3318:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    331a:	e7fe      	b.n	331a <am_adc_isr+0x4>

0000331c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    331c:	b580      	push	{r7, lr}
    331e:	b084      	sub	sp, #16
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
    3324:	f001 f860 	bl	43e8 <am_hal_clkgen_sysclk_get>
    3328:	4602      	mov	r2, r0
    332a:	4b07      	ldr	r3, [pc, #28]	; (3348 <am_util_delay_ms+0x2c>)
    332c:	fba3 2302 	umull	r2, r3, r3, r2
    3330:	099b      	lsrs	r3, r3, #6
    uint32_t ui32Loops = ui32MilliSeconds *
    3332:	687a      	ldr	r2, [r7, #4]
    3334:	fb02 f303 	mul.w	r3, r2, r3
    3338:	60fb      	str	r3, [r7, #12]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    333a:	68f8      	ldr	r0, [r7, #12]
    333c:	f001 f918 	bl	4570 <am_hal_flash_delay>
}
    3340:	bf00      	nop
    3342:	3710      	adds	r7, #16
    3344:	46bd      	mov	sp, r7
    3346:	bd80      	pop	{r7, pc}
    3348:	057619f1 	.word	0x057619f1

0000334c <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    334c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    334e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    3350:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    3352:	f000 f809 	bl	3368 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    3356:	bd01      	pop	{r0, pc}
}
    3358:	bf00      	nop
    335a:	4618      	mov	r0, r3

0000335c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    335c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    335e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    3360:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    3362:	4770      	bx	lr
}
    3364:	bf00      	nop
    3366:	4618      	mov	r0, r3

00003368 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    3368:	b580      	push	{r7, lr}
    336a:	b096      	sub	sp, #88	; 0x58
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3370:	f107 030c 	add.w	r3, r7, #12
    3374:	2200      	movs	r2, #0
    3376:	601a      	str	r2, [r3, #0]
    3378:	605a      	str	r2, [r3, #4]
    337a:	609a      	str	r2, [r3, #8]
    337c:	60da      	str	r2, [r3, #12]
    337e:	611a      	str	r2, [r3, #16]
    3380:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
    3382:	2300      	movs	r3, #0
    3384:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    3386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3388:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    338a:	4b2e      	ldr	r3, [pc, #184]	; (3444 <am_util_faultisr_collect_data+0xdc>)
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    3390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3392:	b2db      	uxtb	r3, r3
    3394:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    3398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    339a:	0a1b      	lsrs	r3, r3, #8
    339c:	b2db      	uxtb	r3, r3
    339e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    33a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33a4:	0c1b      	lsrs	r3, r3, #16
    33a6:	b29b      	uxth	r3, r3
    33a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    33ac:	4b26      	ldr	r3, [pc, #152]	; (3448 <am_util_faultisr_collect_data+0xe0>)
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    33b2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    33b6:	b2db      	uxtb	r3, r3
    33b8:	f003 0302 	and.w	r3, r3, #2
    33bc:	2b00      	cmp	r3, #0
    33be:	d005      	beq.n	33cc <am_util_faultisr_collect_data+0x64>
    33c0:	6879      	ldr	r1, [r7, #4]
    33c2:	2006      	movs	r0, #6
    33c4:	f7ff ffca 	bl	335c <getStackedReg>
    33c8:	4603      	mov	r3, r0
    33ca:	e001      	b.n	33d0 <am_util_faultisr_collect_data+0x68>
    33cc:	f04f 33ff 	mov.w	r3, #4294967295
    33d0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    33d2:	6879      	ldr	r1, [r7, #4]
    33d4:	2000      	movs	r0, #0
    33d6:	f7ff ffc1 	bl	335c <getStackedReg>
    33da:	4603      	mov	r3, r0
    33dc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    33de:	6879      	ldr	r1, [r7, #4]
    33e0:	2001      	movs	r0, #1
    33e2:	f7ff ffbb 	bl	335c <getStackedReg>
    33e6:	4603      	mov	r3, r0
    33e8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    33ea:	6879      	ldr	r1, [r7, #4]
    33ec:	2002      	movs	r0, #2
    33ee:	f7ff ffb5 	bl	335c <getStackedReg>
    33f2:	4603      	mov	r3, r0
    33f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    33f6:	6879      	ldr	r1, [r7, #4]
    33f8:	2003      	movs	r0, #3
    33fa:	f7ff ffaf 	bl	335c <getStackedReg>
    33fe:	4603      	mov	r3, r0
    3400:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3402:	6879      	ldr	r1, [r7, #4]
    3404:	2004      	movs	r0, #4
    3406:	f7ff ffa9 	bl	335c <getStackedReg>
    340a:	4603      	mov	r3, r0
    340c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    340e:	6879      	ldr	r1, [r7, #4]
    3410:	2005      	movs	r0, #5
    3412:	f7ff ffa3 	bl	335c <getStackedReg>
    3416:	4603      	mov	r3, r0
    3418:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    341a:	6879      	ldr	r1, [r7, #4]
    341c:	2006      	movs	r0, #6
    341e:	f7ff ff9d 	bl	335c <getStackedReg>
    3422:	4603      	mov	r3, r0
    3424:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3426:	6879      	ldr	r1, [r7, #4]
    3428:	2007      	movs	r0, #7
    342a:	f7ff ff97 	bl	335c <getStackedReg>
    342e:	4603      	mov	r3, r0
    3430:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3432:	f107 030c 	add.w	r3, r7, #12
    3436:	4618      	mov	r0, r3
    3438:	f001 fa14 	bl	4864 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    343c:	2300      	movs	r3, #0
    343e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    3440:	e7fe      	b.n	3440 <am_util_faultisr_collect_data+0xd8>
    3442:	bf00      	nop
    3444:	e000ed28 	.word	0xe000ed28
    3448:	e000ed38 	.word	0xe000ed38

0000344c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    344c:	b480      	push	{r7}
    344e:	b083      	sub	sp, #12
    3450:	af00      	add	r7, sp, #0
    3452:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    3454:	4a04      	ldr	r2, [pc, #16]	; (3468 <am_util_stdio_printf_init+0x1c>)
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	6013      	str	r3, [r2, #0]
}
    345a:	bf00      	nop
    345c:	370c      	adds	r7, #12
    345e:	46bd      	mov	sp, r7
    3460:	f85d 7b04 	ldr.w	r7, [sp], #4
    3464:	4770      	bx	lr
    3466:	bf00      	nop
    3468:	100065dc 	.word	0x100065dc

0000346c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    346c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3470:	b096      	sub	sp, #88	; 0x58
    3472:	af00      	add	r7, sp, #0
    3474:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3478:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    347c:	0025      	movs	r5, r4
    347e:	2600      	movs	r6, #0
    3480:	ea55 0306 	orrs.w	r3, r5, r6
    3484:	f000 80a0 	beq.w	35c8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    3488:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    348c:	0862      	lsrs	r2, r4, #1
    348e:	ea4f 0133 	mov.w	r1, r3, rrx
    3492:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    3496:	ea4f 0893 	mov.w	r8, r3, lsr #2
    349a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    349e:	ea4f 0994 	mov.w	r9, r4, lsr #2
    34a2:	eb11 0308 	adds.w	r3, r1, r8
    34a6:	eb42 0409 	adc.w	r4, r2, r9
    34aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    34ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34b2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    34b6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    34ba:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    34be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34c2:	eb13 030a 	adds.w	r3, r3, sl
    34c6:	eb44 040b 	adc.w	r4, r4, fp
    34ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    34ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34d2:	0a1a      	lsrs	r2, r3, #8
    34d4:	62ba      	str	r2, [r7, #40]	; 0x28
    34d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    34d8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    34dc:	62ba      	str	r2, [r7, #40]	; 0x28
    34de:	0a23      	lsrs	r3, r4, #8
    34e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    34e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    34ea:	18c9      	adds	r1, r1, r3
    34ec:	eb42 0204 	adc.w	r2, r2, r4
    34f0:	460b      	mov	r3, r1
    34f2:	4614      	mov	r4, r2
    34f4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    34f8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34fc:	0c1a      	lsrs	r2, r3, #16
    34fe:	623a      	str	r2, [r7, #32]
    3500:	6a3a      	ldr	r2, [r7, #32]
    3502:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    3506:	623a      	str	r2, [r7, #32]
    3508:	0c23      	lsrs	r3, r4, #16
    350a:	627b      	str	r3, [r7, #36]	; 0x24
    350c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3510:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    3514:	18c9      	adds	r1, r1, r3
    3516:	eb42 0204 	adc.w	r2, r2, r4
    351a:	460b      	mov	r3, r1
    351c:	4614      	mov	r4, r2
    351e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    3522:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3526:	0023      	movs	r3, r4
    3528:	603b      	str	r3, [r7, #0]
    352a:	2300      	movs	r3, #0
    352c:	607b      	str	r3, [r7, #4]
    352e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3532:	e897 0006 	ldmia.w	r7, {r1, r2}
    3536:	18c9      	adds	r1, r1, r3
    3538:	eb42 0204 	adc.w	r2, r2, r4
    353c:	460b      	mov	r3, r1
    353e:	4614      	mov	r4, r2
    3540:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    3544:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3548:	08da      	lsrs	r2, r3, #3
    354a:	613a      	str	r2, [r7, #16]
    354c:	693a      	ldr	r2, [r7, #16]
    354e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    3552:	613a      	str	r2, [r7, #16]
    3554:	08e3      	lsrs	r3, r4, #3
    3556:	617b      	str	r3, [r7, #20]
    3558:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    355c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    3560:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    3564:	460b      	mov	r3, r1
    3566:	4614      	mov	r4, r2
    3568:	00a0      	lsls	r0, r4, #2
    356a:	60f8      	str	r0, [r7, #12]
    356c:	68f8      	ldr	r0, [r7, #12]
    356e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    3572:	60f8      	str	r0, [r7, #12]
    3574:	009b      	lsls	r3, r3, #2
    3576:	60bb      	str	r3, [r7, #8]
    3578:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    357c:	185b      	adds	r3, r3, r1
    357e:	eb44 0402 	adc.w	r4, r4, r2
    3582:	18db      	adds	r3, r3, r3
    3584:	eb44 0404 	adc.w	r4, r4, r4
    3588:	4619      	mov	r1, r3
    358a:	4622      	mov	r2, r4
    358c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    3590:	1a5b      	subs	r3, r3, r1
    3592:	eb64 0402 	sbc.w	r4, r4, r2
    3596:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    359a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    359e:	3306      	adds	r3, #6
    35a0:	f144 0400 	adc.w	r4, r4, #0
    35a4:	091a      	lsrs	r2, r3, #4
    35a6:	61ba      	str	r2, [r7, #24]
    35a8:	69ba      	ldr	r2, [r7, #24]
    35aa:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    35ae:	61ba      	str	r2, [r7, #24]
    35b0:	0923      	lsrs	r3, r4, #4
    35b2:	61fb      	str	r3, [r7, #28]
    35b4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    35b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    35bc:	18c9      	adds	r1, r1, r3
    35be:	eb42 0204 	adc.w	r2, r2, r4
    35c2:	460b      	mov	r3, r1
    35c4:	4614      	mov	r4, r2
    35c6:	e029      	b.n	361c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    35c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35ca:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    35cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35ce:	085a      	lsrs	r2, r3, #1
    35d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35d2:	089b      	lsrs	r3, r3, #2
    35d4:	4413      	add	r3, r2
    35d6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    35d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35da:	091b      	lsrs	r3, r3, #4
    35dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35de:	4413      	add	r3, r2
    35e0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    35e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35e4:	0a1b      	lsrs	r3, r3, #8
    35e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35e8:	4413      	add	r3, r2
    35ea:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    35ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35ee:	0c1b      	lsrs	r3, r3, #16
    35f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35f2:	4413      	add	r3, r2
    35f4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    35f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35f8:	08db      	lsrs	r3, r3, #3
    35fa:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    35fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35fe:	4613      	mov	r3, r2
    3600:	009b      	lsls	r3, r3, #2
    3602:	4413      	add	r3, r2
    3604:	005b      	lsls	r3, r3, #1
    3606:	461a      	mov	r2, r3
    3608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    360a:	1a9b      	subs	r3, r3, r2
    360c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3610:	3306      	adds	r3, #6
    3612:	091a      	lsrs	r2, r3, #4
    3614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3616:	4413      	add	r3, r2
    3618:	f04f 0400 	mov.w	r4, #0
    }
}
    361c:	4618      	mov	r0, r3
    361e:	4621      	mov	r1, r4
    3620:	3758      	adds	r7, #88	; 0x58
    3622:	46bd      	mov	sp, r7
    3624:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3628:	4770      	bx	lr

0000362a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    362a:	b590      	push	{r4, r7, lr}
    362c:	b085      	sub	sp, #20
    362e:	af00      	add	r7, sp, #0
    3630:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    3634:	683a      	ldr	r2, [r7, #0]
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	4313      	orrs	r3, r2
    363a:	2b00      	cmp	r3, #0
    363c:	bf0c      	ite	eq
    363e:	2301      	moveq	r3, #1
    3640:	2300      	movne	r3, #0
    3642:	b2db      	uxtb	r3, r3
    3644:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    3646:	e008      	b.n	365a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    3648:	e9d7 0100 	ldrd	r0, r1, [r7]
    364c:	f7ff ff0e 	bl	346c <divu64_10>
    3650:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    3654:	68fb      	ldr	r3, [r7, #12]
    3656:	3301      	adds	r3, #1
    3658:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    365a:	e897 0018 	ldmia.w	r7, {r3, r4}
    365e:	4323      	orrs	r3, r4
    3660:	d1f2      	bne.n	3648 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    3662:	68fb      	ldr	r3, [r7, #12]
}
    3664:	4618      	mov	r0, r3
    3666:	3714      	adds	r7, #20
    3668:	46bd      	mov	sp, r7
    366a:	bd90      	pop	{r4, r7, pc}

0000366c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    366c:	b590      	push	{r4, r7, lr}
    366e:	b083      	sub	sp, #12
    3670:	af00      	add	r7, sp, #0
    3672:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    3676:	e897 0018 	ldmia.w	r7, {r3, r4}
    367a:	2b00      	cmp	r3, #0
    367c:	f174 0300 	sbcs.w	r3, r4, #0
    3680:	da06      	bge.n	3690 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    3682:	e897 0018 	ldmia.w	r7, {r3, r4}
    3686:	425b      	negs	r3, r3
    3688:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    368c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    3690:	e897 0018 	ldmia.w	r7, {r3, r4}
    3694:	4618      	mov	r0, r3
    3696:	4621      	mov	r1, r4
    3698:	f7ff ffc7 	bl	362a <ndigits_in_u64>
    369c:	4603      	mov	r3, r0
}
    369e:	4618      	mov	r0, r3
    36a0:	370c      	adds	r7, #12
    36a2:	46bd      	mov	sp, r7
    36a4:	bd90      	pop	{r4, r7, pc}

000036a6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    36a6:	b490      	push	{r4, r7}
    36a8:	b084      	sub	sp, #16
    36aa:	af00      	add	r7, sp, #0
    36ac:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    36b0:	6839      	ldr	r1, [r7, #0]
    36b2:	687a      	ldr	r2, [r7, #4]
    36b4:	430a      	orrs	r2, r1
    36b6:	2a00      	cmp	r2, #0
    36b8:	bf0c      	ite	eq
    36ba:	2201      	moveq	r2, #1
    36bc:	2200      	movne	r2, #0
    36be:	b2d2      	uxtb	r2, r2
    36c0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    36c2:	e00a      	b.n	36da <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    36c4:	e897 0006 	ldmia.w	r7, {r1, r2}
    36c8:	090b      	lsrs	r3, r1, #4
    36ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    36ce:	0914      	lsrs	r4, r2, #4
    36d0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    36d4:	68fa      	ldr	r2, [r7, #12]
    36d6:	3201      	adds	r2, #1
    36d8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    36da:	e897 0006 	ldmia.w	r7, {r1, r2}
    36de:	430a      	orrs	r2, r1
    36e0:	d1f0      	bne.n	36c4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    36e2:	68fb      	ldr	r3, [r7, #12]
}
    36e4:	4618      	mov	r0, r3
    36e6:	3710      	adds	r7, #16
    36e8:	46bd      	mov	sp, r7
    36ea:	bc90      	pop	{r4, r7}
    36ec:	4770      	bx	lr

000036ee <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    36ee:	b480      	push	{r7}
    36f0:	b087      	sub	sp, #28
    36f2:	af00      	add	r7, sp, #0
    36f4:	6078      	str	r0, [r7, #4]
    36f6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    36f8:	2300      	movs	r3, #0
    36fa:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    36fc:	2300      	movs	r3, #0
    36fe:	613b      	str	r3, [r7, #16]
    3700:	2300      	movs	r3, #0
    3702:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	2b2d      	cmp	r3, #45	; 0x2d
    370a:	d11b      	bne.n	3744 <decstr_to_int+0x56>
    {
        bNeg = true;
    370c:	2301      	movs	r3, #1
    370e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	3301      	adds	r3, #1
    3714:	607b      	str	r3, [r7, #4]
        uCnt++;
    3716:	68fb      	ldr	r3, [r7, #12]
    3718:	3301      	adds	r3, #1
    371a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    371c:	e012      	b.n	3744 <decstr_to_int+0x56>
    {
        ++uCnt;
    371e:	68fb      	ldr	r3, [r7, #12]
    3720:	3301      	adds	r3, #1
    3722:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    3724:	693a      	ldr	r2, [r7, #16]
    3726:	4613      	mov	r3, r2
    3728:	009b      	lsls	r3, r3, #2
    372a:	4413      	add	r3, r2
    372c:	005b      	lsls	r3, r3, #1
    372e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	781b      	ldrb	r3, [r3, #0]
    3734:	461a      	mov	r2, r3
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	4413      	add	r3, r2
    373a:	3b30      	subs	r3, #48	; 0x30
    373c:	613b      	str	r3, [r7, #16]
        pcStr++;
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	3301      	adds	r3, #1
    3742:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3744:	687b      	ldr	r3, [r7, #4]
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	2b2f      	cmp	r3, #47	; 0x2f
    374a:	d903      	bls.n	3754 <decstr_to_int+0x66>
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	2b39      	cmp	r3, #57	; 0x39
    3752:	d9e4      	bls.n	371e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	2b00      	cmp	r3, #0
    3758:	d002      	beq.n	3760 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    375a:	683b      	ldr	r3, [r7, #0]
    375c:	68fa      	ldr	r2, [r7, #12]
    375e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    3760:	7dfb      	ldrb	r3, [r7, #23]
    3762:	2b00      	cmp	r3, #0
    3764:	d002      	beq.n	376c <decstr_to_int+0x7e>
    3766:	693b      	ldr	r3, [r7, #16]
    3768:	425b      	negs	r3, r3
    376a:	e000      	b.n	376e <decstr_to_int+0x80>
    376c:	693b      	ldr	r3, [r7, #16]
}
    376e:	4618      	mov	r0, r3
    3770:	371c      	adds	r7, #28
    3772:	46bd      	mov	sp, r7
    3774:	f85d 7b04 	ldr.w	r7, [sp], #4
    3778:	4770      	bx	lr

0000377a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    377a:	b590      	push	{r4, r7, lr}
    377c:	b091      	sub	sp, #68	; 0x44
    377e:	af00      	add	r7, sp, #0
    3780:	e9c7 0102 	strd	r0, r1, [r7, #8]
    3784:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    3786:	2300      	movs	r3, #0
    3788:	63fb      	str	r3, [r7, #60]	; 0x3c
    378a:	2300      	movs	r3, #0
    378c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    378e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    3792:	f7ff fe6b 	bl	346c <divu64_10>
    3796:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    379a:	68b9      	ldr	r1, [r7, #8]
    379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    379e:	4613      	mov	r3, r2
    37a0:	009b      	lsls	r3, r3, #2
    37a2:	4413      	add	r3, r2
    37a4:	005b      	lsls	r3, r3, #1
    37a6:	1acb      	subs	r3, r1, r3
    37a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    37aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37ac:	1c5a      	adds	r2, r3, #1
    37ae:	63fa      	str	r2, [r7, #60]	; 0x3c
    37b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37b2:	b2d2      	uxtb	r2, r2
    37b4:	3230      	adds	r2, #48	; 0x30
    37b6:	b2d2      	uxtb	r2, r2
    37b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    37bc:	440b      	add	r3, r1
    37be:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    37c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    37c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    37ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    37ce:	4323      	orrs	r3, r4
    37d0:	d1dd      	bne.n	378e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    37d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37d4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	2b00      	cmp	r3, #0
    37da:	d011      	beq.n	3800 <uint64_to_str+0x86>
    {
        while ( ix-- )
    37dc:	e008      	b.n	37f0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	1c5a      	adds	r2, r3, #1
    37e2:	607a      	str	r2, [r7, #4]
    37e4:	f107 0110 	add.w	r1, r7, #16
    37e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    37ea:	440a      	add	r2, r1
    37ec:	7812      	ldrb	r2, [r2, #0]
    37ee:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    37f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37f2:	1e5a      	subs	r2, r3, #1
    37f4:	63fa      	str	r2, [r7, #60]	; 0x3c
    37f6:	2b00      	cmp	r3, #0
    37f8:	d1f1      	bne.n	37de <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	2200      	movs	r2, #0
    37fe:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    3800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    3802:	4618      	mov	r0, r3
    3804:	3744      	adds	r7, #68	; 0x44
    3806:	46bd      	mov	sp, r7
    3808:	bd90      	pop	{r4, r7, pc}

0000380a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    380a:	b4b0      	push	{r4, r5, r7}
    380c:	b08d      	sub	sp, #52	; 0x34
    380e:	af00      	add	r7, sp, #0
    3810:	e9c7 0102 	strd	r0, r1, [r7, #8]
    3814:	607a      	str	r2, [r7, #4]
    3816:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    3818:	2300      	movs	r3, #0
    381a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    381c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    3820:	4313      	orrs	r3, r2
    3822:	d131      	bne.n	3888 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    3824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3826:	1c5a      	adds	r2, r3, #1
    3828:	62fa      	str	r2, [r7, #44]	; 0x2c
    382a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    382e:	4413      	add	r3, r2
    3830:	2230      	movs	r2, #48	; 0x30
    3832:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    3836:	e027      	b.n	3888 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    3838:	7a3b      	ldrb	r3, [r7, #8]
    383a:	f003 030f 	and.w	r3, r3, #15
    383e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    3842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    3846:	2b09      	cmp	r3, #9
    3848:	d90a      	bls.n	3860 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    384a:	78fb      	ldrb	r3, [r7, #3]
    384c:	2b00      	cmp	r3, #0
    384e:	d001      	beq.n	3854 <uint64_to_hexstr+0x4a>
    3850:	2227      	movs	r2, #39	; 0x27
    3852:	e000      	b.n	3856 <uint64_to_hexstr+0x4c>
    3854:	2207      	movs	r2, #7
    3856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    385a:	4413      	add	r3, r2
    385c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    3860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3862:	1c5a      	adds	r2, r3, #1
    3864:	62fa      	str	r2, [r7, #44]	; 0x2c
    3866:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    386a:	3230      	adds	r2, #48	; 0x30
    386c:	b2d2      	uxtb	r2, r2
    386e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    3872:	440b      	add	r3, r1
    3874:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    3878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    387c:	0914      	lsrs	r4, r2, #4
    387e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    3882:	091d      	lsrs	r5, r3, #4
    3884:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    3888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    388c:	4313      	orrs	r3, r2
    388e:	d1d3      	bne.n	3838 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    3890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3892:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	2b00      	cmp	r3, #0
    3898:	d011      	beq.n	38be <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    389a:	e008      	b.n	38ae <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	1c5a      	adds	r2, r3, #1
    38a0:	607a      	str	r2, [r7, #4]
    38a2:	f107 0110 	add.w	r1, r7, #16
    38a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    38a8:	440a      	add	r2, r1
    38aa:	7812      	ldrb	r2, [r2, #0]
    38ac:	701a      	strb	r2, [r3, #0]
        while (ix--)
    38ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38b0:	1e5a      	subs	r2, r3, #1
    38b2:	62fa      	str	r2, [r7, #44]	; 0x2c
    38b4:	2b00      	cmp	r3, #0
    38b6:	d1f1      	bne.n	389c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	2200      	movs	r2, #0
    38bc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    38be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    38c0:	4618      	mov	r0, r3
    38c2:	3734      	adds	r7, #52	; 0x34
    38c4:	46bd      	mov	sp, r7
    38c6:	bcb0      	pop	{r4, r5, r7}
    38c8:	4770      	bx	lr

000038ca <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    38ca:	b480      	push	{r7}
    38cc:	b085      	sub	sp, #20
    38ce:	af00      	add	r7, sp, #0
    38d0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    38d2:	2300      	movs	r3, #0
    38d4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    38d6:	687b      	ldr	r3, [r7, #4]
    38d8:	2b00      	cmp	r3, #0
    38da:	d104      	bne.n	38e6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    38dc:	68fb      	ldr	r3, [r7, #12]
    38de:	e009      	b.n	38f4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    38e0:	68fb      	ldr	r3, [r7, #12]
    38e2:	3301      	adds	r3, #1
    38e4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	1c5a      	adds	r2, r3, #1
    38ea:	607a      	str	r2, [r7, #4]
    38ec:	781b      	ldrb	r3, [r3, #0]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d1f6      	bne.n	38e0 <simple_strlen+0x16>
    }
    return ui32RetVal;
    38f2:	68fb      	ldr	r3, [r7, #12]
}
    38f4:	4618      	mov	r0, r3
    38f6:	3714      	adds	r7, #20
    38f8:	46bd      	mov	sp, r7
    38fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    38fe:	4770      	bx	lr

00003900 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    3900:	b480      	push	{r7}
    3902:	b087      	sub	sp, #28
    3904:	af00      	add	r7, sp, #0
    3906:	60f8      	str	r0, [r7, #12]
    3908:	460b      	mov	r3, r1
    390a:	607a      	str	r2, [r7, #4]
    390c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    390e:	2300      	movs	r3, #0
    3910:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	2b00      	cmp	r3, #0
    3916:	dc0c      	bgt.n	3932 <padbuffer+0x32>
    {
        return i32Cnt;
    3918:	697b      	ldr	r3, [r7, #20]
    391a:	e010      	b.n	393e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	2b00      	cmp	r3, #0
    3920:	d004      	beq.n	392c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    3922:	68fb      	ldr	r3, [r7, #12]
    3924:	1c5a      	adds	r2, r3, #1
    3926:	60fa      	str	r2, [r7, #12]
    3928:	7afa      	ldrb	r2, [r7, #11]
    392a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    392c:	697b      	ldr	r3, [r7, #20]
    392e:	3301      	adds	r3, #1
    3930:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	1e5a      	subs	r2, r3, #1
    3936:	607a      	str	r2, [r7, #4]
    3938:	2b00      	cmp	r3, #0
    393a:	d1ef      	bne.n	391c <padbuffer+0x1c>
    }

    return i32Cnt;
    393c:	697b      	ldr	r3, [r7, #20]
}
    393e:	4618      	mov	r0, r3
    3940:	371c      	adds	r7, #28
    3942:	46bd      	mov	sp, r7
    3944:	f85d 7b04 	ldr.w	r7, [sp], #4
    3948:	4770      	bx	lr
	...

0000394c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    394c:	b590      	push	{r4, r7, lr}
    394e:	b08f      	sub	sp, #60	; 0x3c
    3950:	af00      	add	r7, sp, #0
    3952:	60f8      	str	r0, [r7, #12]
    3954:	60b9      	str	r1, [r7, #8]
    3956:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
    3958:	68bb      	ldr	r3, [r7, #8]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
    395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3960:	2b03      	cmp	r3, #3
    3962:	dc02      	bgt.n	396a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    3964:	f06f 0302 	mvn.w	r3, #2
    3968:	e0d4      	b.n	3b14 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
    396a:	edd7 7a03 	vldr	s15, [r7, #12]
    396e:	eef5 7a40 	vcmp.f32	s15, #0.0
    3972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3976:	d104      	bne.n	3982 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    3978:	68bb      	ldr	r3, [r7, #8]
    397a:	4a68      	ldr	r2, [pc, #416]	; (3b1c <ftoa+0x1d0>)
    397c:	601a      	str	r2, [r3, #0]
        return 3;
    397e:	2303      	movs	r3, #3
    3980:	e0c8      	b.n	3b14 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
    3982:	68bb      	ldr	r3, [r7, #8]
    3984:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
    3986:	68fb      	ldr	r3, [r7, #12]
    3988:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    398a:	697b      	ldr	r3, [r7, #20]
    398c:	15db      	asrs	r3, r3, #23
    398e:	b2db      	uxtb	r3, r3
    3990:	3b7f      	subs	r3, #127	; 0x7f
    3992:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    3994:	697b      	ldr	r3, [r7, #20]
    3996:	f3c3 0316 	ubfx	r3, r3, #0, #23
    399a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    399e:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
    39a0:	2300      	movs	r3, #0
    39a2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    39a4:	2300      	movs	r3, #0
    39a6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    39a8:	6a3b      	ldr	r3, [r7, #32]
    39aa:	2b1e      	cmp	r3, #30
    39ac:	dd02      	ble.n	39b4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    39ae:	f06f 0301 	mvn.w	r3, #1
    39b2:	e0af      	b.n	3b14 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
    39b4:	6a3b      	ldr	r3, [r7, #32]
    39b6:	f113 0f17 	cmn.w	r3, #23
    39ba:	da02      	bge.n	39c2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    39bc:	f04f 33ff 	mov.w	r3, #4294967295
    39c0:	e0a8      	b.n	3b14 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
    39c2:	6a3b      	ldr	r3, [r7, #32]
    39c4:	2b16      	cmp	r3, #22
    39c6:	dd06      	ble.n	39d6 <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
    39c8:	6a3b      	ldr	r3, [r7, #32]
    39ca:	3b17      	subs	r3, #23
    39cc:	69fa      	ldr	r2, [r7, #28]
    39ce:	fa02 f303 	lsl.w	r3, r2, r3
    39d2:	637b      	str	r3, [r7, #52]	; 0x34
    39d4:	e01a      	b.n	3a0c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    39d6:	6a3b      	ldr	r3, [r7, #32]
    39d8:	2b00      	cmp	r3, #0
    39da:	db0f      	blt.n	39fc <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
    39dc:	6a3b      	ldr	r3, [r7, #32]
    39de:	f1c3 0317 	rsb	r3, r3, #23
    39e2:	69fa      	ldr	r2, [r7, #28]
    39e4:	fa42 f303 	asr.w	r3, r2, r3
    39e8:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
    39ea:	6a3b      	ldr	r3, [r7, #32]
    39ec:	3301      	adds	r3, #1
    39ee:	69fa      	ldr	r2, [r7, #28]
    39f0:	fa02 f303 	lsl.w	r3, r2, r3
    39f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    39f8:	633b      	str	r3, [r7, #48]	; 0x30
    39fa:	e007      	b.n	3a0c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
    39fc:	69fb      	ldr	r3, [r7, #28]
    39fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3a02:	6a3b      	ldr	r3, [r7, #32]
    3a04:	43db      	mvns	r3, r3
    3a06:	fa42 f303 	asr.w	r3, r2, r3
    3a0a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    3a0c:	697b      	ldr	r3, [r7, #20]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	da04      	bge.n	3a1c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    3a12:	68bb      	ldr	r3, [r7, #8]
    3a14:	1c5a      	adds	r2, r3, #1
    3a16:	60ba      	str	r2, [r7, #8]
    3a18:	222d      	movs	r2, #45	; 0x2d
    3a1a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    3a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d105      	bne.n	3a2e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    3a22:	68bb      	ldr	r3, [r7, #8]
    3a24:	1c5a      	adds	r2, r3, #1
    3a26:	60ba      	str	r2, [r7, #8]
    3a28:	2230      	movs	r2, #48	; 0x30
    3a2a:	701a      	strb	r2, [r3, #0]
    3a2c:	e021      	b.n	3a72 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    3a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a30:	2b00      	cmp	r3, #0
    3a32:	dd08      	ble.n	3a46 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    3a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a36:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3a3a:	68ba      	ldr	r2, [r7, #8]
    3a3c:	4618      	mov	r0, r3
    3a3e:	4621      	mov	r1, r4
    3a40:	f7ff fe9b 	bl	377a <uint64_to_str>
    3a44:	e011      	b.n	3a6a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    3a46:	68bb      	ldr	r3, [r7, #8]
    3a48:	1c5a      	adds	r2, r3, #1
    3a4a:	60ba      	str	r2, [r7, #8]
    3a4c:	222d      	movs	r2, #45	; 0x2d
    3a4e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    3a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a52:	425b      	negs	r3, r3
    3a54:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3a58:	68ba      	ldr	r2, [r7, #8]
    3a5a:	4618      	mov	r0, r3
    3a5c:	4621      	mov	r1, r4
    3a5e:	f7ff fe8c 	bl	377a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    3a62:	e002      	b.n	3a6a <ftoa+0x11e>
        {
            pcBuf++;
    3a64:	68bb      	ldr	r3, [r7, #8]
    3a66:	3301      	adds	r3, #1
    3a68:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    3a6a:	68bb      	ldr	r3, [r7, #8]
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d1f8      	bne.n	3a64 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    3a72:	68bb      	ldr	r3, [r7, #8]
    3a74:	1c5a      	adds	r2, r3, #1
    3a76:	60ba      	str	r2, [r7, #8]
    3a78:	222e      	movs	r2, #46	; 0x2e
    3a7a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    3a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d105      	bne.n	3a8e <ftoa+0x142>
    {
        *pcBuf++ = '0';
    3a82:	68bb      	ldr	r3, [r7, #8]
    3a84:	1c5a      	adds	r2, r3, #1
    3a86:	60ba      	str	r2, [r7, #8]
    3a88:	2230      	movs	r2, #48	; 0x30
    3a8a:	701a      	strb	r2, [r3, #0]
    3a8c:	e03c      	b.n	3b08 <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    3a8e:	68ba      	ldr	r2, [r7, #8]
    3a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a92:	1ad3      	subs	r3, r2, r3
    3a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a96:	1ad3      	subs	r3, r2, r3
    3a98:	3b01      	subs	r3, #1
    3a9a:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    3a9c:	69ba      	ldr	r2, [r7, #24]
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	4293      	cmp	r3, r2
    3aa2:	bfa8      	it	ge
    3aa4:	4613      	movge	r3, r2
    3aa6:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    3aa8:	2300      	movs	r3, #0
    3aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    3aac:	e015      	b.n	3ada <ftoa+0x18e>
        {
            i32FracPart *= 10;
    3aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ab0:	4613      	mov	r3, r2
    3ab2:	009b      	lsls	r3, r3, #2
    3ab4:	4413      	add	r3, r2
    3ab6:	005b      	lsls	r3, r3, #1
    3ab8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    3aba:	68bb      	ldr	r3, [r7, #8]
    3abc:	1c5a      	adds	r2, r3, #1
    3abe:	60ba      	str	r2, [r7, #8]
    3ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ac2:	1612      	asrs	r2, r2, #24
    3ac4:	b2d2      	uxtb	r2, r2
    3ac6:	3230      	adds	r2, #48	; 0x30
    3ac8:	b2d2      	uxtb	r2, r2
    3aca:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    3acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ace:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ad2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    3ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ad6:	3301      	adds	r3, #1
    3ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3adc:	69bb      	ldr	r3, [r7, #24]
    3ade:	429a      	cmp	r2, r3
    3ae0:	dbe5      	blt.n	3aae <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    3ae2:	68bb      	ldr	r3, [r7, #8]
    3ae4:	3b01      	subs	r3, #1
    3ae6:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    3ae8:	e002      	b.n	3af0 <ftoa+0x1a4>
        {
            --pcBuf;
    3aea:	68bb      	ldr	r3, [r7, #8]
    3aec:	3b01      	subs	r3, #1
    3aee:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    3af0:	68bb      	ldr	r3, [r7, #8]
    3af2:	781b      	ldrb	r3, [r3, #0]
    3af4:	2b30      	cmp	r3, #48	; 0x30
    3af6:	d104      	bne.n	3b02 <ftoa+0x1b6>
    3af8:	68bb      	ldr	r3, [r7, #8]
    3afa:	3b01      	subs	r3, #1
    3afc:	781b      	ldrb	r3, [r3, #0]
    3afe:	2b2e      	cmp	r3, #46	; 0x2e
    3b00:	d1f3      	bne.n	3aea <ftoa+0x19e>
        }
        ++pcBuf;
    3b02:	68bb      	ldr	r3, [r7, #8]
    3b04:	3301      	adds	r3, #1
    3b06:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    3b08:	68bb      	ldr	r3, [r7, #8]
    3b0a:	2200      	movs	r2, #0
    3b0c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    3b0e:	68ba      	ldr	r2, [r7, #8]
    3b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b12:	1ad3      	subs	r3, r2, r3
} // ftoa()
    3b14:	4618      	mov	r0, r3
    3b16:	373c      	adds	r7, #60	; 0x3c
    3b18:	46bd      	mov	sp, r7
    3b1a:	bd90      	pop	{r4, r7, pc}
    3b1c:	00302e30 	.word	0x00302e30

00003b20 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    3b20:	b590      	push	{r4, r7, lr}
    3b22:	b095      	sub	sp, #84	; 0x54
    3b24:	af00      	add	r7, sp, #0
    3b26:	60f8      	str	r0, [r7, #12]
    3b28:	60b9      	str	r1, [r7, #8]
    3b2a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    3b2c:	2300      	movs	r3, #0
    3b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    3b30:	2300      	movs	r3, #0
    3b32:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    3b34:	e2e3      	b.n	40fe <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    3b36:	2306      	movs	r3, #6
    3b38:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    3b3a:	68bb      	ldr	r3, [r7, #8]
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b25      	cmp	r3, #37	; 0x25
    3b40:	d01f      	beq.n	3b82 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    3b42:	68fb      	ldr	r3, [r7, #12]
    3b44:	2b00      	cmp	r3, #0
    3b46:	d015      	beq.n	3b74 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    3b48:	68bb      	ldr	r3, [r7, #8]
    3b4a:	781b      	ldrb	r3, [r3, #0]
    3b4c:	2b0a      	cmp	r3, #10
    3b4e:	d10b      	bne.n	3b68 <am_util_stdio_vsprintf+0x48>
    3b50:	4bb1      	ldr	r3, [pc, #708]	; (3e18 <am_util_stdio_vsprintf+0x2f8>)
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d007      	beq.n	3b68 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    3b58:	68fb      	ldr	r3, [r7, #12]
    3b5a:	1c5a      	adds	r2, r3, #1
    3b5c:	60fa      	str	r2, [r7, #12]
    3b5e:	220d      	movs	r2, #13
    3b60:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    3b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b64:	3301      	adds	r3, #1
    3b66:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	1c5a      	adds	r2, r3, #1
    3b6c:	60fa      	str	r2, [r7, #12]
    3b6e:	68ba      	ldr	r2, [r7, #8]
    3b70:	7812      	ldrb	r2, [r2, #0]
    3b72:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    3b74:	68bb      	ldr	r3, [r7, #8]
    3b76:	3301      	adds	r3, #1
    3b78:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    3b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b7c:	3301      	adds	r3, #1
    3b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    3b80:	e2bd      	b.n	40fe <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    3b82:	68bb      	ldr	r3, [r7, #8]
    3b84:	3301      	adds	r3, #1
    3b86:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    3b88:	2300      	movs	r3, #0
    3b8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    3b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3b92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    3b96:	2320      	movs	r3, #32
    3b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    3b9c:	68bb      	ldr	r3, [r7, #8]
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	2b30      	cmp	r3, #48	; 0x30
    3ba2:	d105      	bne.n	3bb0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    3ba4:	2330      	movs	r3, #48	; 0x30
    3ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    3baa:	68bb      	ldr	r3, [r7, #8]
    3bac:	3301      	adds	r3, #1
    3bae:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    3bb0:	f107 0310 	add.w	r3, r7, #16
    3bb4:	4619      	mov	r1, r3
    3bb6:	68b8      	ldr	r0, [r7, #8]
    3bb8:	f7ff fd99 	bl	36ee <decstr_to_int>
    3bbc:	4603      	mov	r3, r0
    3bbe:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    3bc0:	693b      	ldr	r3, [r7, #16]
    3bc2:	68ba      	ldr	r2, [r7, #8]
    3bc4:	4413      	add	r3, r2
    3bc6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    3bc8:	68bb      	ldr	r3, [r7, #8]
    3bca:	781b      	ldrb	r3, [r3, #0]
    3bcc:	2b73      	cmp	r3, #115	; 0x73
    3bce:	d005      	beq.n	3bdc <am_util_stdio_vsprintf+0xbc>
    3bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	da02      	bge.n	3bdc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    3bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3bd8:	425b      	negs	r3, r3
    3bda:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	781b      	ldrb	r3, [r3, #0]
    3be0:	2b2e      	cmp	r3, #46	; 0x2e
    3be2:	d10e      	bne.n	3c02 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    3be4:	68bb      	ldr	r3, [r7, #8]
    3be6:	3301      	adds	r3, #1
    3be8:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    3bea:	f107 0310 	add.w	r3, r7, #16
    3bee:	4619      	mov	r1, r3
    3bf0:	68b8      	ldr	r0, [r7, #8]
    3bf2:	f7ff fd7c 	bl	36ee <decstr_to_int>
    3bf6:	4603      	mov	r3, r0
    3bf8:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    3bfa:	693b      	ldr	r3, [r7, #16]
    3bfc:	68ba      	ldr	r2, [r7, #8]
    3bfe:	4413      	add	r3, r2
    3c00:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    3c02:	68bb      	ldr	r3, [r7, #8]
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	2b6c      	cmp	r3, #108	; 0x6c
    3c08:	d10c      	bne.n	3c24 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    3c0a:	68bb      	ldr	r3, [r7, #8]
    3c0c:	3301      	adds	r3, #1
    3c0e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    3c10:	68bb      	ldr	r3, [r7, #8]
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	2b6c      	cmp	r3, #108	; 0x6c
    3c16:	d105      	bne.n	3c24 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    3c18:	68bb      	ldr	r3, [r7, #8]
    3c1a:	3301      	adds	r3, #1
    3c1c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    3c1e:	2301      	movs	r3, #1
    3c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    3c24:	68bb      	ldr	r3, [r7, #8]
    3c26:	781b      	ldrb	r3, [r3, #0]
    3c28:	3b46      	subs	r3, #70	; 0x46
    3c2a:	2b32      	cmp	r3, #50	; 0x32
    3c2c:	f200 8254 	bhi.w	40d8 <am_util_stdio_vsprintf+0x5b8>
    3c30:	a201      	add	r2, pc, #4	; (adr r2, 3c38 <am_util_stdio_vsprintf+0x118>)
    3c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c36:	bf00      	nop
    3c38:	00004063 	.word	0x00004063
    3c3c:	000040d9 	.word	0x000040d9
    3c40:	000040d9 	.word	0x000040d9
    3c44:	000040d9 	.word	0x000040d9
    3c48:	000040d9 	.word	0x000040d9
    3c4c:	000040d9 	.word	0x000040d9
    3c50:	000040d9 	.word	0x000040d9
    3c54:	000040d9 	.word	0x000040d9
    3c58:	000040d9 	.word	0x000040d9
    3c5c:	000040d9 	.word	0x000040d9
    3c60:	000040d9 	.word	0x000040d9
    3c64:	000040d9 	.word	0x000040d9
    3c68:	000040d9 	.word	0x000040d9
    3c6c:	000040d9 	.word	0x000040d9
    3c70:	000040d9 	.word	0x000040d9
    3c74:	000040d9 	.word	0x000040d9
    3c78:	000040d9 	.word	0x000040d9
    3c7c:	000040d9 	.word	0x000040d9
    3c80:	00003dff 	.word	0x00003dff
    3c84:	000040d9 	.word	0x000040d9
    3c88:	000040d9 	.word	0x000040d9
    3c8c:	000040d9 	.word	0x000040d9
    3c90:	000040d9 	.word	0x000040d9
    3c94:	000040d9 	.word	0x000040d9
    3c98:	000040d9 	.word	0x000040d9
    3c9c:	000040d9 	.word	0x000040d9
    3ca0:	000040d9 	.word	0x000040d9
    3ca4:	000040d9 	.word	0x000040d9
    3ca8:	000040d9 	.word	0x000040d9
    3cac:	00003d05 	.word	0x00003d05
    3cb0:	00003f2b 	.word	0x00003f2b
    3cb4:	000040d9 	.word	0x000040d9
    3cb8:	00004063 	.word	0x00004063
    3cbc:	000040d9 	.word	0x000040d9
    3cc0:	000040d9 	.word	0x000040d9
    3cc4:	00003f2b 	.word	0x00003f2b
    3cc8:	000040d9 	.word	0x000040d9
    3ccc:	000040d9 	.word	0x000040d9
    3cd0:	000040d9 	.word	0x000040d9
    3cd4:	000040d9 	.word	0x000040d9
    3cd8:	000040d9 	.word	0x000040d9
    3cdc:	000040d9 	.word	0x000040d9
    3ce0:	000040d9 	.word	0x000040d9
    3ce4:	000040d9 	.word	0x000040d9
    3ce8:	000040d9 	.word	0x000040d9
    3cec:	00003d2b 	.word	0x00003d2b
    3cf0:	000040d9 	.word	0x000040d9
    3cf4:	00003e99 	.word	0x00003e99
    3cf8:	000040d9 	.word	0x000040d9
    3cfc:	000040d9 	.word	0x000040d9
    3d00:	00003df9 	.word	0x00003df9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	1d1a      	adds	r2, r3, #4
    3d08:	607a      	str	r2, [r7, #4]
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    3d10:	68fb      	ldr	r3, [r7, #12]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d005      	beq.n	3d22 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    3d16:	68fb      	ldr	r3, [r7, #12]
    3d18:	1c5a      	adds	r2, r3, #1
    3d1a:	60fa      	str	r2, [r7, #12]
    3d1c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    3d20:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    3d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d24:	3301      	adds	r3, #1
    3d26:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3d28:	e1e6      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	1d1a      	adds	r2, r3, #4
    3d2e:	607a      	str	r2, [r7, #4]
    3d30:	681b      	ldr	r3, [r3, #0]
    3d32:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    3d34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3d36:	f7ff fdc8 	bl	38ca <simple_strlen>
    3d3a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    3d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d3e:	2b00      	cmp	r3, #0
    3d40:	dd2e      	ble.n	3da0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    3d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3d46:	429a      	cmp	r2, r3
    3d48:	d22a      	bcs.n	3da0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d4e:	1ad3      	subs	r3, r2, r3
    3d50:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d58:	4619      	mov	r1, r3
    3d5a:	68f8      	ldr	r0, [r7, #12]
    3d5c:	f7ff fdd0 	bl	3900 <padbuffer>
    3d60:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3d62:	68fb      	ldr	r3, [r7, #12]
    3d64:	2b00      	cmp	r3, #0
    3d66:	d001      	beq.n	3d6c <am_util_stdio_vsprintf+0x24c>
    3d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d6a:	e000      	b.n	3d6e <am_util_stdio_vsprintf+0x24e>
    3d6c:	2300      	movs	r3, #0
    3d6e:	68fa      	ldr	r2, [r7, #12]
    3d70:	4413      	add	r3, r2
    3d72:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3d78:	4413      	add	r3, r2
    3d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3d7c:	2300      	movs	r3, #0
    3d7e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    3d80:	e00e      	b.n	3da0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    3d82:	68fb      	ldr	r3, [r7, #12]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d005      	beq.n	3d94 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	1c5a      	adds	r2, r3, #1
    3d8c:	60fa      	str	r2, [r7, #12]
    3d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3d90:	7812      	ldrb	r2, [r2, #0]
    3d92:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    3d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d96:	3301      	adds	r3, #1
    3d98:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    3d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d9c:	3301      	adds	r3, #1
    3d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    3da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3da2:	781b      	ldrb	r3, [r3, #0]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d1ec      	bne.n	3d82 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    3da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3daa:	2b00      	cmp	r3, #0
    3dac:	f000 81a1 	beq.w	40f2 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    3db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3db2:	425b      	negs	r3, r3
    3db4:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    3db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3dba:	429a      	cmp	r2, r3
    3dbc:	f080 8199 	bcs.w	40f2 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3dc4:	1ad3      	subs	r3, r2, r3
    3dc6:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3dce:	4619      	mov	r1, r3
    3dd0:	68f8      	ldr	r0, [r7, #12]
    3dd2:	f7ff fd95 	bl	3900 <padbuffer>
    3dd6:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d001      	beq.n	3de2 <am_util_stdio_vsprintf+0x2c2>
    3dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3de0:	e000      	b.n	3de4 <am_util_stdio_vsprintf+0x2c4>
    3de2:	2300      	movs	r3, #0
    3de4:	68fa      	ldr	r2, [r7, #12]
    3de6:	4413      	add	r3, r2
    3de8:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3dee:	4413      	add	r3, r2
    3df0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3df2:	2300      	movs	r3, #0
    3df4:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    3df6:	e17c      	b.n	40f2 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    3df8:	2301      	movs	r3, #1
    3dfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3e02:	2b00      	cmp	r3, #0
    3e04:	d00a      	beq.n	3e1c <am_util_stdio_vsprintf+0x2fc>
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	3307      	adds	r3, #7
    3e0a:	f023 0307 	bic.w	r3, r3, #7
    3e0e:	f103 0208 	add.w	r2, r3, #8
    3e12:	607a      	str	r2, [r7, #4]
    3e14:	cb18      	ldmia	r3, {r3, r4}
    3e16:	e007      	b.n	3e28 <am_util_stdio_vsprintf+0x308>
    3e18:	100065bc 	.word	0x100065bc
                                      va_arg(pArgs, uint32_t);
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	1d1a      	adds	r2, r3, #4
    3e20:	607a      	str	r2, [r7, #4]
    3e22:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3e24:	f04f 0400 	mov.w	r4, #0
    3e28:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d01e      	beq.n	3e70 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    3e32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3e36:	f7ff fc36 	bl	36a6 <ndigits_in_hex>
    3e3a:	4602      	mov	r2, r0
    3e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e3e:	1a9b      	subs	r3, r3, r2
    3e40:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3e48:	4619      	mov	r1, r3
    3e4a:	68f8      	ldr	r0, [r7, #12]
    3e4c:	f7ff fd58 	bl	3900 <padbuffer>
    3e50:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3e52:	68fb      	ldr	r3, [r7, #12]
    3e54:	2b00      	cmp	r3, #0
    3e56:	d001      	beq.n	3e5c <am_util_stdio_vsprintf+0x33c>
    3e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e5a:	e000      	b.n	3e5e <am_util_stdio_vsprintf+0x33e>
    3e5c:	2300      	movs	r3, #0
    3e5e:	68fa      	ldr	r2, [r7, #12]
    3e60:	4413      	add	r3, r2
    3e62:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e68:	4413      	add	r3, r2
    3e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3e6c:	2300      	movs	r3, #0
    3e6e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    3e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    3e74:	68fa      	ldr	r2, [r7, #12]
    3e76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3e7a:	f7ff fcc6 	bl	380a <uint64_to_hexstr>
    3e7e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3e80:	68fb      	ldr	r3, [r7, #12]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d003      	beq.n	3e8e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    3e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e88:	68fa      	ldr	r2, [r7, #12]
    3e8a:	4413      	add	r3, r2
    3e8c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e92:	4413      	add	r3, r2
    3e94:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3e96:	e12f      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3e98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d008      	beq.n	3eb2 <am_util_stdio_vsprintf+0x392>
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	3307      	adds	r3, #7
    3ea4:	f023 0307 	bic.w	r3, r3, #7
    3ea8:	f103 0208 	add.w	r2, r3, #8
    3eac:	607a      	str	r2, [r7, #4]
    3eae:	cb18      	ldmia	r3, {r3, r4}
    3eb0:	e005      	b.n	3ebe <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	1d1a      	adds	r2, r3, #4
    3eb6:	607a      	str	r2, [r7, #4]
    3eb8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3eba:	f04f 0400 	mov.w	r4, #0
    3ebe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d01e      	beq.n	3f06 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    3ec8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3ecc:	f7ff fbad 	bl	362a <ndigits_in_u64>
    3ed0:	4602      	mov	r2, r0
    3ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ed4:	1a9b      	subs	r3, r3, r2
    3ed6:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3ede:	4619      	mov	r1, r3
    3ee0:	68f8      	ldr	r0, [r7, #12]
    3ee2:	f7ff fd0d 	bl	3900 <padbuffer>
    3ee6:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3ee8:	68fb      	ldr	r3, [r7, #12]
    3eea:	2b00      	cmp	r3, #0
    3eec:	d001      	beq.n	3ef2 <am_util_stdio_vsprintf+0x3d2>
    3eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ef0:	e000      	b.n	3ef4 <am_util_stdio_vsprintf+0x3d4>
    3ef2:	2300      	movs	r3, #0
    3ef4:	68fa      	ldr	r2, [r7, #12]
    3ef6:	4413      	add	r3, r2
    3ef8:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3efe:	4413      	add	r3, r2
    3f00:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3f02:	2300      	movs	r3, #0
    3f04:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    3f06:	68fa      	ldr	r2, [r7, #12]
    3f08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3f0c:	f7ff fc35 	bl	377a <uint64_to_str>
    3f10:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3f12:	68fb      	ldr	r3, [r7, #12]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d003      	beq.n	3f20 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    3f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f1a:	68fa      	ldr	r2, [r7, #12]
    3f1c:	4413      	add	r3, r2
    3f1e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f24:	4413      	add	r3, r2
    3f26:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3f28:	e0e6      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3f2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d008      	beq.n	3f44 <am_util_stdio_vsprintf+0x424>
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	3307      	adds	r3, #7
    3f36:	f023 0307 	bic.w	r3, r3, #7
    3f3a:	f103 0208 	add.w	r2, r3, #8
    3f3e:	607a      	str	r2, [r7, #4]
    3f40:	cb18      	ldmia	r3, {r3, r4}
    3f42:	e005      	b.n	3f50 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	1d1a      	adds	r2, r3, #4
    3f48:	607a      	str	r2, [r7, #4]
    3f4a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3f4c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3f50:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    3f54:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	f174 0300 	sbcs.w	r3, r4, #0
    3f5e:	da0a      	bge.n	3f76 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    3f60:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3f64:	425b      	negs	r3, r3
    3f66:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    3f6a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    3f6e:	2301      	movs	r3, #1
    3f70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    3f74:	e006      	b.n	3f84 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    3f76:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3f7a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    3f7e:	2300      	movs	r3, #0
    3f80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    3f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f86:	2b00      	cmp	r3, #0
    3f88:	d04a      	beq.n	4020 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    3f8a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    3f8e:	4618      	mov	r0, r3
    3f90:	4621      	mov	r1, r4
    3f92:	f7ff fb6b 	bl	366c <ndigits_in_i64>
    3f96:	4602      	mov	r2, r0
    3f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f9a:	1a9b      	subs	r3, r3, r2
    3f9c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    3f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d011      	beq.n	3fca <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    3fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fa8:	3b01      	subs	r3, #1
    3faa:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    3fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3fb0:	2b30      	cmp	r3, #48	; 0x30
    3fb2:	d10a      	bne.n	3fca <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    3fb4:	68fb      	ldr	r3, [r7, #12]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d004      	beq.n	3fc4 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    3fba:	68fb      	ldr	r3, [r7, #12]
    3fbc:	1c5a      	adds	r2, r3, #1
    3fbe:	60fa      	str	r2, [r7, #12]
    3fc0:	222d      	movs	r2, #45	; 0x2d
    3fc2:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    3fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3fc6:	3301      	adds	r3, #1
    3fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3fd0:	4619      	mov	r1, r3
    3fd2:	68f8      	ldr	r0, [r7, #12]
    3fd4:	f7ff fc94 	bl	3900 <padbuffer>
    3fd8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d001      	beq.n	3fe4 <am_util_stdio_vsprintf+0x4c4>
    3fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fe2:	e000      	b.n	3fe6 <am_util_stdio_vsprintf+0x4c6>
    3fe4:	2300      	movs	r3, #0
    3fe6:	68fa      	ldr	r2, [r7, #12]
    3fe8:	4413      	add	r3, r2
    3fea:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3ff0:	4413      	add	r3, r2
    3ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3ff4:	2300      	movs	r3, #0
    3ff6:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    3ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d01e      	beq.n	403e <am_util_stdio_vsprintf+0x51e>
    4000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    4004:	2b20      	cmp	r3, #32
    4006:	d11a      	bne.n	403e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	2b00      	cmp	r3, #0
    400c:	d004      	beq.n	4018 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	1c5a      	adds	r2, r3, #1
    4012:	60fa      	str	r2, [r7, #12]
    4014:	222d      	movs	r2, #45	; 0x2d
    4016:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    4018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    401a:	3301      	adds	r3, #1
    401c:	63fb      	str	r3, [r7, #60]	; 0x3c
    401e:	e00e      	b.n	403e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    4020:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4024:	2b00      	cmp	r3, #0
    4026:	d00a      	beq.n	403e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    4028:	68fb      	ldr	r3, [r7, #12]
    402a:	2b00      	cmp	r3, #0
    402c:	d004      	beq.n	4038 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    402e:	68fb      	ldr	r3, [r7, #12]
    4030:	1c5a      	adds	r2, r3, #1
    4032:	60fa      	str	r2, [r7, #12]
    4034:	222d      	movs	r2, #45	; 0x2d
    4036:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    4038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    403a:	3301      	adds	r3, #1
    403c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    403e:	68fa      	ldr	r2, [r7, #12]
    4040:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    4044:	f7ff fb99 	bl	377a <uint64_to_str>
    4048:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    404a:	68fb      	ldr	r3, [r7, #12]
    404c:	2b00      	cmp	r3, #0
    404e:	d003      	beq.n	4058 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    4050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4052:	68fa      	ldr	r2, [r7, #12]
    4054:	4413      	add	r3, r2
    4056:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    4058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    405a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    405c:	4413      	add	r3, r2
    405e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    4060:	e04a      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    4062:	68fb      	ldr	r3, [r7, #12]
    4064:	2b00      	cmp	r3, #0
    4066:	d046      	beq.n	40f6 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    4068:	687b      	ldr	r3, [r7, #4]
    406a:	3307      	adds	r3, #7
    406c:	f023 0307 	bic.w	r3, r3, #7
    4070:	f103 0208 	add.w	r2, r3, #8
    4074:	607a      	str	r2, [r7, #4]
    4076:	cb18      	ldmia	r3, {r3, r4}
    4078:	4618      	mov	r0, r3
    407a:	4621      	mov	r1, r4
    407c:	f7fc f820 	bl	c0 <__aeabi_d2f>
    4080:	4603      	mov	r3, r0
    4082:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	2214      	movs	r2, #20
    4088:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    408c:	68f9      	ldr	r1, [r7, #12]
    408e:	6978      	ldr	r0, [r7, #20]
    4090:	f7ff fc5c 	bl	394c <ftoa>
    4094:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    4096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4098:	2b00      	cmp	r3, #0
    409a:	da14      	bge.n	40c6 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    409e:	f1b3 3fff 	cmp.w	r3, #4294967295
    40a2:	d102      	bne.n	40aa <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    40a4:	4b1e      	ldr	r3, [pc, #120]	; (4120 <am_util_stdio_vsprintf+0x600>)
    40a6:	62bb      	str	r3, [r7, #40]	; 0x28
    40a8:	e008      	b.n	40bc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    40aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ac:	f113 0f02 	cmn.w	r3, #2
    40b0:	d102      	bne.n	40b8 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    40b2:	4b1c      	ldr	r3, [pc, #112]	; (4124 <am_util_stdio_vsprintf+0x604>)
    40b4:	62bb      	str	r3, [r7, #40]	; 0x28
    40b6:	e001      	b.n	40bc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    40b8:	4b1b      	ldr	r3, [pc, #108]	; (4128 <am_util_stdio_vsprintf+0x608>)
    40ba:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    40bc:	68fb      	ldr	r3, [r7, #12]
    40be:	6aba      	ldr	r2, [r7, #40]	; 0x28
    40c0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    40c2:	2303      	movs	r3, #3
    40c4:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    40c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    40ca:	4413      	add	r3, r2
    40cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    40ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40d0:	68fa      	ldr	r2, [r7, #12]
    40d2:	4413      	add	r3, r2
    40d4:	60fb      	str	r3, [r7, #12]
                }
                break;
    40d6:	e00e      	b.n	40f6 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    40d8:	68fb      	ldr	r3, [r7, #12]
    40da:	2b00      	cmp	r3, #0
    40dc:	d005      	beq.n	40ea <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	1c5a      	adds	r2, r3, #1
    40e2:	60fa      	str	r2, [r7, #12]
    40e4:	68ba      	ldr	r2, [r7, #8]
    40e6:	7812      	ldrb	r2, [r2, #0]
    40e8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    40ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40ec:	3301      	adds	r3, #1
    40ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    40f0:	e002      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>
                break;
    40f2:	bf00      	nop
    40f4:	e000      	b.n	40f8 <am_util_stdio_vsprintf+0x5d8>
                break;
    40f6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    40f8:	68bb      	ldr	r3, [r7, #8]
    40fa:	3301      	adds	r3, #1
    40fc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    40fe:	68bb      	ldr	r3, [r7, #8]
    4100:	781b      	ldrb	r3, [r3, #0]
    4102:	2b00      	cmp	r3, #0
    4104:	f47f ad17 	bne.w	3b36 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    4108:	68fb      	ldr	r3, [r7, #12]
    410a:	2b00      	cmp	r3, #0
    410c:	d002      	beq.n	4114 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	2200      	movs	r2, #0
    4112:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    4114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    4116:	4618      	mov	r0, r3
    4118:	3754      	adds	r7, #84	; 0x54
    411a:	46bd      	mov	sp, r7
    411c:	bd90      	pop	{r4, r7, pc}
    411e:	bf00      	nop
    4120:	00302e30 	.word	0x00302e30
    4124:	00232e23 	.word	0x00232e23
    4128:	003f2e3f 	.word	0x003f2e3f

0000412c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    412c:	b40f      	push	{r0, r1, r2, r3}
    412e:	b580      	push	{r7, lr}
    4130:	b082      	sub	sp, #8
    4132:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    4134:	f107 0314 	add.w	r3, r7, #20
    4138:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    413a:	683a      	ldr	r2, [r7, #0]
    413c:	6939      	ldr	r1, [r7, #16]
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <am_util_stdio_printf+0x34>)
    4140:	f7ff fcee 	bl	3b20 <am_util_stdio_vsprintf>
    4144:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    4146:	4b07      	ldr	r3, [pc, #28]	; (4164 <am_util_stdio_printf+0x38>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	4805      	ldr	r0, [pc, #20]	; (4160 <am_util_stdio_printf+0x34>)
    414c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    414e:	687b      	ldr	r3, [r7, #4]
}
    4150:	4618      	mov	r0, r3
    4152:	3708      	adds	r7, #8
    4154:	46bd      	mov	sp, r7
    4156:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    415a:	b004      	add	sp, #16
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	100064bc 	.word	0x100064bc
    4164:	100065dc 	.word	0x100065dc

00004168 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    4168:	b580      	push	{r7, lr}
    416a:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    416c:	4802      	ldr	r0, [pc, #8]	; (4178 <am_util_stdio_terminal_clear+0x10>)
    416e:	f7ff ffdd 	bl	412c <am_util_stdio_printf>
}
    4172:	bf00      	nop
    4174:	bd80      	pop	{r7, pc}
    4176:	bf00      	nop
    4178:	00004f5c 	.word	0x00004f5c

0000417c <am_bsp_low_power_init>:
    417c:	b508      	push	{r3, lr}
    417e:	f000 fc9b 	bl	4ab8 <am_hal_pwrctrl_bucks_init>
    4182:	f000 fd07 	bl	4b94 <am_hal_pwrctrl_low_power_init>
    4186:	f000 fe99 	bl	4ebc <am_hal_vcomp_disable>
    418a:	2001      	movs	r0, #1
    418c:	f000 fd12 	bl	4bb4 <am_hal_rtc_osc_select>
    4190:	2001      	movs	r0, #1
    4192:	f000 f939 	bl	4408 <am_hal_clkgen_osc_stop>
    4196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    419a:	f000 bd19 	b.w	4bd0 <am_hal_rtc_osc_disable>
    419e:	bf00      	nop

000041a0 <am_bsp_debug_printf_enable>:
    41a0:	b530      	push	{r4, r5, lr}
    41a2:	4b17      	ldr	r3, [pc, #92]	; (4200 <am_bsp_debug_printf_enable+0x60>)
    41a4:	6818      	ldr	r0, [r3, #0]
    41a6:	f010 0401 	ands.w	r4, r0, #1
    41aa:	b087      	sub	sp, #28
    41ac:	d001      	beq.n	41b2 <am_bsp_debug_printf_enable+0x12>
    41ae:	b007      	add	sp, #28
    41b0:	bd30      	pop	{r4, r5, pc}
    41b2:	4a14      	ldr	r2, [pc, #80]	; (4204 <am_bsp_debug_printf_enable+0x64>)
    41b4:	4914      	ldr	r1, [pc, #80]	; (4208 <am_bsp_debug_printf_enable+0x68>)
    41b6:	4d15      	ldr	r5, [pc, #84]	; (420c <am_bsp_debug_printf_enable+0x6c>)
    41b8:	6011      	str	r1, [r2, #0]
    41ba:	a806      	add	r0, sp, #24
    41bc:	f840 5d14 	str.w	r5, [r0, #-20]!
    41c0:	f000 fe20 	bl	4e04 <am_hal_tpiu_enable>
    41c4:	f3ef 8310 	mrs	r3, PRIMASK
    41c8:	9300      	str	r3, [sp, #0]
    41ca:	b672      	cpsid	i
    41cc:	4a10      	ldr	r2, [pc, #64]	; (4210 <am_bsp_debug_printf_enable+0x70>)
    41ce:	4d11      	ldr	r5, [pc, #68]	; (4214 <am_bsp_debug_printf_enable+0x74>)
    41d0:	4811      	ldr	r0, [pc, #68]	; (4218 <am_bsp_debug_printf_enable+0x78>)
    41d2:	4912      	ldr	r1, [pc, #72]	; (421c <am_bsp_debug_printf_enable+0x7c>)
    41d4:	2373      	movs	r3, #115	; 0x73
    41d6:	6013      	str	r3, [r2, #0]
    41d8:	682b      	ldr	r3, [r5, #0]
    41da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    41de:	602b      	str	r3, [r5, #0]
    41e0:	6805      	ldr	r5, [r0, #0]
    41e2:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    41e6:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    41ea:	6003      	str	r3, [r0, #0]
    41ec:	6808      	ldr	r0, [r1, #0]
    41ee:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    41f2:	600d      	str	r5, [r1, #0]
    41f4:	6014      	str	r4, [r2, #0]
    41f6:	9c00      	ldr	r4, [sp, #0]
    41f8:	f384 8810 	msr	PRIMASK, r4
    41fc:	b007      	add	sp, #28
    41fe:	bd30      	pop	{r4, r5, pc}
    4200:	100065c0 	.word	0x100065c0
    4204:	e0000e80 	.word	0xe0000e80
    4208:	00150511 	.word	0x00150511
    420c:	000f4240 	.word	0x000f4240
    4210:	40010060 	.word	0x40010060
    4214:	40010054 	.word	0x40010054
    4218:	40010028 	.word	0x40010028
    421c:	40010108 	.word	0x40010108

00004220 <am_bsp_debug_printf_disable>:
    4220:	b530      	push	{r4, r5, lr}
    4222:	4b15      	ldr	r3, [pc, #84]	; (4278 <am_bsp_debug_printf_disable+0x58>)
    4224:	6818      	ldr	r0, [r3, #0]
    4226:	f010 0401 	ands.w	r4, r0, #1
    422a:	b083      	sub	sp, #12
    422c:	d121      	bne.n	4272 <am_bsp_debug_printf_disable+0x52>
    422e:	f000 faf5 	bl	481c <am_hal_itm_not_busy>
    4232:	f3ef 8110 	mrs	r1, PRIMASK
    4236:	9101      	str	r1, [sp, #4]
    4238:	b672      	cpsid	i
    423a:	4a10      	ldr	r2, [pc, #64]	; (427c <am_bsp_debug_printf_disable+0x5c>)
    423c:	4d10      	ldr	r5, [pc, #64]	; (4280 <am_bsp_debug_printf_disable+0x60>)
    423e:	4811      	ldr	r0, [pc, #68]	; (4284 <am_bsp_debug_printf_disable+0x64>)
    4240:	4911      	ldr	r1, [pc, #68]	; (4288 <am_bsp_debug_printf_disable+0x68>)
    4242:	2373      	movs	r3, #115	; 0x73
    4244:	6013      	str	r3, [r2, #0]
    4246:	682b      	ldr	r3, [r5, #0]
    4248:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    424c:	f04c 0320 	orr.w	r3, ip, #32
    4250:	602b      	str	r3, [r5, #0]
    4252:	6805      	ldr	r5, [r0, #0]
    4254:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    4258:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    425c:	6003      	str	r3, [r0, #0]
    425e:	6808      	ldr	r0, [r1, #0]
    4260:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    4264:	600d      	str	r5, [r1, #0]
    4266:	6014      	str	r4, [r2, #0]
    4268:	9c01      	ldr	r4, [sp, #4]
    426a:	f384 8810 	msr	PRIMASK, r4
    426e:	f000 fe1f 	bl	4eb0 <am_hal_tpiu_disable>
    4272:	b003      	add	sp, #12
    4274:	bd30      	pop	{r4, r5, pc}
    4276:	bf00      	nop
    4278:	100065c0 	.word	0x100065c0
    427c:	40010060 	.word	0x40010060
    4280:	40010054 	.word	0x40010054
    4284:	40010028 	.word	0x40010028
    4288:	40010108 	.word	0x40010108

0000428c <am_hal_cachectrl_enable>:
    428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428e:	4604      	mov	r4, r0
    4290:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    4294:	78a7      	ldrb	r7, [r4, #2]
    4296:	7863      	ldrb	r3, [r4, #1]
    4298:	78e2      	ldrb	r2, [r4, #3]
    429a:	7925      	ldrb	r5, [r4, #4]
    429c:	79a1      	ldrb	r1, [r4, #6]
    429e:	00be      	lsls	r6, r7, #2
    42a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    42a4:	f006 0304 	and.w	r3, r6, #4
    42a8:	f00e 0602 	and.w	r6, lr, #2
    42ac:	431e      	orrs	r6, r3
    42ae:	f042 0201 	orr.w	r2, r2, #1
    42b2:	79e3      	ldrb	r3, [r4, #7]
    42b4:	01ed      	lsls	r5, r5, #7
    42b6:	4316      	orrs	r6, r2
    42b8:	b2ed      	uxtb	r5, r5
    42ba:	7a22      	ldrb	r2, [r4, #8]
    42bc:	0289      	lsls	r1, r1, #10
    42be:	432e      	orrs	r6, r5
    42c0:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    42c4:	7a65      	ldrb	r5, [r4, #9]
    42c6:	02db      	lsls	r3, r3, #11
    42c8:	430e      	orrs	r6, r1
    42ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    42ce:	0312      	lsls	r2, r2, #12
    42d0:	7aa1      	ldrb	r1, [r4, #10]
    42d2:	431e      	orrs	r6, r3
    42d4:	042d      	lsls	r5, r5, #16
    42d6:	b293      	uxth	r3, r2
    42d8:	7ae2      	ldrb	r2, [r4, #11]
    42da:	431e      	orrs	r6, r3
    42dc:	0509      	lsls	r1, r1, #20
    42de:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    42e2:	0612      	lsls	r2, r2, #24
    42e4:	4333      	orrs	r3, r6
    42e6:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    42ea:	00bf      	lsls	r7, r7, #2
    42ec:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    42f0:	4333      	orrs	r3, r6
    42f2:	430b      	orrs	r3, r1
    42f4:	f007 0508 	and.w	r5, r7, #8
    42f8:	431d      	orrs	r5, r3
    42fa:	f000 fad5 	bl	48a8 <am_hal_pwrctrl_memory_enable>
    42fe:	482c      	ldr	r0, [pc, #176]	; (43b0 <am_hal_cachectrl_enable+0x124>)
    4300:	4b2c      	ldr	r3, [pc, #176]	; (43b4 <am_hal_cachectrl_enable+0x128>)
    4302:	6005      	str	r5, [r0, #0]
    4304:	2232      	movs	r2, #50	; 0x32
    4306:	681e      	ldr	r6, [r3, #0]
    4308:	0777      	lsls	r7, r6, #29
    430a:	d41e      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    430c:	681f      	ldr	r7, [r3, #0]
    430e:	077e      	lsls	r6, r7, #29
    4310:	f102 32ff 	add.w	r2, r2, #4294967295
    4314:	d419      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4316:	6819      	ldr	r1, [r3, #0]
    4318:	074f      	lsls	r7, r1, #29
    431a:	d416      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    431c:	6818      	ldr	r0, [r3, #0]
    431e:	0746      	lsls	r6, r0, #29
    4320:	d413      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4322:	681e      	ldr	r6, [r3, #0]
    4324:	0770      	lsls	r0, r6, #29
    4326:	d410      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4328:	681f      	ldr	r7, [r3, #0]
    432a:	0779      	lsls	r1, r7, #29
    432c:	d40d      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    432e:	6819      	ldr	r1, [r3, #0]
    4330:	074f      	lsls	r7, r1, #29
    4332:	d40a      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4334:	6818      	ldr	r0, [r3, #0]
    4336:	0746      	lsls	r6, r0, #29
    4338:	d407      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    433a:	681e      	ldr	r6, [r3, #0]
    433c:	0770      	lsls	r0, r6, #29
    433e:	d404      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4340:	681f      	ldr	r7, [r3, #0]
    4342:	0779      	lsls	r1, r7, #29
    4344:	d401      	bmi.n	434a <am_hal_cachectrl_enable+0xbe>
    4346:	3a09      	subs	r2, #9
    4348:	d1dd      	bne.n	4306 <am_hal_cachectrl_enable+0x7a>
    434a:	4b1a      	ldr	r3, [pc, #104]	; (43b4 <am_hal_cachectrl_enable+0x128>)
    434c:	681a      	ldr	r2, [r3, #0]
    434e:	f042 0101 	orr.w	r1, r2, #1
    4352:	6019      	str	r1, [r3, #0]
    4354:	2232      	movs	r2, #50	; 0x32
    4356:	6818      	ldr	r0, [r3, #0]
    4358:	0740      	lsls	r0, r0, #29
    435a:	d41e      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    435c:	681e      	ldr	r6, [r3, #0]
    435e:	0771      	lsls	r1, r6, #29
    4360:	f102 32ff 	add.w	r2, r2, #4294967295
    4364:	d419      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4366:	681f      	ldr	r7, [r3, #0]
    4368:	077f      	lsls	r7, r7, #29
    436a:	d416      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    436c:	6819      	ldr	r1, [r3, #0]
    436e:	074e      	lsls	r6, r1, #29
    4370:	d413      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4372:	6818      	ldr	r0, [r3, #0]
    4374:	0740      	lsls	r0, r0, #29
    4376:	d410      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4378:	681e      	ldr	r6, [r3, #0]
    437a:	0771      	lsls	r1, r6, #29
    437c:	d40d      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    437e:	681f      	ldr	r7, [r3, #0]
    4380:	077f      	lsls	r7, r7, #29
    4382:	d40a      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4384:	6819      	ldr	r1, [r3, #0]
    4386:	074e      	lsls	r6, r1, #29
    4388:	d407      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    438a:	6818      	ldr	r0, [r3, #0]
    438c:	0740      	lsls	r0, r0, #29
    438e:	d404      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4390:	681e      	ldr	r6, [r3, #0]
    4392:	0771      	lsls	r1, r6, #29
    4394:	d401      	bmi.n	439a <am_hal_cachectrl_enable+0x10e>
    4396:	3a09      	subs	r2, #9
    4398:	d1dd      	bne.n	4356 <am_hal_cachectrl_enable+0xca>
    439a:	7964      	ldrb	r4, [r4, #5]
    439c:	4f04      	ldr	r7, [pc, #16]	; (43b0 <am_hal_cachectrl_enable+0x124>)
    439e:	0223      	lsls	r3, r4, #8
    43a0:	f403 7100 	and.w	r1, r3, #512	; 0x200
    43a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
    43a8:	4311      	orrs	r1, r2
    43aa:	4329      	orrs	r1, r5
    43ac:	6039      	str	r1, [r7, #0]
    43ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43b0:	40018000 	.word	0x40018000
    43b4:	40018008 	.word	0x40018008

000043b8 <am_hal_clkgen_sysclk_select>:
    43b8:	b510      	push	{r4, lr}
    43ba:	4604      	mov	r4, r0
    43bc:	b120      	cbz	r0, 43c8 <am_hal_clkgen_sysclk_select+0x10>
    43be:	4a06      	ldr	r2, [pc, #24]	; (43d8 <am_hal_clkgen_sysclk_select+0x20>)
    43c0:	4806      	ldr	r0, [pc, #24]	; (43dc <am_hal_clkgen_sysclk_select+0x24>)
    43c2:	2150      	movs	r1, #80	; 0x50
    43c4:	f000 f8d2 	bl	456c <am_hal_debug_error>
    43c8:	4b05      	ldr	r3, [pc, #20]	; (43e0 <am_hal_clkgen_sysclk_select+0x28>)
    43ca:	4906      	ldr	r1, [pc, #24]	; (43e4 <am_hal_clkgen_sysclk_select+0x2c>)
    43cc:	2047      	movs	r0, #71	; 0x47
    43ce:	2200      	movs	r2, #0
    43d0:	6018      	str	r0, [r3, #0]
    43d2:	600c      	str	r4, [r1, #0]
    43d4:	601a      	str	r2, [r3, #0]
    43d6:	bd10      	pop	{r4, pc}
    43d8:	00004f7c 	.word	0x00004f7c
    43dc:	00004fb4 	.word	0x00004fb4
    43e0:	40004014 	.word	0x40004014
    43e4:	40004018 	.word	0x40004018

000043e8 <am_hal_clkgen_sysclk_get>:
    43e8:	4b04      	ldr	r3, [pc, #16]	; (43fc <am_hal_clkgen_sysclk_get+0x14>)
    43ea:	4905      	ldr	r1, [pc, #20]	; (4400 <am_hal_clkgen_sysclk_get+0x18>)
    43ec:	681a      	ldr	r2, [r3, #0]
    43ee:	4805      	ldr	r0, [pc, #20]	; (4404 <am_hal_clkgen_sysclk_get+0x1c>)
    43f0:	f012 0f01 	tst.w	r2, #1
    43f4:	bf08      	it	eq
    43f6:	4608      	moveq	r0, r1
    43f8:	4770      	bx	lr
    43fa:	bf00      	nop
    43fc:	40004018 	.word	0x40004018
    4400:	02dc6c00 	.word	0x02dc6c00
    4404:	016e3600 	.word	0x016e3600

00004408 <am_hal_clkgen_osc_stop>:
    4408:	0783      	lsls	r3, r0, #30
    440a:	d003      	beq.n	4414 <am_hal_clkgen_osc_stop+0xc>
    440c:	4a02      	ldr	r2, [pc, #8]	; (4418 <am_hal_clkgen_osc_stop+0x10>)
    440e:	6813      	ldr	r3, [r2, #0]
    4410:	4318      	orrs	r0, r3
    4412:	6010      	str	r0, [r2, #0]
    4414:	4770      	bx	lr
    4416:	bf00      	nop
    4418:	4000400c 	.word	0x4000400c

0000441c <am_hal_ctimer_int_service>:
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	b284      	uxth	r4, r0
    4420:	b184      	cbz	r4, 4444 <am_hal_ctimer_int_service+0x28>
    4422:	4e09      	ldr	r6, [pc, #36]	; (4448 <am_hal_ctimer_int_service+0x2c>)
    4424:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    4428:	fab4 f384 	clz	r3, r4
    442c:	f1c3 021f 	rsb	r2, r3, #31
    4430:	fa25 f003 	lsr.w	r0, r5, r3
    4434:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    4438:	ea24 0400 	bic.w	r4, r4, r0
    443c:	b101      	cbz	r1, 4440 <am_hal_ctimer_int_service+0x24>
    443e:	4788      	blx	r1
    4440:	2c00      	cmp	r4, #0
    4442:	d1f1      	bne.n	4428 <am_hal_ctimer_int_service+0xc>
    4444:	bd70      	pop	{r4, r5, r6, pc}
    4446:	bf00      	nop
    4448:	100065e0 	.word	0x100065e0

0000444c <am_hal_ctimer_start>:
    444c:	b410      	push	{r4}
    444e:	f3ef 8310 	mrs	r3, PRIMASK
    4452:	b083      	sub	sp, #12
    4454:	0100      	lsls	r0, r0, #4
    4456:	4a09      	ldr	r2, [pc, #36]	; (447c <am_hal_ctimer_start+0x30>)
    4458:	9301      	str	r3, [sp, #4]
    445a:	b672      	cpsid	i
    445c:	5883      	ldr	r3, [r0, r2]
    445e:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    4462:	ea23 0304 	bic.w	r3, r3, r4
    4466:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    446a:	4319      	orrs	r1, r3
    446c:	5081      	str	r1, [r0, r2]
    446e:	9801      	ldr	r0, [sp, #4]
    4470:	f380 8810 	msr	PRIMASK, r0
    4474:	b003      	add	sp, #12
    4476:	f85d 4b04 	ldr.w	r4, [sp], #4
    447a:	4770      	bx	lr
    447c:	4000800c 	.word	0x4000800c

00004480 <am_hal_ctimer_clear>:
    4480:	b082      	sub	sp, #8
    4482:	f3ef 8310 	mrs	r3, PRIMASK
    4486:	0100      	lsls	r0, r0, #4
    4488:	4a06      	ldr	r2, [pc, #24]	; (44a4 <am_hal_ctimer_clear+0x24>)
    448a:	9301      	str	r3, [sp, #4]
    448c:	b672      	cpsid	i
    448e:	5883      	ldr	r3, [r0, r2]
    4490:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    4494:	4319      	orrs	r1, r3
    4496:	5081      	str	r1, [r0, r2]
    4498:	9801      	ldr	r0, [sp, #4]
    449a:	f380 8810 	msr	PRIMASK, r0
    449e:	b002      	add	sp, #8
    44a0:	4770      	bx	lr
    44a2:	bf00      	nop
    44a4:	4000800c 	.word	0x4000800c

000044a8 <am_hal_ctimer_period_set>:
    44a8:	b4f0      	push	{r4, r5, r6, r7}
    44aa:	f3ef 8410 	mrs	r4, PRIMASK
    44ae:	b082      	sub	sp, #8
    44b0:	0100      	lsls	r0, r0, #4
    44b2:	4d1c      	ldr	r5, [pc, #112]	; (4524 <am_hal_ctimer_period_set+0x7c>)
    44b4:	9401      	str	r4, [sp, #4]
    44b6:	4e1c      	ldr	r6, [pc, #112]	; (4528 <am_hal_ctimer_period_set+0x80>)
    44b8:	4f1c      	ldr	r7, [pc, #112]	; (452c <am_hal_ctimer_period_set+0x84>)
    44ba:	b672      	cpsid	i
    44bc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    44c0:	5944      	ldr	r4, [r0, r5]
    44c2:	d01a      	beq.n	44fa <am_hal_ctimer_period_set+0x52>
    44c4:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    44c8:	2d80      	cmp	r5, #128	; 0x80
    44ca:	d01b      	beq.n	4504 <am_hal_ctimer_period_set+0x5c>
    44cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    44d0:	2500      	movs	r5, #0
    44d2:	4299      	cmp	r1, r3
    44d4:	462c      	mov	r4, r5
    44d6:	d01c      	beq.n	4512 <am_hal_ctimer_period_set+0x6a>
    44d8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    44dc:	d01e      	beq.n	451c <am_hal_ctimer_period_set+0x74>
    44de:	0c21      	lsrs	r1, r4, #16
    44e0:	040c      	lsls	r4, r1, #16
    44e2:	b291      	uxth	r1, r2
    44e4:	430d      	orrs	r5, r1
    44e6:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
    44ea:	5185      	str	r5, [r0, r6]
    44ec:	51c2      	str	r2, [r0, r7]
    44ee:	9801      	ldr	r0, [sp, #4]
    44f0:	f380 8810 	msr	PRIMASK, r0
    44f4:	b002      	add	sp, #8
    44f6:	bcf0      	pop	{r4, r5, r6, r7}
    44f8:	4770      	bx	lr
    44fa:	0c25      	lsrs	r5, r4, #16
    44fc:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    4500:	2c80      	cmp	r4, #128	; 0x80
    4502:	d10a      	bne.n	451a <am_hal_ctimer_period_set+0x72>
    4504:	0415      	lsls	r5, r2, #16
    4506:	4614      	mov	r4, r2
    4508:	1ad2      	subs	r2, r2, r3
    450a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    450e:	4299      	cmp	r1, r3
    4510:	d1e2      	bne.n	44d8 <am_hal_ctimer_period_set+0x30>
    4512:	b297      	uxth	r7, r2
    4514:	433d      	orrs	r5, r7
    4516:	5185      	str	r5, [r0, r6]
    4518:	e7e9      	b.n	44ee <am_hal_ctimer_period_set+0x46>
    451a:	2500      	movs	r5, #0
    451c:	b296      	uxth	r6, r2
    451e:	4335      	orrs	r5, r6
    4520:	51c5      	str	r5, [r0, r7]
    4522:	e7e4      	b.n	44ee <am_hal_ctimer_period_set+0x46>
    4524:	4000800c 	.word	0x4000800c
    4528:	40008004 	.word	0x40008004
    452c:	40008008 	.word	0x40008008

00004530 <am_hal_ctimer_int_clear>:
    4530:	4b01      	ldr	r3, [pc, #4]	; (4538 <am_hal_ctimer_int_clear+0x8>)
    4532:	6018      	str	r0, [r3, #0]
    4534:	4770      	bx	lr
    4536:	bf00      	nop
    4538:	40008208 	.word	0x40008208

0000453c <am_hal_ctimer_int_status_get>:
    453c:	b910      	cbnz	r0, 4544 <am_hal_ctimer_int_status_get+0x8>
    453e:	4b09      	ldr	r3, [pc, #36]	; (4564 <am_hal_ctimer_int_status_get+0x28>)
    4540:	6818      	ldr	r0, [r3, #0]
    4542:	4770      	bx	lr
    4544:	b082      	sub	sp, #8
    4546:	f3ef 8010 	mrs	r0, PRIMASK
    454a:	9001      	str	r0, [sp, #4]
    454c:	b672      	cpsid	i
    454e:	4a05      	ldr	r2, [pc, #20]	; (4564 <am_hal_ctimer_int_status_get+0x28>)
    4550:	4905      	ldr	r1, [pc, #20]	; (4568 <am_hal_ctimer_int_status_get+0x2c>)
    4552:	6810      	ldr	r0, [r2, #0]
    4554:	680b      	ldr	r3, [r1, #0]
    4556:	9a01      	ldr	r2, [sp, #4]
    4558:	4018      	ands	r0, r3
    455a:	f382 8810 	msr	PRIMASK, r2
    455e:	b002      	add	sp, #8
    4560:	4770      	bx	lr
    4562:	bf00      	nop
    4564:	40008204 	.word	0x40008204
    4568:	40008200 	.word	0x40008200

0000456c <am_hal_debug_error>:
    456c:	e7fe      	b.n	456c <am_hal_debug_error>
    456e:	bf00      	nop

00004570 <am_hal_flash_delay>:
    4570:	4b01      	ldr	r3, [pc, #4]	; (4578 <am_hal_flash_delay+0x8>)
    4572:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4574:	4708      	bx	r1
    4576:	bf00      	nop
    4578:	10002330 	.word	0x10002330

0000457c <am_hal_gpio_out_enable_bit_get>:
    457c:	08c3      	lsrs	r3, r0, #3
    457e:	f003 0104 	and.w	r1, r3, #4
    4582:	4a04      	ldr	r2, [pc, #16]	; (4594 <am_hal_gpio_out_enable_bit_get+0x18>)
    4584:	588b      	ldr	r3, [r1, r2]
    4586:	f000 001f 	and.w	r0, r0, #31
    458a:	fa23 f100 	lsr.w	r1, r3, r0
    458e:	f001 0001 	and.w	r0, r1, #1
    4592:	4770      	bx	lr
    4594:	400100a0 	.word	0x400100a0

00004598 <am_hal_gpio_int_enable>:
    4598:	b410      	push	{r4}
    459a:	4c05      	ldr	r4, [pc, #20]	; (45b0 <am_hal_gpio_int_enable+0x18>)
    459c:	4a05      	ldr	r2, [pc, #20]	; (45b4 <am_hal_gpio_int_enable+0x1c>)
    459e:	6823      	ldr	r3, [r4, #0]
    45a0:	4319      	orrs	r1, r3
    45a2:	6021      	str	r1, [r4, #0]
    45a4:	6811      	ldr	r1, [r2, #0]
    45a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    45aa:	4308      	orrs	r0, r1
    45ac:	6010      	str	r0, [r2, #0]
    45ae:	4770      	bx	lr
    45b0:	40010210 	.word	0x40010210
    45b4:	40010200 	.word	0x40010200

000045b8 <am_hal_gpio_int_clear>:
    45b8:	b082      	sub	sp, #8
    45ba:	f3ef 8310 	mrs	r3, PRIMASK
    45be:	9301      	str	r3, [sp, #4]
    45c0:	b672      	cpsid	i
    45c2:	4a04      	ldr	r2, [pc, #16]	; (45d4 <am_hal_gpio_int_clear+0x1c>)
    45c4:	4b04      	ldr	r3, [pc, #16]	; (45d8 <am_hal_gpio_int_clear+0x20>)
    45c6:	6011      	str	r1, [r2, #0]
    45c8:	6018      	str	r0, [r3, #0]
    45ca:	9801      	ldr	r0, [sp, #4]
    45cc:	f380 8810 	msr	PRIMASK, r0
    45d0:	b002      	add	sp, #8
    45d2:	4770      	bx	lr
    45d4:	40010218 	.word	0x40010218
    45d8:	40010208 	.word	0x40010208

000045dc <am_hal_gpio_int_status_get>:
    45dc:	b4f0      	push	{r4, r5, r6, r7}
    45de:	f3ef 8310 	mrs	r3, PRIMASK
    45e2:	b082      	sub	sp, #8
    45e4:	9301      	str	r3, [sp, #4]
    45e6:	b672      	cpsid	i
    45e8:	4a0e      	ldr	r2, [pc, #56]	; (4624 <am_hal_gpio_int_status_get+0x48>)
    45ea:	490f      	ldr	r1, [pc, #60]	; (4628 <am_hal_gpio_int_status_get+0x4c>)
    45ec:	6814      	ldr	r4, [r2, #0]
    45ee:	680d      	ldr	r5, [r1, #0]
    45f0:	f04f 0c00 	mov.w	ip, #0
    45f4:	ea4c 0605 	orr.w	r6, ip, r5
    45f8:	4627      	mov	r7, r4
    45fa:	b170      	cbz	r0, 461a <am_hal_gpio_int_status_get+0x3e>
    45fc:	480b      	ldr	r0, [pc, #44]	; (462c <am_hal_gpio_int_status_get+0x50>)
    45fe:	4b0c      	ldr	r3, [pc, #48]	; (4630 <am_hal_gpio_int_status_get+0x54>)
    4600:	6802      	ldr	r2, [r0, #0]
    4602:	6819      	ldr	r1, [r3, #0]
    4604:	ea4c 0001 	orr.w	r0, ip, r1
    4608:	4611      	mov	r1, r2
    460a:	9b01      	ldr	r3, [sp, #4]
    460c:	f383 8810 	msr	PRIMASK, r3
    4610:	4030      	ands	r0, r6
    4612:	4039      	ands	r1, r7
    4614:	b002      	add	sp, #8
    4616:	bcf0      	pop	{r4, r5, r6, r7}
    4618:	4770      	bx	lr
    461a:	f04f 30ff 	mov.w	r0, #4294967295
    461e:	f04f 31ff 	mov.w	r1, #4294967295
    4622:	e7f2      	b.n	460a <am_hal_gpio_int_status_get+0x2e>
    4624:	40010214 	.word	0x40010214
    4628:	40010204 	.word	0x40010204
    462c:	40010210 	.word	0x40010210
    4630:	40010200 	.word	0x40010200

00004634 <am_hal_gpio_int_service>:
    4634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4636:	460f      	mov	r7, r1
    4638:	b188      	cbz	r0, 465e <am_hal_gpio_int_service+0x2a>
    463a:	4e15      	ldr	r6, [pc, #84]	; (4690 <am_hal_gpio_int_service+0x5c>)
    463c:	4604      	mov	r4, r0
    463e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    4642:	fab4 f384 	clz	r3, r4
    4646:	f1c3 021f 	rsb	r2, r3, #31
    464a:	fa25 f003 	lsr.w	r0, r5, r3
    464e:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    4652:	ea24 0400 	bic.w	r4, r4, r0
    4656:	b101      	cbz	r1, 465a <am_hal_gpio_int_service+0x26>
    4658:	4788      	blx	r1
    465a:	2c00      	cmp	r4, #0
    465c:	d1f1      	bne.n	4642 <am_hal_gpio_int_service+0xe>
    465e:	463a      	mov	r2, r7
    4660:	2300      	movs	r3, #0
    4662:	4313      	orrs	r3, r2
    4664:	463c      	mov	r4, r7
    4666:	d011      	beq.n	468c <am_hal_gpio_int_service+0x58>
    4668:	4f09      	ldr	r7, [pc, #36]	; (4690 <am_hal_gpio_int_service+0x5c>)
    466a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    466e:	fab4 f584 	clz	r5, r4
    4672:	f1c5 0c3f 	rsb	ip, r5, #63	; 0x3f
    4676:	fa26 f305 	lsr.w	r3, r6, r5
    467a:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
    467e:	ea24 0403 	bic.w	r4, r4, r3
    4682:	b102      	cbz	r2, 4686 <am_hal_gpio_int_service+0x52>
    4684:	4790      	blx	r2
    4686:	2c00      	cmp	r4, #0
    4688:	d1f1      	bne.n	466e <am_hal_gpio_int_service+0x3a>
    468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    468e:	bf00      	nop
    4690:	10006620 	.word	0x10006620

00004694 <am_hal_gpio_int_register>:
    4694:	283f      	cmp	r0, #63	; 0x3f
    4696:	b538      	push	{r3, r4, r5, lr}
    4698:	4604      	mov	r4, r0
    469a:	460d      	mov	r5, r1
    469c:	d905      	bls.n	46aa <am_hal_gpio_int_register+0x16>
    469e:	4a05      	ldr	r2, [pc, #20]	; (46b4 <am_hal_gpio_int_register+0x20>)
    46a0:	4805      	ldr	r0, [pc, #20]	; (46b8 <am_hal_gpio_int_register+0x24>)
    46a2:	f240 11d5 	movw	r1, #469	; 0x1d5
    46a6:	f7ff ff61 	bl	456c <am_hal_debug_error>
    46aa:	4b04      	ldr	r3, [pc, #16]	; (46bc <am_hal_gpio_int_register+0x28>)
    46ac:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    46b0:	bd38      	pop	{r3, r4, r5, pc}
    46b2:	bf00      	nop
    46b4:	00004ff8 	.word	0x00004ff8
    46b8:	00004fe4 	.word	0x00004fe4
    46bc:	10006620 	.word	0x10006620

000046c0 <am_hal_interrupt_enable>:
    46c0:	280f      	cmp	r0, #15
    46c2:	d80b      	bhi.n	46dc <am_hal_interrupt_enable+0x1c>
    46c4:	2805      	cmp	r0, #5
    46c6:	d013      	beq.n	46f0 <am_hal_interrupt_enable+0x30>
    46c8:	2806      	cmp	r0, #6
    46ca:	d017      	beq.n	46fc <am_hal_interrupt_enable+0x3c>
    46cc:	2804      	cmp	r0, #4
    46ce:	d104      	bne.n	46da <am_hal_interrupt_enable+0x1a>
    46d0:	4a0d      	ldr	r2, [pc, #52]	; (4708 <am_hal_interrupt_enable+0x48>)
    46d2:	6813      	ldr	r3, [r2, #0]
    46d4:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    46d8:	6010      	str	r0, [r2, #0]
    46da:	4770      	bx	lr
    46dc:	f1a0 0310 	sub.w	r3, r0, #16
    46e0:	f003 0c1f 	and.w	ip, r3, #31
    46e4:	2001      	movs	r0, #1
    46e6:	4909      	ldr	r1, [pc, #36]	; (470c <am_hal_interrupt_enable+0x4c>)
    46e8:	fa00 f20c 	lsl.w	r2, r0, ip
    46ec:	600a      	str	r2, [r1, #0]
    46ee:	4770      	bx	lr
    46f0:	4805      	ldr	r0, [pc, #20]	; (4708 <am_hal_interrupt_enable+0x48>)
    46f2:	6801      	ldr	r1, [r0, #0]
    46f4:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    46f8:	6002      	str	r2, [r0, #0]
    46fa:	4770      	bx	lr
    46fc:	4902      	ldr	r1, [pc, #8]	; (4708 <am_hal_interrupt_enable+0x48>)
    46fe:	680a      	ldr	r2, [r1, #0]
    4700:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    4704:	600b      	str	r3, [r1, #0]
    4706:	4770      	bx	lr
    4708:	e000ed24 	.word	0xe000ed24
    470c:	e000e100 	.word	0xe000e100

00004710 <am_hal_interrupt_priority_set>:
    4710:	b410      	push	{r4}
    4712:	f1a0 0310 	sub.w	r3, r0, #16
    4716:	f023 0203 	bic.w	r2, r3, #3
    471a:	f102 4460 	add.w	r4, r2, #3758096384	; 0xe0000000
    471e:	f504 4c64 	add.w	ip, r4, #58368	; 0xe400
    4722:	b083      	sub	sp, #12
    4724:	f8dc 3000 	ldr.w	r3, [ip]
    4728:	9301      	str	r3, [sp, #4]
    472a:	f000 0003 	and.w	r0, r0, #3
    472e:	9c01      	ldr	r4, [sp, #4]
    4730:	00c0      	lsls	r0, r0, #3
    4732:	22ff      	movs	r2, #255	; 0xff
    4734:	4082      	lsls	r2, r0
    4736:	ea24 0302 	bic.w	r3, r4, r2
    473a:	9301      	str	r3, [sp, #4]
    473c:	9a01      	ldr	r2, [sp, #4]
    473e:	4081      	lsls	r1, r0
    4740:	4311      	orrs	r1, r2
    4742:	f8cc 1000 	str.w	r1, [ip]
    4746:	b003      	add	sp, #12
    4748:	f85d 4b04 	ldr.w	r4, [sp], #4
    474c:	4770      	bx	lr
    474e:	bf00      	nop

00004750 <am_hal_interrupt_master_enable>:
    4750:	f3ef 8010 	mrs	r0, PRIMASK
    4754:	b662      	cpsie	i
    4756:	4770      	bx	lr

00004758 <am_hal_interrupt_master_disable>:
    4758:	f3ef 8010 	mrs	r0, PRIMASK
    475c:	b672      	cpsid	i
    475e:	4770      	bx	lr

00004760 <am_hal_interrupt_master_set>:
    4760:	f380 8810 	msr	PRIMASK, r0
    4764:	4770      	bx	lr
    4766:	bf00      	nop

00004768 <am_hal_itm_enable>:
    4768:	4b0d      	ldr	r3, [pc, #52]	; (47a0 <am_hal_itm_enable+0x38>)
    476a:	6818      	ldr	r0, [r3, #0]
    476c:	07c2      	lsls	r2, r0, #31
    476e:	d416      	bmi.n	479e <am_hal_itm_enable+0x36>
    4770:	4a0c      	ldr	r2, [pc, #48]	; (47a4 <am_hal_itm_enable+0x3c>)
    4772:	6811      	ldr	r1, [r2, #0]
    4774:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    4778:	6013      	str	r3, [r2, #0]
    477a:	6810      	ldr	r0, [r2, #0]
    477c:	01c3      	lsls	r3, r0, #7
    477e:	d5fc      	bpl.n	477a <am_hal_itm_enable+0x12>
    4780:	b430      	push	{r4, r5}
    4782:	4809      	ldr	r0, [pc, #36]	; (47a8 <am_hal_itm_enable+0x40>)
    4784:	4c09      	ldr	r4, [pc, #36]	; (47ac <am_hal_itm_enable+0x44>)
    4786:	4d0a      	ldr	r5, [pc, #40]	; (47b0 <am_hal_itm_enable+0x48>)
    4788:	6005      	str	r5, [r0, #0]
    478a:	250f      	movs	r5, #15
    478c:	6025      	str	r5, [r4, #0]
    478e:	bc30      	pop	{r4, r5}
    4790:	4908      	ldr	r1, [pc, #32]	; (47b4 <am_hal_itm_enable+0x4c>)
    4792:	4b09      	ldr	r3, [pc, #36]	; (47b8 <am_hal_itm_enable+0x50>)
    4794:	4a09      	ldr	r2, [pc, #36]	; (47bc <am_hal_itm_enable+0x54>)
    4796:	f04f 30ff 	mov.w	r0, #4294967295
    479a:	6008      	str	r0, [r1, #0]
    479c:	601a      	str	r2, [r3, #0]
    479e:	4770      	bx	lr
    47a0:	100065c0 	.word	0x100065c0
    47a4:	e000edfc 	.word	0xe000edfc
    47a8:	e0000fb0 	.word	0xe0000fb0
    47ac:	e0000e40 	.word	0xe0000e40
    47b0:	c5acce55 	.word	0xc5acce55
    47b4:	e0000e00 	.word	0xe0000e00
    47b8:	e0000e80 	.word	0xe0000e80
    47bc:	00150511 	.word	0x00150511

000047c0 <am_hal_itm_disable>:
    47c0:	4b0f      	ldr	r3, [pc, #60]	; (4800 <am_hal_itm_disable+0x40>)
    47c2:	6818      	ldr	r0, [r3, #0]
    47c4:	07c2      	lsls	r2, r0, #31
    47c6:	d41a      	bmi.n	47fe <am_hal_itm_disable+0x3e>
    47c8:	4b0e      	ldr	r3, [pc, #56]	; (4804 <am_hal_itm_disable+0x44>)
    47ca:	490f      	ldr	r1, [pc, #60]	; (4808 <am_hal_itm_disable+0x48>)
    47cc:	4a0f      	ldr	r2, [pc, #60]	; (480c <am_hal_itm_disable+0x4c>)
    47ce:	6019      	str	r1, [r3, #0]
    47d0:	6810      	ldr	r0, [r2, #0]
    47d2:	0203      	lsls	r3, r0, #8
    47d4:	d4fc      	bmi.n	47d0 <am_hal_itm_disable+0x10>
    47d6:	490d      	ldr	r1, [pc, #52]	; (480c <am_hal_itm_disable+0x4c>)
    47d8:	2064      	movs	r0, #100	; 0x64
    47da:	680b      	ldr	r3, [r1, #0]
    47dc:	f023 0201 	bic.w	r2, r3, #1
    47e0:	600a      	str	r2, [r1, #0]
    47e2:	680a      	ldr	r2, [r1, #0]
    47e4:	4b0a      	ldr	r3, [pc, #40]	; (4810 <am_hal_itm_disable+0x50>)
    47e6:	4013      	ands	r3, r2
    47e8:	2b00      	cmp	r3, #0
    47ea:	d1fa      	bne.n	47e2 <am_hal_itm_disable+0x22>
    47ec:	3801      	subs	r0, #1
    47ee:	d1f4      	bne.n	47da <am_hal_itm_disable+0x1a>
    47f0:	4a08      	ldr	r2, [pc, #32]	; (4814 <am_hal_itm_disable+0x54>)
    47f2:	4909      	ldr	r1, [pc, #36]	; (4818 <am_hal_itm_disable+0x58>)
    47f4:	6813      	ldr	r3, [r2, #0]
    47f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    47fa:	6013      	str	r3, [r2, #0]
    47fc:	6008      	str	r0, [r1, #0]
    47fe:	4770      	bx	lr
    4800:	100065c0 	.word	0x100065c0
    4804:	e0000fb0 	.word	0xe0000fb0
    4808:	c5acce55 	.word	0xc5acce55
    480c:	e0000e80 	.word	0xe0000e80
    4810:	00800001 	.word	0x00800001
    4814:	e000edfc 	.word	0xe000edfc
    4818:	40020250 	.word	0x40020250

0000481c <am_hal_itm_not_busy>:
    481c:	4a03      	ldr	r2, [pc, #12]	; (482c <am_hal_itm_not_busy+0x10>)
    481e:	6813      	ldr	r3, [r2, #0]
    4820:	021b      	lsls	r3, r3, #8
    4822:	d4fc      	bmi.n	481e <am_hal_itm_not_busy+0x2>
    4824:	f44f 7047 	mov.w	r0, #796	; 0x31c
    4828:	f7ff bea2 	b.w	4570 <am_hal_flash_delay>
    482c:	e0000e80 	.word	0xe0000e80

00004830 <am_hal_itm_print>:
    4830:	7803      	ldrb	r3, [r0, #0]
    4832:	b1ab      	cbz	r3, 4860 <am_hal_itm_print+0x30>
    4834:	4602      	mov	r2, r0
    4836:	2300      	movs	r3, #0
    4838:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    483c:	3301      	adds	r3, #1
    483e:	2900      	cmp	r1, #0
    4840:	d1fa      	bne.n	4838 <am_hal_itm_print+0x8>
    4842:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    4846:	b430      	push	{r4, r5}
    4848:	18c2      	adds	r2, r0, r3
    484a:	4665      	mov	r5, ip
    484c:	f810 4b01 	ldrb.w	r4, [r0], #1
    4850:	f8dc 3000 	ldr.w	r3, [ip]
    4854:	2b00      	cmp	r3, #0
    4856:	d0fb      	beq.n	4850 <am_hal_itm_print+0x20>
    4858:	4290      	cmp	r0, r2
    485a:	702c      	strb	r4, [r5, #0]
    485c:	d1f6      	bne.n	484c <am_hal_itm_print+0x1c>
    485e:	bc30      	pop	{r4, r5}
    4860:	4770      	bx	lr
    4862:	bf00      	nop

00004864 <am_hal_mcuctrl_fault_status>:
    4864:	4a0d      	ldr	r2, [pc, #52]	; (489c <am_hal_mcuctrl_fault_status+0x38>)
    4866:	4b0e      	ldr	r3, [pc, #56]	; (48a0 <am_hal_mcuctrl_fault_status+0x3c>)
    4868:	490e      	ldr	r1, [pc, #56]	; (48a4 <am_hal_mcuctrl_fault_status+0x40>)
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	b470      	push	{r4, r5, r6}
    486e:	6814      	ldr	r4, [r2, #0]
    4870:	60c4      	str	r4, [r0, #12]
    4872:	6809      	ldr	r1, [r1, #0]
    4874:	6845      	ldr	r5, [r0, #4]
    4876:	6944      	ldr	r4, [r0, #20]
    4878:	4329      	orrs	r1, r5
    487a:	3204      	adds	r2, #4
    487c:	6041      	str	r1, [r0, #4]
    487e:	6812      	ldr	r2, [r2, #0]
    4880:	f003 0601 	and.w	r6, r3, #1
    4884:	4322      	orrs	r2, r4
    4886:	7006      	strb	r6, [r0, #0]
    4888:	f3c3 0640 	ubfx	r6, r3, #1, #1
    488c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    4890:	7206      	strb	r6, [r0, #8]
    4892:	7403      	strb	r3, [r0, #16]
    4894:	6142      	str	r2, [r0, #20]
    4896:	bc70      	pop	{r4, r5, r6}
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	400201c4 	.word	0x400201c4
    48a0:	400201cc 	.word	0x400201cc
    48a4:	400201c0 	.word	0x400201c0

000048a8 <am_hal_pwrctrl_memory_enable>:
    48a8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    48ac:	b430      	push	{r4, r5}
    48ae:	d03a      	beq.n	4926 <am_hal_pwrctrl_memory_enable+0x7e>
    48b0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    48b4:	f000 809d 	beq.w	49f2 <am_hal_pwrctrl_memory_enable+0x14a>
    48b8:	2801      	cmp	r0, #1
    48ba:	f000 809d 	beq.w	49f8 <am_hal_pwrctrl_memory_enable+0x150>
    48be:	2803      	cmp	r0, #3
    48c0:	f000 80a6 	beq.w	4a10 <am_hal_pwrctrl_memory_enable+0x168>
    48c4:	2807      	cmp	r0, #7
    48c6:	f000 809c 	beq.w	4a02 <am_hal_pwrctrl_memory_enable+0x15a>
    48ca:	280f      	cmp	r0, #15
    48cc:	f000 80a5 	beq.w	4a1a <am_hal_pwrctrl_memory_enable+0x172>
    48d0:	281f      	cmp	r0, #31
    48d2:	f000 80b1 	beq.w	4a38 <am_hal_pwrctrl_memory_enable+0x190>
    48d6:	283f      	cmp	r0, #63	; 0x3f
    48d8:	f000 80b5 	beq.w	4a46 <am_hal_pwrctrl_memory_enable+0x19e>
    48dc:	287f      	cmp	r0, #127	; 0x7f
    48de:	f000 80b9 	beq.w	4a54 <am_hal_pwrctrl_memory_enable+0x1ac>
    48e2:	28ff      	cmp	r0, #255	; 0xff
    48e4:	f000 80a0 	beq.w	4a28 <am_hal_pwrctrl_memory_enable+0x180>
    48e8:	f240 13ff 	movw	r3, #511	; 0x1ff
    48ec:	4298      	cmp	r0, r3
    48ee:	f000 80b8 	beq.w	4a62 <am_hal_pwrctrl_memory_enable+0x1ba>
    48f2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    48f6:	4288      	cmp	r0, r1
    48f8:	f000 80b9 	beq.w	4a6e <am_hal_pwrctrl_memory_enable+0x1c6>
    48fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    4900:	4290      	cmp	r0, r2
    4902:	d00e      	beq.n	4922 <am_hal_pwrctrl_memory_enable+0x7a>
    4904:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    4908:	f000 80b7 	beq.w	4a7a <am_hal_pwrctrl_memory_enable+0x1d2>
    490c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    4910:	42a0      	cmp	r0, r4
    4912:	f000 80b5 	beq.w	4a80 <am_hal_pwrctrl_memory_enable+0x1d8>
    4916:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    491a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    491e:	4560      	cmp	r0, ip
    4920:	d132      	bne.n	4988 <am_hal_pwrctrl_memory_enable+0xe0>
    4922:	495c      	ldr	r1, [pc, #368]	; (4a94 <am_hal_pwrctrl_memory_enable+0x1ec>)
    4924:	e066      	b.n	49f4 <am_hal_pwrctrl_memory_enable+0x14c>
    4926:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    492a:	2340      	movs	r3, #64	; 0x40
    492c:	2120      	movs	r1, #32
    492e:	4c5a      	ldr	r4, [pc, #360]	; (4a98 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4930:	6822      	ldr	r2, [r4, #0]
    4932:	402a      	ands	r2, r5
    4934:	6022      	str	r2, [r4, #0]
    4936:	4d58      	ldr	r5, [pc, #352]	; (4a98 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4938:	682c      	ldr	r4, [r5, #0]
    493a:	4320      	orrs	r0, r4
    493c:	6028      	str	r0, [r5, #0]
    493e:	2b00      	cmp	r3, #0
    4940:	d029      	beq.n	4996 <am_hal_pwrctrl_memory_enable+0xee>
    4942:	4a56      	ldr	r2, [pc, #344]	; (4a9c <am_hal_pwrctrl_memory_enable+0x1f4>)
    4944:	6810      	ldr	r0, [r2, #0]
    4946:	4203      	tst	r3, r0
    4948:	bf18      	it	ne
    494a:	20c6      	movne	r0, #198	; 0xc6
    494c:	d01f      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    494e:	6815      	ldr	r5, [r2, #0]
    4950:	422b      	tst	r3, r5
    4952:	d01c      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4954:	6814      	ldr	r4, [r2, #0]
    4956:	4223      	tst	r3, r4
    4958:	d019      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    495a:	6815      	ldr	r5, [r2, #0]
    495c:	422b      	tst	r3, r5
    495e:	d016      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4960:	6814      	ldr	r4, [r2, #0]
    4962:	4223      	tst	r3, r4
    4964:	d013      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4966:	6815      	ldr	r5, [r2, #0]
    4968:	422b      	tst	r3, r5
    496a:	d010      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    496c:	6814      	ldr	r4, [r2, #0]
    496e:	4223      	tst	r3, r4
    4970:	d00d      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4972:	6815      	ldr	r5, [r2, #0]
    4974:	422b      	tst	r3, r5
    4976:	d00a      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4978:	6814      	ldr	r4, [r2, #0]
    497a:	4223      	tst	r3, r4
    497c:	d007      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    497e:	6815      	ldr	r5, [r2, #0]
    4980:	422b      	tst	r3, r5
    4982:	d004      	beq.n	498e <am_hal_pwrctrl_memory_enable+0xe6>
    4984:	3809      	subs	r0, #9
    4986:	d1e2      	bne.n	494e <am_hal_pwrctrl_memory_enable+0xa6>
    4988:	2000      	movs	r0, #0
    498a:	bc30      	pop	{r4, r5}
    498c:	4770      	bx	lr
    498e:	b911      	cbnz	r1, 4996 <am_hal_pwrctrl_memory_enable+0xee>
    4990:	2001      	movs	r0, #1
    4992:	bc30      	pop	{r4, r5}
    4994:	4770      	bx	lr
    4996:	4b41      	ldr	r3, [pc, #260]	; (4a9c <am_hal_pwrctrl_memory_enable+0x1f4>)
    4998:	681a      	ldr	r2, [r3, #0]
    499a:	ea31 0402 	bics.w	r4, r1, r2
    499e:	bf18      	it	ne
    49a0:	24c6      	movne	r4, #198	; 0xc6
    49a2:	d0f5      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49a4:	6818      	ldr	r0, [r3, #0]
    49a6:	ea31 0000 	bics.w	r0, r1, r0
    49aa:	d0f1      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49ac:	681d      	ldr	r5, [r3, #0]
    49ae:	ea31 0005 	bics.w	r0, r1, r5
    49b2:	d0ed      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49b4:	681a      	ldr	r2, [r3, #0]
    49b6:	ea31 0002 	bics.w	r0, r1, r2
    49ba:	d0e9      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49bc:	6818      	ldr	r0, [r3, #0]
    49be:	ea31 0000 	bics.w	r0, r1, r0
    49c2:	d0e5      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49c4:	681d      	ldr	r5, [r3, #0]
    49c6:	ea31 0005 	bics.w	r0, r1, r5
    49ca:	d0e1      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49cc:	681a      	ldr	r2, [r3, #0]
    49ce:	ea31 0002 	bics.w	r0, r1, r2
    49d2:	d0dd      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49d4:	6818      	ldr	r0, [r3, #0]
    49d6:	ea31 0000 	bics.w	r0, r1, r0
    49da:	d0d9      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49dc:	681d      	ldr	r5, [r3, #0]
    49de:	ea31 0005 	bics.w	r0, r1, r5
    49e2:	d0d5      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49e4:	681a      	ldr	r2, [r3, #0]
    49e6:	ea31 0002 	bics.w	r0, r1, r2
    49ea:	d0d1      	beq.n	4990 <am_hal_pwrctrl_memory_enable+0xe8>
    49ec:	3c09      	subs	r4, #9
    49ee:	d1d9      	bne.n	49a4 <am_hal_pwrctrl_memory_enable+0xfc>
    49f0:	e7ca      	b.n	4988 <am_hal_pwrctrl_memory_enable+0xe0>
    49f2:	2160      	movs	r1, #96	; 0x60
    49f4:	2300      	movs	r3, #0
    49f6:	e79e      	b.n	4936 <am_hal_pwrctrl_memory_enable+0x8e>
    49f8:	4d29      	ldr	r5, [pc, #164]	; (4aa0 <am_hal_pwrctrl_memory_enable+0x1f8>)
    49fa:	4b2a      	ldr	r3, [pc, #168]	; (4aa4 <am_hal_pwrctrl_memory_enable+0x1fc>)
    49fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    4a00:	e795      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a02:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
    4a06:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
    4a0a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    4a0e:	e78e      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a10:	4d25      	ldr	r5, [pc, #148]	; (4aa8 <am_hal_pwrctrl_memory_enable+0x200>)
    4a12:	4b26      	ldr	r3, [pc, #152]	; (4aac <am_hal_pwrctrl_memory_enable+0x204>)
    4a14:	f44f 7140 	mov.w	r1, #768	; 0x300
    4a18:	e789      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a1a:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    4a1e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    4a22:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    4a26:	e782      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a28:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    4a2c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    4a30:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    4a34:	20ff      	movs	r0, #255	; 0xff
    4a36:	e77a      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a38:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    4a3c:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    4a40:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    4a44:	e773      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a46:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    4a4a:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    4a4e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    4a52:	e76c      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a54:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    4a58:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    4a5c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    4a60:	e765      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a62:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    4a66:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    4a6a:	4911      	ldr	r1, [pc, #68]	; (4ab0 <am_hal_pwrctrl_memory_enable+0x208>)
    4a6c:	e75f      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a6e:	4911      	ldr	r1, [pc, #68]	; (4ab4 <am_hal_pwrctrl_memory_enable+0x20c>)
    4a70:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    4a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    4a78:	e759      	b.n	492e <am_hal_pwrctrl_memory_enable+0x86>
    4a7a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4a7e:	e7b9      	b.n	49f4 <am_hal_pwrctrl_memory_enable+0x14c>
    4a80:	4805      	ldr	r0, [pc, #20]	; (4a98 <am_hal_pwrctrl_memory_enable+0x1f0>)
    4a82:	6803      	ldr	r3, [r0, #0]
    4a84:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    4a88:	6001      	str	r1, [r0, #0]
    4a8a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    4a8e:	2100      	movs	r1, #0
    4a90:	e757      	b.n	4942 <am_hal_pwrctrl_memory_enable+0x9a>
    4a92:	bf00      	nop
    4a94:	0007ff00 	.word	0x0007ff00
    4a98:	40021010 	.word	0x40021010
    4a9c:	40021014 	.word	0x40021014
    4aa0:	fffff801 	.word	0xfffff801
    4aa4:	0007fe00 	.word	0x0007fe00
    4aa8:	fffff803 	.word	0xfffff803
    4aac:	0007fc00 	.word	0x0007fc00
    4ab0:	0001ff00 	.word	0x0001ff00
    4ab4:	0003ff00 	.word	0x0003ff00

00004ab8 <am_hal_pwrctrl_bucks_init>:
    4ab8:	4b0f      	ldr	r3, [pc, #60]	; (4af8 <am_hal_pwrctrl_bucks_init+0x40>)
    4aba:	681a      	ldr	r2, [r3, #0]
    4abc:	0792      	lsls	r2, r2, #30
    4abe:	d502      	bpl.n	4ac6 <am_hal_pwrctrl_bucks_init+0xe>
    4ac0:	6818      	ldr	r0, [r3, #0]
    4ac2:	07c3      	lsls	r3, r0, #31
    4ac4:	d40e      	bmi.n	4ae4 <am_hal_pwrctrl_bucks_init+0x2c>
    4ac6:	4b0d      	ldr	r3, [pc, #52]	; (4afc <am_hal_pwrctrl_bucks_init+0x44>)
    4ac8:	4a0b      	ldr	r2, [pc, #44]	; (4af8 <am_hal_pwrctrl_bucks_init+0x40>)
    4aca:	6819      	ldr	r1, [r3, #0]
    4acc:	f041 0002 	orr.w	r0, r1, #2
    4ad0:	6018      	str	r0, [r3, #0]
    4ad2:	6819      	ldr	r1, [r3, #0]
    4ad4:	f041 0001 	orr.w	r0, r1, #1
    4ad8:	6018      	str	r0, [r3, #0]
    4ada:	6813      	ldr	r3, [r2, #0]
    4adc:	f003 0103 	and.w	r1, r3, #3
    4ae0:	2903      	cmp	r1, #3
    4ae2:	d1fa      	bne.n	4ada <am_hal_pwrctrl_bucks_init+0x22>
    4ae4:	4a04      	ldr	r2, [pc, #16]	; (4af8 <am_hal_pwrctrl_bucks_init+0x40>)
    4ae6:	6810      	ldr	r0, [r2, #0]
    4ae8:	f000 0303 	and.w	r3, r0, #3
    4aec:	2b03      	cmp	r3, #3
    4aee:	d1fa      	bne.n	4ae6 <am_hal_pwrctrl_bucks_init+0x2e>
    4af0:	2042      	movs	r0, #66	; 0x42
    4af2:	f7ff bd3d 	b.w	4570 <am_hal_flash_delay>
    4af6:	bf00      	nop
    4af8:	40021004 	.word	0x40021004
    4afc:	40021000 	.word	0x40021000

00004b00 <am_hal_pwrctrl_bucks_enable>:
    4b00:	4b0b      	ldr	r3, [pc, #44]	; (4b30 <am_hal_pwrctrl_bucks_enable+0x30>)
    4b02:	681a      	ldr	r2, [r3, #0]
    4b04:	0792      	lsls	r2, r2, #30
    4b06:	d502      	bpl.n	4b0e <am_hal_pwrctrl_bucks_enable+0xe>
    4b08:	6818      	ldr	r0, [r3, #0]
    4b0a:	07c3      	lsls	r3, r0, #31
    4b0c:	d40e      	bmi.n	4b2c <am_hal_pwrctrl_bucks_enable+0x2c>
    4b0e:	4b09      	ldr	r3, [pc, #36]	; (4b34 <am_hal_pwrctrl_bucks_enable+0x34>)
    4b10:	4a07      	ldr	r2, [pc, #28]	; (4b30 <am_hal_pwrctrl_bucks_enable+0x30>)
    4b12:	6819      	ldr	r1, [r3, #0]
    4b14:	f041 0002 	orr.w	r0, r1, #2
    4b18:	6018      	str	r0, [r3, #0]
    4b1a:	6819      	ldr	r1, [r3, #0]
    4b1c:	f041 0001 	orr.w	r0, r1, #1
    4b20:	6018      	str	r0, [r3, #0]
    4b22:	6813      	ldr	r3, [r2, #0]
    4b24:	f003 0103 	and.w	r1, r3, #3
    4b28:	2903      	cmp	r1, #3
    4b2a:	d1fa      	bne.n	4b22 <am_hal_pwrctrl_bucks_enable+0x22>
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop
    4b30:	40021004 	.word	0x40021004
    4b34:	40021000 	.word	0x40021000

00004b38 <am_hal_pwrctrl_bucks_disable>:
    4b38:	4b12      	ldr	r3, [pc, #72]	; (4b84 <am_hal_pwrctrl_bucks_disable+0x4c>)
    4b3a:	681a      	ldr	r2, [r3, #0]
    4b3c:	0792      	lsls	r2, r2, #30
    4b3e:	d402      	bmi.n	4b46 <am_hal_pwrctrl_bucks_disable+0xe>
    4b40:	6818      	ldr	r0, [r3, #0]
    4b42:	07c3      	lsls	r3, r0, #31
    4b44:	d51c      	bpl.n	4b80 <am_hal_pwrctrl_bucks_disable+0x48>
    4b46:	4910      	ldr	r1, [pc, #64]	; (4b88 <am_hal_pwrctrl_bucks_disable+0x50>)
    4b48:	680b      	ldr	r3, [r1, #0]
    4b4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    4b4e:	2a20      	cmp	r2, #32
    4b50:	d00b      	beq.n	4b6a <am_hal_pwrctrl_bucks_disable+0x32>
    4b52:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <am_hal_pwrctrl_bucks_disable+0x54>)
    4b54:	681a      	ldr	r2, [r3, #0]
    4b56:	f022 0002 	bic.w	r0, r2, #2
    4b5a:	6018      	str	r0, [r3, #0]
    4b5c:	6819      	ldr	r1, [r3, #0]
    4b5e:	f021 0201 	bic.w	r2, r1, #1
    4b62:	601a      	str	r2, [r3, #0]
    4b64:	200a      	movs	r0, #10
    4b66:	f7ff bd03 	b.w	4570 <am_hal_flash_delay>
    4b6a:	4809      	ldr	r0, [pc, #36]	; (4b90 <am_hal_pwrctrl_bucks_disable+0x58>)
    4b6c:	6801      	ldr	r1, [r0, #0]
    4b6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4b72:	d1ee      	bne.n	4b52 <am_hal_pwrctrl_bucks_disable+0x1a>
    4b74:	4805      	ldr	r0, [pc, #20]	; (4b8c <am_hal_pwrctrl_bucks_disable+0x54>)
    4b76:	6803      	ldr	r3, [r0, #0]
    4b78:	f003 0105 	and.w	r1, r3, #5
    4b7c:	6001      	str	r1, [r0, #0]
    4b7e:	e7f1      	b.n	4b64 <am_hal_pwrctrl_bucks_disable+0x2c>
    4b80:	4770      	bx	lr
    4b82:	bf00      	nop
    4b84:	40021004 	.word	0x40021004
    4b88:	4002000c 	.word	0x4002000c
    4b8c:	40021000 	.word	0x40021000
    4b90:	40021008 	.word	0x40021008

00004b94 <am_hal_pwrctrl_low_power_init>:
    4b94:	4905      	ldr	r1, [pc, #20]	; (4bac <am_hal_pwrctrl_low_power_init+0x18>)
    4b96:	4a06      	ldr	r2, [pc, #24]	; (4bb0 <am_hal_pwrctrl_low_power_init+0x1c>)
    4b98:	680b      	ldr	r3, [r1, #0]
    4b9a:	f043 0006 	orr.w	r0, r3, #6
    4b9e:	6008      	str	r0, [r1, #0]
    4ba0:	6811      	ldr	r1, [r2, #0]
    4ba2:	f021 0304 	bic.w	r3, r1, #4
    4ba6:	6013      	str	r3, [r2, #0]
    4ba8:	4770      	bx	lr
    4baa:	bf00      	nop
    4bac:	40021018 	.word	0x40021018
    4bb0:	40021000 	.word	0x40021000

00004bb4 <am_hal_rtc_osc_select>:
    4bb4:	4a05      	ldr	r2, [pc, #20]	; (4bcc <am_hal_rtc_osc_select+0x18>)
    4bb6:	6813      	ldr	r3, [r2, #0]
    4bb8:	b918      	cbnz	r0, 4bc2 <am_hal_rtc_osc_select+0xe>
    4bba:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    4bbe:	6010      	str	r0, [r2, #0]
    4bc0:	4770      	bx	lr
    4bc2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    4bc6:	6011      	str	r1, [r2, #0]
    4bc8:	4770      	bx	lr
    4bca:	bf00      	nop
    4bcc:	4000400c 	.word	0x4000400c

00004bd0 <am_hal_rtc_osc_disable>:
    4bd0:	4a02      	ldr	r2, [pc, #8]	; (4bdc <am_hal_rtc_osc_disable+0xc>)
    4bd2:	6813      	ldr	r3, [r2, #0]
    4bd4:	f043 0010 	orr.w	r0, r3, #16
    4bd8:	6010      	str	r0, [r2, #0]
    4bda:	4770      	bx	lr
    4bdc:	40004050 	.word	0x40004050

00004be0 <am_hal_stimer_config>:
    4be0:	4b0c      	ldr	r3, [pc, #48]	; (4c14 <am_hal_stimer_config+0x34>)
    4be2:	6819      	ldr	r1, [r3, #0]
    4be4:	6018      	str	r0, [r3, #0]
    4be6:	681a      	ldr	r2, [r3, #0]
    4be8:	f002 000f 	and.w	r0, r2, #15
    4bec:	2801      	cmp	r0, #1
    4bee:	4a0a      	ldr	r2, [pc, #40]	; (4c18 <am_hal_stimer_config+0x38>)
    4bf0:	d00a      	beq.n	4c08 <am_hal_stimer_config+0x28>
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	f003 000f 	and.w	r0, r3, #15
    4bf8:	2802      	cmp	r0, #2
    4bfa:	d005      	beq.n	4c08 <am_hal_stimer_config+0x28>
    4bfc:	6813      	ldr	r3, [r2, #0]
    4bfe:	f043 0004 	orr.w	r0, r3, #4
    4c02:	6010      	str	r0, [r2, #0]
    4c04:	4608      	mov	r0, r1
    4c06:	4770      	bx	lr
    4c08:	6813      	ldr	r3, [r2, #0]
    4c0a:	f023 0004 	bic.w	r0, r3, #4
    4c0e:	6010      	str	r0, [r2, #0]
    4c10:	4608      	mov	r0, r1
    4c12:	4770      	bx	lr
    4c14:	40008100 	.word	0x40008100
    4c18:	40021020 	.word	0x40021020

00004c1c <am_hal_stimer_counter_get>:
    4c1c:	4b01      	ldr	r3, [pc, #4]	; (4c24 <am_hal_stimer_counter_get+0x8>)
    4c1e:	6818      	ldr	r0, [r3, #0]
    4c20:	4770      	bx	lr
    4c22:	bf00      	nop
    4c24:	40008104 	.word	0x40008104

00004c28 <am_hal_stimer_compare_delta_set>:
    4c28:	2807      	cmp	r0, #7
    4c2a:	d900      	bls.n	4c2e <am_hal_stimer_compare_delta_set+0x6>
    4c2c:	4770      	bx	lr
    4c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c32:	4d0d      	ldr	r5, [pc, #52]	; (4c68 <am_hal_stimer_compare_delta_set+0x40>)
    4c34:	f44f 7780 	mov.w	r7, #256	; 0x100
    4c38:	f8d5 8000 	ldr.w	r8, [r5]
    4c3c:	682b      	ldr	r3, [r5, #0]
    4c3e:	4087      	lsls	r7, r0
    4c40:	4604      	mov	r4, r0
    4c42:	ea23 0007 	bic.w	r0, r3, r7
    4c46:	6028      	str	r0, [r5, #0]
    4c48:	460e      	mov	r6, r1
    4c4a:	f7ff fd85 	bl	4758 <am_hal_interrupt_master_disable>
    4c4e:	4907      	ldr	r1, [pc, #28]	; (4c6c <am_hal_stimer_compare_delta_set+0x44>)
    4c50:	4421      	add	r1, r4
    4c52:	008a      	lsls	r2, r1, #2
    4c54:	ea07 0408 	and.w	r4, r7, r8
    4c58:	6016      	str	r6, [r2, #0]
    4c5a:	682e      	ldr	r6, [r5, #0]
    4c5c:	4334      	orrs	r4, r6
    4c5e:	602c      	str	r4, [r5, #0]
    4c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c64:	f7ff bd7c 	b.w	4760 <am_hal_interrupt_master_set>
    4c68:	40008100 	.word	0x40008100
    4c6c:	10002044 	.word	0x10002044

00004c70 <am_hal_stimer_int_enable>:
    4c70:	4a02      	ldr	r2, [pc, #8]	; (4c7c <am_hal_stimer_int_enable+0xc>)
    4c72:	6813      	ldr	r3, [r2, #0]
    4c74:	4318      	orrs	r0, r3
    4c76:	6010      	str	r0, [r2, #0]
    4c78:	4770      	bx	lr
    4c7a:	bf00      	nop
    4c7c:	40008300 	.word	0x40008300

00004c80 <am_hal_stimer_int_clear>:
    4c80:	4b01      	ldr	r3, [pc, #4]	; (4c88 <am_hal_stimer_int_clear+0x8>)
    4c82:	6018      	str	r0, [r3, #0]
    4c84:	4770      	bx	lr
    4c86:	bf00      	nop
    4c88:	40008308 	.word	0x40008308

00004c8c <am_hal_stimer_int_status_get>:
    4c8c:	4b03      	ldr	r3, [pc, #12]	; (4c9c <am_hal_stimer_int_status_get+0x10>)
    4c8e:	6819      	ldr	r1, [r3, #0]
    4c90:	b110      	cbz	r0, 4c98 <am_hal_stimer_int_status_get+0xc>
    4c92:	4a03      	ldr	r2, [pc, #12]	; (4ca0 <am_hal_stimer_int_status_get+0x14>)
    4c94:	6810      	ldr	r0, [r2, #0]
    4c96:	4001      	ands	r1, r0
    4c98:	4608      	mov	r0, r1
    4c9a:	4770      	bx	lr
    4c9c:	40008304 	.word	0x40008304
    4ca0:	40008300 	.word	0x40008300

00004ca4 <am_hal_sysctrl_sleep>:
    4ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ca6:	b083      	sub	sp, #12
    4ca8:	4605      	mov	r5, r0
    4caa:	f7ff fd55 	bl	4758 <am_hal_interrupt_master_disable>
    4cae:	4a41      	ldr	r2, [pc, #260]	; (4db4 <am_hal_sysctrl_sleep+0x110>)
    4cb0:	4604      	mov	r4, r0
    4cb2:	b11d      	cbz	r5, 4cbc <am_hal_sysctrl_sleep+0x18>
    4cb4:	4b40      	ldr	r3, [pc, #256]	; (4db8 <am_hal_sysctrl_sleep+0x114>)
    4cb6:	6818      	ldr	r0, [r3, #0]
    4cb8:	07c3      	lsls	r3, r0, #31
    4cba:	d509      	bpl.n	4cd0 <am_hal_sysctrl_sleep+0x2c>
    4cbc:	6811      	ldr	r1, [r2, #0]
    4cbe:	f021 0604 	bic.w	r6, r1, #4
    4cc2:	6016      	str	r6, [r2, #0]
    4cc4:	bf30      	wfi
    4cc6:	4620      	mov	r0, r4
    4cc8:	f7ff fd4a 	bl	4760 <am_hal_interrupt_master_set>
    4ccc:	b003      	add	sp, #12
    4cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cd0:	6813      	ldr	r3, [r2, #0]
    4cd2:	493a      	ldr	r1, [pc, #232]	; (4dbc <am_hal_sysctrl_sleep+0x118>)
    4cd4:	4f3a      	ldr	r7, [pc, #232]	; (4dc0 <am_hal_sysctrl_sleep+0x11c>)
    4cd6:	4d3b      	ldr	r5, [pc, #236]	; (4dc4 <am_hal_sysctrl_sleep+0x120>)
    4cd8:	483b      	ldr	r0, [pc, #236]	; (4dc8 <am_hal_sysctrl_sleep+0x124>)
    4cda:	f043 0604 	orr.w	r6, r3, #4
    4cde:	6016      	str	r6, [r2, #0]
    4ce0:	6809      	ldr	r1, [r1, #0]
    4ce2:	683b      	ldr	r3, [r7, #0]
    4ce4:	682a      	ldr	r2, [r5, #0]
    4ce6:	6800      	ldr	r0, [r0, #0]
    4ce8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    4cec:	2920      	cmp	r1, #32
    4cee:	f103 36ff 	add.w	r6, r3, #4294967295
    4cf2:	bf14      	ite	ne
    4cf4:	2500      	movne	r5, #0
    4cf6:	2502      	moveq	r5, #2
    4cf8:	2e03      	cmp	r6, #3
    4cfa:	bf8c      	ite	hi
    4cfc:	2100      	movhi	r1, #0
    4cfe:	2104      	movls	r1, #4
    4d00:	f012 0303 	ands.w	r3, r2, #3
    4d04:	bf18      	it	ne
    4d06:	2301      	movne	r3, #1
    4d08:	f240 56ff 	movw	r6, #1535	; 0x5ff
    4d0c:	432b      	orrs	r3, r5
    4d0e:	4006      	ands	r6, r0
    4d10:	ea43 0501 	orr.w	r5, r3, r1
    4d14:	b91e      	cbnz	r6, 4d1e <am_hal_sysctrl_sleep+0x7a>
    4d16:	f045 0508 	orr.w	r5, r5, #8
    4d1a:	2d0f      	cmp	r5, #15
    4d1c:	d00a      	beq.n	4d34 <am_hal_sysctrl_sleep+0x90>
    4d1e:	bf30      	wfi
    4d20:	2d0f      	cmp	r5, #15
    4d22:	d01a      	beq.n	4d5a <am_hal_sysctrl_sleep+0xb6>
    4d24:	4f29      	ldr	r7, [pc, #164]	; (4dcc <am_hal_sysctrl_sleep+0x128>)
    4d26:	2101      	movs	r1, #1
    4d28:	4620      	mov	r0, r4
    4d2a:	7039      	strb	r1, [r7, #0]
    4d2c:	f7ff fd18 	bl	4760 <am_hal_interrupt_master_set>
    4d30:	b003      	add	sp, #12
    4d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d34:	683a      	ldr	r2, [r7, #0]
    4d36:	1e50      	subs	r0, r2, #1
    4d38:	9000      	str	r0, [sp, #0]
    4d3a:	9800      	ldr	r0, [sp, #0]
    4d3c:	f04f 31ff 	mov.w	r1, #4294967295
    4d40:	f7ff fb9e 	bl	4480 <am_hal_ctimer_clear>
    4d44:	9800      	ldr	r0, [sp, #0]
    4d46:	4633      	mov	r3, r6
    4d48:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4d4c:	f04f 31ff 	mov.w	r1, #4294967295
    4d50:	f7ff fbaa 	bl	44a8 <am_hal_ctimer_period_set>
    4d54:	f7ff fef0 	bl	4b38 <am_hal_pwrctrl_bucks_disable>
    4d58:	e7e1      	b.n	4d1e <am_hal_sysctrl_sleep+0x7a>
    4d5a:	f3ef 8310 	mrs	r3, PRIMASK
    4d5e:	9301      	str	r3, [sp, #4]
    4d60:	b672      	cpsid	i
    4d62:	4e1b      	ldr	r6, [pc, #108]	; (4dd0 <am_hal_sysctrl_sleep+0x12c>)
    4d64:	6832      	ldr	r2, [r6, #0]
    4d66:	6832      	ldr	r2, [r6, #0]
    4d68:	6835      	ldr	r5, [r6, #0]
    4d6a:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    4d6e:	f04c 021c 	orr.w	r2, ip, #28
    4d72:	6032      	str	r2, [r6, #0]
    4d74:	6830      	ldr	r0, [r6, #0]
    4d76:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    4d7a:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    4d7e:	6033      	str	r3, [r6, #0]
    4d80:	9e01      	ldr	r6, [sp, #4]
    4d82:	f386 8810 	msr	PRIMASK, r6
    4d86:	201c      	movs	r0, #28
    4d88:	f7ff fbf2 	bl	4570 <am_hal_flash_delay>
    4d8c:	f7ff feb8 	bl	4b00 <am_hal_pwrctrl_bucks_enable>
    4d90:	683f      	ldr	r7, [r7, #0]
    4d92:	4910      	ldr	r1, [pc, #64]	; (4dd4 <am_hal_sysctrl_sleep+0x130>)
    4d94:	4d0d      	ldr	r5, [pc, #52]	; (4dcc <am_hal_sysctrl_sleep+0x128>)
    4d96:	2200      	movs	r2, #0
    4d98:	1e7b      	subs	r3, r7, #1
    4d9a:	204c      	movs	r0, #76	; 0x4c
    4d9c:	9300      	str	r3, [sp, #0]
    4d9e:	702a      	strb	r2, [r5, #0]
    4da0:	600a      	str	r2, [r1, #0]
    4da2:	f7ff fbe5 	bl	4570 <am_hal_flash_delay>
    4da6:	9800      	ldr	r0, [sp, #0]
    4da8:	f04f 31ff 	mov.w	r1, #4294967295
    4dac:	f7ff fb4e 	bl	444c <am_hal_ctimer_start>
    4db0:	e789      	b.n	4cc6 <am_hal_sysctrl_sleep+0x22>
    4db2:	bf00      	nop
    4db4:	e000ed10 	.word	0xe000ed10
    4db8:	40020250 	.word	0x40020250
    4dbc:	4002000c 	.word	0x4002000c
    4dc0:	100065cc 	.word	0x100065cc
    4dc4:	40021000 	.word	0x40021000
    4dc8:	40021008 	.word	0x40021008
    4dcc:	100065c4 	.word	0x100065c4
    4dd0:	40020068 	.word	0x40020068
    4dd4:	100065c8 	.word	0x100065c8

00004dd8 <am_hal_sysctrl_fpu_enable>:
    4dd8:	4b02      	ldr	r3, [pc, #8]	; (4de4 <am_hal_sysctrl_fpu_enable+0xc>)
    4dda:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    4dde:	601a      	str	r2, [r3, #0]
    4de0:	4770      	bx	lr
    4de2:	bf00      	nop
    4de4:	e000ed88 	.word	0xe000ed88

00004de8 <am_hal_sysctrl_fpu_stacking_enable>:
    4de8:	4a05      	ldr	r2, [pc, #20]	; (4e00 <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    4dea:	6813      	ldr	r3, [r2, #0]
    4dec:	b918      	cbnz	r0, 4df6 <am_hal_sysctrl_fpu_stacking_enable+0xe>
    4dee:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    4df2:	6010      	str	r0, [r2, #0]
    4df4:	4770      	bx	lr
    4df6:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    4dfa:	6011      	str	r1, [r2, #0]
    4dfc:	4770      	bx	lr
    4dfe:	bf00      	nop
    4e00:	e000ef34 	.word	0xe000ef34

00004e04 <am_hal_tpiu_enable>:
    4e04:	b538      	push	{r3, r4, r5, lr}
    4e06:	4a22      	ldr	r2, [pc, #136]	; (4e90 <am_hal_tpiu_enable+0x8c>)
    4e08:	6803      	ldr	r3, [r0, #0]
    4e0a:	2100      	movs	r1, #0
    4e0c:	6011      	str	r1, [r2, #0]
    4e0e:	b333      	cbz	r3, 4e5e <am_hal_tpiu_enable+0x5a>
    4e10:	4d20      	ldr	r5, [pc, #128]	; (4e94 <am_hal_tpiu_enable+0x90>)
    4e12:	4921      	ldr	r1, [pc, #132]	; (4e98 <am_hal_tpiu_enable+0x94>)
    4e14:	4a21      	ldr	r2, [pc, #132]	; (4e9c <am_hal_tpiu_enable+0x98>)
    4e16:	2401      	movs	r4, #1
    4e18:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    4e1c:	602c      	str	r4, [r5, #0]
    4e1e:	458c      	cmp	ip, r1
    4e20:	bf94      	ite	ls
    4e22:	461d      	movls	r5, r3
    4e24:	4615      	movhi	r5, r2
    4e26:	f7ff fadf 	bl	43e8 <am_hal_clkgen_sysclk_get>
    4e2a:	1c43      	adds	r3, r0, #1
    4e2c:	d02e      	beq.n	4e8c <am_hal_tpiu_enable+0x88>
    4e2e:	08c3      	lsrs	r3, r0, #3
    4e30:	fbb3 fef5 	udiv	lr, r3, r5
    4e34:	f10e 31ff 	add.w	r1, lr, #4294967295
    4e38:	b288      	uxth	r0, r1
    4e3a:	4a19      	ldr	r2, [pc, #100]	; (4ea0 <am_hal_tpiu_enable+0x9c>)
    4e3c:	4c19      	ldr	r4, [pc, #100]	; (4ea4 <am_hal_tpiu_enable+0xa0>)
    4e3e:	4b1a      	ldr	r3, [pc, #104]	; (4ea8 <am_hal_tpiu_enable+0xa4>)
    4e40:	491a      	ldr	r1, [pc, #104]	; (4eac <am_hal_tpiu_enable+0xa8>)
    4e42:	6010      	str	r0, [r2, #0]
    4e44:	2502      	movs	r5, #2
    4e46:	2000      	movs	r0, #0
    4e48:	f240 2201 	movw	r2, #513	; 0x201
    4e4c:	6025      	str	r5, [r4, #0]
    4e4e:	6008      	str	r0, [r1, #0]
    4e50:	601a      	str	r2, [r3, #0]
    4e52:	f44f 7047 	mov.w	r0, #796	; 0x31c
    4e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4e5a:	f7ff bb89 	b.w	4570 <am_hal_flash_delay>
    4e5e:	4c10      	ldr	r4, [pc, #64]	; (4ea0 <am_hal_tpiu_enable+0x9c>)
    4e60:	6905      	ldr	r5, [r0, #16]
    4e62:	6025      	str	r5, [r4, #0]
    4e64:	6882      	ldr	r2, [r0, #8]
    4e66:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    4e6a:	68c3      	ldr	r3, [r0, #12]
    4e6c:	4c09      	ldr	r4, [pc, #36]	; (4e94 <am_hal_tpiu_enable+0x90>)
    4e6e:	490e      	ldr	r1, [pc, #56]	; (4ea8 <am_hal_tpiu_enable+0xa4>)
    4e70:	1e5d      	subs	r5, r3, #1
    4e72:	2201      	movs	r2, #1
    4e74:	40aa      	lsls	r2, r5
    4e76:	6022      	str	r2, [r4, #0]
    4e78:	680b      	ldr	r3, [r1, #0]
    4e7a:	6840      	ldr	r0, [r0, #4]
    4e7c:	4318      	orrs	r0, r3
    4e7e:	6008      	str	r0, [r1, #0]
    4e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4e84:	f44f 7047 	mov.w	r0, #796	; 0x31c
    4e88:	f7ff bb72 	b.w	4570 <am_hal_flash_delay>
    4e8c:	2005      	movs	r0, #5
    4e8e:	e7d4      	b.n	4e3a <am_hal_tpiu_enable+0x36>
    4e90:	e0040304 	.word	0xe0040304
    4e94:	e0040004 	.word	0xe0040004
    4e98:	001da380 	.word	0x001da380
    4e9c:	000f4240 	.word	0x000f4240
    4ea0:	e0040010 	.word	0xe0040010
    4ea4:	e00400f0 	.word	0xe00400f0
    4ea8:	40020250 	.word	0x40020250
    4eac:	e0040f00 	.word	0xe0040f00

00004eb0 <am_hal_tpiu_disable>:
    4eb0:	4b01      	ldr	r3, [pc, #4]	; (4eb8 <am_hal_tpiu_disable+0x8>)
    4eb2:	2200      	movs	r2, #0
    4eb4:	601a      	str	r2, [r3, #0]
    4eb6:	4770      	bx	lr
    4eb8:	40020250 	.word	0x40020250

00004ebc <am_hal_vcomp_disable>:
    4ebc:	4b01      	ldr	r3, [pc, #4]	; (4ec4 <am_hal_vcomp_disable+0x8>)
    4ebe:	2237      	movs	r2, #55	; 0x37
    4ec0:	601a      	str	r2, [r3, #0]
    4ec2:	4770      	bx	lr
    4ec4:	4000c008 	.word	0x4000c008

00004ec8 <memcpy>:
    4ec8:	b510      	push	{r4, lr}
    4eca:	1e43      	subs	r3, r0, #1
    4ecc:	440a      	add	r2, r1
    4ece:	4291      	cmp	r1, r2
    4ed0:	d100      	bne.n	4ed4 <memcpy+0xc>
    4ed2:	bd10      	pop	{r4, pc}
    4ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
    4ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
    4edc:	e7f7      	b.n	4ece <memcpy+0x6>

00004ede <memset>:
    4ede:	4402      	add	r2, r0
    4ee0:	4603      	mov	r3, r0
    4ee2:	4293      	cmp	r3, r2
    4ee4:	d100      	bne.n	4ee8 <memset+0xa>
    4ee6:	4770      	bx	lr
    4ee8:	f803 1b01 	strb.w	r1, [r3], #1
    4eec:	e7f9      	b.n	4ee2 <memset+0x4>
    4eee:	0000      	movs	r0, r0
    4ef0:	454c4449 	.word	0x454c4449
    4ef4:	00000000 	.word	0x00000000
    4ef8:	20726d54 	.word	0x20726d54
    4efc:	00637653 	.word	0x00637653
    4f00:	65657246 	.word	0x65657246
    4f04:	534f5452 	.word	0x534f5452
    4f08:	776f4c20 	.word	0x776f4c20
    4f0c:	776f5020 	.word	0x776f5020
    4f10:	45207265 	.word	0x45207265
    4f14:	706d6178 	.word	0x706d6178
    4f18:	000a656c 	.word	0x000a656c
    4f1c:	5444454c 	.word	0x5444454c
    4f20:	3a6b7361 	.word	0x3a6b7361
    4f24:	74657320 	.word	0x74657320
    4f28:	0a0d7075 	.word	0x0a0d7075
    4f2c:	00000000 	.word	0x00000000
    4f30:	6e6e7552 	.word	0x6e6e7552
    4f34:	20676e69 	.word	0x20676e69
    4f38:	75746573 	.word	0x75746573
    4f3c:	61742070 	.word	0x61742070
    4f40:	2e736b73 	.word	0x2e736b73
    4f44:	0a0d2e2e 	.word	0x0a0d2e2e
    4f48:	00000000 	.word	0x00000000
    4f4c:	5444454c 	.word	0x5444454c
    4f50:	006b7361 	.word	0x006b7361
    4f54:	75746553 	.word	0x75746553
    4f58:	00000070 	.word	0x00000070
    4f5c:	0a0a0a0a 	.word	0x0a0a0a0a
    4f60:	0a0a0a0a 	.word	0x0a0a0a0a
    4f64:	0a0a0a0a 	.word	0x0a0a0a0a
    4f68:	0a0a0a0a 	.word	0x0a0a0a0a
    4f6c:	00000a0a 	.word	0x00000a0a

00004f70 <am_hal_cachectrl_defaults>:
    4f70:	50000001 00010300 00010101 685f6d61     ...P........am_h
    4f80:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    4f90:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    4fa0:	63206469 6b636f6c 74657320 676e6974     id clock setting
    4fb0:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    4fc0:	6b6c635f 2e6e6567 00000063 61766e49     _clkgen.c...Inva
    4fd0:	2064696c 4f495047 6d756e20 2e726562     lid GPIO number.
    4fe0:	00000000 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    4ff0:	6970675f 00632e6f 4f495047 6d756e20     _gpio.c.GPIO num
    5000:	20726562 2074756f 7220666f 65676e61     ber out of range
    5010:	0000002e                                ....
