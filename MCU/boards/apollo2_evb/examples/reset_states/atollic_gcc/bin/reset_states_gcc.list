
C:\jenkins\jobs\ambiqsuite-checkout\workspace\ambiqsuite-sdk\boards\apollo2_evb\examples\reset_states\atollic_gcc\bin\reset_states_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002440  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000080  10001000  00002440  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000011c  10001080  000024c0  00021080  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021080  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006c26  00000000  00000000  000210b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ede  00000000  00000000  00027cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000920  00000000  00000000  00029bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000f40  00000000  00000000  0002a4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000047c7  00000000  00000000  0002b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002edd  00000000  00000000  0002fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007e  00000000  00000000  00032abf  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001914  00000000  00000000  00032b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003952  00000000  00000000  00034454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 45 08 00 00 ad 08 00 00 ed 08 00 00     ....E...........
      10:	ed 08 00 00 ed 08 00 00 ed 08 00 00 00 00 00 00     ................
	...
      2c:	b5 08 00 00 b5 08 00 00 00 00 00 00 b5 08 00 00     ................
      3c:	b5 08 00 00 b5 08 00 00 e5 05 00 00 b5 08 00 00     ................
      4c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      5c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      6c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      7c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      8c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      9c:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      ac:	b5 08 00 00 b5 08 00 00 b5 08 00 00 b5 08 00 00     ................
      bc:	b5 08 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     160:	b490      	push	{r4, r7}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     168:	687b      	ldr	r3, [r7, #4]
     16a:	685b      	ldr	r3, [r3, #4]
     16c:	f003 0302 	and.w	r3, r3, #2
     170:	2b00      	cmp	r3, #0
     172:	f000 80aa 	beq.w	2ca <am_devices_led_init+0x16a>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     176:	687b      	ldr	r3, [r7, #4]
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b31      	cmp	r3, #49	; 0x31
     17c:	d86d      	bhi.n	25a <am_devices_led_init+0xfa>
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	60fb      	str	r3, [r7, #12]
     184:	b672      	cpsid	i
     186:	4ba8      	ldr	r3, [pc, #672]	; (428 <am_devices_led_init+0x2c8>)
     188:	2273      	movs	r2, #115	; 0x73
     18a:	601a      	str	r2, [r3, #0]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	085b      	lsrs	r3, r3, #1
     192:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     196:	4ba5      	ldr	r3, [pc, #660]	; (42c <am_devices_led_init+0x2cc>)
     198:	4413      	add	r3, r2
     19a:	461c      	mov	r4, r3
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	009b      	lsls	r3, r3, #2
     1a2:	f003 031c 	and.w	r3, r3, #28
     1a6:	2202      	movs	r2, #2
     1a8:	409a      	lsls	r2, r3
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	085b      	lsrs	r3, r3, #1
     1b0:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1b4:	4b9d      	ldr	r3, [pc, #628]	; (42c <am_devices_led_init+0x2cc>)
     1b6:	440b      	add	r3, r1
     1b8:	6819      	ldr	r1, [r3, #0]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	009b      	lsls	r3, r3, #2
     1c0:	f003 031c 	and.w	r3, r3, #28
     1c4:	2007      	movs	r0, #7
     1c6:	fa00 f303 	lsl.w	r3, r0, r3
     1ca:	43db      	mvns	r3, r3
     1cc:	400b      	ands	r3, r1
     1ce:	4313      	orrs	r3, r2
     1d0:	6023      	str	r3, [r4, #0]
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1e2:	461c      	mov	r4, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	00db      	lsls	r3, r3, #3
     1ea:	f003 0318 	and.w	r3, r3, #24
     1ee:	2218      	movs	r2, #24
     1f0:	409a      	lsls	r2, r3
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     202:	6819      	ldr	r1, [r3, #0]
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	00db      	lsls	r3, r3, #3
     20a:	f003 0318 	and.w	r3, r3, #24
     20e:	20ff      	movs	r0, #255	; 0xff
     210:	fa00 f303 	lsl.w	r3, r0, r3
     214:	43db      	mvns	r3, r3
     216:	400b      	ands	r3, r1
     218:	4313      	orrs	r3, r2
     21a:	6023      	str	r3, [r4, #0]
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     224:	4b82      	ldr	r3, [pc, #520]	; (430 <am_devices_led_init+0x2d0>)
     226:	4413      	add	r3, r2
     228:	4618      	mov	r0, r3
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <am_devices_led_init+0x2d0>)
     234:	4413      	add	r3, r2
     236:	681a      	ldr	r2, [r3, #0]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	00db      	lsls	r3, r3, #3
     23e:	f003 0318 	and.w	r3, r3, #24
     242:	21ff      	movs	r1, #255	; 0xff
     244:	fa01 f303 	lsl.w	r3, r1, r3
     248:	43db      	mvns	r3, r3
     24a:	4013      	ands	r3, r2
     24c:	6003      	str	r3, [r0, #0]
     24e:	4b76      	ldr	r3, [pc, #472]	; (428 <am_devices_led_init+0x2c8>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
     254:	68fb      	ldr	r3, [r7, #12]
     256:	f383 8810 	msr	PRIMASK, r3

        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	08db      	lsrs	r3, r3, #3
     260:	f003 0204 	and.w	r2, r3, #4
     264:	4b73      	ldr	r3, [pc, #460]	; (434 <am_devices_led_init+0x2d4>)
     266:	4413      	add	r3, r2
     268:	4619      	mov	r1, r3
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f003 031f 	and.w	r3, r3, #31
     272:	2201      	movs	r2, #1
     274:	fa02 f303 	lsl.w	r3, r2, r3
     278:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	f003 0301 	and.w	r3, r3, #1
     282:	2b00      	cmp	r3, #0
     284:	d010      	beq.n	2a8 <am_devices_led_init+0x148>
     286:	687b      	ldr	r3, [r7, #4]
     288:	681b      	ldr	r3, [r3, #0]
     28a:	08db      	lsrs	r3, r3, #3
     28c:	f003 0204 	and.w	r2, r3, #4
     290:	4b69      	ldr	r3, [pc, #420]	; (438 <am_devices_led_init+0x2d8>)
     292:	4413      	add	r3, r2
     294:	4619      	mov	r1, r3
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 031f 	and.w	r3, r3, #31
     29e:	2201      	movs	r2, #1
     2a0:	fa02 f303 	lsl.w	r3, r2, r3
     2a4:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2a6:	e0b9      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Enable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_set(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	08db      	lsrs	r3, r3, #3
     2ae:	f003 0204 	and.w	r2, r3, #4
     2b2:	4b62      	ldr	r3, [pc, #392]	; (43c <am_devices_led_init+0x2dc>)
     2b4:	4413      	add	r3, r2
     2b6:	4619      	mov	r1, r3
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f003 031f 	and.w	r3, r3, #31
     2c0:	2201      	movs	r2, #1
     2c2:	fa02 f303 	lsl.w	r3, r2, r3
     2c6:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     2c8:	e0a8      	b.n	41c <am_devices_led_init+0x2bc>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	2b31      	cmp	r3, #49	; 0x31
     2d0:	d86d      	bhi.n	3ae <am_devices_led_init+0x24e>
     2d2:	f3ef 8310 	mrs	r3, PRIMASK
     2d6:	60bb      	str	r3, [r7, #8]
     2d8:	b672      	cpsid	i
     2da:	4b53      	ldr	r3, [pc, #332]	; (428 <am_devices_led_init+0x2c8>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b50      	ldr	r3, [pc, #320]	; (42c <am_devices_led_init+0x2cc>)
     2ec:	4413      	add	r3, r2
     2ee:	461c      	mov	r4, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	f003 031c 	and.w	r3, r3, #28
     2fa:	2206      	movs	r2, #6
     2fc:	409a      	lsls	r2, r3
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	681b      	ldr	r3, [r3, #0]
     302:	085b      	lsrs	r3, r3, #1
     304:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <am_devices_led_init+0x2cc>)
     30a:	440b      	add	r3, r1
     30c:	6819      	ldr	r1, [r3, #0]
     30e:	687b      	ldr	r3, [r7, #4]
     310:	681b      	ldr	r3, [r3, #0]
     312:	009b      	lsls	r3, r3, #2
     314:	f003 031c 	and.w	r3, r3, #28
     318:	2007      	movs	r0, #7
     31a:	fa00 f303 	lsl.w	r3, r0, r3
     31e:	43db      	mvns	r3, r3
     320:	400b      	ands	r3, r1
     322:	4313      	orrs	r3, r2
     324:	6023      	str	r3, [r4, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     336:	461c      	mov	r4, r3
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	00db      	lsls	r3, r3, #3
     33e:	f003 0318 	and.w	r3, r3, #24
     342:	2218      	movs	r2, #24
     344:	409a      	lsls	r2, r3
     346:	687b      	ldr	r3, [r7, #4]
     348:	681b      	ldr	r3, [r3, #0]
     34a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     356:	6819      	ldr	r1, [r3, #0]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	00db      	lsls	r3, r3, #3
     35e:	f003 0318 	and.w	r3, r3, #24
     362:	20ff      	movs	r0, #255	; 0xff
     364:	fa00 f303 	lsl.w	r3, r0, r3
     368:	43db      	mvns	r3, r3
     36a:	400b      	ands	r3, r1
     36c:	4313      	orrs	r3, r2
     36e:	6023      	str	r3, [r4, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <am_devices_led_init+0x2d0>)
     37a:	4413      	add	r3, r2
     37c:	4618      	mov	r0, r3
     37e:	687b      	ldr	r3, [r7, #4]
     380:	681b      	ldr	r3, [r3, #0]
     382:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     386:	4b2a      	ldr	r3, [pc, #168]	; (430 <am_devices_led_init+0x2d0>)
     388:	4413      	add	r3, r2
     38a:	681a      	ldr	r2, [r3, #0]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	00db      	lsls	r3, r3, #3
     392:	f003 0318 	and.w	r3, r3, #24
     396:	21ff      	movs	r1, #255	; 0xff
     398:	fa01 f303 	lsl.w	r3, r1, r3
     39c:	43db      	mvns	r3, r3
     39e:	4013      	ands	r3, r2
     3a0:	6003      	str	r3, [r0, #0]
     3a2:	4b21      	ldr	r3, [pc, #132]	; (428 <am_devices_led_init+0x2c8>)
     3a4:	2200      	movs	r2, #0
     3a6:	601a      	str	r2, [r3, #0]
     3a8:	68bb      	ldr	r3, [r7, #8]
     3aa:	f383 8810 	msr	PRIMASK, r3

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	08db      	lsrs	r3, r3, #3
     3b4:	f003 0204 	and.w	r2, r3, #4
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <am_devices_led_init+0x2e0>)
     3ba:	4413      	add	r3, r2
     3bc:	4619      	mov	r1, r3
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	f003 031f 	and.w	r3, r3, #31
     3c6:	2201      	movs	r2, #1
     3c8:	fa02 f303 	lsl.w	r3, r2, r3
     3cc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	f003 0301 	and.w	r3, r3, #1
     3d6:	2b00      	cmp	r3, #0
     3d8:	d010      	beq.n	3fc <am_devices_led_init+0x29c>
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	08db      	lsrs	r3, r3, #3
     3e0:	f003 0204 	and.w	r2, r3, #4
     3e4:	4b14      	ldr	r3, [pc, #80]	; (438 <am_devices_led_init+0x2d8>)
     3e6:	4413      	add	r3, r2
     3e8:	4619      	mov	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	f003 031f 	and.w	r3, r3, #31
     3f2:	2201      	movs	r2, #1
     3f4:	fa02 f303 	lsl.w	r3, r2, r3
     3f8:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     3fa:	e00f      	b.n	41c <am_devices_led_init+0x2bc>
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	08db      	lsrs	r3, r3, #3
     402:	f003 0204 	and.w	r2, r3, #4
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <am_devices_led_init+0x2dc>)
     408:	4413      	add	r3, r2
     40a:	4619      	mov	r1, r3
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f003 031f 	and.w	r3, r3, #31
     414:	2201      	movs	r2, #1
     416:	fa02 f303 	lsl.w	r3, r2, r3
     41a:	600b      	str	r3, [r1, #0]
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
}
     41c:	bf00      	nop
     41e:	3710      	adds	r7, #16
     420:	46bd      	mov	sp, r7
     422:	bc90      	pop	{r4, r7}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40010060 	.word	0x40010060
     42c:	40010040 	.word	0x40010040
     430:	400100e0 	.word	0x400100e0
     434:	400100a8 	.word	0x400100a8
     438:	40010090 	.word	0x40010090
     43c:	40010098 	.word	0x40010098
     440:	400100b4 	.word	0x400100b4

00000444 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     444:	b480      	push	{r7}
     446:	b083      	sub	sp, #12
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     44e:	683b      	ldr	r3, [r7, #0]
     450:	00db      	lsls	r3, r3, #3
     452:	687a      	ldr	r2, [r7, #4]
     454:	4413      	add	r3, r2
     456:	685b      	ldr	r3, [r3, #4]
     458:	f003 0302 	and.w	r3, r3, #2
     45c:	2b00      	cmp	r3, #0
     45e:	d036      	beq.n	4ce <am_devices_led_on+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     460:	683b      	ldr	r3, [r7, #0]
     462:	00db      	lsls	r3, r3, #3
     464:	687a      	ldr	r2, [r7, #4]
     466:	4413      	add	r3, r2
     468:	685b      	ldr	r3, [r3, #4]
     46a:	f003 0301 	and.w	r3, r3, #1
     46e:	2b00      	cmp	r3, #0
     470:	d016      	beq.n	4a0 <am_devices_led_on+0x5c>
     472:	683b      	ldr	r3, [r7, #0]
     474:	00db      	lsls	r3, r3, #3
     476:	687a      	ldr	r2, [r7, #4]
     478:	4413      	add	r3, r2
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	08db      	lsrs	r3, r3, #3
     47e:	f003 0204 	and.w	r2, r3, #4
     482:	4b21      	ldr	r3, [pc, #132]	; (508 <am_devices_led_on+0xc4>)
     484:	4413      	add	r3, r2
     486:	4619      	mov	r1, r3
     488:	683b      	ldr	r3, [r7, #0]
     48a:	00db      	lsls	r3, r3, #3
     48c:	687a      	ldr	r2, [r7, #4]
     48e:	4413      	add	r3, r2
     490:	681b      	ldr	r3, [r3, #0]
     492:	f003 031f 	and.w	r3, r3, #31
     496:	2201      	movs	r2, #1
     498:	fa02 f303 	lsl.w	r3, r2, r3
     49c:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     49e:	e02c      	b.n	4fa <am_devices_led_on+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4a0:	683b      	ldr	r3, [r7, #0]
     4a2:	00db      	lsls	r3, r3, #3
     4a4:	687a      	ldr	r2, [r7, #4]
     4a6:	4413      	add	r3, r2
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	08db      	lsrs	r3, r3, #3
     4ac:	f003 0204 	and.w	r2, r3, #4
     4b0:	4b16      	ldr	r3, [pc, #88]	; (50c <am_devices_led_on+0xc8>)
     4b2:	4413      	add	r3, r2
     4b4:	4619      	mov	r1, r3
     4b6:	683b      	ldr	r3, [r7, #0]
     4b8:	00db      	lsls	r3, r3, #3
     4ba:	687a      	ldr	r2, [r7, #4]
     4bc:	4413      	add	r3, r2
     4be:	681b      	ldr	r3, [r3, #0]
     4c0:	f003 031f 	and.w	r3, r3, #31
     4c4:	2201      	movs	r2, #1
     4c6:	fa02 f303 	lsl.w	r3, r2, r3
     4ca:	600b      	str	r3, [r1, #0]
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     4cc:	e015      	b.n	4fa <am_devices_led_on+0xb6>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	00db      	lsls	r3, r3, #3
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	4413      	add	r3, r2
     4d6:	681b      	ldr	r3, [r3, #0]
     4d8:	08db      	lsrs	r3, r3, #3
     4da:	f003 0204 	and.w	r2, r3, #4
     4de:	4b0c      	ldr	r3, [pc, #48]	; (510 <am_devices_led_on+0xcc>)
     4e0:	4413      	add	r3, r2
     4e2:	4619      	mov	r1, r3
     4e4:	683b      	ldr	r3, [r7, #0]
     4e6:	00db      	lsls	r3, r3, #3
     4e8:	687a      	ldr	r2, [r7, #4]
     4ea:	4413      	add	r3, r2
     4ec:	681b      	ldr	r3, [r3, #0]
     4ee:	f003 031f 	and.w	r3, r3, #31
     4f2:	2201      	movs	r2, #1
     4f4:	fa02 f303 	lsl.w	r3, r2, r3
     4f8:	600b      	str	r3, [r1, #0]
    }
}
     4fa:	bf00      	nop
     4fc:	370c      	adds	r7, #12
     4fe:	46bd      	mov	sp, r7
     500:	f85d 7b04 	ldr.w	r7, [sp], #4
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	40010090 	.word	0x40010090
     50c:	40010098 	.word	0x40010098
     510:	400100a8 	.word	0x400100a8

00000514 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     514:	b480      	push	{r7}
     516:	b083      	sub	sp, #12
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	6039      	str	r1, [r7, #0]
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     51e:	683b      	ldr	r3, [r7, #0]
     520:	00db      	lsls	r3, r3, #3
     522:	687a      	ldr	r2, [r7, #4]
     524:	4413      	add	r3, r2
     526:	685b      	ldr	r3, [r3, #4]
     528:	f003 0302 	and.w	r3, r3, #2
     52c:	2b00      	cmp	r3, #0
     52e:	d036      	beq.n	59e <am_devices_led_off+0x8a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     530:	683b      	ldr	r3, [r7, #0]
     532:	00db      	lsls	r3, r3, #3
     534:	687a      	ldr	r2, [r7, #4]
     536:	4413      	add	r3, r2
     538:	685b      	ldr	r3, [r3, #4]
     53a:	f003 0301 	and.w	r3, r3, #1
     53e:	2b00      	cmp	r3, #0
     540:	d116      	bne.n	570 <am_devices_led_off+0x5c>
     542:	683b      	ldr	r3, [r7, #0]
     544:	00db      	lsls	r3, r3, #3
     546:	687a      	ldr	r2, [r7, #4]
     548:	4413      	add	r3, r2
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	08db      	lsrs	r3, r3, #3
     54e:	f003 0204 	and.w	r2, r3, #4
     552:	4b21      	ldr	r3, [pc, #132]	; (5d8 <am_devices_led_off+0xc4>)
     554:	4413      	add	r3, r2
     556:	4619      	mov	r1, r3
     558:	683b      	ldr	r3, [r7, #0]
     55a:	00db      	lsls	r3, r3, #3
     55c:	687a      	ldr	r2, [r7, #4]
     55e:	4413      	add	r3, r2
     560:	681b      	ldr	r3, [r3, #0]
     562:	f003 031f 	and.w	r3, r3, #31
     566:	2201      	movs	r2, #1
     568:	fa02 f303 	lsl.w	r3, r2, r3
     56c:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     56e:	e02c      	b.n	5ca <am_devices_led_off+0xb6>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     570:	683b      	ldr	r3, [r7, #0]
     572:	00db      	lsls	r3, r3, #3
     574:	687a      	ldr	r2, [r7, #4]
     576:	4413      	add	r3, r2
     578:	681b      	ldr	r3, [r3, #0]
     57a:	08db      	lsrs	r3, r3, #3
     57c:	f003 0204 	and.w	r2, r3, #4
     580:	4b16      	ldr	r3, [pc, #88]	; (5dc <am_devices_led_off+0xc8>)
     582:	4413      	add	r3, r2
     584:	4619      	mov	r1, r3
     586:	683b      	ldr	r3, [r7, #0]
     588:	00db      	lsls	r3, r3, #3
     58a:	687a      	ldr	r2, [r7, #4]
     58c:	4413      	add	r3, r2
     58e:	681b      	ldr	r3, [r3, #0]
     590:	f003 031f 	and.w	r3, r3, #31
     594:	2201      	movs	r2, #1
     596:	fa02 f303 	lsl.w	r3, r2, r3
     59a:	600b      	str	r3, [r1, #0]
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
}
     59c:	e015      	b.n	5ca <am_devices_led_off+0xb6>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	00db      	lsls	r3, r3, #3
     5a2:	687a      	ldr	r2, [r7, #4]
     5a4:	4413      	add	r3, r2
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	08db      	lsrs	r3, r3, #3
     5aa:	f003 0204 	and.w	r2, r3, #4
     5ae:	4b0c      	ldr	r3, [pc, #48]	; (5e0 <am_devices_led_off+0xcc>)
     5b0:	4413      	add	r3, r2
     5b2:	4619      	mov	r1, r3
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	00db      	lsls	r3, r3, #3
     5b8:	687a      	ldr	r2, [r7, #4]
     5ba:	4413      	add	r3, r2
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	f003 031f 	and.w	r3, r3, #31
     5c2:	2201      	movs	r2, #1
     5c4:	fa02 f303 	lsl.w	r3, r2, r3
     5c8:	600b      	str	r3, [r1, #0]
    }
}
     5ca:	bf00      	nop
     5cc:	370c      	adds	r7, #12
     5ce:	46bd      	mov	sp, r7
     5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop
     5d8:	40010090 	.word	0x40010090
     5dc:	40010098 	.word	0x40010098
     5e0:	400100b4 	.word	0x400100b4

000005e4 <am_watchdog_isr>:
// Interrupt handler for the watchdog.
//
//*****************************************************************************
void
am_watchdog_isr(void)
{
     5e4:	b580      	push	{r7, lr}
     5e6:	af00      	add	r7, sp, #0
    //
    // Clear the watchdog interrupt.
    //
    am_hal_wdt_int_clear();
     5e8:	f001 fda6 	bl	2138 <am_hal_wdt_int_clear>

    //
    // Catch the first four watchdog interrupts, but let the fifth through
    // untouched.
    //
    if (g_ui8NumWatchdogInterrupts < 4)
     5ec:	4b15      	ldr	r3, [pc, #84]	; (644 <am_watchdog_isr+0x60>)
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	2b03      	cmp	r3, #3
     5f2:	d804      	bhi.n	5fe <am_watchdog_isr+0x1a>
    {
        //
        // Restart the watchdog.
        //
        am_hal_wdt_restart();
     5f4:	4b14      	ldr	r3, [pc, #80]	; (648 <am_watchdog_isr+0x64>)
     5f6:	22b2      	movs	r2, #178	; 0xb2
     5f8:	601a      	str	r2, [r3, #0]
     5fa:	4b13      	ldr	r3, [pc, #76]	; (648 <am_watchdog_isr+0x64>)
     5fc:	681b      	ldr	r3, [r3, #0]
    }

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     5fe:	f001 f8a1 	bl	1744 <am_bsp_debug_printf_enable>

    //
    // Send a status message and give it some time to print.
    //
    am_util_stdio_printf("Interrupt!!\n");
     602:	4812      	ldr	r0, [pc, #72]	; (64c <am_watchdog_isr+0x68>)
     604:	f001 f864 	bl	16d0 <am_util_stdio_printf>
    am_util_delay_ms(10);
     608:	200a      	movs	r0, #10
     60a:	f000 f957 	bl	8bc <am_util_delay_ms>

    //
    // On the second interrupt do a different kind of reset
    //
    if (g_ui8NumWatchdogInterrupts == 2)
     60e:	4b0d      	ldr	r3, [pc, #52]	; (644 <am_watchdog_isr+0x60>)
     610:	781b      	ldrb	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	d10e      	bne.n	634 <am_watchdog_isr+0x50>
    {
        //
        //  If it's not a watch dog interrupt we will reset here.
        //
        if (g_eNextInterrupt != NEXT_WATCHDOG )
     616:	4b0e      	ldr	r3, [pc, #56]	; (650 <am_watchdog_isr+0x6c>)
     618:	781b      	ldrb	r3, [r3, #0]
     61a:	2b00      	cmp	r3, #0
     61c:	d00a      	beq.n	634 <am_watchdog_isr+0x50>
        {
            //
            // Stop the watchdog.
            //
            am_hal_wdt_halt();
     61e:	f001 fd83 	bl	2128 <am_hal_wdt_halt>

            //
            // Check if we want to do a POR or POI.
            //
            if (g_eNextInterrupt == NEXT_SWPOR)
     622:	4b0b      	ldr	r3, [pc, #44]	; (650 <am_watchdog_isr+0x6c>)
     624:	781b      	ldrb	r3, [r3, #0]
     626:	2b01      	cmp	r3, #1
     628:	d102      	bne.n	630 <am_watchdog_isr+0x4c>
            {
                am_hal_reset_por();
     62a:	f001 fc09 	bl	1e40 <am_hal_reset_por>
     62e:	e001      	b.n	634 <am_watchdog_isr+0x50>
            }
            else
            {
                am_hal_reset_poi();
     630:	f001 fc0c 	bl	1e4c <am_hal_reset_poi>
    }

    //
    // Increment the number of watchdog interrupts.
    //
    g_ui8NumWatchdogInterrupts++;
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <am_watchdog_isr+0x60>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	3301      	adds	r3, #1
     63a:	b2da      	uxtb	r2, r3
     63c:	4b01      	ldr	r3, [pc, #4]	; (644 <am_watchdog_isr+0x60>)
     63e:	701a      	strb	r2, [r3, #0]
}
     640:	bf00      	nop
     642:	bd80      	pop	{r7, pc}
     644:	10001080 	.word	0x10001080
     648:	40024004 	.word	0x40024004
     64c:	00002228 	.word	0x00002228
     650:	10001081 	.word	0x10001081

00000654 <reset_decode>:
// Function to decode and print the reset cause.
//
//*****************************************************************************
void
reset_decode(void)
{
     654:	b580      	push	{r7, lr}
     656:	b082      	sub	sp, #8
     658:	af00      	add	r7, sp, #0
    uint32_t ui32ResetStatus;

    //
    // Print out reset status register upon entry.
    //
    ui32ResetStatus = am_hal_reset_status_get();
     65a:	f001 fbfd 	bl	1e58 <am_hal_reset_status_get>
     65e:	6078      	str	r0, [r7, #4]
    am_util_stdio_printf("Reset Status Register = 0x%02x\n", ui32ResetStatus);
     660:	6879      	ldr	r1, [r7, #4]
     662:	482f      	ldr	r0, [pc, #188]	; (720 <reset_decode+0xcc>)
     664:	f001 f834 	bl	16d0 <am_util_stdio_printf>

    //
    // POWER CYCLE.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_POWER_CYCLE)
     668:	687b      	ldr	r3, [r7, #4]
     66a:	f003 0302 	and.w	r3, r3, #2
     66e:	2b00      	cmp	r3, #0
     670:	d005      	beq.n	67e <reset_decode+0x2a>
    {
        am_util_stdio_printf("Power Cycled\n");
     672:	482c      	ldr	r0, [pc, #176]	; (724 <reset_decode+0xd0>)
     674:	f001 f82c 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
     678:	4b2b      	ldr	r3, [pc, #172]	; (728 <reset_decode+0xd4>)
     67a:	2200      	movs	r2, #0
     67c:	701a      	strb	r2, [r3, #0]
    }

    //
    // WATCHDOG.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_WDT)
     67e:	687b      	ldr	r3, [r7, #4]
     680:	f003 0340 	and.w	r3, r3, #64	; 0x40
     684:	2b00      	cmp	r3, #0
     686:	d005      	beq.n	694 <reset_decode+0x40>
    {
        am_util_stdio_printf("Watchdog Reset\n");
     688:	4828      	ldr	r0, [pc, #160]	; (72c <reset_decode+0xd8>)
     68a:	f001 f821 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOR;
     68e:	4b26      	ldr	r3, [pc, #152]	; (728 <reset_decode+0xd4>)
     690:	2201      	movs	r2, #1
     692:	701a      	strb	r2, [r3, #0]
    }

    //
    // DEBUGGER.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_DEBUG)
     694:	687b      	ldr	r3, [r7, #4]
     696:	f003 0320 	and.w	r3, r3, #32
     69a:	2b00      	cmp	r3, #0
     69c:	d005      	beq.n	6aa <reset_decode+0x56>
    {
        am_util_stdio_printf("Debugger Initiated Reset\n");
     69e:	4824      	ldr	r0, [pc, #144]	; (730 <reset_decode+0xdc>)
     6a0:	f001 f816 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
     6a4:	4b20      	ldr	r3, [pc, #128]	; (728 <reset_decode+0xd4>)
     6a6:	2200      	movs	r2, #0
     6a8:	701a      	strb	r2, [r3, #0]
    }

    //
    // SOFTWARE POI.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_POI)
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	f003 0310 	and.w	r3, r3, #16
     6b0:	2b00      	cmp	r3, #0
     6b2:	d005      	beq.n	6c0 <reset_decode+0x6c>
    {
        am_util_stdio_printf(
     6b4:	481f      	ldr	r0, [pc, #124]	; (734 <reset_decode+0xe0>)
     6b6:	f001 f80b 	bl	16d0 <am_util_stdio_printf>
                   "Software POI (power on reset internal state)\n");
        g_eNextInterrupt = NEXT_WATCHDOG;
     6ba:	4b1b      	ldr	r3, [pc, #108]	; (728 <reset_decode+0xd4>)
     6bc:	2200      	movs	r2, #0
     6be:	701a      	strb	r2, [r3, #0]
    }

    //
    // SOFTWARE POR.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_SOFTWARE)
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	f003 0308 	and.w	r3, r3, #8
     6c6:	2b00      	cmp	r3, #0
     6c8:	d005      	beq.n	6d6 <reset_decode+0x82>
    {
        am_util_stdio_printf("Software POR Initiated Reset\n");
     6ca:	481b      	ldr	r0, [pc, #108]	; (738 <reset_decode+0xe4>)
     6cc:	f001 f800 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOI;
     6d0:	4b15      	ldr	r3, [pc, #84]	; (728 <reset_decode+0xd4>)
     6d2:	2202      	movs	r2, #2
     6d4:	701a      	strb	r2, [r3, #0]
    }

    //
    // BROWNOUT DETECTOR.
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_BOD)
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	f003 0304 	and.w	r3, r3, #4
     6dc:	2b00      	cmp	r3, #0
     6de:	d005      	beq.n	6ec <reset_decode+0x98>
    {
        am_util_stdio_printf("Brownout Detector Initiated Reset\n");
     6e0:	4816      	ldr	r0, [pc, #88]	; (73c <reset_decode+0xe8>)
     6e2:	f000 fff5 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
     6e6:	4b10      	ldr	r3, [pc, #64]	; (728 <reset_decode+0xd4>)
     6e8:	2200      	movs	r2, #0
     6ea:	701a      	strb	r2, [r3, #0]
    }

    //
    // EXTERNAL PIN
    //
    if (ui32ResetStatus & AM_HAL_RESET_STAT_EXTERNAL)
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	f003 0301 	and.w	r3, r3, #1
     6f2:	2b00      	cmp	r3, #0
     6f4:	d005      	beq.n	702 <reset_decode+0xae>
    {
        am_util_stdio_printf("External Reset Pin Initiated This Reset\n");
     6f6:	4812      	ldr	r0, [pc, #72]	; (740 <reset_decode+0xec>)
     6f8:	f000 ffea 	bl	16d0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOI;
     6fc:	4b0a      	ldr	r3, [pc, #40]	; (728 <reset_decode+0xd4>)
     6fe:	2202      	movs	r2, #2
     700:	701a      	strb	r2, [r3, #0]
    }

    if ( g_eNextInterrupt == NEXT_WATCHDOG )
     702:	4b09      	ldr	r3, [pc, #36]	; (728 <reset_decode+0xd4>)
     704:	781b      	ldrb	r3, [r3, #0]
     706:	2b00      	cmp	r3, #0
     708:	d103      	bne.n	712 <reset_decode+0xbe>
    {
        am_util_stdio_printf("  Next interrupt is WDT, so 5 interrupts should occur.\n");
     70a:	480e      	ldr	r0, [pc, #56]	; (744 <reset_decode+0xf0>)
     70c:	f000 ffe0 	bl	16d0 <am_util_stdio_printf>
    }
    else
    {
        am_util_stdio_printf("  Next interrupt is not WDT, so only 3 interrupts should occur.\n");
    }
}
     710:	e002      	b.n	718 <reset_decode+0xc4>
    {
        am_util_stdio_printf("  Next interrupt is WDT, so 5 interrupts should occur.\n");
    }
    else
    {
        am_util_stdio_printf("  Next interrupt is not WDT, so only 3 interrupts should occur.\n");
     712:	480d      	ldr	r0, [pc, #52]	; (748 <reset_decode+0xf4>)
     714:	f000 ffdc 	bl	16d0 <am_util_stdio_printf>
    }
}
     718:	bf00      	nop
     71a:	3708      	adds	r7, #8
     71c:	46bd      	mov	sp, r7
     71e:	bd80      	pop	{r7, pc}
     720:	00002238 	.word	0x00002238
     724:	00002258 	.word	0x00002258
     728:	10001081 	.word	0x10001081
     72c:	00002268 	.word	0x00002268
     730:	00002278 	.word	0x00002278
     734:	00002294 	.word	0x00002294
     738:	000022c4 	.word	0x000022c4
     73c:	000022e4 	.word	0x000022e4
     740:	00002308 	.word	0x00002308
     744:	00002334 	.word	0x00002334
     748:	0000236c 	.word	0x0000236c

0000074c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
    //
    // Set g_eNextInterrupt to a watchdog interrupt.
    //
    g_eNextInterrupt = NEXT_WATCHDOG;
     752:	4b32      	ldr	r3, [pc, #200]	; (81c <main+0xd0>)
     754:	2200      	movs	r2, #0
     756:	701a      	strb	r2, [r3, #0]

    //
    // Set system clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     758:	2000      	movs	r0, #0
     75a:	f001 f901 	bl	1960 <am_hal_clkgen_sysclk_select>

    //
    // Stop the watch dog if we are coming in from a reset
    // other than a power cycle
    //
    am_hal_wdt_halt();
     75e:	f001 fce3 	bl	2128 <am_hal_wdt_halt>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     762:	482f      	ldr	r0, [pc, #188]	; (820 <main+0xd4>)
     764:	f001 f866 	bl	1834 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     768:	f000 ffda 	bl	1720 <am_bsp_low_power_init>

    //
    // Initialize the LED
    //
    am_devices_led_init(am_bsp_psLEDs);
     76c:	482d      	ldr	r0, [pc, #180]	; (824 <main+0xd8>)
     76e:	f7ff fcf7 	bl	160 <am_devices_led_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     772:	482d      	ldr	r0, [pc, #180]	; (828 <main+0xdc>)
     774:	f000 f93a 	bl	9ec <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     778:	f3ef 8310 	mrs	r3, PRIMASK
     77c:	607b      	str	r3, [r7, #4]
     77e:	b672      	cpsid	i
     780:	4b2a      	ldr	r3, [pc, #168]	; (82c <main+0xe0>)
     782:	2273      	movs	r2, #115	; 0x73
     784:	601a      	str	r2, [r3, #0]
     786:	4a2a      	ldr	r2, [pc, #168]	; (830 <main+0xe4>)
     788:	4b29      	ldr	r3, [pc, #164]	; (830 <main+0xe4>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     790:	6013      	str	r3, [r2, #0]
     792:	4a28      	ldr	r2, [pc, #160]	; (834 <main+0xe8>)
     794:	4b27      	ldr	r3, [pc, #156]	; (834 <main+0xe8>)
     796:	681b      	ldr	r3, [r3, #0]
     798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     79c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     7a0:	6013      	str	r3, [r2, #0]
     7a2:	4a25      	ldr	r2, [pc, #148]	; (838 <main+0xec>)
     7a4:	4b24      	ldr	r3, [pc, #144]	; (838 <main+0xec>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     7ac:	6013      	str	r3, [r2, #0]
     7ae:	4b1f      	ldr	r3, [pc, #124]	; (82c <main+0xe0>)
     7b0:	2200      	movs	r2, #0
     7b2:	601a      	str	r2, [r3, #0]
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f383 8810 	msr	PRIMASK, r3

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     7ba:	f001 f949 	bl	1a50 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     7be:	f000 ffc1 	bl	1744 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
     7c2:	f000 ffa3 	bl	170c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Reset State Tracking Example.\n");
     7c6:	481d      	ldr	r0, [pc, #116]	; (83c <main+0xf0>)
     7c8:	f000 ff82 	bl	16d0 <am_util_stdio_printf>

    //
    // Decode and print the reset state that got us here.
    //
    reset_decode();
     7cc:	f7ff ff42 	bl	654 <reset_decode>

    //
    // Give user a little time to read the type of reset.
    //
    am_util_delay_ms(1000);
     7d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7d4:	f000 f872 	bl	8bc <am_util_delay_ms>

    //
    // Clear reset status register for next time we reset.
    //
    am_hal_reset_status_clear();
     7d8:	f001 fb44 	bl	1e64 <am_hal_reset_status_clear>

    //
    // LFRC has to be turned on for this example because the watchdog only
    // runs off of the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     7dc:	2002      	movs	r0, #2
     7de:	f001 f8e7 	bl	19b0 <am_hal_clkgen_osc_start>

    //
    // Configure the watchdog.
    //
    am_hal_wdt_init(&g_sWatchdogConfig);
     7e2:	4817      	ldr	r0, [pc, #92]	; (840 <main+0xf4>)
     7e4:	f001 fc56 	bl	2094 <am_hal_wdt_init>

    //
    // Enable the interrupt for the watchdog in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_WATCHDOG);
     7e8:	2011      	movs	r0, #17
     7ea:	f001 f8fd 	bl	19e8 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     7ee:	f001 f923 	bl	1a38 <am_hal_interrupt_master_enable>

    //
    // Enable the watchdog.
    //
    am_hal_wdt_start();
     7f2:	f001 fc89 	bl	2108 <am_hal_wdt_start>
    while (1)
    {
        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
     7f6:	f000 ffe5 	bl	17c4 <am_bsp_debug_printf_disable>

        //
        // Disable interrupts.
        //
        am_hal_interrupt_master_disable();
     7fa:	f001 f921 	bl	1a40 <am_hal_interrupt_master_disable>

        //
        // Turn OFF the indicator LED.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
     7fe:	2100      	movs	r1, #0
     800:	4808      	ldr	r0, [pc, #32]	; (824 <main+0xd8>)
     802:	f7ff fe87 	bl	514 <am_devices_led_off>

        //
        // Go to sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     806:	2001      	movs	r0, #1
     808:	f001 fb48 	bl	1e9c <am_hal_sysctrl_sleep>

        //
        // Turn ON the indicator LED.
        //
        am_devices_led_on(am_bsp_psLEDs, 0);
     80c:	2100      	movs	r1, #0
     80e:	4805      	ldr	r0, [pc, #20]	; (824 <main+0xd8>)
     810:	f7ff fe18 	bl	444 <am_devices_led_on>

        //
        // An interrupt woke us up so now enable them and take it.
        //
        am_hal_interrupt_master_enable();
     814:	f001 f910 	bl	1a38 <am_hal_interrupt_master_enable>
    }
     818:	e7ed      	b.n	7f6 <main+0xaa>
     81a:	bf00      	nop
     81c:	10001081 	.word	0x10001081
     820:	000023e4 	.word	0x000023e4
     824:	10001008 	.word	0x10001008
     828:	00001831 	.word	0x00001831
     82c:	40010060 	.word	0x40010060
     830:	40010054 	.word	0x40010054
     834:	40010028 	.word	0x40010028
     838:	40010108 	.word	0x40010108
     83c:	000023b0 	.word	0x000023b0
     840:	10001000 	.word	0x10001000

00000844 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     844:	4811      	ldr	r0, [pc, #68]	; (88c <zero_loop+0x12>)
     846:	4912      	ldr	r1, [pc, #72]	; (890 <zero_loop+0x16>)
     848:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     84a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     84e:	4811      	ldr	r0, [pc, #68]	; (894 <zero_loop+0x1a>)
     850:	6801      	ldr	r1, [r0, #0]
     852:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     856:	6001      	str	r1, [r0, #0]
     858:	f3bf 8f4f 	dsb	sy
     85c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     860:	480d      	ldr	r0, [pc, #52]	; (898 <zero_loop+0x1e>)
     862:	490e      	ldr	r1, [pc, #56]	; (89c <zero_loop+0x22>)
     864:	4a0e      	ldr	r2, [pc, #56]	; (8a0 <zero_loop+0x26>)

00000866 <copy_loop>:
     866:	f850 3b04 	ldr.w	r3, [r0], #4
     86a:	f841 3b04 	str.w	r3, [r1], #4
     86e:	4291      	cmp	r1, r2
     870:	dbf9      	blt.n	866 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     872:	480c      	ldr	r0, [pc, #48]	; (8a4 <zero_loop+0x2a>)
     874:	490c      	ldr	r1, [pc, #48]	; (8a8 <zero_loop+0x2e>)
     876:	f04f 0200 	mov.w	r2, #0

0000087a <zero_loop>:
     87a:	4288      	cmp	r0, r1
     87c:	bfb8      	it	lt
     87e:	f840 2b04 	strlt.w	r2, [r0], #4
     882:	dbfa      	blt.n	87a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     884:	f7ff ff62 	bl	74c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     888:	be00      	bkpt	0x0000
}
     88a:	bf00      	nop
     88c:	e000ed08 	.word	0xe000ed08
     890:	00000000 	.word	0x00000000
     894:	e000ed88 	.word	0xe000ed88
     898:	00002440 	.word	0x00002440
     89c:	10001000 	.word	0x10001000
     8a0:	10001080 	.word	0x10001080
     8a4:	10001080 	.word	0x10001080
     8a8:	1000119c 	.word	0x1000119c

000008ac <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     8ac:	b480      	push	{r7}
     8ae:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     8b0:	e7fe      	b.n	8b0 <am_nmi_isr+0x4>
     8b2:	bf00      	nop

000008b4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     8b4:	b480      	push	{r7}
     8b6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     8b8:	e7fe      	b.n	8b8 <am_adc_isr+0x4>
     8ba:	bf00      	nop

000008bc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     8bc:	b580      	push	{r7, lr}
     8be:	b084      	sub	sp, #16
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops = ui32MilliSeconds *
                          (am_hal_clkgen_sysclk_get() / 3000);
     8c4:	f001 f864 	bl	1990 <am_hal_clkgen_sysclk_get>
     8c8:	4602      	mov	r2, r0
     8ca:	4b07      	ldr	r3, [pc, #28]	; (8e8 <am_util_delay_ms+0x2c>)
     8cc:	fba3 2302 	umull	r2, r3, r3, r2
     8d0:	099b      	lsrs	r3, r3, #6
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    uint32_t ui32Loops = ui32MilliSeconds *
     8d2:	687a      	ldr	r2, [r7, #4]
     8d4:	fb02 f303 	mul.w	r3, r2, r3
     8d8:	60fb      	str	r3, [r7, #12]
                          (am_hal_clkgen_sysclk_get() / 3000);

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     8da:	68f8      	ldr	r0, [r7, #12]
     8dc:	f001 f87e 	bl	19dc <am_hal_flash_delay>
}
     8e0:	bf00      	nop
     8e2:	3710      	adds	r7, #16
     8e4:	46bd      	mov	sp, r7
     8e6:	bd80      	pop	{r7, pc}
     8e8:	057619f1 	.word	0x057619f1

000008ec <am_fault_isr>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     8ec:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     8ee:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     8f0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     8f2:	f000 f809 	bl	908 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     8f6:	bd01      	pop	{r0, pc}
}
     8f8:	bf00      	nop
     8fa:	4618      	mov	r0, r3

000008fc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     8fc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     8fe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     900:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     902:	4770      	bx	lr
}
     904:	bf00      	nop
     906:	4618      	mov	r0, r3

00000908 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     908:	b580      	push	{r7, lr}
     90a:	b096      	sub	sp, #88	; 0x58
     90c:	af00      	add	r7, sp, #0
     90e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     910:	f107 030c 	add.w	r3, r7, #12
     914:	2200      	movs	r2, #0
     916:	601a      	str	r2, [r3, #0]
     918:	605a      	str	r2, [r3, #4]
     91a:	609a      	str	r2, [r3, #8]
     91c:	60da      	str	r2, [r3, #12]
     91e:	611a      	str	r2, [r3, #16]
     920:	615a      	str	r2, [r3, #20]
    
    uint32_t u32Mask = 0;
     922:	2300      	movs	r3, #0
     924:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     928:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     92a:	4b2e      	ldr	r3, [pc, #184]	; (9e4 <am_util_faultisr_collect_data+0xdc>)
     92c:	681b      	ldr	r3, [r3, #0]
     92e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     932:	b2db      	uxtb	r3, r3
     934:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     93a:	0a1b      	lsrs	r3, r3, #8
     93c:	b2db      	uxtb	r3, r3
     93e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     944:	0c1b      	lsrs	r3, r3, #16
     946:	b29b      	uxth	r3, r3
     948:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     94c:	4b26      	ldr	r3, [pc, #152]	; (9e8 <am_util_faultisr_collect_data+0xe0>)
     94e:	681b      	ldr	r3, [r3, #0]
     950:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     952:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     956:	b2db      	uxtb	r3, r3
     958:	f003 0302 	and.w	r3, r3, #2
     95c:	2b00      	cmp	r3, #0
     95e:	d005      	beq.n	96c <am_util_faultisr_collect_data+0x64>
     960:	6879      	ldr	r1, [r7, #4]
     962:	2006      	movs	r0, #6
     964:	f7ff ffca 	bl	8fc <getStackedReg>
     968:	4603      	mov	r3, r0
     96a:	e001      	b.n	970 <am_util_faultisr_collect_data+0x68>
     96c:	f04f 33ff 	mov.w	r3, #4294967295
     970:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     972:	6879      	ldr	r1, [r7, #4]
     974:	2000      	movs	r0, #0
     976:	f7ff ffc1 	bl	8fc <getStackedReg>
     97a:	4603      	mov	r3, r0
     97c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     97e:	6879      	ldr	r1, [r7, #4]
     980:	2001      	movs	r0, #1
     982:	f7ff ffbb 	bl	8fc <getStackedReg>
     986:	4603      	mov	r3, r0
     988:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     98a:	6879      	ldr	r1, [r7, #4]
     98c:	2002      	movs	r0, #2
     98e:	f7ff ffb5 	bl	8fc <getStackedReg>
     992:	4603      	mov	r3, r0
     994:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     996:	6879      	ldr	r1, [r7, #4]
     998:	2003      	movs	r0, #3
     99a:	f7ff ffaf 	bl	8fc <getStackedReg>
     99e:	4603      	mov	r3, r0
     9a0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     9a2:	6879      	ldr	r1, [r7, #4]
     9a4:	2004      	movs	r0, #4
     9a6:	f7ff ffa9 	bl	8fc <getStackedReg>
     9aa:	4603      	mov	r3, r0
     9ac:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     9ae:	6879      	ldr	r1, [r7, #4]
     9b0:	2005      	movs	r0, #5
     9b2:	f7ff ffa3 	bl	8fc <getStackedReg>
     9b6:	4603      	mov	r3, r0
     9b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     9ba:	6879      	ldr	r1, [r7, #4]
     9bc:	2006      	movs	r0, #6
     9be:	f7ff ff9d 	bl	8fc <getStackedReg>
     9c2:	4603      	mov	r3, r0
     9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     9c6:	6879      	ldr	r1, [r7, #4]
     9c8:	2007      	movs	r0, #7
     9ca:	f7ff ff97 	bl	8fc <getStackedReg>
     9ce:	4603      	mov	r3, r0
     9d0:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     9d2:	f107 030c 	add.w	r3, r7, #12
     9d6:	4618      	mov	r0, r3
     9d8:	f001 f88a 	bl	1af0 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     9dc:	2300      	movs	r3, #0
     9de:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     9e0:	e7fe      	b.n	9e0 <am_util_faultisr_collect_data+0xd8>
     9e2:	bf00      	nop
     9e4:	e000ed28 	.word	0xe000ed28
     9e8:	e000ed38 	.word	0xe000ed38

000009ec <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     9ec:	b480      	push	{r7}
     9ee:	b083      	sub	sp, #12
     9f0:	af00      	add	r7, sp, #0
     9f2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     9f4:	4a04      	ldr	r2, [pc, #16]	; (a08 <am_util_stdio_printf_init+0x1c>)
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	6013      	str	r3, [r2, #0]
}
     9fa:	bf00      	nop
     9fc:	370c      	adds	r7, #12
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr
     a06:	bf00      	nop
     a08:	10001198 	.word	0x10001198

00000a0c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     a0c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     a10:	b096      	sub	sp, #88	; 0x58
     a12:	af00      	add	r7, sp, #0
     a14:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     a18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a1c:	0025      	movs	r5, r4
     a1e:	2600      	movs	r6, #0
     a20:	ea55 0306 	orrs.w	r3, r5, r6
     a24:	f000 809e 	beq.w	b64 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     a28:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a2c:	0862      	lsrs	r2, r4, #1
     a2e:	ea4f 0133 	mov.w	r1, r3, rrx
     a32:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a36:	ea4f 0893 	mov.w	r8, r3, lsr #2
     a3a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     a3e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     a42:	eb11 0308 	adds.w	r3, r1, r8
     a46:	eb42 0409 	adc.w	r4, r2, r9
     a4a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     a4e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a52:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     a56:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     a5a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     a5e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a62:	eb13 030a 	adds.w	r3, r3, sl
     a66:	eb44 040b 	adc.w	r4, r4, fp
     a6a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     a6e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a72:	0a1a      	lsrs	r2, r3, #8
     a74:	62ba      	str	r2, [r7, #40]	; 0x28
     a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a78:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     a7c:	62ba      	str	r2, [r7, #40]	; 0x28
     a7e:	0a23      	lsrs	r3, r4, #8
     a80:	62fb      	str	r3, [r7, #44]	; 0x2c
     a82:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     a8a:	18c9      	adds	r1, r1, r3
     a8c:	eb42 0204 	adc.w	r2, r2, r4
     a90:	460b      	mov	r3, r1
     a92:	4614      	mov	r4, r2
     a94:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     a98:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a9c:	0c1a      	lsrs	r2, r3, #16
     a9e:	623a      	str	r2, [r7, #32]
     aa0:	6a3a      	ldr	r2, [r7, #32]
     aa2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     aa6:	623a      	str	r2, [r7, #32]
     aa8:	0c23      	lsrs	r3, r4, #16
     aaa:	627b      	str	r3, [r7, #36]	; 0x24
     aac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ab0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     ab4:	18c9      	adds	r1, r1, r3
     ab6:	eb42 0204 	adc.w	r2, r2, r4
     aba:	460b      	mov	r3, r1
     abc:	4614      	mov	r4, r2
     abe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     ac2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ac6:	0023      	movs	r3, r4
     ac8:	603b      	str	r3, [r7, #0]
     aca:	2300      	movs	r3, #0
     acc:	607b      	str	r3, [r7, #4]
     ace:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ad2:	e897 0006 	ldmia.w	r7, {r1, r2}
     ad6:	18c9      	adds	r1, r1, r3
     ad8:	eb42 0204 	adc.w	r2, r2, r4
     adc:	460b      	mov	r3, r1
     ade:	4614      	mov	r4, r2
     ae0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     ae4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ae8:	08da      	lsrs	r2, r3, #3
     aea:	613a      	str	r2, [r7, #16]
     aec:	693a      	ldr	r2, [r7, #16]
     aee:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     af2:	613a      	str	r2, [r7, #16]
     af4:	08e3      	lsrs	r3, r4, #3
     af6:	617b      	str	r3, [r7, #20]
     af8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     afc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     b00:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b04:	18db      	adds	r3, r3, r3
     b06:	eb44 0404 	adc.w	r4, r4, r4
     b0a:	00a2      	lsls	r2, r4, #2
     b0c:	60fa      	str	r2, [r7, #12]
     b0e:	68fa      	ldr	r2, [r7, #12]
     b10:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     b14:	60fa      	str	r2, [r7, #12]
     b16:	009a      	lsls	r2, r3, #2
     b18:	60ba      	str	r2, [r7, #8]
     b1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
     b1e:	18c9      	adds	r1, r1, r3
     b20:	eb42 0204 	adc.w	r2, r2, r4
     b24:	460b      	mov	r3, r1
     b26:	4614      	mov	r4, r2
     b28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
     b2c:	1acb      	subs	r3, r1, r3
     b2e:	eb62 0404 	sbc.w	r4, r2, r4
     b32:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     b36:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     b3a:	3306      	adds	r3, #6
     b3c:	f144 0400 	adc.w	r4, r4, #0
     b40:	091a      	lsrs	r2, r3, #4
     b42:	61ba      	str	r2, [r7, #24]
     b44:	69ba      	ldr	r2, [r7, #24]
     b46:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     b4a:	61ba      	str	r2, [r7, #24]
     b4c:	0923      	lsrs	r3, r4, #4
     b4e:	61fb      	str	r3, [r7, #28]
     b50:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     b58:	18c9      	adds	r1, r1, r3
     b5a:	eb42 0204 	adc.w	r2, r2, r4
     b5e:	460b      	mov	r3, r1
     b60:	4614      	mov	r4, r2
     b62:	e029      	b.n	bb8 <divu64_10+0x1ac>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b66:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b6a:	085a      	lsrs	r2, r3, #1
     b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b6e:	089b      	lsrs	r3, r3, #2
     b70:	4413      	add	r3, r2
     b72:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b76:	091b      	lsrs	r3, r3, #4
     b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b7a:	4413      	add	r3, r2
     b7c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b80:	0a1b      	lsrs	r3, r3, #8
     b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b84:	4413      	add	r3, r2
     b86:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b8a:	0c1b      	lsrs	r3, r3, #16
     b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b8e:	4413      	add	r3, r2
     b90:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b94:	08db      	lsrs	r3, r3, #3
     b96:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b9a:	4613      	mov	r3, r2
     b9c:	009b      	lsls	r3, r3, #2
     b9e:	4413      	add	r3, r2
     ba0:	005b      	lsls	r3, r3, #1
     ba2:	461a      	mov	r2, r3
     ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ba6:	1a9b      	subs	r3, r3, r2
     ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bac:	3306      	adds	r3, #6
     bae:	091a      	lsrs	r2, r3, #4
     bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bb2:	4413      	add	r3, r2
     bb4:	f04f 0400 	mov.w	r4, #0
    }
}
     bb8:	4618      	mov	r0, r3
     bba:	4621      	mov	r1, r4
     bbc:	3758      	adds	r7, #88	; 0x58
     bbe:	46bd      	mov	sp, r7
     bc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop

00000bc8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     bc8:	b590      	push	{r4, r7, lr}
     bca:	b085      	sub	sp, #20
     bcc:	af00      	add	r7, sp, #0
     bce:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     bd2:	683a      	ldr	r2, [r7, #0]
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	4313      	orrs	r3, r2
     bd8:	2b00      	cmp	r3, #0
     bda:	bf0c      	ite	eq
     bdc:	2301      	moveq	r3, #1
     bde:	2300      	movne	r3, #0
     be0:	b2db      	uxtb	r3, r3
     be2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     be4:	e008      	b.n	bf8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     be6:	e9d7 0100 	ldrd	r0, r1, [r7]
     bea:	f7ff ff0f 	bl	a0c <divu64_10>
     bee:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     bf2:	68fb      	ldr	r3, [r7, #12]
     bf4:	3301      	adds	r3, #1
     bf6:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     bf8:	e897 0018 	ldmia.w	r7, {r3, r4}
     bfc:	4323      	orrs	r3, r4
     bfe:	d1f2      	bne.n	be6 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     c00:	68fb      	ldr	r3, [r7, #12]
}
     c02:	4618      	mov	r0, r3
     c04:	3714      	adds	r7, #20
     c06:	46bd      	mov	sp, r7
     c08:	bd90      	pop	{r4, r7, pc}
     c0a:	bf00      	nop

00000c0c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     c0c:	b590      	push	{r4, r7, lr}
     c0e:	b083      	sub	sp, #12
     c10:	af00      	add	r7, sp, #0
     c12:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     c16:	e897 0018 	ldmia.w	r7, {r3, r4}
     c1a:	2b00      	cmp	r3, #0
     c1c:	f174 0300 	sbcs.w	r3, r4, #0
     c20:	da06      	bge.n	c30 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     c22:	e897 0018 	ldmia.w	r7, {r3, r4}
     c26:	425b      	negs	r3, r3
     c28:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     c2c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     c30:	e897 0018 	ldmia.w	r7, {r3, r4}
     c34:	4618      	mov	r0, r3
     c36:	4621      	mov	r1, r4
     c38:	f7ff ffc6 	bl	bc8 <ndigits_in_u64>
     c3c:	4603      	mov	r3, r0
}
     c3e:	4618      	mov	r0, r3
     c40:	370c      	adds	r7, #12
     c42:	46bd      	mov	sp, r7
     c44:	bd90      	pop	{r4, r7, pc}
     c46:	bf00      	nop

00000c48 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     c48:	b490      	push	{r4, r7}
     c4a:	b084      	sub	sp, #16
     c4c:	af00      	add	r7, sp, #0
     c4e:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     c52:	6839      	ldr	r1, [r7, #0]
     c54:	687a      	ldr	r2, [r7, #4]
     c56:	430a      	orrs	r2, r1
     c58:	2a00      	cmp	r2, #0
     c5a:	bf0c      	ite	eq
     c5c:	2201      	moveq	r2, #1
     c5e:	2200      	movne	r2, #0
     c60:	b2d2      	uxtb	r2, r2
     c62:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     c64:	e00a      	b.n	c7c <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     c66:	e897 0006 	ldmia.w	r7, {r1, r2}
     c6a:	090b      	lsrs	r3, r1, #4
     c6c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     c70:	0914      	lsrs	r4, r2, #4
     c72:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     c76:	68fa      	ldr	r2, [r7, #12]
     c78:	3201      	adds	r2, #1
     c7a:	60fa      	str	r2, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     c7c:	e897 0006 	ldmia.w	r7, {r1, r2}
     c80:	430a      	orrs	r2, r1
     c82:	d1f0      	bne.n	c66 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     c84:	68fb      	ldr	r3, [r7, #12]
}
     c86:	4618      	mov	r0, r3
     c88:	3710      	adds	r7, #16
     c8a:	46bd      	mov	sp, r7
     c8c:	bc90      	pop	{r4, r7}
     c8e:	4770      	bx	lr

00000c90 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     c90:	b480      	push	{r7}
     c92:	b087      	sub	sp, #28
     c94:	af00      	add	r7, sp, #0
     c96:	6078      	str	r0, [r7, #4]
     c98:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     c9a:	2300      	movs	r3, #0
     c9c:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     c9e:	2300      	movs	r3, #0
     ca0:	613b      	str	r3, [r7, #16]
     ca2:	2300      	movs	r3, #0
     ca4:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	2b2d      	cmp	r3, #45	; 0x2d
     cac:	d11b      	bne.n	ce6 <decstr_to_int+0x56>
    {
        bNeg = true;
     cae:	2301      	movs	r3, #1
     cb0:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	3301      	adds	r3, #1
     cb6:	607b      	str	r3, [r7, #4]
        uCnt++;
     cb8:	68fb      	ldr	r3, [r7, #12]
     cba:	3301      	adds	r3, #1
     cbc:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     cbe:	e012      	b.n	ce6 <decstr_to_int+0x56>
    {
        ++uCnt;
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	3301      	adds	r3, #1
     cc4:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     cc6:	693a      	ldr	r2, [r7, #16]
     cc8:	4613      	mov	r3, r2
     cca:	009b      	lsls	r3, r3, #2
     ccc:	4413      	add	r3, r2
     cce:	005b      	lsls	r3, r3, #1
     cd0:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	461a      	mov	r2, r3
     cd8:	693b      	ldr	r3, [r7, #16]
     cda:	4413      	add	r3, r2
     cdc:	3b30      	subs	r3, #48	; 0x30
     cde:	613b      	str	r3, [r7, #16]
        pcStr++;
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	3301      	adds	r3, #1
     ce4:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b2f      	cmp	r3, #47	; 0x2f
     cec:	d903      	bls.n	cf6 <decstr_to_int+0x66>
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b39      	cmp	r3, #57	; 0x39
     cf4:	d9e4      	bls.n	cc0 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d002      	beq.n	d02 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     cfc:	683b      	ldr	r3, [r7, #0]
     cfe:	68fa      	ldr	r2, [r7, #12]
     d00:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     d02:	7dfb      	ldrb	r3, [r7, #23]
     d04:	2b00      	cmp	r3, #0
     d06:	d002      	beq.n	d0e <decstr_to_int+0x7e>
     d08:	693b      	ldr	r3, [r7, #16]
     d0a:	425b      	negs	r3, r3
     d0c:	e000      	b.n	d10 <decstr_to_int+0x80>
     d0e:	693b      	ldr	r3, [r7, #16]
}
     d10:	4618      	mov	r0, r3
     d12:	371c      	adds	r7, #28
     d14:	46bd      	mov	sp, r7
     d16:	f85d 7b04 	ldr.w	r7, [sp], #4
     d1a:	4770      	bx	lr

00000d1c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     d1c:	b590      	push	{r4, r7, lr}
     d1e:	b091      	sub	sp, #68	; 0x44
     d20:	af00      	add	r7, sp, #0
     d22:	e9c7 0102 	strd	r0, r1, [r7, #8]
     d26:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     d28:	2300      	movs	r3, #0
     d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
     d2c:	2300      	movs	r3, #0
     d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     d30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     d34:	f7ff fe6a 	bl	a0c <divu64_10>
     d38:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     d3c:	68b9      	ldr	r1, [r7, #8]
     d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d40:	4613      	mov	r3, r2
     d42:	009b      	lsls	r3, r3, #2
     d44:	4413      	add	r3, r2
     d46:	005b      	lsls	r3, r3, #1
     d48:	1acb      	subs	r3, r1, r3
     d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d4e:	1c5a      	adds	r2, r3, #1
     d50:	63fa      	str	r2, [r7, #60]	; 0x3c
     d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d54:	b2d2      	uxtb	r2, r2
     d56:	3230      	adds	r2, #48	; 0x30
     d58:	b2d2      	uxtb	r2, r2
     d5a:	f107 0140 	add.w	r1, r7, #64	; 0x40
     d5e:	440b      	add	r3, r1
     d60:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     d64:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     d68:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     d6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     d70:	4323      	orrs	r3, r4
     d72:	d1dd      	bne.n	d30 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d76:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d011      	beq.n	da2 <uint64_to_str+0x86>
    {
        while ( ix-- )
     d7e:	e008      	b.n	d92 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	1c5a      	adds	r2, r3, #1
     d84:	607a      	str	r2, [r7, #4]
     d86:	f107 0110 	add.w	r1, r7, #16
     d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d8c:	440a      	add	r2, r1
     d8e:	7812      	ldrb	r2, [r2, #0]
     d90:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d94:	1e5a      	subs	r2, r3, #1
     d96:	63fa      	str	r2, [r7, #60]	; 0x3c
     d98:	2b00      	cmp	r3, #0
     d9a:	d1f1      	bne.n	d80 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	2200      	movs	r2, #0
     da0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     da4:	4618      	mov	r0, r3
     da6:	3744      	adds	r7, #68	; 0x44
     da8:	46bd      	mov	sp, r7
     daa:	bd90      	pop	{r4, r7, pc}

00000dac <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     dac:	b4b0      	push	{r4, r5, r7}
     dae:	b08d      	sub	sp, #52	; 0x34
     db0:	af00      	add	r7, sp, #0
     db2:	e9c7 0102 	strd	r0, r1, [r7, #8]
     db6:	607a      	str	r2, [r7, #4]
     db8:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     dba:	2300      	movs	r3, #0
     dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     dc2:	4313      	orrs	r3, r2
     dc4:	d131      	bne.n	e2a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dc8:	1c5a      	adds	r2, r3, #1
     dca:	62fa      	str	r2, [r7, #44]	; 0x2c
     dcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     dd0:	4413      	add	r3, r2
     dd2:	2230      	movs	r2, #48	; 0x30
     dd4:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     dd8:	e027      	b.n	e2a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     dda:	7a3b      	ldrb	r3, [r7, #8]
     ddc:	f003 030f 	and.w	r3, r3, #15
     de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     de8:	2b09      	cmp	r3, #9
     dea:	d90a      	bls.n	e02 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     dec:	78fb      	ldrb	r3, [r7, #3]
     dee:	2b00      	cmp	r3, #0
     df0:	d001      	beq.n	df6 <uint64_to_hexstr+0x4a>
     df2:	2227      	movs	r2, #39	; 0x27
     df4:	e000      	b.n	df8 <uint64_to_hexstr+0x4c>
     df6:	2207      	movs	r2, #7
     df8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     dfc:	4413      	add	r3, r2
     dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e04:	1c5a      	adds	r2, r3, #1
     e06:	62fa      	str	r2, [r7, #44]	; 0x2c
     e08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     e0c:	3230      	adds	r2, #48	; 0x30
     e0e:	b2d2      	uxtb	r2, r2
     e10:	f107 0130 	add.w	r1, r7, #48	; 0x30
     e14:	440b      	add	r3, r1
     e16:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e1e:	0914      	lsrs	r4, r2, #4
     e20:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     e24:	091d      	lsrs	r5, r3, #4
     e26:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e2e:	4313      	orrs	r3, r2
     e30:	d1d3      	bne.n	dda <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e34:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	2b00      	cmp	r3, #0
     e3a:	d011      	beq.n	e60 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     e3c:	e008      	b.n	e50 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	1c5a      	adds	r2, r3, #1
     e42:	607a      	str	r2, [r7, #4]
     e44:	f107 0110 	add.w	r1, r7, #16
     e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e4a:	440a      	add	r2, r1
     e4c:	7812      	ldrb	r2, [r2, #0]
     e4e:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e52:	1e5a      	subs	r2, r3, #1
     e54:	62fa      	str	r2, [r7, #44]	; 0x2c
     e56:	2b00      	cmp	r3, #0
     e58:	d1f1      	bne.n	e3e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	2200      	movs	r2, #0
     e5e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     e62:	4618      	mov	r0, r3
     e64:	3734      	adds	r7, #52	; 0x34
     e66:	46bd      	mov	sp, r7
     e68:	bcb0      	pop	{r4, r5, r7}
     e6a:	4770      	bx	lr

00000e6c <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     e6c:	b480      	push	{r7}
     e6e:	b085      	sub	sp, #20
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     e74:	2300      	movs	r3, #0
     e76:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d104      	bne.n	e88 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     e7e:	68fb      	ldr	r3, [r7, #12]
     e80:	e009      	b.n	e96 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     e82:	68fb      	ldr	r3, [r7, #12]
     e84:	3301      	adds	r3, #1
     e86:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	1c5a      	adds	r2, r3, #1
     e8c:	607a      	str	r2, [r7, #4]
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	2b00      	cmp	r3, #0
     e92:	d1f6      	bne.n	e82 <simple_strlen+0x16>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
     e94:	68fb      	ldr	r3, [r7, #12]
}
     e96:	4618      	mov	r0, r3
     e98:	3714      	adds	r7, #20
     e9a:	46bd      	mov	sp, r7
     e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea0:	4770      	bx	lr
     ea2:	bf00      	nop

00000ea4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     ea4:	b480      	push	{r7}
     ea6:	b087      	sub	sp, #28
     ea8:	af00      	add	r7, sp, #0
     eaa:	60f8      	str	r0, [r7, #12]
     eac:	460b      	mov	r3, r1
     eae:	607a      	str	r2, [r7, #4]
     eb0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     eb2:	2300      	movs	r3, #0
     eb4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	2b00      	cmp	r3, #0
     eba:	dc0c      	bgt.n	ed6 <padbuffer+0x32>
    {
        return i32Cnt;
     ebc:	697b      	ldr	r3, [r7, #20]
     ebe:	e010      	b.n	ee2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ec0:	68fb      	ldr	r3, [r7, #12]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d004      	beq.n	ed0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	1c5a      	adds	r2, r3, #1
     eca:	60fa      	str	r2, [r7, #12]
     ecc:	7afa      	ldrb	r2, [r7, #11]
     ece:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ed0:	697b      	ldr	r3, [r7, #20]
     ed2:	3301      	adds	r3, #1
     ed4:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	1e5a      	subs	r2, r3, #1
     eda:	607a      	str	r2, [r7, #4]
     edc:	2b00      	cmp	r3, #0
     ede:	d1ef      	bne.n	ec0 <padbuffer+0x1c>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
     ee0:	697b      	ldr	r3, [r7, #20]
}
     ee2:	4618      	mov	r0, r3
     ee4:	371c      	adds	r7, #28
     ee6:	46bd      	mov	sp, r7
     ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eec:	4770      	bx	lr
     eee:	bf00      	nop

00000ef0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ef0:	b590      	push	{r4, r7, lr}
     ef2:	b08f      	sub	sp, #60	; 0x3c
     ef4:	af00      	add	r7, sp, #0
     ef6:	60f8      	str	r0, [r7, #12]
     ef8:	60b9      	str	r1, [r7, #8]
     efa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     efc:	68bb      	ldr	r3, [r7, #8]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f04:	2b03      	cmp	r3, #3
     f06:	dc02      	bgt.n	f0e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     f08:	f06f 0302 	mvn.w	r3, #2
     f0c:	e0d4      	b.n	10b8 <ftoa+0x1c8>
    }

    if (fValue == 0.0f)
     f0e:	edd7 7a03 	vldr	s15, [r7, #12]
     f12:	eef5 7a40 	vcmp.f32	s15, #0.0
     f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f1a:	d104      	bne.n	f26 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     f1c:	68bb      	ldr	r3, [r7, #8]
     f1e:	4a68      	ldr	r2, [pc, #416]	; (10c0 <ftoa+0x1d0>)
     f20:	601a      	str	r2, [r3, #0]
        return 3;
     f22:	2303      	movs	r3, #3
     f24:	e0c8      	b.n	10b8 <ftoa+0x1c8>
    }

    pcBufInitial = pcBuf;
     f26:	68bb      	ldr	r3, [r7, #8]
     f28:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     f2a:	68fb      	ldr	r3, [r7, #12]
     f2c:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     f2e:	697b      	ldr	r3, [r7, #20]
     f30:	15db      	asrs	r3, r3, #23
     f32:	b2db      	uxtb	r3, r3
     f34:	3b7f      	subs	r3, #127	; 0x7f
     f36:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     f38:	697b      	ldr	r3, [r7, #20]
     f3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     f3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     f42:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     f44:	2300      	movs	r3, #0
     f46:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     f48:	2300      	movs	r3, #0
     f4a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     f4c:	6a3b      	ldr	r3, [r7, #32]
     f4e:	2b1e      	cmp	r3, #30
     f50:	dd02      	ble.n	f58 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     f52:	f06f 0301 	mvn.w	r3, #1
     f56:	e0af      	b.n	10b8 <ftoa+0x1c8>
    }
    else if (iExp2 < -23)
     f58:	6a3b      	ldr	r3, [r7, #32]
     f5a:	f113 0f17 	cmn.w	r3, #23
     f5e:	da02      	bge.n	f66 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     f60:	f04f 33ff 	mov.w	r3, #4294967295
     f64:	e0a8      	b.n	10b8 <ftoa+0x1c8>
    }
    else if (iExp2 >= 23)
     f66:	6a3b      	ldr	r3, [r7, #32]
     f68:	2b16      	cmp	r3, #22
     f6a:	dd06      	ble.n	f7a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     f6c:	6a3b      	ldr	r3, [r7, #32]
     f6e:	3b17      	subs	r3, #23
     f70:	69fa      	ldr	r2, [r7, #28]
     f72:	fa02 f303 	lsl.w	r3, r2, r3
     f76:	637b      	str	r3, [r7, #52]	; 0x34
     f78:	e01a      	b.n	fb0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     f7a:	6a3b      	ldr	r3, [r7, #32]
     f7c:	2b00      	cmp	r3, #0
     f7e:	db0f      	blt.n	fa0 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     f80:	6a3b      	ldr	r3, [r7, #32]
     f82:	f1c3 0317 	rsb	r3, r3, #23
     f86:	69fa      	ldr	r2, [r7, #28]
     f88:	fa42 f303 	asr.w	r3, r2, r3
     f8c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     f8e:	6a3b      	ldr	r3, [r7, #32]
     f90:	3301      	adds	r3, #1
     f92:	69fa      	ldr	r2, [r7, #28]
     f94:	fa02 f303 	lsl.w	r3, r2, r3
     f98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f9c:	633b      	str	r3, [r7, #48]	; 0x30
     f9e:	e007      	b.n	fb0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     fa0:	69fb      	ldr	r3, [r7, #28]
     fa2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     fa6:	6a3b      	ldr	r3, [r7, #32]
     fa8:	43db      	mvns	r3, r3
     faa:	fa42 f303 	asr.w	r3, r2, r3
     fae:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     fb0:	697b      	ldr	r3, [r7, #20]
     fb2:	2b00      	cmp	r3, #0
     fb4:	da04      	bge.n	fc0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	1c5a      	adds	r2, r3, #1
     fba:	60ba      	str	r2, [r7, #8]
     fbc:	222d      	movs	r2, #45	; 0x2d
     fbe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fc2:	2b00      	cmp	r3, #0
     fc4:	d105      	bne.n	fd2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     fc6:	68bb      	ldr	r3, [r7, #8]
     fc8:	1c5a      	adds	r2, r3, #1
     fca:	60ba      	str	r2, [r7, #8]
     fcc:	2230      	movs	r2, #48	; 0x30
     fce:	701a      	strb	r2, [r3, #0]
     fd0:	e021      	b.n	1016 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fd4:	2b00      	cmp	r3, #0
     fd6:	dd08      	ble.n	fea <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fda:	ea4f 74e3 	mov.w	r4, r3, asr #31
     fde:	68ba      	ldr	r2, [r7, #8]
     fe0:	4618      	mov	r0, r3
     fe2:	4621      	mov	r1, r4
     fe4:	f7ff fe9a 	bl	d1c <uint64_to_str>
     fe8:	e011      	b.n	100e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     fea:	68bb      	ldr	r3, [r7, #8]
     fec:	1c5a      	adds	r2, r3, #1
     fee:	60ba      	str	r2, [r7, #8]
     ff0:	222d      	movs	r2, #45	; 0x2d
     ff2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ff6:	425b      	negs	r3, r3
     ff8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     ffc:	68ba      	ldr	r2, [r7, #8]
     ffe:	4618      	mov	r0, r3
    1000:	4621      	mov	r1, r4
    1002:	f7ff fe8b 	bl	d1c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1006:	e002      	b.n	100e <ftoa+0x11e>
        {
            pcBuf++;
    1008:	68bb      	ldr	r3, [r7, #8]
    100a:	3301      	adds	r3, #1
    100c:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    100e:	68bb      	ldr	r3, [r7, #8]
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	2b00      	cmp	r3, #0
    1014:	d1f8      	bne.n	1008 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    1016:	68bb      	ldr	r3, [r7, #8]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	60ba      	str	r2, [r7, #8]
    101c:	222e      	movs	r2, #46	; 0x2e
    101e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1022:	2b00      	cmp	r3, #0
    1024:	d105      	bne.n	1032 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    1026:	68bb      	ldr	r3, [r7, #8]
    1028:	1c5a      	adds	r2, r3, #1
    102a:	60ba      	str	r2, [r7, #8]
    102c:	2230      	movs	r2, #48	; 0x30
    102e:	701a      	strb	r2, [r3, #0]
    1030:	e03c      	b.n	10ac <ftoa+0x1bc>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1032:	68ba      	ldr	r2, [r7, #8]
    1034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1036:	1ad3      	subs	r3, r2, r3
    1038:	6aba      	ldr	r2, [r7, #40]	; 0x28
    103a:	1ad3      	subs	r3, r2, r3
    103c:	3b01      	subs	r3, #1
    103e:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1040:	69ba      	ldr	r2, [r7, #24]
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	4293      	cmp	r3, r2
    1046:	bfa8      	it	ge
    1048:	4613      	movge	r3, r2
    104a:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
    104c:	2300      	movs	r3, #0
    104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1050:	e015      	b.n	107e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1054:	4613      	mov	r3, r2
    1056:	009b      	lsls	r3, r3, #2
    1058:	4413      	add	r3, r2
    105a:	005b      	lsls	r3, r3, #1
    105c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    105e:	68bb      	ldr	r3, [r7, #8]
    1060:	1c5a      	adds	r2, r3, #1
    1062:	60ba      	str	r2, [r7, #8]
    1064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1066:	1612      	asrs	r2, r2, #24
    1068:	b2d2      	uxtb	r2, r2
    106a:	3230      	adds	r2, #48	; 0x30
    106c:	b2d2      	uxtb	r2, r2
    106e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1072:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1076:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    1078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    107a:	3301      	adds	r3, #1
    107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    107e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1080:	69bb      	ldr	r3, [r7, #24]
    1082:	429a      	cmp	r2, r3
    1084:	dbe5      	blt.n	1052 <ftoa+0x162>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
    1086:	68bb      	ldr	r3, [r7, #8]
    1088:	3b01      	subs	r3, #1
    108a:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    108c:	e002      	b.n	1094 <ftoa+0x1a4>
        {
            --pcBuf;
    108e:	68bb      	ldr	r3, [r7, #8]
    1090:	3b01      	subs	r3, #1
    1092:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
    1094:	68bb      	ldr	r3, [r7, #8]
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b30      	cmp	r3, #48	; 0x30
    109a:	d104      	bne.n	10a6 <ftoa+0x1b6>
    109c:	68bb      	ldr	r3, [r7, #8]
    109e:	3b01      	subs	r3, #1
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	2b2e      	cmp	r3, #46	; 0x2e
    10a4:	d1f3      	bne.n	108e <ftoa+0x19e>
        {
            --pcBuf;
        }
        ++pcBuf;
    10a6:	68bb      	ldr	r3, [r7, #8]
    10a8:	3301      	adds	r3, #1
    10aa:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    10ac:	68bb      	ldr	r3, [r7, #8]
    10ae:	2200      	movs	r2, #0
    10b0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    10b2:	68ba      	ldr	r2, [r7, #8]
    10b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10b6:	1ad3      	subs	r3, r2, r3
} // ftoa()
    10b8:	4618      	mov	r0, r3
    10ba:	373c      	adds	r7, #60	; 0x3c
    10bc:	46bd      	mov	sp, r7
    10be:	bd90      	pop	{r4, r7, pc}
    10c0:	00302e30 	.word	0x00302e30

000010c4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    10c4:	b590      	push	{r4, r7, lr}
    10c6:	b095      	sub	sp, #84	; 0x54
    10c8:	af00      	add	r7, sp, #0
    10ca:	60f8      	str	r0, [r7, #12]
    10cc:	60b9      	str	r1, [r7, #8]
    10ce:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    10d0:	2300      	movs	r3, #0
    10d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    10d4:	2300      	movs	r3, #0
    10d6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    10d8:	e2e3      	b.n	16a2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    10da:	2306      	movs	r3, #6
    10dc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    10de:	68bb      	ldr	r3, [r7, #8]
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	2b25      	cmp	r3, #37	; 0x25
    10e4:	d01f      	beq.n	1126 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d015      	beq.n	1118 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	2b0a      	cmp	r3, #10
    10f2:	d10b      	bne.n	110c <am_util_stdio_vsprintf+0x48>
    10f4:	4bb1      	ldr	r3, [pc, #708]	; (13bc <am_util_stdio_vsprintf+0x2f8>)
    10f6:	781b      	ldrb	r3, [r3, #0]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d007      	beq.n	110c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	1c5a      	adds	r2, r3, #1
    1100:	60fa      	str	r2, [r7, #12]
    1102:	220d      	movs	r2, #13
    1104:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1108:	3301      	adds	r3, #1
    110a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	1c5a      	adds	r2, r3, #1
    1110:	60fa      	str	r2, [r7, #12]
    1112:	68ba      	ldr	r2, [r7, #8]
    1114:	7812      	ldrb	r2, [r2, #0]
    1116:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1118:	68bb      	ldr	r3, [r7, #8]
    111a:	3301      	adds	r3, #1
    111c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    111e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1120:	3301      	adds	r3, #1
    1122:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1124:	e2bd      	b.n	16a2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1126:	68bb      	ldr	r3, [r7, #8]
    1128:	3301      	adds	r3, #1
    112a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    112c:	2300      	movs	r3, #0
    112e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1132:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1136:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    113a:	2320      	movs	r3, #32
    113c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1140:	68bb      	ldr	r3, [r7, #8]
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	2b30      	cmp	r3, #48	; 0x30
    1146:	d105      	bne.n	1154 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1148:	2330      	movs	r3, #48	; 0x30
    114a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    114e:	68bb      	ldr	r3, [r7, #8]
    1150:	3301      	adds	r3, #1
    1152:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1154:	f107 0310 	add.w	r3, r7, #16
    1158:	4619      	mov	r1, r3
    115a:	68b8      	ldr	r0, [r7, #8]
    115c:	f7ff fd98 	bl	c90 <decstr_to_int>
    1160:	4603      	mov	r3, r0
    1162:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1164:	693b      	ldr	r3, [r7, #16]
    1166:	68ba      	ldr	r2, [r7, #8]
    1168:	4413      	add	r3, r2
    116a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    116c:	68bb      	ldr	r3, [r7, #8]
    116e:	781b      	ldrb	r3, [r3, #0]
    1170:	2b73      	cmp	r3, #115	; 0x73
    1172:	d005      	beq.n	1180 <am_util_stdio_vsprintf+0xbc>
    1174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1176:	2b00      	cmp	r3, #0
    1178:	da02      	bge.n	1180 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117c:	425b      	negs	r3, r3
    117e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1180:	68bb      	ldr	r3, [r7, #8]
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	2b2e      	cmp	r3, #46	; 0x2e
    1186:	d10e      	bne.n	11a6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1188:	68bb      	ldr	r3, [r7, #8]
    118a:	3301      	adds	r3, #1
    118c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    118e:	f107 0310 	add.w	r3, r7, #16
    1192:	4619      	mov	r1, r3
    1194:	68b8      	ldr	r0, [r7, #8]
    1196:	f7ff fd7b 	bl	c90 <decstr_to_int>
    119a:	4603      	mov	r3, r0
    119c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    119e:	693b      	ldr	r3, [r7, #16]
    11a0:	68ba      	ldr	r2, [r7, #8]
    11a2:	4413      	add	r3, r2
    11a4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    11a6:	68bb      	ldr	r3, [r7, #8]
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b6c      	cmp	r3, #108	; 0x6c
    11ac:	d10c      	bne.n	11c8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    11ae:	68bb      	ldr	r3, [r7, #8]
    11b0:	3301      	adds	r3, #1
    11b2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    11b4:	68bb      	ldr	r3, [r7, #8]
    11b6:	781b      	ldrb	r3, [r3, #0]
    11b8:	2b6c      	cmp	r3, #108	; 0x6c
    11ba:	d105      	bne.n	11c8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	3301      	adds	r3, #1
    11c0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    11c2:	2301      	movs	r3, #1
    11c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    11c8:	68bb      	ldr	r3, [r7, #8]
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	3b46      	subs	r3, #70	; 0x46
    11ce:	2b32      	cmp	r3, #50	; 0x32
    11d0:	f200 8254 	bhi.w	167c <am_util_stdio_vsprintf+0x5b8>
    11d4:	a201      	add	r2, pc, #4	; (adr r2, 11dc <am_util_stdio_vsprintf+0x118>)
    11d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11da:	bf00      	nop
    11dc:	00001607 	.word	0x00001607
    11e0:	0000167d 	.word	0x0000167d
    11e4:	0000167d 	.word	0x0000167d
    11e8:	0000167d 	.word	0x0000167d
    11ec:	0000167d 	.word	0x0000167d
    11f0:	0000167d 	.word	0x0000167d
    11f4:	0000167d 	.word	0x0000167d
    11f8:	0000167d 	.word	0x0000167d
    11fc:	0000167d 	.word	0x0000167d
    1200:	0000167d 	.word	0x0000167d
    1204:	0000167d 	.word	0x0000167d
    1208:	0000167d 	.word	0x0000167d
    120c:	0000167d 	.word	0x0000167d
    1210:	0000167d 	.word	0x0000167d
    1214:	0000167d 	.word	0x0000167d
    1218:	0000167d 	.word	0x0000167d
    121c:	0000167d 	.word	0x0000167d
    1220:	0000167d 	.word	0x0000167d
    1224:	000013a3 	.word	0x000013a3
    1228:	0000167d 	.word	0x0000167d
    122c:	0000167d 	.word	0x0000167d
    1230:	0000167d 	.word	0x0000167d
    1234:	0000167d 	.word	0x0000167d
    1238:	0000167d 	.word	0x0000167d
    123c:	0000167d 	.word	0x0000167d
    1240:	0000167d 	.word	0x0000167d
    1244:	0000167d 	.word	0x0000167d
    1248:	0000167d 	.word	0x0000167d
    124c:	0000167d 	.word	0x0000167d
    1250:	000012a9 	.word	0x000012a9
    1254:	000014cf 	.word	0x000014cf
    1258:	0000167d 	.word	0x0000167d
    125c:	00001607 	.word	0x00001607
    1260:	0000167d 	.word	0x0000167d
    1264:	0000167d 	.word	0x0000167d
    1268:	000014cf 	.word	0x000014cf
    126c:	0000167d 	.word	0x0000167d
    1270:	0000167d 	.word	0x0000167d
    1274:	0000167d 	.word	0x0000167d
    1278:	0000167d 	.word	0x0000167d
    127c:	0000167d 	.word	0x0000167d
    1280:	0000167d 	.word	0x0000167d
    1284:	0000167d 	.word	0x0000167d
    1288:	0000167d 	.word	0x0000167d
    128c:	0000167d 	.word	0x0000167d
    1290:	000012cf 	.word	0x000012cf
    1294:	0000167d 	.word	0x0000167d
    1298:	0000143d 	.word	0x0000143d
    129c:	0000167d 	.word	0x0000167d
    12a0:	0000167d 	.word	0x0000167d
    12a4:	0000139d 	.word	0x0000139d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	1d1a      	adds	r2, r3, #4
    12ac:	607a      	str	r2, [r7, #4]
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	2b00      	cmp	r3, #0
    12b8:	d005      	beq.n	12c6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    12ba:	68fb      	ldr	r3, [r7, #12]
    12bc:	1c5a      	adds	r2, r3, #1
    12be:	60fa      	str	r2, [r7, #12]
    12c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    12c4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    12c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12c8:	3301      	adds	r3, #1
    12ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12cc:	e1e6      	b.n	169c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	1d1a      	adds	r2, r3, #4
    12d2:	607a      	str	r2, [r7, #4]
    12d4:	681b      	ldr	r3, [r3, #0]
    12d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    12d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    12da:	f7ff fdc7 	bl	e6c <simple_strlen>
    12de:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    12e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12e2:	2b00      	cmp	r3, #0
    12e4:	dd2e      	ble.n	1344 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    12e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12ea:	429a      	cmp	r2, r3
    12ec:	d22a      	bcs.n	1344 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    12ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12f2:	1ad3      	subs	r3, r2, r3
    12f4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    12f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12fc:	4619      	mov	r1, r3
    12fe:	68f8      	ldr	r0, [r7, #12]
    1300:	f7ff fdd0 	bl	ea4 <padbuffer>
    1304:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	2b00      	cmp	r3, #0
    130a:	d001      	beq.n	1310 <am_util_stdio_vsprintf+0x24c>
    130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    130e:	e000      	b.n	1312 <am_util_stdio_vsprintf+0x24e>
    1310:	2300      	movs	r3, #0
    1312:	68fa      	ldr	r2, [r7, #12]
    1314:	4413      	add	r3, r2
    1316:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    131a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    131c:	4413      	add	r3, r2
    131e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1320:	2300      	movs	r3, #0
    1322:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1324:	e00e      	b.n	1344 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	2b00      	cmp	r3, #0
    132a:	d005      	beq.n	1338 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	1c5a      	adds	r2, r3, #1
    1330:	60fa      	str	r2, [r7, #12]
    1332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1334:	7812      	ldrb	r2, [r2, #0]
    1336:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    133a:	3301      	adds	r3, #1
    133c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1340:	3301      	adds	r3, #1
    1342:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    1344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	2b00      	cmp	r3, #0
    134a:	d1ec      	bne.n	1326 <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    134e:	2b00      	cmp	r3, #0
    1350:	f000 81a1 	beq.w	1696 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1356:	425b      	negs	r3, r3
    1358:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    135e:	429a      	cmp	r2, r3
    1360:	f080 8199 	bcs.w	1696 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1364:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1368:	1ad3      	subs	r3, r2, r3
    136a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    136c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1370:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1372:	4619      	mov	r1, r3
    1374:	68f8      	ldr	r0, [r7, #12]
    1376:	f7ff fd95 	bl	ea4 <padbuffer>
    137a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	2b00      	cmp	r3, #0
    1380:	d001      	beq.n	1386 <am_util_stdio_vsprintf+0x2c2>
    1382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1384:	e000      	b.n	1388 <am_util_stdio_vsprintf+0x2c4>
    1386:	2300      	movs	r3, #0
    1388:	68fa      	ldr	r2, [r7, #12]
    138a:	4413      	add	r3, r2
    138c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1392:	4413      	add	r3, r2
    1394:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1396:	2300      	movs	r3, #0
    1398:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    139a:	e17c      	b.n	1696 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    139c:	2301      	movs	r3, #1
    139e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13a6:	2b00      	cmp	r3, #0
    13a8:	d00a      	beq.n	13c0 <am_util_stdio_vsprintf+0x2fc>
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	3307      	adds	r3, #7
    13ae:	f023 0307 	bic.w	r3, r3, #7
    13b2:	f103 0208 	add.w	r2, r3, #8
    13b6:	607a      	str	r2, [r7, #4]
    13b8:	cb18      	ldmia	r3, {r3, r4}
    13ba:	e007      	b.n	13cc <am_util_stdio_vsprintf+0x308>
    13bc:	10001184 	.word	0x10001184
                                      va_arg(pArgs, uint32_t);
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	1d1a      	adds	r2, r3, #4
    13c4:	607a      	str	r2, [r7, #4]
    13c6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13c8:	f04f 0400 	mov.w	r4, #0
    13cc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    13d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13d2:	2b00      	cmp	r3, #0
    13d4:	d01e      	beq.n	1414 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    13d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13da:	f7ff fc35 	bl	c48 <ndigits_in_hex>
    13de:	4602      	mov	r2, r0
    13e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13e2:	1a9b      	subs	r3, r3, r2
    13e4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13ec:	4619      	mov	r1, r3
    13ee:	68f8      	ldr	r0, [r7, #12]
    13f0:	f7ff fd58 	bl	ea4 <padbuffer>
    13f4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d001      	beq.n	1400 <am_util_stdio_vsprintf+0x33c>
    13fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13fe:	e000      	b.n	1402 <am_util_stdio_vsprintf+0x33e>
    1400:	2300      	movs	r3, #0
    1402:	68fa      	ldr	r2, [r7, #12]
    1404:	4413      	add	r3, r2
    1406:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    140a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    140c:	4413      	add	r3, r2
    140e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1410:	2300      	movs	r3, #0
    1412:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1414:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1418:	68fa      	ldr	r2, [r7, #12]
    141a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    141e:	f7ff fcc5 	bl	dac <uint64_to_hexstr>
    1422:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	2b00      	cmp	r3, #0
    1428:	d003      	beq.n	1432 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    142c:	68fa      	ldr	r2, [r7, #12]
    142e:	4413      	add	r3, r2
    1430:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1436:	4413      	add	r3, r2
    1438:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    143a:	e12f      	b.n	169c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    143c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1440:	2b00      	cmp	r3, #0
    1442:	d008      	beq.n	1456 <am_util_stdio_vsprintf+0x392>
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	3307      	adds	r3, #7
    1448:	f023 0307 	bic.w	r3, r3, #7
    144c:	f103 0208 	add.w	r2, r3, #8
    1450:	607a      	str	r2, [r7, #4]
    1452:	cb18      	ldmia	r3, {r3, r4}
    1454:	e005      	b.n	1462 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	1d1a      	adds	r2, r3, #4
    145a:	607a      	str	r2, [r7, #4]
    145c:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    145e:	f04f 0400 	mov.w	r4, #0
    1462:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    1466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1468:	2b00      	cmp	r3, #0
    146a:	d01e      	beq.n	14aa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    146c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1470:	f7ff fbaa 	bl	bc8 <ndigits_in_u64>
    1474:	4602      	mov	r2, r0
    1476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1478:	1a9b      	subs	r3, r3, r2
    147a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    147c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1480:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1482:	4619      	mov	r1, r3
    1484:	68f8      	ldr	r0, [r7, #12]
    1486:	f7ff fd0d 	bl	ea4 <padbuffer>
    148a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	2b00      	cmp	r3, #0
    1490:	d001      	beq.n	1496 <am_util_stdio_vsprintf+0x3d2>
    1492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1494:	e000      	b.n	1498 <am_util_stdio_vsprintf+0x3d4>
    1496:	2300      	movs	r3, #0
    1498:	68fa      	ldr	r2, [r7, #12]
    149a:	4413      	add	r3, r2
    149c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14a2:	4413      	add	r3, r2
    14a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    14a6:	2300      	movs	r3, #0
    14a8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    14aa:	68fa      	ldr	r2, [r7, #12]
    14ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14b0:	f7ff fc34 	bl	d1c <uint64_to_str>
    14b4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d003      	beq.n	14c4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    14bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14be:	68fa      	ldr	r2, [r7, #12]
    14c0:	4413      	add	r3, r2
    14c2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    14c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14c8:	4413      	add	r3, r2
    14ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14cc:	e0e6      	b.n	169c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    14ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    14d2:	2b00      	cmp	r3, #0
    14d4:	d008      	beq.n	14e8 <am_util_stdio_vsprintf+0x424>
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	3307      	adds	r3, #7
    14da:	f023 0307 	bic.w	r3, r3, #7
    14de:	f103 0208 	add.w	r2, r3, #8
    14e2:	607a      	str	r2, [r7, #4]
    14e4:	cb18      	ldmia	r3, {r3, r4}
    14e6:	e005      	b.n	14f4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	1d1a      	adds	r2, r3, #4
    14ec:	607a      	str	r2, [r7, #4]
    14ee:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    14f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    14f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    14f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14fc:	2b00      	cmp	r3, #0
    14fe:	f174 0300 	sbcs.w	r3, r4, #0
    1502:	da0a      	bge.n	151a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1504:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1508:	425b      	negs	r3, r3
    150a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    150e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1512:	2301      	movs	r3, #1
    1514:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1518:	e006      	b.n	1528 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    151a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    151e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1522:	2300      	movs	r3, #0
    1524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    152a:	2b00      	cmp	r3, #0
    152c:	d04a      	beq.n	15c4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    152e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1532:	4618      	mov	r0, r3
    1534:	4621      	mov	r1, r4
    1536:	f7ff fb69 	bl	c0c <ndigits_in_i64>
    153a:	4602      	mov	r2, r0
    153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    153e:	1a9b      	subs	r3, r3, r2
    1540:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1542:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1546:	2b00      	cmp	r3, #0
    1548:	d011      	beq.n	156e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    154c:	3b01      	subs	r3, #1
    154e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1554:	2b30      	cmp	r3, #48	; 0x30
    1556:	d10a      	bne.n	156e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	2b00      	cmp	r3, #0
    155c:	d004      	beq.n	1568 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	1c5a      	adds	r2, r3, #1
    1562:	60fa      	str	r2, [r7, #12]
    1564:	222d      	movs	r2, #45	; 0x2d
    1566:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    156a:	3301      	adds	r3, #1
    156c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1572:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1574:	4619      	mov	r1, r3
    1576:	68f8      	ldr	r0, [r7, #12]
    1578:	f7ff fc94 	bl	ea4 <padbuffer>
    157c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	2b00      	cmp	r3, #0
    1582:	d001      	beq.n	1588 <am_util_stdio_vsprintf+0x4c4>
    1584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1586:	e000      	b.n	158a <am_util_stdio_vsprintf+0x4c6>
    1588:	2300      	movs	r3, #0
    158a:	68fa      	ldr	r2, [r7, #12]
    158c:	4413      	add	r3, r2
    158e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1594:	4413      	add	r3, r2
    1596:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1598:	2300      	movs	r3, #0
    159a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    159c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    15a0:	2b00      	cmp	r3, #0
    15a2:	d01e      	beq.n	15e2 <am_util_stdio_vsprintf+0x51e>
    15a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15a8:	2b20      	cmp	r3, #32
    15aa:	d11a      	bne.n	15e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    15ac:	68fb      	ldr	r3, [r7, #12]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d004      	beq.n	15bc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	1c5a      	adds	r2, r3, #1
    15b6:	60fa      	str	r2, [r7, #12]
    15b8:	222d      	movs	r2, #45	; 0x2d
    15ba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    15bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15be:	3301      	adds	r3, #1
    15c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    15c2:	e00e      	b.n	15e2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    15c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    15c8:	2b00      	cmp	r3, #0
    15ca:	d00a      	beq.n	15e2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d004      	beq.n	15dc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	1c5a      	adds	r2, r3, #1
    15d6:	60fa      	str	r2, [r7, #12]
    15d8:	222d      	movs	r2, #45	; 0x2d
    15da:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    15dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15de:	3301      	adds	r3, #1
    15e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    15e2:	68fa      	ldr	r2, [r7, #12]
    15e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    15e8:	f7ff fb98 	bl	d1c <uint64_to_str>
    15ec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    15ee:	68fb      	ldr	r3, [r7, #12]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d003      	beq.n	15fc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    15f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15f6:	68fa      	ldr	r2, [r7, #12]
    15f8:	4413      	add	r3, r2
    15fa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1600:	4413      	add	r3, r2
    1602:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1604:	e04a      	b.n	169c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1606:	68fb      	ldr	r3, [r7, #12]
    1608:	2b00      	cmp	r3, #0
    160a:	d046      	beq.n	169a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	3307      	adds	r3, #7
    1610:	f023 0307 	bic.w	r3, r3, #7
    1614:	f103 0208 	add.w	r2, r3, #8
    1618:	607a      	str	r2, [r7, #4]
    161a:	cb18      	ldmia	r3, {r3, r4}
    161c:	4618      	mov	r0, r3
    161e:	4621      	mov	r1, r4
    1620:	f7fe fd4e 	bl	c0 <__aeabi_d2f>
    1624:	4603      	mov	r3, r0
    1626:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	2214      	movs	r2, #20
    162c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    162e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1630:	68f9      	ldr	r1, [r7, #12]
    1632:	6978      	ldr	r0, [r7, #20]
    1634:	f7ff fc5c 	bl	ef0 <ftoa>
    1638:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    163c:	2b00      	cmp	r3, #0
    163e:	da14      	bge.n	166a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1642:	f1b3 3fff 	cmp.w	r3, #4294967295
    1646:	d102      	bne.n	164e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1648:	4b1e      	ldr	r3, [pc, #120]	; (16c4 <am_util_stdio_vsprintf+0x600>)
    164a:	62bb      	str	r3, [r7, #40]	; 0x28
    164c:	e008      	b.n	1660 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    164e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1650:	f113 0f02 	cmn.w	r3, #2
    1654:	d102      	bne.n	165c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1656:	4b1c      	ldr	r3, [pc, #112]	; (16c8 <am_util_stdio_vsprintf+0x604>)
    1658:	62bb      	str	r3, [r7, #40]	; 0x28
    165a:	e001      	b.n	1660 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    165c:	4b1b      	ldr	r3, [pc, #108]	; (16cc <am_util_stdio_vsprintf+0x608>)
    165e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1664:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1666:	2303      	movs	r3, #3
    1668:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    166c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    166e:	4413      	add	r3, r2
    1670:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1674:	68fa      	ldr	r2, [r7, #12]
    1676:	4413      	add	r3, r2
    1678:	60fb      	str	r3, [r7, #12]
                }
                break;
    167a:	e00e      	b.n	169a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	2b00      	cmp	r3, #0
    1680:	d005      	beq.n	168e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1682:	68fb      	ldr	r3, [r7, #12]
    1684:	1c5a      	adds	r2, r3, #1
    1686:	60fa      	str	r2, [r7, #12]
    1688:	68ba      	ldr	r2, [r7, #8]
    168a:	7812      	ldrb	r2, [r2, #0]
    168c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1690:	3301      	adds	r3, #1
    1692:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1694:	e002      	b.n	169c <am_util_stdio_vsprintf+0x5d8>
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }
                break;
    1696:	bf00      	nop
    1698:	e000      	b.n	169c <am_util_stdio_vsprintf+0x5d8>
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
                    pcBuf += iVal;
                }
                break;
    169a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    169c:	68bb      	ldr	r3, [r7, #8]
    169e:	3301      	adds	r3, #1
    16a0:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    16a2:	68bb      	ldr	r3, [r7, #8]
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	2b00      	cmp	r3, #0
    16a8:	f47f ad17 	bne.w	10da <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    16ac:	68fb      	ldr	r3, [r7, #12]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d002      	beq.n	16b8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	2200      	movs	r2, #0
    16b6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    16b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    16ba:	4618      	mov	r0, r3
    16bc:	3754      	adds	r7, #84	; 0x54
    16be:	46bd      	mov	sp, r7
    16c0:	bd90      	pop	{r4, r7, pc}
    16c2:	bf00      	nop
    16c4:	00302e30 	.word	0x00302e30
    16c8:	00232e23 	.word	0x00232e23
    16cc:	003f2e3f 	.word	0x003f2e3f

000016d0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    16d0:	b40f      	push	{r0, r1, r2, r3}
    16d2:	b580      	push	{r7, lr}
    16d4:	b082      	sub	sp, #8
    16d6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    16d8:	f107 0314 	add.w	r3, r7, #20
    16dc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    16de:	683a      	ldr	r2, [r7, #0]
    16e0:	6939      	ldr	r1, [r7, #16]
    16e2:	4808      	ldr	r0, [pc, #32]	; (1704 <am_util_stdio_printf+0x34>)
    16e4:	f7ff fcee 	bl	10c4 <am_util_stdio_vsprintf>
    16e8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    16ea:	4b07      	ldr	r3, [pc, #28]	; (1708 <am_util_stdio_printf+0x38>)
    16ec:	681b      	ldr	r3, [r3, #0]
    16ee:	4805      	ldr	r0, [pc, #20]	; (1704 <am_util_stdio_printf+0x34>)
    16f0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    16f2:	687b      	ldr	r3, [r7, #4]
}
    16f4:	4618      	mov	r0, r3
    16f6:	3708      	adds	r7, #8
    16f8:	46bd      	mov	sp, r7
    16fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    16fe:	b004      	add	sp, #16
    1700:	4770      	bx	lr
    1702:	bf00      	nop
    1704:	10001084 	.word	0x10001084
    1708:	10001198 	.word	0x10001198

0000170c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    170c:	b580      	push	{r7, lr}
    170e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1710:	4802      	ldr	r0, [pc, #8]	; (171c <am_util_stdio_terminal_clear+0x10>)
    1712:	f7ff ffdd 	bl	16d0 <am_util_stdio_printf>
}
    1716:	bf00      	nop
    1718:	bd80      	pop	{r7, pc}
    171a:	bf00      	nop
    171c:	000023d0 	.word	0x000023d0

00001720 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1720:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1722:	f000 fb0f 	bl	1d44 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1726:	f000 fb7b 	bl	1e20 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    172a:	f000 fcad 	bl	2088 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    172e:	2001      	movs	r0, #1
    1730:	f000 fb9e 	bl	1e70 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1734:	2001      	movs	r0, #1
    1736:	f000 f945 	bl	19c4 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    173a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    173e:	f000 bba5 	b.w	1e8c <am_hal_rtc_osc_disable>
    1742:	bf00      	nop

00001744 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1744:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1746:	4b17      	ldr	r3, [pc, #92]	; (17a4 <am_bsp_debug_printf_enable+0x60>)
    1748:	6818      	ldr	r0, [r3, #0]
    174a:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    174e:	b087      	sub	sp, #28
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1750:	d001      	beq.n	1756 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1752:	b007      	add	sp, #28
    1754:	bd30      	pop	{r4, r5, pc}
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1756:	4a14      	ldr	r2, [pc, #80]	; (17a8 <am_bsp_debug_printf_enable+0x64>)
    1758:	4914      	ldr	r1, [pc, #80]	; (17ac <am_bsp_debug_printf_enable+0x68>)
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    175a:	4d15      	ldr	r5, [pc, #84]	; (17b0 <am_bsp_debug_printf_enable+0x6c>)
    }

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    175c:	6011      	str	r1, [r2, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

    //
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    175e:	a806      	add	r0, sp, #24
    1760:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1764:	f000 fc34 	bl	1fd0 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1768:	f3ef 8310 	mrs	r3, PRIMASK
    176c:	9300      	str	r3, [sp, #0]
    176e:	b672      	cpsid	i
    1770:	4a10      	ldr	r2, [pc, #64]	; (17b4 <am_bsp_debug_printf_enable+0x70>)
    1772:	4d11      	ldr	r5, [pc, #68]	; (17b8 <am_bsp_debug_printf_enable+0x74>)
    1774:	4811      	ldr	r0, [pc, #68]	; (17bc <am_bsp_debug_printf_enable+0x78>)
    1776:	4912      	ldr	r1, [pc, #72]	; (17c0 <am_bsp_debug_printf_enable+0x7c>)
    1778:	2373      	movs	r3, #115	; 0x73
    177a:	6013      	str	r3, [r2, #0]
    177c:	682b      	ldr	r3, [r5, #0]
    177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1782:	602b      	str	r3, [r5, #0]
    1784:	6805      	ldr	r5, [r0, #0]
    1786:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    178a:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    178e:	6003      	str	r3, [r0, #0]
    1790:	6808      	ldr	r0, [r1, #0]
    1792:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1796:	600d      	str	r5, [r1, #0]
    1798:	6014      	str	r4, [r2, #0]
    179a:	9c00      	ldr	r4, [sp, #0]
    179c:	f384 8810 	msr	PRIMASK, r4
}
    17a0:	b007      	add	sp, #28
    17a2:	bd30      	pop	{r4, r5, pc}
    17a4:	10001188 	.word	0x10001188
    17a8:	e0000e80 	.word	0xe0000e80
    17ac:	00150511 	.word	0x00150511
    17b0:	000f4240 	.word	0x000f4240
    17b4:	40010060 	.word	0x40010060
    17b8:	40010054 	.word	0x40010054
    17bc:	40010028 	.word	0x40010028
    17c0:	40010108 	.word	0x40010108

000017c4 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    17c4:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    17c6:	4b15      	ldr	r3, [pc, #84]	; (181c <am_bsp_debug_printf_disable+0x58>)
    17c8:	6818      	ldr	r0, [r3, #0]
    17ca:	f010 0401 	ands.w	r4, r0, #1
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    17ce:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    17d0:	d121      	bne.n	1816 <am_bsp_debug_printf_disable+0x52>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    17d2:	f000 f969 	bl	1aa8 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    17d6:	f3ef 8110 	mrs	r1, PRIMASK
    17da:	9101      	str	r1, [sp, #4]
    17dc:	b672      	cpsid	i
    17de:	4a10      	ldr	r2, [pc, #64]	; (1820 <am_bsp_debug_printf_disable+0x5c>)
    17e0:	4d10      	ldr	r5, [pc, #64]	; (1824 <am_bsp_debug_printf_disable+0x60>)
    17e2:	4811      	ldr	r0, [pc, #68]	; (1828 <am_bsp_debug_printf_disable+0x64>)
    17e4:	4911      	ldr	r1, [pc, #68]	; (182c <am_bsp_debug_printf_disable+0x68>)
    17e6:	2373      	movs	r3, #115	; 0x73
    17e8:	6013      	str	r3, [r2, #0]
    17ea:	682b      	ldr	r3, [r5, #0]
    17ec:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    17f0:	f04c 0320 	orr.w	r3, ip, #32
    17f4:	602b      	str	r3, [r5, #0]
    17f6:	6805      	ldr	r5, [r0, #0]
    17f8:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    17fc:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1800:	6003      	str	r3, [r0, #0]
    1802:	6808      	ldr	r0, [r1, #0]
    1804:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1808:	600d      	str	r5, [r1, #0]
    180a:	6014      	str	r4, [r2, #0]
    180c:	9c01      	ldr	r4, [sp, #4]
    180e:	f384 8810 	msr	PRIMASK, r4
    am_hal_tpiu_disable();
    1812:	f000 fc33 	bl	207c <am_hal_tpiu_disable>
}
    1816:	b003      	add	sp, #12
    1818:	bd30      	pop	{r4, r5, pc}
    181a:	bf00      	nop
    181c:	10001188 	.word	0x10001188
    1820:	40010060 	.word	0x40010060
    1824:	40010054 	.word	0x40010054
    1828:	40010028 	.word	0x40010028
    182c:	40010108 	.word	0x40010108

00001830 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1830:	f000 b944 	b.w	1abc <am_hal_itm_print>

00001834 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1836:	4604      	mov	r4, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1838:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    183c:	78a7      	ldrb	r7, [r4, #2]
    // workaround for a timing issue with early versions of Apollo2 that caused
    // the cache to incorrectly mark itself valid during the startup sequence.
    // The workaround calls for us to start the cache, manually invalidate it,
    // and then enable ICACHE and DCACHE operation.
    //
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    183e:	7863      	ldrb	r3, [r4, #1]
    1840:	78e2      	ldrb	r2, [r4, #3]
    1842:	7925      	ldrb	r5, [r4, #4]
    1844:	79a1      	ldrb	r1, [r4, #6]
    1846:	00be      	lsls	r6, r7, #2
    1848:	ea4f 0e43 	mov.w	lr, r3, lsl #1
    184c:	f006 0304 	and.w	r3, r6, #4
    1850:	f00e 0602 	and.w	r6, lr, #2
    1854:	431e      	orrs	r6, r3
    1856:	f042 0201 	orr.w	r2, r2, #1
    185a:	79e3      	ldrb	r3, [r4, #7]
    185c:	01ed      	lsls	r5, r5, #7
    185e:	4316      	orrs	r6, r2
    1860:	b2ed      	uxtb	r5, r5
    1862:	7a22      	ldrb	r2, [r4, #8]
    1864:	0289      	lsls	r1, r1, #10
    1866:	432e      	orrs	r6, r5
    1868:	f401 6180 	and.w	r1, r1, #1024	; 0x400
    186c:	7a65      	ldrb	r5, [r4, #9]
    186e:	02db      	lsls	r3, r3, #11
    1870:	430e      	orrs	r6, r1
    1872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1876:	0312      	lsls	r2, r2, #12
    1878:	7aa1      	ldrb	r1, [r4, #10]
    187a:	431e      	orrs	r6, r3
    187c:	042d      	lsls	r5, r5, #16
    187e:	b293      	uxth	r3, r2
    1880:	7ae2      	ldrb	r2, [r4, #11]
    1882:	431e      	orrs	r6, r3
    1884:	0509      	lsls	r1, r1, #20
    1886:	f405 2370 	and.w	r3, r5, #983040	; 0xf0000
    188a:	0612      	lsls	r2, r2, #24
    188c:	4333      	orrs	r3, r6
    188e:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    1892:	00bf      	lsls	r7, r7, #2
    1894:	f002 7180 	and.w	r1, r2, #16777216	; 0x1000000
    1898:	4333      	orrs	r3, r6
    189a:	430b      	orrs	r3, r1
    189c:	f007 0508 	and.w	r5, r7, #8
    18a0:	431d      	orrs	r5, r3
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    18a2:	f000 f947 	bl	1b34 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18a6:	482c      	ldr	r0, [pc, #176]	; (1958 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18a8:	4b2c      	ldr	r3, [pc, #176]	; (195c <am_hal_cachectrl_enable+0x128>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18aa:	6005      	str	r5, [r0, #0]
    18ac:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18ae:	681e      	ldr	r6, [r3, #0]
    18b0:	0777      	lsls	r7, r6, #29
    18b2:	d41e      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18b4:	681f      	ldr	r7, [r3, #0]
    18b6:	077e      	lsls	r6, r7, #29
    18b8:	f102 32ff 	add.w	r2, r2, #4294967295
    18bc:	d419      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18be:	6819      	ldr	r1, [r3, #0]
    18c0:	074f      	lsls	r7, r1, #29
    18c2:	d416      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18c4:	6818      	ldr	r0, [r3, #0]
    18c6:	0746      	lsls	r6, r0, #29
    18c8:	d413      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18ca:	681e      	ldr	r6, [r3, #0]
    18cc:	0770      	lsls	r0, r6, #29
    18ce:	d410      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18d0:	681f      	ldr	r7, [r3, #0]
    18d2:	0779      	lsls	r1, r7, #29
    18d4:	d40d      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18d6:	6819      	ldr	r1, [r3, #0]
    18d8:	074f      	lsls	r7, r1, #29
    18da:	d40a      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18dc:	6818      	ldr	r0, [r3, #0]
    18de:	0746      	lsls	r6, r0, #29
    18e0:	d407      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18e2:	681e      	ldr	r6, [r3, #0]
    18e4:	0770      	lsls	r0, r6, #29
    18e6:	d404      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    18e8:	681f      	ldr	r7, [r3, #0]
    18ea:	0779      	lsls	r1, r7, #29
    18ec:	d401      	bmi.n	18f2 <am_hal_cachectrl_enable+0xbe>
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;

    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    18ee:	3a09      	subs	r2, #9
    18f0:	d1dd      	bne.n	18ae <am_hal_cachectrl_enable+0x7a>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    18f2:	4b1a      	ldr	r3, [pc, #104]	; (195c <am_hal_cachectrl_enable+0x128>)
    18f4:	681a      	ldr	r2, [r3, #0]
    18f6:	f042 0101 	orr.w	r1, r2, #1
    18fa:	6019      	str	r1, [r3, #0]
    18fc:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18fe:	6818      	ldr	r0, [r3, #0]
    1900:	0740      	lsls	r0, r0, #29
    1902:	d41e      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1904:	681e      	ldr	r6, [r3, #0]
    1906:	0771      	lsls	r1, r6, #29
    1908:	f102 32ff 	add.w	r2, r2, #4294967295
    190c:	d419      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    190e:	681f      	ldr	r7, [r3, #0]
    1910:	077f      	lsls	r7, r7, #29
    1912:	d416      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1914:	6819      	ldr	r1, [r3, #0]
    1916:	074e      	lsls	r6, r1, #29
    1918:	d413      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    191a:	6818      	ldr	r0, [r3, #0]
    191c:	0740      	lsls	r0, r0, #29
    191e:	d410      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1920:	681e      	ldr	r6, [r3, #0]
    1922:	0771      	lsls	r1, r6, #29
    1924:	d40d      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1926:	681f      	ldr	r7, [r3, #0]
    1928:	077f      	lsls	r7, r7, #29
    192a:	d40a      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    192c:	6819      	ldr	r1, [r3, #0]
    192e:	074e      	lsls	r6, r1, #29
    1930:	d407      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1932:	6818      	ldr	r0, [r3, #0]
    1934:	0740      	lsls	r0, r0, #29
    1936:	d404      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    1938:	681e      	ldr	r6, [r3, #0]
    193a:	0771      	lsls	r1, r6, #29
    193c:	d401      	bmi.n	1942 <am_hal_cachectrl_enable+0x10e>
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);

    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    193e:	3a09      	subs	r2, #9
    1940:	d1dd      	bne.n	18fe <am_hal_cachectrl_enable+0xca>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1942:	7964      	ldrb	r4, [r4, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1944:	4f04      	ldr	r7, [pc, #16]	; (1958 <am_hal_cachectrl_enable+0x124>)

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1946:	0223      	lsls	r3, r4, #8
    1948:	f403 7100 	and.w	r1, r3, #512	; 0x200
    194c:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1950:	4311      	orrs	r1, r2
    1952:	4329      	orrs	r1, r5
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1954:	6039      	str	r1, [r7, #0]
    1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1958:	40018000 	.word	0x40018000
    195c:	40018008 	.word	0x40018008

00001960 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1960:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1962:	4604      	mov	r4, r0
    1964:	b120      	cbz	r0, 1970 <am_hal_clkgen_sysclk_select+0x10>
    1966:	4a06      	ldr	r2, [pc, #24]	; (1980 <am_hal_clkgen_sysclk_select+0x20>)
    1968:	4806      	ldr	r0, [pc, #24]	; (1984 <am_hal_clkgen_sysclk_select+0x24>)
    196a:	2150      	movs	r1, #80	; 0x50
    196c:	f000 f834 	bl	19d8 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1970:	4b05      	ldr	r3, [pc, #20]	; (1988 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1972:	4906      	ldr	r1, [pc, #24]	; (198c <am_hal_clkgen_sysclk_select+0x2c>)
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1974:	2047      	movs	r0, #71	; 0x47
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1976:	2200      	movs	r2, #0
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1978:	6018      	str	r0, [r3, #0]

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    197a:	600c      	str	r4, [r1, #0]

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    197c:	601a      	str	r2, [r3, #0]
    197e:	bd10      	pop	{r4, pc}
    1980:	000023f0 	.word	0x000023f0
    1984:	00002428 	.word	0x00002428
    1988:	40004014 	.word	0x40004014
    198c:	40004018 	.word	0x40004018

00001990 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1992:	4905      	ldr	r1, [pc, #20]	; (19a8 <am_hal_clkgen_sysclk_get+0x18>)
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1994:	681a      	ldr	r2, [r3, #0]

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1996:	4805      	ldr	r0, [pc, #20]	; (19ac <am_hal_clkgen_sysclk_get+0x1c>)
    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;

    switch ( ui32ClockSetting )
    1998:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    199c:	bf08      	it	eq
    199e:	4608      	moveq	r0, r1
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	40004018 	.word	0x40004018
    19a8:	02dc6c00 	.word	0x02dc6c00
    19ac:	016e3600 	.word	0x016e3600

000019b0 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    19b0:	0783      	lsls	r3, r0, #30
    19b2:	d004      	beq.n	19be <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    19b4:	4a02      	ldr	r2, [pc, #8]	; (19c0 <am_hal_clkgen_osc_start+0x10>)
    19b6:	6813      	ldr	r3, [r2, #0]
    19b8:	ea23 0000 	bic.w	r0, r3, r0
    19bc:	6010      	str	r0, [r2, #0]
    19be:	4770      	bx	lr
    19c0:	4000400c 	.word	0x4000400c

000019c4 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    19c4:	0783      	lsls	r3, r0, #30
    19c6:	d003      	beq.n	19d0 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    19c8:	4a02      	ldr	r2, [pc, #8]	; (19d4 <am_hal_clkgen_osc_stop+0x10>)
    19ca:	6813      	ldr	r3, [r2, #0]
    19cc:	4318      	orrs	r0, r3
    19ce:	6010      	str	r0, [r2, #0]
    19d0:	4770      	bx	lr
    19d2:	bf00      	nop
    19d4:	4000400c 	.word	0x4000400c

000019d8 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    19d8:	e7fe      	b.n	19d8 <am_hal_debug_error>
    19da:	bf00      	nop

000019dc <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19dc:	4b01      	ldr	r3, [pc, #4]	; (19e4 <am_hal_flash_delay+0x8>)
    19de:	6b59      	ldr	r1, [r3, #52]	; 0x34
    19e0:	4708      	bx	r1
    19e2:	bf00      	nop
    19e4:	10001030 	.word	0x10001030

000019e8 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    19e8:	280f      	cmp	r0, #15
    19ea:	d80b      	bhi.n	1a04 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    19ec:	2805      	cmp	r0, #5
    19ee:	d013      	beq.n	1a18 <am_hal_interrupt_enable+0x30>
    19f0:	2806      	cmp	r0, #6
    19f2:	d017      	beq.n	1a24 <am_hal_interrupt_enable+0x3c>
    19f4:	2804      	cmp	r0, #4
    19f6:	d104      	bne.n	1a02 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    19f8:	4a0d      	ldr	r2, [pc, #52]	; (1a30 <am_hal_interrupt_enable+0x48>)
    19fa:	6813      	ldr	r3, [r2, #0]
    19fc:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1a00:	6010      	str	r0, [r2, #0]
    1a02:	4770      	bx	lr
    {
        //
        // If this ISR number corresponds to a "normal" peripheral interrupt,
        // enable it using the NVIC register.
        //
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1a04:	f1a0 0310 	sub.w	r3, r0, #16
    1a08:	f003 0c1f 	and.w	ip, r3, #31
    1a0c:	2001      	movs	r0, #1
    1a0e:	4909      	ldr	r1, [pc, #36]	; (1a34 <am_hal_interrupt_enable+0x4c>)
    1a10:	fa00 f20c 	lsl.w	r2, r0, ip
    1a14:	600a      	str	r2, [r1, #0]
    1a16:	4770      	bx	lr
        // appropriate enable register.
        //
        switch(ui32Interrupt)
        {
            case AM_HAL_INTERRUPT_BUSFAULT:
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1a18:	4805      	ldr	r0, [pc, #20]	; (1a30 <am_hal_interrupt_enable+0x48>)
    1a1a:	6801      	ldr	r1, [r0, #0]
    1a1c:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1a20:	6002      	str	r2, [r0, #0]
            break;
    1a22:	4770      	bx	lr

            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1a24:	4902      	ldr	r1, [pc, #8]	; (1a30 <am_hal_interrupt_enable+0x48>)
    1a26:	680a      	ldr	r2, [r1, #0]
    1a28:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1a2c:	600b      	str	r3, [r1, #0]
            break;
    1a2e:	4770      	bx	lr
    1a30:	e000ed24 	.word	0xe000ed24
    1a34:	e000e100 	.word	0xe000e100

00001a38 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1a38:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1a3c:	b662      	cpsie	i
    __asm("    bx lr");
    1a3e:	4770      	bx	lr

00001a40 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1a40:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1a44:	b672      	cpsid	i
    __asm("    bx lr");
    1a46:	4770      	bx	lr

00001a48 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1a48:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1a4c:	4770      	bx	lr
    1a4e:	bf00      	nop

00001a50 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1a50:	4b0d      	ldr	r3, [pc, #52]	; (1a88 <am_hal_itm_enable+0x38>)
    1a52:	6818      	ldr	r0, [r3, #0]
    1a54:	07c2      	lsls	r2, r0, #31
    1a56:	d416      	bmi.n	1a86 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1a58:	4a0c      	ldr	r2, [pc, #48]	; (1a8c <am_hal_itm_enable+0x3c>)
    1a5a:	6811      	ldr	r1, [r2, #0]
    1a5c:	f041 7380 	orr.w	r3, r1, #16777216	; 0x1000000
    1a60:	6013      	str	r3, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1a62:	6810      	ldr	r0, [r2, #0]
    1a64:	01c3      	lsls	r3, r0, #7
    1a66:	d5fc      	bpl.n	1a62 <am_hal_itm_enable+0x12>
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    1a68:	b430      	push	{r4, r5}
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a6a:	4809      	ldr	r0, [pc, #36]	; (1a90 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a6c:	4c09      	ldr	r4, [pc, #36]	; (1a94 <am_hal_itm_enable+0x44>)
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a6e:	4d0a      	ldr	r5, [pc, #40]	; (1a98 <am_hal_itm_enable+0x48>)
    1a70:	6005      	str	r5, [r0, #0]

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a72:	250f      	movs	r5, #15
    1a74:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a76:	bc30      	pop	{r4, r5}
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a78:	4908      	ldr	r1, [pc, #32]	; (1a9c <am_hal_itm_enable+0x4c>)

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a7a:	4b09      	ldr	r3, [pc, #36]	; (1aa0 <am_hal_itm_enable+0x50>)
    1a7c:	4a09      	ldr	r2, [pc, #36]	; (1aa4 <am_hal_itm_enable+0x54>)
    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a7e:	f04f 30ff 	mov.w	r0, #4294967295
    1a82:	6008      	str	r0, [r1, #0]

    //
    // Write to the ITM control and status register.
    //
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a84:	601a      	str	r2, [r3, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a86:	4770      	bx	lr
    1a88:	10001188 	.word	0x10001188
    1a8c:	e000edfc 	.word	0xe000edfc
    1a90:	e0000fb0 	.word	0xe0000fb0
    1a94:	e0000e40 	.word	0xe0000e40
    1a98:	c5acce55 	.word	0xc5acce55
    1a9c:	e0000e00 	.word	0xe0000e00
    1aa0:	e0000e80 	.word	0xe0000e80
    1aa4:	00150511 	.word	0x00150511

00001aa8 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1aa8:	4a03      	ldr	r2, [pc, #12]	; (1ab8 <am_hal_itm_not_busy+0x10>)
    1aaa:	6813      	ldr	r3, [r2, #0]
    1aac:	021b      	lsls	r3, r3, #8
    1aae:	d4fc      	bmi.n	1aaa <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ab0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1ab4:	f7ff bf92 	b.w	19dc <am_hal_flash_delay>
    1ab8:	e0000e80 	.word	0xe0000e80

00001abc <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1abc:	7803      	ldrb	r3, [r0, #0]
    1abe:	b1ab      	cbz	r3, 1aec <am_hal_itm_print+0x30>
    1ac0:	4602      	mov	r2, r0
    1ac2:	2300      	movs	r3, #0
    1ac4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1ac8:	3301      	adds	r3, #1
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1aca:	2900      	cmp	r1, #0
    1acc:	d1fa      	bne.n	1ac4 <am_hal_itm_print+0x8>
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1ace:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_print(char *pcString)
{
    1ad2:	b430      	push	{r4, r5}
    1ad4:	18c2      	adds	r2, r0, r3
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1ad6:	4665      	mov	r5, ip
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1ad8:	f810 4b01 	ldrb.w	r4, [r0], #1
    ui32StimAddr = (AM_REG_ITM_STIM0_O + (4 * ui32StimReg));

    //
    // Busy waiting until it is available (non-zero means ready)
    //
    while (!AM_REGVAL(ui32StimAddr));
    1adc:	f8dc 3000 	ldr.w	r3, [ip]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d0fb      	beq.n	1adc <am_hal_itm_print+0x20>
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1ae4:	4290      	cmp	r0, r2
    while (!AM_REGVAL(ui32StimAddr));

    //
    // Write the register.
    //
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1ae6:	702c      	strb	r4, [r5, #0]
    }

    //
    // If there is no longer a word left, empty out the remaining characters.
    //
    while (ui32Length)
    1ae8:	d1f6      	bne.n	1ad8 <am_hal_itm_print+0x1c>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1aea:	bc30      	pop	{r4, r5}
    1aec:	4770      	bx	lr
    1aee:	bf00      	nop

00001af0 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1af0:	4a0d      	ldr	r2, [pc, #52]	; (1b28 <am_hal_mcuctrl_fault_status+0x38>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1af2:	4b0e      	ldr	r3, [pc, #56]	; (1b2c <am_hal_mcuctrl_fault_status+0x3c>)
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1af4:	490e      	ldr	r1, [pc, #56]	; (1b30 <am_hal_mcuctrl_fault_status+0x40>)
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1af6:	681b      	ldr	r3, [r3, #0]
//! @return None
//
//*****************************************************************************
void
am_hal_mcuctrl_fault_status(am_hal_mcuctrl_fault_t *psFault)
{
    1af8:	b470      	push	{r4, r5, r6}
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1afa:	6814      	ldr	r4, [r2, #0]
    1afc:	60c4      	str	r4, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1afe:	6809      	ldr	r1, [r1, #0]
    1b00:	6845      	ldr	r5, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b02:	6944      	ldr	r4, [r0, #20]
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b04:	4329      	orrs	r1, r5

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b06:	3204      	adds	r2, #4
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b08:	6041      	str	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b0a:	6812      	ldr	r2, [r2, #0]

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b0c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b10:	4322      	orrs	r2, r4

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b12:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b14:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b18:	f3c3 0380 	ubfx	r3, r3, #2, #1
    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b1c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b1e:	7403      	strb	r3, [r0, #16]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b20:	6142      	str	r2, [r0, #20]
}
    1b22:	bc70      	pop	{r4, r5, r6}
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	400201c4 	.word	0x400201c4
    1b2c:	400201cc 	.word	0x400201cc
    1b30:	400201c0 	.word	0x400201c0

00001b34 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b34:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1b38:	b430      	push	{r4, r5}
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b3a:	d03a      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1b3c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1b40:	f000 809d 	beq.w	1c7e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1b44:	2801      	cmp	r0, #1
    1b46:	f000 809d 	beq.w	1c84 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1b4a:	2803      	cmp	r0, #3
    1b4c:	f000 80a6 	beq.w	1c9c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1b50:	2807      	cmp	r0, #7
    1b52:	f000 809c 	beq.w	1c8e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1b56:	280f      	cmp	r0, #15
    1b58:	f000 80a5 	beq.w	1ca6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1b5c:	281f      	cmp	r0, #31
    1b5e:	f000 80b1 	beq.w	1cc4 <am_hal_pwrctrl_memory_enable+0x190>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1b62:	283f      	cmp	r0, #63	; 0x3f
    1b64:	f000 80b5 	beq.w	1cd2 <am_hal_pwrctrl_memory_enable+0x19e>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1b68:	287f      	cmp	r0, #127	; 0x7f
    1b6a:	f000 80b9 	beq.w	1ce0 <am_hal_pwrctrl_memory_enable+0x1ac>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1b6e:	28ff      	cmp	r0, #255	; 0xff
    1b70:	f000 80a0 	beq.w	1cb4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1b74:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b78:	4298      	cmp	r0, r3
    1b7a:	f000 80b8 	beq.w	1cee <am_hal_pwrctrl_memory_enable+0x1ba>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1b7e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1b82:	4288      	cmp	r0, r1
    1b84:	f000 80b9 	beq.w	1cfa <am_hal_pwrctrl_memory_enable+0x1c6>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1b88:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1b8c:	4290      	cmp	r0, r2
    1b8e:	d00e      	beq.n	1bae <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1b90:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1b94:	f000 80b7 	beq.w	1d06 <am_hal_pwrctrl_memory_enable+0x1d2>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1b98:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1b9c:	42a0      	cmp	r0, r4
    1b9e:	f000 80b5 	beq.w	1d0c <am_hal_pwrctrl_memory_enable+0x1d8>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1ba2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1ba6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1baa:	4560      	cmp	r0, ip
    1bac:	d132      	bne.n	1c14 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1bae:	495c      	ldr	r1, [pc, #368]	; (1d20 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1bb0:	e066      	b.n	1c80 <am_hal_pwrctrl_memory_enable+0x14c>
    1bb2:	f46f 5580 	mvn.w	r5, #4096	; 0x1000
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1bb6:	2340      	movs	r3, #64	; 0x40

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1bb8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1bba:	4c5a      	ldr	r4, [pc, #360]	; (1d24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1bbc:	6822      	ldr	r2, [r4, #0]
    1bbe:	402a      	ands	r2, r5
    1bc0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1bc2:	4d58      	ldr	r5, [pc, #352]	; (1d24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1bc4:	682c      	ldr	r4, [r5, #0]
    1bc6:	4320      	orrs	r0, r4
    1bc8:	6028      	str	r0, [r5, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d029      	beq.n	1c22 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bce:	4a56      	ldr	r2, [pc, #344]	; (1d28 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1bd0:	6810      	ldr	r0, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bd2:	4203      	tst	r3, r0
    1bd4:	bf18      	it	ne
    1bd6:	20c6      	movne	r0, #198	; 0xc6
    1bd8:	d01f      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bda:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bdc:	422b      	tst	r3, r5
    1bde:	d01c      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1be0:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1be2:	4223      	tst	r3, r4
    1be4:	d019      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1be6:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1be8:	422b      	tst	r3, r5
    1bea:	d016      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bec:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bee:	4223      	tst	r3, r4
    1bf0:	d013      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bf2:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bf4:	422b      	tst	r3, r5
    1bf6:	d010      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bf8:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1bfa:	4223      	tst	r3, r4
    1bfc:	d00d      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bfe:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c00:	422b      	tst	r3, r5
    1c02:	d00a      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c04:	6814      	ldr	r4, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c06:	4223      	tst	r3, r4
    1c08:	d007      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c0a:	6815      	ldr	r5, [r2, #0]
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    {
        while ( --i32TOcnt              &&
    1c0c:	422b      	tst	r3, r5
    1c0e:	d004      	beq.n	1c1a <am_hal_pwrctrl_memory_enable+0xe6>
    1c10:	3809      	subs	r0, #9
    1c12:	d1e2      	bne.n	1bda <am_hal_pwrctrl_memory_enable+0xa6>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
        ui32PwrStatDisMask = 0;
    }
    else
    {
        return false;
    1c14:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1c16:	bc30      	pop	{r4, r5}
    1c18:	4770      	bx	lr
    {
        return false;
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    1c1a:	b911      	cbnz	r1, 1c22 <am_hal_pwrctrl_memory_enable+0xee>
    if ( i32TOcnt <= 0 )
    {
        return false;
    }

    return true;
    1c1c:	2001      	movs	r0, #1
}
    1c1e:	bc30      	pop	{r4, r5}
    1c20:	4770      	bx	lr

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c22:	4b41      	ldr	r3, [pc, #260]	; (1d28 <am_hal_pwrctrl_memory_enable+0x1f4>)
    1c24:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c26:	ea31 0402 	bics.w	r4, r1, r2
    1c2a:	bf18      	it	ne
    1c2c:	24c6      	movne	r4, #198	; 0xc6
    1c2e:	d0f5      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c30:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c32:	ea31 0000 	bics.w	r0, r1, r0
    1c36:	d0f1      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c38:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c3a:	ea31 0005 	bics.w	r0, r1, r5
    1c3e:	d0ed      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c40:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c42:	ea31 0002 	bics.w	r0, r1, r2
    1c46:	d0e9      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c48:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c4a:	ea31 0000 	bics.w	r0, r1, r0
    1c4e:	d0e5      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c50:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c52:	ea31 0005 	bics.w	r0, r1, r5
    1c56:	d0e1      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c58:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c5a:	ea31 0002 	bics.w	r0, r1, r2
    1c5e:	d0dd      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c60:	6818      	ldr	r0, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c62:	ea31 0000 	bics.w	r0, r1, r0
    1c66:	d0d9      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c68:	681d      	ldr	r5, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c6a:	ea31 0005 	bics.w	r0, r1, r5
    1c6e:	d0d5      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c70:	681a      	ldr	r2, [r3, #0]
    }

    i32TOcnt = 200;
    if ( ui32PwrStatEnMask )
    {
        while ( --i32TOcnt              &&
    1c72:	ea31 0002 	bics.w	r0, r1, r2
    1c76:	d0d1      	beq.n	1c1c <am_hal_pwrctrl_memory_enable+0xe8>
    1c78:	3c09      	subs	r4, #9
    1c7a:	d1d9      	bne.n	1c30 <am_hal_pwrctrl_memory_enable+0xfc>
    1c7c:	e7ca      	b.n	1c14 <am_hal_pwrctrl_memory_enable+0xe0>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN |
                         AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1c7e:	2160      	movs	r1, #96	; 0x60
//! @return None.
//
//*****************************************************************************
bool
am_hal_pwrctrl_memory_enable(uint32_t ui32MemEn)
{
    1c80:	2300      	movs	r3, #0
    1c82:	e79e      	b.n	1bc2 <am_hal_pwrctrl_memory_enable+0x8e>
    1c84:	4d29      	ldr	r5, [pc, #164]	; (1d2c <am_hal_pwrctrl_memory_enable+0x1f8>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c86:	4b2a      	ldr	r3, [pc, #168]	; (1d30 <am_hal_pwrctrl_memory_enable+0x1fc>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1c88:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c8c:	e795      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1c8e:	f46f 65ff 	mvn.w	r5, #2040	; 0x7f8
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c92:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
                         AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~(AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM0     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM1     |
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1c96:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1c9a:	e78e      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1c9c:	4d25      	ldr	r5, [pc, #148]	; (1d34 <am_hal_pwrctrl_memory_enable+0x200>)
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c9e:	4b26      	ldr	r3, [pc, #152]	; (1d38 <am_hal_pwrctrl_memory_enable+0x204>)
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1ca0:	f44f 7140 	mov.w	r1, #768	; 0x300
    1ca4:	e789      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1ca6:	f46f 65fe 	mvn.w	r5, #2032	; 0x7f0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1caa:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1cae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1cb2:	e782      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1cb4:	f46f 65e0 	mvn.w	r5, #1792	; 0x700
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cb8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1cbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM160K;
    1cc0:	20ff      	movs	r0, #255	; 0xff
    1cc2:	e77a      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1cc4:	f46f 65fc 	mvn.w	r5, #2016	; 0x7e0
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cc8:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1ccc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1cd0:	e773      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1cd2:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cd6:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1cda:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1cde:	e76c      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1ce0:	f46f 65f0 	mvn.w	r5, #1920	; 0x780
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ce4:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1ce8:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1cec:	e765      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    1cee:	f46f 65c0 	mvn.w	r5, #1536	; 0x600
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cf2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1cf6:	4911      	ldr	r1, [pc, #68]	; (1d3c <am_hal_pwrctrl_memory_enable+0x208>)
    1cf8:	e75f      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_SRAMEN_ALL    &
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1cfa:	4911      	ldr	r1, [pc, #68]	; (1d40 <am_hal_pwrctrl_memory_enable+0x20c>)
    1cfc:	f46f 6580 	mvn.w	r5, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1d04:	e759      	b.n	1bba <am_hal_pwrctrl_memory_enable+0x86>
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    {
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN    |
                         AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d06:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1d0a:	e7b9      	b.n	1c80 <am_hal_pwrctrl_memory_enable+0x14c>
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d0c:	4805      	ldr	r0, [pc, #20]	; (1d24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d0e:	6803      	ldr	r3, [r0, #0]
    1d10:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1d14:	6001      	str	r1, [r0, #0]
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d16:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    {
        ui32MemEnMask = 0;
        ui32MemDisMask  = AM_REG_PWRCTRL_MEMEN_CACHEB0_EN   |
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
    1d1a:	2100      	movs	r1, #0
    1d1c:	e757      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x9a>
    1d1e:	bf00      	nop
    1d20:	0007ff00 	.word	0x0007ff00
    1d24:	40021010 	.word	0x40021010
    1d28:	40021014 	.word	0x40021014
    1d2c:	fffff801 	.word	0xfffff801
    1d30:	0007fe00 	.word	0x0007fe00
    1d34:	fffff803 	.word	0xfffff803
    1d38:	0007fc00 	.word	0x0007fc00
    1d3c:	0001ff00 	.word	0x0001ff00
    1d40:	0003ff00 	.word	0x0003ff00

00001d44 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d44:	4b0f      	ldr	r3, [pc, #60]	; (1d84 <am_hal_pwrctrl_bucks_init+0x40>)
    1d46:	681a      	ldr	r2, [r3, #0]
    1d48:	0792      	lsls	r2, r2, #30
    1d4a:	d502      	bpl.n	1d52 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d4c:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d4e:	07c3      	lsls	r3, r0, #31
    1d50:	d40e      	bmi.n	1d70 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d52:	4b0d      	ldr	r3, [pc, #52]	; (1d88 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d54:	4a0b      	ldr	r2, [pc, #44]	; (1d84 <am_hal_pwrctrl_bucks_init+0x40>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d56:	6819      	ldr	r1, [r3, #0]
    1d58:	f041 0002 	orr.w	r0, r1, #2
    1d5c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d5e:	6819      	ldr	r1, [r3, #0]
    1d60:	f041 0001 	orr.w	r0, r1, #1
    1d64:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d66:	6813      	ldr	r3, [r2, #0]
    1d68:	f003 0103 	and.w	r1, r3, #3
    1d6c:	2903      	cmp	r1, #3
    1d6e:	d1fa      	bne.n	1d66 <am_hal_pwrctrl_bucks_init+0x22>
void
am_hal_pwrctrl_bucks_init(void)
{
    am_hal_pwrctrl_bucks_enable();

    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1d70:	4a04      	ldr	r2, [pc, #16]	; (1d84 <am_hal_pwrctrl_bucks_init+0x40>)
    1d72:	6810      	ldr	r0, [r2, #0]
    1d74:	f000 0303 	and.w	r3, r0, #3
    1d78:	2b03      	cmp	r3, #3
    1d7a:	d1fa      	bne.n	1d72 <am_hal_pwrctrl_bucks_init+0x2e>
                AM_REG_PWRCTRL_POWERSTATUS_MEMBUCKON_M ) );

    //
    // Additional delay to make sure BUCKs are initialized.
    //
    am_hal_flash_delay(200 / 3);
    1d7c:	2042      	movs	r0, #66	; 0x42
    1d7e:	f7ff be2d 	b.w	19dc <am_hal_flash_delay>
    1d82:	bf00      	nop
    1d84:	40021004 	.word	0x40021004
    1d88:	40021000 	.word	0x40021000

00001d8c <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d8c:	4b0b      	ldr	r3, [pc, #44]	; (1dbc <am_hal_pwrctrl_bucks_enable+0x30>)
    1d8e:	681a      	ldr	r2, [r3, #0]
    1d90:	0792      	lsls	r2, r2, #30
    1d92:	d502      	bpl.n	1d9a <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d94:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d96:	07c3      	lsls	r3, r0, #31
    1d98:	d40e      	bmi.n	1db8 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d9a:	4b09      	ldr	r3, [pc, #36]	; (1dc0 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d9c:	4a07      	ldr	r2, [pc, #28]	; (1dbc <am_hal_pwrctrl_bucks_enable+0x30>)
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	f041 0002 	orr.w	r0, r1, #2
    1da4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1da6:	6819      	ldr	r1, [r3, #0]
    1da8:	f041 0001 	orr.w	r0, r1, #1
    1dac:	6018      	str	r0, [r3, #0]

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1dae:	6813      	ldr	r3, [r2, #0]
    1db0:	f003 0103 	and.w	r1, r3, #3
    1db4:	2903      	cmp	r1, #3
    1db6:	d1fa      	bne.n	1dae <am_hal_pwrctrl_bucks_enable+0x22>
    1db8:	4770      	bx	lr
    1dba:	bf00      	nop
    1dbc:	40021004 	.word	0x40021004
    1dc0:	40021000 	.word	0x40021000

00001dc4 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1dc4:	4b12      	ldr	r3, [pc, #72]	; (1e10 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1dc6:	681a      	ldr	r2, [r3, #0]
    1dc8:	0792      	lsls	r2, r2, #30
    1dca:	d402      	bmi.n	1dd2 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1dcc:	6818      	ldr	r0, [r3, #0]
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1dce:	07c3      	lsls	r3, r0, #31
    1dd0:	d51c      	bpl.n	1e0c <am_hal_pwrctrl_bucks_disable+0x48>
//
//*****************************************************************************
static bool
isRev_ADC(void)
{
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1dd2:	4910      	ldr	r1, [pc, #64]	; (1e14 <am_hal_pwrctrl_bucks_disable+0x50>)
    1dd4:	680b      	ldr	r3, [r1, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1dd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    1dda:	2a20      	cmp	r2, #32
    1ddc:	d00b      	beq.n	1df6 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1dde:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <am_hal_pwrctrl_bucks_disable+0x54>)
    1de0:	681a      	ldr	r2, [r3, #0]
    1de2:	f022 0002 	bic.w	r0, r2, #2
    1de6:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1de8:	6819      	ldr	r1, [r3, #0]
    1dea:	f021 0201 	bic.w	r2, r1, #1
    1dee:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1df0:	200a      	movs	r0, #10
    1df2:	f7ff bdf3 	b.w	19dc <am_hal_flash_delay>

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    1df6:	4809      	ldr	r0, [pc, #36]	; (1e1c <am_hal_pwrctrl_bucks_disable+0x58>)
    1df8:	6801      	ldr	r1, [r0, #0]
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1dfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1dfe:	d1ee      	bne.n	1dde <am_hal_pwrctrl_bucks_disable+0x1a>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_ADC_EN) )
    {
            //
            // Set SUPPLYSRC to handle this case
            //
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e00:	4805      	ldr	r0, [pc, #20]	; (1e18 <am_hal_pwrctrl_bucks_disable+0x54>)
    1e02:	6803      	ldr	r3, [r0, #0]
    1e04:	f003 0105 	and.w	r1, r3, #5
    1e08:	6001      	str	r1, [r0, #0]
    1e0a:	e7f1      	b.n	1df0 <am_hal_pwrctrl_bucks_disable+0x2c>
    1e0c:	4770      	bx	lr
    1e0e:	bf00      	nop
    1e10:	40021004 	.word	0x40021004
    1e14:	4002000c 	.word	0x4002000c
    1e18:	40021000 	.word	0x40021000
    1e1c:	40021008 	.word	0x40021008

00001e20 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e20:	4905      	ldr	r1, [pc, #20]	; (1e38 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e22:	4a06      	ldr	r2, [pc, #24]	; (1e3c <am_hal_pwrctrl_low_power_init+0x1c>)
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e24:	680b      	ldr	r3, [r1, #0]
    1e26:	f043 0006 	orr.w	r0, r3, #6
    1e2a:	6008      	str	r0, [r1, #0]
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e2c:	6811      	ldr	r1, [r2, #0]
    1e2e:	f021 0304 	bic.w	r3, r1, #4
    1e32:	6013      	str	r3, [r2, #0]
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop
    1e38:	40021018 	.word	0x40021018
    1e3c:	40021000 	.word	0x40021000

00001e40 <am_hal_reset_por>:
void am_hal_reset_por(void)
{
    //
    // Write the POR key to the software POR register.
    //
    AM_REG(RSTGEN, SWPOR) =
    1e40:	4b01      	ldr	r3, [pc, #4]	; (1e48 <am_hal_reset_por+0x8>)
    1e42:	22d4      	movs	r2, #212	; 0xd4
    1e44:	601a      	str	r2, [r3, #0]
    1e46:	4770      	bx	lr
    1e48:	40000008 	.word	0x40000008

00001e4c <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    1e4c:	4b01      	ldr	r3, [pc, #4]	; (1e54 <am_hal_reset_poi+0x8>)
    1e4e:	221b      	movs	r2, #27
    1e50:	601a      	str	r2, [r3, #0]
    1e52:	4770      	bx	lr
    1e54:	40000004 	.word	0x40000004

00001e58 <am_hal_reset_status_get>:
uint32_t am_hal_reset_status_get(void)
{
    //
    // Retrieve the reset generator status bits
    //
    return AM_REG(RSTGEN, STAT);
    1e58:	4b01      	ldr	r3, [pc, #4]	; (1e60 <am_hal_reset_status_get+0x8>)
    1e5a:	6818      	ldr	r0, [r3, #0]
}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop
    1e60:	4000000c 	.word	0x4000000c

00001e64 <am_hal_reset_status_clear>:
//! @return None.
//
//*****************************************************************************
void am_hal_reset_status_clear(void)
{
    AM_REG(RSTGEN, CLRSTAT) = AM_REG_RSTGEN_CLRSTAT_CLRSTAT(1);
    1e64:	4b01      	ldr	r3, [pc, #4]	; (1e6c <am_hal_reset_status_clear+0x8>)
    1e66:	2201      	movs	r2, #1
    1e68:	601a      	str	r2, [r3, #0]
    1e6a:	4770      	bx	lr
    1e6c:	40000010 	.word	0x40000010

00001e70 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e70:	4a05      	ldr	r2, [pc, #20]	; (1e88 <am_hal_rtc_osc_select+0x18>)
    1e72:	6813      	ldr	r3, [r2, #0]
{
    //
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    1e74:	b918      	cbnz	r0, 1e7e <am_hal_rtc_osc_select+0xe>
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e76:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1e7a:	6010      	str	r0, [r2, #0]
    1e7c:	4770      	bx	lr
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e7e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1e82:	6011      	str	r1, [r2, #0]
    1e84:	4770      	bx	lr
    1e86:	bf00      	nop
    1e88:	4000400c 	.word	0x4000400c

00001e8c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1e8c:	4a02      	ldr	r2, [pc, #8]	; (1e98 <am_hal_rtc_osc_disable+0xc>)
    1e8e:	6813      	ldr	r3, [r2, #0]
    1e90:	f043 0010 	orr.w	r0, r3, #16
    1e94:	6010      	str	r0, [r2, #0]
    1e96:	4770      	bx	lr
    1e98:	40004050 	.word	0x40004050

00001e9c <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	b083      	sub	sp, #12
    1ea0:	4605      	mov	r5, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1ea2:	f7ff fdcd 	bl	1a40 <am_hal_interrupt_master_disable>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ea6:	4a41      	ldr	r2, [pc, #260]	; (1fac <am_hal_sysctrl_sleep+0x110>)
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1ea8:	4604      	mov	r4, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1eaa:	b11d      	cbz	r5, 1eb4 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1eac:	4b40      	ldr	r3, [pc, #256]	; (1fb0 <am_hal_sysctrl_sleep+0x114>)
    1eae:	6818      	ldr	r0, [r3, #0]

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1eb0:	07c3      	lsls	r3, r0, #31
    1eb2:	d509      	bpl.n	1ec8 <am_hal_sysctrl_sleep+0x2c>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1eb4:	6811      	ldr	r1, [r2, #0]
    1eb6:	f021 0604 	bic.w	r6, r1, #4
    1eba:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1ebc:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1ebe:	4620      	mov	r0, r4
    1ec0:	f7ff fdc2 	bl	1a48 <am_hal_interrupt_master_set>
}
    1ec4:	b003      	add	sp, #12
    1ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ec8:	6813      	ldr	r3, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1eca:	493a      	ldr	r1, [pc, #232]	; (1fb4 <am_hal_sysctrl_sleep+0x118>)
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1ecc:	4f3a      	ldr	r7, [pc, #232]	; (1fb8 <am_hal_sysctrl_sleep+0x11c>)
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1ece:	4d3b      	ldr	r5, [pc, #236]	; (1fbc <am_hal_sysctrl_sleep+0x120>)

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1ed0:	483b      	ldr	r0, [pc, #236]	; (1fc0 <am_hal_sysctrl_sleep+0x124>)
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ed2:	f043 0604 	orr.w	r6, r3, #4
    1ed6:	6016      	str	r6, [r2, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ed8:	6809      	ldr	r1, [r1, #0]
                   CHKBUCKZX_REV : 0x0;

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1eda:	683b      	ldr	r3, [r7, #0]
                    CHKBUCKZX_TIMER : 0x0;

    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1edc:	682a      	ldr	r2, [r5, #0]

    //
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1ede:	6800      	ldr	r0, [r0, #0]
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1ee0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1ee4:	2920      	cmp	r1, #32

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1ee6:	f103 36ff 	add.w	r6, r3, #4294967295
    uint32_t ui32SupplySrc;

    //
    // Is this chip rev appropriate to do the workaround?
    //
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1eea:	bf14      	ite	ne
    1eec:	2500      	movne	r5, #0
    1eee:	2502      	moveq	r5, #2

    //
    // Has a timer been configured to handle the workaround?
    //
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
                    CHKBUCKZX_TIMER : 0x0;
    1ef0:	2e03      	cmp	r6, #3
    1ef2:	bf8c      	ite	hi
    1ef4:	2100      	movhi	r1, #0
    1ef6:	2104      	movls	r1, #4
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1ef8:	f012 0303 	ands.w	r3, r2, #3
    1efc:	bf18      	it	ne
    1efe:	2301      	movne	r3, #1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f00:	f240 56ff 	movw	r6, #1535	; 0x5ff
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1f04:	432b      	orrs	r3, r5
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f06:	4006      	ands	r6, r0
    //
    // Are either or both of the bucks actually enabled?
    //
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);

    g_buckZX_chk |= (ui32SupplySrc &
    1f08:	ea43 0501 	orr.w	r5, r3, r1
    // Finally, if any peripheral is already powered up, we don't need to do the
    //  ZX workaround because in this case the bucks remain in active mode.
    //
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);

    g_buckZX_chk |= ( ui32SupplySrc &
    1f0c:	b91e      	cbnz	r6, 1f16 <am_hal_sysctrl_sleep+0x7a>
    1f0e:	f045 0508 	orr.w	r5, r5, #8
        //
        // Check if special buck handling is needed
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
    1f12:	2d0f      	cmp	r5, #15
    1f14:	d00a      	beq.n	1f2c <am_hal_sysctrl_sleep+0x90>
        }

        //
        // Execute the sleep instruction.
        //
        AM_ASM_WFI;
    1f16:	bf30      	wfi

        //
        // Return from sleep
        //
        if ( bBuckZX_chk )
    1f18:	2d0f      	cmp	r5, #15
    1f1a:	d01a      	beq.n	1f52 <am_hal_sysctrl_sleep+0xb6>
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1f1c:	4f29      	ldr	r7, [pc, #164]	; (1fc4 <am_hal_sysctrl_sleep+0x128>)
    1f1e:	2101      	movs	r1, #1
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1f20:	4620      	mov	r0, r4
        else
        {
            //
            // Since we're not doing anything, we're done, so set the done flag.
            //
            g_bBuckRestoreComplete = true;
    1f22:	7039      	strb	r1, [r7, #0]
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1f24:	f7ff fd90 	bl	1a48 <am_hal_interrupt_master_set>
}
    1f28:	b003      	add	sp, #12
    1f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        //
        bBuckZX_chk = buckZX_chk();

        if ( bBuckZX_chk )
        {
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f2c:	683a      	ldr	r2, [r7, #0]
    1f2e:	1e50      	subs	r0, r2, #1
    1f30:	9000      	str	r0, [sp, #0]
            //
            // Before going to sleep, clear the buck timers.
            // This will also handle the case where we're going back to
            // sleep before the buck sequence has even completed.
            //
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1f32:	9800      	ldr	r0, [sp, #0]
    1f34:	f04f 31ff 	mov.w	r1, #4294967295
    1f38:	f000 f91e 	bl	2178 <am_hal_ctimer_clear>

            //
            // Set CMPR0 of both timerA and timerB to the period value
            //
            #define     TIMER_PERIOD_BUCKS  1
            am_hal_ctimer_period_set(ui32BuckTimer,
    1f3c:	9800      	ldr	r0, [sp, #0]
    1f3e:	4633      	mov	r3, r6
    1f40:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1f44:	f04f 31ff 	mov.w	r1, #4294967295
    1f48:	f000 f92a 	bl	21a0 <am_hal_ctimer_period_set>
                                     0);

            //
            // Disable bucks before going to sleep.
            //
            am_hal_pwrctrl_bucks_disable();
    1f4c:	f7ff ff3a 	bl	1dc4 <am_hal_pwrctrl_bucks_disable>
    1f50:	e7e1      	b.n	1f16 <am_hal_sysctrl_sleep+0x7a>
    bool bDoRestore = false;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f52:	f3ef 8310 	mrs	r3, PRIMASK
    1f56:	9301      	str	r3, [sp, #4]
    1f58:	b672      	cpsid	i

    //
    // Get the current zero cross trim values.
    //
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1f5a:	4e1b      	ldr	r6, [pc, #108]	; (1fc8 <am_hal_sysctrl_sleep+0x12c>)
    1f5c:	6832      	ldr	r2, [r6, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1f5e:	6832      	ldr	r2, [r6, #0]
    //
    if ( bDoRestore )
    {
        if ( ui32Flags & SETBUCKZX_RESTORE_CORE_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1f60:	6835      	ldr	r5, [r6, #0]
    1f62:	f025 0c3c 	bic.w	ip, r5, #60	; 0x3c
    1f66:	f04c 021c 	orr.w	r2, ip, #28
    1f6a:	6032      	str	r2, [r6, #0]
        }

        if ( ui32Flags & SETBUCKZX_RESTORE_MEM_ONLY )
        {
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1f6c:	6830      	ldr	r0, [r6, #0]
    1f6e:	f420 31f0 	bic.w	r1, r0, #122880	; 0x1e000
    1f72:	f441 4360 	orr.w	r3, r1, #57344	; 0xe000
    1f76:	6033      	str	r3, [r6, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f78:	9e01      	ldr	r6, [sp, #4]
    1f7a:	f386 8810 	msr	PRIMASK, r6
                      SETBUCKZX_RESTORE_BOTH );

            //
            // Delay for 2us before enabling bucks.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1f7e:	201c      	movs	r0, #28
    1f80:	f7ff fd2c 	bl	19dc <am_hal_flash_delay>

            //
            // Turn on the bucks
            //
            am_hal_pwrctrl_bucks_enable();
    1f84:	f7ff ff02 	bl	1d8c <am_hal_pwrctrl_bucks_enable>

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f88:	683f      	ldr	r7, [r7, #0]
            g_bBuckRestoreComplete = false;

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1f8a:	4910      	ldr	r1, [pc, #64]	; (1fcc <am_hal_sysctrl_sleep+0x130>)
            ui32BuckTimer = g_ui32BuckTimer - 1;

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1f8c:	4d0d      	ldr	r5, [pc, #52]	; (1fc4 <am_hal_sysctrl_sleep+0x128>)
    1f8e:	2200      	movs	r2, #0
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f90:	1e7b      	subs	r3, r7, #1
            g_ui32BuckInputs = 0;

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1f92:	204c      	movs	r0, #76	; 0x4c
            am_hal_pwrctrl_bucks_enable();

            //
            // Get the actual timer number
            //
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f94:	9300      	str	r3, [sp, #0]

            //
            // Initialize the complete flag
            //
            g_bBuckRestoreComplete = false;
    1f96:	702a      	strb	r2, [r5, #0]

            //
            // Initialize the input flags
            //
            g_ui32BuckInputs = 0;
    1f98:	600a      	str	r2, [r1, #0]

            //
            // Delay for 5us to make sure we're receiving clean buck signals.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1f9a:	f7ff fd1f 	bl	19dc <am_hal_flash_delay>

            //
            // Start timers (set the enable bit, clear the clear bit)
            //
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1f9e:	9800      	ldr	r0, [sp, #0]
    1fa0:	f04f 31ff 	mov.w	r1, #4294967295
    1fa4:	f000 f8ce 	bl	2144 <am_hal_ctimer_start>
    1fa8:	e789      	b.n	1ebe <am_hal_sysctrl_sleep+0x22>
    1faa:	bf00      	nop
    1fac:	e000ed10 	.word	0xe000ed10
    1fb0:	40020250 	.word	0x40020250
    1fb4:	4002000c 	.word	0x4002000c
    1fb8:	10001194 	.word	0x10001194
    1fbc:	40021000 	.word	0x40021000
    1fc0:	40021008 	.word	0x40021008
    1fc4:	1000118c 	.word	0x1000118c
    1fc8:	40020068 	.word	0x40020068
    1fcc:	10001190 	.word	0x10001190

00001fd0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1fd0:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1fd2:	4a22      	ldr	r2, [pc, #136]	; (205c <am_hal_tpiu_enable+0x8c>)
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    uint32_t ui32HFRC, ui32SWOscaler, ui32ITMbitrate;

    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1fd4:	6803      	ldr	r3, [r0, #0]

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1fd6:	2100      	movs	r1, #0
    1fd8:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1fda:	b333      	cbz	r3, 202a <am_hal_tpiu_enable+0x5a>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1fdc:	4d20      	ldr	r5, [pc, #128]	; (2060 <am_hal_tpiu_enable+0x90>)

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1fde:	4921      	ldr	r1, [pc, #132]	; (2064 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1fe0:	4a21      	ldr	r2, [pc, #132]	; (2068 <am_hal_tpiu_enable+0x98>)
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1fe2:	2401      	movs	r4, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1fe4:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
    if ( ui32ITMbitrate )
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1fe8:	602c      	str	r4, [r5, #0]
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1fea:	458c      	cmp	ip, r1
    1fec:	bf94      	ite	ls
    1fee:	461d      	movls	r5, r3
    1ff0:	4615      	movhi	r5, r2
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1ff2:	f7ff fccd 	bl	1990 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1ff6:	1c43      	adds	r3, r0, #1
    1ff8:	d02e      	beq.n	2058 <am_hal_tpiu_enable+0x88>
    1ffa:	08c3      	lsrs	r3, r0, #3
    1ffc:	fbb3 fef5 	udiv	lr, r3, r5
    2000:	f10e 31ff 	add.w	r1, lr, #4294967295
    2004:	b288      	uxth	r0, r1
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2006:	4a19      	ldr	r2, [pc, #100]	; (206c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2008:	4c19      	ldr	r4, [pc, #100]	; (2070 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    200a:	4b1a      	ldr	r3, [pc, #104]	; (2074 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    200c:	491a      	ldr	r1, [pc, #104]	; (2078 <am_hal_tpiu_enable+0xa8>)
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    200e:	6010      	str	r0, [r2, #0]

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2010:	2502      	movs	r5, #2

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2012:	2000      	movs	r0, #0

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2014:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2018:	6025      	str	r5, [r4, #0]

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    201a:	6008      	str	r0, [r1, #0]

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    201c:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    201e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2026:	f7ff bcd9 	b.w	19dc <am_hal_flash_delay>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    202a:	4c10      	ldr	r4, [pc, #64]	; (206c <am_hal_tpiu_enable+0x9c>)
    202c:	6905      	ldr	r5, [r0, #16]
    202e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2030:	6882      	ldr	r2, [r0, #8]
    2032:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2036:	68c3      	ldr	r3, [r0, #12]
    2038:	4c09      	ldr	r4, [pc, #36]	; (2060 <am_hal_tpiu_enable+0x90>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    203a:	490e      	ldr	r1, [pc, #56]	; (2074 <am_hal_tpiu_enable+0xa4>)
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    203c:	1e5d      	subs	r5, r3, #1
    203e:	2201      	movs	r2, #1
    2040:	40aa      	lsls	r2, r5
    2042:	6022      	str	r2, [r4, #0]

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2044:	680b      	ldr	r3, [r1, #0]
    2046:	6840      	ldr	r0, [r0, #4]
    2048:	4318      	orrs	r0, r3
    204a:	6008      	str	r0, [r1, #0]

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
}
    204c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2050:	f44f 7047 	mov.w	r0, #796	; 0x31c
    2054:	f7ff bcc2 	b.w	19dc <am_hal_flash_delay>
    2058:	2005      	movs	r0, #5
    205a:	e7d4      	b.n	2006 <am_hal_tpiu_enable+0x36>
    205c:	e0040304 	.word	0xe0040304
    2060:	e0040004 	.word	0xe0040004
    2064:	001da380 	.word	0x001da380
    2068:	000f4240 	.word	0x000f4240
    206c:	e0040010 	.word	0xe0040010
    2070:	e00400f0 	.word	0xe00400f0
    2074:	40020250 	.word	0x40020250
    2078:	e0040f00 	.word	0xe0040f00

0000207c <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    207c:	4b01      	ldr	r3, [pc, #4]	; (2084 <am_hal_tpiu_disable+0x8>)
    207e:	2200      	movs	r2, #0
    2080:	601a      	str	r2, [r3, #0]
    2082:	4770      	bx	lr
    2084:	40020250 	.word	0x40020250

00002088 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2088:	4b01      	ldr	r3, [pc, #4]	; (2090 <am_hal_vcomp_disable+0x8>)
    208a:	2237      	movs	r2, #55	; 0x37
    208c:	601a      	str	r2, [r3, #0]
    208e:	4770      	bx	lr
    2090:	4000c008 	.word	0x4000c008

00002094 <am_hal_wdt_init>:
    // Write the interrupt and reset count values to a temporary variable.
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    2094:	8883      	ldrh	r3, [r0, #4]
    2096:	88c2      	ldrh	r2, [r0, #6]
void
am_hal_wdt_init(const am_hal_wdt_config_t *psConfig)
{
    uint32_t ui32ConfigVal;
    uint16_t ui16IntCount, ui16ResetCount;
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    2098:	6801      	ldr	r1, [r0, #0]
//! @return None.
//
//*****************************************************************************
void
am_hal_wdt_init(const am_hal_wdt_config_t *psConfig)
{
    209a:	b410      	push	{r4}
    // Write the interrupt and reset count values to a temporary variable.
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    209c:	0212      	lsls	r2, r2, #8
    209e:	041c      	lsls	r4, r3, #16

    //
    // Write the interrupt and reset count values to a temporary variable.
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    20a0:	f421 0c7f 	bic.w	ip, r1, #16711680	; 0xff0000
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    20a4:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
    20a8:	b292      	uxth	r2, r2

    //
    // Write the interrupt and reset count values to a temporary variable.
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    20aa:	f42c 447f 	bic.w	r4, ip, #65280	; 0xff00
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    20ae:	4313      	orrs	r3, r2
    20b0:	4323      	orrs	r3, r4
    if ( bInterruptEnabled )
    {
        //
        // Enable the watchdog interrupt if the configuration calls for them.
        //
        AM_REGn(WDT, 0, INTEN) |= AM_REG_WDT_INTEN_WDT_M;
    20b2:	4c13      	ldr	r4, [pc, #76]	; (2100 <am_hal_wdt_init+0x6c>)
    //
    // If interrupts should be enabled, set the appropriate bit in the
    // temporary variable. Also, enable the interrupt in INTEN register in the
    // watchdog module.
    //
    if ( bInterruptEnabled )
    20b4:	f011 0f02 	tst.w	r1, #2
void
am_hal_wdt_init(const am_hal_wdt_config_t *psConfig)
{
    uint32_t ui32ConfigVal;
    uint16_t ui16IntCount, ui16ResetCount;
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    20b8:	f001 0204 	and.w	r2, r1, #4
    if ( bInterruptEnabled )
    {
        //
        // Enable the watchdog interrupt if the configuration calls for them.
        //
        AM_REGn(WDT, 0, INTEN) |= AM_REG_WDT_INTEN_WDT_M;
    20bc:	6821      	ldr	r1, [r4, #0]
    20be:	bf14      	ite	ne
    20c0:	f041 0101 	orrne.w	r1, r1, #1
    {
        //
        // Disable the watchdog interrupt if the configuration doesn't call for
        // watchdog interrupts.
        //
        AM_REGn(WDT, 0, INTEN) &= ~AM_REG_WDT_INTEN_WDT_M;
    20c4:	f021 0101 	biceq.w	r1, r1, #1
    20c8:	6021      	str	r1, [r4, #0]
    if ( bResetEnabled )
    {
        //
        // Also enable watchdog resets in the reset module.
        //
        AM_REG(RSTGEN, CFG) |= AM_REG_RSTGEN_CFG_WDREN_M;
    20ca:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000

    //
    // If resets should be enabled, set the appropriate bit in the temporary
    // variable.
    //
    if ( bResetEnabled )
    20ce:	b182      	cbz	r2, 20f2 <am_hal_wdt_init+0x5e>
    {
        //
        // Also enable watchdog resets in the reset module.
        //
        AM_REG(RSTGEN, CFG) |= AM_REG_RSTGEN_CFG_WDREN_M;
    20d0:	f8dc 1000 	ldr.w	r1, [ip]
    20d4:	f041 0202 	orr.w	r2, r1, #2
    20d8:	f8cc 2000 	str.w	r2, [ip]

    //
    // Check for a user specified clock select. If none specified then
    // set 128Hz.
    //
    if ( !(psConfig->ui32Config & AM_REG_WDT_CFG_CLKSEL_M) )
    20dc:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Write the saved value to the watchdog configuration register.
    //
    AM_REGn(WDT, 0, CFG) = ui32ConfigVal;
    20de:	4c09      	ldr	r4, [pc, #36]	; (2104 <am_hal_wdt_init+0x70>)

    //
    // Check for a user specified clock select. If none specified then
    // set 128Hz.
    //
    if ( !(psConfig->ui32Config & AM_REG_WDT_CFG_CLKSEL_M) )
    20e0:	f010 6fe0 	tst.w	r0, #117440512	; 0x7000000
    {
        ui32ConfigVal |= AM_REG_WDT_CFG_CLKSEL_128HZ;
    20e4:	bf08      	it	eq
    20e6:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
    }

    //
    // Write the saved value to the watchdog configuration register.
    //
    AM_REGn(WDT, 0, CFG) = ui32ConfigVal;
    20ea:	6023      	str	r3, [r4, #0]
}
    20ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    20f0:	4770      	bx	lr
    else
    {
        //
        // Disable watchdog resets in the reset module.
        //
        AM_REG(RSTGEN, CFG) &= ~AM_REG_RSTGEN_CFG_WDREN_M;
    20f2:	f8dc 2000 	ldr.w	r2, [ip]
    20f6:	f022 0402 	bic.w	r4, r2, #2
    20fa:	f8cc 4000 	str.w	r4, [ip]
    20fe:	e7ed      	b.n	20dc <am_hal_wdt_init+0x48>
    2100:	40024200 	.word	0x40024200
    2104:	40024000 	.word	0x40024000

00002108 <am_hal_wdt_start>:
{
    //
    // Make sure the watchdog timer is in the "reset" state, and then set the
    // enable bit to start counting.
    //
    AM_REGn(WDT, 0, CFG) |= AM_REG_WDT_CFG_WDTEN_M;
    2108:	4905      	ldr	r1, [pc, #20]	; (2120 <am_hal_wdt_start+0x18>)
    AM_REGn(WDT, 0, RSTRT) |= AM_REG_WDT_RSTRT_RSTRT_KEYVALUE;
    210a:	4a06      	ldr	r2, [pc, #24]	; (2124 <am_hal_wdt_start+0x1c>)
{
    //
    // Make sure the watchdog timer is in the "reset" state, and then set the
    // enable bit to start counting.
    //
    AM_REGn(WDT, 0, CFG) |= AM_REG_WDT_CFG_WDTEN_M;
    210c:	680b      	ldr	r3, [r1, #0]
    210e:	f043 0001 	orr.w	r0, r3, #1
    2112:	6008      	str	r0, [r1, #0]
    AM_REGn(WDT, 0, RSTRT) |= AM_REG_WDT_RSTRT_RSTRT_KEYVALUE;
    2114:	6811      	ldr	r1, [r2, #0]
    2116:	f041 03b2 	orr.w	r3, r1, #178	; 0xb2
    211a:	6013      	str	r3, [r2, #0]
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	40024000 	.word	0x40024000
    2124:	40024004 	.word	0x40024004

00002128 <am_hal_wdt_halt>:
{

    //
    // Clear the watchdog enable bit.
    //
    AM_REGn(WDT, 0, CFG) &= ~AM_REG_WDT_CFG_WDTEN_M;
    2128:	4a02      	ldr	r2, [pc, #8]	; (2134 <am_hal_wdt_halt+0xc>)
    212a:	6813      	ldr	r3, [r2, #0]
    212c:	f023 0001 	bic.w	r0, r3, #1
    2130:	6010      	str	r0, [r2, #0]
    2132:	4770      	bx	lr
    2134:	40024000 	.word	0x40024000

00002138 <am_hal_wdt_int_clear>:
//
//*****************************************************************************
void
am_hal_wdt_int_clear(void)
{
    AM_REGn(WDT, 0, INTCLR) = AM_REG_WDT_INTCLR_WDT_M;
    2138:	4b01      	ldr	r3, [pc, #4]	; (2140 <am_hal_wdt_int_clear+0x8>)
    213a:	2201      	movs	r2, #1
    213c:	601a      	str	r2, [r3, #0]
    213e:	4770      	bx	lr
    2140:	40024208 	.word	0x40024208

00002144 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2144:	b410      	push	{r4}
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    2146:	f3ef 8310 	mrs	r3, PRIMASK
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    214a:	b083      	sub	sp, #12
    uint32_t ui32ConfigVal;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    214c:	0100      	lsls	r0, r0, #4
    214e:	4a09      	ldr	r2, [pc, #36]	; (2174 <am_hal_ctimer_start+0x30>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    2150:	9301      	str	r3, [sp, #4]
    2152:	b672      	cpsid	i

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    2154:	5883      	ldr	r3, [r0, r2]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    2156:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    215a:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    215e:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    2162:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    2164:	5081      	str	r1, [r0, r2]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2166:	9801      	ldr	r0, [sp, #4]
    2168:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_start()
    216c:	b003      	add	sp, #12
    216e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2172:	4770      	bx	lr
    2174:	4000800c 	.word	0x4000800c

00002178 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2178:	b082      	sub	sp, #8
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    217a:	f3ef 8310 	mrs	r3, PRIMASK
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    217e:	0100      	lsls	r0, r0, #4
    2180:	4a06      	ldr	r2, [pc, #24]	; (219c <am_hal_ctimer_clear+0x24>)
                                  (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2182:	9301      	str	r3, [sp, #4]
    2184:	b672      	cpsid	i

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    2186:	5883      	ldr	r3, [r0, r2]
    2188:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    218c:	4319      	orrs	r1, r3
    218e:	5081      	str	r1, [r0, r2]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2190:	9801      	ldr	r0, [sp, #4]
    2192:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_clear()
    2196:	b002      	add	sp, #8
    2198:	4770      	bx	lr
    219a:	bf00      	nop
    219c:	4000800c 	.word	0x4000800c

000021a0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    21a0:	b4f0      	push	{r4, r5, r6, r7}
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    21a2:	f3ef 8410 	mrs	r4, PRIMASK
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    21a6:	b082      	sub	sp, #8
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    21a8:	0100      	lsls	r0, r0, #4

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    21aa:	4d1c      	ldr	r5, [pc, #112]	; (221c <am_hal_ctimer_period_set+0x7c>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    21ac:	9401      	str	r4, [sp, #4]
                                   (ui32TimerNumber * TIMER_OFFSET));

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
    21ae:	4e1c      	ldr	r6, [pc, #112]	; (2220 <am_hal_ctimer_period_set+0x80>)
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    21b0:	4f1c      	ldr	r7, [pc, #112]	; (2224 <am_hal_ctimer_period_set+0x84>)
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    21b2:	b672      	cpsid	i
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    21b4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    21b8:	5944      	ldr	r4, [r0, r5]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    21ba:	d01a      	beq.n	21f2 <am_hal_ctimer_period_set+0x52>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    21bc:	f404 75c0 	and.w	r5, r4, #384	; 0x180
    21c0:	2d80      	cmp	r5, #128	; 0x80
    21c2:	d01b      	beq.n	21fc <am_hal_ctimer_period_set+0x5c>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    21c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21c8:	2500      	movs	r5, #0
    21ca:	4299      	cmp	r1, r3
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    21cc:	462c      	mov	r4, r5

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    21ce:	d01c      	beq.n	220a <am_hal_ctimer_period_set+0x6a>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    21d0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    21d4:	d01e      	beq.n	2214 <am_hal_ctimer_period_set+0x74>
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    21d6:	0c21      	lsrs	r1, r4, #16
    21d8:	040c      	lsls	r4, r1, #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    21da:	b291      	uxth	r1, r2
    21dc:	430d      	orrs	r5, r1
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    21de:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    21e2:	5185      	str	r5, [r0, r6]
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    21e4:	51c2      	str	r2, [r0, r7]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    21e6:	9801      	ldr	r0, [sp, #4]
    21e8:	f380 8810 	msr	PRIMASK, r0
} // am_hal_ctimer_period_set()
    21ec:	b002      	add	sp, #8
    21ee:	bcf0      	pop	{r4, r5, r6, r7}
    21f0:	4770      	bx	lr

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    21f2:	0c25      	lsrs	r5, r4, #16
    21f4:	f405 74c0 	and.w	r4, r5, #384	; 0x180
    21f8:	2c80      	cmp	r4, #128	; 0x80
    21fa:	d10a      	bne.n	2212 <am_hal_ctimer_period_set+0x72>
    21fc:	0415      	lsls	r5, r2, #16
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
        ui32Comp1 = ui32Period;
    21fe:	4614      	mov	r4, r2
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
        ui32Mode == AM_HAL_CTIMER_FN_PWM_REPEAT)
    {
        ui32Comp0 = ui32Period - ui32OnTime;
    2200:	1ad2      	subs	r2, r2, r3

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2202:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2206:	4299      	cmp	r1, r3
    2208:	d1e2      	bne.n	21d0 <am_hal_ctimer_period_set+0x30>
    {
        //
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    220a:	b297      	uxth	r7, r2
    220c:	433d      	orrs	r5, r7
    220e:	5185      	str	r5, [r0, r6]
    2210:	e7e9      	b.n	21e6 <am_hal_ctimer_period_set+0x46>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2212:	2500      	movs	r5, #0
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    {
        //
        // For timer B, write the values to the TIMERA compare register.
        //
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2214:	b296      	uxth	r6, r2
    2216:	4335      	orrs	r5, r6
    2218:	51c5      	str	r5, [r0, r7]
    221a:	e7e4      	b.n	21e6 <am_hal_ctimer_period_set+0x46>
    221c:	4000800c 	.word	0x4000800c
    2220:	40008004 	.word	0x40008004
    2224:	40008008 	.word	0x40008008
    2228:	65746e49 	.word	0x65746e49
    222c:	70757272 	.word	0x70757272
    2230:	0a212174 	.word	0x0a212174
    2234:	00000000 	.word	0x00000000
    2238:	65736552 	.word	0x65736552
    223c:	74532074 	.word	0x74532074
    2240:	73757461 	.word	0x73757461
    2244:	67655220 	.word	0x67655220
    2248:	65747369 	.word	0x65747369
    224c:	203d2072 	.word	0x203d2072
    2250:	30257830 	.word	0x30257830
    2254:	000a7832 	.word	0x000a7832
    2258:	65776f50 	.word	0x65776f50
    225c:	79432072 	.word	0x79432072
    2260:	64656c63 	.word	0x64656c63
    2264:	0000000a 	.word	0x0000000a
    2268:	63746157 	.word	0x63746157
    226c:	676f6468 	.word	0x676f6468
    2270:	73655220 	.word	0x73655220
    2274:	000a7465 	.word	0x000a7465
    2278:	75626544 	.word	0x75626544
    227c:	72656767 	.word	0x72656767
    2280:	696e4920 	.word	0x696e4920
    2284:	74616974 	.word	0x74616974
    2288:	52206465 	.word	0x52206465
    228c:	74657365 	.word	0x74657365
    2290:	0000000a 	.word	0x0000000a
    2294:	74666f53 	.word	0x74666f53
    2298:	65726177 	.word	0x65726177
    229c:	494f5020 	.word	0x494f5020
    22a0:	6f702820 	.word	0x6f702820
    22a4:	20726577 	.word	0x20726577
    22a8:	72206e6f 	.word	0x72206e6f
    22ac:	74657365 	.word	0x74657365
    22b0:	746e6920 	.word	0x746e6920
    22b4:	616e7265 	.word	0x616e7265
    22b8:	7473206c 	.word	0x7473206c
    22bc:	29657461 	.word	0x29657461
    22c0:	0000000a 	.word	0x0000000a
    22c4:	74666f53 	.word	0x74666f53
    22c8:	65726177 	.word	0x65726177
    22cc:	524f5020 	.word	0x524f5020
    22d0:	696e4920 	.word	0x696e4920
    22d4:	74616974 	.word	0x74616974
    22d8:	52206465 	.word	0x52206465
    22dc:	74657365 	.word	0x74657365
    22e0:	0000000a 	.word	0x0000000a
    22e4:	776f7242 	.word	0x776f7242
    22e8:	74756f6e 	.word	0x74756f6e
    22ec:	74654420 	.word	0x74654420
    22f0:	6f746365 	.word	0x6f746365
    22f4:	6e492072 	.word	0x6e492072
    22f8:	61697469 	.word	0x61697469
    22fc:	20646574 	.word	0x20646574
    2300:	65736552 	.word	0x65736552
    2304:	00000a74 	.word	0x00000a74
    2308:	65747845 	.word	0x65747845
    230c:	6c616e72 	.word	0x6c616e72
    2310:	73655220 	.word	0x73655220
    2314:	50207465 	.word	0x50207465
    2318:	49206e69 	.word	0x49206e69
    231c:	6974696e 	.word	0x6974696e
    2320:	64657461 	.word	0x64657461
    2324:	69685420 	.word	0x69685420
    2328:	65522073 	.word	0x65522073
    232c:	0a746573 	.word	0x0a746573
    2330:	00000000 	.word	0x00000000
    2334:	654e2020 	.word	0x654e2020
    2338:	69207478 	.word	0x69207478
    233c:	7265746e 	.word	0x7265746e
    2340:	74707572 	.word	0x74707572
    2344:	20736920 	.word	0x20736920
    2348:	2c544457 	.word	0x2c544457
    234c:	206f7320 	.word	0x206f7320
    2350:	6e692035 	.word	0x6e692035
    2354:	72726574 	.word	0x72726574
    2358:	73747075 	.word	0x73747075
    235c:	6f687320 	.word	0x6f687320
    2360:	20646c75 	.word	0x20646c75
    2364:	7563636f 	.word	0x7563636f
    2368:	000a2e72 	.word	0x000a2e72
    236c:	654e2020 	.word	0x654e2020
    2370:	69207478 	.word	0x69207478
    2374:	7265746e 	.word	0x7265746e
    2378:	74707572 	.word	0x74707572
    237c:	20736920 	.word	0x20736920
    2380:	20746f6e 	.word	0x20746f6e
    2384:	2c544457 	.word	0x2c544457
    2388:	206f7320 	.word	0x206f7320
    238c:	796c6e6f 	.word	0x796c6e6f
    2390:	69203320 	.word	0x69203320
    2394:	7265746e 	.word	0x7265746e
    2398:	74707572 	.word	0x74707572
    239c:	68732073 	.word	0x68732073
    23a0:	646c756f 	.word	0x646c756f
    23a4:	63636f20 	.word	0x63636f20
    23a8:	0a2e7275 	.word	0x0a2e7275
    23ac:	00000000 	.word	0x00000000
    23b0:	65736552 	.word	0x65736552
    23b4:	74532074 	.word	0x74532074
    23b8:	20657461 	.word	0x20657461
    23bc:	63617254 	.word	0x63617254
    23c0:	676e696b 	.word	0x676e696b
    23c4:	61784520 	.word	0x61784520
    23c8:	656c706d 	.word	0x656c706d
    23cc:	00000a2e 	.word	0x00000a2e
    23d0:	0a0a0a0a 	.word	0x0a0a0a0a
    23d4:	0a0a0a0a 	.word	0x0a0a0a0a
    23d8:	0a0a0a0a 	.word	0x0a0a0a0a
    23dc:	0a0a0a0a 	.word	0x0a0a0a0a
    23e0:	00000a0a 	.word	0x00000a0a

000023e4 <am_hal_cachectrl_defaults>:
    23e4:	50000001 00010300 00010101 685f6d61     ...P........am_h
    23f4:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2404:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2414:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2424:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2434:	6b6c635f 2e6e6567 00000063              _clkgen.c...
